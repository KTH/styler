{
    "error_id": "76",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 30. May 2004 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/76/StackTraceElementFactory.java\nindex 4ba4c3ce84..c6386024fc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/76/StackTraceElementFactory.java\n@@ -1,77 +1,76 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2004 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 30. May 2004 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\r\n-\r\n-import java.lang.reflect.Field;\r\n-\r\n-/**\r\n- * Factory for creating StackTraceElements.\r\n- * Factory for creating StackTraceElements.\r\n- *\r\n- * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\r\n- * @author Joe Walnes\r\n- */\r\n-public class StackTraceElementFactory {\r\n-\r\n-    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Native Method\", -2);\r\n-    }\r\n-\r\n-    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Unknown Source\", -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\r\n-        return create(declaringClass, methodName, fileName, -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        return create(declaringClass, methodName, fileName, lineNumber);\r\n-    }\r\n-\r\n-    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        StackTraceElement result = new Throwable().getStackTrace()[0];\r\n-        setField(result, \"declaringClass\", declaringClass);\r\n-        setField(result, \"methodName\", methodName);\r\n-        setField(result, \"fileName\", fileName);\r\n-        setField(result, \"lineNumber\", new Integer(lineNumber));\r\n-        return result;\r\n-    }\r\n-\r\n-    private void setField(StackTraceElement element, String fieldName, Object value) {\r\n-        try {\r\n-            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\r\n-            field.setAccessible(true);\r\n-            field.set(element, value);\r\n-        } catch (Exception e) {\r\n-            throw new ConversionException(e);\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2004 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 30. May 2004 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Factory for creating StackTraceElements.\n+ * Factory for creating StackTraceElements.\n+ *\n+ * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\n+ * @author Joe Walnes\n+ */\n+public class StackTraceElementFactory {\n+\n+    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\n+        return create(declaringClass, methodName, \"Native Method\", -2);\n+    }\n+\n+    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\n+        return create(declaringClass, methodName, \"Unknown Source\", -1);\n+    }\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\n+        return create(declaringClass, methodName, fileName, -1);\n+    }\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\n+        return create(declaringClass, methodName, fileName, lineNumber);\n+    }\n+\n+    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\n+        StackTraceElement result = new Throwable().getStackTrace()[0];\n+        setField(result, \"declaringClass\", declaringClass);\n+        setField(result, \"methodName\", methodName);\n+        setField(result, \"fileName\", fileName);\n+        setField(result, \"lineNumber\", new Integer(lineNumber));\n+        return result;\n+    }\n+\n+    private void setField(StackTraceElement element, String fieldName, Object value) {\n+        try {\n+            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            field.set(element, value);\n+        } catch (Exception e) {\n+            throw new ConversionException(e);\n+        }\n+    }\n+\n+}\n",
            "diff_size": 77
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/76/StackTraceElementFactory.java\nindex 4ba4c3ce84..0815505b88 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/76/StackTraceElementFactory.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 30. May 2004 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n \r\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\r\n@@ -39,39 +40,39 @@ import java.lang.reflect.Field;\n  */\r\n public class StackTraceElementFactory {\r\n \r\n-    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Native Method\", -2);\r\n-    }\r\n+  public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n+    return create(declaringClass, methodName, \"Native Method\", -2);\r\n+  }\r\n \r\n-    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Unknown Source\", -1);\r\n-    }\r\n+  public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\r\n+    return create(declaringClass, methodName, \"Unknown Source\", -1);\r\n+  }\r\n \r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\r\n-        return create(declaringClass, methodName, fileName, -1);\r\n-    }\r\n+  public StackTraceElement element(String declaringClass, String methodName, String fileName) {\r\n+    return create(declaringClass, methodName, fileName, -1);\r\n+  }\r\n \r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        return create(declaringClass, methodName, fileName, lineNumber);\r\n-    }\r\n+  public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n+    return create(declaringClass, methodName, fileName, lineNumber);\r\n+  }\r\n \r\n-    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        StackTraceElement result = new Throwable().getStackTrace()[0];\r\n-        setField(result, \"declaringClass\", declaringClass);\r\n-        setField(result, \"methodName\", methodName);\r\n-        setField(result, \"fileName\", fileName);\r\n-        setField(result, \"lineNumber\", new Integer(lineNumber));\r\n-        return result;\r\n-    }\r\n+  private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n+    StackTraceElement result = new Throwable().getStackTrace()[0];\r\n+    setField(result, \"declaringClass\", declaringClass);\r\n+    setField(result, \"methodName\", methodName);\r\n+    setField(result, \"fileName\", fileName);\r\n+    setField(result, \"lineNumber\", new Integer(lineNumber));\r\n+    return result;\r\n+  }\r\n \r\n-    private void setField(StackTraceElement element, String fieldName, Object value) {\r\n-        try {\r\n-            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\r\n-            field.setAccessible(true);\r\n-            field.set(element, value);\r\n-        } catch (Exception e) {\r\n-            throw new ConversionException(e);\r\n-        }\r\n+  private void setField(StackTraceElement element, String fieldName, Object value) {\r\n+    try {\r\n+      final Field field = StackTraceElement.class.getDeclaredField(fieldName);\r\n+      field.setAccessible(true);\r\n+      field.set(element, value);\r\n+    } catch (Exception e) {\r\n+      throw new ConversionException(e);\r\n     }\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/76/StackTraceElementFactory.java\nindex 4ba4c3ce84..2168e7d063 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/76/StackTraceElementFactory.java\n@@ -37,9 +37,8 @@ import java.lang.reflect.Field;\n  * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\r\n  * @author Joe Walnes\r\n  */\r\n-public class StackTraceElementFactory {\r\n-\r\n-    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n+public class StackTraceElementFactory {\n+  public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n         return create(declaringClass, methodName, \"Native Method\", -2);\r\n     }\r\n \r\n@@ -74,4 +73,4 @@ public class StackTraceElementFactory {\n         }\r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/76/StackTraceElementFactory.java\nindex 4ba4c3ce84..fbd0522e2d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/76/StackTraceElementFactory.java\n@@ -24,10 +24,9 @@\n  * \r\n  * Created on 30. May 2004 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\r\n-\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\n import java.lang.reflect.Field;\r\n \r\n /**\r\n@@ -36,42 +35,56 @@ import java.lang.reflect.Field;\n  *\r\n  * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\r\n  * @author Joe Walnes\r\n- */\r\n-public class StackTraceElementFactory {\r\n-\r\n-    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Native Method\", -2);\r\n-    }\r\n-\r\n-    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Unknown Source\", -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\r\n-        return create(declaringClass, methodName, fileName, -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        return create(declaringClass, methodName, fileName, lineNumber);\r\n-    }\r\n-\r\n-    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        StackTraceElement result = new Throwable().getStackTrace()[0];\r\n-        setField(result, \"declaringClass\", declaringClass);\r\n-        setField(result, \"methodName\", methodName);\r\n-        setField(result, \"fileName\", fileName);\r\n-        setField(result, \"lineNumber\", new Integer(lineNumber));\r\n-        return result;\r\n-    }\r\n-\r\n-    private void setField(StackTraceElement element, String fieldName, Object value) {\r\n-        try {\r\n-            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\r\n-            field.setAccessible(true);\r\n-            field.set(element, value);\r\n-        } catch (Exception e) {\r\n-            throw new ConversionException(e);\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+ */\n+\n+\n+public class StackTraceElementFactory {\n+    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\n+        return create(declaringClass,\n+                      methodName,\n+                      \"Native Method\",\n+                      -2);\n+    }\n+\n+\n+    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\n+    return create(declaringClass,\n+                  methodName,\n+                  \"Unknown Source\",\n+                  -1);\n+    }\n+\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\n+    return create(declaringClass, methodName, fileName, -1);\n+    }\n+\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\n+    return create(declaringClass,\n+                  methodName,\n+                  fileName,\n+                  lineNumber);\n+    }\n+\n+    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\n+        StackTraceElement result = new Throwable().getStackTrace()[0];\n+        setField(result, \"declaringClass\", declaringClass);\n+        setField(result, \"methodName\", methodName);\n+        setField(result, \"fileName\", fileName);\n+        setField(result,\n+                 \"lineNumber\",\n+                 new Integer(lineNumber));\n+        return result;\n+    }\n+\n+    private void setField(StackTraceElement element, String fieldName, Object value) {\n+        try {\n+            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            field.set(element, value);\n+        } catch (Exception e) {\n+            throw new ConversionException(e);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/76/StackTraceElementFactory.java\nindex 4ba4c3ce84..c6386024fc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/76/StackTraceElementFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/76/StackTraceElementFactory.java\n@@ -1,77 +1,76 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Copyright (C) 2004 Joe Walnes.\r\n- * Copyright (C) 2006, 2007 XStream Committers.\r\n- * All rights reserved.\r\n- *\r\n- * The software in this package is published under the terms of the BSD\r\n- * style license a copy of which has been included with this distribution in\r\n- * the LICENSE.txt file.\r\n- * \r\n- * Created on 30. May 2004 by Joe Walnes\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\r\n-\r\n-import java.lang.reflect.Field;\r\n-\r\n-/**\r\n- * Factory for creating StackTraceElements.\r\n- * Factory for creating StackTraceElements.\r\n- *\r\n- * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\r\n- * @author Joe Walnes\r\n- */\r\n-public class StackTraceElementFactory {\r\n-\r\n-    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Native Method\", -2);\r\n-    }\r\n-\r\n-    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\r\n-        return create(declaringClass, methodName, \"Unknown Source\", -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\r\n-        return create(declaringClass, methodName, fileName, -1);\r\n-    }\r\n-\r\n-    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        return create(declaringClass, methodName, fileName, lineNumber);\r\n-    }\r\n-\r\n-    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\r\n-        StackTraceElement result = new Throwable().getStackTrace()[0];\r\n-        setField(result, \"declaringClass\", declaringClass);\r\n-        setField(result, \"methodName\", methodName);\r\n-        setField(result, \"fileName\", fileName);\r\n-        setField(result, \"lineNumber\", new Integer(lineNumber));\r\n-        return result;\r\n-    }\r\n-\r\n-    private void setField(StackTraceElement element, String fieldName, Object value) {\r\n-        try {\r\n-            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\r\n-            field.setAccessible(true);\r\n-            field.set(element, value);\r\n-        } catch (Exception e) {\r\n-            throw new ConversionException(e);\r\n-        }\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Copyright (C) 2004 Joe Walnes.\n+ * Copyright (C) 2006, 2007 XStream Committers.\n+ * All rights reserved.\n+ *\n+ * The software in this package is published under the terms of the BSD\n+ * style license a copy of which has been included with this distribution in\n+ * the LICENSE.txt file.\n+ * \n+ * Created on 30. May 2004 by Joe Walnes\n+ */ package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.extended;\n+\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.converters.ConversionException;\n+\n+import java.lang.reflect.Field;\n+\n+/**\n+ * Factory for creating StackTraceElements.\n+ * Factory for creating StackTraceElements.\n+ *\n+ * @author <a href=\"mailto:boxley@thoughtworks.com\">B. K. Oxley (binkley)</a>\n+ * @author Joe Walnes\n+ */\n+public class StackTraceElementFactory {\n+\n+    public StackTraceElement nativeMethodElement(String declaringClass, String methodName) {\n+        return create(declaringClass, methodName, \"Native Method\", -2);\n+    }\n+\n+    public StackTraceElement unknownSourceElement(String declaringClass, String methodName) {\n+        return create(declaringClass, methodName, \"Unknown Source\", -1);\n+    }\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName) {\n+        return create(declaringClass, methodName, fileName, -1);\n+    }\n+\n+    public StackTraceElement element(String declaringClass, String methodName, String fileName, int lineNumber) {\n+        return create(declaringClass, methodName, fileName, lineNumber);\n+    }\n+\n+    private StackTraceElement create(String declaringClass, String methodName, String fileName, int lineNumber) {\n+        StackTraceElement result = new Throwable().getStackTrace()[0];\n+        setField(result, \"declaringClass\", declaringClass);\n+        setField(result, \"methodName\", methodName);\n+        setField(result, \"fileName\", fileName);\n+        setField(result, \"lineNumber\", new Integer(lineNumber));\n+        return result;\n+    }\n+\n+    private void setField(StackTraceElement element, String fieldName, Object value) {\n+        try {\n+            final Field field = StackTraceElement.class.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+            field.set(element, value);\n+        } catch (Exception e) {\n+            throw new ConversionException(e);\n+        }\n+    }\n+\n+}\n",
            "diff_size": 77
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}