{
    "error_id": "837",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 108).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if(time % 1 == 0) {\n          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n          pullTime = 0;\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/837/PSFTestTask.java\nindex fea8f20aab..519e34f4c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/837/PSFTestTask.java\n@@ -67,7 +67,7 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         pullTime += (System.currentTimeMillis() - startTs);\n         if(time % 1 == 0) {\n           LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n+          + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n           pullTime = 0;\n         }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/837/PSFTestTask.java\nindex fea8f20aab..72fb690848 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/837/PSFTestTask.java\n@@ -35,85 +35,94 @@ import java.util.Random;\n  * Created by payniexiao on 2017/7/18.\n  */\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n-\n-  public PSFTestTask(TaskContext taskContext) {\n-    super(taskContext);\n-  }\n-\n-  @Override public Long parse(Long key, Long value) {\n-    return null;\n-  }\n-\n-  @Override public void preProcess(TaskContext taskContext) { }\n-\n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    long col = conf.getLong(\"col\", 1000000);\n-    int len = conf.getInt(\"len\", 500000);\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      int exeTime = 1000000000;\n-      long pullTime = 0L;\n-      long pushTime = 0L;\n-\n-      for(int time = 0; time < exeTime; time++) {\n-        long startTs = System.currentTimeMillis();\n-        long[] indexes = generateIndexes(col, len);\n-        LOG.info(\"start to get values\");\n-        LongIndexGetFunc\n-          func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n-        TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"after to get values\");\n-        pullTime += (System.currentTimeMillis() - startTs);\n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n-          pullTime = 0;\n-        }\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-        double [] delta = new double[len];\n-        for(int i = 0; i < len; i++) {\n-          delta[i] = 1.0;\n-        }\n-        SparseLongKeyDoubleVector deltaV = new SparseLongKeyDoubleVector(col, indexes, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n-\n-        startTs = System.currentTimeMillis();\n-        client.increment(deltaV);\n-        client.clock().get();\n-        pushTime += (System.currentTimeMillis() - startTs);\n-\n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" push use time=\" + (pushTime / 1));\n-          pushTime = 0;\n-          taskContext.incEpoch();\n-        }\n+    public PSFTestTask(TaskContext taskContext) {\n+        super(taskContext);\n+    }\n+\n+    @Override\n+    public Long parse(Long key, Long value) {\n+        return null;\n+    }\n \n-        Thread.sleep(10000);\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+    @Override\n+    public void preProcess(TaskContext taskContext) {\n     }\n-  }\n \n-  private long [] generateIndexes(long range, int size) {\n-    Random r = new Random();\n-    long [] result = new long[size];\n-    for(int i = 0; i < size; i++) {\n-      result[i] = Math.abs(r.nextLong()) % range;\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+        long col = conf.getLong(\"col\", 1000000);\n+        int len = conf.getInt(\"len\", 500000);\n+        try {\n+            MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+            int exeTime = 1000000000;\n+            long pullTime = 0L;\n+            long pushTime = 0L;\n+\n+            for (int time = 0; time < exeTime; time++) {\n+                long startTs = System.currentTimeMillis();\n+                long[] indexes = generateIndexes(col, len);\n+                LOG.info(\"start to get values\");\n+                LongIndexGetFunc\n+                        func = new LongIndexGetFunc(\n+                        new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n+                TVector row = ((GetRowResult) client.get(func)).getRow();\n+                LOG.info(\"after to get values\");\n+                pullTime += (System.currentTimeMillis() - startTs);\n+                if (time % 1 == 0) {\n+                    LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                            taskContext.getEpoch()\n+                            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" +\n+                            sum((SparseLongKeyDoubleVector) row));\n+                    pullTime = 0;\n+                }\n+\n+                double[] delta = new double[len];\n+                for (int i = 0; i < len; i++) {\n+                    delta[i] = 1.0;\n+                }\n+                SparseLongKeyDoubleVector deltaV =\n+                        new SparseLongKeyDoubleVector(col, indexes, delta);\n+                deltaV.setMatrixId(client.getMatrixId());\n+                deltaV.setRowId(0);\n+\n+                startTs = System.currentTimeMillis();\n+                client.increment(deltaV);\n+                client.clock().get();\n+                pushTime += (System.currentTimeMillis() - startTs);\n+\n+                if (time % 1 == 0) {\n+                    LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                            taskContext.getEpoch()\n+                            + \" push use time=\" + (pushTime / 1));\n+                    pushTime = 0;\n+                    taskContext.incEpoch();\n+                }\n+\n+                Thread.sleep(10000);\n+            }\n+        } catch (Throwable x) {\n+            throw new AngelException(\"run task failed \", x);\n+        }\n     }\n-    return result;\n-  }\n-\n-  private double sum(SparseLongKeyDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+\n+    private long[] generateIndexes(long range, int size) {\n+        Random r = new Random();\n+        long[] result = new long[size];\n+        for (int i = 0; i < size; i++) {\n+            result[i] = Math.abs(r.nextLong()) % range;\n+        }\n+        return result;\n     }\n \n-    return ret;\n-  }\n+    private double sum(SparseLongKeyDoubleVector row) {\n+        double[] data = row.getValues();\n+        double ret = 0.0;\n+        for (int i = 0; i < data.length; i++) {\n+            ret += data[i];\n+        }\n+\n+        return ret;\n+    }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/837/PSFTestTask.java\nindex fea8f20aab..bceee85d79 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/837/PSFTestTask.java\n@@ -41,38 +41,39 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n     super(taskContext);\n   }\n \n-  @Override public Long parse(Long key, Long value) {\n+  @Override\n+public Long parse(Long key, Long value) {\n     return null;\n   }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+  @Override\n+public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n+  @Override\n+public void run(TaskContext taskContext) throws AngelException {\n     long col = conf.getLong(\"col\", 1000000);\n     int len = conf.getInt(\"len\", 500000);\n-    try{\n+    try {\n       MatrixClient client = taskContext.getMatrix(\"psf_test\");\n       int exeTime = 1000000000;\n       long pullTime = 0L;\n       long pushTime = 0L;\n \n-      for(int time = 0; time < exeTime; time++) {\n+      for (int time = 0; time < exeTime; time++) {\n         long startTs = System.currentTimeMillis();\n         long[] indexes = generateIndexes(col, len);\n         LOG.info(\"start to get values\");\n-        LongIndexGetFunc\n-          func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n+        LongIndexGetFunc func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         LOG.info(\"after to get values\");\n         pullTime += (System.currentTimeMillis() - startTs);\n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n-          pullTime = 0;\n+        if (time % 1 == 0) {\n+          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n+pullTime = 0;\n         }\n \n         double [] delta = new double[len];\n-        for(int i = 0; i < len; i++) {\n+        for (int i = 0; i < len; i++) {\n           delta[i] = 1.0;\n         }\n         SparseLongKeyDoubleVector deltaV = new SparseLongKeyDoubleVector(col, indexes, delta);\n@@ -84,10 +85,9 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         client.clock().get();\n         pushTime += (System.currentTimeMillis() - startTs);\n \n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" push use time=\" + (pushTime / 1));\n-          pushTime = 0;\n+        if (time % 1 == 0) {\n+          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" push use time=\" + (pushTime / 1));\n+pushTime = 0;\n           taskContext.incEpoch();\n         }\n \n@@ -98,10 +98,10 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n     }\n   }\n \n-  private long [] generateIndexes(long range, int size) {\n+  private long[] generateIndexes(long range, int size) {\n     Random r = new Random();\n-    long [] result = new long[size];\n-    for(int i = 0; i < size; i++) {\n+    long[] result = new long[size];\n+    for (int i = 0; i < size; i++) {\n       result[i] = Math.abs(r.nextLong()) % range;\n     }\n     return result;\n@@ -110,10 +110,10 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n   private double sum(SparseLongKeyDoubleVector row) {\n     double [] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n+    for (int i = 0; i < data.length; i++) {\n       ret += data[i];\n     }\n \n     return ret;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/837/PSFTestTask.java\nindex fea8f20aab..5777b2a5f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/837/PSFTestTask.java\n@@ -28,92 +28,89 @@ import com.tencent.angel.worker.task.BaseTask;\n import com.tencent.angel.worker.task.TaskContext;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.Random;\n \n /**\n  * Created by payniexiao on 2017/7/18.\n  */\n+\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n+    public PSFTestTask(TaskContext taskContext) {\n     super(taskContext);\n-  }\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n+    @Override\n+    public Long parse(Long key, Long value) {\n     return null;\n-  }\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n     long col = conf.getLong(\"col\", 1000000);\n     int len = conf.getInt(\"len\", 500000);\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      int exeTime = 1000000000;\n-      long pullTime = 0L;\n-      long pushTime = 0L;\n-\n-      for(int time = 0; time < exeTime; time++) {\n+    try {\n+        MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+        int exeTime = 1000000000;\n+        long pullTime = 0L;\n+        long pushTime = 0L;\n+        for (int time = 0; time < exeTime; time++) {\n         long startTs = System.currentTimeMillis();\n         long[] indexes = generateIndexes(col, len);\n         LOG.info(\"start to get values\");\n-        LongIndexGetFunc\n-          func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n+        LongIndexGetFunc func = new LongIndexGetFunc(new LongIndexGetParam(client.getMatrixId(), 0, indexes));\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         LOG.info(\"after to get values\");\n         pullTime += (System.currentTimeMillis() - startTs);\n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n-          pullTime = 0;\n+        if (time % 1 == 0) {\n+            LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector) row));\n+            pullTime = 0;\n         }\n \n-        double [] delta = new double[len];\n-        for(int i = 0; i < len; i++) {\n-          delta[i] = 1.0;\n+        double[] delta = new double[len];\n+        for (int i = 0; i < len; i++) {\n+                                                       delta[i] = 1.0;\n         }\n+\n         SparseLongKeyDoubleVector deltaV = new SparseLongKeyDoubleVector(col, indexes, delta);\n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n-\n         startTs = System.currentTimeMillis();\n         client.increment(deltaV);\n         client.clock().get();\n         pushTime += (System.currentTimeMillis() - startTs);\n-\n-        if(time % 1 == 0) {\n-          LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" push use time=\" + (pushTime / 1));\n-          pushTime = 0;\n-          taskContext.incEpoch();\n+        if (time % 1 == 0) {\n+            LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" push use time=\" + (pushTime / 1));\n+            pushTime = 0;\n+            taskContext.incEpoch();\n         }\n-\n         Thread.sleep(10000);\n-      }\n+        }\n     } catch (Throwable x) {\n       throw new AngelException(\"run task failed \", x);\n     }\n-  }\n+    }\n \n-  private long [] generateIndexes(long range, int size) {\n+    private long[] generateIndexes(long range, int size) {\n     Random r = new Random();\n-    long [] result = new long[size];\n-    for(int i = 0; i < size; i++) {\n-      result[i] = Math.abs(r.nextLong()) % range;\n+    long[] result = new long[size];\n+    for (int i = 0; i < size; i++) {\n+        result[i] = Math.abs(r.nextLong()) % range;\n     }\n     return result;\n-  }\n+    }\n \n-  private double sum(SparseLongKeyDoubleVector row) {\n-    double [] data = row.getValues();\n+    private double sum(SparseLongKeyDoubleVector row) {\n+    double[] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+    for (int i = 0; i < data.length; i++) {\n+        ret += data[i];\n     }\n-\n     return ret;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/837/PSFTestTask.java\nindex fea8f20aab..9169262524 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/837/PSFTestTask.java\n@@ -67,8 +67,8 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         pullTime += (System.currentTimeMillis() - startTs);\n         if(time % 1 == 0) {\n           LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n-          pullTime = 0;\n+            + \" pull use time=\" + (pullTime/1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n+            pullTime = 0;\n         }\n \n         double [] delta = new double[len];\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/837/PSFTestTask.java\nindex fea8f20aab..519e34f4c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/837/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/837/PSFTestTask.java\n@@ -67,7 +67,7 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         pullTime += (System.currentTimeMillis() - startTs);\n         if(time % 1 == 0) {\n           LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-            + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n+          + \" pull use time=\" + (pullTime / 1) + \", sum of row 0=\" + sum((SparseLongKeyDoubleVector)row));\n           pullTime = 0;\n         }\n \n",
            "diff_size": 1
        }
    ]
}