{
    "error_id": "517",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/517/ServerRowUtils.java\nindex 32ee3f4754..f682f545e4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/517/ServerRowUtils.java\n@@ -39,130 +39,132 @@ import com.tencent.angel.ps.storage.vector.storage.LongLongVectorStorage;\n  * Server row utilization\n  */\n public class ServerRowUtils {\n-  /////////////////////////////////////////////////////////////////////////////////////////////////\n-  // Notice: Basic type ServerRow only support Vector as inner storage now, so you can use methods\n-  // to get inner vector for basic type ServerRow.\n-  /////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get inner vector from server row\n-   *\n-   * @param row server row\n-   * @return inner vector\n-   */\n-  public static Vector getVector(ServerRow row) {\n-    if (row instanceof ServerIntFloatRow) {\n-      return getVector((ServerIntFloatRow) row);\n-    } else if (row instanceof ServerIntDoubleRow) {\n-      return getVector((ServerIntDoubleRow) row);\n-    } else if (row instanceof ServerIntIntRow) {\n-      return getVector((ServerIntIntRow) row);\n-    } else if (row instanceof ServerIntLongRow) {\n-      return getVector((ServerIntLongRow) row);\n-    } else if (row instanceof ServerLongFloatRow) {\n-      return getVector((ServerLongFloatRow) row);\n-    } else if (row instanceof ServerLongDoubleRow) {\n-      return getVector((ServerLongDoubleRow) row);\n-    } else if (row instanceof ServerLongIntRow) {\n-      return getVector((ServerLongIntRow) row);\n-    } else if (row instanceof ServerLongLongRow) {\n-      return getVector((ServerLongLongRow) row);\n-    } else {\n-      throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n-    }\n-  }\n-\n-  /**\n-   * Set inner vector to server row\n-   *\n-   * @param row server row\n-   * @param vector vector\n-   */\n-  public static void setVector(ServerRow row, Vector vector) {\n-    if (row instanceof ServerIntFloatRow) {\n-      setVector((ServerIntFloatRow) row, (IntFloatVector) vector);\n-    } else if (row instanceof ServerIntDoubleRow) {\n-      setVector((ServerIntDoubleRow) row, (IntDoubleVector) vector);\n-    } else if (row instanceof ServerIntIntRow) {\n-      setVector((ServerIntIntRow) row, (IntIntVector) vector);\n-    } else if (row instanceof ServerIntLongRow) {\n-      setVector((ServerIntLongRow) row, (IntLongVector) vector);\n-    } else if (row instanceof ServerLongFloatRow) {\n-      setVector((ServerLongFloatRow) row, (FloatVector) vector);\n-    } else if (row instanceof ServerLongDoubleRow) {\n-      setVector((ServerLongDoubleRow) row, (DoubleVector) vector);\n-    } else if (row instanceof ServerLongIntRow) {\n-      setVector((ServerLongIntRow) row, (IntVector) vector);\n-    } else if (row instanceof ServerLongLongRow) {\n-      setVector((ServerLongLongRow) row, (LongVector) vector);\n-    } else {\n-      throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n-    }\n-  }\n-\n-  public static IntDoubleVector getVector(ServerIntDoubleRow row) {\n-    return ((IntDoubleVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static IntFloatVector getVector(ServerIntFloatRow row) {\n-    return ((IntFloatVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static IntIntVector getVector(ServerIntIntRow row) {\n-    return ((IntIntVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static IntLongVector getVector(ServerIntLongRow row) {\n-    return ((IntLongVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static DoubleVector getVector(ServerLongDoubleRow row) {\n-    return ((LongDoubleVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static FloatVector getVector(ServerLongFloatRow row) {\n-    return ((LongFloatVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static IntVector getVector(ServerLongIntRow row) {\n-    return ((LongIntVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-  public static LongVector getVector(ServerLongLongRow row) {\n-    return ((LongLongVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n-\n-  public static void setVector(ServerIntDoubleRow row, IntDoubleVector vector) {\n-    ((IntDoubleVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-\n-  public static void setVector(ServerIntFloatRow row, IntFloatVector vector) {\n-    ((IntFloatVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerIntIntRow row, IntIntVector vector) {\n-    ((IntIntVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerIntLongRow row, IntLongVector vector) {\n-    ((IntLongVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerLongDoubleRow row, DoubleVector vector) {\n-    ((LongDoubleVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerLongFloatRow row, FloatVector vector) {\n-    ((LongFloatVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerLongIntRow row, IntVector vector) {\n-    ((LongIntVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n-  public static void setVector(ServerLongLongRow row, LongVector vector) {\n-    ((LongLongVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    /////////////////////////////////////////////////////////////////////////////////////////////////\n+    // Notice: Basic type ServerRow only support Vector as inner storage now, so you can use methods\n+    // to get inner vector for basic type ServerRow.\n+    /////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get inner vector from server row\n+     *\n+     * @param row server row\n+     * @return inner vector\n+     */\n+    public static Vector getVector(ServerRow row) {\n+        if (row instanceof ServerIntFloatRow) {\n+            return getVector((ServerIntFloatRow) row);\n+        } else if (row instanceof ServerIntDoubleRow) {\n+            return getVector((ServerIntDoubleRow) row);\n+        } else if (row instanceof ServerIntIntRow) {\n+            return getVector((ServerIntIntRow) row);\n+        } else if (row instanceof ServerIntLongRow) {\n+            return getVector((ServerIntLongRow) row);\n+        } else if (row instanceof ServerLongFloatRow) {\n+            return getVector((ServerLongFloatRow) row);\n+        } else if (row instanceof ServerLongDoubleRow) {\n+            return getVector((ServerLongDoubleRow) row);\n+        } else if (row instanceof ServerLongIntRow) {\n+            return getVector((ServerLongIntRow) row);\n+        } else if (row instanceof ServerLongLongRow) {\n+            return getVector((ServerLongLongRow) row);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"Only basic value type row use vector as storage\");\n+        }\n+    }\n+\n+    /**\n+     * Set inner vector to server row\n+     *\n+     * @param row    server row\n+     * @param vector vector\n+     */\n+    public static void setVector(ServerRow row, Vector vector) {\n+        if (row instanceof ServerIntFloatRow) {\n+            setVector((ServerIntFloatRow) row, (IntFloatVector) vector);\n+        } else if (row instanceof ServerIntDoubleRow) {\n+            setVector((ServerIntDoubleRow) row, (IntDoubleVector) vector);\n+        } else if (row instanceof ServerIntIntRow) {\n+            setVector((ServerIntIntRow) row, (IntIntVector) vector);\n+        } else if (row instanceof ServerIntLongRow) {\n+            setVector((ServerIntLongRow) row, (IntLongVector) vector);\n+        } else if (row instanceof ServerLongFloatRow) {\n+            setVector((ServerLongFloatRow) row, (FloatVector) vector);\n+        } else if (row instanceof ServerLongDoubleRow) {\n+            setVector((ServerLongDoubleRow) row, (DoubleVector) vector);\n+        } else if (row instanceof ServerLongIntRow) {\n+            setVector((ServerLongIntRow) row, (IntVector) vector);\n+        } else if (row instanceof ServerLongLongRow) {\n+            setVector((ServerLongLongRow) row, (LongVector) vector);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"Only basic value type row use vector as storage\");\n+        }\n+    }\n+\n+    public static IntDoubleVector getVector(ServerIntDoubleRow row) {\n+        return ((IntDoubleVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static IntFloatVector getVector(ServerIntFloatRow row) {\n+        return ((IntFloatVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static IntIntVector getVector(ServerIntIntRow row) {\n+        return ((IntIntVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static IntLongVector getVector(ServerIntLongRow row) {\n+        return ((IntLongVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static DoubleVector getVector(ServerLongDoubleRow row) {\n+        return ((LongDoubleVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static FloatVector getVector(ServerLongFloatRow row) {\n+        return ((LongFloatVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static IntVector getVector(ServerLongIntRow row) {\n+        return ((LongIntVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+    public static LongVector getVector(ServerLongLongRow row) {\n+        return ((LongLongVectorStorage) (row.getStorage())).getVector();\n+    }\n+\n+\n+    public static void setVector(ServerIntDoubleRow row, IntDoubleVector vector) {\n+        ((IntDoubleVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+\n+    public static void setVector(ServerIntFloatRow row, IntFloatVector vector) {\n+        ((IntFloatVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerIntIntRow row, IntIntVector vector) {\n+        ((IntIntVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerIntLongRow row, IntLongVector vector) {\n+        ((IntLongVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerLongDoubleRow row, DoubleVector vector) {\n+        ((LongDoubleVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerLongFloatRow row, FloatVector vector) {\n+        ((LongFloatVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerLongIntRow row, IntVector vector) {\n+        ((LongIntVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n+\n+    public static void setVector(ServerLongLongRow row, LongVector vector) {\n+        ((LongLongVectorStorage) (row.getStorage())).setVector(vector);\n+    }\n }\n",
            "diff_size": 128
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/517/ServerRowUtils.java\nindex 32ee3f4754..f4bb42d652 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/517/ServerRowUtils.java\n@@ -165,4 +165,4 @@ public class ServerRowUtils {\n   public static void setVector(ServerLongLongRow row, LongVector vector) {\n     ((LongLongVectorStorage) (row.getStorage())).setVector(vector);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 55.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/517/ServerRowUtils.java\nindex 32ee3f4754..51d1a20946 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/517/ServerRowUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/517/ServerRowUtils.java\n@@ -38,6 +38,7 @@ import com.tencent.angel.ps.storage.vector.storage.LongLongVectorStorage;\n /**\n  * Server row utilization\n  */\n+\n public class ServerRowUtils {\n   /////////////////////////////////////////////////////////////////////////////////////////////////\n   // Notice: Basic type ServerRow only support Vector as inner storage now, so you can use methods\n@@ -50,27 +51,28 @@ public class ServerRowUtils {\n    * @param row server row\n    * @return inner vector\n    */\n-  public static Vector getVector(ServerRow row) {\n+\n+    public static Vector getVector(ServerRow row) {\n     if (row instanceof ServerIntFloatRow) {\n-      return getVector((ServerIntFloatRow) row);\n+        return getVector((ServerIntFloatRow) row);\n     } else if (row instanceof ServerIntDoubleRow) {\n-      return getVector((ServerIntDoubleRow) row);\n+                                                      return getVector((ServerIntDoubleRow) row);\n     } else if (row instanceof ServerIntIntRow) {\n-      return getVector((ServerIntIntRow) row);\n-    } else if (row instanceof ServerIntLongRow) {\n-      return getVector((ServerIntLongRow) row);\n-    } else if (row instanceof ServerLongFloatRow) {\n-      return getVector((ServerLongFloatRow) row);\n-    } else if (row instanceof ServerLongDoubleRow) {\n-      return getVector((ServerLongDoubleRow) row);\n-    } else if (row instanceof ServerLongIntRow) {\n-      return getVector((ServerLongIntRow) row);\n-    } else if (row instanceof ServerLongLongRow) {\n-      return getVector((ServerLongLongRow) row);\n-    } else {\n-      throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n-    }\n-  }\n+        return getVector((ServerIntIntRow) row);\n+           } else if (row instanceof ServerIntLongRow) {\n+        return getVector((ServerIntLongRow) row);\n+           } else if (row instanceof ServerLongFloatRow) {\n+               return getVector((ServerLongFloatRow) row);\n+                  } else if (row instanceof ServerLongDoubleRow) {\n+               return getVector((ServerLongDoubleRow) row);\n+                  } else if (row instanceof ServerLongIntRow) {\n+                      return getVector((ServerLongIntRow) row);\n+                         } else if (row instanceof ServerLongLongRow) {\n+                      return getVector((ServerLongLongRow) row);\n+                         } else {\n+                           throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n+                         }\n+    }\n \n   /**\n    * Set inner vector to server row\n@@ -78,91 +80,90 @@ public class ServerRowUtils {\n    * @param row server row\n    * @param vector vector\n    */\n-  public static void setVector(ServerRow row, Vector vector) {\n+\n+    public static void setVector(ServerRow row, Vector vector) {\n     if (row instanceof ServerIntFloatRow) {\n-      setVector((ServerIntFloatRow) row, (IntFloatVector) vector);\n+        setVector((ServerIntFloatRow) row, (IntFloatVector) vector);\n     } else if (row instanceof ServerIntDoubleRow) {\n-      setVector((ServerIntDoubleRow) row, (IntDoubleVector) vector);\n+                                                                   setVector((ServerIntDoubleRow) row, (IntDoubleVector) vector);\n     } else if (row instanceof ServerIntIntRow) {\n-      setVector((ServerIntIntRow) row, (IntIntVector) vector);\n-    } else if (row instanceof ServerIntLongRow) {\n-      setVector((ServerIntLongRow) row, (IntLongVector) vector);\n-    } else if (row instanceof ServerLongFloatRow) {\n-      setVector((ServerLongFloatRow) row, (FloatVector) vector);\n-    } else if (row instanceof ServerLongDoubleRow) {\n-      setVector((ServerLongDoubleRow) row, (DoubleVector) vector);\n-    } else if (row instanceof ServerLongIntRow) {\n-      setVector((ServerLongIntRow) row, (IntVector) vector);\n-    } else if (row instanceof ServerLongLongRow) {\n-      setVector((ServerLongLongRow) row, (LongVector) vector);\n-    } else {\n-      throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n-    }\n-  }\n-\n-  public static IntDoubleVector getVector(ServerIntDoubleRow row) {\n+        setVector((ServerIntIntRow) row, (IntIntVector) vector);\n+           } else if (row instanceof ServerIntLongRow) {\n+        setVector((ServerIntLongRow) row, (IntLongVector) vector);\n+           } else if (row instanceof ServerLongFloatRow) {\n+               setVector((ServerLongFloatRow) row, (FloatVector) vector);\n+                  } else if (row instanceof ServerLongDoubleRow) {\n+               setVector((ServerLongDoubleRow) row, (DoubleVector) vector);\n+                  } else if (row instanceof ServerLongIntRow) {\n+                      setVector((ServerLongIntRow) row, (IntVector) vector);\n+                         } else if (row instanceof ServerLongLongRow) {\n+                      setVector((ServerLongLongRow) row, (LongVector) vector);\n+                         } else {\n+                           throw new UnsupportedOperationException(\"Only basic value type row use vector as storage\");\n+                         }\n+    }\n+\n+    public static IntDoubleVector getVector(ServerIntDoubleRow row) {\n     return ((IntDoubleVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static IntFloatVector getVector(ServerIntFloatRow row) {\n+    public static IntFloatVector getVector(ServerIntFloatRow row) {\n     return ((IntFloatVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static IntIntVector getVector(ServerIntIntRow row) {\n+    public static IntIntVector getVector(ServerIntIntRow row) {\n     return ((IntIntVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static IntLongVector getVector(ServerIntLongRow row) {\n+    public static IntLongVector getVector(ServerIntLongRow row) {\n     return ((IntLongVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static DoubleVector getVector(ServerLongDoubleRow row) {\n+    public static DoubleVector getVector(ServerLongDoubleRow row) {\n     return ((LongDoubleVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static FloatVector getVector(ServerLongFloatRow row) {\n+    public static FloatVector getVector(ServerLongFloatRow row) {\n     return ((LongFloatVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static IntVector getVector(ServerLongIntRow row) {\n+    public static IntVector getVector(ServerLongIntRow row) {\n     return ((LongIntVectorStorage) (row.getStorage())).getVector();\n-  }\n+    }\n \n-  public static LongVector getVector(ServerLongLongRow row) {\n+    public static LongVector getVector(ServerLongLongRow row) {\n     return ((LongLongVectorStorage) (row.getStorage())).getVector();\n-  }\n-\n+    }\n \n-  public static void setVector(ServerIntDoubleRow row, IntDoubleVector vector) {\n+    public static void setVector(ServerIntDoubleRow row, IntDoubleVector vector) {\n     ((IntDoubleVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-\n+    }\n \n-  public static void setVector(ServerIntFloatRow row, IntFloatVector vector) {\n+    public static void setVector(ServerIntFloatRow row, IntFloatVector vector) {\n     ((IntFloatVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerIntIntRow row, IntIntVector vector) {\n+    public static void setVector(ServerIntIntRow row, IntIntVector vector) {\n     ((IntIntVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerIntLongRow row, IntLongVector vector) {\n+    public static void setVector(ServerIntLongRow row, IntLongVector vector) {\n     ((IntLongVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerLongDoubleRow row, DoubleVector vector) {\n+    public static void setVector(ServerLongDoubleRow row, DoubleVector vector) {\n     ((LongDoubleVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerLongFloatRow row, FloatVector vector) {\n+    public static void setVector(ServerLongFloatRow row, FloatVector vector) {\n     ((LongFloatVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerLongIntRow row, IntVector vector) {\n+    public static void setVector(ServerLongIntRow row, IntVector vector) {\n     ((LongIntVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n+    }\n \n-  public static void setVector(ServerLongLongRow row, LongVector vector) {\n+    public static void setVector(ServerLongLongRow row, LongVector vector) {\n     ((LongLongVectorStorage) (row.getStorage())).setVector(vector);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}