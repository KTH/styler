{
    "error_id": "159",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "public class Identifier implements Serializable {\n\n    public static final String UUID_REX = \n            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/159/Identifier.java\nindex 9313c03ad6..8389ee39f0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/159/Identifier.java\n@@ -31,7 +31,7 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n+public static final String UUID_REX =\n             \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "41",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "47",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "39",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "45",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "45",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "51",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "30",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "50",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "13",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "17",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "13",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "19",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "13",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "19",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "25",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "35",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "231",
                    "column": "32",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "38",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/159/Identifier.java\nindex 9313c03ad6..fffd0ac692 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/159/Identifier.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.index.query;\n \n \n@@ -31,204 +32,204 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n+  public static final String UUID_REX =\n+      \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+  public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n-    public enum Type {\n-        UUID, NAME, EMAIL\n-    }\n+  public enum Type {\n+    UUID, NAME, EMAIL\n+  }\n \n \n-    Type type;\n-    Object value;\n+  Type type;\n+  Object value;\n \n-    static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n-    // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n-    // ddress https://issues.apache.org/jira/browse/USERGRID-94\n-    static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n+  static Pattern emailRegEx = Pattern.compile(EMAIL_REX);\n+  // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n+  // ddress https://issues.apache.org/jira/browse/USERGRID-94\n+  static Pattern nameRegEx = Pattern.compile(\"[a-zA-Z0-9_\\\\-./ ]*\");\n \n \n-    private Identifier( Type type, Object value ) {\n-        this.type = type;\n-        this.value = value;\n-    }\n+  private Identifier(Type type, Object value) {\n+    this.type = type;\n+    this.value = value;\n+  }\n \n \n-    public static Identifier from( Object obj ) {\n-        if ( obj == null ) {\n-            return null;\n-        }\n-        if ( obj instanceof UUID ) {\n-            return new Identifier( Type.UUID, obj );\n-        }\n-        if ( obj instanceof String ) {\n-            UUID uuid = UUIDUtils.tryGetUUID( ( String ) obj );\n-            if ( uuid != null ) {\n-                return new Identifier( Type.UUID, uuid );\n-            }\n-            Matcher m = emailRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );\n-            }\n-            m = nameRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.NAME, ( ( String ) obj ).toLowerCase() );\n-            }\n-        }\n-        return null;\n+  public static Identifier from(Object obj) {\n+    if (obj == null) {\n+      return null;\n+    }\n+    if (obj instanceof UUID) {\n+      return new Identifier(Type.UUID, obj);\n     }\n+    if (obj instanceof String) {\n+      UUID uuid = UUIDUtils.tryGetUUID((String) obj);\n+      if (uuid != null) {\n+        return new Identifier(Type.UUID, uuid);\n+      }\n+      Matcher m = emailRegEx.matcher((String) obj);\n+      if (m.matches()) {\n+        return new Identifier(Type.EMAIL, ((String) obj).toLowerCase());\n+      }\n+      m = nameRegEx.matcher((String) obj);\n+      if (m.matches()) {\n+        return new Identifier(Type.NAME, ((String) obj).toLowerCase());\n+      }\n+    }\n+    return null;\n+  }\n \n \n-    public static Identifier fromUUID( UUID uuid ) {\n-        if ( uuid == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.UUID, uuid );\n+  public static Identifier fromUUID(UUID uuid) {\n+    if (uuid == null) {\n+      return null;\n     }\n+    return new Identifier(Type.UUID, uuid);\n+  }\n \n \n-    public static Identifier fromName( String name ) {\n-        if ( name == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.NAME, name );\n+  public static Identifier fromName(String name) {\n+    if (name == null) {\n+      return null;\n     }\n+    return new Identifier(Type.NAME, name);\n+  }\n \n \n-    public static Identifier fromEmail( String email ) {\n-        if ( email == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.EMAIL, email );\n+  public static Identifier fromEmail(String email) {\n+    if (email == null) {\n+      return null;\n     }\n+    return new Identifier(Type.EMAIL, email);\n+  }\n \n \n-    @JsonIgnore\n-    public UUID getUUID() {\n-        if ( type != Type.UUID ) {\n-            return null;\n-        }\n-        return ( UUID ) value;\n+  @JsonIgnore\n+  public UUID getUUID() {\n+    if (type != Type.UUID) {\n+      return null;\n     }\n+    return (UUID) value;\n+  }\n \n \n-    @JsonIgnore\n-    public boolean isUUID() {\n-        return type == Type.UUID;\n-    }\n+  @JsonIgnore\n+  public boolean isUUID() {\n+    return type == Type.UUID;\n+  }\n \n \n-    @JsonIgnore\n-    public String getEmail() {\n-        if ( type != Type.EMAIL ) {\n-            return null;\n-        }\n-        return ( String ) value;\n+  @JsonIgnore\n+  public String getEmail() {\n+    if (type != Type.EMAIL) {\n+      return null;\n     }\n+    return (String) value;\n+  }\n \n \n-    @JsonIgnore\n-    public boolean isEmail() {\n-        return type == Type.EMAIL;\n-    }\n+  @JsonIgnore\n+  public boolean isEmail() {\n+    return type == Type.EMAIL;\n+  }\n \n \n-    @JsonIgnore\n-    public String getName() {\n-        if ( type != Type.NAME ) {\n-            return null;\n-        }\n-        return ( String ) value;\n+  @JsonIgnore\n+  public String getName() {\n+    if (type != Type.NAME) {\n+      return null;\n     }\n+    return (String) value;\n+  }\n \n \n-    @JsonIgnore\n-    public boolean isName() {\n-        return type == Type.NAME;\n-    }\n+  @JsonIgnore\n+  public boolean isName() {\n+    return type == Type.NAME;\n+  }\n \n \n-    public Type getType() {\n-        return type;\n-    }\n+  public Type getType() {\n+    return type;\n+  }\n \n \n-    @Override\n-    public String toString() {\n-        return value != null ? value.toString() : null;\n-    }\n+  @Override\n+  public String toString() {\n+    return value != null ? value.toString() : null;\n+  }\n+\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ((type == null) ? 0 : type.hashCode());\n+    result = prime * result + ((value == null) ? 0 : value.hashCode());\n+    return result;\n+  }\n \n \n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + ( ( type == null ) ? 0 : type.hashCode() );\n-        result = prime * result + ( ( value == null ) ? 0 : value.hashCode() );\n-        return result;\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    Identifier other = (Identifier) obj;\n+    if (type != other.type) {\n+      return false;\n+    }\n+    if (value == null) {\n+      if (other.value != null) {\n+        return false;\n+      }\n+    } else if (!value.equals(other.value)) {\n+      return false;\n     }\n+    return true;\n+  }\n \n \n-    @Override\n-    public boolean equals( Object obj ) {\n-        if ( this == obj ) {\n-            return true;\n+  public static List<Identifier> fromList(List<String> l) {\n+    List<Identifier> identifiers = null;\n+    if ((l != null) && (l.size() > 0)) {\n+      for (String s : l) {\n+        Identifier identifier = Identifier.from(s);\n+        if (identifier != null) {\n+          if (identifiers == null) {\n+            identifiers = new ArrayList<Identifier>();\n+          }\n+          identifiers.add(identifier);\n         }\n-        if ( obj == null ) {\n-            return false;\n-        }\n-        if ( getClass() != obj.getClass() ) {\n-            return false;\n-        }\n-        Identifier other = ( Identifier ) obj;\n-        if ( type != other.type ) {\n-            return false;\n-        }\n-        if ( value == null ) {\n-            if ( other.value != null ) {\n-                return false;\n-            }\n-        }\n-        else if ( !value.equals( other.value ) ) {\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-\n-    public static List<Identifier> fromList( List<String> l ) {\n-        List<Identifier> identifiers = null;\n-        if ( ( l != null ) && ( l.size() > 0 ) ) {\n-            for ( String s : l ) {\n-                Identifier identifier = Identifier.from( s );\n-                if ( identifier != null ) {\n-                    if ( identifiers == null ) {\n-                        identifiers = new ArrayList<Identifier>();\n-                    }\n-                    identifiers.add( identifier );\n-                }\n-            }\n-        }\n-        return identifiers;\n+      }\n     }\n+    return identifiers;\n+  }\n \n \n-    // for serialization\n-    public Identifier() { }\n+  // for serialization\n+  public Identifier() {\n+  }\n \n \n-    // for serialization\n-    public Object getValue() {\n-        return value;\n-    }\n+  // for serialization\n+  public Object getValue() {\n+    return value;\n+  }\n \n \n-    // for serialization\n-    public void setValue( Object value ) {\n-        if ( isUUID() && value instanceof String ) {\n-            value = UUID.fromString( ( String ) value );\n-        }\n-        this.value = value;\n+  // for serialization\n+  public void setValue(Object value) {\n+    if (isUUID() && value instanceof String) {\n+      value = UUID.fromString((String) value);\n     }\n+    this.value = value;\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/159/Identifier.java\nindex 9313c03ad6..c8e25bdb91 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/159/Identifier.java\n@@ -31,9 +31,8 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n         UUID, NAME, EMAIL\n@@ -231,4 +230,4 @@ public class Identifier implements Serializable {\n         }\n         this.value = value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/159/Identifier.java\nindex 9313c03ad6..c8551ef142 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/159/Identifier.java\n@@ -23,20 +23,18 @@ import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-\n import org.apache.usergrid.persistence.index.utils.UUIDUtils;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n \n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n-\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+    public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n     public enum Type {\n-        UUID, NAME, EMAIL\n+        UUID,\n+        NAME,\n+        EMAIL\n     }\n \n \n@@ -46,6 +44,7 @@ public class Identifier implements Serializable {\n     static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n     // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n     // ddress https://issues.apache.org/jira/browse/USERGRID-94\n+\n     static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n \n \n@@ -215,20 +214,27 @@ public class Identifier implements Serializable {\n \n \n     // for serialization\n-    public Identifier() { }\n+\n+\n+    public Identifier() {\n+    }\n \n \n     // for serialization\n+\n+\n     public Object getValue() {\n         return value;\n     }\n \n \n     // for serialization\n+\n+\n     public void setValue( Object value ) {\n         if ( isUUID() && value instanceof String ) {\n             value = UUID.fromString( ( String ) value );\n         }\n         this.value = value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/159/Identifier.java\nindex 9313c03ad6..a00b8deae8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/159/Identifier.java\n@@ -31,204 +31,205 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+\n+\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n-    public enum Type {\n-        UUID, NAME, EMAIL\n-    }\n+public enum Type {\n+    UUID, NAME, EMAIL\n+}\n \n \n-    Type type;\n-    Object value;\n+Type type;\n+Object value;\n \n-    static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n-    // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n-    // ddress https://issues.apache.org/jira/browse/USERGRID-94\n-    static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n+static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n+// \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n+// ddress https://issues.apache.org/jira/browse/USERGRID-94\n+static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n \n \n-    private Identifier( Type type, Object value ) {\n-        this.type = type;\n-        this.value = value;\n-    }\n+private Identifier( Type type, Object value ) {\n+    this.type = type;\n+    this.value = value;\n+}\n \n \n-    public static Identifier from( Object obj ) {\n-        if ( obj == null ) {\n-            return null;\n+public static Identifier from( Object obj ) {\n+    if ( obj == null ) {\n+        return null;\n+    }\n+    if ( obj instanceof UUID ) {\n+        return new Identifier( Type.UUID, obj );\n+    }\n+    if ( obj instanceof String ) {\n+        UUID uuid = UUIDUtils.tryGetUUID( ( String ) obj );\n+        if ( uuid != null ) {\n+            return new Identifier( Type.UUID, uuid );\n         }\n-        if ( obj instanceof UUID ) {\n-            return new Identifier( Type.UUID, obj );\n+        Matcher m = emailRegEx.matcher( ( String ) obj );\n+        if ( m.matches() ) {\n+            return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );\n         }\n-        if ( obj instanceof String ) {\n-            UUID uuid = UUIDUtils.tryGetUUID( ( String ) obj );\n-            if ( uuid != null ) {\n-                return new Identifier( Type.UUID, uuid );\n-            }\n-            Matcher m = emailRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );\n-            }\n-            m = nameRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.NAME, ( ( String ) obj ).toLowerCase() );\n-            }\n+        m = nameRegEx.matcher( ( String ) obj );\n+        if ( m.matches() ) {\n+            return new Identifier( Type.NAME, ( ( String ) obj ).toLowerCase() );\n         }\n-        return null;\n     }\n+    return null;\n+}\n \n \n-    public static Identifier fromUUID( UUID uuid ) {\n-        if ( uuid == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.UUID, uuid );\n+public static Identifier fromUUID( UUID uuid ) {\n+    if ( uuid == null ) {\n+        return null;\n     }\n+    return new Identifier( Type.UUID, uuid );\n+}\n \n \n-    public static Identifier fromName( String name ) {\n-        if ( name == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.NAME, name );\n+public static Identifier fromName( String name ) {\n+    if ( name == null ) {\n+        return null;\n     }\n+    return new Identifier( Type.NAME, name );\n+}\n \n \n-    public static Identifier fromEmail( String email ) {\n-        if ( email == null ) {\n-            return null;\n-        }\n-        return new Identifier( Type.EMAIL, email );\n+public static Identifier fromEmail( String email ) {\n+    if ( email == null ) {\n+        return null;\n     }\n+    return new Identifier( Type.EMAIL, email );\n+}\n \n \n-    @JsonIgnore\n-    public UUID getUUID() {\n-        if ( type != Type.UUID ) {\n-            return null;\n-        }\n-        return ( UUID ) value;\n+@JsonIgnore\n+public UUID getUUID() {\n+    if ( type != Type.UUID ) {\n+        return null;\n     }\n+    return ( UUID ) value;\n+}\n \n \n-    @JsonIgnore\n-    public boolean isUUID() {\n-        return type == Type.UUID;\n-    }\n+@JsonIgnore\n+public boolean isUUID() {\n+    return type == Type.UUID;\n+}\n \n \n-    @JsonIgnore\n-    public String getEmail() {\n-        if ( type != Type.EMAIL ) {\n-            return null;\n-        }\n-        return ( String ) value;\n+@JsonIgnore\n+public String getEmail() {\n+    if ( type != Type.EMAIL ) {\n+        return null;\n     }\n+    return ( String ) value;\n+}\n \n \n-    @JsonIgnore\n-    public boolean isEmail() {\n-        return type == Type.EMAIL;\n-    }\n+@JsonIgnore\n+public boolean isEmail() {\n+    return type == Type.EMAIL;\n+}\n \n \n-    @JsonIgnore\n-    public String getName() {\n-        if ( type != Type.NAME ) {\n-            return null;\n-        }\n-        return ( String ) value;\n+@JsonIgnore\n+public String getName() {\n+    if ( type != Type.NAME ) {\n+        return null;\n     }\n+    return ( String ) value;\n+}\n \n \n-    @JsonIgnore\n-    public boolean isName() {\n-        return type == Type.NAME;\n-    }\n+@JsonIgnore\n+public boolean isName() {\n+    return type == Type.NAME;\n+}\n \n \n-    public Type getType() {\n-        return type;\n-    }\n+public Type getType() {\n+    return type;\n+}\n \n \n-    @Override\n-    public String toString() {\n-        return value != null ? value.toString() : null;\n-    }\n+@Override\n+public String toString() {\n+    return value != null ? value.toString() : null;\n+}\n \n \n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + ( ( type == null ) ? 0 : type.hashCode() );\n-        result = prime * result + ( ( value == null ) ? 0 : value.hashCode() );\n-        return result;\n-    }\n+@Override\n+public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + ( ( type == null ) ? 0 : type.hashCode() );\n+    result = prime * result + ( ( value == null ) ? 0 : value.hashCode() );\n+    return result;\n+}\n \n \n-    @Override\n-    public boolean equals( Object obj ) {\n-        if ( this == obj ) {\n-            return true;\n-        }\n-        if ( obj == null ) {\n-            return false;\n-        }\n-        if ( getClass() != obj.getClass() ) {\n-            return false;\n-        }\n-        Identifier other = ( Identifier ) obj;\n-        if ( type != other.type ) {\n-            return false;\n-        }\n-        if ( value == null ) {\n-            if ( other.value != null ) {\n-                return false;\n-            }\n-        }\n-        else if ( !value.equals( other.value ) ) {\n+@Override\n+public boolean equals( Object obj ) {\n+    if ( this == obj ) {\n+        return true;\n+    }\n+    if ( obj == null ) {\n+        return false;\n+    }\n+    if ( getClass() != obj.getClass() ) {\n+        return false;\n+    }\n+    Identifier other = ( Identifier ) obj;\n+    if ( type != other.type ) {\n+        return false;\n+    }\n+    if ( value == null ) {\n+        if ( other.value != null ) {\n             return false;\n         }\n-        return true;\n     }\n+    else if ( !value.equals( other.value ) ) {\n+        return false;\n+    }\n+    return true;\n+}\n \n \n-    public static List<Identifier> fromList( List<String> l ) {\n-        List<Identifier> identifiers = null;\n-        if ( ( l != null ) && ( l.size() > 0 ) ) {\n-            for ( String s : l ) {\n-                Identifier identifier = Identifier.from( s );\n-                if ( identifier != null ) {\n-                    if ( identifiers == null ) {\n-                        identifiers = new ArrayList<Identifier>();\n-                    }\n-                    identifiers.add( identifier );\n+public static List<Identifier> fromList( List<String> l ) {\n+    List<Identifier> identifiers = null;\n+    if ( ( l != null ) && ( l.size() > 0 ) ) {\n+        for ( String s : l ) {\n+            Identifier identifier = Identifier.from( s );\n+            if ( identifier != null ) {\n+                if ( identifiers == null ) {\n+                    identifiers = new ArrayList<Identifier>();\n                 }\n+                identifiers.add( identifier );\n             }\n         }\n-        return identifiers;\n     }\n+    return identifiers;\n+}\n \n \n-    // for serialization\n-    public Identifier() { }\n+// for serialization\n+public Identifier() { }\n \n \n-    // for serialization\n-    public Object getValue() {\n-        return value;\n-    }\n+// for serialization\n+public Object getValue() {\n+    return value;\n+}\n \n \n-    // for serialization\n-    public void setValue( Object value ) {\n-        if ( isUUID() && value instanceof String ) {\n-            value = UUID.fromString( ( String ) value );\n-        }\n-        this.value = value;\n+// for serialization\n+public void setValue( Object value ) {\n+    if ( isUUID() && value instanceof String ) {\n+        value = UUID.fromString( ( String ) value );\n     }\n+    this.value = value;\n+}\n }\n",
            "diff_size": 173
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/159/Identifier.java\nindex 9313c03ad6..8389ee39f0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/159/Identifier.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/159/Identifier.java\n@@ -31,7 +31,7 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n+public static final String UUID_REX =\n             \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n",
            "diff_size": 1
        }
    ]
}