{
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "484",
                "severity": "error",
                "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "            when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        socket = new TestSocket(inetAddress, 9999, 10);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/3/MPDSocketTest.java\nindex 05a415bef7..1baa254126 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/3/MPDSocketTest.java\n@@ -481,7 +481,7 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE);\n         } catch (IOException e) {\n-            e.printStackTrace();\n+    e .printStackTrace();\n         }\n \n         socket = new TestSocket(inetAddress, 9999, 10);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/3/MPDSocketTest.java\nindex 05a415bef7..90331b6fc9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/3/MPDSocketTest.java\n@@ -48,8 +48,8 @@ public class MPDSocketTest {\n         int port = 9999;\n \n         doThrow(new RuntimeException())\n-                .when(mockSocket)\n-                .connect(new InetSocketAddress(inetAddress, port), timeout);\n+            .when(mockSocket)\n+            .connect(new InetSocketAddress(inetAddress, port), timeout);\n \n         socket = new TestSocket(inetAddress, port, timeout);\n     }\n@@ -76,9 +76,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -91,11 +91,11 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+            .thenReturn(null)\n+            .thenReturn(\"OK\")\n+            .thenReturn(null)\n+            .thenReturn(\"OK\")\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -112,11 +112,11 @@ public class MPDSocketTest {\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(VERSION_RESPONSE)\n-                .thenThrow(new SocketException())\n-                .thenReturn(VERSION_RESPONSE)\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(VERSION_RESPONSE)\n+            .thenThrow(new SocketException())\n+            .thenReturn(VERSION_RESPONSE)\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n@@ -133,9 +133,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -145,8 +145,8 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new MPDSecurityException(\"security exception\"));\n+            .thenReturn(\"OK\")\n+            .thenThrow(new MPDSecurityException(\"security exception\"));\n \n         List<MPDCommand> commands = new ArrayList<>();\n         commands.add(new MPDCommand(\"command\", \"params\"));\n@@ -159,8 +159,8 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException(\"exception\"));\n+            .thenReturn(\"OK\")\n+            .thenThrow(new RuntimeException(\"exception\"));\n \n         List<MPDCommand> commands = new ArrayList<>();\n         commands.add(new MPDCommand(\"command\", \"params\"));\n@@ -177,9 +177,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -195,9 +195,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -211,9 +211,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         when(mockSocket.isClosed()).thenReturn(true);\n \n@@ -233,9 +233,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -249,9 +249,9 @@ public class MPDSocketTest {\n         responseList.add(testResponse);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+            .thenReturn(\"OK\")\n+            .thenReturn(testResponse)\n+            .thenReturn(null);\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -261,7 +261,7 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenThrow(new RuntimeException());\n+            .thenThrow(new RuntimeException());\n \n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n@@ -271,8 +271,8 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException());\n+            .thenReturn(\"OK\")\n+            .thenThrow(new RuntimeException());\n \n         socket.sendCommand(new MPDCommand(\"command\", \"param\"));\n     }\n@@ -283,13 +283,13 @@ public class MPDSocketTest {\n \n         mockedInputStream = new ByteArrayInputStream(VERSION_RESPONSE.getBytes());\n         when(mockSocket.getInputStream())\n-                .thenThrow(new SocketException())\n-                .thenReturn(mockedInputStream);\n+            .thenThrow(new SocketException())\n+            .thenReturn(mockedInputStream);\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n+            .thenReturn(\"OK\")\n+            .thenThrow(new SocketException())\n+            .thenReturn(\"OK\");\n \n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n@@ -298,13 +298,13 @@ public class MPDSocketTest {\n     public void testSendCommandExceptionWithMaxConnectExceptions() throws Exception {\n         createValidSocket();\n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n+            .thenReturn(\"OK\")\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenThrow(new SocketException())\n+            .thenReturn(\"OK\");\n \n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n@@ -314,9 +314,9 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+            .thenReturn(null)\n+            .thenReturn(\"OK\")\n+            .thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n@@ -348,13 +348,13 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"unexpected\");\n+            .thenReturn(\"OK\")\n+            .thenReturn(\"OK\")\n+            .thenReturn(\"unexpected\");\n \n         when(mockedBufferedReader.ready())\n-                .thenReturn(true)\n-                .thenReturn(false);\n+            .thenReturn(true)\n+            .thenReturn(false);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n@@ -386,11 +386,11 @@ public class MPDSocketTest {\n         createValidSocket();\n \n         when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null)\n-                .thenReturn(\"Error\")\n-                .thenReturn(null);\n+            .thenReturn(null)\n+            .thenReturn(\"OK\")\n+            .thenReturn(null)\n+            .thenReturn(\"Error\")\n+            .thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "error",
                    "message": "Line is longer than 130 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "408",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/3/MPDSocketTest.java\nindex 05a415bef7..0b8c288c4e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/3/MPDSocketTest.java\n@@ -3,7 +3,6 @@ package org.bff.javampd.server;\n import org.bff.javampd.command.MPDCommand;\n import org.junit.Test;\n import org.mockito.ArgumentCaptor;\n-\n import java.io.*;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n@@ -12,20 +11,18 @@ import java.net.SocketException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import static org.junit.Assert.*;\n+\n import static org.mockito.Mockito.*;\n \n public class MPDSocketTest {\n \n     private MPDSocket socket;\n-\n     private Socket mockSocket;\n     private InputStream mockedInputStream;\n     private OutputStream mockedOutputStream;\n     private BufferedReader mockedBufferedReader;\n     private static final String VERSION_RESPONSE = \"OK MPD 0.18.0\";\n-\n     private ArgumentCaptor<byte[]> byteArgumentCaptor;\n \n     @Test(expected = MPDConnectionException.class)\n@@ -35,6 +32,7 @@ public class MPDSocketTest {\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         socket = new TestSocket(inetAddress, 9999, 10);\n     }\n \n@@ -44,13 +42,12 @@ public class MPDSocketTest {\n         mockedInputStream = mock(InputStream.class);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         int timeout = 10;\n-        int port = 9999;\n \n-        doThrow(new RuntimeException())\n-                .when(mockSocket)\n-                .connect(new InetSocketAddress(inetAddress, port), timeout);\n+        int port = 9999;\n \n+        doThrow(new RuntimeException()).when(mockSocket).connect(new InetSocketAddress(inetAddress, port), timeout);\n         socket = new TestSocket(inetAddress, port, timeout);\n     }\n \n@@ -58,363 +55,294 @@ public class MPDSocketTest {\n     public void testSocketCreationWithBadResponse() throws Exception {\n         mockSocket = mock(Socket.class);\n         mockedBufferedReader = mock(BufferedReader.class);\n-\n         mockedInputStream = new ByteArrayInputStream(\"NOTOK MPD 0.18.0\".getBytes());\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n-\n         when(mockedBufferedReader.readLine()).thenReturn(\"Bad\");\n+\n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n+\n         socket = new TestSocket(inetAddress, 9999, 10);\n     }\n \n     @Test\n     public void testSendCommand() throws Exception {\n         String testResponse = \"testResponse\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n \n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(testResponse, response.get(0));\n     }\n \n     @Test\n     public void testSendCommandOKButNoResponse() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(null).thenReturn(\"OK\").thenReturn(null).thenReturn(\"OK\").thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(0, response.size());\n     }\n \n     @Test\n     public void testSendCommandSocketException() throws Exception {\n         String testResponse = \"testResponse\";\n-        createValidSocket();\n \n+        createValidSocket();\n         mockedInputStream = new ByteArrayInputStream(VERSION_RESPONSE.getBytes());\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(VERSION_RESPONSE)\n-                .thenThrow(new SocketException())\n-                .thenReturn(VERSION_RESPONSE)\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE).thenThrow(new SocketException()).thenReturn(VERSION_RESPONSE).thenReturn(testResponse).thenReturn(null);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(testResponse, response.get(0));\n     }\n \n     @Test(expected = MPDSecurityException.class)\n     public void testSendCommandNoPermissionResponse() throws Exception {\n         String testResponse = \"ACK: you don't have permission\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDSecurityException.class)\n     public void testSendCommandsSecurityException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new MPDSecurityException(\"security exception\"));\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new MPDSecurityException(\"security exception\"));\n \n         List<MPDCommand> commands = new ArrayList<>();\n-        commands.add(new MPDCommand(\"command\", \"params\"));\n \n+        commands.add(new MPDCommand(\"command\", \"params\"));\n         socket.sendCommands(commands);\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandsException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException(\"exception\"));\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new RuntimeException(\"exception\"));\n \n         List<MPDCommand> commands = new ArrayList<>();\n-        commands.add(new MPDCommand(\"command\", \"params\"));\n \n+        commands.add(new MPDCommand(\"command\", \"params\"));\n         socket.sendCommands(commands);\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandError() throws Exception {\n         String testResponse = \"ACK: error\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandAfterClose() throws Exception {\n         String testResponse = \"test response\";\n-        createValidSocket();\n \n+        createValidSocket();\n         socket.close();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test\n     public void testSendCommandClosedAfterConnected() throws Exception {\n         String testResponse = \"testResponse\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         when(mockSocket.isClosed()).thenReturn(true);\n \n         MPDCommand command = new MPDCommand(\"command\");\n \n         List<String> response = new ArrayList<>(socket.sendCommand(command));\n+\n         assertEquals(testResponse, response.get(0));\n     }\n \n     @Test\n     public void testSendCommandNeverConnected() throws Exception {\n         String testResponse = \"test response\";\n+\n         createValidSocket(false);\n         when(mockSocket.isConnected()).thenReturn(false).thenReturn(true);\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandEmptyError() throws Exception {\n         String testResponse = \"ACK\";\n+\n         createValidSocket();\n \n         List<String> responseList = new ArrayList<>();\n-        responseList.add(testResponse);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(testResponse)\n-                .thenReturn(null);\n \n+        responseList.add(testResponse);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(testResponse).thenReturn(null);\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandGeneralException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenThrow(new RuntimeException());\n-\n+        when(mockedBufferedReader.readLine()).thenThrow(new RuntimeException());\n         socket.sendCommand(new MPDCommand(\"command\", \"params\"));\n     }\n \n     @Test(expected = Exception.class)\n     public void testSendCommandException() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new RuntimeException());\n-\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new RuntimeException());\n         socket.sendCommand(new MPDCommand(\"command\", \"param\"));\n     }\n \n     @Test\n     public void testSendCommandExceptionWithConnectException() throws Exception {\n         createValidSocket();\n-\n         mockedInputStream = new ByteArrayInputStream(VERSION_RESPONSE.getBytes());\n-        when(mockSocket.getInputStream())\n-                .thenThrow(new SocketException())\n-                .thenReturn(mockedInputStream);\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n-\n+        when(mockSocket.getInputStream()).thenThrow(new SocketException()).thenReturn(mockedInputStream);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new SocketException()).thenReturn(\"OK\");\n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n \n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandExceptionWithMaxConnectExceptions() throws Exception {\n         createValidSocket();\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenThrow(new SocketException())\n-                .thenReturn(\"OK\");\n-\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenThrow(new SocketException()).thenReturn(\"OK\");\n         socket.sendCommand(new MPDCommand(\"command\"));\n     }\n \n     @Test\n     public void testSendCommands() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(null).thenReturn(\"OK\").thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\", \"param2\");\n+\n         MPDCommand command3 = new MPDCommand(\"command3\");\n \n         commands.add(command1);\n         commands.add(command2);\n         commands.add(command3);\n-\n         mockedOutputStream = mock(OutputStream.class);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n         socket.sendCommands(commands);\n \n         ServerProperties serverProperties = new ServerProperties();\n+\n         StringBuilder sb = new StringBuilder();\n+\n         sb.append(convertCommand(new MPDCommand(serverProperties.getStartBulk())));\n-        commands.forEach(command -> sb.append(convertCommand(command)));\n+        commands.forEach(command->sb.append(convertCommand(command)));\n         sb.append(convertCommand(new MPDCommand(serverProperties.getEndBulk())));\n-\n         verify(mockedOutputStream, times(2)).write(byteArgumentCaptor.capture());\n-\n-        assertTrue(Arrays.equals(sb.toString().getBytes(), byteArgumentCaptor.getAllValues().get(1)));\n+        assertTrue(Arrays.equals(sb.toString().getBytes(),\n+                                 byteArgumentCaptor.getAllValues().get(1)));\n     }\n \n     @Test\n     public void testSendCommandsExtraResponses() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"OK\")\n-                .thenReturn(\"unexpected\");\n-\n-        when(mockedBufferedReader.ready())\n-                .thenReturn(true)\n-                .thenReturn(false);\n+        when(mockedBufferedReader.readLine()).thenReturn(\"OK\").thenReturn(\"OK\").thenReturn(\"unexpected\");\n+        when(mockedBufferedReader.ready()).thenReturn(true).thenReturn(false);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\", \"param2\");\n+\n         MPDCommand command3 = new MPDCommand(\"command3\");\n \n         commands.add(command1);\n         commands.add(command2);\n         commands.add(command3);\n-\n         mockedOutputStream = mock(OutputStream.class);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n         socket.sendCommands(commands);\n \n         ServerProperties serverProperties = new ServerProperties();\n+\n         StringBuilder sb = new StringBuilder();\n+\n         sb.append(convertCommand(new MPDCommand(serverProperties.getStartBulk())));\n-        commands.forEach(command -> sb.append(convertCommand(command)));\n+        commands.forEach(command->sb.append(convertCommand(command)));\n         sb.append(convertCommand(new MPDCommand(serverProperties.getEndBulk())));\n-\n         verify(mockedOutputStream, times(2)).write(byteArgumentCaptor.capture());\n-\n-        assertTrue(Arrays.equals(sb.toString().getBytes(), byteArgumentCaptor.getAllValues().get(1)));\n+        assertTrue(Arrays.equals(sb.toString().getBytes(),\n+                                 byteArgumentCaptor.getAllValues().get(1)));\n     }\n \n     @Test\n     public void testSendCommandsWithError() throws Exception {\n         createValidSocket();\n-\n-        when(mockedBufferedReader.readLine())\n-                .thenReturn(null)\n-                .thenReturn(\"OK\")\n-                .thenReturn(null)\n-                .thenReturn(\"Error\")\n-                .thenReturn(null);\n+        when(mockedBufferedReader.readLine()).thenReturn(null).thenReturn(\"OK\").thenReturn(null).thenReturn(\"Error\").thenReturn(null);\n \n         List<MPDCommand> commands = new ArrayList<>();\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\", \"param2\");\n+\n         MPDCommand command3 = new MPDCommand(\"command3\");\n \n         commands.add(command1);\n         commands.add(command2);\n         commands.add(command3);\n-\n         mockedOutputStream = mock(OutputStream.class);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n         socket.sendCommands(commands);\n \n         ServerProperties serverProperties = new ServerProperties();\n+\n         StringBuilder sb = new StringBuilder();\n+\n         sb.append(convertCommand(new MPDCommand(serverProperties.getStartBulk())));\n-        commands.forEach(command -> sb.append(convertCommand(command)));\n+        commands.forEach(command->sb.append(convertCommand(command)));\n         sb.append(convertCommand(new MPDCommand(serverProperties.getEndBulk())));\n-\n         verify(mockedOutputStream, times(2)).write(byteArgumentCaptor.capture());\n-\n-        assertTrue(Arrays.equals(sb.toString().getBytes(), byteArgumentCaptor.getAllValues().get(1)));\n+        assertTrue(Arrays.equals(sb.toString().getBytes(),\n+                                 byteArgumentCaptor.getAllValues().get(1)));\n     }\n \n     @Test\n@@ -432,7 +360,6 @@ public class MPDSocketTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testCloseException() throws Exception {\n         createValidSocket();\n-\n         doThrow(new IOException()).when(mockSocket).close();\n         socket.close();\n     }\n@@ -440,7 +367,6 @@ public class MPDSocketTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testCloseReaderException() throws Exception {\n         createValidSocket();\n-\n         doThrow(new IOException()).when(mockedBufferedReader).close();\n         socket.close();\n     }\n@@ -472,12 +398,10 @@ public class MPDSocketTest {\n         mockedOutputStream = new ByteArrayOutputStream();\n         mockedBufferedReader = mock(BufferedReader.class);\n         byteArgumentCaptor = ArgumentCaptor.forClass(byte[].class);\n-\n         when(mockSocket.getInputStream()).thenReturn(mockedInputStream);\n         when(mockSocket.getOutputStream()).thenReturn(mockedOutputStream);\n \n         InetAddress inetAddress = InetAddress.getByName(\"localhost\");\n-\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE);\n         } catch (IOException e) {\n@@ -486,12 +410,14 @@ public class MPDSocketTest {\n \n         socket = new TestSocket(inetAddress, 9999, 10);\n         socket.setReader(mockedBufferedReader);\n+\n         if (connected) {\n             when(mockSocket.isConnected()).thenReturn(true);\n         }\n     }\n \n     private class TestSocket extends MPDSocket {\n+\n         public TestSocket(InetAddress server, int port, int timeout) {\n             super(server, port, timeout);\n         }\n",
            "diff_size": 191
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "484",
                    "column": "34",
                    "severity": "error",
                    "message": "'}' at column 34 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/3/MPDSocketTest.java\nindex 05a415bef7..c95ef1f70b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/3/MPDSocketTest.java\n@@ -481,32 +481,29 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE);\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            e .printStackTrace();} socket= new TestSocket(inetAddress, 9999, 10);\n+            socket.setReader(mockedBufferedReader);\n+            if (connected) {\n+                when(mockSocket.isConnected()).thenReturn(true);\n+            }\n         }\n \n-        socket = new TestSocket(inetAddress, 9999, 10);\n-        socket.setReader(mockedBufferedReader);\n-        if (connected) {\n-            when(mockSocket.isConnected()).thenReturn(true);\n-        }\n-    }\n-\n-    private class TestSocket extends MPDSocket {\n-        public TestSocket(InetAddress server, int port, int timeout) {\n-            super(server, port, timeout);\n-        }\n+        private class TestSocket extends MPDSocket {\n+            public TestSocket(InetAddress server, int port, int timeout) {\n+                super(server, port, timeout);\n+            }\n \n-        @Override\n-        protected Socket createSocket() {\n-            return mockSocket;\n-        }\n+            @Override\n+            protected Socket createSocket() {\n+                return mockSocket;\n+            }\n \n-        public void setReader(BufferedReader reader) {\n-            super.setReader(mockedBufferedReader);\n-        }\n+            public void setReader(BufferedReader reader) {\n+                super.setReader(mockedBufferedReader);\n+            }\n \n-        public Socket createParentSocket() {\n-            return super.createSocket();\n+            public Socket createParentSocket() {\n+                return super.createSocket();\n+            }\n         }\n-    }\n-}\n\\ No newline at end of file\n+    }\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/3/MPDSocketTest.java\nindex 05a415bef7..1baa254126 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/3/MPDSocketTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/3/MPDSocketTest.java\n@@ -481,7 +481,7 @@ public class MPDSocketTest {\n         try {\n             when(mockedBufferedReader.readLine()).thenReturn(VERSION_RESPONSE);\n         } catch (IOException e) {\n-            e.printStackTrace();\n+    e .printStackTrace();\n         }\n \n         socket = new TestSocket(inetAddress, 9999, 10);\n",
            "diff_size": 1
        }
    ]
}