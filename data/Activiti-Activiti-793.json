{
    "error_id": "793",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/793/SetProcessInstanceNameCmd.java\nindex 40cdda5c05..52876897b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/793/SetProcessInstanceNameCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -58,7 +59,7 @@ public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n     // Actually set the name\n     execution.setName(name);\n-    \n+\n     if (commandContext.getEventDispatcher().isEnabled()) {\n         commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/793/SetProcessInstanceNameCmd.java\nindex 40cdda5c05..0e98e07f4e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/793/SetProcessInstanceNameCmd.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -26,47 +27,47 @@ import org.activiti.engine.runtime.ProcessInstance;\n \n public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  protected String processInstanceId;\n-  protected String name;\n+    private static final long serialVersionUID = 1L;\n \n-  public SetProcessInstanceNameCmd(String processInstanceId, String name) {\n-    this.processInstanceId = processInstanceId;\n-    this.name = name;\n-  }\n+    protected String processInstanceId;\n+    protected String name;\n \n-  @Override\n-  public Void execute(CommandContext commandContext) {\n-    if (processInstanceId == null) {\n-      throw new ActivitiIllegalArgumentException(\"processInstanceId is null\");\n+    public SetProcessInstanceNameCmd(String processInstanceId, String name) {\n+        this.processInstanceId = processInstanceId;\n+        this.name = name;\n     }\n \n-    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(processInstanceId);\n+    @Override\n+    public Void execute(CommandContext commandContext) {\n+        if (processInstanceId == null) {\n+            throw new ActivitiIllegalArgumentException(\"processInstanceId is null\");\n+        }\n \n-    if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist\", ProcessInstance.class);\n-    }\n+        ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(processInstanceId);\n \n-    if (!execution.isProcessInstanceType()) {\n-      throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist, the given ID references an execution, though\", ProcessInstance.class);\n-    }\n+        if (execution == null) {\n+            throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist\", ProcessInstance.class);\n+        }\n \n-    if (execution.isSuspended()) {\n-      throw new ActivitiException(\"process instance \" + processInstanceId + \" is suspended, cannot set name\");\n-    }\n+        if (!execution.isProcessInstanceType()) {\n+            throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist, the given ID references an execution, though\", ProcessInstance.class);\n+        }\n+\n+        if (execution.isSuspended()) {\n+            throw new ActivitiException(\"process instance \" + processInstanceId + \" is suspended, cannot set name\");\n+        }\n \n-    // Actually set the name\n-    execution.setName(name);\n-    \n-    if (commandContext.getEventDispatcher().isEnabled()) {\n-        commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n-      }\n+        // Actually set the name\n+        execution.setName(name);\n \n-    // Record the change in history\n-    commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstanceId, name);\n+        if (commandContext.getEventDispatcher().isEnabled()) {\n+            commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n+        }\n \n-    return null;\n-  }\n+        // Record the change in history\n+        commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstanceId, name);\n+\n+        return null;\n+    }\n \n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 59.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/793/SetProcessInstanceNameCmd.java\nindex 40cdda5c05..2aaf183353 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/793/SetProcessInstanceNameCmd.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.ActivitiObjectNotFoundException;\n@@ -24,49 +23,47 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.runtime.ProcessInstance;\n \n-public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n+public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n-  protected String processInstanceId;\n-  protected String name;\n+    private static final long serialVersionUID = 1L;\n+    protected String processInstanceId;\n+    protected String name;\n \n-  public SetProcessInstanceNameCmd(String processInstanceId, String name) {\n+    public SetProcessInstanceNameCmd(String processInstanceId, String name) {\n     this.processInstanceId = processInstanceId;\n     this.name = name;\n-  }\n-\n-  @Override\n-  public Void execute(CommandContext commandContext) {\n-    if (processInstanceId == null) {\n-      throw new ActivitiIllegalArgumentException(\"processInstanceId is null\");\n     }\n \n-    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(processInstanceId);\n+    @Override\n+    public Void execute(CommandContext commandContext) {\n+        if (processInstanceId == null) {\n+        throw new ActivitiIllegalArgumentException(\"processInstanceId is null\");\n+        }\n \n-    if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist\", ProcessInstance.class);\n-    }\n+        ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(processInstanceId);\n+        if (execution == null) {\n+        throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist\",\n+                                                  ProcessInstance.class);\n+        }\n \n-    if (!execution.isProcessInstanceType()) {\n-      throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist, the given ID references an execution, though\", ProcessInstance.class);\n-    }\n+        if (!execution.isProcessInstanceType()) {\n+        throw new ActivitiObjectNotFoundException(\"process instance \" + processInstanceId + \" doesn't exist, the given ID references an execution, though\", ProcessInstance.class);\n+        }\n \n-    if (execution.isSuspended()) {\n-      throw new ActivitiException(\"process instance \" + processInstanceId + \" is suspended, cannot set name\");\n-    }\n+        if (execution.isSuspended()) {\n+        throw new ActivitiException(\"process instance \" + processInstanceId + \" is suspended, cannot set name\");\n+        }\n \n     // Actually set the name\n-    execution.setName(name);\n-    \n-    if (commandContext.getEventDispatcher().isEnabled()) {\n-        commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n-      }\n+        execution.setName(name);\n+        if (commandContext.getEventDispatcher().isEnabled()) {\n+            commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED,\n+                                                                                                     execution));\n+        }\n \n     // Record the change in history\n-    commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstanceId, name);\n-\n-    return null;\n-  }\n-\n-}\n+        commandContext.getHistoryManager().recordProcessInstanceNameChange(processInstanceId, name);\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/793/SetProcessInstanceNameCmd.java\nindex 40cdda5c05..52876897b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/793/SetProcessInstanceNameCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -58,7 +59,7 @@ public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n     // Actually set the name\n     execution.setName(name);\n-    \n+\n     if (commandContext.getEventDispatcher().isEnabled()) {\n         commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/793/SetProcessInstanceNameCmd.java\nindex 40cdda5c05..52876897b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/793/SetProcessInstanceNameCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/793/SetProcessInstanceNameCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -58,7 +59,7 @@ public class SetProcessInstanceNameCmd implements Command<Void>, Serializable {\n \n     // Actually set the name\n     execution.setName(name);\n-    \n+\n     if (commandContext.getEventDispatcher().isEnabled()) {\n         commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_UPDATED, execution));\n       }\n",
            "diff_size": 2
        }
    ]
}