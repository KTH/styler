{
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "60",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public int update() {\n    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n        //transactional\u4e3atrue\n    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/89/CreateIndex.java\nindex 42f44eca38..f34e1518cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/89/CreateIndex.java\n@@ -57,12 +57,12 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n         //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+\t\t\t\t\t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+\t\t\t\t\t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+\t\t\t\t\t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+\t\t\t\t\tif (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/89/CreateIndex.java\nindex 42f44eca38..0a8fbcb493 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/89/CreateIndex.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -57,12 +58,12 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+        //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n         //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+        //\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+        //\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+        //\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+        if (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n@@ -89,10 +90,10 @@ public class CreateIndex extends SchemaCommand {\n         if (indexName == null) {\n             if (primaryKey) {\n                 indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_PRIMARY_KEY);\n+                    table, Constants.PREFIX_PRIMARY_KEY);\n             } else {\n                 indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_INDEX);\n+                    table, Constants.PREFIX_INDEX);\n             }\n         }\n         IndexType indexType;\n@@ -110,7 +111,7 @@ public class CreateIndex extends SchemaCommand {\n         }\n         IndexColumn.mapColumns(indexColumns, table);\n         table.addIndex(session, indexName, id, indexColumns, indexType, create,\n-                comment);\n+            comment);\n         return 0;\n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/89/CreateIndex.java\nindex 42f44eca38..1f013ebea6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/89/CreateIndex.java\n@@ -21,6 +21,8 @@ import org.h2.table.Table;\n  * This class represents the statement\n  * CREATE INDEX\n  */\n+\n+\n public class CreateIndex extends SchemaCommand {\n \n     private String tableName;\n@@ -35,34 +37,39 @@ public class CreateIndex extends SchemaCommand {\n         super(session, schema);\n     }\n \n+\n     public void setIfTableExists(boolean b) {\n         this.ifTableExists = b;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n     }\n \n+\n     public void setIndexName(String indexName) {\n         this.indexName = indexName;\n     }\n \n+\n     public void setIndexColumns(IndexColumn[] columns) {\n         this.indexColumns = columns;\n     }\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+        //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n         //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+        //\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+        //\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+        //\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+        if (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n@@ -88,11 +95,9 @@ public class CreateIndex extends SchemaCommand {\n         int id = getObjectId();\n         if (indexName == null) {\n             if (primaryKey) {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_PRIMARY_KEY);\n+                indexName = table.getSchema().getUniqueIndexName(session, table, Constants.PREFIX_PRIMARY_KEY);\n             } else {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_INDEX);\n+                indexName = table.getSchema().getUniqueIndexName(session, table, Constants.PREFIX_INDEX);\n             }\n         }\n         IndexType indexType;\n@@ -104,36 +109,47 @@ public class CreateIndex extends SchemaCommand {\n         } else if (unique) {\n             indexType = IndexType.createUnique(persistent, hash);\n         } else if (affinity) {\n-            indexType = IndexType.createAffinity();\n-        } else {\n-            indexType = IndexType.createNonUnique(persistent, hash, spatial);\n-        }\n+                   indexType = IndexType.createAffinity();\n+               } else {\n+                   indexType = IndexType.createNonUnique(persistent, hash, spatial);\n+               }\n         IndexColumn.mapColumns(indexColumns, table);\n-        table.addIndex(session, indexName, id, indexColumns, indexType, create,\n-                comment);\n+        table.addIndex(session,\n+indexName,\n+id,\n+indexColumns,\n+indexType,\n+create,\n+comment);\n         return 0;\n     }\n \n+\n     public void setPrimaryKey(boolean b) {\n         this.primaryKey = b;\n     }\n \n+\n     public void setUnique(boolean b) {\n         this.unique = b;\n     }\n \n+\n     public void setHash(boolean b) {\n         this.hash = b;\n     }\n \n+\n     public void setSpatial(boolean b) {\n         this.spatial = b;\n     }\n \n+\n     public void setAffinity(boolean b) {\n         this.affinity = b;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n@@ -143,4 +159,4 @@ public class CreateIndex extends SchemaCommand {\n         return CommandInterface.CREATE_INDEX;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/89/CreateIndex.java\nindex 42f44eca38..f34e1518cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/89/CreateIndex.java\n@@ -57,12 +57,12 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n         //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+\t\t\t\t\t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+\t\t\t\t\t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+\t\t\t\t\t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+\t\t\t\t\tif (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/89/CreateIndex.java\nindex 42f44eca38..e643357dd9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/89/CreateIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/89/CreateIndex.java\n@@ -57,12 +57,12 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n-        //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+        //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+    //transactional\u4e3atrue\n+\t\t\t\t\t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+\t\t\t\t\t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+\t\t\t\t\t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+\t\t\t\t\tif (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n",
            "diff_size": 6
        }
    ]
}