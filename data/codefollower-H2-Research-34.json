{
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "217",
                "column": "40",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                f.read(b);\n            }\n        } catch (IOException ignoreEx) {}\n        return FileUtils.lastModified(fileName);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/34/FileLock.java\nindex ae532497cb..77b96e8686 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/34/FileLock.java\n@@ -214,7 +214,7 @@ public class FileLock implements Runnable {\n                 ByteBuffer b = ByteBuffer.wrap(new byte[1]);\n                 f.read(b);\n             }\n-        } catch (IOException ignoreEx) {}\n+        } catch (IOException ignoreEx) { }\n         return FileUtils.lastModified(fileName);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/34/FileLock.java\nindex ae532497cb..bf825b58af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/34/FileLock.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.store;\n \n import java.io.IOException;\n@@ -84,12 +85,12 @@ public class FileLock implements Runnable {\n      * Create a new file locking object.\n      *\n      * @param traceSystem the trace system to use\n-     * @param fileName the file name\n-     * @param sleep the number of milliseconds to sleep\n+     * @param fileName    the file name\n+     * @param sleep       the number of milliseconds to sleep\n      */\n     public FileLock(TraceSystem traceSystem, String fileName, int sleep) {\n         this.trace = traceSystem == null ?\n-                null : traceSystem.getTrace(Trace.FILE_LOCK);\n+            null : traceSystem.getTrace(Trace.FILE_LOCK);\n         this.fileName = fileName;\n         this.sleep = sleep;\n     }\n@@ -106,15 +107,15 @@ public class FileLock implements Runnable {\n             DbException.throwInternalError(\"already locked\");\n         }\n         switch (fileLockMethod) {\n-        case FILE:\n-            lockFile();\n-            break;\n-        case SOCKET:\n-            lockSocket();\n-            break;\n-        case FS:\n-        case NO:\n-            break;\n+            case FILE:\n+                lockFile();\n+                break;\n+            case SOCKET:\n+                lockSocket();\n+                break;\n+            case FS:\n+            case NO:\n+                break;\n         }\n         locked = true;\n     }\n@@ -165,7 +166,7 @@ public class FileLock implements Runnable {\n      * Add or change a setting to the properties. This call does not save the\n      * file.\n      *\n-     * @param key the key\n+     * @param key   the key\n      * @param value the value\n      */\n     public void setProperty(String key, String value) {\n@@ -214,7 +215,8 @@ public class FileLock implements Runnable {\n                 ByteBuffer b = ByteBuffer.wrap(new byte[1]);\n                 f.read(b);\n             }\n-        } catch (IOException ignoreEx) {}\n+        } catch (IOException ignoreEx) {\n+        }\n         return FileUtils.lastModified(fileName);\n     }\n \n@@ -228,7 +230,7 @@ public class FileLock implements Runnable {\n         String id = prop.getProperty(\"id\");\n         try {\n             Socket socket = NetUtils.createSocket(server,\n-                    Constants.DEFAULT_TCP_PORT, false);\n+                Constants.DEFAULT_TCP_PORT, false);\n             Transfer transfer = new Transfer(null, socket);\n             transfer.init();\n             transfer.writeInt(Constants.TCP_PROTOCOL_VERSION_MIN_SUPPORTED);\n@@ -249,7 +251,7 @@ public class FileLock implements Runnable {\n         }\n         if (running) {\n             DbException e = DbException.get(\n-                    ErrorCode.DATABASE_ALREADY_OPEN_1, \"Server is running\");\n+                ErrorCode.DATABASE_ALREADY_OPEN_1, \"Server is running\");\n             throw e.addSQL(server + \"/\" + id);\n         }\n     }\n@@ -273,7 +275,7 @@ public class FileLock implements Runnable {\n             }\n         }\n         throw getExceptionFatal(\n-                \"Could not load properties \" + fileName, lastException);\n+            \"Could not load properties \" + fileName, lastException);\n     }\n \n     private void waitUntilOld() {\n@@ -412,7 +414,7 @@ public class FileLock implements Runnable {\n         save();\n         locked = true;\n         watchdog = new Thread(this,\n-                \"H2 File Lock Watchdog (Socket) \" + fileName);\n+            \"H2 File Lock Watchdog (Socket) \" + fileName);\n         watchdog.setDaemon(true);\n         watchdog.start();\n     }\n@@ -427,12 +429,12 @@ public class FileLock implements Runnable {\n \n     private static DbException getExceptionFatal(String reason, Throwable t) {\n         return DbException.get(\n-                ErrorCode.ERROR_OPENING_DATABASE_1, t, reason);\n+            ErrorCode.ERROR_OPENING_DATABASE_1, t, reason);\n     }\n \n     private DbException getExceptionAlreadyInUse(String reason) {\n         DbException e = DbException.get(\n-                ErrorCode.DATABASE_ALREADY_OPEN_1, reason);\n+            ErrorCode.DATABASE_ALREADY_OPEN_1, reason);\n         if (fileName != null) {\n             try {\n                 Properties prop = load();\n@@ -480,7 +482,7 @@ public class FileLock implements Runnable {\n                 // trace.debug(\"watchdog check\");\n                 try {\n                     if (!FileUtils.exists(fileName) ||\n-                            aggressiveLastModified(fileName) != lastWrite) {\n+                        aggressiveLastModified(fileName) != lastWrite) {\n                         save();\n                     }\n                     Thread.sleep(sleep);\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "217",
                    "column": "40",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/34/FileLock.java\nindex ae532497cb..f5af5ffdec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/34/FileLock.java\n@@ -510,4 +510,4 @@ public class FileLock implements Runnable {\n         trace.debug(\"watchdog end\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "502",
                    "column": "43",
                    "severity": "warning",
                    "message": "'|' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "502",
                    "column": "64",
                    "severity": "warning",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/34/FileLock.java\nindex ae532497cb..d2db30f340 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/34/FileLock.java\n@@ -36,6 +36,8 @@ import org.h2.value.Transfer;\n  * to it. It uses a cooperative locking protocol. Usually a .lock.db file is\n  * used, but locking by creating a socket is supported as well.\n  */\n+\n+\n public class FileLock implements Runnable {\n \n     private static final String MAGIC = \"FileLock\";\n@@ -74,7 +76,6 @@ public class FileLock implements Runnable {\n      * The last time the lock file was written.\n      */\n     private long lastWrite;\n-\n     private String method;\n     private Properties properties;\n     private String uniqueId;\n@@ -87,9 +88,9 @@ public class FileLock implements Runnable {\n      * @param fileName the file name\n      * @param sleep the number of milliseconds to sleep\n      */\n+\n     public FileLock(TraceSystem traceSystem, String fileName, int sleep) {\n-        this.trace = traceSystem == null ?\n-                null : traceSystem.getTrace(Trace.FILE_LOCK);\n+        this.trace = traceSystem == null ? null : traceSystem.getTrace(Trace.FILE_LOCK);\n         this.fileName = fileName;\n         this.sleep = sleep;\n     }\n@@ -100,6 +101,8 @@ public class FileLock implements Runnable {\n      * @param fileLockMethod the file locking method to use\n      * @throws DbException if locking was not successful\n      */\n+\n+\n     public synchronized void lock(FileLockMethod fileLockMethod) {\n         checkServer();\n         if (locked) {\n@@ -123,6 +126,8 @@ public class FileLock implements Runnable {\n      * Unlock the file. The watchdog thread is stopped. This method does nothing\n      * if the file is already unlocked.\n      */\n+\n+\n     public synchronized void unlock() {\n         if (!locked) {\n             return;\n@@ -168,6 +173,8 @@ public class FileLock implements Runnable {\n      * @param key the key\n      * @param value the value\n      */\n+\n+\n     public void setProperty(String key, String value) {\n         if (value == null) {\n             properties.remove(key);\n@@ -181,6 +188,8 @@ public class FileLock implements Runnable {\n      *\n      * @return the saved properties\n      */\n+\n+\n     public Properties save() {\n         try {\n             try (OutputStream out = FileUtils.newOutputStream(fileName, false)) {\n@@ -202,6 +211,7 @@ public class FileLock implements Runnable {\n      * @param fileName file name to check\n      * @return last modified date/time in milliseconds UTC\n      */\n+\n     private static long aggressiveLastModified(String fileName) {\n         /*\n          * Some remote filesystem, e.g. SMB on Windows, can cache metadata for\n@@ -210,11 +220,16 @@ public class FileLock implements Runnable {\n          * cache.\n          */\n         try {\n-            try (FileChannel f = FileChannel.open(Paths.get(fileName), FileUtils.RWS, FileUtils.NO_ATTRIBUTES);) {\n+            try (FileChannel f = FileChannel.open(Paths.get(fileName),\n+                                                  FileUtils.RWS,\n+                                                  FileUtils.NO_ATTRIBUTES);\n+            ) {\n                 ByteBuffer b = ByteBuffer.wrap(new byte[1]);\n                 f.read(b);\n             }\n-        } catch (IOException ignoreEx) {}\n+        } catch (IOException ignoreEx) {\n+\n+        }\n         return FileUtils.lastModified(fileName);\n     }\n \n@@ -227,8 +242,7 @@ public class FileLock implements Runnable {\n         boolean running = false;\n         String id = prop.getProperty(\"id\");\n         try {\n-            Socket socket = NetUtils.createSocket(server,\n-                    Constants.DEFAULT_TCP_PORT, false);\n+            Socket socket = NetUtils.createSocket(server, Constants.DEFAULT_TCP_PORT, false);\n             Transfer transfer = new Transfer(null, socket);\n             transfer.init();\n             transfer.writeInt(Constants.TCP_PROTOCOL_VERSION_MIN_SUPPORTED);\n@@ -248,8 +262,8 @@ public class FileLock implements Runnable {\n             return;\n         }\n         if (running) {\n-            DbException e = DbException.get(\n-                    ErrorCode.DATABASE_ALREADY_OPEN_1, \"Server is running\");\n+            DbException e = DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1,\n+                \"Server is running\");\n             throw e.addSQL(server + \"/\" + id);\n         }\n     }\n@@ -259,6 +273,8 @@ public class FileLock implements Runnable {\n      *\n      * @return the properties\n      */\n+\n+\n     public Properties load() {\n         IOException lastException = null;\n         for (int i = 0; i < 5; i++) {\n@@ -272,8 +288,7 @@ public class FileLock implements Runnable {\n                 lastException = e;\n             }\n         }\n-        throw getExceptionFatal(\n-                \"Could not load properties \" + fileName, lastException);\n+        throw getExceptionFatal(\"Could not load properties \" + fileName, lastException);\n     }\n \n     private void waitUntilOld() {\n@@ -411,8 +426,7 @@ public class FileLock implements Runnable {\n         }\n         save();\n         locked = true;\n-        watchdog = new Thread(this,\n-                \"H2 File Lock Watchdog (Socket) \" + fileName);\n+        watchdog = new Thread(this, \"H2 File Lock Watchdog (Socket) \" + fileName);\n         watchdog.setDaemon(true);\n         watchdog.start();\n     }\n@@ -426,13 +440,11 @@ public class FileLock implements Runnable {\n     }\n \n     private static DbException getExceptionFatal(String reason, Throwable t) {\n-        return DbException.get(\n-                ErrorCode.ERROR_OPENING_DATABASE_1, t, reason);\n+        return DbException.get(ErrorCode.ERROR_OPENING_DATABASE_1, t, reason);\n     }\n \n     private DbException getExceptionAlreadyInUse(String reason) {\n-        DbException e = DbException.get(\n-                ErrorCode.DATABASE_ALREADY_OPEN_1, reason);\n+        DbException e = DbException.get(ErrorCode.DATABASE_ALREADY_OPEN_1, reason);\n         if (fileName != null) {\n             try {\n                 Properties prop = load();\n@@ -443,6 +455,7 @@ public class FileLock implements Runnable {\n                 }\n             } catch (DbException e2) {\n                 // ignore\n+\n             }\n         }\n         return e;\n@@ -455,20 +468,23 @@ public class FileLock implements Runnable {\n      * @return the method type\n      * @throws DbException if the method name is unknown\n      */\n+\n+\n     public static FileLockMethod getFileLockMethod(String method) {\n         if (method == null || method.equalsIgnoreCase(\"FILE\")) {\n             return FileLockMethod.FILE;\n         } else if (method.equalsIgnoreCase(\"NO\")) {\n-            return FileLockMethod.NO;\n+        return FileLockMethod.NO;\n         } else if (method.equalsIgnoreCase(\"SOCKET\")) {\n-            return FileLockMethod.SOCKET;\n-        } else if (method.equalsIgnoreCase(\"FS\")) {\n+                                                                      return FileLockMethod.SOCKET;\n+               } else if (method.equalsIgnoreCase(\"FS\")) {\n             return FileLockMethod.FS;\n-        } else {\n-            throw DbException.get(ErrorCode.UNSUPPORTED_LOCK_METHOD_1, method);\n-        }\n+               } else {\n+                   throw DbException.get(ErrorCode.UNSUPPORTED_LOCK_METHOD_1, method);\n+               }\n     }\n \n+\n     public String getUniqueId() {\n         return uniqueId;\n     }\n@@ -479,13 +495,13 @@ public class FileLock implements Runnable {\n             while (locked && fileName != null) {\n                 // trace.debug(\"watchdog check\");\n                 try {\n-                    if (!FileUtils.exists(fileName) ||\n-                            aggressiveLastModified(fileName) != lastWrite) {\n+                    if (!FileUtils.exists(fileName) || aggressiveLastModified(fileName) != lastWrite) {\n                         save();\n                     }\n                     Thread.sleep(sleep);\n-                } catch (OutOfMemoryError | NullPointerException | InterruptedException e) {\n+                } catch (OutOfMemoryError |NullPointerException| InterruptedException e) {\n                     // ignore\n+\n                 } catch (Exception e) {\n                     trace.debug(e, \"watchdog\");\n                 }\n@@ -510,4 +526,4 @@ public class FileLock implements Runnable {\n         trace.debug(\"watchdog end\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/34/FileLock.java\nindex ae532497cb..77b96e8686 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/34/FileLock.java\n@@ -214,7 +214,7 @@ public class FileLock implements Runnable {\n                 ByteBuffer b = ByteBuffer.wrap(new byte[1]);\n                 f.read(b);\n             }\n-        } catch (IOException ignoreEx) {}\n+        } catch (IOException ignoreEx) { }\n         return FileUtils.lastModified(fileName);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/34/FileLock.java\nindex ae532497cb..77b96e8686 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/34/FileLock.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/34/FileLock.java\n@@ -214,7 +214,7 @@ public class FileLock implements Runnable {\n                 ByteBuffer b = ByteBuffer.wrap(new byte[1]);\n                 f.read(b);\n             }\n-        } catch (IOException ignoreEx) {}\n+        } catch (IOException ignoreEx) { }\n         return FileUtils.lastModified(fileName);\n     }\n \n",
            "diff_size": 1
        }
    ]
}