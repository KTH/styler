{
    "error_id": "689",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\npublic class SignalEventDefinition extends EventDefinition {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/689/SignalEventDefinition.java\nindex 9a17f403b1..f75fbd4fa2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/689/SignalEventDefinition.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class SignalEventDefinition extends EventDefinition {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/689/SignalEventDefinition.java\nindex 9a17f403b1..f66d64fba3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/689/SignalEventDefinition.java\n@@ -1,57 +1,58 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class SignalEventDefinition extends EventDefinition {\n \n-  protected String signalRef;\n-  protected String signalExpression;\n-  protected boolean async;\n-\n-  public String getSignalRef() {\n-    return signalRef;\n-  }\n-\n-  public void setSignalRef(String signalRef) {\n-    this.signalRef = signalRef;\n-  }\n-\n-  public String getSignalExpression() {\n-    return signalExpression;\n-  }\n-\n-  public void setSignalExpression(String signalExpression) {\n-    this.signalExpression = signalExpression;\n-  }\n-\n-  public boolean isAsync() {\n-    return async;\n-  }\n-\n-  public void setAsync(boolean async) {\n-    this.async = async;\n-  }\n-\n-  public SignalEventDefinition clone() {\n-    SignalEventDefinition clone = new SignalEventDefinition();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(SignalEventDefinition otherDefinition) {\n-    super.setValues(otherDefinition);\n-    setSignalRef(otherDefinition.getSignalRef());\n-    setSignalExpression(otherDefinition.getSignalExpression());\n-    setAsync(otherDefinition.isAsync());\n-  }\n+    protected String signalRef;\n+    protected String signalExpression;\n+    protected boolean async;\n+\n+    public String getSignalRef() {\n+        return signalRef;\n+    }\n+\n+    public void setSignalRef(String signalRef) {\n+        this.signalRef = signalRef;\n+    }\n+\n+    public String getSignalExpression() {\n+        return signalExpression;\n+    }\n+\n+    public void setSignalExpression(String signalExpression) {\n+        this.signalExpression = signalExpression;\n+    }\n+\n+    public boolean isAsync() {\n+        return async;\n+    }\n+\n+    public void setAsync(boolean async) {\n+        this.async = async;\n+    }\n+\n+    public SignalEventDefinition clone() {\n+        SignalEventDefinition clone = new SignalEventDefinition();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(SignalEventDefinition otherDefinition) {\n+        super.setValues(otherDefinition);\n+        setSignalRef(otherDefinition.getSignalRef());\n+        setSignalExpression(otherDefinition.getSignalExpression());\n+        setAsync(otherDefinition.isAsync());\n+    }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/689/SignalEventDefinition.java\nindex 9a17f403b1..feded8cf11 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/689/SignalEventDefinition.java\n@@ -12,46 +12,46 @@\n  */\n package org.activiti.bpmn.model;\n \n-public class SignalEventDefinition extends EventDefinition {\n \n-  protected String signalRef;\n-  protected String signalExpression;\n-  protected boolean async;\n+public class SignalEventDefinition extends EventDefinition {\n \n-  public String getSignalRef() {\n+    protected String signalRef;\n+    protected String signalExpression;\n+    protected boolean async;\n+    public String getSignalRef() {\n     return signalRef;\n-  }\n+    }\n \n-  public void setSignalRef(String signalRef) {\n+    public void setSignalRef(String signalRef) {\n     this.signalRef = signalRef;\n-  }\n+    }\n \n-  public String getSignalExpression() {\n+    public String getSignalExpression() {\n     return signalExpression;\n-  }\n+    }\n \n-  public void setSignalExpression(String signalExpression) {\n+    public void setSignalExpression(String signalExpression) {\n     this.signalExpression = signalExpression;\n-  }\n+    }\n \n-  public boolean isAsync() {\n+    public boolean isAsync() {\n     return async;\n-  }\n+    }\n \n-  public void setAsync(boolean async) {\n+    public void setAsync(boolean async) {\n     this.async = async;\n-  }\n+    }\n \n-  public SignalEventDefinition clone() {\n+    public SignalEventDefinition clone() {\n     SignalEventDefinition clone = new SignalEventDefinition();\n     clone.setValues(this);\n     return clone;\n-  }\n+    }\n \n-  public void setValues(SignalEventDefinition otherDefinition) {\n+    public void setValues(SignalEventDefinition otherDefinition) {\n     super.setValues(otherDefinition);\n     setSignalRef(otherDefinition.getSignalRef());\n     setSignalExpression(otherDefinition.getSignalExpression());\n     setAsync(otherDefinition.isAsync());\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/689/SignalEventDefinition.java\nindex 9a17f403b1..f75fbd4fa2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/689/SignalEventDefinition.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class SignalEventDefinition extends EventDefinition {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/689/SignalEventDefinition.java\nindex 9a17f403b1..f75fbd4fa2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/689/SignalEventDefinition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/689/SignalEventDefinition.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n public class SignalEventDefinition extends EventDefinition {\n",
            "diff_size": 1
        }
    ]
}