{
    "error_id": "760",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/760/PSStartUpConfig.java\nindex 58e140ea2a..6cdef9d3c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/760/PSStartUpConfig.java\n@@ -20,97 +20,99 @@ import java.util.Map;\n import java.util.Map.Entry;\n \n public class PSStartUpConfig {\n-  private int psNum;\n-  private int psMemoryInMB;\n-  private int psVcoreNum;\n-  private int psAgentNum;\n-  private int psAgentMemoryInMB;\n-  private int psAgentVcoreNum;\n-  private Map<String, String> config;\n-\n-  public PSStartUpConfig(int psNum, int psMemoryInMB, int psVcoreNum, int psAgentNum,\n-      int psAgentMemoryInMB, int psAgentVcoreNum, Map<String, String> config) {\n-    this.psNum = psNum;\n-    this.psMemoryInMB = psMemoryInMB;\n-    this.psVcoreNum = psVcoreNum;\n-    this.psAgentNum = psAgentNum;\n-    this.psAgentMemoryInMB = psAgentMemoryInMB;\n-    this.psAgentVcoreNum = psAgentVcoreNum;\n-    this.config = config;\n-  }\n-\n-  public int getPsNum() {\n-    return psNum;\n-  }\n-\n-  public Map<String, String> getConfig() {\n-    return config;\n-  }\n-\n-  public int getPsMemoryInMB() {\n-    return psMemoryInMB;\n-  }\n-\n-  public int getPsVcoreNum() {\n-    return psVcoreNum;\n-  }\n-\n-  public int getPsAgentNum() {\n-    return psAgentNum;\n-  }\n-\n-  public int getPsAgentMemoryInMB() {\n-    return psAgentMemoryInMB;\n-  }\n-\n-  public int getPsAgentVcoreNum() {\n-    return psAgentVcoreNum;\n-  }\n-\n-  public void setPsNum(int psNum) {\n-    this.psNum = psNum;\n-  }\n-\n-  public void setPsMemoryInMB(int psMemoryInMB) {\n-    this.psMemoryInMB = psMemoryInMB;\n-  }\n-\n-  public void setPsVcoreNum(int psVcoreNum) {\n-    this.psVcoreNum = psVcoreNum;\n-  }\n-\n-  public void setPsAgentNum(int psAgentNum) {\n-    this.psAgentNum = psAgentNum;\n-  }\n-\n-  public void setPsAgentMemoryInMB(int psAgentMemoryInMB) {\n-    this.psAgentMemoryInMB = psAgentMemoryInMB;\n-  }\n-\n-  public void setPsAgentVcoreNum(int psAgentVcoreNum) {\n-    this.psAgentVcoreNum = psAgentVcoreNum;\n-  }\n-\n-  public void setConfig(Map<String, String> config) {\n-    this.config = config;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"PSStartUpConfig [psNum=\" + psNum + \", psMemoryInMB=\" + psMemoryInMB + \", psVcoreNum=\"\n-        + psVcoreNum + \", psAgentNum=\" + psAgentNum + \", psAgentMemoryInMB=\" + psAgentMemoryInMB\n-        + \", psAgentVcoreNum=\" + psAgentVcoreNum + \", config=\" + mapToString(config) + \"]\";\n-  }\n-\n-  private String mapToString(Map<String, String> config) {\n-    StringBuilder sb = new StringBuilder();\n-    for (Entry<String, String> entry : config.entrySet()) {\n-      sb.append(entry.getKey());\n-      sb.append(\":\");\n-      sb.append(entry.getValue());\n-      sb.append(\"\\n\");\n-    }\n-\n-    return sb.toString();\n-  }\n+    private int psNum;\n+    private int psMemoryInMB;\n+    private int psVcoreNum;\n+    private int psAgentNum;\n+    private int psAgentMemoryInMB;\n+    private int psAgentVcoreNum;\n+    private Map<String, String> config;\n+\n+    public PSStartUpConfig(int psNum, int psMemoryInMB, int psVcoreNum, int psAgentNum,\n+                           int psAgentMemoryInMB, int psAgentVcoreNum, Map<String, String> config) {\n+        this.psNum = psNum;\n+        this.psMemoryInMB = psMemoryInMB;\n+        this.psVcoreNum = psVcoreNum;\n+        this.psAgentNum = psAgentNum;\n+        this.psAgentMemoryInMB = psAgentMemoryInMB;\n+        this.psAgentVcoreNum = psAgentVcoreNum;\n+        this.config = config;\n+    }\n+\n+    public int getPsNum() {\n+        return psNum;\n+    }\n+\n+    public Map<String, String> getConfig() {\n+        return config;\n+    }\n+\n+    public int getPsMemoryInMB() {\n+        return psMemoryInMB;\n+    }\n+\n+    public int getPsVcoreNum() {\n+        return psVcoreNum;\n+    }\n+\n+    public int getPsAgentNum() {\n+        return psAgentNum;\n+    }\n+\n+    public int getPsAgentMemoryInMB() {\n+        return psAgentMemoryInMB;\n+    }\n+\n+    public int getPsAgentVcoreNum() {\n+        return psAgentVcoreNum;\n+    }\n+\n+    public void setPsNum(int psNum) {\n+        this.psNum = psNum;\n+    }\n+\n+    public void setPsMemoryInMB(int psMemoryInMB) {\n+        this.psMemoryInMB = psMemoryInMB;\n+    }\n+\n+    public void setPsVcoreNum(int psVcoreNum) {\n+        this.psVcoreNum = psVcoreNum;\n+    }\n+\n+    public void setPsAgentNum(int psAgentNum) {\n+        this.psAgentNum = psAgentNum;\n+    }\n+\n+    public void setPsAgentMemoryInMB(int psAgentMemoryInMB) {\n+        this.psAgentMemoryInMB = psAgentMemoryInMB;\n+    }\n+\n+    public void setPsAgentVcoreNum(int psAgentVcoreNum) {\n+        this.psAgentVcoreNum = psAgentVcoreNum;\n+    }\n+\n+    public void setConfig(Map<String, String> config) {\n+        this.config = config;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"PSStartUpConfig [psNum=\" + psNum + \", psMemoryInMB=\" + psMemoryInMB +\n+                \", psVcoreNum=\"\n+                + psVcoreNum + \", psAgentNum=\" + psAgentNum + \", psAgentMemoryInMB=\" +\n+                psAgentMemoryInMB\n+                + \", psAgentVcoreNum=\" + psAgentVcoreNum + \", config=\" + mapToString(config) + \"]\";\n+    }\n+\n+    private String mapToString(Map<String, String> config) {\n+        StringBuilder sb = new StringBuilder();\n+        for (Entry<String, String> entry : config.entrySet()) {\n+            sb.append(entry.getKey());\n+            sb.append(\":\");\n+            sb.append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+\n+        return sb.toString();\n+    }\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/760/PSStartUpConfig.java\nindex 58e140ea2a..3e52069d83 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/760/PSStartUpConfig.java\n@@ -28,8 +28,7 @@ public class PSStartUpConfig {\n   private int psAgentVcoreNum;\n   private Map<String, String> config;\n \n-  public PSStartUpConfig(int psNum, int psMemoryInMB, int psVcoreNum, int psAgentNum,\n-      int psAgentMemoryInMB, int psAgentVcoreNum, Map<String, String> config) {\n+  public PSStartUpConfig(int psNum, int psMemoryInMB, int psVcoreNum, int psAgentNum, int psAgentMemoryInMB, int psAgentVcoreNum, Map<String, String> config) {\n     this.psNum = psNum;\n     this.psMemoryInMB = psMemoryInMB;\n     this.psVcoreNum = psVcoreNum;\n@@ -113,4 +112,4 @@ public class PSStartUpConfig {\n \n     return sb.toString();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 270).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/760/PSStartUpConfig.java\nindex 58e140ea2a..afc4b75308 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/760/PSStartUpConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/760/PSStartUpConfig.java\n@@ -20,16 +20,20 @@ import java.util.Map;\n import java.util.Map.Entry;\n \n public class PSStartUpConfig {\n-  private int psNum;\n-  private int psMemoryInMB;\n-  private int psVcoreNum;\n-  private int psAgentNum;\n-  private int psAgentMemoryInMB;\n-  private int psAgentVcoreNum;\n-  private Map<String, String> config;\n-\n-  public PSStartUpConfig(int psNum, int psMemoryInMB, int psVcoreNum, int psAgentNum,\n-      int psAgentMemoryInMB, int psAgentVcoreNum, Map<String, String> config) {\n+    private int psNum;\n+    private int psMemoryInMB;\n+    private int psVcoreNum;\n+    private int psAgentNum;\n+    private int psAgentMemoryInMB;\n+    private int psAgentVcoreNum;\n+    private Map<String, String> config;\n+\n+    public PSStartUpConfig(int psNum,\n+                           int psMemoryInMB,\n+                           int psVcoreNum,\n+                           int psAgentNum,\n+                           int psAgentMemoryInMB,\n+                           int psAgentVcoreNum, Map<String, String> config) {\n     this.psNum = psNum;\n     this.psMemoryInMB = psMemoryInMB;\n     this.psVcoreNum = psVcoreNum;\n@@ -37,80 +41,78 @@ public class PSStartUpConfig {\n     this.psAgentMemoryInMB = psAgentMemoryInMB;\n     this.psAgentVcoreNum = psAgentVcoreNum;\n     this.config = config;\n-  }\n+    }\n \n-  public int getPsNum() {\n+    public int getPsNum() {\n     return psNum;\n-  }\n+    }\n \n-  public Map<String, String> getConfig() {\n+    public Map<String, String> getConfig() {\n     return config;\n-  }\n+    }\n \n-  public int getPsMemoryInMB() {\n+    public int getPsMemoryInMB() {\n     return psMemoryInMB;\n-  }\n+    }\n \n-  public int getPsVcoreNum() {\n+    public int getPsVcoreNum() {\n     return psVcoreNum;\n-  }\n+    }\n \n-  public int getPsAgentNum() {\n+    public int getPsAgentNum() {\n     return psAgentNum;\n-  }\n+    }\n \n-  public int getPsAgentMemoryInMB() {\n+    public int getPsAgentMemoryInMB() {\n     return psAgentMemoryInMB;\n-  }\n+    }\n \n-  public int getPsAgentVcoreNum() {\n+    public int getPsAgentVcoreNum() {\n     return psAgentVcoreNum;\n-  }\n+    }\n \n-  public void setPsNum(int psNum) {\n+    public void setPsNum(int psNum) {\n     this.psNum = psNum;\n-  }\n+    }\n \n-  public void setPsMemoryInMB(int psMemoryInMB) {\n+    public void setPsMemoryInMB(int psMemoryInMB) {\n     this.psMemoryInMB = psMemoryInMB;\n-  }\n+    }\n \n-  public void setPsVcoreNum(int psVcoreNum) {\n+    public void setPsVcoreNum(int psVcoreNum) {\n     this.psVcoreNum = psVcoreNum;\n-  }\n+    }\n \n-  public void setPsAgentNum(int psAgentNum) {\n+    public void setPsAgentNum(int psAgentNum) {\n     this.psAgentNum = psAgentNum;\n-  }\n+    }\n \n-  public void setPsAgentMemoryInMB(int psAgentMemoryInMB) {\n+    public void setPsAgentMemoryInMB(int psAgentMemoryInMB) {\n     this.psAgentMemoryInMB = psAgentMemoryInMB;\n-  }\n+    }\n \n-  public void setPsAgentVcoreNum(int psAgentVcoreNum) {\n+    public void setPsAgentVcoreNum(int psAgentVcoreNum) {\n     this.psAgentVcoreNum = psAgentVcoreNum;\n-  }\n+    }\n \n-  public void setConfig(Map<String, String> config) {\n+    public void setConfig(Map<String, String> config) {\n     this.config = config;\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n-    return \"PSStartUpConfig [psNum=\" + psNum + \", psMemoryInMB=\" + psMemoryInMB + \", psVcoreNum=\"\n-        + psVcoreNum + \", psAgentNum=\" + psAgentNum + \", psAgentMemoryInMB=\" + psAgentMemoryInMB\n-        + \", psAgentVcoreNum=\" + psAgentVcoreNum + \", config=\" + mapToString(config) + \"]\";\n-  }\n+    @Override\n+    public String toString() {\n+    return \"PSStartUpConfig [psNum=\" + psNum + \", psMemoryInMB=\" + psMemoryInMB + \", psVcoreNum=\" + psVcoreNum + \", psAgentNum=\" + psAgentNum + \", psAgentMemoryInMB=\" + psAgentMemoryInMB + \", psAgentVcoreNum=\" + psAgentVcoreNum + \", config=\" + mapToString(config) + \"]\";\n+    }\n \n-  private String mapToString(Map<String, String> config) {\n+    private String mapToString(Map<String, String> config) {\n     StringBuilder sb = new StringBuilder();\n     for (Entry<String, String> entry : config.entrySet()) {\n-      sb.append(entry.getKey());\n-      sb.append(\":\");\n-      sb.append(entry.getValue());\n-      sb.append(\"\\n\");\n+        sb.append(entry.getKey());\n+        sb.append(\":\");\n+        sb.append(entry.getValue());\n+        sb.append(\"\\n\");\n     }\n-\n     return sb.toString();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}