{
    "error_id": "651",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/651/ErrorMetric.java\nindex e81c24cbc3..65bc8da588 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/651/ErrorMetric.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.ml.algorithm.metric;\n \n /**\n@@ -21,43 +22,43 @@ package com.tencent.angel.ml.algorithm.metric;\n \n public class ErrorMetric implements Metric {\n \n-  private static float threshold = 0.5f;\n+    private static float threshold = 0.5f;\n \n-  /**\n-   * return name of metric\n-   *\n-   * @return the name\n-   */\n-  @Override\n-  public String getName() {\n-    return \"error\";\n-  }\n+    /**\n+     * return name of metric\n+     *\n+     * @return the name\n+     */\n+    @Override\n+    public String getName() {\n+        return \"error\";\n+    }\n \n-  /**\n-   * evaluate a specific metric for instances\n-   *\n-   * @param preds the predictions\n-   * @param labels the labels\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float eval(float[] preds, float[] labels) {\n-    float err = 0.0f;\n-    for (int i = 0; i < preds.length; i++) {\n-      err += evalOne(preds[i], labels[i]);\n+    /**\n+     * evaluate a specific metric for instances\n+     *\n+     * @param preds  the predictions\n+     * @param labels the labels\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float eval(float[] preds, float[] labels) {\n+        float err = 0.0f;\n+        for (int i = 0; i < preds.length; i++) {\n+            err += evalOne(preds[i], labels[i]);\n+        }\n+        return err / preds.length;\n     }\n-    return err / preds.length;\n-  }\n \n-  /**\n-   * evaluate a specific metric for one instance\n-   *\n-   * @param pred the prediction\n-   * @param label the label\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float evalOne(float pred, float label) {\n-    return pred > threshold ? 1.0f - label : label;\n-  }\n+    /**\n+     * evaluate a specific metric for one instance\n+     *\n+     * @param pred  the prediction\n+     * @param label the label\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float evalOne(float pred, float label) {\n+        return pred > threshold ? 1.0f - label : label;\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/651/ErrorMetric.java\nindex e81c24cbc3..38e26ec0e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/651/ErrorMetric.java\n@@ -60,4 +60,4 @@ public class ErrorMetric implements Metric {\n   public float evalOne(float pred, float label) {\n     return pred > threshold ? 1.0f - label : label;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 62.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/651/ErrorMetric.java\nindex e81c24cbc3..bc800615d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/651/ErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/651/ErrorMetric.java\n@@ -19,19 +19,20 @@ package com.tencent.angel.ml.algorithm.metric;\n  * Description: the metric of error ratio\n  */\n \n-public class ErrorMetric implements Metric {\n \n-  private static float threshold = 0.5f;\n+public class ErrorMetric implements Metric {\n+    private static float threshold = 0.5f;\n \n   /**\n    * return name of metric\n    *\n    * @return the name\n    */\n-  @Override\n-  public String getName() {\n+\n+    @Override\n+    public String getName() {\n     return \"error\";\n-  }\n+    }\n \n   /**\n    * evaluate a specific metric for instances\n@@ -40,14 +41,15 @@ public class ErrorMetric implements Metric {\n    * @param labels the labels\n    * @return the eval metric\n    */\n-  @Override\n-  public float eval(float[] preds, float[] labels) {\n+\n+    @Override\n+    public float eval(float[] preds, float[] labels) {\n     float err = 0.0f;\n     for (int i = 0; i < preds.length; i++) {\n-      err += evalOne(preds[i], labels[i]);\n+        err += evalOne(preds[i], labels[i]);\n     }\n     return err / preds.length;\n-  }\n+    }\n \n   /**\n    * evaluate a specific metric for one instance\n@@ -56,8 +58,10 @@ public class ErrorMetric implements Metric {\n    * @param label the label\n    * @return the eval metric\n    */\n-  @Override\n-  public float evalOne(float pred, float label) {\n+\n+    @Override\n+    public float evalOne(float pred, float label) {\n     return pred > threshold ? 1.0f - label : label;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}