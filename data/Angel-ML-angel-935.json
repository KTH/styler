{
    "error_id": "935",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 220.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/935/InitNeighborTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/935/InitNeighborTest2.java\nindex cd74150480..b8f409582c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/935/InitNeighborTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/935/InitNeighborTest2.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph;\n \n import com.tencent.angel.client.AngelClient;\n@@ -59,143 +60,144 @@ import org.junit.Test;\n \n public class InitNeighborTest2 {\n \n-  public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n-  public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n-  public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n-  public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n-\n-  public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n-  public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n-  public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n-  public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n-\n-  public static String DENSE_INT_MAT = \"dense_int_mat\";\n-  public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n-  public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n-  public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n-\n-  public static String DENSE_LONG_MAT = \"dense_long_mat\";\n-  public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n-  public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n-  public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n-\n-  public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n-  public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n-  public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n-\n-  public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n-  public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n-  public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n-\n-  public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n-  public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n-  public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n-\n-  public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n-  public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n-\n-  private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100000;\n-  int start = 100;\n-  int end = 1000000;\n-  int nnz = 1000;\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @Before\n-  public void setup() throws Exception {\n-    // set basic configuration keys\n-    Configuration conf = new Configuration();\n-    conf.setBoolean(\"mapred.mapper.new-api\", true);\n-    conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-    conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n-\n-    // use local deploy mode and dummy dataspliter\n-    conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-    conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n-    conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n-    conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n-    conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-    //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n-    conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 3);\n-\n-    // get a angel client\n-    angelClient = AngelClientFactory.get(conf);\n-\n-    // add sparse float matrix\n-    MatrixContext siMat = new MatrixContext();\n-    siMat.setName(SPARSE_INT_MAT);\n-    siMat.setRowType(RowType.T_ANY_LONGKEY_SPARSE);\n-    siMat.setRowNum(1);\n-    siMat.setValidIndexNum(100);\n-    siMat.setColNum(10000000000L);\n-    siMat.setValueType(LongArrayElement.class);\n-    //siMat.setPartitionStorageClass(LongElementMapStorage.class);\n-    //siMat.setPartitionClass(CSRPartition.class);\n-    angelClient.addMatrix(siMat);\n-\n-    // Start PS\n-    angelClient.startPSServer();\n-\n-    // Start to run application\n-    angelClient.run();\n-\n-    Thread.sleep(5000);\n-\n-    psId = new ParameterServerId(0);\n-    psAttempt0Id = new PSAttemptId(psId, 0);\n-\n-    WorkerGroupId workerGroupId = new WorkerGroupId(0);\n-    workerId = new WorkerId(workerGroupId, 0);\n-    workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n-\n-  @Test\n-  public void testCSR() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n-    int matrixId = client.getMatrixId();\n-\n-    ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n-    Location masterLoc =\n-        LocalClusterContext.get().getMaster().getAppMaster().getAppContext().getMasterService()\n-            .getLocation();\n-    TConnection connection = TConnectionManager.getConnection(ps.getConf());\n-    MasterProtocol master = connection.getMasterService(masterLoc.getIp(), masterLoc.getPort());\n-\n-    // Init node neighbors\n-    Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>();\n-\n-    nodeIdToNeighbors.put(1, new long[]{2, 3, 4, 5, 6});\n-    nodeIdToNeighbors.put(2, new long[]{4, 5});\n-    nodeIdToNeighbors.put(3, new long[]{4, 5, 6});\n-    nodeIdToNeighbors.put(4, new long[]{5, 6});\n-    nodeIdToNeighbors.put(5, new long[]{6});\n-    nodeIdToNeighbors.put(8, new long[]{3, 4});\n-    InitNeighbor func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n-    client.asyncUpdate(func).get();\n-    nodeIdToNeighbors.clear();\n+    public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+    public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+    public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+    public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n+\n+    public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+    public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+    public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+    public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n+\n+    public static String DENSE_INT_MAT = \"dense_int_mat\";\n+    public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+    public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+    public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n+\n+    public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+    public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+    public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+    public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n+\n+    public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+    public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+    public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n+\n+    public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+    public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+    public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n+\n+    public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+    public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+    public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n+\n+    public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+    public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n+    public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n+\n+    private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100000;\n+    int start = 100;\n+    int end = 1000000;\n+    int nnz = 1000;\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n+    }\n+\n+    @Before\n+    public void setup() throws Exception {\n+        // set basic configuration keys\n+        Configuration conf = new Configuration();\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n+\n+        // use local deploy mode and dummy dataspliter\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n+        conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n+\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+        //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n+\n+        conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n+        conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 3);\n+\n+        // get a angel client\n+        angelClient = AngelClientFactory.get(conf);\n+\n+        // add sparse float matrix\n+        MatrixContext siMat = new MatrixContext();\n+        siMat.setName(SPARSE_INT_MAT);\n+        siMat.setRowType(RowType.T_ANY_LONGKEY_SPARSE);\n+        siMat.setRowNum(1);\n+        siMat.setValidIndexNum(100);\n+        siMat.setColNum(10000000000L);\n+        siMat.setValueType(LongArrayElement.class);\n+        //siMat.setPartitionStorageClass(LongElementMapStorage.class);\n+        //siMat.setPartitionClass(CSRPartition.class);\n+        angelClient.addMatrix(siMat);\n+\n+        // Start PS\n+        angelClient.startPSServer();\n+\n+        // Start to run application\n+        angelClient.run();\n+\n+        Thread.sleep(5000);\n+\n+        psId = new ParameterServerId(0);\n+        psAttempt0Id = new PSAttemptId(psId, 0);\n+\n+        WorkerGroupId workerGroupId = new WorkerGroupId(0);\n+        workerId = new WorkerId(workerGroupId, 0);\n+        workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n+    }\n+\n+    @Test\n+    public void testCSR() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n+        int matrixId = client.getMatrixId();\n+\n+        ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n+        Location masterLoc =\n+                LocalClusterContext.get().getMaster().getAppMaster().getAppContext()\n+                        .getMasterService()\n+                        .getLocation();\n+        TConnection connection = TConnectionManager.getConnection(ps.getConf());\n+        MasterProtocol master = connection.getMasterService(masterLoc.getIp(), masterLoc.getPort());\n+\n+        // Init node neighbors\n+        Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>();\n+\n+        nodeIdToNeighbors.put(1, new long[] {2, 3, 4, 5, 6});\n+        nodeIdToNeighbors.put(2, new long[] {4, 5});\n+        nodeIdToNeighbors.put(3, new long[] {4, 5, 6});\n+        nodeIdToNeighbors.put(4, new long[] {5, 6});\n+        nodeIdToNeighbors.put(5, new long[] {6});\n+        nodeIdToNeighbors.put(8, new long[] {3, 4});\n+        InitNeighbor func = new InitNeighbor(new InitNeighborParam(matrixId, nodeIdToNeighbors));\n+        client.asyncUpdate(func).get();\n+        nodeIdToNeighbors.clear();\n \n     /*nodeIdToNeighbors.put(1, new long[]{4, 5, 6});\n     nodeIdToNeighbors.put(2, new long[]{5});\n@@ -212,51 +214,55 @@ public class InitNeighborTest2 {\n     nodeIdToNeighbors.clear();\n     */\n \n-    //client.asyncUpdate(new InitNeighborOver(new InitNeighborOverParam(matrixId))).get();\n-\n-    // Sample the neighbors\n-    long[] nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n-    SampleNeighborParam param = new SampleNeighborParam(matrixId, nodeIds, 2);\n-    Long2ObjectOpenHashMap<long[]> result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    ObjectIterator<Long2ObjectMap.Entry<long[]>> iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n-    LOG.info(\"==============================sample neighbors result============================\");\n-    Long2ObjectMap.Entry<long[]> entry;\n-    while (iter.hasNext()) {\n-      entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+        //client.asyncUpdate(new InitNeighborOver(new InitNeighborOverParam(matrixId))).get();\n+\n+        // Sample the neighbors\n+        long[] nodeIds = new long[] {1, 2, 3, 4, 5, 6, 7, 8};\n+        SampleNeighborParam param = new SampleNeighborParam(matrixId, nodeIds, 2);\n+        Long2ObjectOpenHashMap<long[]> result = ((SampleNeighborResult) (client\n+                .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+        ObjectIterator<Long2ObjectMap.Entry<long[]>> iter = result\n+                .long2ObjectEntrySet().fastIterator();\n+\n+        LOG.info(\n+                \"==============================sample neighbors result============================\");\n+        Long2ObjectMap.Entry<long[]> entry;\n+        while (iter.hasNext()) {\n+            entry = iter.next();\n+            LOG.info(\n+                    \"node id = \" + entry.getLongKey() + \", neighbors = \" +\n+                            Arrays.toString(entry.getValue()));\n+        }\n+\n+        client.checkpoint(0).get();\n+\n+        ps.stop(-1);\n+        PSErrorRequest request = PSErrorRequest.newBuilder()\n+                .setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id))\n+                .setMsg(\"out of memory\").build();\n+        master.psError(null, request);\n+\n+        Thread.sleep(10000);\n+\n+        param = new SampleNeighborParam(matrixId, nodeIds, -1);\n+        result = ((SampleNeighborResult) (client\n+                .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+        iter = result\n+                .long2ObjectEntrySet().fastIterator();\n+\n+        LOG.info(\n+                \"==============================sample neighbors result============================\");\n+        while (iter.hasNext()) {\n+            entry = iter.next();\n+            LOG.info(\n+                    \"node id = \" + entry.getLongKey() + \", neighbors = \" +\n+                            Arrays.toString(entry.getValue()));\n+        }\n     }\n \n-    client.checkpoint(0).get();\n-\n-    ps.stop(-1);\n-    PSErrorRequest request = PSErrorRequest.newBuilder()\n-        .setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id))\n-        .setMsg(\"out of memory\").build();\n-    master.psError(null, request);\n-\n-    Thread.sleep(10000);\n-\n-    param = new SampleNeighborParam(matrixId, nodeIds, -1);\n-    result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n-    LOG.info(\"==============================sample neighbors result============================\");\n-    while (iter.hasNext()) {\n-      entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+    @After\n+    public void stop() throws AngelException {\n+        LOG.info(\"stop local cluster\");\n+        angelClient.stop();\n     }\n-  }\n-\n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n-  }\n }\n",
            "diff_size": 211
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/935/InitNeighborTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/935/InitNeighborTest2.java\nindex cd74150480..8808ed2d0b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/935/InitNeighborTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/935/InitNeighborTest2.java\n@@ -59,62 +59,84 @@ import org.junit.Test;\n \n public class InitNeighborTest2 {\n \n-  public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n-  public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n-  public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n-  public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n-\n-  public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n-  public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n-  public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n-  public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n-\n-  public static String DENSE_INT_MAT = \"dense_int_mat\";\n-  public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n-  public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n-  public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n-\n-  public static String DENSE_LONG_MAT = \"dense_long_mat\";\n-  public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n-  public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n-  public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n-\n-  public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n-  public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n-  public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n-\n-  public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n-  public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n-  public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n-\n-  public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n-  public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n-  public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n-\n-  public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n-  public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n-\n-  private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100000;\n-  int start = 100;\n-  int end = 1000000;\n-  int nnz = 1000;\n-\n-  static {\n+    public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+\n+    public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+\n+    public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+\n+    public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n+\n+    public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+\n+    public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+\n+    public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+\n+    public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n+\n+    public static String DENSE_INT_MAT = \"dense_int_mat\";\n+\n+    public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+\n+    public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+\n+    public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n+\n+    public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+\n+    public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+\n+    public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+\n+    public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n+\n+    public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+\n+    public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+\n+    public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n+\n+    public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+\n+    public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+\n+    public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n+\n+    public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+\n+    public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+\n+    public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n+\n+    public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+\n+    public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n+\n+    public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n+    private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100000;\n+\n+    int start = 100;\n+\n+    int end = 1000000;\n+\n+    int nnz = 1000;\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @Before\n-  public void setup() throws Exception {\n+    @Before\n+    public void setup() throws Exception {\n     // set basic configuration keys\n     Configuration conf = new Configuration();\n     conf.setBoolean(\"mapred.mapper.new-api\", true);\n@@ -128,12 +150,10 @@ public class InitNeighborTest2 {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -160,33 +180,26 @@ public class InitNeighborTest2 {\n \n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n+    }\n \n-  @Test\n-  public void testCSR() throws Exception {\n+    @Test\n+    public void testCSR() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n     int matrixId = client.getMatrixId();\n-\n     ParameterServer ps = LocalClusterContext.get().getPS(psAttempt0Id).getPS();\n-    Location masterLoc =\n-        LocalClusterContext.get().getMaster().getAppMaster().getAppContext().getMasterService()\n-            .getLocation();\n+    Location masterLoc = LocalClusterContext.get().getMaster().getAppMaster().getAppContext().getMasterService().getLocation();\n     TConnection connection = TConnectionManager.getConnection(ps.getConf());\n     MasterProtocol master = connection.getMasterService(masterLoc.getIp(), masterLoc.getPort());\n \n     // Init node neighbors\n     Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>();\n-\n     nodeIdToNeighbors.put(1, new long[]{2, 3, 4, 5, 6});\n     nodeIdToNeighbors.put(2, new long[]{4, 5});\n     nodeIdToNeighbors.put(3, new long[]{4, 5, 6});\n@@ -217,46 +230,34 @@ public class InitNeighborTest2 {\n     // Sample the neighbors\n     long[] nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n     SampleNeighborParam param = new SampleNeighborParam(matrixId, nodeIds, 2);\n-    Long2ObjectOpenHashMap<long[]> result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    ObjectIterator<Long2ObjectMap.Entry<long[]>> iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n+    Long2ObjectOpenHashMap<long[]> result = ((SampleNeighborResult) (client.get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+    ObjectIterator<Long2ObjectMap.Entry<long[]>> iter = result.long2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n     Long2ObjectMap.Entry<long[]> entry;\n     while (iter.hasNext()) {\n-      entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+        entry = iter.next();\n+        LOG.info(\"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n     }\n-\n     client.checkpoint(0).get();\n-\n     ps.stop(-1);\n-    PSErrorRequest request = PSErrorRequest.newBuilder()\n-        .setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id))\n-        .setMsg(\"out of memory\").build();\n+    PSErrorRequest request = PSErrorRequest.newBuilder().setPsAttemptId(ProtobufUtil.convertToIdProto(psAttempt0Id)).setMsg(\"out of memory\").build();\n     master.psError(null, request);\n-\n     Thread.sleep(10000);\n-\n     param = new SampleNeighborParam(matrixId, nodeIds, -1);\n-    result = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n-    iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n+    result = ((SampleNeighborResult) (client.get(new SampleNeighbor(param)))).getNodeIdToNeighbors();\n+    iter = result.long2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n+\n     while (iter.hasNext()) {\n-      entry = iter.next();\n-      LOG.info(\n-          \"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+        entry = iter.next();\n+        LOG.info(\"node id = \" + entry.getLongKey() + \", neighbors = \" + Arrays.toString(entry.getValue()));\n+    }\n     }\n-  }\n \n-  @After\n-  public void stop() throws AngelException {\n+    @After\n+    public void stop() throws AngelException {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 119
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}