{
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "42",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 99).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  private ProcessingTimeWatermarkEstimator createEstimator() {\n    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get).build();\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/20/ProcessingTimeWatermarkEstimatorTest.java\nindex 8022838b56..4c4cf0f617 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/20/ProcessingTimeWatermarkEstimatorTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.time;\n \n import static org.junit.Assert.*;\n@@ -39,6 +40,7 @@ public class ProcessingTimeWatermarkEstimatorTest {\n   }\n \n   private ProcessingTimeWatermarkEstimator createEstimator() {\n-    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get).build();\n+    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get)\n+        .build();\n   }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/20/ProcessingTimeWatermarkEstimatorTest.java\nindex 8022838b56..04b2c039bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/20/ProcessingTimeWatermarkEstimatorTest.java\n@@ -41,4 +41,4 @@ public class ProcessingTimeWatermarkEstimatorTest {\n   private ProcessingTimeWatermarkEstimator createEstimator() {\n     return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get).build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'member def type' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/20/ProcessingTimeWatermarkEstimatorTest.java\nindex 8022838b56..8002950144 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/20/ProcessingTimeWatermarkEstimatorTest.java\n@@ -16,29 +16,31 @@\n package cz.o2.proxima.direct.time;\n \n import static org.junit.Assert.*;\n-\n import java.util.concurrent.atomic.AtomicLong;\n import org.junit.Before;\n import org.junit.Test;\n \n+\n public class ProcessingTimeWatermarkEstimatorTest {\n-  AtomicLong stamp;\n \n-  @Before\n-  public void setUp() {\n+    AtomicLong stamp;\n+\n+    @Before\n+    public void setUp() {\n     stamp = new AtomicLong(0L);\n-  }\n+    }\n \n-  @Test\n-  public void testGetWatermark() {\n+    @Test\n+    public void testGetWatermark() {\n     ProcessingTimeWatermarkEstimator est = createEstimator();\n     stamp.incrementAndGet();\n     assertEquals(1, est.getWatermark());\n     stamp.incrementAndGet();\n     assertEquals(2, est.getWatermark());\n-  }\n+    }\n \n-  private ProcessingTimeWatermarkEstimator createEstimator() {\n-    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get).build();\n-  }\n-}\n+    private ProcessingTimeWatermarkEstimator createEstimator() {\n+    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get)\n+                                                        .build();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/20/ProcessingTimeWatermarkEstimatorTest.java\nindex 8022838b56..46b553caf7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/20/ProcessingTimeWatermarkEstimatorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/20/ProcessingTimeWatermarkEstimatorTest.java\n@@ -39,6 +39,6 @@ public class ProcessingTimeWatermarkEstimatorTest {\n   }\n \n   private ProcessingTimeWatermarkEstimator createEstimator() {\n-    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp::get).build();\n+    return ProcessingTimeWatermarkEstimator.newBuilder().withTimestampSupplier(stamp:: get).build();\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}