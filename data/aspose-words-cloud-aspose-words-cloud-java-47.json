{
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "147",
                "column": "43",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    StyleInsert styleInsert = (StyleInsert)o;\n    return\n        Objects.equals(this.styleName, styleInsert.styleName) &&\n        Objects.equals(this.styleType, styleInsert.styleType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/47/StyleInsert.java\nindex 87282208e4..9acfaf2df6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/47/StyleInsert.java\n@@ -144,7 +144,7 @@ public class StyleInsert {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StyleInsert styleInsert = (StyleInsert)o;\n+    StyleInsert styleInsert = (StyleInsert) o;\n     return\n         Objects.equals(this.styleName, styleInsert.styleName) &&\n         Objects.equals(this.styleType, styleInsert.styleType);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/47/StyleInsert.java\nindex 87282208e4..6519209508 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/47/StyleInsert.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,107 +50,110 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Represents a single document style to insert.\")\n public class StyleInsert {\n-    /**\n-     * Gets or sets the StyleType value that specifies the type of the style to create.\n-     */\n-    @JsonAdapter(StyleTypeEnum.Adapter.class)\n-    public enum StyleTypeEnum {\n-        PARAGRAPH(\"Paragraph\"),\n-        CHARACTER(\"Character\"),\n-        TABLE(\"Table\"),\n-        LIST(\"List\");\n-\n-        private String value;\n-\n-        StyleTypeEnum(String value) {\n-            this.value = value;\n-        }\n-\n-        public String getValue() {\n-            return value;\n-        }\n+  /**\n+   * Gets or sets the StyleType value that specifies the type of the style to create.\n+   */\n+  @JsonAdapter(StyleTypeEnum.Adapter.class)\n+  public enum StyleTypeEnum {\n+    PARAGRAPH(\"Paragraph\"),\n+    CHARACTER(\"Character\"),\n+    TABLE(\"Table\"),\n+    LIST(\"List\");\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    private String value;\n \n-        public static StyleTypeEnum fromValue(String text) {\n-            for (StyleTypeEnum b : StyleTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n-\n-        public static class Adapter extends TypeAdapter< StyleTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final StyleTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public StyleTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return StyleTypeEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    StyleTypeEnum(String value) {\n+      this.value = value;\n     }\n \n-    @SerializedName(\"StyleName\")\n-    private String styleName = null;\n-\n-    @SerializedName(\"StyleType\")\n-    private StyleTypeEnum styleType = null;\n-    public StyleInsert styleName(String styleName) {\n-        this.styleName = styleName;\n-        return this;\n+    public String getValue() {\n+      return value;\n     }\n \n-    /**\n-     * Gets or sets the case sensitive name of the style to create.\n-    * @return styleName\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the case sensitive name of the style to create.\")\n-    public String getStyleName() {\n-        return styleName;\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n     }\n \n-    public void setStyleName(String styleName) {\n-        this.styleName = styleName;\n+    public static StyleTypeEnum fromValue(String text) {\n+      for (StyleTypeEnum b : StyleTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n+        }\n+      }\n+      return null;\n     }\n \n-    public StyleInsert styleType(StyleTypeEnum styleType) {\n-        this.styleType = styleType;\n-        return this;\n+    public static class Adapter extends TypeAdapter<StyleTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final StyleTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public StyleTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return StyleTypeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    /**\n-     * Gets or sets the StyleType value that specifies the type of the style to create.\n-    * @return styleType\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the StyleType value that specifies the type of the style to create.\")\n-    public StyleTypeEnum getStyleType() {\n-        return styleType;\n-    }\n+  @SerializedName(\"StyleName\")\n+  private String styleName = null;\n \n-    public void setStyleType(StyleTypeEnum styleType) {\n-        this.styleType = styleType;\n-    }\n+  @SerializedName(\"StyleType\")\n+  private StyleTypeEnum styleType = null;\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    StyleInsert styleInsert = (StyleInsert)o;\n+  public StyleInsert styleName(String styleName) {\n+    this.styleName = styleName;\n+    return this;\n+  }\n+\n+  /**\n+   * Gets or sets the case sensitive name of the style to create.\n+   *\n+   * @return styleName\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the case sensitive name of the style to create.\")\n+  public String getStyleName() {\n+    return styleName;\n+  }\n+\n+  public void setStyleName(String styleName) {\n+    this.styleName = styleName;\n+  }\n+\n+  public StyleInsert styleType(StyleTypeEnum styleType) {\n+    this.styleType = styleType;\n+    return this;\n+  }\n+\n+  /**\n+   * Gets or sets the StyleType value that specifies the type of the style to create.\n+   *\n+   * @return styleType\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the StyleType value that specifies the type of the style to create.\")\n+  public StyleTypeEnum getStyleType() {\n+    return styleType;\n+  }\n+\n+  public void setStyleType(StyleTypeEnum styleType) {\n+    this.styleType = styleType;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    StyleInsert styleInsert = (StyleInsert) o;\n     return\n         Objects.equals(this.styleName, styleInsert.styleName) &&\n-        Objects.equals(this.styleType, styleInsert.styleType);\n+            Objects.equals(this.styleType, styleInsert.styleType);\n   }\n \n   @Override\n",
            "diff_size": 142
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "152",
                    "column": "39",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/47/StyleInsert.java\nindex 87282208e4..7c0aa17007 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/47/StyleInsert.java\n@@ -53,9 +53,12 @@ public class StyleInsert {\n     @JsonAdapter(StyleTypeEnum.Adapter.class)\n     public enum StyleTypeEnum {\n         PARAGRAPH(\"Paragraph\"),\n-        CHARACTER(\"Character\"),\n-        TABLE(\"Table\"),\n-        LIST(\"List\");\n+\n+CHARACTER(\"Character\"),\n+\n+TABLE(\"Table\"),\n+\n+LIST(\"List\");\n \n         private String value;\n \n@@ -81,7 +84,7 @@ public class StyleInsert {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< StyleTypeEnum > {\n+        public static class Adapter extends TypeAdapter<StyleTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final StyleTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -100,7 +103,8 @@ public class StyleInsert {\n \n     @SerializedName(\"StyleType\")\n     private StyleTypeEnum styleType = null;\n-    public StyleInsert styleName(String styleName) {\n+\n+public StyleInsert styleName(String styleName) {\n         this.styleName = styleName;\n         return this;\n     }\n@@ -140,13 +144,13 @@ public class StyleInsert {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StyleInsert styleInsert = (StyleInsert)o;\n-    return\n-        Objects.equals(this.styleName, styleInsert.styleName) &&\n+\n+StyleInsert styleInsert = (StyleInsert)o;\n+    return Objects.equals(this.styleName, styleInsert.styleName) &&\n         Objects.equals(this.styleType, styleInsert.styleType);\n   }\n \n@@ -175,4 +179,4 @@ public class StyleInsert {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/47/StyleInsert.java\nindex 87282208e4..87262e9b9d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/47/StyleInsert.java\n@@ -45,134 +45,158 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents a single document style to insert.\n  */\n+\n+\n @ApiModel(description = \"Represents a single document style to insert.\")\n+\n public class StyleInsert {\n     /**\n      * Gets or sets the StyleType value that specifies the type of the style to create.\n      */\n     @JsonAdapter(StyleTypeEnum.Adapter.class)\n     public enum StyleTypeEnum {\n-        PARAGRAPH(\"Paragraph\"),\n-        CHARACTER(\"Character\"),\n-        TABLE(\"Table\"),\n-        LIST(\"List\");\n+    PARAGRAPH(\"Paragraph\"),\n \n-        private String value;\n+    CHARACTER(\"Character\"),\n \n-        StyleTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    TABLE(\"Table\"),\n+\n+    LIST(\"List\");\n+\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n+    StyleTypeEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                  return String.valueOf(value);\n+    }\n+\n+    public static StyleTypeEnum fromValue(String text) {\n+        for (StyleTypeEnum b : StyleTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                           return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<StyleTypeEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final StyleTypeEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static StyleTypeEnum fromValue(String text) {\n-            for (StyleTypeEnum b : StyleTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< StyleTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final StyleTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public StyleTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return StyleTypeEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public StyleTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return StyleTypeEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"StyleName\")\n     private String styleName = null;\n \n     @SerializedName(\"StyleType\")\n     private StyleTypeEnum styleType = null;\n+\n     public StyleInsert styleName(String styleName) {\n-        this.styleName = styleName;\n-        return this;\n+    this.styleName = styleName;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the case sensitive name of the style to create.\n     * @return styleName\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the case sensitive name of the style to create.\")\n     public String getStyleName() {\n-        return styleName;\n+    return styleName;\n     }\n \n+\n     public void setStyleName(String styleName) {\n-        this.styleName = styleName;\n+    this.styleName = styleName;\n     }\n \n+\n     public StyleInsert styleType(StyleTypeEnum styleType) {\n-        this.styleType = styleType;\n-        return this;\n+    this.styleType = styleType;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the StyleType value that specifies the type of the style to create.\n     * @return styleType\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the StyleType value that specifies the type of the style to create.\")\n     public StyleTypeEnum getStyleType() {\n-        return styleType;\n+    return styleType;\n     }\n \n+\n     public void setStyleType(StyleTypeEnum styleType) {\n-        this.styleType = styleType;\n+    this.styleType = styleType;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    StyleInsert styleInsert = (StyleInsert)o;\n-    return\n-        Objects.equals(this.styleName, styleInsert.styleName) &&\n+\n+        StyleInsert styleInsert = (StyleInsert) o;\n+        return Objects.equals(this.styleName, styleInsert.styleName) &&\n         Objects.equals(this.styleType, styleInsert.styleType);\n-  }\n+    }\n \n-  @Override\n-  public int hashCode() {\n+\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(styleName, styleType);\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class StyleInsert {\\n\");\n     sb.append(\"    styleName: \").append(toIndentedString(styleName)).append(\"\\n\");\n     sb.append(\"    styleType: \").append(toIndentedString(styleType)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/47/StyleInsert.java\nindex 87282208e4..9acfaf2df6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/47/StyleInsert.java\n@@ -144,7 +144,7 @@ public class StyleInsert {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StyleInsert styleInsert = (StyleInsert)o;\n+    StyleInsert styleInsert = (StyleInsert) o;\n     return\n         Objects.equals(this.styleName, styleInsert.styleName) &&\n         Objects.equals(this.styleType, styleInsert.styleType);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/47/StyleInsert.java\nindex 87282208e4..ec401bcabb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/47/StyleInsert.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/47/StyleInsert.java\n@@ -144,7 +144,8 @@ public class StyleInsert {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StyleInsert styleInsert = (StyleInsert)o;\n+    StyleInsert styleInsert = (StyleInsert\n+) o;\n     return\n         Objects.equals(this.styleName, styleInsert.styleName) &&\n         Objects.equals(this.styleType, styleInsert.styleType);\n",
            "diff_size": 2
        }
    ]
}