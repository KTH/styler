{
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "92",
                "column": "15",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "                );\n            final int status = response.statusCode();\n            if(status == HttpURLConnection.HTTP_OK) {\n                return Json.createReader(\n                    new StringReader(response.body())\n                ).readArray();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/6/GithubRepoInvitations.java\nindex e45912956c..edb4f0bc0f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/6/GithubRepoInvitations.java\n@@ -89,7 +89,7 @@ final class GithubRepoInvitations implements Invitations {\n                     HttpResponse.BodyHandlers.ofString()\n                 );\n             final int status = response.statusCode();\n-            if(status == HttpURLConnection.HTTP_OK) {\n+            if (status == HttpURLConnection.HTTP_OK) {\n                 return Json.createReader(\n                     new StringReader(response.body())\n                 ).readArray();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/6/GithubRepoInvitations.java\nindex e45912956c..0c388565c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/6/GithubRepoInvitations.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core;\n \n import com.selfxdsd.api.Invitation;\n@@ -38,6 +39,7 @@ import java.util.Iterator;\n \n /**\n  * Github Repo invitations.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n  * @since 0.0.7\n@@ -56,8 +58,9 @@ final class GithubRepoInvitations implements Invitations {\n \n     /**\n      * Ctor.\n+     *\n      * @param repoInvitationsUri API uri.\n-     * @param accessToken User access token.\n+     * @param accessToken        User access token.\n      */\n     GithubRepoInvitations(\n         final URI repoInvitationsUri,\n@@ -75,6 +78,7 @@ final class GithubRepoInvitations implements Invitations {\n \n     /**\n      * Fetch invitations.\n+     *\n      * @return JsonArray.\n      */\n     private JsonArray fetchInvitations() {\n@@ -89,21 +93,21 @@ final class GithubRepoInvitations implements Invitations {\n                     HttpResponse.BodyHandlers.ofString()\n                 );\n             final int status = response.statusCode();\n-            if(status == HttpURLConnection.HTTP_OK) {\n+            if (status == HttpURLConnection.HTTP_OK) {\n                 return Json.createReader(\n                     new StringReader(response.body())\n                 ).readArray();\n             } else {\n                 throw new IllegalStateException(\n                     \"Unexpected response when fetching [\"\n-                  + this.repoInvitationsUri +\"]. \"\n-                  + \"Expected 200 OK, but got \" + status + \".\"\n+                        + this.repoInvitationsUri + \"]. \"\n+                        + \"Expected 200 OK, but got \" + status + \".\"\n                 );\n             }\n         } catch (final IOException | InterruptedException ex) {\n             throw new IllegalStateException(\n                 \"Couldn't fetch invitations + [\"\n-              + this.repoInvitationsUri.toString() +\"]\",\n+                    + this.repoInvitationsUri.toString() + \"]\",\n                 ex\n             );\n         }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 280).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/6/GithubRepoInvitations.java\nindex e45912956c..764d5077ea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/6/GithubRepoInvitations.java\n@@ -79,33 +79,19 @@ final class GithubRepoInvitations implements Invitations {\n      */\n     private JsonArray fetchInvitations() {\n         try {\n-            final HttpResponse<String> response = HttpClient.newHttpClient()\n-                .send(\n-                    HttpRequest.newBuilder()\n-                        .uri(this.repoInvitationsUri)\n-                        .header(\"Content-Type\", \"application/json\")\n-                        .headers(\"Authorization\", \"token \" + this.accessToken)\n-                        .build(),\n-                    HttpResponse.BodyHandlers.ofString()\n-                );\n+            final HttpResponse<String> response = HttpClient.newHttpClient().send(HttpRequest.newBuilder().uri(this.repoInvitationsUri).header(\"Content-Type\", \"application/json\").headers(\"Authorization\", \"token \" + this.accessToken).build(), HttpResponse.BodyHandlers.ofString());\n             final int status = response.statusCode();\n             if(status == HttpURLConnection.HTTP_OK) {\n                 return Json.createReader(\n-                    new StringReader(response.body())\n-                ).readArray();\n+                    new StringReader(response.body())).readArray();\n             } else {\n                 throw new IllegalStateException(\n-                    \"Unexpected response when fetching [\"\n-                  + this.repoInvitationsUri +\"]. \"\n-                  + \"Expected 200 OK, but got \" + status + \".\"\n-                );\n+                    \"Unexpected response when fetching [\" + this.repoInvitationsUri + \"]. \" + \"Expected 200 OK, but got \" + status + \".\");\n             }\n         } catch (final IOException | InterruptedException ex) {\n             throw new IllegalStateException(\n-                \"Couldn't fetch invitations + [\"\n-              + this.repoInvitationsUri.toString() +\"]\",\n-                ex\n+                \"Couldn't fetch invitations + [\" + this.repoInvitationsUri.toString() + \"]\", ex\n             );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 280).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 56, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 52, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "'}' at column 53 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'else' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 9, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 5, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "'catch' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "'catch' child has incorrect indentation level 16, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "'catch rcurly' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/6/GithubRepoInvitations.java\nindex e45912956c..b1e7b49e1e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/6/GithubRepoInvitations.java\n@@ -24,7 +24,6 @@ package com.selfxdsd.core;\n \n import com.selfxdsd.api.Invitation;\n import com.selfxdsd.api.Invitations;\n-\n import javax.json.Json;\n import javax.json.JsonArray;\n import java.io.IOException;\n@@ -42,16 +41,22 @@ import java.util.Iterator;\n  * @version $Id$\n  * @since 0.0.7\n  */\n+\n+\n final class GithubRepoInvitations implements Invitations {\n \n     /**\n      * API uri for the repo invitations.\n      */\n+\n+\n     private final URI repoInvitationsUri;\n \n     /**\n      * User access token.\n      */\n+\n+\n     private final String accessToken;\n \n     /**\n@@ -59,10 +64,9 @@ final class GithubRepoInvitations implements Invitations {\n      * @param repoInvitationsUri API uri.\n      * @param accessToken User access token.\n      */\n-    GithubRepoInvitations(\n-        final URI repoInvitationsUri,\n-        final String accessToken\n-    ) {\n+\n+\n+    GithubRepoInvitations(final URI repoInvitationsUri, final String accessToken) {\n         this.repoInvitationsUri = repoInvitationsUri;\n         this.accessToken = accessToken;\n     }\n@@ -77,35 +81,24 @@ final class GithubRepoInvitations implements Invitations {\n      * Fetch invitations.\n      * @return JsonArray.\n      */\n+\n     private JsonArray fetchInvitations() {\n         try {\n-            final HttpResponse<String> response = HttpClient.newHttpClient()\n-                .send(\n-                    HttpRequest.newBuilder()\n-                        .uri(this.repoInvitationsUri)\n-                        .header(\"Content-Type\", \"application/json\")\n-                        .headers(\"Authorization\", \"token \" + this.accessToken)\n-                        .build(),\n-                    HttpResponse.BodyHandlers.ofString()\n-                );\n+            final HttpResponse<String> response = HttpClient.newHttpClient().send(HttpRequest.newBuilder().uri(this.repoInvitationsUri).header(\"Content-Type\", \"application/json\").headers(\"Authorization\", \"token \" + this.accessToken).build(), HttpResponse.BodyHandlers.ofString());\n             final int status = response.statusCode();\n-            if(status == HttpURLConnection.HTTP_OK) {\n-                return Json.createReader(\n-                    new StringReader(response.body())\n-                ).readArray();\n-            } else {\n-                throw new IllegalStateException(\n-                    \"Unexpected response when fetching [\"\n-                  + this.repoInvitationsUri +\"]. \"\n-                  + \"Expected 200 OK, but got \" + status + \".\"\n-                );\n-            }\n-        } catch (final IOException | InterruptedException ex) {\n-            throw new IllegalStateException(\n-                \"Couldn't fetch invitations + [\"\n-              + this.repoInvitationsUri.toString() +\"]\",\n-                ex\n-            );\n+            if( status== HttpURLConnection.HTTP_OK) {\n+                                                        return Json.createReader(new StringReader(\n+                                                                                     response.body())).readArray();\n+                                                    }\n+\n+else {\n+         throw new IllegalStateException(\n+             \"Unexpected response when fetching [\" + this.repoInvitationsUri + \"]. \" + \"Expected 200 OK, but got \" + status + \".\");\n+     }\n         }\n+\n+            catch(final IOException| InterruptedException ex) {\n+                throw new IllegalStateException(\"Couldn't fetch invitations + [\" + this.repoInvitationsUri.toString() + \"]\", ex);\n+            }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/6/GithubRepoInvitations.java\nindex e45912956c..edb4f0bc0f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/6/GithubRepoInvitations.java\n@@ -89,7 +89,7 @@ final class GithubRepoInvitations implements Invitations {\n                     HttpResponse.BodyHandlers.ofString()\n                 );\n             final int status = response.statusCode();\n-            if(status == HttpURLConnection.HTTP_OK) {\n+            if (status == HttpURLConnection.HTTP_OK) {\n                 return Json.createReader(\n                     new StringReader(response.body())\n                 ).readArray();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/6/GithubRepoInvitations.java\nindex e45912956c..689638bd91 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/6/GithubRepoInvitations.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/6/GithubRepoInvitations.java\n@@ -89,7 +89,8 @@ final class GithubRepoInvitations implements Invitations {\n                     HttpResponse.BodyHandlers.ofString()\n                 );\n             final int status = response.statusCode();\n-            if(status == HttpURLConnection.HTTP_OK) {\n+            if\n+            ( status == HttpURLConnection.HTTP_OK) {\n                 return Json.createReader(\n                     new StringReader(response.body())\n                 ).readArray();\n",
            "diff_size": 2
        }
    ]
}