{
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "218",
                "column": "23",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//                } else {\n//                    if ((mask & IndexCondition.START) != 0) {\n//                    \t//\u4f8b\u5982:sql = \"select * from my_view where f2 > 'b1'\";\n//                    \t//\u5b9e\u9645\u662fSELECT ID, NAME FROM CreateViewTest WHERE NAME >= ?1\n//                    \t//\u5728org.h2.index.IndexCondition.getMask(ArrayList<IndexCondition>)\u90a3\u91cc\u628a\n//                    \t//BIGGER_EQUAL\u3001BIGGER\u90fd\u5f53\u6210\u4e86START\uff0c\u800c\u8fd9\u91cc\u7edf\u4e00\u8f6c\u6210BIGGER_EQUAL\uff0c\u5f53view\u8981\u8fc7\u6ee4\u8bb0\u5f55\u65f6\u518d\u6309\u5927\u4e8e\u8fc7\u6ee4",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "218",
                    "column": "23",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "219",
                    "column": "23",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "460",
                    "column": "34",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/49/ViewIndex.java\nindex 34548208fa..0033ab9b01 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/49/ViewIndex.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.ArrayList;\n@@ -39,7 +40,7 @@ import org.h2.value.Value;\n public class ViewIndex extends BaseIndex implements SpatialIndex {\n \n     private static final long MAX_AGE_NANOS =\n-            TimeUnit.MILLISECONDS.toNanos(Constants.VIEW_COST_CACHE_MAX_AGE);\n+        TimeUnit.MILLISECONDS.toNanos(Constants.VIEW_COST_CACHE_MAX_AGE);\n \n     private final TableView view;\n     private final String querySQL;\n@@ -57,13 +58,13 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     /**\n      * Constructor for the original index in {@link TableView}.\n      *\n-     * @param view the table view\n-     * @param querySQL the query SQL\n+     * @param view               the table view\n+     * @param querySQL           the query SQL\n      * @param originalParameters the original parameters\n-     * @param recursive if the view is recursive\n+     * @param recursive          if the view is recursive\n      */\n     public ViewIndex(TableView view, String querySQL,\n-            ArrayList<Parameter> originalParameters, boolean recursive) {\n+                     ArrayList<Parameter> originalParameters, boolean recursive) {\n         initBaseIndex(view, 0, null, null, IndexType.createNonUnique(false));\n         this.view = view;\n         this.querySQL = querySQL;\n@@ -81,16 +82,16 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n      * Constructor for plan item generation. Over this index the query will be\n      * executed.\n      *\n-     * @param view the table view\n-     * @param index the view index\n-     * @param session the session\n-     * @param masks the masks\n-     * @param filters table filters\n-     * @param filter current filter\n+     * @param view      the table view\n+     * @param index     the view index\n+     * @param session   the session\n+     * @param masks     the masks\n+     * @param filters   table filters\n+     * @param filter    current filter\n      * @param sortOrder sort order\n      */\n     public ViewIndex(TableView view, ViewIndex index, Session session,\n-            int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n+                     int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n         initBaseIndex(view, 0, null, null, IndexType.createNonUnique(false));\n         this.view = view;\n         this.querySQL = index.querySQL;\n@@ -125,7 +126,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     public boolean isExpired() {\n         assert evaluatedAt != Long.MIN_VALUE : \"must not be called for main index of TableView\";\n         return !recursive && view.getTopQuery() == null &&\n-                System.nanoTime() - evaluatedAt > MAX_AGE_NANOS;\n+            System.nanoTime() - evaluatedAt > MAX_AGE_NANOS;\n     }\n \n     @Override\n@@ -148,7 +149,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         throw DbException.getUnsupportedException(\"VIEW\");\n     }\n \n-//<<<<<<< HEAD\n+    //<<<<<<< HEAD\n //    /**\n //     * A calculated cost value.\n //     */\n@@ -241,8 +242,8 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n //=======\n     @Override\n     public double getCost(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            HashSet<Column> allColumnsSet) {\n+                          TableFilter[] filters, int filter, SortOrder sortOrder,\n+                          HashSet<Column> allColumnsSet) {\n         return recursive ? 1000 : query.getCost();\n     }\n \n@@ -253,12 +254,12 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n \n     @Override\n     public Cursor findByGeometry(TableFilter filter, SearchRow first,\n-            SearchRow last, SearchRow intersection) {\n+                                 SearchRow last, SearchRow intersection) {\n         return find(filter.getSession(), first, last, intersection);\n     }\n \n     private static Query prepareSubQuery(String sql, Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder) {\n+                                         TableFilter[] filters, int filter, SortOrder sortOrder) {\n         assert filters != null;\n         Prepared p;\n         session.pushSubQueryInfo(masks, filters, filter, sortOrder);\n@@ -288,12 +289,12 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         }\n         if (!query.isUnion()) {\n             throw DbException.get(ErrorCode.SYNTAX_ERROR_2,\n-                    \"recursive queries without UNION ALL\");\n+                \"recursive queries without UNION ALL\");\n         }\n         SelectUnion union = (SelectUnion) query;\n         if (union.getUnionType() != SelectUnion.UNION_ALL) {\n             throw DbException.get(ErrorCode.SYNTAX_ERROR_2,\n-                    \"recursive queries without UNION ALL\");\n+                \"recursive queries without UNION ALL\");\n         }\n         Query left = union.getLeft();\n         // to ensure the last result is not closed\n@@ -339,13 +340,13 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     /**\n      * Set the query parameters.\n      *\n-     * @param session the session\n-     * @param first the lower bound\n-     * @param last the upper bound\n+     * @param session      the session\n+     * @param first        the lower bound\n+     * @param last         the upper bound\n      * @param intersection the intersection\n      */\n     public void setupQueryParameters(Session session, SearchRow first, SearchRow last,\n-            SearchRow intersection) {\n+                                     SearchRow intersection) {\n         ArrayList<Parameter> paramList = query.getParameters();\n         if (originalParameters != null) {\n             for (int i = 0, size = originalParameters.size(); i < size; i++) {\n@@ -385,7 +386,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     }\n \n     private Cursor find(Session session, SearchRow first, SearchRow last,\n-            SearchRow intersection) {\n+                        SearchRow intersection) {\n         if (recursive) {\n             return findRecursive(first, last);\n         }\n@@ -395,7 +396,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     }\n \n     private static void setParameter(ArrayList<Parameter> paramList, int x,\n-            Value v) {\n+                                     Value v) {\n         if (x >= paramList.size()) {\n             // the parameter may be optimized away as in\n             // select * from (select null as x) where x=1;\n@@ -412,7 +413,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     // \u76ee\u7684\u662f\u4e3a\u4e86\u5bf9indexColumns\u8d4b\u503c\uff0cindexColumns\u53e6\u6709\u5b83\u7528\n     // \u6bd4\u5982\u5728org.h2.command.dml.Select.prepare()\u4e2d\u5c31\u6709\u5e94\u7528(cost = preparePlan\u90a3\u884c\u4ee3\u7801\u4e4b\u540e)\n     private Query getQuery(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder) {\n+                           TableFilter[] filters, int filter, SortOrder sortOrder) {\n         Query q = prepareSubQuery(querySQL, session, masks, filters, filter, sortOrder);\n         if (masks == null) {\n             return q;\n@@ -456,7 +457,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         }\n         int len = paramColumnIndex.size();\n         ArrayList<Column> columnList = New.arrayList();\n-        for (int i = 0; i < len;) {\n+        for (int i = 0; i < len; ) {\n             int idx = paramColumnIndex.get(i);\n             columnList.add(table.getColumn(idx));\n             int mask = masks[idx];\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "218",
                    "column": "23",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/49/ViewIndex.java\nindex 34548208fa..40fdeca5ab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/49/ViewIndex.java\n@@ -435,18 +435,8 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n             }\n             indexColumnCount++;\n //<<<<<<< HEAD\n-//            paramIndex.add(i);\n-//            //\u4e3a1\u7684bit\u4e2a\u6570\uff0c\u6bd4\u5982mask=3\u65f6\uff0c\u5c31\u662f0011\uff0c\u6240\u4ee5bitCount=2\n-//            //mask=6\u65f6\uff0c\u5c31\u662f0110\uff0c\u4e5f\u5c31\u662fRANGE = START | END\n-//            //\u5982select * from my_view where f2 between 'b1' and 'b2'\n-//            if (Integer.bitCount(mask) > 1) {\n-//                // two parameters for range queries: >= x AND <= y\n-//                paramIndex.add(i);\n-//            }\n-//        }\n-//        int len = paramIndex.size(); //paramIndex\u4e2d\u653e\u7684\u662f\u5217id\n-//=======\n-            // the number of parameters depends on the mask;\n+//      \n+// the number of parameters depends on the mask;\n             // for range queries it is 2: >= x AND <= y\n             // but bitMask could also be 7 (=, and <=, and >=)\n             int bitCount = Integer.bitCount(mask);\n@@ -575,4 +565,4 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     public boolean isRecursive() {\n         return recursive;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/49/ViewIndex.java\nindex 34548208fa..bcfb7e02af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/49/ViewIndex.java\n@@ -8,7 +8,6 @@ package org.h2.index;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.concurrent.TimeUnit;\n-\n import org.h2.api.ErrorCode;\n import org.h2.command.Parser;\n import org.h2.command.Prepared;\n@@ -36,11 +35,11 @@ import org.h2.value.Value;\n  * This object represents a virtual index for a query.\n  * Actually it only represents a prepared SELECT statement.\n  */\n-public class ViewIndex extends BaseIndex implements SpatialIndex {\n \n-    private static final long MAX_AGE_NANOS =\n-            TimeUnit.MILLISECONDS.toNanos(Constants.VIEW_COST_CACHE_MAX_AGE);\n \n+public class ViewIndex extends BaseIndex implements SpatialIndex {\n+\n+    private static final long MAX_AGE_NANOS = TimeUnit.MILLISECONDS.toNanos(Constants.VIEW_COST_CACHE_MAX_AGE);\n     private final TableView view;\n     private final String querySQL;\n     private final ArrayList<Parameter> originalParameters;\n@@ -62,8 +61,8 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n      * @param originalParameters the original parameters\n      * @param recursive if the view is recursive\n      */\n-    public ViewIndex(TableView view, String querySQL,\n-            ArrayList<Parameter> originalParameters, boolean recursive) {\n+\n+    public ViewIndex(TableView view, String querySQL, ArrayList<Parameter> originalParameters, boolean recursive) {\n         initBaseIndex(view, 0, null, null, IndexType.createNonUnique(false));\n         this.view = view;\n         this.querySQL = querySQL;\n@@ -89,8 +88,9 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n      * @param filter current filter\n      * @param sortOrder sort order\n      */\n-    public ViewIndex(TableView view, ViewIndex index, Session session,\n-            int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n+\n+\n+    public ViewIndex(TableView view, ViewIndex index, Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n         initBaseIndex(view, 0, null, null, IndexType.createNonUnique(false));\n         this.view = view;\n         this.querySQL = index.querySQL;\n@@ -118,14 +118,15 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         return JoinBatch.createViewIndexLookupBatch(this);\n     }\n \n+\n     public Session getSession() {\n         return createSession;\n     }\n \n+\n     public boolean isExpired() {\n         assert evaluatedAt != Long.MIN_VALUE : \"must not be called for main index of TableView\";\n-        return !recursive && view.getTopQuery() == null &&\n-                System.nanoTime() - evaluatedAt > MAX_AGE_NANOS;\n+        return !recursive && view.getTopQuery() == null && System.nanoTime() - evaluatedAt > MAX_AGE_NANOS;\n     }\n \n     @Override\n@@ -136,6 +137,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     @Override\n     public void close(Session session) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -215,10 +217,10 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n //                    q.addGlobalCondition(param, idx, Comparison.SPATIAL_INTERSECTS);\n //                } else {\n //                    if ((mask & IndexCondition.START) != 0) {\n-//                    \t//\u4f8b\u5982:sql = \"select * from my_view where f2 > 'b1'\";\n-//                    \t//\u5b9e\u9645\u662fSELECT ID, NAME FROM CreateViewTest WHERE NAME >= ?1\n-//                    \t//\u5728org.h2.index.IndexCondition.getMask(ArrayList<IndexCondition>)\u90a3\u91cc\u628a\n-//                    \t//BIGGER_EQUAL\u3001BIGGER\u90fd\u5f53\u6210\u4e86START\uff0c\u800c\u8fd9\u91cc\u7edf\u4e00\u8f6c\u6210BIGGER_EQUAL\uff0c\u5f53view\u8981\u8fc7\u6ee4\u8bb0\u5f55\u65f6\u518d\u6309\u5927\u4e8e\u8fc7\u6ee4\n+//                      //\u4f8b\u5982:sql = \"select * from my_view where f2 > 'b1'\";\n+//                      //\u5b9e\u9645\u662fSELECT ID, NAME FROM CreateViewTest WHERE NAME >= ?1\n+//                      //\u5728org.h2.index.IndexCondition.getMask(ArrayList<IndexCondition>)\u90a3\u91cc\u628a\n+//                      //BIGGER_EQUAL\u3001BIGGER\u90fd\u5f53\u6210\u4e86START\uff0c\u800c\u8fd9\u91cc\u7edf\u4e00\u8f6c\u6210BIGGER_EQUAL\uff0c\u5f53view\u8981\u8fc7\u6ee4\u8bb0\u5f55\u65f6\u518d\u6309\u5927\u4e8e\u8fc7\u6ee4\n //                        Parameter param = new Parameter(nextParamIndex);\n //                        q.addGlobalCondition(param, idx, Comparison.BIGGER_EQUAL);\n //                    }\n@@ -239,10 +241,9 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n //        costCache.put(masksArray, cachedCost);\n //        return cost;\n //=======\n+\n     @Override\n-    public double getCost(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            HashSet<Column> allColumnsSet) {\n+    public double getCost(Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder, HashSet<Column> allColumnsSet) {\n         return recursive ? 1000 : query.getCost();\n     }\n \n@@ -252,13 +253,11 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n     }\n \n     @Override\n-    public Cursor findByGeometry(TableFilter filter, SearchRow first,\n-            SearchRow last, SearchRow intersection) {\n+    public Cursor findByGeometry(TableFilter filter, SearchRow first, SearchRow last, SearchRow intersection) {\n         return find(filter.getSession(), first, last, intersection);\n     }\n \n-    private static Query prepareSubQuery(String sql, Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder) {\n+    private static Query prepareSubQuery(String sql, Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n         assert filters != null;\n         Prepared p;\n         session.pushSubQueryInfo(masks, filters, filter, sortOrder);\n@@ -288,12 +287,12 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         }\n         if (!query.isUnion()) {\n             throw DbException.get(ErrorCode.SYNTAX_ERROR_2,\n-                    \"recursive queries without UNION ALL\");\n+                \"recursive queries without UNION ALL\");\n         }\n         SelectUnion union = (SelectUnion) query;\n         if (union.getUnionType() != SelectUnion.UNION_ALL) {\n             throw DbException.get(ErrorCode.SYNTAX_ERROR_2,\n-                    \"recursive queries without UNION ALL\");\n+                \"recursive queries without UNION ALL\");\n         }\n         Query left = union.getLeft();\n         // to ensure the last result is not closed\n@@ -344,8 +343,11 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n      * @param last the upper bound\n      * @param intersection the intersection\n      */\n-    public void setupQueryParameters(Session session, SearchRow first, SearchRow last,\n-            SearchRow intersection) {\n+\n+\n+    public void setupQueryParameters(Session session,\n+           SearchRow first,\n+           SearchRow last, SearchRow intersection) {\n         ArrayList<Parameter> paramList = query.getParameters();\n         if (originalParameters != null) {\n             for (int i = 0, size = originalParameters.size(); i < size; i++) {\n@@ -361,10 +363,10 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         } else if (last != null) {\n             len = last.getColumnCount();\n         } else if (intersection != null) {\n-            len = intersection.getColumnCount();\n-        } else {\n-            len = 0;\n-        }\n+                   len = intersection.getColumnCount();\n+               } else {\n+                   len = 0;\n+               }\n         //view\u4e2d\u5df2\u7ed9select\u52a0\u4e86\u5916\u90e8\u6761\u4ef6\uff0c\u6240\u4ee5\u591a\u4e86Parameter\uff0c\u8fd9\u91cc\u5c31\u662f\u7ed9\u8fd9\u4e9bParameter\u8d4b\u503c\n         int idx = view.getParameterOffset(originalParameters);\n         for (int i = 0; i < len; i++) {\n@@ -384,8 +386,9 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         }\n     }\n \n-    private Cursor find(Session session, SearchRow first, SearchRow last,\n-            SearchRow intersection) {\n+    private Cursor find(Session session,\n+            SearchRow first,\n+            SearchRow last, SearchRow intersection) {\n         if (recursive) {\n             return findRecursive(first, last);\n         }\n@@ -394,8 +397,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         return new ViewCursor(this, result, first, last);\n     }\n \n-    private static void setParameter(ArrayList<Parameter> paramList, int x,\n-            Value v) {\n+    private static void setParameter(ArrayList<Parameter> paramList, int x, Value v) {\n         if (x >= paramList.size()) {\n             // the parameter may be optimized away as in\n             // select * from (select null as x) where x=1;\n@@ -405,14 +407,15 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         param.setValue(v);\n     }\n \n+\n     public Query getQuery() {\n         return query;\n     }\n \n     // \u76ee\u7684\u662f\u4e3a\u4e86\u5bf9indexColumns\u8d4b\u503c\uff0cindexColumns\u53e6\u6709\u5b83\u7528\n     // \u6bd4\u5982\u5728org.h2.command.dml.Select.prepare()\u4e2d\u5c31\u6709\u5e94\u7528(cost = preparePlan\u90a3\u884c\u4ee3\u7801\u4e4b\u540e)\n-    private Query getQuery(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder) {\n+\n+    private Query getQuery(Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder) {\n         Query q = prepareSubQuery(querySQL, session, masks, filters, filter, sortOrder);\n         if (masks == null) {\n             return q;\n@@ -517,7 +520,6 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n                 indexColumnId++;\n             }\n         }\n-\n         String sql = q.getPlanSQL();\n         q = prepareSubQuery(sql, session, masks, filters, filter, sortOrder);\n         return q;\n@@ -553,6 +555,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         throw DbException.getUnsupportedException(\"VIEW\");\n     }\n \n+\n     public void setRecursive(boolean value) {\n         this.recursive = value;\n     }\n@@ -572,7 +575,9 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n         return 0;\n     }\n \n+\n     public boolean isRecursive() {\n         return recursive;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "218",
                    "column": "23",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/49/ViewIndex.java\nindex 34548208fa..8b165a07c3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/49/ViewIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/49/ViewIndex.java\n@@ -215,8 +215,7 @@ public class ViewIndex extends BaseIndex implements SpatialIndex {\n //                    q.addGlobalCondition(param, idx, Comparison.SPATIAL_INTERSECTS);\n //                } else {\n //                    if ((mask & IndexCondition.START) != 0) {\n-//                    \t//\u4f8b\u5982:sql = \"select * from my_view where f2 > 'b1'\";\n-//                    \t//\u5b9e\u9645\u662fSELECT ID, NAME FROM CreateViewTest WHERE NAME >= ?1\n+//                    \t//\u4f8b\u5982:sql = \"select * from my_view where f2 > 'b1'\";//                    \t//\u5b9e\u9645\u662fSELECT ID, NAME FROM CreateViewTest WHERE NAME >= ?1\n //                    \t//\u5728org.h2.index.IndexCondition.getMask(ArrayList<IndexCondition>)\u90a3\u91cc\u628a\n //                    \t//BIGGER_EQUAL\u3001BIGGER\u90fd\u5f53\u6210\u4e86START\uff0c\u800c\u8fd9\u91cc\u7edf\u4e00\u8f6c\u6210BIGGER_EQUAL\uff0c\u5f53view\u8981\u8fc7\u6ee4\u8bb0\u5f55\u65f6\u518d\u6309\u5927\u4e8e\u8fc7\u6ee4\n //                        Parameter param = new Parameter(nextParamIndex);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "218",
                    "column": "23",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}