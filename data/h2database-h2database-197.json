{
    "error_id": "197",
    "information": {
        "errors": [
            {
                "line": "2019",
                "column": "70",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..5bfd79b6c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/197/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..72cbd53bef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/197/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -29,2736 +30,2790 @@ import org.h2.value.ValueVarchar;\n  * Represents the meta data for a database.\n  */\n public class JdbcDatabaseMetaData extends TraceObject implements\n-        DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n-\n-    private final JdbcConnection conn;\n-\n-    private final DatabaseMeta meta;\n-\n-    JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n-        setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n-        this.conn = conn;\n-        meta = conn.getSession().getDatabaseMeta();\n-    }\n-\n-    /**\n-     * Returns the major version of this driver.\n-     *\n-     * @return the major version number\n-     */\n-    @Override\n-    public int getDriverMajorVersion() {\n-        debugCodeCall(\"getDriverMajorVersion\");\n-        return Constants.VERSION_MAJOR;\n-    }\n-\n-    /**\n-     * Returns the minor version of this driver.\n-     *\n-     * @return the minor version number\n-     */\n-    @Override\n-    public int getDriverMinorVersion() {\n-        debugCodeCall(\"getDriverMinorVersion\");\n-        return Constants.VERSION_MINOR;\n-    }\n-\n-    /**\n-     * Gets the database product name.\n-     *\n-     * @return the product name (\"H2\")\n-     */\n-    @Override\n-    public String getDatabaseProductName() {\n-        debugCodeCall(\"getDatabaseProductName\");\n-        // This value must stay like that, see\n-        // https://hibernate.atlassian.net/browse/HHH-2682\n-        return \"H2\";\n-    }\n-\n-    /**\n-     * Gets the product version of the database.\n-     *\n-     * @return the product version\n-     */\n-    @Override\n-    public String getDatabaseProductVersion() throws SQLException {\n-        try {\n-            debugCodeCall(\"getDatabaseProductVersion\");\n-            return meta.getDatabaseProductVersion();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the name of the JDBC driver.\n-     *\n-     * @return the driver name (\"H2 JDBC Driver\")\n-     */\n-    @Override\n-    public String getDriverName() {\n-        debugCodeCall(\"getDriverName\");\n-        return \"H2 JDBC Driver\";\n-    }\n-\n-    /**\n-     * Gets the version number of the driver. The format is\n-     * [MajorVersion].[MinorVersion].\n-     *\n-     * @return the version number\n-     */\n-    @Override\n-    public String getDriverVersion() {\n-        debugCodeCall(\"getDriverVersion\");\n-        return Constants.FULL_VERSION;\n-    }\n-\n-    /**\n-     * Gets the list of tables in the database. The result set is sorted by\n-     * TABLE_TYPE, TABLE_SCHEM, and TABLE_NAME.\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>TABLE_TYPE (String) table type</li>\n-     * <li>REMARKS (String) comment</li>\n-     * <li>TYPE_CAT (String) always null</li>\n-     * <li>TYPE_SCHEM (String) always null</li>\n-     * <li>TYPE_NAME (String) always null</li>\n-     * <li>SELF_REFERENCING_COL_NAME (String) always null</li>\n-     * <li>REF_GENERATION (String) always null</li>\n-     * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n-     * @return the list of columns\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n-            }\n-            return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of columns. The result set is sorted by TABLE_SCHEM,\n-     * TABLE_NAME, and ORDINAL_POSITION.\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>DATA_TYPE (short) data type (see java.sql.Types)</li>\n-     * <li>TYPE_NAME (String) data type name (\"INTEGER\", \"VARCHAR\",...)</li>\n-     * <li>COLUMN_SIZE (int) precision\n-     *         (values larger than 2 GB are returned as 2 GB)</li>\n-     * <li>BUFFER_LENGTH (int) unused</li>\n-     * <li>DECIMAL_DIGITS (int) scale (0 for INTEGER and VARCHAR)</li>\n-     * <li>NUM_PREC_RADIX (int) radix (always 10)</li>\n-     * <li>NULLABLE (int) columnNoNulls or columnNullable</li>\n-     * <li>REMARKS (String) comment</li>\n-     * <li>COLUMN_DEF (String) default value</li>\n-     * <li>SQL_DATA_TYPE (int) unused</li>\n-     * <li>SQL_DATETIME_SUB (int) unused</li>\n-     * <li>CHAR_OCTET_LENGTH (int) unused</li>\n-     * <li>ORDINAL_POSITION (int) the column index (1,2,...)</li>\n-     * <li>IS_NULLABLE (String) \"NO\" or \"YES\"</li>\n-     * <li>SCOPE_CATALOG (String) always null</li>\n-     * <li>SCOPE_SCHEMA (String) always null</li>\n-     * <li>SCOPE_TABLE (String) always null</li>\n-     * <li>SOURCE_DATA_TYPE (short) null</li>\n-     * <li>IS_AUTOINCREMENT (String) \"NO\" or \"YES\"</li>\n-     * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n-     * @return the list of columns\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of indexes for this database. The primary key index (if\n-     * there is one) is also listed, with the name PRIMARY_KEY. The result set\n-     * is sorted by NON_UNIQUE ('false' first), TYPE, TABLE_SCHEM, INDEX_NAME,\n-     * and ORDINAL_POSITION.\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>NON_UNIQUE (boolean) 'true' if non-unique</li>\n-     * <li>INDEX_QUALIFIER (String) index catalog</li>\n-     * <li>INDEX_NAME (String) index name</li>\n-     * <li>TYPE (short) the index type (tableIndexOther or tableIndexHash for\n-     * unique indexes on non-nullable columns, tableIndexStatistics for other\n-     * indexes)</li>\n-     * <li>ORDINAL_POSITION (short) column index (1, 2, ...)</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>ASC_OR_DESC (String) ascending or descending (always 'A')</li>\n-     * <li>CARDINALITY (long) number of rows or numbers of unique values for\n-     * unique indexes on non-nullable columns</li>\n-     * <li>PAGES (long) number of pages use</li>\n-     * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n-     * </ol>\n-     *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param unique only unique indexes\n-     * @param approximate if true, return fast, but approximate CARDINALITY\n-     * @return the list of indexes and columns\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n-                        quote(schema) + \", \" + quote(table) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n-            }\n-            return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the primary key columns for a table. The result set is sorted by\n-     * TABLE_SCHEM, and COLUMN_NAME (and not by KEY_SEQ).\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>KEY_SEQ (short) the column index of this column (1,2,...)</li>\n-     * <li>PK_NAME (String) the name of the primary key index</li>\n-     * </ol>\n-     *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @return the list of primary key columns\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n-            }\n-            return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if all procedures callable.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean allProceduresAreCallable() {\n-        debugCodeCall(\"allProceduresAreCallable\");\n-        return true;\n-    }\n-\n-    /**\n-     * Checks if it possible to query all tables returned by getTables.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean allTablesAreSelectable() {\n-        debugCodeCall(\"allTablesAreSelectable\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns the database URL for this connection.\n-     *\n-     * @return the url\n-     */\n-    @Override\n-    public String getURL() throws SQLException {\n-        try {\n-            debugCodeCall(\"getURL\");\n-            return conn.getURL();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the user name as passed to DriverManager.getConnection(url, user,\n-     * password).\n-     *\n-     * @return the user name\n-     */\n-    @Override\n-    public String getUserName() throws SQLException {\n-        try {\n-            debugCodeCall(\"getUserName\");\n-            return conn.getUser();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the same as Connection.isReadOnly().\n-     *\n-     * @return if read only optimization is switched on\n-     */\n-    @Override\n-    public boolean isReadOnly() throws SQLException {\n-        try {\n-            debugCodeCall(\"isReadOnly\");\n-            return conn.isReadOnly();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if NULL is sorted high (bigger than anything that is not null).\n-     *\n-     * @return false by default; true if the system property h2.sortNullsHigh is\n-     *         set to true\n-     */\n-    @Override\n-    public boolean nullsAreSortedHigh() throws SQLException {\n-        try {\n-            debugCodeCall(\"nullsAreSortedHigh\");\n-            return meta.nullsAreSortedHigh();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if NULL is sorted low (smaller than anything that is not null).\n-     *\n-     * @return true by default; false if the system property h2.sortNullsHigh is\n-     *         set to true\n-     */\n-    @Override\n-    public boolean nullsAreSortedLow() throws SQLException {\n-        try {\n-            debugCodeCall(\"nullsAreSortedLow\");\n-            return !meta.nullsAreSortedHigh();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if NULL is sorted at the beginning (no matter if ASC or DESC is\n-     * used).\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean nullsAreSortedAtStart() {\n-        debugCodeCall(\"nullsAreSortedAtStart\");\n-        return false;\n-    }\n-\n-    /**\n-     * Checks if NULL is sorted at the end (no matter if ASC or DESC is used).\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean nullsAreSortedAtEnd() {\n-        debugCodeCall(\"nullsAreSortedAtEnd\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns the connection that created this object.\n-     *\n-     * @return the connection\n-     */\n-    @Override\n-    public Connection getConnection() {\n-        debugCodeCall(\"getConnection\");\n-        return conn;\n-    }\n-\n-    /**\n-     * Gets the list of procedures. The result set is sorted by PROCEDURE_SCHEM,\n-     * PROCEDURE_NAME, and NUM_INPUT_PARAMS. There are potentially multiple\n-     * procedures with the same name, each with a different number of input\n-     * parameters.\n-     *\n-     * <ol>\n-     * <li>PROCEDURE_CAT (String) catalog</li>\n-     * <li>PROCEDURE_SCHEM (String) schema</li>\n-     * <li>PROCEDURE_NAME (String) name</li>\n-     * <li>reserved</li>\n-     * <li>reserved</li>\n-     * <li>reserved</li>\n-     * <li>REMARKS (String) description</li>\n-     * <li>PROCEDURE_TYPE (short) if this procedure returns a result\n-     * (procedureNoResult or procedureReturnsResult)</li>\n-     * <li>SPECIFIC_NAME (String) non-ambiguous name to distinguish\n-     * overloads</li>\n-     * </ol>\n-     *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param procedureNamePattern the procedure name pattern\n-     * @return the procedures\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of procedure columns. The result set is sorted by\n-     * PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS, and POS.\n-     * There are potentially multiple procedures with the same name, each with a\n-     * different number of input parameters.\n-     *\n-     * <ol>\n-     * <li>PROCEDURE_CAT (String) catalog</li>\n-     * <li>PROCEDURE_SCHEM (String) schema</li>\n-     * <li>PROCEDURE_NAME (String) name</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>COLUMN_TYPE (short) column type\n-     * (always DatabaseMetaData.procedureColumnIn)</li>\n-     * <li>DATA_TYPE (short) sql type</li>\n-     * <li>TYPE_NAME (String) type name</li>\n-     * <li>PRECISION (int) precision</li>\n-     * <li>LENGTH (int) length</li>\n-     * <li>SCALE (short) scale</li>\n-     * <li>RADIX (int) always 10</li>\n-     * <li>NULLABLE (short) nullable\n-     * (DatabaseMetaData.columnNoNulls for primitive data types,\n-     * DatabaseMetaData.columnNullable otherwise)</li>\n-     * <li>REMARKS (String) description</li>\n-     * <li>COLUMN_DEF (String) always null</li>\n-     * <li>SQL_DATA_TYPE (int) for future use</li>\n-     * <li>SQL_DATETIME_SUB (int) for future use</li>\n-     * <li>CHAR_OCTET_LENGTH (int)</li>\n-     * <li>ORDINAL_POSITION (int) the parameter index\n-     * starting from 1 (0 is the return value)</li>\n-     * <li>IS_NULLABLE (String) always \"YES\"</li>\n-     * <li>SPECIFIC_NAME (String) non-ambiguous procedure name to distinguish\n-     * overloads</li>\n-     * </ol>\n-     *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n-     * @return the procedure columns\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n-            }\n-            checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of schemas.\n-     * The result set is sorted by TABLE_SCHEM.\n-     *\n-     * <ol>\n-     * <li>TABLE_SCHEM (String) schema name</li>\n-     * <li>TABLE_CATALOG (String) catalog name</li>\n-     * </ol>\n-     *\n-     * @return the schema list\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getSchemas() throws SQLException {\n-        try {\n-            debugCodeCall(\"getSchemas\");\n-            return getResultSet(meta.getSchemas());\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of catalogs.\n-     * The result set is sorted by TABLE_CAT.\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) catalog name</li>\n-     * </ol>\n-     *\n-     * @return the catalog list\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getCatalogs() throws SQLException {\n-        try {\n-            debugCodeCall(\"getCatalogs\");\n-            return getResultSet(meta.getCatalogs());\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of table types. This call returns a result set with five\n-     * records: \"SYSTEM TABLE\", \"TABLE\", \"VIEW\", \"TABLE LINK\" and \"EXTERNAL\".\n-     * <ol>\n-     * <li>TABLE_TYPE (String) table type</li>\n-     * </ol>\n-     *\n-     * @return the table types\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getTableTypes() throws SQLException {\n-        try {\n-            debugCodeCall(\"getTableTypes\");\n-            return getResultSet(meta.getTableTypes());\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of column privileges. The result set is sorted by\n-     * COLUMN_NAME and PRIVILEGE\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>GRANTOR (String) grantor of access</li>\n-     * <li>GRANTEE (String) grantee of access</li>\n-     * <li>PRIVILEGE (String) SELECT, INSERT, UPDATE, DELETE or REFERENCES\n-     * (only one per row)</li>\n-     * <li>IS_GRANTABLE (String) YES means the grantee can grant access to\n-     * others</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n-     * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n-     * @return the list of privileges\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of table privileges. The result set is sorted by\n-     * TABLE_SCHEM, TABLE_NAME, and PRIVILEGE.\n-     *\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>GRANTOR (String) grantor of access</li>\n-     * <li>GRANTEE (String) grantee of access</li>\n-     * <li>PRIVILEGE (String) SELECT, INSERT, UPDATE, DELETE or REFERENCES\n-     * (only one per row)</li>\n-     * <li>IS_GRANTABLE (String) YES means the grantee can grant access to\n-     * others</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @return the list of privileges\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n-            }\n-            checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of columns that best identifier a row in a table.\n-     * The list is ordered by SCOPE.\n-     *\n-     * <ol>\n-     * <li>SCOPE (short) scope of result (always bestRowSession)</li>\n-     * <li>COLUMN_NAME (String) column name</li>\n-     * <li>DATA_TYPE (short) SQL data type, see also java.sql.Types</li>\n-     * <li>TYPE_NAME (String) type name</li>\n-     * <li>COLUMN_SIZE (int) precision\n-     *         (values larger than 2 GB are returned as 2 GB)</li>\n-     * <li>BUFFER_LENGTH (int) unused</li>\n-     * <li>DECIMAL_DIGITS (short) scale</li>\n-     * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param scope ignored\n-     * @param nullable ignored\n-     * @return the primary key index\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n-            }\n-            return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Get the list of columns that are update when any value is updated.\n-     * The result set is always empty.\n-     *\n-     * <ol>\n-     * <li>1 SCOPE (int) not used</li>\n-     * <li>2 COLUMN_NAME (String) column name</li>\n-     * <li>3 DATA_TYPE (int) SQL data type - see also java.sql.Types</li>\n-     * <li>4 TYPE_NAME (String) data type name</li>\n-     * <li>5 COLUMN_SIZE (int) precision\n-     *         (values larger than 2 GB are returned as 2 GB)</li>\n-     * <li>6 BUFFER_LENGTH (int) length (bytes)</li>\n-     * <li>7 DECIMAL_DIGITS (int) scale</li>\n-     * <li>8 PSEUDO_COLUMN (int) is this column a pseudo column</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     * @param table table name (must be specified)\n-     * @return an empty result set\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n-            }\n-            return getResultSet(meta.getVersionColumns(catalog, schema, table));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of primary key columns that are referenced by a table. The\n-     * result set is sorted by PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME,\n-     * FK_NAME, KEY_SEQ.\n-     *\n-     * <ol>\n-     * <li>PKTABLE_CAT (String) primary catalog</li>\n-     * <li>PKTABLE_SCHEM (String) primary schema</li>\n-     * <li>PKTABLE_NAME (String) primary table</li>\n-     * <li>PKCOLUMN_NAME (String) primary column</li>\n-     * <li>FKTABLE_CAT (String) foreign catalog</li>\n-     * <li>FKTABLE_SCHEM (String) foreign schema</li>\n-     * <li>FKTABLE_NAME (String) foreign table</li>\n-     * <li>FKCOLUMN_NAME (String) foreign column</li>\n-     * <li>KEY_SEQ (short) sequence number (1, 2, ...)</li>\n-     * <li>UPDATE_RULE (short) action on update (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>DELETE_RULE (short) action on delete (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>FK_NAME (String) foreign key name</li>\n-     * <li>PK_NAME (String) primary key name</li>\n-     * <li>DEFERRABILITY (short) deferrable or not (always\n-     * importedKeyNotDeferrable)</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema the schema name of the foreign table\n-     * @param table the name of the foreign table\n-     * @return the result set\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n-            }\n-            return getResultSet(meta.getImportedKeys(catalog, schema, table));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of foreign key columns that reference a table. The result\n-     * set is sorted by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, FK_NAME,\n-     * KEY_SEQ.\n-     *\n-     * <ol>\n-     * <li>PKTABLE_CAT (String) primary catalog</li>\n-     * <li>PKTABLE_SCHEM (String) primary schema</li>\n-     * <li>PKTABLE_NAME (String) primary table</li>\n-     * <li>PKCOLUMN_NAME (String) primary column</li>\n-     * <li>FKTABLE_CAT (String) foreign catalog</li>\n-     * <li>FKTABLE_SCHEM (String) foreign schema</li>\n-     * <li>FKTABLE_NAME (String) foreign table</li>\n-     * <li>FKCOLUMN_NAME (String) foreign column</li>\n-     * <li>KEY_SEQ (short) sequence number (1,2,...)</li>\n-     * <li>UPDATE_RULE (short) action on update (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>DELETE_RULE (short) action on delete (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>FK_NAME (String) foreign key name</li>\n-     * <li>PK_NAME (String) primary key name</li>\n-     * <li>DEFERRABILITY (short) deferrable or not (always\n-     * importedKeyNotDeferrable)</li>\n-     * </ol>\n-     *\n-     * @param catalog null or the catalog name\n-     * @param schema the schema name of the primary table\n-     * @param table the name of the primary table\n-     * @return the result set\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n-            }\n-            return getResultSet(meta.getExportedKeys(catalog, schema, table));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of foreign key columns that references a table, as well as\n-     * the list of primary key columns that are references by a table. The\n-     * result set is sorted by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME,\n-     * FK_NAME, KEY_SEQ.\n-     *\n-     * <ol>\n-     * <li>PKTABLE_CAT (String) primary catalog</li>\n-     * <li>PKTABLE_SCHEM (String) primary schema</li>\n-     * <li>PKTABLE_NAME (String) primary table</li>\n-     * <li>PKCOLUMN_NAME (String) primary column</li>\n-     * <li>FKTABLE_CAT (String) foreign catalog</li>\n-     * <li>FKTABLE_SCHEM (String) foreign schema</li>\n-     * <li>FKTABLE_NAME (String) foreign table</li>\n-     * <li>FKCOLUMN_NAME (String) foreign column</li>\n-     * <li>KEY_SEQ (short) sequence number (1,2,...)</li>\n-     * <li>UPDATE_RULE (short) action on update (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>DELETE_RULE (short) action on delete (see\n-     * DatabaseMetaData.importedKey...)</li>\n-     * <li>FK_NAME (String) foreign key name</li>\n-     * <li>PK_NAME (String) primary key name</li>\n-     * <li>DEFERRABILITY (short) deferrable or not (always\n-     * importedKeyNotDeferrable)</li>\n-     * </ol>\n-     *\n-     * @param primaryCatalog null or the catalog name\n-     * @param primarySchema the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n-     * @param foreignCatalog null or the catalog name\n-     * @param foreignSchema the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n-     * @return the result set\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n-            }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of user-defined data types.\n-     * This call returns an empty result set.\n-     *\n-     * <ol>\n-     * <li>TYPE_CAT (String) catalog</li>\n-     * <li>TYPE_SCHEM (String) schema</li>\n-     * <li>TYPE_NAME (String) type name</li>\n-     * <li>CLASS_NAME (String) Java class</li>\n-     * <li>DATA_TYPE (short) SQL Type - see also java.sql.Types</li>\n-     * <li>REMARKS (String) description</li>\n-     * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n-     * </ol>\n-     *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n-     * @param typeNamePattern ignored\n-     * @param types ignored\n-     * @return an empty result set\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n-            }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the list of data types. The result set is sorted by DATA_TYPE and\n-     * afterwards by how closely the data type maps to the corresponding JDBC\n-     * SQL type (best match first).\n-     *\n-     * <ol>\n-     * <li>TYPE_NAME (String) type name</li>\n-     * <li>DATA_TYPE (short) SQL data type - see also java.sql.Types</li>\n-     * <li>PRECISION (int) maximum precision</li>\n-     * <li>LITERAL_PREFIX (String) prefix used to quote a literal</li>\n-     * <li>LITERAL_SUFFIX (String) suffix used to quote a literal</li>\n-     * <li>CREATE_PARAMS (String) parameters used (may be null)</li>\n-     * <li>NULLABLE (short) typeNoNulls (NULL not allowed) or typeNullable</li>\n-     * <li>CASE_SENSITIVE (boolean) case sensitive</li>\n-     * <li>SEARCHABLE (short) typeSearchable</li>\n-     * <li>UNSIGNED_ATTRIBUTE (boolean) unsigned</li>\n-     * <li>FIXED_PREC_SCALE (boolean) fixed precision</li>\n-     * <li>AUTO_INCREMENT (boolean) auto increment</li>\n-     * <li>LOCAL_TYPE_NAME (String) localized version of the data type</li>\n-     * <li>MINIMUM_SCALE (short) minimum scale</li>\n-     * <li>MAXIMUM_SCALE (short) maximum scale</li>\n-     * <li>SQL_DATA_TYPE (int) unused</li>\n-     * <li>SQL_DATETIME_SUB (int) unused</li>\n-     * <li>NUM_PREC_RADIX (int) 2 for binary, 10 for decimal</li>\n-     * </ol>\n-     *\n-     * @return the list of data types\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getTypeInfo() throws SQLException {\n-        try {\n-            debugCodeCall(\"getTypeInfo\");\n-            return getResultSet(meta.getTypeInfo());\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if this database store data in local files.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean usesLocalFiles() {\n-        debugCodeCall(\"usesLocalFiles\");\n-        return true;\n-    }\n-\n-    /**\n-     * Checks if this database use one file per table.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean usesLocalFilePerTable() {\n-        debugCodeCall(\"usesLocalFilePerTable\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns the string used to quote identifiers.\n-     *\n-     * @return a double quote\n-     */\n-    @Override\n-    public String getIdentifierQuoteString() {\n-        debugCodeCall(\"getIdentifierQuoteString\");\n-        return \"\\\"\";\n-    }\n-\n-    /**\n-     * Gets the comma-separated list of all SQL keywords that are not supported\n-     * as unquoted table/column/index name, in addition to the SQL:2003 keywords.\n-     *\n-     * @return a list of additional the keywords\n-     */\n-    @Override\n-    public String getSQLKeywords() throws SQLException {\n-        try {\n-            debugCodeCall(\"getSQLKeywords\");\n-            return meta.getSQLKeywords();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the list of numeric functions supported by this database.\n-     *\n-     * @return the list\n-     */\n-    @Override\n-    public String getNumericFunctions() throws SQLException {\n-        try {\n-            debugCodeCall(\"getNumericFunctions\");\n-            return meta.getNumericFunctions();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the list of string functions supported by this database.\n-     *\n-     * @return the list\n-     */\n-    @Override\n-    public String getStringFunctions() throws SQLException {\n-        try {\n-            debugCodeCall(\"getStringFunctions\");\n-            return meta.getStringFunctions();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the list of system functions supported by this database.\n-     *\n-     * @return the list\n-     */\n-    @Override\n-    public String getSystemFunctions() throws SQLException {\n-        try {\n-            debugCodeCall(\"getSystemFunctions\");\n-            return meta.getSystemFunctions();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the list of date and time functions supported by this database.\n-     *\n-     * @return the list\n-     */\n-    @Override\n-    public String getTimeDateFunctions() throws SQLException {\n-        try {\n-            debugCodeCall(\"getTimeDateFunctions\");\n-            return meta.getTimeDateFunctions();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the default escape character for DatabaseMetaData search\n-     * patterns.\n-     *\n-     * @return the default escape character (always '\\', independent on the\n-     *         mode)\n-     */\n-    @Override\n-    public String getSearchStringEscape() throws SQLException {\n-        try {\n-            debugCodeCall(\"getSearchStringEscape\");\n-            return meta.getSearchStringEscape();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns the characters that are allowed for identifiers in addiction to\n-     * A-Z, a-z, 0-9 and '_'.\n-     *\n-     * @return an empty String (\"\")\n-     */\n-    @Override\n-    public String getExtraNameCharacters() {\n-        debugCodeCall(\"getExtraNameCharacters\");\n-        return \"\";\n-    }\n-\n-    /**\n-     * Returns whether alter table with add column is supported.\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsAlterTableWithAddColumn() {\n-        debugCodeCall(\"supportsAlterTableWithAddColumn\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether alter table with drop column is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsAlterTableWithDropColumn() {\n-        debugCodeCall(\"supportsAlterTableWithDropColumn\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether column aliasing is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsColumnAliasing() {\n-        debugCodeCall(\"supportsColumnAliasing\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether NULL+1 is NULL or not.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean nullPlusNonNullIsNull() {\n-        debugCodeCall(\"nullPlusNonNullIsNull\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether CONVERT is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsConvert() {\n-        debugCodeCall(\"supportsConvert\");\n+    DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+  private final JdbcConnection conn;\n+\n+  private final DatabaseMeta meta;\n+\n+  JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n+    setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n+    this.conn = conn;\n+    meta = conn.getSession().getDatabaseMeta();\n+  }\n+\n+  /**\n+   * Returns the major version of this driver.\n+   *\n+   * @return the major version number\n+   */\n+  @Override\n+  public int getDriverMajorVersion() {\n+    debugCodeCall(\"getDriverMajorVersion\");\n+    return Constants.VERSION_MAJOR;\n+  }\n+\n+  /**\n+   * Returns the minor version of this driver.\n+   *\n+   * @return the minor version number\n+   */\n+  @Override\n+  public int getDriverMinorVersion() {\n+    debugCodeCall(\"getDriverMinorVersion\");\n+    return Constants.VERSION_MINOR;\n+  }\n+\n+  /**\n+   * Gets the database product name.\n+   *\n+   * @return the product name (\"H2\")\n+   */\n+  @Override\n+  public String getDatabaseProductName() {\n+    debugCodeCall(\"getDatabaseProductName\");\n+    // This value must stay like that, see\n+    // https://hibernate.atlassian.net/browse/HHH-2682\n+    return \"H2\";\n+  }\n+\n+  /**\n+   * Gets the product version of the database.\n+   *\n+   * @return the product version\n+   */\n+  @Override\n+  public String getDatabaseProductVersion() throws SQLException {\n+    try {\n+      debugCodeCall(\"getDatabaseProductVersion\");\n+      return meta.getDatabaseProductVersion();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the name of the JDBC driver.\n+   *\n+   * @return the driver name (\"H2 JDBC Driver\")\n+   */\n+  @Override\n+  public String getDriverName() {\n+    debugCodeCall(\"getDriverName\");\n+    return \"H2 JDBC Driver\";\n+  }\n+\n+  /**\n+   * Gets the version number of the driver. The format is\n+   * [MajorVersion].[MinorVersion].\n+   *\n+   * @return the version number\n+   */\n+  @Override\n+  public String getDriverVersion() {\n+    debugCodeCall(\"getDriverVersion\");\n+    return Constants.FULL_VERSION;\n+  }\n+\n+  /**\n+   * Gets the list of tables in the database. The result set is sorted by\n+   * TABLE_TYPE, TABLE_SCHEM, and TABLE_NAME.\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>TABLE_TYPE (String) table type</li>\n+   * <li>REMARKS (String) comment</li>\n+   * <li>TYPE_CAT (String) always null</li>\n+   * <li>TYPE_SCHEM (String) always null</li>\n+   * <li>TYPE_NAME (String) always null</li>\n+   * <li>SELF_REFERENCING_COL_NAME (String) always null</li>\n+   * <li>REF_GENERATION (String) always null</li>\n+   * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n+   * </ol>\n+   *\n+   * @param catalog          null (to get all objects) or the catalog name\n+   * @param schemaPattern    null (to get all objects) or a schema name\n+   *                         (uppercase for unquoted names)\n+   * @param tableNamePattern null (to get all objects) or a table name\n+   *                         (uppercase for unquoted names)\n+   * @param types            null or a list of table types\n+   * @return the list of columns\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getTables(String catalog, String schemaPattern,\n+                             String tableNamePattern, String[] types)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getTables(\" + quote(catalog) + \", \" +\n+            quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n+            \", \" + quoteArray(types) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of columns. The result set is sorted by TABLE_SCHEM,\n+   * TABLE_NAME, and ORDINAL_POSITION.\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>DATA_TYPE (short) data type (see java.sql.Types)</li>\n+   * <li>TYPE_NAME (String) data type name (\"INTEGER\", \"VARCHAR\",...)</li>\n+   * <li>COLUMN_SIZE (int) precision\n+   *         (values larger than 2 GB are returned as 2 GB)</li>\n+   * <li>BUFFER_LENGTH (int) unused</li>\n+   * <li>DECIMAL_DIGITS (int) scale (0 for INTEGER and VARCHAR)</li>\n+   * <li>NUM_PREC_RADIX (int) radix (always 10)</li>\n+   * <li>NULLABLE (int) columnNoNulls or columnNullable</li>\n+   * <li>REMARKS (String) comment</li>\n+   * <li>COLUMN_DEF (String) default value</li>\n+   * <li>SQL_DATA_TYPE (int) unused</li>\n+   * <li>SQL_DATETIME_SUB (int) unused</li>\n+   * <li>CHAR_OCTET_LENGTH (int) unused</li>\n+   * <li>ORDINAL_POSITION (int) the column index (1,2,...)</li>\n+   * <li>IS_NULLABLE (String) \"NO\" or \"YES\"</li>\n+   * <li>SCOPE_CATALOG (String) always null</li>\n+   * <li>SCOPE_SCHEMA (String) always null</li>\n+   * <li>SCOPE_TABLE (String) always null</li>\n+   * <li>SOURCE_DATA_TYPE (short) null</li>\n+   * <li>IS_AUTOINCREMENT (String) \"NO\" or \"YES\"</li>\n+   * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n+   * </ol>\n+   *\n+   * @param catalog           null (to get all objects) or the catalog name\n+   * @param schemaPattern     null (to get all objects) or a schema name\n+   *                          (uppercase for unquoted names)\n+   * @param tableNamePattern  null (to get all objects) or a table name\n+   *                          (uppercase for unquoted names)\n+   * @param columnNamePattern null (to get all objects) or a column name\n+   *                          (uppercase for unquoted names)\n+   * @return the list of columns\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getColumns(String catalog, String schemaPattern,\n+                              String tableNamePattern,\n+                              String columnNamePattern) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(tableNamePattern) + \", \"\n+            + quote(columnNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getColumns(catalog, schemaPattern, tableNamePattern,\n+              columnNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of indexes for this database. The primary key index (if\n+   * there is one) is also listed, with the name PRIMARY_KEY. The result set\n+   * is sorted by NON_UNIQUE ('false' first), TYPE, TABLE_SCHEM, INDEX_NAME,\n+   * and ORDINAL_POSITION.\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>NON_UNIQUE (boolean) 'true' if non-unique</li>\n+   * <li>INDEX_QUALIFIER (String) index catalog</li>\n+   * <li>INDEX_NAME (String) index name</li>\n+   * <li>TYPE (short) the index type (tableIndexOther or tableIndexHash for\n+   * unique indexes on non-nullable columns, tableIndexStatistics for other\n+   * indexes)</li>\n+   * <li>ORDINAL_POSITION (short) column index (1, 2, ...)</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>ASC_OR_DESC (String) ascending or descending (always 'A')</li>\n+   * <li>CARDINALITY (long) number of rows or numbers of unique values for\n+   * unique indexes on non-nullable columns</li>\n+   * <li>PAGES (long) number of pages use</li>\n+   * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n+   * </ol>\n+   *\n+   * @param catalog     null or the catalog name\n+   * @param schema      null (to get all objects) or a schema name\n+   *                    (uppercase for unquoted names)\n+   * @param table       table name (must be specified)\n+   * @param unique      only unique indexes\n+   * @param approximate if true, return fast, but approximate CARDINALITY\n+   * @return the list of indexes and columns\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getIndexInfo(String catalog, String schema, String table,\n+                                boolean unique, boolean approximate)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n+            quote(schema) + \", \" + quote(table) + \", \" +\n+            unique + \", \" + approximate + \");\");\n+      }\n+      return getResultSet(\n+          meta.getIndexInfo(catalog, schema, table, unique, approximate));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the primary key columns for a table. The result set is sorted by\n+   * TABLE_SCHEM, and COLUMN_NAME (and not by KEY_SEQ).\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>KEY_SEQ (short) the column index of this column (1,2,...)</li>\n+   * <li>PK_NAME (String) the name of the primary key index</li>\n+   * </ol>\n+   *\n+   * @param catalog null or the catalog name\n+   * @param schema  null (to get all objects) or a schema name\n+   *                (uppercase for unquoted names)\n+   * @param table   table name (must be specified)\n+   * @return the list of primary key columns\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getPrimaryKeys(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \");\");\n+      }\n+      return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if all procedures callable.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean allProceduresAreCallable() {\n+    debugCodeCall(\"allProceduresAreCallable\");\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if it possible to query all tables returned by getTables.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean allTablesAreSelectable() {\n+    debugCodeCall(\"allTablesAreSelectable\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the database URL for this connection.\n+   *\n+   * @return the url\n+   */\n+  @Override\n+  public String getURL() throws SQLException {\n+    try {\n+      debugCodeCall(\"getURL\");\n+      return conn.getURL();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the user name as passed to DriverManager.getConnection(url, user,\n+   * password).\n+   *\n+   * @return the user name\n+   */\n+  @Override\n+  public String getUserName() throws SQLException {\n+    try {\n+      debugCodeCall(\"getUserName\");\n+      return conn.getUser();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the same as Connection.isReadOnly().\n+   *\n+   * @return if read only optimization is switched on\n+   */\n+  @Override\n+  public boolean isReadOnly() throws SQLException {\n+    try {\n+      debugCodeCall(\"isReadOnly\");\n+      return conn.isReadOnly();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if NULL is sorted high (bigger than anything that is not null).\n+   *\n+   * @return false by default; true if the system property h2.sortNullsHigh is\n+   * set to true\n+   */\n+  @Override\n+  public boolean nullsAreSortedHigh() throws SQLException {\n+    try {\n+      debugCodeCall(\"nullsAreSortedHigh\");\n+      return meta.nullsAreSortedHigh();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if NULL is sorted low (smaller than anything that is not null).\n+   *\n+   * @return true by default; false if the system property h2.sortNullsHigh is\n+   * set to true\n+   */\n+  @Override\n+  public boolean nullsAreSortedLow() throws SQLException {\n+    try {\n+      debugCodeCall(\"nullsAreSortedLow\");\n+      return !meta.nullsAreSortedHigh();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if NULL is sorted at the beginning (no matter if ASC or DESC is\n+   * used).\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean nullsAreSortedAtStart() {\n+    debugCodeCall(\"nullsAreSortedAtStart\");\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if NULL is sorted at the end (no matter if ASC or DESC is used).\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean nullsAreSortedAtEnd() {\n+    debugCodeCall(\"nullsAreSortedAtEnd\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the connection that created this object.\n+   *\n+   * @return the connection\n+   */\n+  @Override\n+  public Connection getConnection() {\n+    debugCodeCall(\"getConnection\");\n+    return conn;\n+  }\n+\n+  /**\n+   * Gets the list of procedures. The result set is sorted by PROCEDURE_SCHEM,\n+   * PROCEDURE_NAME, and NUM_INPUT_PARAMS. There are potentially multiple\n+   * procedures with the same name, each with a different number of input\n+   * parameters.\n+   *\n+   * <ol>\n+   * <li>PROCEDURE_CAT (String) catalog</li>\n+   * <li>PROCEDURE_SCHEM (String) schema</li>\n+   * <li>PROCEDURE_NAME (String) name</li>\n+   * <li>reserved</li>\n+   * <li>reserved</li>\n+   * <li>reserved</li>\n+   * <li>REMARKS (String) description</li>\n+   * <li>PROCEDURE_TYPE (short) if this procedure returns a result\n+   * (procedureNoResult or procedureReturnsResult)</li>\n+   * <li>SPECIFIC_NAME (String) non-ambiguous name to distinguish\n+   * overloads</li>\n+   * </ol>\n+   *\n+   * @param catalog              null or the catalog name\n+   * @param schemaPattern        null (to get all objects) or a schema name\n+   *                             (uppercase for unquoted names)\n+   * @param procedureNamePattern the procedure name pattern\n+   * @return the procedures\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getProcedures(String catalog, String schemaPattern,\n+                                 String procedureNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getProcedures(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(procedureNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of procedure columns. The result set is sorted by\n+   * PROCEDURE_SCHEM, PROCEDURE_NAME, NUM_INPUT_PARAMS, and POS.\n+   * There are potentially multiple procedures with the same name, each with a\n+   * different number of input parameters.\n+   *\n+   * <ol>\n+   * <li>PROCEDURE_CAT (String) catalog</li>\n+   * <li>PROCEDURE_SCHEM (String) schema</li>\n+   * <li>PROCEDURE_NAME (String) name</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>COLUMN_TYPE (short) column type\n+   * (always DatabaseMetaData.procedureColumnIn)</li>\n+   * <li>DATA_TYPE (short) sql type</li>\n+   * <li>TYPE_NAME (String) type name</li>\n+   * <li>PRECISION (int) precision</li>\n+   * <li>LENGTH (int) length</li>\n+   * <li>SCALE (short) scale</li>\n+   * <li>RADIX (int) always 10</li>\n+   * <li>NULLABLE (short) nullable\n+   * (DatabaseMetaData.columnNoNulls for primitive data types,\n+   * DatabaseMetaData.columnNullable otherwise)</li>\n+   * <li>REMARKS (String) description</li>\n+   * <li>COLUMN_DEF (String) always null</li>\n+   * <li>SQL_DATA_TYPE (int) for future use</li>\n+   * <li>SQL_DATETIME_SUB (int) for future use</li>\n+   * <li>CHAR_OCTET_LENGTH (int)</li>\n+   * <li>ORDINAL_POSITION (int) the parameter index\n+   * starting from 1 (0 is the return value)</li>\n+   * <li>IS_NULLABLE (String) always \"YES\"</li>\n+   * <li>SPECIFIC_NAME (String) non-ambiguous procedure name to distinguish\n+   * overloads</li>\n+   * </ol>\n+   *\n+   * @param catalog              null or the catalog name\n+   * @param schemaPattern        null (to get all objects) or a schema name\n+   *                             (uppercase for unquoted names)\n+   * @param procedureNamePattern the procedure name pattern\n+   * @param columnNamePattern    the procedure name pattern\n+   * @return the procedure columns\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+                                       String procedureNamePattern,\n+                                       String columnNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getProcedureColumns(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(procedureNamePattern) + \", \"\n+            + quote(columnNamePattern) + \");\");\n+      }\n+      checkClosed();\n+      return getResultSet(\n+          meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern,\n+              columnNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of schemas.\n+   * The result set is sorted by TABLE_SCHEM.\n+   *\n+   * <ol>\n+   * <li>TABLE_SCHEM (String) schema name</li>\n+   * <li>TABLE_CATALOG (String) catalog name</li>\n+   * </ol>\n+   *\n+   * @return the schema list\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getSchemas() throws SQLException {\n+    try {\n+      debugCodeCall(\"getSchemas\");\n+      return getResultSet(meta.getSchemas());\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of catalogs.\n+   * The result set is sorted by TABLE_CAT.\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) catalog name</li>\n+   * </ol>\n+   *\n+   * @return the catalog list\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getCatalogs() throws SQLException {\n+    try {\n+      debugCodeCall(\"getCatalogs\");\n+      return getResultSet(meta.getCatalogs());\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of table types. This call returns a result set with five\n+   * records: \"SYSTEM TABLE\", \"TABLE\", \"VIEW\", \"TABLE LINK\" and \"EXTERNAL\".\n+   * <ol>\n+   * <li>TABLE_TYPE (String) table type</li>\n+   * </ol>\n+   *\n+   * @return the table types\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getTableTypes() throws SQLException {\n+    try {\n+      debugCodeCall(\"getTableTypes\");\n+      return getResultSet(meta.getTableTypes());\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of column privileges. The result set is sorted by\n+   * COLUMN_NAME and PRIVILEGE\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>GRANTOR (String) grantor of access</li>\n+   * <li>GRANTEE (String) grantee of access</li>\n+   * <li>PRIVILEGE (String) SELECT, INSERT, UPDATE, DELETE or REFERENCES\n+   * (only one per row)</li>\n+   * <li>IS_GRANTABLE (String) YES means the grantee can grant access to\n+   * others</li>\n+   * </ol>\n+   *\n+   * @param catalog           null (to get all objects) or the catalog name\n+   * @param schema            null (to get all objects) or a schema name\n+   *                          (uppercase for unquoted names)\n+   * @param table             a table name (uppercase for unquoted names)\n+   * @param columnNamePattern null (to get all objects) or a column name\n+   *                          (uppercase for unquoted names)\n+   * @return the list of privileges\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getColumnPrivileges(String catalog, String schema,\n+                                       String table, String columnNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getColumnPrivileges(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \", \"\n+            + quote(columnNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of table privileges. The result set is sorted by\n+   * TABLE_SCHEM, TABLE_NAME, and PRIVILEGE.\n+   *\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>GRANTOR (String) grantor of access</li>\n+   * <li>GRANTEE (String) grantee of access</li>\n+   * <li>PRIVILEGE (String) SELECT, INSERT, UPDATE, DELETE or REFERENCES\n+   * (only one per row)</li>\n+   * <li>IS_GRANTABLE (String) YES means the grantee can grant access to\n+   * others</li>\n+   * </ol>\n+   *\n+   * @param catalog          null (to get all objects) or the catalog name\n+   * @param schemaPattern    null (to get all objects) or a schema name\n+   *                         (uppercase for unquoted names)\n+   * @param tableNamePattern null (to get all objects) or a table name\n+   *                         (uppercase for unquoted names)\n+   * @return the list of privileges\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+                                      String tableNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getTablePrivileges(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(tableNamePattern) + \");\");\n+      }\n+      checkClosed();\n+      return getResultSet(\n+          meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of columns that best identifier a row in a table.\n+   * The list is ordered by SCOPE.\n+   *\n+   * <ol>\n+   * <li>SCOPE (short) scope of result (always bestRowSession)</li>\n+   * <li>COLUMN_NAME (String) column name</li>\n+   * <li>DATA_TYPE (short) SQL data type, see also java.sql.Types</li>\n+   * <li>TYPE_NAME (String) type name</li>\n+   * <li>COLUMN_SIZE (int) precision\n+   *         (values larger than 2 GB are returned as 2 GB)</li>\n+   * <li>BUFFER_LENGTH (int) unused</li>\n+   * <li>DECIMAL_DIGITS (short) scale</li>\n+   * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n+   * </ol>\n+   *\n+   * @param catalog  null (to get all objects) or the catalog name\n+   * @param schema   null (to get all objects) or a schema name\n+   *                 (uppercase for unquoted names)\n+   * @param table    table name (must be specified)\n+   * @param scope    ignored\n+   * @param nullable ignored\n+   * @return the primary key index\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getBestRowIdentifier(String catalog, String schema,\n+                                        String table, int scope,\n+                                        boolean nullable)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getBestRowIdentifier(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \", \"\n+            + scope + \", \" + nullable + \");\");\n+      }\n+      return getResultSet(\n+          meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Get the list of columns that are update when any value is updated.\n+   * The result set is always empty.\n+   *\n+   * <ol>\n+   * <li>1 SCOPE (int) not used</li>\n+   * <li>2 COLUMN_NAME (String) column name</li>\n+   * <li>3 DATA_TYPE (int) SQL data type - see also java.sql.Types</li>\n+   * <li>4 TYPE_NAME (String) data type name</li>\n+   * <li>5 COLUMN_SIZE (int) precision\n+   *         (values larger than 2 GB are returned as 2 GB)</li>\n+   * <li>6 BUFFER_LENGTH (int) length (bytes)</li>\n+   * <li>7 DECIMAL_DIGITS (int) scale</li>\n+   * <li>8 PSEUDO_COLUMN (int) is this column a pseudo column</li>\n+   * </ol>\n+   *\n+   * @param catalog null (to get all objects) or the catalog name\n+   * @param schema  null (to get all objects) or a schema name\n+   * @param table   table name (must be specified)\n+   * @return an empty result set\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getVersionColumns(String catalog, String schema,\n+                                     String table) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getVersionColumns(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \");\");\n+      }\n+      return getResultSet(meta.getVersionColumns(catalog, schema, table));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of primary key columns that are referenced by a table. The\n+   * result set is sorted by PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME,\n+   * FK_NAME, KEY_SEQ.\n+   *\n+   * <ol>\n+   * <li>PKTABLE_CAT (String) primary catalog</li>\n+   * <li>PKTABLE_SCHEM (String) primary schema</li>\n+   * <li>PKTABLE_NAME (String) primary table</li>\n+   * <li>PKCOLUMN_NAME (String) primary column</li>\n+   * <li>FKTABLE_CAT (String) foreign catalog</li>\n+   * <li>FKTABLE_SCHEM (String) foreign schema</li>\n+   * <li>FKTABLE_NAME (String) foreign table</li>\n+   * <li>FKCOLUMN_NAME (String) foreign column</li>\n+   * <li>KEY_SEQ (short) sequence number (1, 2, ...)</li>\n+   * <li>UPDATE_RULE (short) action on update (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>DELETE_RULE (short) action on delete (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>FK_NAME (String) foreign key name</li>\n+   * <li>PK_NAME (String) primary key name</li>\n+   * <li>DEFERRABILITY (short) deferrable or not (always\n+   * importedKeyNotDeferrable)</li>\n+   * </ol>\n+   *\n+   * @param catalog null (to get all objects) or the catalog name\n+   * @param schema  the schema name of the foreign table\n+   * @param table   the name of the foreign table\n+   * @return the result set\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getImportedKeys(String catalog, String schema, String table)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getImportedKeys(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \");\");\n+      }\n+      return getResultSet(meta.getImportedKeys(catalog, schema, table));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of foreign key columns that reference a table. The result\n+   * set is sorted by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME, FK_NAME,\n+   * KEY_SEQ.\n+   *\n+   * <ol>\n+   * <li>PKTABLE_CAT (String) primary catalog</li>\n+   * <li>PKTABLE_SCHEM (String) primary schema</li>\n+   * <li>PKTABLE_NAME (String) primary table</li>\n+   * <li>PKCOLUMN_NAME (String) primary column</li>\n+   * <li>FKTABLE_CAT (String) foreign catalog</li>\n+   * <li>FKTABLE_SCHEM (String) foreign schema</li>\n+   * <li>FKTABLE_NAME (String) foreign table</li>\n+   * <li>FKCOLUMN_NAME (String) foreign column</li>\n+   * <li>KEY_SEQ (short) sequence number (1,2,...)</li>\n+   * <li>UPDATE_RULE (short) action on update (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>DELETE_RULE (short) action on delete (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>FK_NAME (String) foreign key name</li>\n+   * <li>PK_NAME (String) primary key name</li>\n+   * <li>DEFERRABILITY (short) deferrable or not (always\n+   * importedKeyNotDeferrable)</li>\n+   * </ol>\n+   *\n+   * @param catalog null or the catalog name\n+   * @param schema  the schema name of the primary table\n+   * @param table   the name of the primary table\n+   * @return the result set\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getExportedKeys(String catalog, String schema, String table)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getExportedKeys(\"\n+            + quote(catalog) + \", \"\n+            + quote(schema) + \", \"\n+            + quote(table) + \");\");\n+      }\n+      return getResultSet(meta.getExportedKeys(catalog, schema, table));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of foreign key columns that references a table, as well as\n+   * the list of primary key columns that are references by a table. The\n+   * result set is sorted by FKTABLE_CAT, FKTABLE_SCHEM, FKTABLE_NAME,\n+   * FK_NAME, KEY_SEQ.\n+   *\n+   * <ol>\n+   * <li>PKTABLE_CAT (String) primary catalog</li>\n+   * <li>PKTABLE_SCHEM (String) primary schema</li>\n+   * <li>PKTABLE_NAME (String) primary table</li>\n+   * <li>PKCOLUMN_NAME (String) primary column</li>\n+   * <li>FKTABLE_CAT (String) foreign catalog</li>\n+   * <li>FKTABLE_SCHEM (String) foreign schema</li>\n+   * <li>FKTABLE_NAME (String) foreign table</li>\n+   * <li>FKCOLUMN_NAME (String) foreign column</li>\n+   * <li>KEY_SEQ (short) sequence number (1,2,...)</li>\n+   * <li>UPDATE_RULE (short) action on update (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>DELETE_RULE (short) action on delete (see\n+   * DatabaseMetaData.importedKey...)</li>\n+   * <li>FK_NAME (String) foreign key name</li>\n+   * <li>PK_NAME (String) primary key name</li>\n+   * <li>DEFERRABILITY (short) deferrable or not (always\n+   * importedKeyNotDeferrable)</li>\n+   * </ol>\n+   *\n+   * @param primaryCatalog null or the catalog name\n+   * @param primarySchema  the schema name of the primary table\n+   *                       (optional)\n+   * @param primaryTable   the name of the primary table (must be specified)\n+   * @param foreignCatalog null or the catalog name\n+   * @param foreignSchema  the schema name of the foreign table\n+   *                       (optional)\n+   * @param foreignTable   the name of the foreign table (must be specified)\n+   * @return the result set\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getCrossReference(String primaryCatalog,\n+                                     String primarySchema, String primaryTable,\n+                                     String foreignCatalog,\n+                                     String foreignSchema, String foreignTable)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getCrossReference(\"\n+            + quote(primaryCatalog) + \", \"\n+            + quote(primarySchema) + \", \"\n+            + quote(primaryTable) + \", \"\n+            + quote(foreignCatalog) + \", \"\n+            + quote(foreignSchema) + \", \"\n+            + quote(foreignTable) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getCrossReference(primaryCatalog, primarySchema, primaryTable,\n+              foreignCatalog,\n+              foreignSchema, foreignTable));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of user-defined data types.\n+   * This call returns an empty result set.\n+   *\n+   * <ol>\n+   * <li>TYPE_CAT (String) catalog</li>\n+   * <li>TYPE_SCHEM (String) schema</li>\n+   * <li>TYPE_NAME (String) type name</li>\n+   * <li>CLASS_NAME (String) Java class</li>\n+   * <li>DATA_TYPE (short) SQL Type - see also java.sql.Types</li>\n+   * <li>REMARKS (String) description</li>\n+   * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n+   * </ol>\n+   *\n+   * @param catalog         ignored\n+   * @param schemaPattern   ignored\n+   * @param typeNamePattern ignored\n+   * @param types           ignored\n+   * @return an empty result set\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getUDTs(String catalog, String schemaPattern,\n+                           String typeNamePattern, int[] types)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getUDTs(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(typeNamePattern) + \", \"\n+            + quoteIntArray(types) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the list of data types. The result set is sorted by DATA_TYPE and\n+   * afterwards by how closely the data type maps to the corresponding JDBC\n+   * SQL type (best match first).\n+   *\n+   * <ol>\n+   * <li>TYPE_NAME (String) type name</li>\n+   * <li>DATA_TYPE (short) SQL data type - see also java.sql.Types</li>\n+   * <li>PRECISION (int) maximum precision</li>\n+   * <li>LITERAL_PREFIX (String) prefix used to quote a literal</li>\n+   * <li>LITERAL_SUFFIX (String) suffix used to quote a literal</li>\n+   * <li>CREATE_PARAMS (String) parameters used (may be null)</li>\n+   * <li>NULLABLE (short) typeNoNulls (NULL not allowed) or typeNullable</li>\n+   * <li>CASE_SENSITIVE (boolean) case sensitive</li>\n+   * <li>SEARCHABLE (short) typeSearchable</li>\n+   * <li>UNSIGNED_ATTRIBUTE (boolean) unsigned</li>\n+   * <li>FIXED_PREC_SCALE (boolean) fixed precision</li>\n+   * <li>AUTO_INCREMENT (boolean) auto increment</li>\n+   * <li>LOCAL_TYPE_NAME (String) localized version of the data type</li>\n+   * <li>MINIMUM_SCALE (short) minimum scale</li>\n+   * <li>MAXIMUM_SCALE (short) maximum scale</li>\n+   * <li>SQL_DATA_TYPE (int) unused</li>\n+   * <li>SQL_DATETIME_SUB (int) unused</li>\n+   * <li>NUM_PREC_RADIX (int) 2 for binary, 10 for decimal</li>\n+   * </ol>\n+   *\n+   * @return the list of data types\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getTypeInfo() throws SQLException {\n+    try {\n+      debugCodeCall(\"getTypeInfo\");\n+      return getResultSet(meta.getTypeInfo());\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if this database store data in local files.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean usesLocalFiles() {\n+    debugCodeCall(\"usesLocalFiles\");\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if this database use one file per table.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean usesLocalFilePerTable() {\n+    debugCodeCall(\"usesLocalFilePerTable\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the string used to quote identifiers.\n+   *\n+   * @return a double quote\n+   */\n+  @Override\n+  public String getIdentifierQuoteString() {\n+    debugCodeCall(\"getIdentifierQuoteString\");\n+    return \"\\\"\";\n+  }\n+\n+  /**\n+   * Gets the comma-separated list of all SQL keywords that are not supported\n+   * as unquoted table/column/index name, in addition to the SQL:2003 keywords.\n+   *\n+   * @return a list of additional the keywords\n+   */\n+  @Override\n+  public String getSQLKeywords() throws SQLException {\n+    try {\n+      debugCodeCall(\"getSQLKeywords\");\n+      return meta.getSQLKeywords();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the list of numeric functions supported by this database.\n+   *\n+   * @return the list\n+   */\n+  @Override\n+  public String getNumericFunctions() throws SQLException {\n+    try {\n+      debugCodeCall(\"getNumericFunctions\");\n+      return meta.getNumericFunctions();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the list of string functions supported by this database.\n+   *\n+   * @return the list\n+   */\n+  @Override\n+  public String getStringFunctions() throws SQLException {\n+    try {\n+      debugCodeCall(\"getStringFunctions\");\n+      return meta.getStringFunctions();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the list of system functions supported by this database.\n+   *\n+   * @return the list\n+   */\n+  @Override\n+  public String getSystemFunctions() throws SQLException {\n+    try {\n+      debugCodeCall(\"getSystemFunctions\");\n+      return meta.getSystemFunctions();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the list of date and time functions supported by this database.\n+   *\n+   * @return the list\n+   */\n+  @Override\n+  public String getTimeDateFunctions() throws SQLException {\n+    try {\n+      debugCodeCall(\"getTimeDateFunctions\");\n+      return meta.getTimeDateFunctions();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the default escape character for DatabaseMetaData search\n+   * patterns.\n+   *\n+   * @return the default escape character (always '\\', independent on the\n+   * mode)\n+   */\n+  @Override\n+  public String getSearchStringEscape() throws SQLException {\n+    try {\n+      debugCodeCall(\"getSearchStringEscape\");\n+      return meta.getSearchStringEscape();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns the characters that are allowed for identifiers in addiction to\n+   * A-Z, a-z, 0-9 and '_'.\n+   *\n+   * @return an empty String (\"\")\n+   */\n+  @Override\n+  public String getExtraNameCharacters() {\n+    debugCodeCall(\"getExtraNameCharacters\");\n+    return \"\";\n+  }\n+\n+  /**\n+   * Returns whether alter table with add column is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsAlterTableWithAddColumn() {\n+    debugCodeCall(\"supportsAlterTableWithAddColumn\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether alter table with drop column is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsAlterTableWithDropColumn() {\n+    debugCodeCall(\"supportsAlterTableWithDropColumn\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether column aliasing is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsColumnAliasing() {\n+    debugCodeCall(\"supportsColumnAliasing\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether NULL+1 is NULL or not.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean nullPlusNonNullIsNull() {\n+    debugCodeCall(\"nullPlusNonNullIsNull\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether CONVERT is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsConvert() {\n+    debugCodeCall(\"supportsConvert\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether CONVERT is supported for one datatype to another.\n+   *\n+   * @param fromType the source SQL type\n+   * @param toType   the target SQL type\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsConvert(int fromType, int toType) {\n+    if (isDebugEnabled()) {\n+      debugCode(\"supportsConvert(\" + fromType + \", \" + fromType + \");\");\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether table correlation names (table alias) are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsTableCorrelationNames() {\n+    debugCodeCall(\"supportsTableCorrelationNames\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether table correlation names (table alias) are restricted to\n+   * be different than table names.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsDifferentTableCorrelationNames() {\n+    debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether expression in ORDER BY are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsExpressionsInOrderBy() {\n+    debugCodeCall(\"supportsExpressionsInOrderBy\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether ORDER BY is supported if the column is not in the SELECT\n+   * list.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsOrderByUnrelated() {\n+    debugCodeCall(\"supportsOrderByUnrelated\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether GROUP BY is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsGroupBy() {\n+    debugCodeCall(\"supportsGroupBy\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether GROUP BY is supported if the column is not in the SELECT\n+   * list.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsGroupByUnrelated() {\n+    debugCodeCall(\"supportsGroupByUnrelated\");\n+    return true;\n+  }\n+\n+  /**\n+   * Checks whether a GROUP BY clause can use columns that are not in the\n+   * SELECT clause, provided that it specifies all the columns in the SELECT\n+   * clause.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsGroupByBeyondSelect() {\n+    debugCodeCall(\"supportsGroupByBeyondSelect\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether LIKE... ESCAPE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsLikeEscapeClause() {\n+    debugCodeCall(\"supportsLikeEscapeClause\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether multiple result sets are supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsMultipleResultSets() {\n+    debugCodeCall(\"supportsMultipleResultSets\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether multiple transactions (on different connections) are\n+   * supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsMultipleTransactions() {\n+    debugCodeCall(\"supportsMultipleTransactions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether columns with NOT NULL are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsNonNullableColumns() {\n+    debugCodeCall(\"supportsNonNullableColumns\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether ODBC Minimum SQL grammar is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsMinimumSQLGrammar() {\n+    debugCodeCall(\"supportsMinimumSQLGrammar\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether ODBC Core SQL grammar is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCoreSQLGrammar() {\n+    debugCodeCall(\"supportsCoreSQLGrammar\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether ODBC Extended SQL grammar is supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsExtendedSQLGrammar() {\n+    debugCodeCall(\"supportsExtendedSQLGrammar\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether SQL-92 entry level grammar is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsANSI92EntryLevelSQL() {\n+    debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether SQL-92 intermediate level grammar is supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsANSI92IntermediateSQL() {\n+    debugCodeCall(\"supportsANSI92IntermediateSQL\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether SQL-92 full level grammar is supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsANSI92FullSQL() {\n+    debugCodeCall(\"supportsANSI92FullSQL\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether referential integrity is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsIntegrityEnhancementFacility() {\n+    debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether outer joins are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsOuterJoins() {\n+    debugCodeCall(\"supportsOuterJoins\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether full outer joins are supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsFullOuterJoins() {\n+    debugCodeCall(\"supportsFullOuterJoins\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether limited outer joins are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsLimitedOuterJoins() {\n+    debugCodeCall(\"supportsLimitedOuterJoins\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the term for \"schema\".\n+   *\n+   * @return \"schema\"\n+   */\n+  @Override\n+  public String getSchemaTerm() {\n+    debugCodeCall(\"getSchemaTerm\");\n+    return \"schema\";\n+  }\n+\n+  /**\n+   * Returns the term for \"procedure\".\n+   *\n+   * @return \"procedure\"\n+   */\n+  @Override\n+  public String getProcedureTerm() {\n+    debugCodeCall(\"getProcedureTerm\");\n+    return \"procedure\";\n+  }\n+\n+  /**\n+   * Returns the term for \"catalog\".\n+   *\n+   * @return \"catalog\"\n+   */\n+  @Override\n+  public String getCatalogTerm() {\n+    debugCodeCall(\"getCatalogTerm\");\n+    return \"catalog\";\n+  }\n+\n+  /**\n+   * Returns whether the catalog is at the beginning.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean isCatalogAtStart() {\n+    debugCodeCall(\"isCatalogAtStart\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns the catalog separator.\n+   *\n+   * @return \".\"\n+   */\n+  @Override\n+  public String getCatalogSeparator() {\n+    debugCodeCall(\"getCatalogSeparator\");\n+    return \".\";\n+  }\n+\n+  /**\n+   * Returns whether the schema name in INSERT, UPDATE, DELETE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSchemasInDataManipulation() {\n+    debugCodeCall(\"supportsSchemasInDataManipulation\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the schema name in procedure calls is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSchemasInProcedureCalls() {\n+    debugCodeCall(\"supportsSchemasInProcedureCalls\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the schema name in CREATE TABLE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSchemasInTableDefinitions() {\n+    debugCodeCall(\"supportsSchemasInTableDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the schema name in CREATE INDEX is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSchemasInIndexDefinitions() {\n+    debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the schema name in GRANT is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSchemasInPrivilegeDefinitions() {\n+    debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the catalog name in INSERT, UPDATE, DELETE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCatalogsInDataManipulation() {\n+    debugCodeCall(\"supportsCatalogsInDataManipulation\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the catalog name in procedure calls is supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsCatalogsInProcedureCalls() {\n+    debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether the catalog name in CREATE TABLE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCatalogsInTableDefinitions() {\n+    debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the catalog name in CREATE INDEX is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCatalogsInIndexDefinitions() {\n+    debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the catalog name in GRANT is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCatalogsInPrivilegeDefinitions() {\n+    debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether positioned deletes are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsPositionedDelete() {\n+    debugCodeCall(\"supportsPositionedDelete\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether positioned updates are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsPositionedUpdate() {\n+    debugCodeCall(\"supportsPositionedUpdate\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether SELECT ... FOR UPDATE is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSelectForUpdate() {\n+    debugCodeCall(\"supportsSelectForUpdate\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether stored procedures are supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsStoredProcedures() {\n+    debugCodeCall(\"supportsStoredProcedures\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether subqueries (SELECT) in comparisons are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSubqueriesInComparisons() {\n+    debugCodeCall(\"supportsSubqueriesInComparisons\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether SELECT in EXISTS is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSubqueriesInExists() {\n+    debugCodeCall(\"supportsSubqueriesInExists\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether IN(SELECT...) is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSubqueriesInIns() {\n+    debugCodeCall(\"supportsSubqueriesInIns\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether subqueries in quantified expression are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSubqueriesInQuantifieds() {\n+    debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether correlated subqueries are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsCorrelatedSubqueries() {\n+    debugCodeCall(\"supportsCorrelatedSubqueries\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether UNION SELECT is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsUnion() {\n+    debugCodeCall(\"supportsUnion\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether UNION ALL SELECT is supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsUnionAll() {\n+    debugCodeCall(\"supportsUnionAll\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether open result sets across commits are supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsOpenCursorsAcrossCommit() {\n+    debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether open result sets across rollback are supported.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsOpenCursorsAcrossRollback() {\n+    debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether open statements across commit are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsOpenStatementsAcrossCommit() {\n+    debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether open statements across rollback are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsOpenStatementsAcrossRollback() {\n+    debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether transactions are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsTransactions() {\n+    debugCodeCall(\"supportsTransactions\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether a specific transaction isolation level is supported.\n+   *\n+   * @param level the transaction isolation level (Connection.TRANSACTION_*)\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsTransactionIsolationLevel(int level)\n+      throws SQLException {\n+    debugCodeCall(\"supportsTransactionIsolationLevel\");\n+    switch (level) {\n+      case Connection.TRANSACTION_READ_UNCOMMITTED:\n+      case Connection.TRANSACTION_READ_COMMITTED:\n+      case Connection.TRANSACTION_REPEATABLE_READ:\n+      case Constants.TRANSACTION_SNAPSHOT:\n+      case Connection.TRANSACTION_SERIALIZABLE:\n         return true;\n-    }\n-\n-    /**\n-     * Returns whether CONVERT is supported for one datatype to another.\n-     *\n-     * @param fromType the source SQL type\n-     * @param toType the target SQL type\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsConvert(int fromType, int toType) {\n-        if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether table correlation names (table alias) are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsTableCorrelationNames() {\n-        debugCodeCall(\"supportsTableCorrelationNames\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether table correlation names (table alias) are restricted to\n-     * be different than table names.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsDifferentTableCorrelationNames() {\n-        debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether expression in ORDER BY are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsExpressionsInOrderBy() {\n-        debugCodeCall(\"supportsExpressionsInOrderBy\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether ORDER BY is supported if the column is not in the SELECT\n-     * list.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsOrderByUnrelated() {\n-        debugCodeCall(\"supportsOrderByUnrelated\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether GROUP BY is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsGroupBy() {\n-        debugCodeCall(\"supportsGroupBy\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether GROUP BY is supported if the column is not in the SELECT\n-     * list.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsGroupByUnrelated() {\n-        debugCodeCall(\"supportsGroupByUnrelated\");\n-        return true;\n-    }\n-\n-    /**\n-     * Checks whether a GROUP BY clause can use columns that are not in the\n-     * SELECT clause, provided that it specifies all the columns in the SELECT\n-     * clause.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsGroupByBeyondSelect() {\n-        debugCodeCall(\"supportsGroupByBeyondSelect\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether LIKE... ESCAPE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsLikeEscapeClause() {\n-        debugCodeCall(\"supportsLikeEscapeClause\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether multiple result sets are supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsMultipleResultSets() {\n-        debugCodeCall(\"supportsMultipleResultSets\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether multiple transactions (on different connections) are\n-     * supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsMultipleTransactions() {\n-        debugCodeCall(\"supportsMultipleTransactions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether columns with NOT NULL are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsNonNullableColumns() {\n-        debugCodeCall(\"supportsNonNullableColumns\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether ODBC Minimum SQL grammar is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsMinimumSQLGrammar() {\n-        debugCodeCall(\"supportsMinimumSQLGrammar\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether ODBC Core SQL grammar is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCoreSQLGrammar() {\n-        debugCodeCall(\"supportsCoreSQLGrammar\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether ODBC Extended SQL grammar is supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsExtendedSQLGrammar() {\n-        debugCodeCall(\"supportsExtendedSQLGrammar\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether SQL-92 entry level grammar is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsANSI92EntryLevelSQL() {\n-        debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether SQL-92 intermediate level grammar is supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsANSI92IntermediateSQL() {\n-        debugCodeCall(\"supportsANSI92IntermediateSQL\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether SQL-92 full level grammar is supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsANSI92FullSQL() {\n-        debugCodeCall(\"supportsANSI92FullSQL\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether referential integrity is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsIntegrityEnhancementFacility() {\n-        debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether outer joins are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsOuterJoins() {\n-        debugCodeCall(\"supportsOuterJoins\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether full outer joins are supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsFullOuterJoins() {\n-        debugCodeCall(\"supportsFullOuterJoins\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether limited outer joins are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsLimitedOuterJoins() {\n-        debugCodeCall(\"supportsLimitedOuterJoins\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns the term for \"schema\".\n-     *\n-     * @return \"schema\"\n-     */\n-    @Override\n-    public String getSchemaTerm() {\n-        debugCodeCall(\"getSchemaTerm\");\n-        return \"schema\";\n-    }\n-\n-    /**\n-     * Returns the term for \"procedure\".\n-     *\n-     * @return \"procedure\"\n-     */\n-    @Override\n-    public String getProcedureTerm() {\n-        debugCodeCall(\"getProcedureTerm\");\n-        return \"procedure\";\n-    }\n-\n-    /**\n-     * Returns the term for \"catalog\".\n-     *\n-     * @return \"catalog\"\n-     */\n-    @Override\n-    public String getCatalogTerm() {\n-        debugCodeCall(\"getCatalogTerm\");\n-        return \"catalog\";\n-    }\n-\n-    /**\n-     * Returns whether the catalog is at the beginning.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean isCatalogAtStart() {\n-        debugCodeCall(\"isCatalogAtStart\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns the catalog separator.\n-     *\n-     * @return \".\"\n-     */\n-    @Override\n-    public String getCatalogSeparator() {\n-        debugCodeCall(\"getCatalogSeparator\");\n-        return \".\";\n-    }\n-\n-    /**\n-     * Returns whether the schema name in INSERT, UPDATE, DELETE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSchemasInDataManipulation() {\n-        debugCodeCall(\"supportsSchemasInDataManipulation\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the schema name in procedure calls is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSchemasInProcedureCalls() {\n-        debugCodeCall(\"supportsSchemasInProcedureCalls\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the schema name in CREATE TABLE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSchemasInTableDefinitions() {\n-        debugCodeCall(\"supportsSchemasInTableDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the schema name in CREATE INDEX is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSchemasInIndexDefinitions() {\n-        debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the schema name in GRANT is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSchemasInPrivilegeDefinitions() {\n-        debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the catalog name in INSERT, UPDATE, DELETE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCatalogsInDataManipulation() {\n-        debugCodeCall(\"supportsCatalogsInDataManipulation\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the catalog name in procedure calls is supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsCatalogsInProcedureCalls() {\n-        debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n+      default:\n         return false;\n     }\n-\n-    /**\n-     * Returns whether the catalog name in CREATE TABLE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCatalogsInTableDefinitions() {\n-        debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the catalog name in CREATE INDEX is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCatalogsInIndexDefinitions() {\n-        debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the catalog name in GRANT is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCatalogsInPrivilegeDefinitions() {\n-        debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether positioned deletes are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsPositionedDelete() {\n-        debugCodeCall(\"supportsPositionedDelete\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether positioned updates are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsPositionedUpdate() {\n-        debugCodeCall(\"supportsPositionedUpdate\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether SELECT ... FOR UPDATE is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSelectForUpdate() {\n-        debugCodeCall(\"supportsSelectForUpdate\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether stored procedures are supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsStoredProcedures() {\n-        debugCodeCall(\"supportsStoredProcedures\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether subqueries (SELECT) in comparisons are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSubqueriesInComparisons() {\n-        debugCodeCall(\"supportsSubqueriesInComparisons\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether SELECT in EXISTS is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSubqueriesInExists() {\n-        debugCodeCall(\"supportsSubqueriesInExists\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether IN(SELECT...) is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSubqueriesInIns() {\n-        debugCodeCall(\"supportsSubqueriesInIns\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether subqueries in quantified expression are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSubqueriesInQuantifieds() {\n-        debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether correlated subqueries are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsCorrelatedSubqueries() {\n-        debugCodeCall(\"supportsCorrelatedSubqueries\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether UNION SELECT is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsUnion() {\n-        debugCodeCall(\"supportsUnion\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether UNION ALL SELECT is supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsUnionAll() {\n-        debugCodeCall(\"supportsUnionAll\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether open result sets across commits are supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsOpenCursorsAcrossCommit() {\n-        debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether open result sets across rollback are supported.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsOpenCursorsAcrossRollback() {\n-        debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether open statements across commit are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsOpenStatementsAcrossCommit() {\n-        debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether open statements across rollback are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsOpenStatementsAcrossRollback() {\n-        debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether transactions are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsTransactions() {\n-        debugCodeCall(\"supportsTransactions\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether a specific transaction isolation level is supported.\n-     *\n-     * @param level the transaction isolation level (Connection.TRANSACTION_*)\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n-        debugCodeCall(\"supportsTransactionIsolationLevel\");\n-        switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * Returns whether data manipulation and CREATE/DROP is supported in\n-     * transactions.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n-        debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether only data manipulations are supported in transactions.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsDataManipulationTransactionsOnly() {\n-        debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether CREATE/DROP commit an open transaction.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean dataDefinitionCausesTransactionCommit() {\n-        debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether CREATE/DROP do not affect transactions.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean dataDefinitionIgnoredInTransactions() {\n-        debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether a specific result set type is supported.\n-     * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n-     *\n-     * @param type the result set type\n-     * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n-     */\n-    @Override\n-    public boolean supportsResultSetType(int type) {\n-        debugCodeCall(\"supportsResultSetType\", type);\n-        return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n-    }\n-\n-    /**\n-     * Returns whether a specific result set concurrency is supported.\n-     * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n-     *\n-     * @param type the result set type\n-     * @param concurrency the result set concurrency\n-     * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n-     */\n-    @Override\n-    public boolean supportsResultSetConcurrency(int type, int concurrency) {\n-        if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n-        }\n-        return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n-    }\n-\n-    /**\n-     * Returns whether own updates are visible.\n-     *\n-     * @param type the result set type\n-     * @return true\n-     */\n-    @Override\n-    public boolean ownUpdatesAreVisible(int type) {\n-        debugCodeCall(\"ownUpdatesAreVisible\", type);\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether own deletes are visible.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean ownDeletesAreVisible(int type) {\n-        debugCodeCall(\"ownDeletesAreVisible\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether own inserts are visible.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean ownInsertsAreVisible(int type) {\n-        debugCodeCall(\"ownInsertsAreVisible\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether other updates are visible.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean othersUpdatesAreVisible(int type) {\n-        debugCodeCall(\"othersUpdatesAreVisible\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether other deletes are visible.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean othersDeletesAreVisible(int type) {\n-        debugCodeCall(\"othersDeletesAreVisible\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether other inserts are visible.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean othersInsertsAreVisible(int type) {\n-        debugCodeCall(\"othersInsertsAreVisible\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether updates are detected.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean updatesAreDetected(int type) {\n-        debugCodeCall(\"updatesAreDetected\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether deletes are detected.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean deletesAreDetected(int type) {\n-        debugCodeCall(\"deletesAreDetected\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether inserts are detected.\n-     *\n-     * @param type the result set type\n-     * @return false\n-     */\n-    @Override\n-    public boolean insertsAreDetected(int type) {\n-        debugCodeCall(\"insertsAreDetected\", type);\n-        return false;\n-    }\n-\n-    /**\n-     * Returns whether batch updates are supported.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsBatchUpdates() {\n-        debugCodeCall(\"supportsBatchUpdates\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether the maximum row size includes blobs.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean doesMaxRowSizeIncludeBlobs() {\n-        debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n-        return false;\n-    }\n-\n-    /**\n-     * Returns the default transaction isolation level.\n-     *\n-     * @return Connection.TRANSACTION_READ_COMMITTED\n-     */\n-    @Override\n-    public int getDefaultTransactionIsolation() {\n-        debugCodeCall(\"getDefaultTransactionIsolation\");\n-        return Connection.TRANSACTION_READ_COMMITTED;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE Test(ID INT), getTables returns Test as the\n-     * table name and identifiers are case sensitive.\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n-        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n-        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE Test(ID INT), getTables returns TEST as the\n-     * table name.\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean storesUpperCaseIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesUpperCaseIdentifiers\");\n-        return conn.getStaticSettings().databaseToUpper;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE Test(ID INT), getTables returns test as the\n-     * table name.\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean storesLowerCaseIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesLowerCaseIdentifiers\");\n-        return conn.getStaticSettings().databaseToLower;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE Test(ID INT), getTables returns Test as the\n-     * table name and identifiers are not case sensitive.\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean storesMixedCaseIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesMixedCaseIdentifiers\");\n-        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n-    }\n-\n-    /**\n-     * Checks if a table created with CREATE TABLE \"Test\"(ID INT) is a different\n-     * table than a table created with CREATE TABLE \"TEST\"(ID INT).\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n-        debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n-        return !conn.getStaticSettings().caseInsensitiveIdentifiers;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns TEST as the\n-     * table name.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n-        return false;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns test as the\n-     * table name.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n-        return false;\n-    }\n-\n-    /**\n-     * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns Test as the\n-     * table name and identifiers are case insensitive.\n-     *\n-     * @return true is so, false otherwise\n-     */\n-    @Override\n-    public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n-        debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n-        return conn.getStaticSettings().caseInsensitiveIdentifiers;\n-    }\n-\n-    /**\n-     * Returns the maximum length for hex values (characters).\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxBinaryLiteralLength() {\n-        debugCodeCall(\"getMaxBinaryLiteralLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for literals.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxCharLiteralLength() {\n-        debugCodeCall(\"getMaxCharLiteralLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for column names.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnNameLength() {\n-        debugCodeCall(\"getMaxColumnNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of columns in GROUP BY.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnsInGroupBy() {\n-        debugCodeCall(\"getMaxColumnsInGroupBy\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of columns in CREATE INDEX.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnsInIndex() {\n-        debugCodeCall(\"getMaxColumnsInIndex\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of columns in ORDER BY.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnsInOrderBy() {\n-        debugCodeCall(\"getMaxColumnsInOrderBy\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of columns in SELECT.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnsInSelect() {\n-        debugCodeCall(\"getMaxColumnsInSelect\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of columns in CREATE TABLE.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxColumnsInTable() {\n-        debugCodeCall(\"getMaxColumnsInTable\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of open connection.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxConnections() {\n-        debugCodeCall(\"getMaxConnections\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a cursor name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxCursorNameLength() {\n-        debugCodeCall(\"getMaxCursorNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for an index (in bytes).\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxIndexLength() {\n-        debugCodeCall(\"getMaxIndexLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a schema name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxSchemaNameLength() {\n-        debugCodeCall(\"getMaxSchemaNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a procedure name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxProcedureNameLength() {\n-        debugCodeCall(\"getMaxProcedureNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a catalog name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxCatalogNameLength() {\n-        debugCodeCall(\"getMaxCatalogNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum size of a row (in bytes).\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxRowSize() {\n-        debugCodeCall(\"getMaxRowSize\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length of a statement.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxStatementLength() {\n-        debugCodeCall(\"getMaxStatementLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of open statements.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxStatements() {\n-        debugCodeCall(\"getMaxStatements\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a table name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxTableNameLength() {\n-        debugCodeCall(\"getMaxTableNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum number of tables in a SELECT.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxTablesInSelect() {\n-        debugCodeCall(\"getMaxTablesInSelect\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Returns the maximum length for a user name.\n-     *\n-     * @return 0 for limit is unknown\n-     */\n-    @Override\n-    public int getMaxUserNameLength() {\n-        debugCodeCall(\"getMaxUserNameLength\");\n-        return 0;\n-    }\n-\n-    /**\n-     * Does the database support savepoints.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsSavepoints() {\n-        debugCodeCall(\"supportsSavepoints\");\n-        return true;\n-    }\n-\n-    /**\n-     * Does the database support named parameters.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsNamedParameters() {\n-        debugCodeCall(\"supportsNamedParameters\");\n-        return false;\n-    }\n-\n-    /**\n-     * Does the database support multiple open result sets.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsMultipleOpenResults() {\n-        debugCodeCall(\"supportsMultipleOpenResults\");\n-        return true;\n-    }\n-\n-    /**\n-     * Does the database support getGeneratedKeys.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsGetGeneratedKeys() {\n-        debugCodeCall(\"supportsGetGeneratedKeys\");\n-        return true;\n-    }\n-\n-    /**\n-     * [Not supported]\n-     */\n-    @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Get the list of super tables of a table. This method currently returns an\n-     * empty result set.\n-     * <ol>\n-     * <li>TABLE_CAT (String) table catalog</li>\n-     * <li>TABLE_SCHEM (String) table schema</li>\n-     * <li>TABLE_NAME (String) table name</li>\n-     * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n-     * </ol>\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n-     * @return an empty result set\n-     */\n-    @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * [Not supported]\n-     */\n-    @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Does this database supports a result set holdability.\n-     *\n-     * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n-     * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n-     */\n-    @Override\n-    public boolean supportsResultSetHoldability(int holdability) {\n-        debugCodeCall(\"supportsResultSetHoldability\", holdability);\n-        return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT;\n-    }\n-\n-    /**\n-     * Gets the result set holdability.\n-     *\n-     * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n-     */\n-    @Override\n-    public int getResultSetHoldability() {\n-        debugCodeCall(\"getResultSetHoldability\");\n-        return ResultSet.CLOSE_CURSORS_AT_COMMIT;\n-    }\n-\n-    /**\n-     * Gets the major version of the database.\n-     *\n-     * @return the major version\n-     */\n-    @Override\n-    public int getDatabaseMajorVersion() throws SQLException {\n-        try {\n-            debugCodeCall(\"getDatabaseMajorVersion\");\n-            return meta.getDatabaseMajorVersion();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the minor version of the database.\n-     *\n-     * @return the minor version\n-     */\n-    @Override\n-    public int getDatabaseMinorVersion() throws SQLException {\n-        try {\n-            debugCodeCall(\"getDatabaseMinorVersion\");\n-            return meta.getDatabaseMinorVersion();\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Gets the major version of the supported JDBC API.\n-     *\n-     * @return the major version (4)\n-     */\n-    @Override\n-    public int getJDBCMajorVersion() {\n-        debugCodeCall(\"getJDBCMajorVersion\");\n-        return 4;\n-    }\n-\n-    /**\n-     * Gets the minor version of the supported JDBC API.\n-     *\n-     * @return the minor version (2)\n-     */\n-    @Override\n-    public int getJDBCMinorVersion() {\n-        debugCodeCall(\"getJDBCMinorVersion\");\n-        return 2;\n-    }\n-\n-    /**\n-     * Gets the SQL State type.\n-     *\n-     * @return {@link DatabaseMetaData#sqlStateSQL}\n-     */\n-    @Override\n-    public int getSQLStateType() {\n-        debugCodeCall(\"getSQLStateType\");\n-        return DatabaseMetaData.sqlStateSQL;\n-    }\n-\n-    /**\n-     * Does the database make a copy before updating.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean locatorsUpdateCopy() {\n-        debugCodeCall(\"locatorsUpdateCopy\");\n-        return false;\n-    }\n-\n-    /**\n-     * Does the database support statement pooling.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean supportsStatementPooling() {\n-        debugCodeCall(\"supportsStatementPooling\");\n-        return false;\n-    }\n-\n-    // =============================================================\n-\n-    private void checkClosed() {\n-        conn.checkClosed();\n-    }\n-\n-    /**\n-     * Get the lifetime of a rowid.\n-     *\n-     * @return ROWID_UNSUPPORTED\n-     */\n-    @Override\n-    public RowIdLifetime getRowIdLifetime() {\n-        debugCodeCall(\"getRowIdLifetime\");\n-        return RowIdLifetime.ROWID_UNSUPPORTED;\n-    }\n-\n-    /**\n-     * Gets the list of schemas in the database.\n-     * The result set is sorted by TABLE_SCHEM.\n-     *\n-     * <ol>\n-     * <li>TABLE_SCHEM (String) schema name</li>\n-     * <li>TABLE_CATALOG (String) catalog name</li>\n-     * </ol>\n-     *\n-     * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @return the schema list\n-     * @throws SQLException if the connection is closed\n-     */\n-    @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n-        try {\n-            debugCodeCall(\"getSchemas(String,String)\");\n-            return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns whether the database supports calling functions using the call\n-     * syntax.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean supportsStoredFunctionsUsingCallSyntax() {\n-        debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n-        return true;\n-    }\n-\n-    /**\n-     * Returns whether an exception while auto commit is on closes all result\n-     * sets.\n-     *\n-     * @return false\n-     */\n-    @Override\n-    public boolean autoCommitFailureClosesAllResultSets() {\n-        debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n-        return false;\n-    }\n-\n-    @Override\n-    public ResultSet getClientInfoProperties() throws SQLException {\n-        Properties clientInfo = conn.getClientInfo();\n-        SimpleResult result = new SimpleResult();\n-        result.addColumn(\"NAME\", TypeInfo.TYPE_VARCHAR);\n-        result.addColumn(\"MAX_LEN\", TypeInfo.TYPE_INTEGER);\n-        result.addColumn(\"DEFAULT_VALUE\", TypeInfo.TYPE_VARCHAR);\n-        result.addColumn(\"DESCRIPTION\", TypeInfo.TYPE_VARCHAR);\n-        // Non-standard column\n-        result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n-        for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n-        }\n-        int id = getNextId(TraceObject.RESULT_SET);\n-        if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n-        }\n-        return new JdbcResultSet(conn, null, null, result, id, true, false);\n-    }\n-\n-    /**\n-     * Return an object of this class if possible.\n-     *\n-     * @param iface the class\n-     * @return this\n-     */\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T unwrap(Class<T> iface) throws SQLException {\n-        try {\n-            if (isWrapperFor(iface)) {\n-                return (T) this;\n-            }\n-            throw DbException.getInvalidValueException(\"iface\", iface);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Checks if unwrap can return an object of this class.\n-     *\n-     * @param iface the class\n-     * @return whether or not the interface is assignable from this class\n-     */\n-    @Override\n-    public boolean isWrapperFor(Class<?> iface) throws SQLException {\n-        return iface != null && iface.isAssignableFrom(getClass());\n-    }\n-\n-    /**\n-     * [Not supported] Gets the list of function columns.\n-     */\n-    @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n-            }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * [Not supported] Gets the list of functions.\n-     */\n-    @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * Returns whether database always returns generated keys if valid names or\n-     * indexes of columns were specified and command was completed successfully.\n-     *\n-     * @return true\n-     */\n-    @Override\n-    public boolean generatedKeyAlwaysReturned() {\n-        return true;\n-    }\n-\n-    /**\n-     * [Not supported]\n-     *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n-     */\n-    @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n-            }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n-     * INTERNAL\n-     */\n-    @Override\n-    public String toString() {\n-        return getTraceObjectName() + \": \" + conn;\n-    }\n-\n-    private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n-    }\n+  }\n+\n+  /**\n+   * Returns whether data manipulation and CREATE/DROP is supported in\n+   * transactions.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n+    debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether only data manipulations are supported in transactions.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsDataManipulationTransactionsOnly() {\n+    debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether CREATE/DROP commit an open transaction.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean dataDefinitionCausesTransactionCommit() {\n+    debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether CREATE/DROP do not affect transactions.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean dataDefinitionIgnoredInTransactions() {\n+    debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether a specific result set type is supported.\n+   * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n+   *\n+   * @param type the result set type\n+   * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n+   */\n+  @Override\n+  public boolean supportsResultSetType(int type) {\n+    debugCodeCall(\"supportsResultSetType\", type);\n+    return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n+  }\n+\n+  /**\n+   * Returns whether a specific result set concurrency is supported.\n+   * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n+   *\n+   * @param type        the result set type\n+   * @param concurrency the result set concurrency\n+   * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n+   */\n+  @Override\n+  public boolean supportsResultSetConcurrency(int type, int concurrency) {\n+    if (isDebugEnabled()) {\n+      debugCode(\n+          \"supportsResultSetConcurrency(\" + type + \", \" + concurrency + \");\");\n+    }\n+    return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n+  }\n+\n+  /**\n+   * Returns whether own updates are visible.\n+   *\n+   * @param type the result set type\n+   * @return true\n+   */\n+  @Override\n+  public boolean ownUpdatesAreVisible(int type) {\n+    debugCodeCall(\"ownUpdatesAreVisible\", type);\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether own deletes are visible.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean ownDeletesAreVisible(int type) {\n+    debugCodeCall(\"ownDeletesAreVisible\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether own inserts are visible.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean ownInsertsAreVisible(int type) {\n+    debugCodeCall(\"ownInsertsAreVisible\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether other updates are visible.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean othersUpdatesAreVisible(int type) {\n+    debugCodeCall(\"othersUpdatesAreVisible\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether other deletes are visible.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean othersDeletesAreVisible(int type) {\n+    debugCodeCall(\"othersDeletesAreVisible\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether other inserts are visible.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean othersInsertsAreVisible(int type) {\n+    debugCodeCall(\"othersInsertsAreVisible\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether updates are detected.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean updatesAreDetected(int type) {\n+    debugCodeCall(\"updatesAreDetected\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether deletes are detected.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean deletesAreDetected(int type) {\n+    debugCodeCall(\"deletesAreDetected\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether inserts are detected.\n+   *\n+   * @param type the result set type\n+   * @return false\n+   */\n+  @Override\n+  public boolean insertsAreDetected(int type) {\n+    debugCodeCall(\"insertsAreDetected\", type);\n+    return false;\n+  }\n+\n+  /**\n+   * Returns whether batch updates are supported.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsBatchUpdates() {\n+    debugCodeCall(\"supportsBatchUpdates\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether the maximum row size includes blobs.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean doesMaxRowSizeIncludeBlobs() {\n+    debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n+    return false;\n+  }\n+\n+  /**\n+   * Returns the default transaction isolation level.\n+   *\n+   * @return Connection.TRANSACTION_READ_COMMITTED\n+   */\n+  @Override\n+  public int getDefaultTransactionIsolation() {\n+    debugCodeCall(\"getDefaultTransactionIsolation\");\n+    return Connection.TRANSACTION_READ_COMMITTED;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE Test(ID INT), getTables returns Test as the\n+   * table name and identifiers are case sensitive.\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean supportsMixedCaseIdentifiers() throws SQLException {\n+    debugCodeCall(\"supportsMixedCaseIdentifiers\");\n+    SessionInterface.StaticSettings settings = conn.getStaticSettings();\n+    return !settings.databaseToUpper && !settings.databaseToLower &&\n+        !settings.caseInsensitiveIdentifiers;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE Test(ID INT), getTables returns TEST as the\n+   * table name.\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean storesUpperCaseIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesUpperCaseIdentifiers\");\n+    return conn.getStaticSettings().databaseToUpper;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE Test(ID INT), getTables returns test as the\n+   * table name.\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean storesLowerCaseIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesLowerCaseIdentifiers\");\n+    return conn.getStaticSettings().databaseToLower;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE Test(ID INT), getTables returns Test as the\n+   * table name and identifiers are not case sensitive.\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean storesMixedCaseIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesMixedCaseIdentifiers\");\n+    SessionInterface.StaticSettings settings = conn.getStaticSettings();\n+    return !settings.databaseToUpper && !settings.databaseToLower &&\n+        settings.caseInsensitiveIdentifiers;\n+  }\n+\n+  /**\n+   * Checks if a table created with CREATE TABLE \"Test\"(ID INT) is a different\n+   * table than a table created with CREATE TABLE \"TEST\"(ID INT).\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n+    debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n+    return !conn.getStaticSettings().caseInsensitiveIdentifiers;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns TEST as the\n+   * table name.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns test as the\n+   * table name.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n+    return false;\n+  }\n+\n+  /**\n+   * Checks if for CREATE TABLE \"Test\"(ID INT), getTables returns Test as the\n+   * table name and identifiers are case insensitive.\n+   *\n+   * @return true is so, false otherwise\n+   */\n+  @Override\n+  public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n+    debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n+    return conn.getStaticSettings().caseInsensitiveIdentifiers;\n+  }\n+\n+  /**\n+   * Returns the maximum length for hex values (characters).\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxBinaryLiteralLength() {\n+    debugCodeCall(\"getMaxBinaryLiteralLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for literals.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxCharLiteralLength() {\n+    debugCodeCall(\"getMaxCharLiteralLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for column names.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnNameLength() {\n+    debugCodeCall(\"getMaxColumnNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of columns in GROUP BY.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnsInGroupBy() {\n+    debugCodeCall(\"getMaxColumnsInGroupBy\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of columns in CREATE INDEX.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnsInIndex() {\n+    debugCodeCall(\"getMaxColumnsInIndex\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of columns in ORDER BY.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnsInOrderBy() {\n+    debugCodeCall(\"getMaxColumnsInOrderBy\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of columns in SELECT.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnsInSelect() {\n+    debugCodeCall(\"getMaxColumnsInSelect\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of columns in CREATE TABLE.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxColumnsInTable() {\n+    debugCodeCall(\"getMaxColumnsInTable\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of open connection.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxConnections() {\n+    debugCodeCall(\"getMaxConnections\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a cursor name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxCursorNameLength() {\n+    debugCodeCall(\"getMaxCursorNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for an index (in bytes).\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxIndexLength() {\n+    debugCodeCall(\"getMaxIndexLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a schema name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxSchemaNameLength() {\n+    debugCodeCall(\"getMaxSchemaNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a procedure name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxProcedureNameLength() {\n+    debugCodeCall(\"getMaxProcedureNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a catalog name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxCatalogNameLength() {\n+    debugCodeCall(\"getMaxCatalogNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum size of a row (in bytes).\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxRowSize() {\n+    debugCodeCall(\"getMaxRowSize\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length of a statement.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxStatementLength() {\n+    debugCodeCall(\"getMaxStatementLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of open statements.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxStatements() {\n+    debugCodeCall(\"getMaxStatements\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a table name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxTableNameLength() {\n+    debugCodeCall(\"getMaxTableNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum number of tables in a SELECT.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxTablesInSelect() {\n+    debugCodeCall(\"getMaxTablesInSelect\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Returns the maximum length for a user name.\n+   *\n+   * @return 0 for limit is unknown\n+   */\n+  @Override\n+  public int getMaxUserNameLength() {\n+    debugCodeCall(\"getMaxUserNameLength\");\n+    return 0;\n+  }\n+\n+  /**\n+   * Does the database support savepoints.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsSavepoints() {\n+    debugCodeCall(\"supportsSavepoints\");\n+    return true;\n+  }\n+\n+  /**\n+   * Does the database support named parameters.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsNamedParameters() {\n+    debugCodeCall(\"supportsNamedParameters\");\n+    return false;\n+  }\n+\n+  /**\n+   * Does the database support multiple open result sets.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsMultipleOpenResults() {\n+    debugCodeCall(\"supportsMultipleOpenResults\");\n+    return true;\n+  }\n+\n+  /**\n+   * Does the database support getGeneratedKeys.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsGetGeneratedKeys() {\n+    debugCodeCall(\"supportsGetGeneratedKeys\");\n+    return true;\n+  }\n+\n+  /**\n+   * [Not supported]\n+   */\n+  @Override\n+  public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                 String typeNamePattern) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getSuperTypes(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(typeNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Get the list of super tables of a table. This method currently returns an\n+   * empty result set.\n+   * <ol>\n+   * <li>TABLE_CAT (String) table catalog</li>\n+   * <li>TABLE_SCHEM (String) table schema</li>\n+   * <li>TABLE_NAME (String) table name</li>\n+   * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n+   * </ol>\n+   *\n+   * @param catalog          null (to get all objects) or the catalog name\n+   * @param schemaPattern    null (to get all objects) or a schema name\n+   *                         (uppercase for unquoted names)\n+   * @param tableNamePattern null (to get all objects) or a table name pattern\n+   *                         (uppercase for unquoted names)\n+   * @return an empty result set\n+   */\n+  @Override\n+  public ResultSet getSuperTables(String catalog, String schemaPattern,\n+                                  String tableNamePattern) throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getSuperTables(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(tableNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * [Not supported]\n+   */\n+  @Override\n+  public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                 String typeNamePattern,\n+                                 String attributeNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getAttributes(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(typeNamePattern) + \", \"\n+            + quote(attributeNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+              attributeNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Does this database supports a result set holdability.\n+   *\n+   * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n+   *                    CLOSE_CURSORS_AT_COMMIT\n+   * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n+   */\n+  @Override\n+  public boolean supportsResultSetHoldability(int holdability) {\n+    debugCodeCall(\"supportsResultSetHoldability\", holdability);\n+    return holdability == ResultSet.CLOSE_CURSORS_AT_COMMIT;\n+  }\n+\n+  /**\n+   * Gets the result set holdability.\n+   *\n+   * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n+   */\n+  @Override\n+  public int getResultSetHoldability() {\n+    debugCodeCall(\"getResultSetHoldability\");\n+    return ResultSet.CLOSE_CURSORS_AT_COMMIT;\n+  }\n+\n+  /**\n+   * Gets the major version of the database.\n+   *\n+   * @return the major version\n+   */\n+  @Override\n+  public int getDatabaseMajorVersion() throws SQLException {\n+    try {\n+      debugCodeCall(\"getDatabaseMajorVersion\");\n+      return meta.getDatabaseMajorVersion();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the minor version of the database.\n+   *\n+   * @return the minor version\n+   */\n+  @Override\n+  public int getDatabaseMinorVersion() throws SQLException {\n+    try {\n+      debugCodeCall(\"getDatabaseMinorVersion\");\n+      return meta.getDatabaseMinorVersion();\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Gets the major version of the supported JDBC API.\n+   *\n+   * @return the major version (4)\n+   */\n+  @Override\n+  public int getJDBCMajorVersion() {\n+    debugCodeCall(\"getJDBCMajorVersion\");\n+    return 4;\n+  }\n+\n+  /**\n+   * Gets the minor version of the supported JDBC API.\n+   *\n+   * @return the minor version (2)\n+   */\n+  @Override\n+  public int getJDBCMinorVersion() {\n+    debugCodeCall(\"getJDBCMinorVersion\");\n+    return 2;\n+  }\n+\n+  /**\n+   * Gets the SQL State type.\n+   *\n+   * @return {@link DatabaseMetaData#sqlStateSQL}\n+   */\n+  @Override\n+  public int getSQLStateType() {\n+    debugCodeCall(\"getSQLStateType\");\n+    return DatabaseMetaData.sqlStateSQL;\n+  }\n+\n+  /**\n+   * Does the database make a copy before updating.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean locatorsUpdateCopy() {\n+    debugCodeCall(\"locatorsUpdateCopy\");\n+    return false;\n+  }\n+\n+  /**\n+   * Does the database support statement pooling.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean supportsStatementPooling() {\n+    debugCodeCall(\"supportsStatementPooling\");\n+    return false;\n+  }\n+\n+  // =============================================================\n+\n+  private void checkClosed() {\n+    conn.checkClosed();\n+  }\n+\n+  /**\n+   * Get the lifetime of a rowid.\n+   *\n+   * @return ROWID_UNSUPPORTED\n+   */\n+  @Override\n+  public RowIdLifetime getRowIdLifetime() {\n+    debugCodeCall(\"getRowIdLifetime\");\n+    return RowIdLifetime.ROWID_UNSUPPORTED;\n+  }\n+\n+  /**\n+   * Gets the list of schemas in the database.\n+   * The result set is sorted by TABLE_SCHEM.\n+   *\n+   * <ol>\n+   * <li>TABLE_SCHEM (String) schema name</li>\n+   * <li>TABLE_CATALOG (String) catalog name</li>\n+   * </ol>\n+   *\n+   * @param catalogPattern null (to get all objects) or the catalog name\n+   * @param schemaPattern  null (to get all objects) or a schema name\n+   *                       (uppercase for unquoted names)\n+   * @return the schema list\n+   * @throws SQLException if the connection is closed\n+   */\n+  @Override\n+  public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n+      throws SQLException {\n+    try {\n+      debugCodeCall(\"getSchemas(String,String)\");\n+      return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns whether the database supports calling functions using the call\n+   * syntax.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean supportsStoredFunctionsUsingCallSyntax() {\n+    debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n+    return true;\n+  }\n+\n+  /**\n+   * Returns whether an exception while auto commit is on closes all result\n+   * sets.\n+   *\n+   * @return false\n+   */\n+  @Override\n+  public boolean autoCommitFailureClosesAllResultSets() {\n+    debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n+    return false;\n+  }\n+\n+  @Override\n+  public ResultSet getClientInfoProperties() throws SQLException {\n+    Properties clientInfo = conn.getClientInfo();\n+    SimpleResult result = new SimpleResult();\n+    result.addColumn(\"NAME\", TypeInfo.TYPE_VARCHAR);\n+    result.addColumn(\"MAX_LEN\", TypeInfo.TYPE_INTEGER);\n+    result.addColumn(\"DEFAULT_VALUE\", TypeInfo.TYPE_VARCHAR);\n+    result.addColumn(\"DESCRIPTION\", TypeInfo.TYPE_VARCHAR);\n+    // Non-standard column\n+    result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n+    for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n+      result.addRow(ValueVarchar.get((String) entry.getKey()),\n+          ValueInteger.get(Integer.MAX_VALUE),\n+          ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+          ValueVarchar.get((String) entry.getValue()));\n+    }\n+    int id = getNextId(TraceObject.RESULT_SET);\n+    if (isDebugEnabled()) {\n+      debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+          \"getClientInfoProperties()\");\n+    }\n+    return new JdbcResultSet(conn, null, null, result, id, true, false);\n+  }\n+\n+  /**\n+   * Return an object of this class if possible.\n+   *\n+   * @param iface the class\n+   * @return this\n+   */\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T unwrap(Class<T> iface) throws SQLException {\n+    try {\n+      if (isWrapperFor(iface)) {\n+        return (T) this;\n+      }\n+      throw DbException.getInvalidValueException(\"iface\", iface);\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if unwrap can return an object of this class.\n+   *\n+   * @param iface the class\n+   * @return whether or not the interface is assignable from this class\n+   */\n+  @Override\n+  public boolean isWrapperFor(Class<?> iface) throws SQLException {\n+    return iface != null && iface.isAssignableFrom(getClass());\n+  }\n+\n+  /**\n+   * [Not supported] Gets the list of function columns.\n+   */\n+  @Override\n+  public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n+                                      String functionNamePattern,\n+                                      String columnNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getFunctionColumns(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(functionNamePattern) + \", \"\n+            + quote(columnNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern,\n+              columnNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * [Not supported] Gets the list of functions.\n+   */\n+  @Override\n+  public ResultSet getFunctions(String catalog, String schemaPattern,\n+                                String functionNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getFunctions(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(functionNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * Returns whether database always returns generated keys if valid names or\n+   * indexes of columns were specified and command was completed successfully.\n+   *\n+   * @return true\n+   */\n+  @Override\n+  public boolean generatedKeyAlwaysReturned() {\n+    return true;\n+  }\n+\n+  /**\n+   * [Not supported]\n+   *\n+   * @param catalog           null (to get all objects) or the catalog name\n+   * @param schemaPattern     null (to get all objects) or a schema name\n+   *                          (uppercase for unquoted names)\n+   * @param tableNamePattern  null (to get all objects) or a table name\n+   *                          (uppercase for unquoted names)\n+   * @param columnNamePattern null (to get all objects) or a column name\n+   *                          (uppercase for unquoted names)\n+   */\n+  @Override\n+  public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                    String tableNamePattern,\n+                                    String columnNamePattern)\n+      throws SQLException {\n+    try {\n+      if (isDebugEnabled()) {\n+        debugCode(\"getPseudoColumns(\"\n+            + quote(catalog) + \", \"\n+            + quote(schemaPattern) + \", \"\n+            + quote(tableNamePattern) + \", \"\n+            + quote(columnNamePattern) + \");\");\n+      }\n+      return getResultSet(\n+          meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern,\n+              columnNamePattern));\n+    } catch (Exception e) {\n+      throw logAndConvert(e);\n+    }\n+  }\n+\n+  /**\n+   * INTERNAL\n+   */\n+  @Override\n+  public String toString() {\n+    return getTraceObjectName() + \": \" + conn;\n+  }\n+\n+  private JdbcResultSet getResultSet(ResultInterface result) {\n+    return new JdbcResultSet(conn, null, null, result,\n+        getNextId(TraceObject.RESULT_SET), false, false);\n+  }\n \n }\n",
            "diff_size": 3372
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..4f49bcbf2b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/197/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2761,4 +2761,4 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..f7a5e2595a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/197/JdbcDatabaseMetaData.java\n@@ -12,7 +12,6 @@ import java.sql.RowIdLifetime;\n import java.sql.SQLException;\n import java.util.Map.Entry;\n import java.util.Properties;\n-\n import org.h2.engine.Constants;\n import org.h2.engine.SessionInterface;\n import org.h2.jdbc.meta.DatabaseMeta;\n@@ -28,11 +27,11 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public class JdbcDatabaseMetaData extends TraceObject implements\n-        DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n-    private final JdbcConnection conn;\n \n+public class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+    private final JdbcConnection conn;\n     private final DatabaseMeta meta;\n \n     JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n@@ -46,6 +45,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version number\n      */\n+\n     @Override\n     public int getDriverMajorVersion() {\n         debugCodeCall(\"getDriverMajorVersion\");\n@@ -57,6 +57,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version number\n      */\n+\n     @Override\n     public int getDriverMinorVersion() {\n         debugCodeCall(\"getDriverMinorVersion\");\n@@ -68,6 +69,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product name (\"H2\")\n      */\n+\n     @Override\n     public String getDatabaseProductName() {\n         debugCodeCall(\"getDatabaseProductName\");\n@@ -81,6 +83,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product version\n      */\n+\n     @Override\n     public String getDatabaseProductVersion() throws SQLException {\n         try {\n@@ -96,6 +99,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the driver name (\"H2 JDBC Driver\")\n      */\n+\n     @Override\n     public String getDriverName() {\n         debugCodeCall(\"getDriverName\");\n@@ -108,6 +112,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the version number\n      */\n+\n     @Override\n     public String getDriverVersion() {\n         debugCodeCall(\"getDriverVersion\");\n@@ -141,14 +146,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n-            throws SQLException {\n+    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n+                debugCode(\"getTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quoteArray(types) + \");\");\n             }\n             return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n         } catch (Exception e) {\n@@ -198,17 +204,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getColumns(catalog,\n+                                                schemaPattern,\n+                                                tableNamePattern,\n+                                                columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -248,14 +257,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n-            throws SQLException {\n+    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n-                        quote(schema) + \", \" + quote(table) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n+                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + unique + \", \"\n+                + approximate + \");\");\n             }\n             return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n         } catch (Exception e) {\n@@ -283,14 +294,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -303,6 +314,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allProceduresAreCallable() {\n         debugCodeCall(\"allProceduresAreCallable\");\n@@ -314,6 +326,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allTablesAreSelectable() {\n         debugCodeCall(\"allTablesAreSelectable\");\n@@ -325,6 +338,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the url\n      */\n+\n     @Override\n     public String getURL() throws SQLException {\n         try {\n@@ -341,6 +355,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the user name\n      */\n+\n     @Override\n     public String getUserName() throws SQLException {\n         try {\n@@ -356,6 +371,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return if read only optimization is switched on\n      */\n+\n     @Override\n     public boolean isReadOnly() throws SQLException {\n         try {\n@@ -372,6 +388,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return false by default; true if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n         try {\n@@ -388,6 +405,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true by default; false if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n         try {\n@@ -404,6 +422,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtStart() {\n         debugCodeCall(\"nullsAreSortedAtStart\");\n@@ -415,6 +434,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtEnd() {\n         debugCodeCall(\"nullsAreSortedAtEnd\");\n@@ -426,6 +446,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the connection\n      */\n+\n     @Override\n     public Connection getConnection() {\n         debugCodeCall(\"getConnection\");\n@@ -459,15 +480,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                debugCode(\"getProcedures(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \");\");\n             }\n             return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n         } catch (Exception e) {\n@@ -517,20 +537,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+            return getResultSet(meta.getProcedureColumns(catalog,\n+                                                         schemaPattern,\n+                                                         procedureNamePattern,\n+                                                         columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -548,6 +569,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getSchemas() throws SQLException {\n         try {\n@@ -569,6 +591,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the catalog list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getCatalogs() throws SQLException {\n         try {\n@@ -589,6 +612,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the table types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTableTypes() throws SQLException {\n         try {\n@@ -625,16 +649,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n         } catch (Exception e) {\n@@ -666,15 +689,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n-            throws SQLException {\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n@@ -708,16 +730,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n-            throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + scope + \", \"\n+                + nullable + \");\");\n             }\n             return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n         } catch (Exception e) {\n@@ -747,14 +769,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -793,14 +815,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -839,14 +861,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -891,21 +913,19 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \"\n+                + quote(primarySchema) + \", \"\n+                + quote(primaryTable) + \", \"\n+                + quote(foreignCatalog) + \", \"\n+                + quote(foreignSchema) + \", \"\n+                + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog, foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -932,16 +952,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                debugCode(\"getUDTs(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quoteIntArray(types) + \");\");\n             }\n             return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n         } catch (Exception e) {\n@@ -978,6 +997,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of data types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTypeInfo() throws SQLException {\n         try {\n@@ -993,6 +1013,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean usesLocalFiles() {\n         debugCodeCall(\"usesLocalFiles\");\n@@ -1004,6 +1025,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean usesLocalFilePerTable() {\n         debugCodeCall(\"usesLocalFilePerTable\");\n@@ -1015,6 +1037,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a double quote\n      */\n+\n     @Override\n     public String getIdentifierQuoteString() {\n         debugCodeCall(\"getIdentifierQuoteString\");\n@@ -1027,6 +1050,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a list of additional the keywords\n      */\n+\n     @Override\n     public String getSQLKeywords() throws SQLException {\n         try {\n@@ -1042,6 +1066,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getNumericFunctions() throws SQLException {\n         try {\n@@ -1057,6 +1082,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getStringFunctions() throws SQLException {\n         try {\n@@ -1072,6 +1098,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getSystemFunctions() throws SQLException {\n         try {\n@@ -1087,6 +1114,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getTimeDateFunctions() throws SQLException {\n         try {\n@@ -1104,6 +1132,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the default escape character (always '\\', independent on the\n      *         mode)\n      */\n+\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n         try {\n@@ -1120,6 +1149,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return an empty String (\"\")\n      */\n+\n     @Override\n     public String getExtraNameCharacters() {\n         debugCodeCall(\"getExtraNameCharacters\");\n@@ -1130,6 +1160,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether alter table with add column is supported.\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithAddColumn() {\n         debugCodeCall(\"supportsAlterTableWithAddColumn\");\n@@ -1141,6 +1172,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithDropColumn() {\n         debugCodeCall(\"supportsAlterTableWithDropColumn\");\n@@ -1152,6 +1184,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsColumnAliasing() {\n         debugCodeCall(\"supportsColumnAliasing\");\n@@ -1163,6 +1196,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean nullPlusNonNullIsNull() {\n         debugCodeCall(\"nullPlusNonNullIsNull\");\n@@ -1174,6 +1208,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert() {\n         debugCodeCall(\"supportsConvert\");\n@@ -1187,10 +1222,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param toType the target SQL type\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \"\n+            + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1200,6 +1237,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTableCorrelationNames() {\n         debugCodeCall(\"supportsTableCorrelationNames\");\n@@ -1212,6 +1250,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDifferentTableCorrelationNames() {\n         debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n@@ -1223,6 +1262,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsExpressionsInOrderBy() {\n         debugCodeCall(\"supportsExpressionsInOrderBy\");\n@@ -1235,6 +1275,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOrderByUnrelated() {\n         debugCodeCall(\"supportsOrderByUnrelated\");\n@@ -1246,6 +1287,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupBy() {\n         debugCodeCall(\"supportsGroupBy\");\n@@ -1258,6 +1300,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByUnrelated() {\n         debugCodeCall(\"supportsGroupByUnrelated\");\n@@ -1271,6 +1314,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByBeyondSelect() {\n         debugCodeCall(\"supportsGroupByBeyondSelect\");\n@@ -1282,6 +1326,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLikeEscapeClause() {\n         debugCodeCall(\"supportsLikeEscapeClause\");\n@@ -1293,6 +1338,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleResultSets() {\n         debugCodeCall(\"supportsMultipleResultSets\");\n@@ -1305,6 +1351,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleTransactions() {\n         debugCodeCall(\"supportsMultipleTransactions\");\n@@ -1316,6 +1363,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsNonNullableColumns() {\n         debugCodeCall(\"supportsNonNullableColumns\");\n@@ -1327,6 +1375,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMinimumSQLGrammar() {\n         debugCodeCall(\"supportsMinimumSQLGrammar\");\n@@ -1338,6 +1387,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCoreSQLGrammar() {\n         debugCodeCall(\"supportsCoreSQLGrammar\");\n@@ -1349,6 +1399,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsExtendedSQLGrammar() {\n         debugCodeCall(\"supportsExtendedSQLGrammar\");\n@@ -1360,6 +1411,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsANSI92EntryLevelSQL() {\n         debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n@@ -1371,6 +1423,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92IntermediateSQL() {\n         debugCodeCall(\"supportsANSI92IntermediateSQL\");\n@@ -1382,6 +1435,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92FullSQL() {\n         debugCodeCall(\"supportsANSI92FullSQL\");\n@@ -1393,6 +1447,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsIntegrityEnhancementFacility() {\n         debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n@@ -1404,6 +1459,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOuterJoins() {\n         debugCodeCall(\"supportsOuterJoins\");\n@@ -1415,6 +1471,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsFullOuterJoins() {\n         debugCodeCall(\"supportsFullOuterJoins\");\n@@ -1426,6 +1483,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLimitedOuterJoins() {\n         debugCodeCall(\"supportsLimitedOuterJoins\");\n@@ -1437,6 +1495,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"schema\"\n      */\n+\n     @Override\n     public String getSchemaTerm() {\n         debugCodeCall(\"getSchemaTerm\");\n@@ -1448,6 +1507,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"procedure\"\n      */\n+\n     @Override\n     public String getProcedureTerm() {\n         debugCodeCall(\"getProcedureTerm\");\n@@ -1459,6 +1519,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"catalog\"\n      */\n+\n     @Override\n     public String getCatalogTerm() {\n         debugCodeCall(\"getCatalogTerm\");\n@@ -1470,6 +1531,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean isCatalogAtStart() {\n         debugCodeCall(\"isCatalogAtStart\");\n@@ -1481,6 +1543,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \".\"\n      */\n+\n     @Override\n     public String getCatalogSeparator() {\n         debugCodeCall(\"getCatalogSeparator\");\n@@ -1492,6 +1555,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInDataManipulation() {\n         debugCodeCall(\"supportsSchemasInDataManipulation\");\n@@ -1503,6 +1567,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInProcedureCalls() {\n         debugCodeCall(\"supportsSchemasInProcedureCalls\");\n@@ -1514,6 +1579,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInTableDefinitions() {\n         debugCodeCall(\"supportsSchemasInTableDefinitions\");\n@@ -1525,6 +1591,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInIndexDefinitions() {\n         debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n@@ -1536,6 +1603,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n@@ -1547,6 +1615,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInDataManipulation() {\n         debugCodeCall(\"supportsCatalogsInDataManipulation\");\n@@ -1558,6 +1627,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsCatalogsInProcedureCalls() {\n         debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n@@ -1569,6 +1639,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInTableDefinitions() {\n         debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n@@ -1580,6 +1651,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInIndexDefinitions() {\n         debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n@@ -1591,6 +1663,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n@@ -1602,6 +1675,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedDelete() {\n         debugCodeCall(\"supportsPositionedDelete\");\n@@ -1613,6 +1687,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedUpdate() {\n         debugCodeCall(\"supportsPositionedUpdate\");\n@@ -1624,6 +1699,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSelectForUpdate() {\n         debugCodeCall(\"supportsSelectForUpdate\");\n@@ -1635,6 +1711,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStoredProcedures() {\n         debugCodeCall(\"supportsStoredProcedures\");\n@@ -1646,6 +1723,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInComparisons() {\n         debugCodeCall(\"supportsSubqueriesInComparisons\");\n@@ -1657,6 +1735,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInExists() {\n         debugCodeCall(\"supportsSubqueriesInExists\");\n@@ -1668,6 +1747,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInIns() {\n         debugCodeCall(\"supportsSubqueriesInIns\");\n@@ -1679,6 +1759,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInQuantifieds() {\n         debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n@@ -1690,6 +1771,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCorrelatedSubqueries() {\n         debugCodeCall(\"supportsCorrelatedSubqueries\");\n@@ -1701,6 +1783,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnion() {\n         debugCodeCall(\"supportsUnion\");\n@@ -1712,6 +1795,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnionAll() {\n         debugCodeCall(\"supportsUnionAll\");\n@@ -1723,6 +1807,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossCommit() {\n         debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n@@ -1734,6 +1819,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossRollback() {\n         debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n@@ -1745,6 +1831,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossCommit() {\n         debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n@@ -1756,6 +1843,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossRollback() {\n         debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n@@ -1767,6 +1855,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactions() {\n         debugCodeCall(\"supportsTransactions\");\n@@ -1779,6 +1868,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param level the transaction isolation level (Connection.TRANSACTION_*)\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n@@ -1800,6 +1890,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n         debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n@@ -1811,6 +1902,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsDataManipulationTransactionsOnly() {\n         debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n@@ -1822,6 +1914,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean dataDefinitionCausesTransactionCommit() {\n         debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n@@ -1833,6 +1926,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean dataDefinitionIgnoredInTransactions() {\n         debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n@@ -1846,6 +1940,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n      */\n+\n     @Override\n     public boolean supportsResultSetType(int type) {\n         debugCodeCall(\"supportsResultSetType\", type);\n@@ -1860,10 +1955,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n+\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \"\n+            + concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -1874,6 +1971,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true\n      */\n+\n     @Override\n     public boolean ownUpdatesAreVisible(int type) {\n         debugCodeCall(\"ownUpdatesAreVisible\", type);\n@@ -1886,6 +1984,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownDeletesAreVisible(int type) {\n         debugCodeCall(\"ownDeletesAreVisible\", type);\n@@ -1898,6 +1997,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownInsertsAreVisible(int type) {\n         debugCodeCall(\"ownInsertsAreVisible\", type);\n@@ -1910,6 +2010,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersUpdatesAreVisible(int type) {\n         debugCodeCall(\"othersUpdatesAreVisible\", type);\n@@ -1922,6 +2023,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersDeletesAreVisible(int type) {\n         debugCodeCall(\"othersDeletesAreVisible\", type);\n@@ -1934,6 +2036,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersInsertsAreVisible(int type) {\n         debugCodeCall(\"othersInsertsAreVisible\", type);\n@@ -1946,6 +2049,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean updatesAreDetected(int type) {\n         debugCodeCall(\"updatesAreDetected\", type);\n@@ -1958,6 +2062,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean deletesAreDetected(int type) {\n         debugCodeCall(\"deletesAreDetected\", type);\n@@ -1970,6 +2075,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean insertsAreDetected(int type) {\n         debugCodeCall(\"insertsAreDetected\", type);\n@@ -1981,6 +2087,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsBatchUpdates() {\n         debugCodeCall(\"supportsBatchUpdates\");\n@@ -1992,6 +2099,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean doesMaxRowSizeIncludeBlobs() {\n         debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n@@ -2003,6 +2111,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return Connection.TRANSACTION_READ_COMMITTED\n      */\n+\n     @Override\n     public int getDefaultTransactionIsolation() {\n         debugCodeCall(\"getDefaultTransactionIsolation\");\n@@ -2015,8 +2124,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2028,6 +2138,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesUpperCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseIdentifiers\");\n@@ -2040,6 +2151,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesLowerCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseIdentifiers\");\n@@ -2052,6 +2164,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n@@ -2065,6 +2178,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n@@ -2077,6 +2191,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n@@ -2089,6 +2204,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n@@ -2101,6 +2217,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n@@ -2112,6 +2229,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxBinaryLiteralLength() {\n         debugCodeCall(\"getMaxBinaryLiteralLength\");\n@@ -2123,6 +2241,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCharLiteralLength() {\n         debugCodeCall(\"getMaxCharLiteralLength\");\n@@ -2134,6 +2253,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnNameLength() {\n         debugCodeCall(\"getMaxColumnNameLength\");\n@@ -2145,6 +2265,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInGroupBy() {\n         debugCodeCall(\"getMaxColumnsInGroupBy\");\n@@ -2156,6 +2277,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInIndex() {\n         debugCodeCall(\"getMaxColumnsInIndex\");\n@@ -2167,6 +2289,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInOrderBy() {\n         debugCodeCall(\"getMaxColumnsInOrderBy\");\n@@ -2178,6 +2301,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInSelect() {\n         debugCodeCall(\"getMaxColumnsInSelect\");\n@@ -2189,6 +2313,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInTable() {\n         debugCodeCall(\"getMaxColumnsInTable\");\n@@ -2200,6 +2325,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxConnections() {\n         debugCodeCall(\"getMaxConnections\");\n@@ -2211,6 +2337,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCursorNameLength() {\n         debugCodeCall(\"getMaxCursorNameLength\");\n@@ -2222,6 +2349,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxIndexLength() {\n         debugCodeCall(\"getMaxIndexLength\");\n@@ -2233,6 +2361,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxSchemaNameLength() {\n         debugCodeCall(\"getMaxSchemaNameLength\");\n@@ -2244,6 +2373,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxProcedureNameLength() {\n         debugCodeCall(\"getMaxProcedureNameLength\");\n@@ -2255,6 +2385,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCatalogNameLength() {\n         debugCodeCall(\"getMaxCatalogNameLength\");\n@@ -2266,6 +2397,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxRowSize() {\n         debugCodeCall(\"getMaxRowSize\");\n@@ -2277,6 +2409,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatementLength() {\n         debugCodeCall(\"getMaxStatementLength\");\n@@ -2288,6 +2421,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatements() {\n         debugCodeCall(\"getMaxStatements\");\n@@ -2299,6 +2433,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTableNameLength() {\n         debugCodeCall(\"getMaxTableNameLength\");\n@@ -2310,6 +2445,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTablesInSelect() {\n         debugCodeCall(\"getMaxTablesInSelect\");\n@@ -2321,6 +2457,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxUserNameLength() {\n         debugCodeCall(\"getMaxUserNameLength\");\n@@ -2332,6 +2469,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSavepoints() {\n         debugCodeCall(\"supportsSavepoints\");\n@@ -2343,6 +2481,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsNamedParameters() {\n         debugCodeCall(\"supportsNamedParameters\");\n@@ -2354,6 +2493,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleOpenResults() {\n         debugCodeCall(\"supportsMultipleOpenResults\");\n@@ -2365,6 +2505,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGetGeneratedKeys() {\n         debugCodeCall(\"supportsGetGeneratedKeys\");\n@@ -2374,14 +2515,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n         } catch (Exception e) {\n@@ -2406,15 +2547,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            (uppercase for unquoted names)\n      * @return an empty result set\n      */\n+\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n         } catch (Exception e) {\n@@ -2425,18 +2565,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quote(attributeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(meta.getAttributes(catalog,\n+                                                   schemaPattern,\n+                                                   typeNamePattern,\n+                                                   attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2449,6 +2591,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public boolean supportsResultSetHoldability(int holdability) {\n         debugCodeCall(\"supportsResultSetHoldability\", holdability);\n@@ -2460,6 +2603,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public int getResultSetHoldability() {\n         debugCodeCall(\"getResultSetHoldability\");\n@@ -2471,6 +2615,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version\n      */\n+\n     @Override\n     public int getDatabaseMajorVersion() throws SQLException {\n         try {\n@@ -2486,6 +2631,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version\n      */\n+\n     @Override\n     public int getDatabaseMinorVersion() throws SQLException {\n         try {\n@@ -2501,6 +2647,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version (4)\n      */\n+\n     @Override\n     public int getJDBCMajorVersion() {\n         debugCodeCall(\"getJDBCMajorVersion\");\n@@ -2512,6 +2659,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version (2)\n      */\n+\n     @Override\n     public int getJDBCMinorVersion() {\n         debugCodeCall(\"getJDBCMinorVersion\");\n@@ -2523,6 +2671,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return {@link DatabaseMetaData#sqlStateSQL}\n      */\n+\n     @Override\n     public int getSQLStateType() {\n         debugCodeCall(\"getSQLStateType\");\n@@ -2534,6 +2683,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean locatorsUpdateCopy() {\n         debugCodeCall(\"locatorsUpdateCopy\");\n@@ -2545,6 +2695,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStatementPooling() {\n         debugCodeCall(\"supportsStatementPooling\");\n@@ -2562,6 +2713,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ROWID_UNSUPPORTED\n      */\n+\n     @Override\n     public RowIdLifetime getRowIdLifetime() {\n         debugCodeCall(\"getRowIdLifetime\");\n@@ -2583,9 +2735,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n+    public ResultSet getSchemas(String catalogPattern, String schemaPattern) throws SQLException {\n         try {\n             debugCodeCall(\"getSchemas(String,String)\");\n             return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n@@ -2600,6 +2752,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsStoredFunctionsUsingCallSyntax() {\n         debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n@@ -2612,6 +2765,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean autoCommitFailureClosesAllResultSets() {\n         debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n@@ -2629,12 +2783,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE), ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\",\n+                TraceObject.RESULT_SET,\n+                    id,\n+                \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2645,6 +2801,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return this\n      */\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n@@ -2664,6 +2821,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return whether or not the interface is assignable from this class\n      */\n+\n     @Override\n     public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface != null && iface.isAssignableFrom(getClass());\n@@ -2672,20 +2830,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of function columns.\n      */\n+\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+            return getResultSet(meta.getFunctionColumns(catalog,\n+                                                        schemaPattern,\n+                                                        functionNamePattern,\n+                                                        columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2694,15 +2852,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of functions.\n      */\n+\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \");\");\n             }\n             return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n         } catch (Exception e) {\n@@ -2716,6 +2873,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean generatedKeyAlwaysReturned() {\n         return true;\n@@ -2732,18 +2890,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param columnNamePattern null (to get all objects) or a column name\n      *            (uppercase for unquoted names)\n      */\n+\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog,\n+                                                      schemaPattern,\n+                                                      tableNamePattern,\n+                                                      columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2752,13 +2912,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + conn;\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn,\n+            null,\n+                null,\n+                    result,\n+                        getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 346
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..5bfd79b6c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/197/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/197/JdbcDatabaseMetaData.java\nindex d78d4a53cc..5bfd79b6c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/197/JdbcDatabaseMetaData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/197/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        }
    ]
}