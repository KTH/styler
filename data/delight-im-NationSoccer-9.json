{
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "77",
                "column": "55",
                "severity": "error",
                "message": "'...' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n\t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n\t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler/9/ShaderProgramManager.java\nindex 7436f35c7f..bfcb241b3e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler/9/ShaderProgramManager.java\n@@ -74,7 +74,7 @@ public class ShaderProgramManager {\n \t\t}\n \t}\n \n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n+\tpublic void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n \t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n \t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/intellij/9/ShaderProgramManager.java\nindex 7436f35c7f..1b00b2f1b3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/intellij/9/ShaderProgramManager.java\n@@ -12,82 +12,99 @@ import org.andengine.util.debug.Debug;\n  * @since 12:55:26 - 11.08.2011\n  */\n public class ShaderProgramManager {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprivate final ArrayList<ShaderProgram> mShaderProgramsManaged = new ArrayList<ShaderProgram>();\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tpublic synchronized void onCreate() {\n-\t\tthis.loadShaderProgram(PositionColorTextureCoordinatesShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesUniformColorShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionColorShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesTextureSelectShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.getInstance());\n-\t}\n-\n-\tpublic synchronized void onDestroy() {\n-\t\tfinal ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n-\t\tfor (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n-\t\t\tmanagedShaderPrograms.get(i).setCompiled(false);\n-\t\t}\n-\n-\t\tthis.mShaderProgramsManaged.clear();\n-\t}\n-\n-\tpublic synchronized void loadShaderProgram(final ShaderProgram pShaderProgram) {\n-\t\tif (pShaderProgram == null) {\n-\t\t\tthrow new IllegalArgumentException(\"pShaderProgram must not be null!\");\n-\t\t}\n-\n-\t\tif (pShaderProgram.isCompiled()) {\n-\t\t\tDebug.w(\"Loading an already compiled \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'. '\" + pShaderProgram.getClass().getSimpleName() + \"' will be recompiled.\");\n-\n-\t\t\tpShaderProgram.setCompiled(false);\n-\t\t}\n-\n-\t\tif (this.mShaderProgramsManaged.contains(pShaderProgram)) {\n-\t\t\tDebug.w(\"Loading an already loaded \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'.\");\n-\t\t} else {\n-\t\t\tthis.mShaderProgramsManaged.add(pShaderProgram);\n-\t\t}\n-\t}\n-\n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n-\t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n-\t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n-\t\t}\n-\t}\n-\n-\tpublic synchronized void onReload() {\n-\t\tfinal ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n-\t\tfor (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n-\t\t\tmanagedShaderPrograms.get(i).setCompiled(false);\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    private final ArrayList<ShaderProgram> mShaderProgramsManaged =\n+        new ArrayList<ShaderProgram>();\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    public synchronized void onCreate() {\n+        this.loadShaderProgram(\n+            PositionColorTextureCoordinatesShaderProgram.getInstance());\n+        this.loadShaderProgram(\n+            PositionTextureCoordinatesShaderProgram.getInstance());\n+        this.loadShaderProgram(\n+            PositionTextureCoordinatesUniformColorShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionColorShaderProgram.getInstance());\n+        this.loadShaderProgram(\n+            PositionTextureCoordinatesTextureSelectShaderProgram.getInstance());\n+        this.loadShaderProgram(\n+            PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram\n+                .getInstance());\n+    }\n+\n+    public synchronized void onDestroy() {\n+        final ArrayList<ShaderProgram> managedShaderPrograms =\n+            this.mShaderProgramsManaged;\n+        for (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n+            managedShaderPrograms.get(i).setCompiled(false);\n+        }\n+\n+        this.mShaderProgramsManaged.clear();\n+    }\n+\n+    public synchronized void loadShaderProgram(\n+        final ShaderProgram pShaderProgram) {\n+        if (pShaderProgram == null) {\n+            throw new IllegalArgumentException(\n+                \"pShaderProgram must not be null!\");\n+        }\n+\n+        if (pShaderProgram.isCompiled()) {\n+            Debug.w(\"Loading an already compiled \" +\n+                ShaderProgram.class.getSimpleName() + \": '\" +\n+                pShaderProgram.getClass().getSimpleName() + \"'. '\" +\n+                pShaderProgram.getClass().getSimpleName() +\n+                \"' will be recompiled.\");\n+\n+            pShaderProgram.setCompiled(false);\n+        }\n+\n+        if (this.mShaderProgramsManaged.contains(pShaderProgram)) {\n+            Debug.w(\"Loading an already loaded \" +\n+                ShaderProgram.class.getSimpleName() + \": '\" +\n+                pShaderProgram.getClass().getSimpleName() + \"'.\");\n+        } else {\n+            this.mShaderProgramsManaged.add(pShaderProgram);\n+        }\n+    }\n+\n+    public void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n+        for (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n+            this.loadShaderProgram(pShaderPrograms[i]);\n+        }\n+    }\n+\n+    public synchronized void onReload() {\n+        final ArrayList<ShaderProgram> managedShaderPrograms =\n+            this.mShaderProgramsManaged;\n+        for (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n+            managedShaderPrograms.get(i).setCompiled(false);\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/naturalize/9/ShaderProgramManager.java\nindex 7436f35c7f..693ba77fc4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/naturalize/9/ShaderProgramManager.java\n@@ -74,7 +74,7 @@ public class ShaderProgramManager {\n \t\t}\n \t}\n \n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n+\tpublic void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n \t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n \t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n \t\t}\n@@ -90,4 +90,4 @@ public class ShaderProgramManager {\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/codebuff/9/ShaderProgramManager.java\nindex 7436f35c7f..54f4f3c6e0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/codebuff/9/ShaderProgramManager.java\n@@ -1,7 +1,6 @@\n package org.andengine.opengl.shader;\n \n import java.util.ArrayList;\n-\n import org.andengine.util.debug.Debug;\n \n \n@@ -11,83 +10,102 @@ import org.andengine.util.debug.Debug;\n  * @author Nicolas Gramlich\n  * @since 12:55:26 - 11.08.2011\n  */\n+\n+\n public class ShaderProgramManager {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprivate final ArrayList<ShaderProgram> mShaderProgramsManaged = new ArrayList<ShaderProgram>();\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tpublic synchronized void onCreate() {\n-\t\tthis.loadShaderProgram(PositionColorTextureCoordinatesShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesUniformColorShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionColorShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesTextureSelectShaderProgram.getInstance());\n-\t\tthis.loadShaderProgram(PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.getInstance());\n-\t}\n-\n-\tpublic synchronized void onDestroy() {\n-\t\tfinal ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n-\t\tfor (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n-\t\t\tmanagedShaderPrograms.get(i).setCompiled(false);\n-\t\t}\n-\n-\t\tthis.mShaderProgramsManaged.clear();\n-\t}\n-\n-\tpublic synchronized void loadShaderProgram(final ShaderProgram pShaderProgram) {\n-\t\tif (pShaderProgram == null) {\n-\t\t\tthrow new IllegalArgumentException(\"pShaderProgram must not be null!\");\n-\t\t}\n-\n-\t\tif (pShaderProgram.isCompiled()) {\n-\t\t\tDebug.w(\"Loading an already compiled \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'. '\" + pShaderProgram.getClass().getSimpleName() + \"' will be recompiled.\");\n-\n-\t\t\tpShaderProgram.setCompiled(false);\n-\t\t}\n-\n-\t\tif (this.mShaderProgramsManaged.contains(pShaderProgram)) {\n-\t\t\tDebug.w(\"Loading an already loaded \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'.\");\n-\t\t} else {\n-\t\t\tthis.mShaderProgramsManaged.add(pShaderProgram);\n-\t\t}\n-\t}\n-\n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n-\t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n-\t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n-\t\t}\n-\t}\n-\n-\tpublic synchronized void onReload() {\n-\t\tfinal ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n-\t\tfor (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n-\t\t\tmanagedShaderPrograms.get(i).setCompiled(false);\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+    private final ArrayList<ShaderProgram> mShaderProgramsManaged = new ArrayList<ShaderProgram>();\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+\n+    public synchronized void onCreate() {\n+        this.loadShaderProgram(PositionColorTextureCoordinatesShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionTextureCoordinatesShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionTextureCoordinatesUniformColorShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionColorShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionTextureCoordinatesTextureSelectShaderProgram.getInstance());\n+        this.loadShaderProgram(PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram.getInstance());\n+    }\n+\n+    public synchronized void onDestroy() {\n+        final ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n+\n+        for (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n+            managedShaderPrograms.get(i).setCompiled(false);\n+        }\n+\n+        this.mShaderProgramsManaged.clear();\n+    }\n+\n+    public synchronized void loadShaderProgram(final ShaderProgram pShaderProgram) {\n+        if (pShaderProgram == null) {\n+            throw new IllegalArgumentException(\"pShaderProgram must not be null!\");\n+        }\n+\n+        if (pShaderProgram.isCompiled()) {\n+            Debug.w(\"Loading an already compiled \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'. '\" + pShaderProgram.getClass().getSimpleName() + \"' will be recompiled.\");\n+            pShaderProgram.setCompiled(false);\n+        }\n+\n+        if (this.mShaderProgramsManaged.contains(pShaderProgram)) {\n+            Debug.w(\"Loading an already loaded \" + ShaderProgram.class.getSimpleName() + \": '\" + pShaderProgram.getClass().getSimpleName() + \"'.\");\n+        } else {\n+            this.mShaderProgramsManaged.add(pShaderProgram);\n+        }\n+    }\n+\n+    public void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n+        for (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n+            this.loadShaderProgram(pShaderPrograms[i]);\n+        }\n+    }\n+\n+    public synchronized void onReload() {\n+        final ArrayList<ShaderProgram> managedShaderPrograms = this.mShaderProgramsManaged;\n+\n+        for (int i = managedShaderPrograms.size() - 1; i >= 0; i--) {\n+            managedShaderPrograms.get(i).setCompiled(false);\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler_random/9/ShaderProgramManager.java\nindex 7436f35c7f..bfcb241b3e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler_random/9/ShaderProgramManager.java\n@@ -74,7 +74,7 @@ public class ShaderProgramManager {\n \t\t}\n \t}\n \n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n+\tpublic void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n \t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n \t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler_three_grams/9/ShaderProgramManager.java\nindex 7436f35c7f..bfcb241b3e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/errored/1/9/ShaderProgramManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/delight-im-NationSoccer/styler_three_grams/9/ShaderProgramManager.java\n@@ -74,7 +74,7 @@ public class ShaderProgramManager {\n \t\t}\n \t}\n \n-\tpublic void loadShaderPrograms(final ShaderProgram ... pShaderPrograms) {\n+\tpublic void loadShaderPrograms(final ShaderProgram... pShaderPrograms) {\n \t\tfor (int i = pShaderPrograms.length - 1; i >= 0; i--) {\n \t\t\tthis.loadShaderProgram(pShaderPrograms[i]);\n \t\t}\n",
            "diff_size": 1
        }
    ]
}