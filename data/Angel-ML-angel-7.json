{
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/7/MultinomialLogisticLoss.java\nindex 7aaf0a4a27..1fa9d15c56 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/7/MultinomialLogisticLoss.java\n@@ -24,94 +24,94 @@ import javax.inject.Singleton;\n @Singleton\n public class MultinomialLogisticLoss implements MultiLoss {\n \n-  private static MultinomialLogisticLoss instance;\n+    private static MultinomialLogisticLoss instance;\n \n-  private MultinomialLogisticLoss() {\n-  }\n-\n-  @Override\n-  public Kind getKind() {\n-    return Kind.MultiLogistic;\n-  }\n+    private MultinomialLogisticLoss() {\n+    }\n \n-  @Override\n-  public EvalMetric.Kind defaultEvalMetric() {\n-    return EvalMetric.Kind.CROSS_ENTROPY;\n-  }\n+    @Override\n+    public Kind getKind() {\n+        return Kind.MultiLogistic;\n+    }\n \n-  @Override\n-  public double[] firOrderGrad(float[] pred, float label) {\n-    double[] prob = Maths.floatArrayToDoubleArray(pred);\n-    Maths.softmax(prob);\n-    int trueLabel = (int) label;\n-    double[] grad = prob;\n-    for (int i = 0; i < grad.length; i++) {\n-      grad[i] = (trueLabel == i ? prob[i] - 1.0 : prob[i]);\n+    @Override\n+    public EvalMetric.Kind defaultEvalMetric() {\n+        return EvalMetric.Kind.CROSS_ENTROPY;\n     }\n-    return grad;\n-  }\n \n-  @Override\n-  public double[] secOrderGradDiag(float[] pred, float label) {\n-    double[] prob = Maths.floatArrayToDoubleArray(pred);\n-    Maths.softmax(prob);\n-    double[] hess = prob;\n-    for (int i = 0; i < hess.length; i++) {\n-      hess[i] = Math.max(prob[i] * (1.0f - prob[i]), Maths.EPSILON);\n+    @Override\n+    public double[] firOrderGrad(float[] pred, float label) {\n+        double[] prob = Maths.floatArrayToDoubleArray(pred);\n+        Maths.softmax(prob);\n+        int trueLabel = (int) label;\n+        double[] grad = prob;\n+        for (int i = 0; i < grad.length; i++) {\n+            grad[i] = (trueLabel == i ? prob[i] - 1.0 : prob[i]);\n+        }\n+        return grad;\n     }\n-    return hess;\n-  }\n \n-  @Override\n-  public double[] secOrderGradDiag(float[] pred, float label, double[] firGrad) {\n-    int trueLabel = (int) label;\n-    double[] hess = new double[pred.length];\n-    for (int i = 0; i < hess.length; i++) {\n-      double prob = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n-      hess[i] = Math.max(prob * (1.0 - prob), Maths.EPSILON);\n+    @Override\n+    public double[] secOrderGradDiag(float[] pred, float label) {\n+        double[] prob = Maths.floatArrayToDoubleArray(pred);\n+        Maths.softmax(prob);\n+        double[] hess = prob;\n+        for (int i = 0; i < hess.length; i++) {\n+            hess[i] = Math.max(prob[i] * (1.0f - prob[i]), Maths.EPSILON);\n+        }\n+        return hess;\n     }\n-    return hess;\n-  }\n \n-  @Override\n-  public double[] secOrderGradFull(float[] pred, float label) {\n-    double[] prob = Maths.floatArrayToDoubleArray(pred);\n-    Maths.softmax(prob);\n-    int numLabel = pred.length;\n-    double[] hess = new double[numLabel * (numLabel + 1) / 2];\n-    for (int i = 0; i < numLabel; i++) {\n-      int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n-      for (int j = 0; j < i; j++) {\n-        hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n-      }\n-      hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+    @Override\n+    public double[] secOrderGradDiag(float[] pred, float label, double[] firGrad) {\n+        int trueLabel = (int) label;\n+        double[] hess = new double[pred.length];\n+        for (int i = 0; i < hess.length; i++) {\n+            double prob = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n+            hess[i] = Math.max(prob * (1.0 - prob), Maths.EPSILON);\n+        }\n+        return hess;\n     }\n-    return hess;\n-  }\n \n-  @Override\n-  public double[] secOrderGradFull(float[] pred, float label, double[] firGrad) {\n-    int numLabel = pred.length;\n-    int trueLabel = (int) label;\n-    double[] prob = new double[numLabel];\n-    for (int i = 0; i < numLabel; i++) {\n-      prob[i] = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n+    @Override\n+    public double[] secOrderGradFull(float[] pred, float label) {\n+        double[] prob = Maths.floatArrayToDoubleArray(pred);\n+        Maths.softmax(prob);\n+        int numLabel = pred.length;\n+        double[] hess = new double[numLabel * (numLabel + 1) / 2];\n+        for (int i = 0; i < numLabel; i++) {\n+            int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n+            for (int j = 0; j < i; j++) {\n+                hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n+            }\n+            hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+        }\n+        return hess;\n     }\n-    double[] hess = new double[numLabel * (numLabel + 1) / 2];\n-    for (int i = 0; i < numLabel; i++) {\n-      int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n-      for (int j = 0; j < i; j++) {\n-        hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n-      }\n-      hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+\n+    @Override\n+    public double[] secOrderGradFull(float[] pred, float label, double[] firGrad) {\n+        int numLabel = pred.length;\n+        int trueLabel = (int) label;\n+        double[] prob = new double[numLabel];\n+        for (int i = 0; i < numLabel; i++) {\n+            prob[i] = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n+        }\n+        double[] hess = new double[numLabel * (numLabel + 1) / 2];\n+        for (int i = 0; i < numLabel; i++) {\n+            int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n+            for (int j = 0; j < i; j++) {\n+                hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n+            }\n+            hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+        }\n+        return hess;\n     }\n-    return hess;\n-  }\n \n-  public static MultinomialLogisticLoss getInstance() {\n-    if (instance == null) {\n-      instance = new MultinomialLogisticLoss();\n+    public static MultinomialLogisticLoss getInstance() {\n+        if (instance == null) {\n+            instance = new MultinomialLogisticLoss();\n+        }\n+        return instance;\n     }\n-    return instance;\n-  }\n }\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/7/MultinomialLogisticLoss.java\nindex 7aaf0a4a27..1d78b60aa4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/7/MultinomialLogisticLoss.java\n@@ -114,4 +114,4 @@ public class MultinomialLogisticLoss implements MultiLoss {\n     }\n     return instance;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/7/MultinomialLogisticLoss.java\nindex 7aaf0a4a27..3cd0628e0d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/7/MultinomialLogisticLoss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/7/MultinomialLogisticLoss.java\n@@ -21,97 +21,96 @@ import com.tencent.angel.spark.ml.tree.objective.metric.EvalMetric;\n import com.tencent.angel.spark.ml.tree.util.Maths;\n import javax.inject.Singleton;\n \n-@Singleton\n-public class MultinomialLogisticLoss implements MultiLoss {\n+@Singleton public class MultinomialLogisticLoss implements MultiLoss {\n+    private static MultinomialLogisticLoss instance;\n+    private MultinomialLogisticLoss() {}\n \n-  private static MultinomialLogisticLoss instance;\n-\n-  private MultinomialLogisticLoss() {\n-  }\n-\n-  @Override\n-  public Kind getKind() {\n+    @Override\n+    public Kind getKind() {\n     return Kind.MultiLogistic;\n-  }\n+    }\n \n-  @Override\n-  public EvalMetric.Kind defaultEvalMetric() {\n+    @Override\n+    public EvalMetric.Kind defaultEvalMetric() {\n     return EvalMetric.Kind.CROSS_ENTROPY;\n-  }\n+    }\n \n-  @Override\n-  public double[] firOrderGrad(float[] pred, float label) {\n+    @Override\n+    public double[] firOrderGrad(float[] pred, float label) {\n     double[] prob = Maths.floatArrayToDoubleArray(pred);\n     Maths.softmax(prob);\n+\n     int trueLabel = (int) label;\n     double[] grad = prob;\n     for (int i = 0; i < grad.length; i++) {\n-      grad[i] = (trueLabel == i ? prob[i] - 1.0 : prob[i]);\n+        grad[i] = (trueLabel == i ? prob[i] - 1.0 : prob[i]);\n     }\n     return grad;\n-  }\n+    }\n \n-  @Override\n-  public double[] secOrderGradDiag(float[] pred, float label) {\n+    @Override\n+    public double[] secOrderGradDiag(float[] pred, float label) {\n     double[] prob = Maths.floatArrayToDoubleArray(pred);\n     Maths.softmax(prob);\n     double[] hess = prob;\n     for (int i = 0; i < hess.length; i++) {\n-      hess[i] = Math.max(prob[i] * (1.0f - prob[i]), Maths.EPSILON);\n+        hess[i] = Math.max(prob[i] * (1.0f - prob[i]), Maths.EPSILON);\n     }\n     return hess;\n-  }\n+    }\n \n-  @Override\n-  public double[] secOrderGradDiag(float[] pred, float label, double[] firGrad) {\n+    @Override\n+    public double[] secOrderGradDiag(float[] pred, float label, double[] firGrad) {\n     int trueLabel = (int) label;\n     double[] hess = new double[pred.length];\n     for (int i = 0; i < hess.length; i++) {\n-      double prob = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n-      hess[i] = Math.max(prob * (1.0 - prob), Maths.EPSILON);\n+        double prob = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n+        hess[i] = Math.max(prob * (1.0 - prob), Maths.EPSILON);\n     }\n     return hess;\n-  }\n+    }\n \n-  @Override\n-  public double[] secOrderGradFull(float[] pred, float label) {\n+    @Override\n+    public double[] secOrderGradFull(float[] pred, float label) {\n     double[] prob = Maths.floatArrayToDoubleArray(pred);\n     Maths.softmax(prob);\n+\n     int numLabel = pred.length;\n     double[] hess = new double[numLabel * (numLabel + 1) / 2];\n     for (int i = 0; i < numLabel; i++) {\n-      int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n-      for (int j = 0; j < i; j++) {\n-        hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n-      }\n-      hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+        int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n+        for (int j = 0; j < i; j++) {\n+                                           hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n+        }\n+        hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n     }\n     return hess;\n-  }\n+    }\n \n-  @Override\n-  public double[] secOrderGradFull(float[] pred, float label, double[] firGrad) {\n+    @Override\n+    public double[] secOrderGradFull(float[] pred, float label, double[] firGrad) {\n     int numLabel = pred.length;\n     int trueLabel = (int) label;\n     double[] prob = new double[numLabel];\n     for (int i = 0; i < numLabel; i++) {\n-      prob[i] = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n+        prob[i] = trueLabel == i ? firGrad[i] + 1.0 : firGrad[i];\n     }\n+\n     double[] hess = new double[numLabel * (numLabel + 1) / 2];\n     for (int i = 0; i < numLabel; i++) {\n-      int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n-      for (int j = 0; j < i; j++) {\n-        hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n-      }\n-      hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n+        int rowI = Maths.indexOfLowerTriangularMatrix(i, 0);\n+        for (int j = 0; j < i; j++) {\n+                                           hess[rowI + j] = Math.min(-prob[i] * prob[j], -Maths.EPSILON);\n+        }\n+        hess[rowI + i] = Math.max(prob[i] * (1.0 - prob[i]), Maths.EPSILON);\n     }\n     return hess;\n-  }\n+    }\n \n-  public static MultinomialLogisticLoss getInstance() {\n+    public static MultinomialLogisticLoss getInstance() {\n     if (instance == null) {\n-      instance = new MultinomialLogisticLoss();\n+        instance = new MultinomialLogisticLoss();\n     }\n     return instance;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}