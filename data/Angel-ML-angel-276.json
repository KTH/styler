{
    "error_id": "276",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/276/NettyUtils.java\nindex c2f1b7d5c2..658a2d2a80 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/276/NettyUtils.java\n@@ -55,103 +55,116 @@ import java.util.concurrent.ThreadFactory;\n  * Utilities for creating various Netty constructs based on whether we're using EPOLL or NIO.\n  */\n public class NettyUtils {\n-  /** Creates a new ThreadFactory which prefixes each thread with the given name. */\n-  public static ThreadFactory createThreadFactory(String threadPoolPrefix) {\n-    return new DefaultThreadFactory(threadPoolPrefix, true);\n-  }\n+    /**\n+     * Creates a new ThreadFactory which prefixes each thread with the given name.\n+     */\n+    public static ThreadFactory createThreadFactory(String threadPoolPrefix) {\n+        return new DefaultThreadFactory(threadPoolPrefix, true);\n+    }\n \n-  /** Creates a Netty EventLoopGroup based on the IOMode. */\n-  public static EventLoopGroup createEventLoop(IOMode mode, int numThreads, String threadPrefix) {\n-    ThreadFactory threadFactory = createThreadFactory(threadPrefix);\n+    /**\n+     * Creates a Netty EventLoopGroup based on the IOMode.\n+     */\n+    public static EventLoopGroup createEventLoop(IOMode mode, int numThreads, String threadPrefix) {\n+        ThreadFactory threadFactory = createThreadFactory(threadPrefix);\n \n-    switch (mode) {\n-      case NIO:\n-        return new NioEventLoopGroup(numThreads, threadFactory);\n-      case EPOLL:\n-        return new EpollEventLoopGroup(numThreads, threadFactory);\n-      default:\n-        throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+        switch (mode) {\n+            case NIO:\n+                return new NioEventLoopGroup(numThreads, threadFactory);\n+            case EPOLL:\n+                return new EpollEventLoopGroup(numThreads, threadFactory);\n+            default:\n+                throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+        }\n     }\n-  }\n \n-  /** Returns the correct (client) SocketChannel class based on IOMode. */\n-  public static Class<? extends Channel> getClientChannelClass(IOMode mode) {\n-    switch (mode) {\n-      case NIO:\n-        return NioSocketChannel.class;\n-      case EPOLL:\n-        return EpollSocketChannel.class;\n-      default:\n-        throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+    /**\n+     * Returns the correct (client) SocketChannel class based on IOMode.\n+     */\n+    public static Class<? extends Channel> getClientChannelClass(IOMode mode) {\n+        switch (mode) {\n+            case NIO:\n+                return NioSocketChannel.class;\n+            case EPOLL:\n+                return EpollSocketChannel.class;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+        }\n     }\n-  }\n \n-  /** Returns the correct ServerSocketChannel class based on IOMode. */\n-  public static Class<? extends ServerChannel> getServerChannelClass(IOMode mode) {\n-    switch (mode) {\n-      case NIO:\n-        return NioServerSocketChannel.class;\n-      case EPOLL:\n-        return EpollServerSocketChannel.class;\n-      default:\n-        throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+    /**\n+     * Returns the correct ServerSocketChannel class based on IOMode.\n+     */\n+    public static Class<? extends ServerChannel> getServerChannelClass(IOMode mode) {\n+        switch (mode) {\n+            case NIO:\n+                return NioServerSocketChannel.class;\n+            case EPOLL:\n+                return EpollServerSocketChannel.class;\n+            default:\n+                throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n+        }\n     }\n-  }\n \n-  /**\n-   * Creates a LengthFieldBasedFrameDecoder where the first 8 bytes are the length of the frame.\n-   * This is used before all decoders.\n-   */\n-  public static ByteToMessageDecoder createFrameDecoder() {\n-    // maxFrameLength = 2G\n-    // lengthFieldOffset = 0\n-    // lengthFieldLength = 8\n-    // lengthAdjustment = -8, i.e. exclude the 8 byte length itself\n-    // initialBytesToStrip = 8, i.e. strip out the length field itself\n-    return new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 8, -8, 8);\n-  }\n+    /**\n+     * Creates a LengthFieldBasedFrameDecoder where the first 8 bytes are the length of the frame.\n+     * This is used before all decoders.\n+     */\n+    public static ByteToMessageDecoder createFrameDecoder() {\n+        // maxFrameLength = 2G\n+        // lengthFieldOffset = 0\n+        // lengthFieldLength = 8\n+        // lengthAdjustment = -8, i.e. exclude the 8 byte length itself\n+        // initialBytesToStrip = 8, i.e. strip out the length field itself\n+        return new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 8, -8, 8);\n+    }\n \n-  /** Returns the remote address on the channel or \"&lt;unknown remote&gt;\" if none exists. */\n-  public static String getRemoteAddress(Channel channel) {\n-    if (channel != null && channel.remoteAddress() != null) {\n-      return channel.remoteAddress().toString();\n+    /**\n+     * Returns the remote address on the channel or \"&lt;unknown remote&gt;\" if none exists.\n+     */\n+    public static String getRemoteAddress(Channel channel) {\n+        if (channel != null && channel.remoteAddress() != null) {\n+            return channel.remoteAddress().toString();\n+        }\n+        return \"<unknown remote>\";\n     }\n-    return \"<unknown remote>\";\n-  }\n \n-  /**\n-   * Create a pooled ByteBuf allocator but disables the thread-local cache. Thread-local caches\n-   * are disabled for TransportClients because the ByteBufs are allocated by the event loop thread,\n-   * but released by the executor thread rather than the event loop thread. Those thread-local\n-   * caches actually delay the recycling of buffers, leading to larger memory usage.\n-   */\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(\n-      boolean allowDirectBufs,\n-      boolean allowCache,\n-      int numCores) {\n-    if (numCores == 0) {\n-      numCores = Runtime.getRuntime().availableProcessors();\n+    /**\n+     * Create a pooled ByteBuf allocator but disables the thread-local cache. Thread-local caches\n+     * are disabled for TransportClients because the ByteBufs are allocated by the event loop thread,\n+     * but released by the executor thread rather than the event loop thread. Those thread-local\n+     * caches actually delay the recycling of buffers, leading to larger memory usage.\n+     */\n+    public static PooledByteBufAllocator createPooledByteBufAllocator(\n+            boolean allowDirectBufs,\n+            boolean allowCache,\n+            int numCores) {\n+        if (numCores == 0) {\n+            numCores = Runtime.getRuntime().availableProcessors();\n+        }\n+        return new PooledByteBufAllocator(\n+                allowDirectBufs && PlatformDependent.directBufferPreferred(),\n+                Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores),\n+                Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"),\n+                        allowDirectBufs ? numCores : 0),\n+                getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"),\n+                getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n+                allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n+                allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n+                allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0\n+        );\n     }\n-    return new PooledByteBufAllocator(\n-        allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n-        getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"),\n-        getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n-        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0\n-    );\n-  }\n \n-  /** Used to get defaults from Netty's private static fields. */\n-  private static int getPrivateStaticField(String name) {\n-    try {\n-      Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n-      f.setAccessible(true);\n-      return f.getInt(null);\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n+    /**\n+     * Used to get defaults from Netty's private static fields.\n+     */\n+    private static int getPrivateStaticField(String name) {\n+        try {\n+            Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n+            f.setAccessible(true);\n+            return f.getInt(null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/276/NettyUtils.java\nindex c2f1b7d5c2..7ed25f55f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/276/NettyUtils.java\n@@ -63,8 +63,7 @@ public class NettyUtils {\n   /** Creates a Netty EventLoopGroup based on the IOMode. */\n   public static EventLoopGroup createEventLoop(IOMode mode, int numThreads, String threadPrefix) {\n     ThreadFactory threadFactory = createThreadFactory(threadPrefix);\n-\n-    switch (mode) {\n+switch (mode) {\n       case NIO:\n         return new NioEventLoopGroup(numThreads, threadFactory);\n       case EPOLL:\n@@ -125,23 +124,16 @@ public class NettyUtils {\n    * but released by the executor thread rather than the event loop thread. Those thread-local\n    * caches actually delay the recycling of buffers, leading to larger memory usage.\n    */\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(\n-      boolean allowDirectBufs,\n-      boolean allowCache,\n+  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs, boolean allowCache,\n       int numCores) {\n-    if (numCores == 0) {\n+  if (numCores == 0) {\n       numCores = Runtime.getRuntime().availableProcessors();\n     }\n     return new PooledByteBufAllocator(\n-        allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n+        allowDirectBufs && PlatformDependent.directBufferPreferred(), Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n         getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"),\n         getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n-        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0\n-    );\n+        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n   }\n \n   /** Used to get defaults from Netty's private static fields. */\n@@ -154,4 +146,4 @@ public class NettyUtils {\n       throw new RuntimeException(e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 60.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 93.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 120.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 134.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 554).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 143.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/276/NettyUtils.java\nindex c2f1b7d5c2..40b5017943 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/276/NettyUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/276/NettyUtils.java\n@@ -47,77 +47,82 @@ import io.netty.handler.codec.ByteToMessageDecoder;\n import io.netty.handler.codec.LengthFieldBasedFrameDecoder;\n import io.netty.util.concurrent.DefaultThreadFactory;\n import io.netty.util.internal.PlatformDependent;\n-\n import java.lang.reflect.Field;\n import java.util.concurrent.ThreadFactory;\n \n /**\n  * Utilities for creating various Netty constructs based on whether we're using EPOLL or NIO.\n  */\n+\n public class NettyUtils {\n   /** Creates a new ThreadFactory which prefixes each thread with the given name. */\n-  public static ThreadFactory createThreadFactory(String threadPoolPrefix) {\n+\n+    public static ThreadFactory createThreadFactory(String threadPoolPrefix) {\n     return new DefaultThreadFactory(threadPoolPrefix, true);\n-  }\n+    }\n \n   /** Creates a Netty EventLoopGroup based on the IOMode. */\n-  public static EventLoopGroup createEventLoop(IOMode mode, int numThreads, String threadPrefix) {\n-    ThreadFactory threadFactory = createThreadFactory(threadPrefix);\n \n+    public static EventLoopGroup createEventLoop(IOMode mode, int numThreads, String threadPrefix) {\n+    ThreadFactory threadFactory = createThreadFactory(threadPrefix);\n     switch (mode) {\n-      case NIO:\n+        case NIO:\n         return new NioEventLoopGroup(numThreads, threadFactory);\n-      case EPOLL:\n+        case EPOLL:\n         return new EpollEventLoopGroup(numThreads, threadFactory);\n-      default:\n+        default:\n         throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n     }\n-  }\n+    }\n \n   /** Returns the correct (client) SocketChannel class based on IOMode. */\n-  public static Class<? extends Channel> getClientChannelClass(IOMode mode) {\n+\n+    public static Class<? extends Channel> getClientChannelClass(IOMode mode) {\n     switch (mode) {\n-      case NIO:\n+        case NIO:\n         return NioSocketChannel.class;\n-      case EPOLL:\n+        case EPOLL:\n         return EpollSocketChannel.class;\n-      default:\n+        default:\n         throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n     }\n-  }\n+    }\n \n   /** Returns the correct ServerSocketChannel class based on IOMode. */\n-  public static Class<? extends ServerChannel> getServerChannelClass(IOMode mode) {\n+\n+    public static Class<? extends ServerChannel> getServerChannelClass(IOMode mode) {\n     switch (mode) {\n-      case NIO:\n+        case NIO:\n         return NioServerSocketChannel.class;\n-      case EPOLL:\n+        case EPOLL:\n         return EpollServerSocketChannel.class;\n-      default:\n+        default:\n         throw new IllegalArgumentException(\"Unknown io mode: \" + mode);\n     }\n-  }\n+    }\n \n   /**\n    * Creates a LengthFieldBasedFrameDecoder where the first 8 bytes are the length of the frame.\n    * This is used before all decoders.\n    */\n-  public static ByteToMessageDecoder createFrameDecoder() {\n+\n+    public static ByteToMessageDecoder createFrameDecoder() {\n     // maxFrameLength = 2G\n     // lengthFieldOffset = 0\n     // lengthFieldLength = 8\n     // lengthAdjustment = -8, i.e. exclude the 8 byte length itself\n     // initialBytesToStrip = 8, i.e. strip out the length field itself\n     return new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 8, -8, 8);\n-  }\n+    }\n \n   /** Returns the remote address on the channel or \"&lt;unknown remote&gt;\" if none exists. */\n-  public static String getRemoteAddress(Channel channel) {\n+\n+    public static String getRemoteAddress(Channel channel) {\n     if (channel != null && channel.remoteAddress() != null) {\n-      return channel.remoteAddress().toString();\n+        return channel.remoteAddress().toString();\n     }\n     return \"<unknown remote>\";\n-  }\n+    }\n \n   /**\n    * Create a pooled ByteBuf allocator but disables the thread-local cache. Thread-local caches\n@@ -125,33 +130,23 @@ public class NettyUtils {\n    * but released by the executor thread rather than the event loop thread. Those thread-local\n    * caches actually delay the recycling of buffers, leading to larger memory usage.\n    */\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(\n-      boolean allowDirectBufs,\n-      boolean allowCache,\n-      int numCores) {\n+\n+    public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs, boolean allowCache, int numCores) {\n     if (numCores == 0) {\n-      numCores = Runtime.getRuntime().availableProcessors();\n+        numCores = Runtime.getRuntime().availableProcessors();\n+    }\n+    return new PooledByteBufAllocator(allowDirectBufs && PlatformDependent.directBufferPreferred(), Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0), getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"), allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n     }\n-    return new PooledByteBufAllocator(\n-        allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n-        getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"),\n-        getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n-        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0\n-    );\n-  }\n \n   /** Used to get defaults from Netty's private static fields. */\n-  private static int getPrivateStaticField(String name) {\n+\n+    private static int getPrivateStaticField(String name) {\n     try {\n-      Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n-      f.setAccessible(true);\n-      return f.getInt(null);\n+        Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n+        f.setAccessible(true);\n+        return f.getInt(null);\n     } catch (Exception e) {\n       throw new RuntimeException(e);\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}