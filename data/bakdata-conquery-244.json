{
    "error_id": "244",
    "information": {
        "errors": [
            {
                "line": "73",
                "severity": "warning",
                "message": "trailing whitespaces",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t\t/*\n\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n\t\t */\n\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/244/RelativeFormQueryPlan.java\nindex 02be47d516..ba17feef10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/244/RelativeFormQueryPlan.java\n@@ -67,7 +67,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t\n+\n \t\t/*\n \t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n \t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n@@ -124,7 +124,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tresult[3] = value[3];\n \t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n \t}\n-\t\n+\n \tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n \t\t// copy everything up to including index\n \t\tfor (int i = 0; i < 3; i++) {\n@@ -155,11 +155,11 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \tpublic boolean isOfInterest(Entity entity) {\n \t\treturn query.isOfInterest(entity);\n \t}\n-\t\n+\n \t@AllArgsConstructor\n \tprivate static class SubResult {\n \t\tprivate MultilineContainedEntityResult result;\n-\t\t\n+\n \t\tpublic List<Object[]> getValues() {\n \t\t\treturn result.getValues();\n \t\t}\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/244/RelativeFormQueryPlan.java\nindex 02be47d516..22428f2d89 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/244/RelativeFormQueryPlan.java\n@@ -26,142 +26,143 @@ import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n-@Getter @RequiredArgsConstructor\n+@Getter\n+@RequiredArgsConstructor\n public class RelativeFormQueryPlan implements QueryPlan {\n \n-\tprivate final ConceptQueryPlan query;\n-\tprivate final ArrayConceptQueryPlan featurePlan;\n-\tprivate final ArrayConceptQueryPlan outcomePlan;\n-\tprivate final TemporalSampler indexSelector;\n-\tprivate final IndexPlacement indexPlacement;\n-\tprivate final int timeCountBefore;\n-\tprivate final int timeCountAfter;\n-\tprivate final DateContextMode timeUnit;\n-\tprivate final List<DateContextMode> resolutions;\n-\n-\t@Override\n-\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n-\t\tEntityResult preResult = query.execute(ctx, entity);\n-\t\tif (preResult.isFailed() || !preResult.isContained()) {\n-\t\t\treturn preResult;\n-\t\t}\n-\n-\t\tSinglelineContainedEntityResult contained = (SinglelineContainedEntityResult) preResult;\n-\t\tCDateSet dateSet = CDateSet.parse(Objects.toString(contained.getValues()[0]));\n-\t\tfinal OptionalInt sampled = indexSelector.sample(dateSet);\n-\n-\t\t// dateset is empty or sampling failed.\n-\t\tif (!sampled.isPresent()) {\n-\t\t\tlog.warn(\"Sampled empty result for Entity[{}]: `{}({})`\", contained.getEntityId(), indexSelector, dateSet);\n-\t\t\treturn preResult;\n-\t\t}\n-\n-\t\tint sample = sampled.getAsInt();\n-\t\tList<DateContext> contexts = DateContext\n-\t\t\t.generateRelativeContexts(sample, indexPlacement, timeCountBefore, timeCountAfter, timeUnit, resolutions);\n-\n-\t\tSubResult featureResult = executeSubQuery(ctx, FeatureGroup.FEATURE, entity, contexts);\n-\t\tSubResult outcomeResult = executeSubQuery(ctx, FeatureGroup.OUTCOME, entity, contexts);\n-\n-\t\tList<Object[]> values = new ArrayList<>();\n-\t\t// We look at the first result line to determine the length of the subresult\n-\t\tint featureLength = featureResult.getValues().get(0).length;\n-\t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t\n-\t\t/*\n-\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n-\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n-\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n-\t\t */\n-\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n-\n-\t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n-\t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n-\t\t\t// which would be a mistake by the generation\n-\t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n-\t\t\t// to indexes of the list.\n-\t\t\tObject[] mergedFull = new Object[size];\n-\t\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(resultStartIndex));\n-\t\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(resultStartIndex), featureLength);\n-\t\t\tvalues.add(mergedFull);\n-\t\t\tresultStartIndex++;\n-\t\t}\n-\n-\t\t// append all other lines directly\n-\t\tfor (int i = resultStartIndex; i < featureResult.getValues().size(); i++) {\n-\t\t\tObject[] result = new Object[size];\n-\t\t\tsetFeatureValues(result, featureResult.getValues().get(i));\n-\t\t\tvalues.add(result);\n-\t\t}\n-\t\tfor (int i = resultStartIndex; i < outcomeResult.getValues().size(); i++) {\n-\t\t\tObject[] result = new Object[size];\n-\t\t\tsetOutcomeValues(result, outcomeResult.getValues().get(i), featureLength);\n-\t\t\tvalues.add(result);\n-\t\t}\n-\t\treturn EntityResult.multilineOf(entity.getId(), values);\n-\t}\n-\n-\tprivate SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featureGroup, Entity entity, List<DateContext> contexts) {\n-\t\tList<DateContext> list = new ArrayList<>(contexts);\n-\t\tlist.removeIf(dctx -> dctx.getFeatureGroup() != featureGroup);\n-\n-\t\tArrayConceptQueryPlan subPlan = featureGroup == FeatureGroup.FEATURE ? featurePlan : outcomePlan;\n-\n-\t\tFormQueryPlan sub = new FormQueryPlan(list,subPlan);\n-\t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n-\t}\n-\n-\tprivate void setFeatureValues(Object[] result, Object[] value) {\n-\t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\tresult[i] = value[i];\n-\t\t}\n-\t\t// copy daterange\n-\t\tresult[3] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n-\t}\n-\t\n-\tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n-\t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\tresult[i] = value[i];\n-\t\t}\n-\t\t// copy daterange\n-\t\tresult[4] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 1 + featureLength, value.length - 4);\n-\t}\n-\n-\t@Override\n-\tpublic RelativeFormQueryPlan clone(CloneContext ctx) {\n-\t\tRelativeFormQueryPlan copy = new RelativeFormQueryPlan(\n-\t\t\tquery.clone(ctx),\n-\t\t\tfeaturePlan.clone(ctx),\n-\t\t\toutcomePlan.clone(ctx),\n-\t\t\tindexSelector,\n-\t\t\tindexPlacement,\n-\t\t\ttimeCountBefore,\n-\t\t\ttimeCountAfter,\n-\t\t\ttimeUnit,\n-\t\t\tresolutions\n-\t\t);\n-\t\treturn copy;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isOfInterest(Entity entity) {\n-\t\treturn query.isOfInterest(entity);\n-\t}\n-\t\n-\t@AllArgsConstructor\n-\tprivate static class SubResult {\n-\t\tprivate MultilineContainedEntityResult result;\n-\t\t\n-\t\tpublic List<Object[]> getValues() {\n-\t\t\treturn result.getValues();\n-\t\t}\n-\t}\n+    private final ConceptQueryPlan query;\n+    private final ArrayConceptQueryPlan featurePlan;\n+    private final ArrayConceptQueryPlan outcomePlan;\n+    private final TemporalSampler indexSelector;\n+    private final IndexPlacement indexPlacement;\n+    private final int timeCountBefore;\n+    private final int timeCountAfter;\n+    private final DateContextMode timeUnit;\n+    private final List<DateContextMode> resolutions;\n+\n+    @Override\n+    public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+        EntityResult preResult = query.execute(ctx, entity);\n+        if (preResult.isFailed() || !preResult.isContained()) {\n+            return preResult;\n+        }\n+\n+        SinglelineContainedEntityResult contained = (SinglelineContainedEntityResult) preResult;\n+        CDateSet dateSet = CDateSet.parse(Objects.toString(contained.getValues()[0]));\n+        final OptionalInt sampled = indexSelector.sample(dateSet);\n+\n+        // dateset is empty or sampling failed.\n+        if (!sampled.isPresent()) {\n+            log.warn(\"Sampled empty result for Entity[{}]: `{}({})`\", contained.getEntityId(), indexSelector, dateSet);\n+            return preResult;\n+        }\n+\n+        int sample = sampled.getAsInt();\n+        List<DateContext> contexts = DateContext\n+            .generateRelativeContexts(sample, indexPlacement, timeCountBefore, timeCountAfter, timeUnit, resolutions);\n+\n+        SubResult featureResult = executeSubQuery(ctx, FeatureGroup.FEATURE, entity, contexts);\n+        SubResult outcomeResult = executeSubQuery(ctx, FeatureGroup.OUTCOME, entity, contexts);\n+\n+        List<Object[]> values = new ArrayList<>();\n+        // We look at the first result line to determine the length of the subresult\n+        int featureLength = featureResult.getValues().get(0).length;\n+        int outcomeLength = outcomeResult.getValues().get(0).length;\n+\n+        /*\n+         *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+         *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]...\n+         *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+         */\n+        int size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+\n+        int resultStartIndex = 0;\n+        if (contexts.size() >= 2\n+            && contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n+            && contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n+            && !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n+            // merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n+            // which would be a mistake by the generation\n+            // Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n+            // to indexes of the list.\n+            Object[] mergedFull = new Object[size];\n+            setFeatureValues(mergedFull, featureResult.getValues().get(resultStartIndex));\n+            setOutcomeValues(mergedFull, outcomeResult.getValues().get(resultStartIndex), featureLength);\n+            values.add(mergedFull);\n+            resultStartIndex++;\n+        }\n+\n+        // append all other lines directly\n+        for (int i = resultStartIndex; i < featureResult.getValues().size(); i++) {\n+            Object[] result = new Object[size];\n+            setFeatureValues(result, featureResult.getValues().get(i));\n+            values.add(result);\n+        }\n+        for (int i = resultStartIndex; i < outcomeResult.getValues().size(); i++) {\n+            Object[] result = new Object[size];\n+            setOutcomeValues(result, outcomeResult.getValues().get(i), featureLength);\n+            values.add(result);\n+        }\n+        return EntityResult.multilineOf(entity.getId(), values);\n+    }\n+\n+    private SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featureGroup, Entity entity, List<DateContext> contexts) {\n+        List<DateContext> list = new ArrayList<>(contexts);\n+        list.removeIf(dctx -> dctx.getFeatureGroup() != featureGroup);\n+\n+        ArrayConceptQueryPlan subPlan = featureGroup == FeatureGroup.FEATURE ? featurePlan : outcomePlan;\n+\n+        FormQueryPlan sub = new FormQueryPlan(list, subPlan);\n+        return new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n+    }\n+\n+    private void setFeatureValues(Object[] result, Object[] value) {\n+        // copy everything up to including index\n+        for (int i = 0; i < 3; i++) {\n+            result[i] = value[i];\n+        }\n+        // copy daterange\n+        result[3] = value[3];\n+        System.arraycopy(value, 4, result, 5, value.length - 4);\n+    }\n+\n+    private void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n+        // copy everything up to including index\n+        for (int i = 0; i < 3; i++) {\n+            result[i] = value[i];\n+        }\n+        // copy daterange\n+        result[4] = value[3];\n+        System.arraycopy(value, 4, result, 1 + featureLength, value.length - 4);\n+    }\n+\n+    @Override\n+    public RelativeFormQueryPlan clone(CloneContext ctx) {\n+        RelativeFormQueryPlan copy = new RelativeFormQueryPlan(\n+            query.clone(ctx),\n+            featurePlan.clone(ctx),\n+            outcomePlan.clone(ctx),\n+            indexSelector,\n+            indexPlacement,\n+            timeCountBefore,\n+            timeCountAfter,\n+            timeUnit,\n+            resolutions\n+        );\n+        return copy;\n+    }\n+\n+    @Override\n+    public boolean isOfInterest(Entity entity) {\n+        return query.isOfInterest(entity);\n+    }\n+\n+    @AllArgsConstructor\n+    private static class SubResult {\n+        private MultilineContainedEntityResult result;\n+\n+        public List<Object[]> getValues() {\n+            return result.getValues();\n+        }\n+    }\n }\n",
            "diff_size": 137
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/244/RelativeFormQueryPlan.java\nindex 02be47d516..e9f1e263ef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/244/RelativeFormQueryPlan.java\n@@ -76,10 +76,9 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n \n \t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n+\t\tif(contexts.size()>=2 && contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n+\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n+\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n \t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n \t\t\t// which would be a mistake by the generation\n \t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n@@ -164,4 +163,4 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\t\treturn result.getValues();\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Comment indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/244/RelativeFormQueryPlan.java\nindex 02be47d516..68d67a414a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/244/RelativeFormQueryPlan.java\n@@ -4,7 +4,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n import java.util.OptionalInt;\n-\n import com.bakdata.conquery.apiv1.forms.DateContextMode;\n import com.bakdata.conquery.apiv1.forms.FeatureGroup;\n import com.bakdata.conquery.apiv1.forms.IndexPlacement;\n@@ -26,142 +25,136 @@ import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n @Slf4j\n-@Getter @RequiredArgsConstructor\n+@Getter\n+@RequiredArgsConstructor\n public class RelativeFormQueryPlan implements QueryPlan {\n \n-\tprivate final ConceptQueryPlan query;\n-\tprivate final ArrayConceptQueryPlan featurePlan;\n-\tprivate final ArrayConceptQueryPlan outcomePlan;\n-\tprivate final TemporalSampler indexSelector;\n-\tprivate final IndexPlacement indexPlacement;\n-\tprivate final int timeCountBefore;\n-\tprivate final int timeCountAfter;\n-\tprivate final DateContextMode timeUnit;\n-\tprivate final List<DateContextMode> resolutions;\n-\n-\t@Override\n-\tpublic EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n-\t\tEntityResult preResult = query.execute(ctx, entity);\n-\t\tif (preResult.isFailed() || !preResult.isContained()) {\n-\t\t\treturn preResult;\n-\t\t}\n-\n-\t\tSinglelineContainedEntityResult contained = (SinglelineContainedEntityResult) preResult;\n-\t\tCDateSet dateSet = CDateSet.parse(Objects.toString(contained.getValues()[0]));\n-\t\tfinal OptionalInt sampled = indexSelector.sample(dateSet);\n-\n-\t\t// dateset is empty or sampling failed.\n-\t\tif (!sampled.isPresent()) {\n-\t\t\tlog.warn(\"Sampled empty result for Entity[{}]: `{}({})`\", contained.getEntityId(), indexSelector, dateSet);\n-\t\t\treturn preResult;\n-\t\t}\n-\n-\t\tint sample = sampled.getAsInt();\n-\t\tList<DateContext> contexts = DateContext\n-\t\t\t.generateRelativeContexts(sample, indexPlacement, timeCountBefore, timeCountAfter, timeUnit, resolutions);\n-\n-\t\tSubResult featureResult = executeSubQuery(ctx, FeatureGroup.FEATURE, entity, contexts);\n-\t\tSubResult outcomeResult = executeSubQuery(ctx, FeatureGroup.OUTCOME, entity, contexts);\n-\n-\t\tList<Object[]> values = new ArrayList<>();\n-\t\t// We look at the first result line to determine the length of the subresult\n-\t\tint featureLength = featureResult.getValues().get(0).length;\n-\t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t\n-\t\t/*\n-\t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n-\t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n-\t\t *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n-\t\t */\n-\t\tint size = featureLength + outcomeLength - 3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n-\n-\t\tint resultStartIndex = 0;\n-\t\tif(contexts.size()>=2\n-\t\t\t&& contexts.get(0).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& contexts.get(1).getSubdivisionMode().equals(DateContextMode.COMPLETE)\n-\t\t\t&& !contexts.get(0).getFeatureGroup().equals(contexts.get(1).getFeatureGroup())) {\n-\t\t\t// merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n-\t\t\t// which would be a mistake by the generation\n-\t\t\t// Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n-\t\t\t// to indexes of the list.\n-\t\t\tObject[] mergedFull = new Object[size];\n-\t\t\tsetFeatureValues(mergedFull, featureResult.getValues().get(resultStartIndex));\n-\t\t\tsetOutcomeValues(mergedFull, outcomeResult.getValues().get(resultStartIndex), featureLength);\n-\t\t\tvalues.add(mergedFull);\n-\t\t\tresultStartIndex++;\n-\t\t}\n-\n-\t\t// append all other lines directly\n-\t\tfor (int i = resultStartIndex; i < featureResult.getValues().size(); i++) {\n-\t\t\tObject[] result = new Object[size];\n-\t\t\tsetFeatureValues(result, featureResult.getValues().get(i));\n-\t\t\tvalues.add(result);\n-\t\t}\n-\t\tfor (int i = resultStartIndex; i < outcomeResult.getValues().size(); i++) {\n-\t\t\tObject[] result = new Object[size];\n-\t\t\tsetOutcomeValues(result, outcomeResult.getValues().get(i), featureLength);\n-\t\t\tvalues.add(result);\n-\t\t}\n-\t\treturn EntityResult.multilineOf(entity.getId(), values);\n-\t}\n-\n-\tprivate SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featureGroup, Entity entity, List<DateContext> contexts) {\n-\t\tList<DateContext> list = new ArrayList<>(contexts);\n-\t\tlist.removeIf(dctx -> dctx.getFeatureGroup() != featureGroup);\n-\n-\t\tArrayConceptQueryPlan subPlan = featureGroup == FeatureGroup.FEATURE ? featurePlan : outcomePlan;\n-\n-\t\tFormQueryPlan sub = new FormQueryPlan(list,subPlan);\n-\t\treturn new SubResult((MultilineContainedEntityResult) sub.execute(ctx, entity));\n-\t}\n-\n-\tprivate void setFeatureValues(Object[] result, Object[] value) {\n-\t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\tresult[i] = value[i];\n-\t\t}\n-\t\t// copy daterange\n-\t\tresult[3] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n-\t}\n-\t\n-\tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n-\t\t// copy everything up to including index\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\tresult[i] = value[i];\n-\t\t}\n-\t\t// copy daterange\n-\t\tresult[4] = value[3];\n-\t\tSystem.arraycopy(value, 4, result, 1 + featureLength, value.length - 4);\n-\t}\n-\n-\t@Override\n-\tpublic RelativeFormQueryPlan clone(CloneContext ctx) {\n-\t\tRelativeFormQueryPlan copy = new RelativeFormQueryPlan(\n-\t\t\tquery.clone(ctx),\n-\t\t\tfeaturePlan.clone(ctx),\n-\t\t\toutcomePlan.clone(ctx),\n-\t\t\tindexSelector,\n-\t\t\tindexPlacement,\n-\t\t\ttimeCountBefore,\n-\t\t\ttimeCountAfter,\n-\t\t\ttimeUnit,\n-\t\t\tresolutions\n-\t\t);\n-\t\treturn copy;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isOfInterest(Entity entity) {\n-\t\treturn query.isOfInterest(entity);\n-\t}\n-\t\n-\t@AllArgsConstructor\n-\tprivate static class SubResult {\n-\t\tprivate MultilineContainedEntityResult result;\n-\t\t\n-\t\tpublic List<Object[]> getValues() {\n-\t\t\treturn result.getValues();\n-\t\t}\n-\t}\n-}\n+    private final ConceptQueryPlan query;\n+    private final ArrayConceptQueryPlan featurePlan;\n+    private final ArrayConceptQueryPlan outcomePlan;\n+    private final TemporalSampler indexSelector;\n+    private final IndexPlacement indexPlacement;\n+    private final int timeCountBefore;\n+    private final int timeCountAfter;\n+    private final DateContextMode timeUnit;\n+    private final List<DateContextMode> resolutions;\n+    @Override\n+    public EntityResult execute(QueryExecutionContext ctx, Entity entity) {\n+        EntityResult preResult = query.execute(ctx, entity);\n+        if(preResult.isFailed() || !preResult.isContained()) {\n+            return preResult;\n+        }\n+\n+        SinglelineContainedEntityResult contained = (SinglelineContainedEntityResult)preResult;\n+        CDateSet dateSet = CDateSet.parse(Objects.toString(contained.getValues()[0]));\n+\n+        final OptionalInt sampled = indexSelector.sample(dateSet);\n+\n+        // dateset is empty or sampling failed.\n+        if(!sampled.isPresent()) {\n+            log.warn(\"Sampled empty result for Entity[{}]: `{}({})`\",\n+                     contained.getEntityId(),\n+                     indexSelector,\n+                     dateSet\n+            );\n+            return preResult;\n+        }\n+\n+        int sample = sampled.getAsInt();\n+        List<DateContext> contexts = DateContext.generateRelativeContexts(sample, indexPlacement, timeCountBefore, timeCountAfter, timeUnit, resolutions);\n+        SubResult featureResult = executeSubQuery(ctx, FeatureGroup.FEATURE, entity, contexts);\n+        SubResult outcomeResult = executeSubQuery(ctx, FeatureGroup.OUTCOME, entity, contexts);\n+        List<Object[]> values = new ArrayList<>();\n+        // We look at the first result line to determine the length of the subresult\n+        int featureLength = featureResult.getValues().get(0)\n+                                                     .length;\n+        int outcomeLength = outcomeResult.getValues().get(0)\n+                                                     .length;\n+        \n+        /*\n+         *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n+         *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n+         *  The wanted format is: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE_DR], [OUTCOME_DR], [FEATURE_SELECTS]... , [OUTCOME_SELECTS]\n+         */\n+        int size = featureLength +outcomeLength -3/*= [RESOLUTION], [INDEX], [EVENTDATE]*/;\n+        int resultStartIndex = 0;\n+        if(contexts.size() >=2 && contexts.get(0).getSubdivisionMode()\n+                                                 .equals(DateContextMode.COMPLETE) && contexts.get(1).getSubdivisionMode()\n+                                                                                                     .equals(DateContextMode.COMPLETE) && !contexts.get(0).getFeatureGroup()\n+                                                                                                                                                          .equals(contexts.get(1).getFeatureGroup())) {\n+            // merge a line for the complete daterange, when two dateContext were generated that don't target the same feature group,\n+            // which would be a mistake by the generation\n+            // Since the DateContexts are primarily ordered by their coarseness and COMPLETE is the coarsed resolution it must be at the first\n+            // to indexes of the list.\n+            Object[] mergedFull = new Object[size];\n+            setFeatureValues(mergedFull, featureResult.getValues().get(resultStartIndex));\n+            setOutcomeValues(mergedFull, outcomeResult.getValues().get(resultStartIndex), featureLength);\n+            values.add(mergedFull);\n+            resultStartIndex++;\n+        }\n+\n+        // append all other lines directly\n+\n+        for(int i = resultStartIndex;i<featureResult.getValues().size(); i++) {\n+            Object[] result = new Object[size];\n+            setFeatureValues(result, featureResult.getValues().get(i));\n+            values.add(result);\n+        }\n+\n+        for(int i = resultStartIndex;i<outcomeResult.getValues().size(); i++) {\n+            Object[] result = new Object[size];\n+            setOutcomeValues(result, outcomeResult.getValues().get(i), featureLength);\n+            values.add(result);\n+        }\n+        return EntityResult.multilineOf(entity.getId(), values);\n+    }\n+\n+    private SubResult executeSubQuery(QueryExecutionContext ctx, FeatureGroup featureGroup, Entity entity, List<DateContext> contexts) {\n+        List<DateContext> list = new ArrayList<>(contexts);\n+        list.removeIf(dctx->dctx.getFeatureGroup() != featureGroup);\n+        ArrayConceptQueryPlan subPlan = featureGroup == FeatureGroup.FEATURE ? featurePlan : outcomePlan;\n+        FormQueryPlan sub = new FormQueryPlan(list, subPlan);\n+        return new SubResult((MultilineContainedEntityResult)sub.execute(ctx, entity));\n+    }\n+\n+    private void setFeatureValues(Object[] result, Object[] value) {\n+        // copy everything up to including index\n+        for(int i = 0;i< 3; i++) {\n+            result[i] = value[i];\n+        }\n+        // copy daterange\n+        result[3] = value[3];\n+        System.arraycopy(value, 4, result, 5, value.length -4);\n+    }\n+\n+    private void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n+        // copy everything up to including index\n+        for(int i = 0;i< 3; i++) {\n+            result[i] = value[i];\n+        }\n+        // copy daterange\n+        result[4] = value[3];\n+        System.arraycopy(value, 4, result, 1 +featureLength, value.length -4);\n+    }\n+\n+    @Override\n+    public RelativeFormQueryPlan clone(CloneContext ctx) {\n+        RelativeFormQueryPlan copy = new RelativeFormQueryPlan(query.clone(ctx), featurePlan.clone(ctx), outcomePlan.clone(ctx), indexSelector, indexPlacement, timeCountBefore, timeCountAfter, timeUnit, resolutions);\n+        return copy;\n+    }\n+\n+    @Override\n+    public boolean isOfInterest(Entity entity) {\n+        return query.isOfInterest(entity);\n+    }\n+\n+    @AllArgsConstructor\n+    private static class SubResult {\n+\n+        private MultilineContainedEntityResult result;\n+\n+        public List<Object[]> getValues() {\n+            return result.getValues();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/244/RelativeFormQueryPlan.java\nindex 02be47d516..ba17feef10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/244/RelativeFormQueryPlan.java\n@@ -67,7 +67,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t\n+\n \t\t/*\n \t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n \t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n@@ -124,7 +124,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tresult[3] = value[3];\n \t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n \t}\n-\t\n+\n \tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n \t\t// copy everything up to including index\n \t\tfor (int i = 0; i < 3; i++) {\n@@ -155,11 +155,11 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \tpublic boolean isOfInterest(Entity entity) {\n \t\treturn query.isOfInterest(entity);\n \t}\n-\t\n+\n \t@AllArgsConstructor\n \tprivate static class SubResult {\n \t\tprivate MultilineContainedEntityResult result;\n-\t\t\n+\n \t\tpublic List<Object[]> getValues() {\n \t\t\treturn result.getValues();\n \t\t}\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "trailing whitespaces",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/244/RelativeFormQueryPlan.java\nindex 02be47d516..ba17feef10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/244/RelativeFormQueryPlan.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/244/RelativeFormQueryPlan.java\n@@ -67,7 +67,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\t// We look at the first result line to determine the length of the subresult\n \t\tint featureLength = featureResult.getValues().get(0).length;\n \t\tint outcomeLength = outcomeResult.getValues().get(0).length;\n-\t\t\n+\n \t\t/*\n \t\t *  Whole result is the concatenation of the subresults. The final output format combines resolution info, index and eventdate of both sub queries.\n \t\t *  The feature/outcome sub queries are of in form of: [RESOLUTION], [INDEX], [EVENTDATE], [FEATURE/OUTCOME_DR], [FEATURE/OUTCOME_SELECTS]... \n@@ -124,7 +124,7 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \t\tresult[3] = value[3];\n \t\tSystem.arraycopy(value, 4, result, 5, value.length - 4);\n \t}\n-\t\n+\n \tprivate void setOutcomeValues(Object[] result, Object[] value, int featureLength) {\n \t\t// copy everything up to including index\n \t\tfor (int i = 0; i < 3; i++) {\n@@ -155,11 +155,11 @@ public class RelativeFormQueryPlan implements QueryPlan {\n \tpublic boolean isOfInterest(Entity entity) {\n \t\treturn query.isOfInterest(entity);\n \t}\n-\t\n+\n \t@AllArgsConstructor\n \tprivate static class SubResult {\n \t\tprivate MultilineContainedEntityResult result;\n-\t\t\n+\n \t\tpublic List<Object[]> getValues() {\n \t\t\treturn result.getValues();\n \t\t}\n",
            "diff_size": 4
        }
    ]
}