{
    "error_id": "315",
    "information": {
        "errors": [
            {
                "line": "59",
                "column": "13",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            Resource[] resources = null;\n            List<Resource> resourceList = new ArrayList<Resource>();\n            for(String path : java110Properties.getMappingPath().split(\",\")) {\n                resources = resolver.getResources(path);\n                resourceList.addAll(Arrays.asList(resources));\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/315/MyBatisConfig.java\nindex 8c8bcd679e..ac6732832b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/315/MyBatisConfig.java\n@@ -56,7 +56,7 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n            // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n             Resource[] resources = null;\n             List<Resource> resourceList = new ArrayList<Resource>();\n-            for(String path : java110Properties.getMappingPath().split(\",\")) {\n+            for (String path : java110Properties.getMappingPath().split(\",\")) {\n                 resources = resolver.getResources(path);\n                 resourceList.addAll(Arrays.asList(resources));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/315/MyBatisConfig.java\nindex 8c8bcd679e..fc5454252f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/315/MyBatisConfig.java\n@@ -30,11 +30,11 @@ import java.util.List;\n @EnableTransactionManagement\n public class MyBatisConfig implements TransactionManagementConfigurer {\n \n-    @Autowired\n-    private Java110Properties java110Properties;\n+  @Autowired\n+  private Java110Properties java110Properties;\n \n-    @Autowired\n-    DataSource dataSource;\n+  @Autowired\n+  DataSource dataSource;\n //\n //    @Bean(name = \"dataSource\")\n //    @ConfigurationProperties(prefix = \"spring.datasource\")\n@@ -44,46 +44,46 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n //    }\n \n \n-    @Bean(name = \"sqlSessionFactory\")\n-    public SqlSessionFactory sqlSessionFactoryBean() {\n-        SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n-        bean.setDataSource(dataSource);\n-        bean.setTypeAliasesPackage(\"tk.mybatis.springboot.model\");\n+  @Bean(name = \"sqlSessionFactory\")\n+  public SqlSessionFactory sqlSessionFactoryBean() {\n+    SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n+    bean.setDataSource(dataSource);\n+    bean.setTypeAliasesPackage(\"tk.mybatis.springboot.model\");\n \n-        //\u6dfb\u52a0XML\u76ee\u5f55\n-        ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n-        try {\n-           // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n-            Resource[] resources = null;\n-            List<Resource> resourceList = new ArrayList<Resource>();\n-            for(String path : java110Properties.getMappingPath().split(\",\")) {\n-                resources = resolver.getResources(path);\n-                resourceList.addAll(Arrays.asList(resources));\n-            }\n-            bean.setMapperLocations(resourceList.toArray(new Resource[resourceList.size()]));\n-            return bean.getObject();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(e);\n-        }\n+    //\u6dfb\u52a0XML\u76ee\u5f55\n+    ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n+    try {\n+      // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n+      Resource[] resources = null;\n+      List<Resource> resourceList = new ArrayList<Resource>();\n+      for (String path : java110Properties.getMappingPath().split(\",\")) {\n+        resources = resolver.getResources(path);\n+        resourceList.addAll(Arrays.asList(resources));\n+      }\n+      bean.setMapperLocations(resourceList.toArray(new Resource[resourceList.size()]));\n+      return bean.getObject();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    @Bean(name = \"sqlSessionTemplate\")\n-    public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n-        return new SqlSessionTemplate(sqlSessionFactory);\n-    }\n+  @Bean(name = \"sqlSessionTemplate\")\n+  public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n+    return new SqlSessionTemplate(sqlSessionFactory);\n+  }\n \n-    @Bean\n-    @Override\n-    public PlatformTransactionManager annotationDrivenTransactionManager() {\n-        return new DataSourceTransactionManager(dataSource);\n-    }\n+  @Bean\n+  @Override\n+  public PlatformTransactionManager annotationDrivenTransactionManager() {\n+    return new DataSourceTransactionManager(dataSource);\n+  }\n \n-    public Java110Properties getJava110Properties() {\n-        return java110Properties;\n-    }\n+  public Java110Properties getJava110Properties() {\n+    return java110Properties;\n+  }\n \n-    public void setJava110Properties(Java110Properties java110Properties) {\n-        this.java110Properties = java110Properties;\n-    }\n+  public void setJava110Properties(Java110Properties java110Properties) {\n+    this.java110Properties = java110Properties;\n+  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/315/MyBatisConfig.java\nindex 8c8bcd679e..c4bfe7a996 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/315/MyBatisConfig.java\n@@ -14,7 +14,6 @@ import org.springframework.jdbc.datasource.DataSourceTransactionManager;\n import org.springframework.transaction.PlatformTransactionManager;\n import org.springframework.transaction.annotation.EnableTransactionManagement;\n import org.springframework.transaction.annotation.TransactionManagementConfigurer;\n-\n import javax.sql.DataSource;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -26,6 +25,8 @@ import java.util.List;\n  * @author liuzh\n  * @since 2015-12-19 10:11\n  */\n+\n+\n @Configuration\n @EnableTransactionManagement\n public class MyBatisConfig implements TransactionManagementConfigurer {\n@@ -43,7 +44,6 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n //        return druidDataSource;\n //    }\n \n-\n     @Bean(name = \"sqlSessionFactory\")\n     public SqlSessionFactory sqlSessionFactoryBean() {\n         SqlSessionFactoryBean bean = new SqlSessionFactoryBean();\n@@ -51,12 +51,13 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n         bean.setTypeAliasesPackage(\"tk.mybatis.springboot.model\");\n \n         //\u6dfb\u52a0XML\u76ee\u5f55\n+\n         ResourcePatternResolver resolver = new PathMatchingResourcePatternResolver();\n         try {\n            // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n             Resource[] resources = null;\n             List<Resource> resourceList = new ArrayList<Resource>();\n-            for(String path : java110Properties.getMappingPath().split(\",\")) {\n+            for (String path : java110Properties.getMappingPath().split(\",\")) {\n                 resources = resolver.getResources(path);\n                 resourceList.addAll(Arrays.asList(resources));\n             }\n@@ -68,11 +69,13 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n         }\n     }\n \n+\n     @Bean(name = \"sqlSessionTemplate\")\n     public SqlSessionTemplate sqlSessionTemplate(SqlSessionFactory sqlSessionFactory) {\n         return new SqlSessionTemplate(sqlSessionFactory);\n     }\n \n+\n     @Bean\n     @Override\n     public PlatformTransactionManager annotationDrivenTransactionManager() {\n@@ -86,4 +89,4 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n     public void setJava110Properties(Java110Properties java110Properties) {\n         this.java110Properties = java110Properties;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/315/MyBatisConfig.java\nindex 8c8bcd679e..ac6732832b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/315/MyBatisConfig.java\n@@ -56,7 +56,7 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n            // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n             Resource[] resources = null;\n             List<Resource> resourceList = new ArrayList<Resource>();\n-            for(String path : java110Properties.getMappingPath().split(\",\")) {\n+            for (String path : java110Properties.getMappingPath().split(\",\")) {\n                 resources = resolver.getResources(path);\n                 resourceList.addAll(Arrays.asList(resources));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "58",
                    "column": "70",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/315/MyBatisConfig.java\nindex 8c8bcd679e..c1203aebbd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/315/MyBatisConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/315/MyBatisConfig.java\n@@ -55,8 +55,7 @@ public class MyBatisConfig implements TransactionManagementConfigurer {\n         try {\n            // bean.setMapperLocations(resolver.getResources(\"classpath:mapper/*/*.xml\"));\n             Resource[] resources = null;\n-            List<Resource> resourceList = new ArrayList<Resource>();\n-            for(String path : java110Properties.getMappingPath().split(\",\")) {\n+            List<Resource> resourceList = new ArrayList<Resource>(); for(String path : java110Properties.getMappingPath().split(\",\")) {\n                 resources = resolver.getResources(path);\n                 resourceList.addAll(Arrays.asList(resources));\n             }\n",
            "diff_size": 2
        }
    ]
}