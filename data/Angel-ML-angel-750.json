{
    "error_id": "750",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @return An InetSocketInstance\n   */\n  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n    return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/750/Addressing.java\nindex c2ded6c7bc..e4a34f8e4d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/750/Addressing.java\n@@ -1,5 +1,4 @@\n /**\n- *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -7,9 +6,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -25,50 +24,51 @@ import java.net.InetSocketAddress;\n  * Utility for network addresses, resolving and naming.\n  */\n public class Addressing {\n-  public static final String VALID_PORT_REGEX = \"[\\\\d]+\";\n-  public static final String HOSTNAME_PORT_SEPARATOR = \":\";\n+    public static final String VALID_PORT_REGEX = \"[\\\\d]+\";\n+    public static final String HOSTNAME_PORT_SEPARATOR = \":\";\n \n-  /**\n-   * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n-   * @return An InetSocketInstance\n-   */\n-  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n-    return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n-  }\n+    /**\n+     * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n+     * @return An InetSocketInstance\n+     */\n+    public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(\n+            final String hostAndPort) {\n+        return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n+    }\n \n-  /**\n-   * @param hostname Server hostname\n-   * @param port Server port\n-   * @return Returns a concatenation of <code>hostname</code> and <code>port</code> in following\n-   *         form: <code>&lt;hostname> ':' &lt;port></code>. For example, if hostname is\n-   *         <code>example.org</code> and port is 1234, this method will return\n-   *         <code>example.org:1234</code>\n-   */\n-  public static String createHostAndPortStr(final String hostname, final int port) {\n-    return hostname + HOSTNAME_PORT_SEPARATOR + port;\n-  }\n+    /**\n+     * @param hostname Server hostname\n+     * @param port Server port\n+     * @return Returns a concatenation of <code>hostname</code> and <code>port</code> in following\n+     *         form: <code>&lt;hostname> ':' &lt;port></code>. For example, if hostname is\n+     *         <code>example.org</code> and port is 1234, this method will return\n+     *         <code>example.org:1234</code>\n+     */\n+    public static String createHostAndPortStr(final String hostname, final int port) {\n+        return hostname + HOSTNAME_PORT_SEPARATOR + port;\n+    }\n \n-  /**\n-   * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n-   * @return The hostname portion of <code>hostAndPort</code>\n-   */\n-  public static String parseHostname(final String hostAndPort) {\n-    int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n-    if (colonIndex < 0) {\n-      throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+    /**\n+     * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n+     * @return The hostname portion of <code>hostAndPort</code>\n+     */\n+    public static String parseHostname(final String hostAndPort) {\n+        int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n+        if (colonIndex < 0) {\n+            throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+        }\n+        return hostAndPort.substring(0, colonIndex);\n     }\n-    return hostAndPort.substring(0, colonIndex);\n-  }\n \n-  /**\n-   * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n-   * @return The port portion of <code>hostAndPort</code>\n-   */\n-  public static int parsePort(final String hostAndPort) {\n-    int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n-    if (colonIndex < 0) {\n-      throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+    /**\n+     * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n+     * @return The port portion of <code>hostAndPort</code>\n+     */\n+    public static int parsePort(final String hostAndPort) {\n+        int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n+        if (colonIndex < 0) {\n+            throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+        }\n+        return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n     }\n-    return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n-  }\n }\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/750/Addressing.java\nindex c2ded6c7bc..a0f1ba0d48 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/750/Addressing.java\n@@ -71,4 +71,4 @@ public class Addressing {\n     }\n     return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 39.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 74.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/750/Addressing.java\nindex c2ded6c7bc..5868cab620 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/750/Addressing.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/750/Addressing.java\n@@ -24,17 +24,21 @@ import java.net.InetSocketAddress;\n /**\n  * Utility for network addresses, resolving and naming.\n  */\n+\n public class Addressing {\n-  public static final String VALID_PORT_REGEX = \"[\\\\d]+\";\n-  public static final String HOSTNAME_PORT_SEPARATOR = \":\";\n+\n+    public static final String VALID_PORT_REGEX = \"[\\\\d]+\";\n+\n+    public static final String HOSTNAME_PORT_SEPARATOR = \":\";\n \n   /**\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return An InetSocketInstance\n    */\n-  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n+\n+    public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n     return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n-  }\n+    }\n \n   /**\n    * @param hostname Server hostname\n@@ -44,31 +48,35 @@ public class Addressing {\n    *         <code>example.org</code> and port is 1234, this method will return\n    *         <code>example.org:1234</code>\n    */\n-  public static String createHostAndPortStr(final String hostname, final int port) {\n+\n+    public static String createHostAndPortStr(final String hostname, final int port) {\n     return hostname + HOSTNAME_PORT_SEPARATOR + port;\n-  }\n+    }\n \n   /**\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return The hostname portion of <code>hostAndPort</code>\n    */\n-  public static String parseHostname(final String hostAndPort) {\n+\n+    public static String parseHostname(final String hostAndPort) {\n     int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n     if (colonIndex < 0) {\n-      throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+        throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n     }\n     return hostAndPort.substring(0, colonIndex);\n-  }\n+    }\n \n   /**\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return The port portion of <code>hostAndPort</code>\n    */\n-  public static int parsePort(final String hostAndPort) {\n+\n+    public static int parsePort(final String hostAndPort) {\n     int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n     if (colonIndex < 0) {\n-      throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n+        throw new IllegalArgumentException(\"Not a host:port pair: \" + hostAndPort);\n     }\n     return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}