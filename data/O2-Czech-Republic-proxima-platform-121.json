{
    "error_id": "121",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "import org.apache.beam.sdk.values.TypeDescriptor;\n\npublic class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n\n  private static final long serialVersionUID = 1L;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/121/AttributeDescriptorCoder.java\nindex 81ba98e587..eee3c1efb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/121/AttributeDescriptorCoder.java\n@@ -25,9 +25,7 @@ import java.io.OutputStream;\n import org.apache.beam.sdk.coders.Coder;\n import org.apache.beam.sdk.coders.CoderException;\n import org.apache.beam.sdk.coders.StringUtf8Coder;\n-import org.apache.beam.sdk.values.TypeDescriptor;\n-\n-public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n+import org.apache.beam.sdk.values.TypeDescriptor;public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n \n   private static final long serialVersionUID = 1L;\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/121/AttributeDescriptorCoder.java\nindex 81ba98e587..013bc69524 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/121/AttributeDescriptorCoder.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.core.io;\n \n import cz.o2.proxima.repository.AttributeDescriptor;\n@@ -27,7 +28,8 @@ import org.apache.beam.sdk.coders.CoderException;\n import org.apache.beam.sdk.coders.StringUtf8Coder;\n import org.apache.beam.sdk.values.TypeDescriptor;\n \n-public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n+public class AttributeDescriptorCoder\n+    extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n \n   private static final long serialVersionUID = 1L;\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/121/AttributeDescriptorCoder.java\nindex 81ba98e587..874a5cc15b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/121/AttributeDescriptorCoder.java\n@@ -60,7 +60,7 @@ public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeD\n   @Override\n   public void encode(AttributeDescriptor<?> value, OutputStream outStream)\n       throws CoderException, IOException {\n-    STRING_CODER.encode(value.getEntity(), outStream);\n+  STRING_CODER.encode(value.getEntity(), outStream);\n     STRING_CODER.encode(value.getName(), outStream);\n   }\n \n@@ -76,4 +76,4 @@ public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeD\n   public TypeDescriptor<AttributeDescriptor<?>> getEncodedTypeDescriptor() {\n     return (TypeDescriptor) TypeDescriptor.of(AttributeDescriptor.class);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/121/AttributeDescriptorCoder.java\nindex 81ba98e587..f63270110e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/121/AttributeDescriptorCoder.java\n@@ -27,9 +27,10 @@ import org.apache.beam.sdk.coders.CoderException;\n import org.apache.beam.sdk.coders.StringUtf8Coder;\n import org.apache.beam.sdk.values.TypeDescriptor;\n \n+\n public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n   /**\n    * Create {@link AttributeDescriptorCoder} from {@link Repository}.\n@@ -37,9 +38,9 @@ public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeD\n    * @param repo the repository for the coder\n    * @return the coder\n    */\n-  public static AttributeDescriptorCoder of(Repository repo) {\n+    public static AttributeDescriptorCoder of(Repository repo) {\n     return of(repo.asFactory());\n-  }\n+    }\n \n   /**\n    * Create {@link AttributeDescriptorCoder} from {@link RepositoryFactory}.\n@@ -47,33 +48,33 @@ public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeD\n    * @param factory the repository factory for the coder\n    * @return the coder\n    */\n-  public static AttributeDescriptorCoder of(RepositoryFactory factory) {\n+\n+    public static AttributeDescriptorCoder of(RepositoryFactory factory) {\n     return new AttributeDescriptorCoder(factory);\n-  }\n+    }\n \n-  private static final Coder<String> STRING_CODER = StringUtf8Coder.of();\n+    private static final Coder<String> STRING_CODER = StringUtf8Coder.of();\n \n-  private AttributeDescriptorCoder(RepositoryFactory factory) {\n+    private AttributeDescriptorCoder(RepositoryFactory factory) {\n     super(factory);\n-  }\n+    }\n \n-  @Override\n-  public void encode(AttributeDescriptor<?> value, OutputStream outStream)\n-      throws CoderException, IOException {\n+    @Override\n+    public void encode(AttributeDescriptor<?> value, OutputStream outStream) throws CoderException, IOException {\n     STRING_CODER.encode(value.getEntity(), outStream);\n     STRING_CODER.encode(value.getName(), outStream);\n-  }\n+    }\n \n-  @Override\n-  public AttributeDescriptor<?> decode(InputStream inStream) throws IOException {\n+    @Override\n+    public AttributeDescriptor<?> decode(InputStream inStream) throws IOException {\n     String entity = STRING_CODER.decode(inStream);\n     EntityDescriptor entityDesc = repo().getEntity(entity);\n     return entityDesc.getAttribute(STRING_CODER.decode(inStream));\n-  }\n+    }\n \n-  @Override\n-  @SuppressWarnings(\"unchecked\")\n-  public TypeDescriptor<AttributeDescriptor<?>> getEncodedTypeDescriptor() {\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public TypeDescriptor<AttributeDescriptor<?>> getEncodedTypeDescriptor() {\n     return (TypeDescriptor) TypeDescriptor.of(AttributeDescriptor.class);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/121/AttributeDescriptorCoder.java\nindex 81ba98e587..eee3c1efb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/121/AttributeDescriptorCoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/121/AttributeDescriptorCoder.java\n@@ -25,9 +25,7 @@ import java.io.OutputStream;\n import org.apache.beam.sdk.coders.Coder;\n import org.apache.beam.sdk.coders.CoderException;\n import org.apache.beam.sdk.coders.StringUtf8Coder;\n-import org.apache.beam.sdk.values.TypeDescriptor;\n-\n-public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n+import org.apache.beam.sdk.values.TypeDescriptor;public class AttributeDescriptorCoder extends AbstractRepositoryCoder<AttributeDescriptor<?>> {\n \n   private static final long serialVersionUID = 1L;\n \n",
            "diff_size": 3
        }
    ]
}