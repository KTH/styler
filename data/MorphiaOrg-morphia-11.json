{
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        writer.writeStartDocument(expression.getOperation());\n        writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n        if(expression.getName() != null) {\n            writer.writeString(\"format\", expression.getName());\n        }\n        writeExpression(writer, \"timezone\", expression.getTimeZone(), encoderContext);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler/11/DateToStringExpressionCodec.java\nindex 342175aca7..b80df7c897 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler/11/DateToStringExpressionCodec.java\n@@ -25,7 +25,7 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public void encode(final BsonWriter writer, final DateToStringExpression expression, final EncoderContext encoderContext) {\n         writer.writeStartDocument(expression.getOperation());\n         writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n-        if(expression.getName() != null) {\n+        if (expression.getName() != null) {\n             writer.writeString(\"format\", expression.getName());\n         }\n         writeExpression(writer, \"timezone\", expression.getTimeZone(), encoderContext);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/intellij/11/DateToStringExpressionCodec.java\nindex 342175aca7..b80df7c897 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/intellij/11/DateToStringExpressionCodec.java\n@@ -25,7 +25,7 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public void encode(final BsonWriter writer, final DateToStringExpression expression, final EncoderContext encoderContext) {\n         writer.writeStartDocument(expression.getOperation());\n         writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n-        if(expression.getName() != null) {\n+        if (expression.getName() != null) {\n             writer.writeString(\"format\", expression.getName());\n         }\n         writeExpression(writer, \"timezone\", expression.getTimeZone(), encoderContext);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/naturalize/11/DateToStringExpressionCodec.java\nindex 342175aca7..6dd5b406e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/naturalize/11/DateToStringExpressionCodec.java\n@@ -25,7 +25,7 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public void encode(final BsonWriter writer, final DateToStringExpression expression, final EncoderContext encoderContext) {\n         writer.writeStartDocument(expression.getOperation());\n         writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n-        if(expression.getName() != null) {\n+        if (expression.getName() != null) {\n             writer.writeString(\"format\", expression.getName());\n         }\n         writeExpression(writer, \"timezone\", expression.getTimeZone(), encoderContext);\n@@ -34,10 +34,9 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n         writer.writeEndDocument();\n     }\n \n-    private void writeExpression(final BsonWriter writer,\n-                                 final String name, final Expression expression,\n+    private void writeExpression(final BsonWriter writer, final String name, final Expression expression,\n                                  final EncoderContext encoderContext) {\n-        if (expression != null) {\n+    if (expression != null) {\n             writer.writeName(name);\n             Object value = expression.getValue();\n             Codec codec = codecRegistry.get(value.getClass());\n@@ -49,4 +48,4 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public Class<DateToStringExpression> getEncoderClass() {\n         return DateToStringExpression.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_random/11/DateToStringExpressionCodec.java\nindex 342175aca7..b80df7c897 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_random/11/DateToStringExpressionCodec.java\n@@ -25,7 +25,7 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public void encode(final BsonWriter writer, final DateToStringExpression expression, final EncoderContext encoderContext) {\n         writer.writeStartDocument(expression.getOperation());\n         writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n-        if(expression.getName() != null) {\n+        if (expression.getName() != null) {\n             writer.writeString(\"format\", expression.getName());\n         }\n         writeExpression(writer, \"timezone\", expression.getTimeZone(), encoderContext);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "9",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_three_grams/11/DateToStringExpressionCodec.java\nindex 342175aca7..c21cfa3a0b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/11/DateToStringExpressionCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_three_grams/11/DateToStringExpressionCodec.java\n@@ -25,6 +25,7 @@ public class DateToStringExpressionCodec implements Codec<DateToStringExpression\n     public void encode(final BsonWriter writer, final DateToStringExpression expression, final EncoderContext encoderContext) {\n         writer.writeStartDocument(expression.getOperation());\n         writeExpression(writer, \"date\", (Expression) expression.getValue(), encoderContext);\n+\n         if(expression.getName() != null) {\n             writer.writeString(\"format\", expression.getName());\n         }\n",
            "diff_size": 1
        }
    ]
}