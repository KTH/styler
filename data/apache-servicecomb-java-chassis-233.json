{
    "error_id": "233",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n\n  // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/233/BodyProcessorCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/233/BodyProcessorCreator.java\nindex 0fdda6151e..fb4b8d0d11 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/233/BodyProcessorCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/233/BodyProcessorCreator.java\n@@ -132,7 +132,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * Deserialize body object into body buffer, according to the Content-Type.\n      *\n      * @param contentType the Content-Type of request\n-     * @param arg body param object\n+     * @param arg         body param object\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "228",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/233/BodyProcessorCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/233/BodyProcessorCreator.java\nindex 0fdda6151e..c7b7567654 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/233/BodyProcessorCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/233/BodyProcessorCreator.java\n@@ -21,11 +21,9 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Type;\n import java.util.Locale;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.io.IOUtils;\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.RestClientRequest;\n@@ -36,13 +34,11 @@ import org.apache.servicecomb.swagger.converter.ConverterMgr;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n import com.fasterxml.jackson.databind.type.SimpleType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.parameters.BodyParameter;\n@@ -51,17 +47,18 @@ import io.vertx.core.buffer.Buffer;\n import io.vertx.core.buffer.impl.BufferImpl;\n \n public class BodyProcessorCreator implements ParamValueProcessorCreator {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(BodyProcessorCreator.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(BodyProcessorCreator.class);\n \n-  public static final String PARAMTYPE = \"body\";\n+    public static final String PARAMTYPE = \"body\";\n \n-  private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n+    private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n \n   // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n-  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n-      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n \n-  public static class BodyProcessor implements ParamValueProcessor {\n+    private static boolean decodeAsObject = DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false)\n+                                                                                .get();\n+\n+    public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n \n     private boolean isString;\n@@ -69,63 +66,64 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     protected boolean isRequired;\n \n     public BodyProcessor(JavaType targetType, boolean isString, boolean isRequired) {\n-      this.targetType = targetType;\n-      this.isString = isString;\n-      this.isRequired = isRequired;\n+        this.targetType = targetType;\n+        this.isString = isString;\n+        this.isRequired = isRequired;\n     }\n \n     @Override\n     public Object getValue(HttpServletRequest request) throws Exception {\n-      Object body = request.getAttribute(RestConst.BODY_PARAMETER);\n-      if (body != null) {\n+        Object body = request.getAttribute(RestConst.BODY_PARAMETER);\n+        if (body != null) {\n         return convertValue(body, targetType);\n-      }\n+        }\n \n       // edge support convert from form-data or x-www-form-urlencoded to json automatically\n-      String contentType = request.getContentType();\n-      contentType = contentType == null ? \"\" : contentType.toLowerCase(Locale.US);\n-      if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA)\n-          || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n+\n+        String contentType = request.getContentType();\n+        contentType = contentType == null ? \"\" : contentType.toLowerCase(Locale.US);\n+        if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA) || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n         return convertValue(request.getParameterMap(), targetType);\n-      }\n+        }\n \n       // for standard HttpServletRequest, getInputStream will never return null\n       // but for mocked HttpServletRequest, maybe get a null\n       //  like org.apache.servicecomb.provider.springmvc.reference.ClientToHttpServletRequest\n-      InputStream inputStream = request.getInputStream();\n-      if (inputStream == null) {\n+\n+        InputStream inputStream = request.getInputStream();\n+        if (inputStream == null) {\n         return null;\n-      }\n+        }\n \n-      if (!contentType.isEmpty() && !contentType.startsWith(MediaType.APPLICATION_JSON)) {\n+        if (!contentType.isEmpty() && !contentType.startsWith(MediaType.APPLICATION_JSON)) {\n         // TODO: we should consider body encoding\n         return IOUtils.toString(inputStream, \"UTF-8\");\n-      }\n+        }\n \n-      try {\n+        try {\n         if (decodeAsObject) {\n-          return RestObjectMapperFactory.getRestObjectMapper()\n-              .readValue(inputStream, OBJECT_TYPE);\n+            return RestObjectMapperFactory.getRestObjectMapper().readValue(inputStream, OBJECT_TYPE);\n         }\n-        return RestObjectMapperFactory.getRestObjectMapper()\n-            .readValue(inputStream, targetType == null ? OBJECT_TYPE : targetType);\n-      } catch (MismatchedInputException e) {\n+\n+        return RestObjectMapperFactory.getRestObjectMapper().readValue(inputStream, targetType == null ? OBJECT_TYPE : targetType);\n+        } catch (MismatchedInputException e) {\n         // there is no way to detect InputStream is empty, so have to catch the exception\n-        if (!isRequired && e.getMessage().contains(\"No content to map due to end-of-input\")) {\n-          LOGGER.info(\"Empty content and required is false, taken as null\");\n-          return null;\n+          if (!isRequired && e.getMessage().contains(\"No content to map due to end-of-input\")) {\n+              LOGGER.info(\"Empty content and required is false, taken as null\");\n+              return null;\n+          }\n+\n+          throw e;\n         }\n-        throw e;\n-      }\n     }\n \n     @Override\n     public void setValue(RestClientRequest clientRequest, Object arg) throws Exception {\n-      ensureContentType(clientRequest);\n-      if (arg != null) {\n+        ensureContentType(clientRequest);\n+        if (arg != null) {\n         Buffer buffer = createBodyBuffer(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE), arg);\n         clientRequest.write(buffer);\n-      }\n+        }\n     }\n \n     /**\n@@ -136,13 +134,15 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n+\n     private Buffer createBodyBuffer(String contentType, Object arg) throws IOException {\n-      if (MediaType.TEXT_PLAIN.equals(contentType)) {\n+        if (MediaType.TEXT_PLAIN.equals(contentType)) {\n         if (!String.class.isInstance(arg)) {\n-          throw new IllegalArgumentException(\"Content-Type is text/plain while arg type is not String\");\n+                                                          throw new IllegalArgumentException(\"Content-Type is text/plain while arg type is not String\");\n         }\n+\n         return new BufferImpl().appendBytes(((String) arg).getBytes());\n-      }\n+        }\n \n       // TODO recover this feature in SCB-1652\n //      if (arg instanceof String && !isString) {\n@@ -151,86 +151,86 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n //        return Buffer.buffer((String) arg);\n //      }\n \n-      try (BufferOutputStream output = new BufferOutputStream()) {\n+        try (BufferOutputStream output = new BufferOutputStream()) {\n         RestObjectMapperFactory.getConsumerWriterMapper().writeValue(output, arg);\n         return output.getBuffer();\n-      }\n+        }\n     }\n \n     /**\n      * If the Content-Type has not been set yet, set application/json as default value.\n      */\n+\n     private void ensureContentType(RestClientRequest clientRequest) {\n-      if (null == clientRequest.getHeaders()\n-          || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n+        if (null == clientRequest.getHeaders() || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n         clientRequest.putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-      }\n+        }\n     }\n \n     @Override\n     public String getParameterPath() {\n-      return \"\";\n+        return \"\";\n     }\n \n     @Override\n     public String getProcessorType() {\n-      return PARAMTYPE;\n+        return PARAMTYPE;\n+    }\n     }\n-  }\n \n-  public static class RawJsonBodyProcessor extends BodyProcessor {\n+    public static class RawJsonBodyProcessor extends BodyProcessor {\n     public RawJsonBodyProcessor(JavaType targetType, boolean isString, boolean isRequired) {\n-      super(targetType, isString, isRequired);\n+        super(targetType, isString, isRequired);\n     }\n \n     @Override\n     public Object getValue(HttpServletRequest request) throws Exception {\n-      Object body = request.getAttribute(RestConst.BODY_PARAMETER);\n-      if (body != null) {\n+        Object body = request.getAttribute(RestConst.BODY_PARAMETER);\n+        if (body != null) {\n         return convertValue(body, targetType);\n-      }\n+        }\n \n-      InputStream inputStream = request.getInputStream();\n-      if (inputStream == null) {\n+        InputStream inputStream = request.getInputStream();\n+        if (inputStream == null) {\n         return null;\n-      }\n+        }\n \n       // TODO: we should consider body encoding\n-      return IOUtils.toString(inputStream, \"UTF-8\");\n+\n+        return IOUtils.toString(inputStream, \"UTF-8\");\n     }\n \n     @Override\n     public void setValue(RestClientRequest clientRequest, Object arg) throws Exception {\n-      if (arg instanceof String) {\n+        if (arg instanceof String) {\n         clientRequest.putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n         clientRequest.write(Buffer.buffer((String) arg));\n         return;\n-      }\n+        }\n \n-      super.setValue(clientRequest, arg);\n+        super.setValue(clientRequest, arg);\n+    }\n     }\n-  }\n \n-  public BodyProcessorCreator() {\n+    public BodyProcessorCreator() {\n     ParamValueProcessorCreatorManager.INSTANCE.register(PARAMTYPE, this);\n-  }\n+    }\n \n-  @Override\n-  public ParamValueProcessor create(Parameter parameter, Type genericParamType) {\n+    @Override\n+    public ParamValueProcessor create(Parameter parameter, Type genericParamType) {\n     Model model = ((BodyParameter) parameter).getSchema();\n     JavaType swaggerType = null;\n     if (model instanceof ModelImpl) {\n-      swaggerType = ConverterMgr.findJavaType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+        swaggerType = ConverterMgr.findJavaType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n-    boolean isString = swaggerType != null && swaggerType.getRawClass().equals(String.class);\n \n-    JavaType targetType =\n-        genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n+    boolean isString = swaggerType != null && swaggerType.getRawClass().equals(String.class);\n+    JavaType targetType = genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n     boolean rawJson = SwaggerUtils.isRawJsonType(parameter);\n     if (rawJson) {\n-      return new RawJsonBodyProcessor(targetType, isString, parameter.getRequired());\n+        return new RawJsonBodyProcessor(targetType, isString, parameter.getRequired());\n     }\n \n     return new BodyProcessor(targetType, isString, parameter.getRequired());\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 88
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}