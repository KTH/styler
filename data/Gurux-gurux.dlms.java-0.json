{
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 86).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * Collection of enumerator values.\n     */\n    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n\n    /**\n     * Returns collection of enumerator values.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/0/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/0/CreditCollectionConfiguration.java\nindex 8702f515eb..fd6df11bad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/0/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/0/CreditCollectionConfiguration.java\n@@ -42,109 +42,107 @@ import java.util.Set;\n  * Defines behavior under specific conditions.\n  */\n public enum CreditCollectionConfiguration {\n-    /**\n-     * None.\n-     */\n-    NONE(0),\n-    /**\n-     * Collect when supply disconnected.\n-     */\n-    DISCONNECTED(0x80),\n-    /**\n-     * Collect in load limiting periods.\n-     */\n-    LOAD_LIMITING(0x40),\n-    /**\n-     * Collect in friendly credit periods.\n-     */\n-    FRIENDLY_CREDIT(0x20);\n+  /**\n+   * None.\n+   */\n+  NONE(0),\n+  /**\n+   * Collect when supply disconnected.\n+   */\n+  DISCONNECTED(0x80),\n+  /**\n+   * Collect in load limiting periods.\n+   */\n+  LOAD_LIMITING(0x40),\n+  /**\n+   * Collect in friendly credit periods.\n+   */\n+  FRIENDLY_CREDIT(0x20);\n \n-    /**\n-     * Integer value of enumerator.\n-     */\n-    private int intValue;\n+  /**\n+   * Integer value of enumerator.\n+   */\n+  private int intValue;\n \n-    /**\n-     * Collection of enumerator values.\n-     */\n-    private static java.util.HashMap<Integer, CreditCollectionConfiguration> mappings;\n+  /**\n+   * Collection of enumerator values.\n+   */\n+  private static java.util.HashMap<Integer, CreditCollectionConfiguration>\n+      mappings;\n \n-    /**\n-     * Returns collection of enumerator values.\n-     * \n-     * @return Enumerator values.\n-     */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n-        synchronized (CreditCollectionConfiguration.class) {\n-            if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n-            }\n-        }\n-        return mappings;\n+  /**\n+   * Returns collection of enumerator values.\n+   *\n+   * @return Enumerator values.\n+   */\n+  private static HashMap<Integer, CreditCollectionConfiguration>\n+  getMappings() {\n+    synchronized (CreditCollectionConfiguration.class) {\n+      if (mappings == null) {\n+        mappings =\n+            new HashMap<Integer, CreditCollectionConfiguration>();\n+      }\n     }\n+    return mappings;\n+  }\n \n-    /**\n-     * Constructor.\n-     * \n-     * @param value\n-     *            Integer value of enumerator.\n-     */\n-    CreditCollectionConfiguration(final int value) {\n-        intValue = value;\n-        getMappings().put(value, this);\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param value Integer value of enumerator.\n+   */\n+  CreditCollectionConfiguration(final int value) {\n+    intValue = value;\n+    getMappings().put(value, this);\n+  }\n \n-    /**\n-     * Get integer value for enumerator.\n-     * \n-     * @return Enumerator integer value.\n-     */\n-    public int getValue() {\n-        return intValue;\n-    }\n+  /**\n+   * Get integer value for enumerator.\n+   *\n+   * @return Enumerator integer value.\n+   */\n+  public int getValue() {\n+    return intValue;\n+  }\n \n-    static CreditCollectionConfiguration[] getEnumConstants() {\n-        return new CreditCollectionConfiguration[] { DISCONNECTED,\n-                LOAD_LIMITING, FRIENDLY_CREDIT };\n-    }\n+  static CreditCollectionConfiguration[] getEnumConstants() {\n+    return new CreditCollectionConfiguration[] {DISCONNECTED,\n+        LOAD_LIMITING, FRIENDLY_CREDIT};\n+  }\n \n-    /**\n-     * Returns enumerator value from an integer value.\n-     * \n-     * @param value\n-     *            Integer value.\n-     * @return Enumeration value.\n-     */\n-    public static Set<CreditCollectionConfiguration> forValue(final int value) {\n-        Set<CreditCollectionConfiguration> types =\n-                new HashSet<CreditCollectionConfiguration>();\n-        CreditCollectionConfiguration[] enums = getEnumConstants();\n-        for (int pos = 0; pos != enums.length; ++pos) {\n-            if ((enums[pos].intValue & value) == enums[pos].intValue) {\n-                types.add(enums[pos]);\n-            }\n-        }\n-        return types;\n+  /**\n+   * Returns enumerator value from an integer value.\n+   *\n+   * @param value Integer value.\n+   * @return Enumeration value.\n+   */\n+  public static Set<CreditCollectionConfiguration> forValue(final int value) {\n+    Set<CreditCollectionConfiguration> types =\n+        new HashSet<CreditCollectionConfiguration>();\n+    CreditCollectionConfiguration[] enums = getEnumConstants();\n+    for (int pos = 0; pos != enums.length; ++pos) {\n+      if ((enums[pos].intValue & value) == enums[pos].intValue) {\n+        types.add(enums[pos]);\n+      }\n     }\n+    return types;\n+  }\n \n-    /**\n-     * Converts the enumerated value to integer value.\n-     * \n-     * @param value\n-     *            The enumerated value.\n-     * @return The integer value.\n-     */\n-    public static int\n-            toInteger(final Set<CreditCollectionConfiguration> value) {\n-        if (value == null) {\n-            return 0;\n-        }\n-        int tmp = 0;\n-        for (CreditCollectionConfiguration it : value) {\n-            tmp |= it.getValue();\n-        }\n-        return tmp;\n+  /**\n+   * Converts the enumerated value to integer value.\n+   *\n+   * @param value The enumerated value.\n+   * @return The integer value.\n+   */\n+  public static int\n+  toInteger(final Set<CreditCollectionConfiguration> value) {\n+    if (value == null) {\n+      return 0;\n+    }\n+    int tmp = 0;\n+    for (CreditCollectionConfiguration it : value) {\n+      tmp |= it.getValue();\n     }\n+    return tmp;\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/0/CreditCollectionConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/0/CreditCollectionConfiguration.java\nindex 8702f515eb..618db0ca72 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/0/CreditCollectionConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/0/CreditCollectionConfiguration.java\n@@ -41,27 +41,36 @@ import java.util.Set;\n /**\n  * Defines behavior under specific conditions.\n  */\n+\n public enum CreditCollectionConfiguration {\n     /**\n      * None.\n      */\n+\n     NONE(0),\n     /**\n      * Collect when supply disconnected.\n      */\n+\n+\n     DISCONNECTED(0x80),\n     /**\n      * Collect in load limiting periods.\n      */\n+\n+\n     LOAD_LIMITING(0x40),\n     /**\n      * Collect in friendly credit periods.\n      */\n+\n+\n     FRIENDLY_CREDIT(0x20);\n \n     /**\n      * Integer value of enumerator.\n      */\n+\n     private int intValue;\n \n     /**\n@@ -74,12 +83,10 @@ public enum CreditCollectionConfiguration {\n      * \n      * @return Enumerator values.\n      */\n-    private static HashMap<Integer, CreditCollectionConfiguration>\n-            getMappings() {\n+    private static HashMap<Integer, CreditCollectionConfiguration> getMappings() {\n         synchronized (CreditCollectionConfiguration.class) {\n             if (mappings == null) {\n-                mappings =\n-                        new HashMap<Integer, CreditCollectionConfiguration>();\n+                mappings = new HashMap<Integer, CreditCollectionConfiguration>();\n             }\n         }\n         return mappings;\n@@ -91,6 +98,7 @@ public enum CreditCollectionConfiguration {\n      * @param value\n      *            Integer value of enumerator.\n      */\n+\n     CreditCollectionConfiguration(final int value) {\n         intValue = value;\n         getMappings().put(value, this);\n@@ -101,13 +109,14 @@ public enum CreditCollectionConfiguration {\n      * \n      * @return Enumerator integer value.\n      */\n+\n+\n     public int getValue() {\n         return intValue;\n     }\n \n     static CreditCollectionConfiguration[] getEnumConstants() {\n-        return new CreditCollectionConfiguration[] { DISCONNECTED,\n-                LOAD_LIMITING, FRIENDLY_CREDIT };\n+        return new CreditCollectionConfiguration[] { DISCONNECTED, LOAD_LIMITING, FRIENDLY_CREDIT };\n     }\n \n     /**\n@@ -117,9 +126,10 @@ public enum CreditCollectionConfiguration {\n      *            Integer value.\n      * @return Enumeration value.\n      */\n+\n+\n     public static Set<CreditCollectionConfiguration> forValue(final int value) {\n-        Set<CreditCollectionConfiguration> types =\n-                new HashSet<CreditCollectionConfiguration>();\n+        Set<CreditCollectionConfiguration> types = new HashSet<CreditCollectionConfiguration>();\n         CreditCollectionConfiguration[] enums = getEnumConstants();\n         for (int pos = 0; pos != enums.length; ++pos) {\n             if ((enums[pos].intValue & value) == enums[pos].intValue) {\n@@ -136,8 +146,9 @@ public enum CreditCollectionConfiguration {\n      *            The enumerated value.\n      * @return The integer value.\n      */\n-    public static int\n-            toInteger(final Set<CreditCollectionConfiguration> value) {\n+\n+\n+    public static int toInteger(final Set<CreditCollectionConfiguration> value) {\n         if (value == null) {\n             return 0;\n         }\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}