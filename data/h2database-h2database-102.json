{
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "48",
                "column": "5",
                "severity": "warning",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "     */\n    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n    {\n        String columnNameOverride = null;\n        if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n            columnNameOverride = columnNameOverides[indexOfColumn];",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/102/ColumnNamer.java\nindex 1a93d42773..891965f905 100644\nBinary files a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java and b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/102/ColumnNamer.java differ\n",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/102/ColumnNamer.java\nindex 1a93d42773..568b60eda7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/102/ColumnNamer.java\n@@ -2,6 +2,7 @@\n  * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  */\n+\n package org.h2.util;\n \n import java.util.HashSet;\n@@ -15,140 +16,150 @@ import org.h2.expression.Expression;\n  */\n public class ColumnNamer {\n \n-    private static final String DEFAULT_COLUMN_NAME = \"DEFAULT\";\n+  private static final String DEFAULT_COLUMN_NAME = \"DEFAULT\";\n \n-    private final Session session;\n+  private final Session session;\n \n-    private final ColumnNamerConfiguration configuration;\n-    private final Set<String> existingColumnNames = new HashSet<>();\n+  private final ColumnNamerConfiguration configuration;\n+  private final Set<String> existingColumnNames = new HashSet<>();\n \n-    public ColumnNamer(Session session) {\n-        this.session = session;\n-        if (session != null && session.getColumnNamerConfiguration() != null) {\n-            // use original from session\n-            this.configuration = session.getColumnNamerConfiguration();\n-        } else {\n-            // detached namer, create new\n-            this.configuration = ColumnNamerConfiguration.getDefault();\n-            if (session != null) {\n-                session.setColumnNamerConfiguration(this.configuration);\n-            }\n-        }\n+  public ColumnNamer(Session session) {\n+    this.session = session;\n+    if (session != null && session.getColumnNamerConfiguration() != null) {\n+      // use original from session\n+      this.configuration = session.getColumnNamerConfiguration();\n+    } else {\n+      // detached namer, create new\n+      this.configuration = ColumnNamerConfiguration.getDefault();\n+      if (session != null) {\n+        session.setColumnNamerConfiguration(this.configuration);\n+      }\n     }\n-\n-    /**\n-     * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n-     *\n-     * @param columnExp the column expression\n-     * @param indexOfColumn index of column in below array\n-     * @param columnNameOverides array of overriding column names\n-     * @return the new column name\n-     */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n-        String columnNameOverride = null;\n-        if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n-            columnNameOverride = columnNameOverides[indexOfColumn];\n-        }\n-        return getColumnName(columnExp, indexOfColumn, columnNameOverride);\n+  }\n+\n+  /**\n+   * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n+   *\n+   * @param columnExp          the column expression\n+   * @param indexOfColumn      index of column in below array\n+   * @param columnNameOverides array of overriding column names\n+   * @return the new column name\n+   */\n+  public String getColumnName(Expression columnExp, int indexOfColumn,\n+                              String[] columnNameOverides) {\n+    String columnNameOverride = null;\n+    if (columnNameOverides != null &&\n+        columnNameOverides.length > indexOfColumn) {\n+      columnNameOverride = columnNameOverides[indexOfColumn];\n     }\n-\n-    /**\n-     * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n-     *\n-     * @param columnExp the column expression\n-     * @param indexOfColumn index of column in below array\n-     * @param columnNameOverride single overriding column name\n-     * @return the new column name\n-     */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String columnNameOverride) {\n-        // try a name from the column name override\n-        String columnName = getColumnName(columnNameOverride, null);\n+    return getColumnName(columnExp, indexOfColumn, columnNameOverride);\n+  }\n+\n+  /**\n+   * Create a standardized column name that isn't null and doesn't have a CR/LF in it.\n+   *\n+   * @param columnExp          the column expression\n+   * @param indexOfColumn      index of column in below array\n+   * @param columnNameOverride single overriding column name\n+   * @return the new column name\n+   */\n+  public String getColumnName(Expression columnExp, int indexOfColumn,\n+                              String columnNameOverride) {\n+    // try a name from the column name override\n+    String columnName = getColumnName(columnNameOverride, null);\n+    if (columnName == null) {\n+      // try a name from the column alias\n+      columnName = getColumnName(columnExp.getAlias(session, indexOfColumn),\n+          DEFAULT_COLUMN_NAME);\n+      if (columnName == null) {\n+        // try a name derived from the column expression SQL\n+        columnName =\n+            getColumnName(columnExp.getColumnName(session, indexOfColumn),\n+                DEFAULT_COLUMN_NAME);\n         if (columnName == null) {\n-            // try a name from the column alias\n-            columnName = getColumnName(columnExp.getAlias(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n-            if (columnName == null) {\n-                // try a name derived from the column expression SQL\n-                columnName = getColumnName(columnExp.getColumnName(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n-                if (columnName == null) {\n-                    // try a name derived from the column expression plan SQL\n-                    columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS), DEFAULT_COLUMN_NAME);\n-                    // go with a innocuous default name pattern\n-                    if (columnName == null) {\n-                        columnName = configuration.getDefaultColumnNamePattern()\n-                                .replace(\"$$\", Integer.toString(indexOfColumn + 1));\n-                    }\n-                }\n-            }\n+          // try a name derived from the column expression plan SQL\n+          columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS),\n+              DEFAULT_COLUMN_NAME);\n+          // go with a innocuous default name pattern\n+          if (columnName == null) {\n+            columnName = configuration.getDefaultColumnNamePattern()\n+                .replace(\"$$\", Integer.toString(indexOfColumn + 1));\n+          }\n         }\n-        if (existingColumnNames.contains(columnName) && configuration.isGenerateUniqueColumnNames()) {\n-            columnName = generateUniqueName(columnName);\n-        }\n-        existingColumnNames.add(columnName);\n-        return columnName;\n+      }\n     }\n-\n-    private String getColumnName(String proposedName, String disallowedName) {\n-        String columnName = null;\n-        if (proposedName != null && !proposedName.equals(disallowedName)) {\n-            if (isAllowableColumnName(proposedName)) {\n-                columnName = proposedName;\n-            } else {\n-                proposedName = fixColumnName(proposedName);\n-                if (isAllowableColumnName(proposedName)) {\n-                    columnName = proposedName;\n-                }\n-            }\n-        }\n-        return columnName;\n+    if (existingColumnNames.contains(columnName) &&\n+        configuration.isGenerateUniqueColumnNames()) {\n+      columnName = generateUniqueName(columnName);\n     }\n-\n-    private String generateUniqueName(String columnName) {\n-        String newColumnName = columnName;\n-        int loopCount = 2;\n-        while (existingColumnNames.contains(newColumnName)) {\n-            String loopCountString = \"_\" + loopCount;\n-            newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n-                    + loopCountString;\n-            loopCount++;\n+    existingColumnNames.add(columnName);\n+    return columnName;\n+  }\n+\n+  private String getColumnName(String proposedName, String disallowedName) {\n+    String columnName = null;\n+    if (proposedName != null && !proposedName.equals(disallowedName)) {\n+      if (isAllowableColumnName(proposedName)) {\n+        columnName = proposedName;\n+      } else {\n+        proposedName = fixColumnName(proposedName);\n+        if (isAllowableColumnName(proposedName)) {\n+          columnName = proposedName;\n         }\n-        return newColumnName;\n+      }\n     }\n-\n-    private boolean isAllowableColumnName(String proposedName) {\n-        // check null\n-        if (proposedName == null) {\n-            return false;\n-        }\n-        // check size limits\n-        int length = proposedName.length();\n-        if (length > configuration.getMaxIdentiferLength() || length == 0) {\n-            return false;\n-        }\n-        Pattern allowed = configuration.getCompiledRegularExpressionMatchAllowed();\n-        return allowed == null || allowed.matcher(proposedName).matches();\n+    return columnName;\n+  }\n+\n+  private String generateUniqueName(String columnName) {\n+    String newColumnName = columnName;\n+    int loopCount = 2;\n+    while (existingColumnNames.contains(newColumnName)) {\n+      String loopCountString = \"_\" + loopCount;\n+      newColumnName = columnName.substring(0,\n+          Math.min(columnName.length(),\n+              configuration.getMaxIdentiferLength() - loopCountString.length()))\n+          + loopCountString;\n+      loopCount++;\n     }\n+    return newColumnName;\n+  }\n \n-    private String fixColumnName(String proposedName) {\n-        Pattern disallowed = configuration.getCompiledRegularExpressionMatchDisallowed();\n-        if (disallowed == null) {\n-            proposedName = StringUtils.replaceAll(proposedName, \"\\u0000\", \"\");\n-        } else {\n-            proposedName = disallowed.matcher(proposedName).replaceAll(\"\");\n-        }\n-\n-        // check size limits - then truncate\n-        int length = proposedName.length(), maxLength = configuration.getMaxIdentiferLength();\n-        if (length > maxLength) {\n-            proposedName = proposedName.substring(0, maxLength);\n-        }\n-\n-        return proposedName;\n+  private boolean isAllowableColumnName(String proposedName) {\n+    // check null\n+    if (proposedName == null) {\n+      return false;\n+    }\n+    // check size limits\n+    int length = proposedName.length();\n+    if (length > configuration.getMaxIdentiferLength() || length == 0) {\n+      return false;\n+    }\n+    Pattern allowed = configuration.getCompiledRegularExpressionMatchAllowed();\n+    return allowed == null || allowed.matcher(proposedName).matches();\n+  }\n+\n+  private String fixColumnName(String proposedName) {\n+    Pattern disallowed =\n+        configuration.getCompiledRegularExpressionMatchDisallowed();\n+    if (disallowed == null) {\n+      proposedName = StringUtils.replaceAll(proposedName, \"\\u0000\", \"\");\n+    } else {\n+      proposedName = disallowed.matcher(proposedName).replaceAll(\"\");\n     }\n \n-    public ColumnNamerConfiguration getConfiguration() {\n-        return configuration;\n+    // check size limits - then truncate\n+    int length = proposedName.length(), maxLength =\n+        configuration.getMaxIdentiferLength();\n+    if (length > maxLength) {\n+      proposedName = proposedName.substring(0, maxLength);\n     }\n \n+    return proposedName;\n+  }\n+\n+  public ColumnNamerConfiguration getConfiguration() {\n+    return configuration;\n+  }\n+\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/102/ColumnNamer.java\nindex 1a93d42773..0417d7c09a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/102/ColumnNamer.java\n@@ -44,8 +44,7 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n@@ -109,9 +108,7 @@ public class ColumnNamer {\n         while (existingColumnNames.contains(newColumnName)) {\n             String loopCountString = \"_\" + loopCount;\n             newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n-                    + loopCountString;\n-            loopCount++;\n+                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length())) + loopCountString; loopCount++;\n         }\n         return newColumnName;\n     }\n@@ -151,4 +148,4 @@ public class ColumnNamer {\n         return configuration;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/102/ColumnNamer.java\nindex 1a93d42773..cd49821100 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/102/ColumnNamer.java\n@@ -13,14 +13,14 @@ import org.h2.expression.Expression;\n /**\n  * A factory for column names.\n  */\n+\n+\n public class ColumnNamer {\n \n     private static final String DEFAULT_COLUMN_NAME = \"DEFAULT\";\n-\n     private final Session session;\n-\n     private final ColumnNamerConfiguration configuration;\n-    private final Set<String> existingColumnNames = new HashSet<>();\n+    private final Set<String> existingColumnNames = new HashSet< >();\n \n     public ColumnNamer(Session session) {\n         this.session = session;\n@@ -44,8 +44,9 @@ public class ColumnNamer {\n      * @param columnNameOverides array of overriding column names\n      * @return the new column name\n      */\n-    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides)\n-    {\n+\n+\n+    public String getColumnName(Expression columnExp, int indexOfColumn, String[] columnNameOverides) {\n         String columnNameOverride = null;\n         if (columnNameOverides != null && columnNameOverides.length > indexOfColumn) {\n             columnNameOverride = columnNameOverides[indexOfColumn];\n@@ -61,22 +62,26 @@ public class ColumnNamer {\n      * @param columnNameOverride single overriding column name\n      * @return the new column name\n      */\n+\n+\n     public String getColumnName(Expression columnExp, int indexOfColumn, String columnNameOverride) {\n         // try a name from the column name override\n         String columnName = getColumnName(columnNameOverride, null);\n         if (columnName == null) {\n             // try a name from the column alias\n-            columnName = getColumnName(columnExp.getAlias(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+            columnName = getColumnName(columnExp.getAlias(session, indexOfColumn),\n+                DEFAULT_COLUMN_NAME);\n             if (columnName == null) {\n                 // try a name derived from the column expression SQL\n-                columnName = getColumnName(columnExp.getColumnName(session, indexOfColumn), DEFAULT_COLUMN_NAME);\n+                columnName = getColumnName(columnExp.getColumnName(session, indexOfColumn),\n+                    DEFAULT_COLUMN_NAME);\n                 if (columnName == null) {\n                     // try a name derived from the column expression plan SQL\n-                    columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS), DEFAULT_COLUMN_NAME);\n+                    columnName = getColumnName(columnExp.getSQL(HasSQL.TRACE_SQL_FLAGS),\n+                        DEFAULT_COLUMN_NAME);\n                     // go with a innocuous default name pattern\n                     if (columnName == null) {\n-                        columnName = configuration.getDefaultColumnNamePattern()\n-                                .replace(\"$$\", Integer.toString(indexOfColumn + 1));\n+                        columnName = configuration.getDefaultColumnNamePattern().replace(\"$$\", Integer.toString(indexOfColumn + 1));\n                     }\n                 }\n             }\n@@ -108,9 +113,7 @@ public class ColumnNamer {\n         int loopCount = 2;\n         while (existingColumnNames.contains(newColumnName)) {\n             String loopCountString = \"_\" + loopCount;\n-            newColumnName = columnName.substring(0,\n-                    Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length()))\n-                    + loopCountString;\n+            newColumnName = columnName.substring(0, Math.min(columnName.length(), configuration.getMaxIdentiferLength() - loopCountString.length())) + loopCountString;\n             loopCount++;\n         }\n         return newColumnName;\n@@ -143,12 +146,12 @@ public class ColumnNamer {\n         if (length > maxLength) {\n             proposedName = proposedName.substring(0, maxLength);\n         }\n-\n         return proposedName;\n     }\n \n+\n     public ColumnNamerConfiguration getConfiguration() {\n         return configuration;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/102/ColumnNamer.java\nindex 1a93d42773..891965f905 100644\nBinary files a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java and b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/102/ColumnNamer.java differ\n",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/102/ColumnNamer.java\nindex 1a93d42773..891965f905 100644\nBinary files a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/102/ColumnNamer.java and b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/102/ColumnNamer.java differ\n",
            "diff_size": 0
        }
    ]
}