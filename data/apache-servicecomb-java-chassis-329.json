{
    "error_id": "329",
    "information": {
        "errors": [
            {
                "line": "194",
                "column": "80",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private boolean isInQueueTimeout() {\n    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/329/AbstractRestInvocation.java\nindex 22cbc5313b..407eb4bab7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/329/AbstractRestInvocation.java\n@@ -191,139 +191,139 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n-  }\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+}\n \n-  protected void runOnExecutor() {\n-    invocation.onExecuteStart();\n+protected void runOnExecutor() {\n+  invocation.onExecuteStart();\n \n-    invoke();\n-  }\n+  invoke();\n+}\n \n-  protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n+protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n \n-  // create a invocation without args setted\n-  protected abstract void createInvocation();\n+// create a invocation without args setted\n+protected abstract void createInvocation();\n \n-  public void invoke() {\n-    try {\n-      Response response = prepareInvoke();\n-      if (response != null) {\n-        sendResponseQuietly(response);\n-        return;\n-      }\n-\n-      doInvoke();\n-    } catch (Throwable e) {\n-      LOGGER.error(\"unknown rest exception.\", e);\n-      sendFailResponse(e);\n+public void invoke() {\n+  try {\n+    Response response = prepareInvoke();\n+    if (response != null) {\n+      sendResponseQuietly(response);\n+      return;\n     }\n+\n+    doInvoke();\n+  } catch (Throwable e) {\n+    LOGGER.error(\"unknown rest exception.\", e);\n+    sendFailResponse(e);\n   }\n+}\n \n-  protected Response prepareInvoke() throws Throwable {\n-    this.initProduceProcessor();\n-    invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n+protected Response prepareInvoke() throws Throwable {\n+  this.initProduceProcessor();\n+  invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n \n-    invocation.getInvocationStageTrace().startServerFiltersRequest();\n-    for (HttpServerFilter filter : httpServerFilters) {\n-      if (filter.enabled()) {\n-        Response response = filter.afterReceiveRequest(invocation, requestEx);\n-        if (response != null) {\n-          return response;\n-        }\n+  invocation.getInvocationStageTrace().startServerFiltersRequest();\n+  for (HttpServerFilter filter : httpServerFilters) {\n+    if (filter.enabled()) {\n+      Response response = filter.afterReceiveRequest(invocation, requestEx);\n+      if (response != null) {\n+        return response;\n       }\n     }\n-\n-    return null;\n   }\n \n-  protected void doInvoke() throws Throwable {\n-    invocation.getInvocationStageTrace().startHandlersRequest();\n-    invocation.next(resp -> sendResponseQuietly(resp));\n-  }\n+  return null;\n+}\n \n-  public void sendFailResponse(Throwable throwable) {\n-    if (produceProcessor == null) {\n-      produceProcessor = ProduceProcessorManager.DEFAULT_PROCESSOR;\n-    }\n+protected void doInvoke() throws Throwable {\n+  invocation.getInvocationStageTrace().startHandlersRequest();\n+  invocation.next(resp -> sendResponseQuietly(resp));\n+}\n \n-    Response response = Response.createProducerFail(throwable);\n-    sendResponseQuietly(response);\n+public void sendFailResponse(Throwable throwable) {\n+  if (produceProcessor == null) {\n+    produceProcessor = ProduceProcessorManager.DEFAULT_PROCESSOR;\n   }\n \n-  protected void sendResponseQuietly(Response response) {\n-    if (invocation != null) {\n-      invocation.getInvocationStageTrace().finishHandlersResponse();\n-    }\n-    try {\n-      sendResponse(response);\n-    } catch (Throwable e) {\n-      LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n-    }\n+  Response response = Response.createProducerFail(throwable);\n+  sendResponseQuietly(response);\n+}\n+\n+protected void sendResponseQuietly(Response response) {\n+  if (invocation != null) {\n+    invocation.getInvocationStageTrace().finishHandlersResponse();\n+  }\n+  try {\n+    sendResponse(response);\n+  } catch (Throwable e) {\n+    LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n   }\n+}\n \n-  @SuppressWarnings(\"deprecation\")\n-  protected void sendResponse(Response response) {\n-    if (response.getHeaders().getHeaderMap() != null) {\n-      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n-        for (Object value : entry.getValue()) {\n-          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n-              && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n-            responseEx.addHeader(entry.getKey(), String.valueOf(value));\n-          }\n+@SuppressWarnings(\"deprecation\")\n+protected void sendResponse(Response response) {\n+  if (response.getHeaders().getHeaderMap() != null) {\n+    for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n+      for (Object value : entry.getValue()) {\n+        if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n+            && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n+          responseEx.addHeader(entry.getKey(), String.valueOf(value));\n         }\n       }\n     }\n-    responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n-    responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n-    responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n-\n-    executeHttpServerFilters(response);\n   }\n+  responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n+  responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n+  responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n \n-  protected void executeHttpServerFilters(Response response) {\n-    HttpServerFilterBeforeSendResponseExecutor exec =\n-        new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n-    CompletableFuture<Void> future = exec.run();\n-    future.whenComplete((v, e) -> {\n-      if (invocation != null) {\n-        invocation.getInvocationStageTrace().finishServerFiltersResponse();\n-      }\n-\n-      onExecuteHttpServerFiltersFinish(response, e);\n-    });\n-  }\n+  executeHttpServerFilters(response);\n+}\n \n-  protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n-    if (e != null) {\n-      LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+protected void executeHttpServerFilters(Response response) {\n+  HttpServerFilterBeforeSendResponseExecutor exec =\n+      new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n+  CompletableFuture<Void> future = exec.run();\n+  future.whenComplete((v, e) -> {\n+    if (invocation != null) {\n+      invocation.getInvocationStageTrace().finishServerFiltersResponse();\n     }\n \n-    try {\n-      responseEx.flushBuffer();\n-    } catch (Throwable flushException) {\n-      LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n-    }\n+    onExecuteHttpServerFiltersFinish(response, e);\n+  });\n+}\n \n-    try {\n-      requestEx.getAsyncContext().complete();\n-    } catch (Throwable completeException) {\n-      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n-    }\n+protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n+  if (e != null) {\n+    LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+  }\n \n-    // if failed to locate path, then will not create invocation\n-    // TODO: statistics this case\n-    if (invocation != null) {\n-      invocation.onFinish(response);\n-    }\n+  try {\n+    responseEx.flushBuffer();\n+  } catch (Throwable flushException) {\n+    LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n+  }\n+\n+  try {\n+    requestEx.getAsyncContext().complete();\n+  } catch (Throwable completeException) {\n+    LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n   }\n \n-  private String getMicroserviceQualifiedName() {\n-    return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n+  // if failed to locate path, then will not create invocation\n+  // TODO: statistics this case\n+  if (invocation != null) {\n+    invocation.onFinish(response);\n   }\n }\n+\n+private String getMicroserviceQualifiedName() {\n+  return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n+}\n+}\n",
            "diff_size": 134
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "194",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/329/AbstractRestInvocation.java\nindex 22cbc5313b..5d5c088869 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/329/AbstractRestInvocation.java\n@@ -191,8 +191,7 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n@@ -326,4 +325,4 @@ public abstract class AbstractRestInvocation {\n   private String getMicroserviceQualifiedName() {\n     return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/329/AbstractRestInvocation.java\nindex 22cbc5313b..407eb4bab7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/329/AbstractRestInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/329/AbstractRestInvocation.java\n@@ -191,139 +191,139 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n-  }\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+}\n \n-  protected void runOnExecutor() {\n-    invocation.onExecuteStart();\n+protected void runOnExecutor() {\n+  invocation.onExecuteStart();\n \n-    invoke();\n-  }\n+  invoke();\n+}\n \n-  protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n+protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n \n-  // create a invocation without args setted\n-  protected abstract void createInvocation();\n+// create a invocation without args setted\n+protected abstract void createInvocation();\n \n-  public void invoke() {\n-    try {\n-      Response response = prepareInvoke();\n-      if (response != null) {\n-        sendResponseQuietly(response);\n-        return;\n-      }\n-\n-      doInvoke();\n-    } catch (Throwable e) {\n-      LOGGER.error(\"unknown rest exception.\", e);\n-      sendFailResponse(e);\n+public void invoke() {\n+  try {\n+    Response response = prepareInvoke();\n+    if (response != null) {\n+      sendResponseQuietly(response);\n+      return;\n     }\n+\n+    doInvoke();\n+  } catch (Throwable e) {\n+    LOGGER.error(\"unknown rest exception.\", e);\n+    sendFailResponse(e);\n   }\n+}\n \n-  protected Response prepareInvoke() throws Throwable {\n-    this.initProduceProcessor();\n-    invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n+protected Response prepareInvoke() throws Throwable {\n+  this.initProduceProcessor();\n+  invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n \n-    invocation.getInvocationStageTrace().startServerFiltersRequest();\n-    for (HttpServerFilter filter : httpServerFilters) {\n-      if (filter.enabled()) {\n-        Response response = filter.afterReceiveRequest(invocation, requestEx);\n-        if (response != null) {\n-          return response;\n-        }\n+  invocation.getInvocationStageTrace().startServerFiltersRequest();\n+  for (HttpServerFilter filter : httpServerFilters) {\n+    if (filter.enabled()) {\n+      Response response = filter.afterReceiveRequest(invocation, requestEx);\n+      if (response != null) {\n+        return response;\n       }\n     }\n-\n-    return null;\n   }\n \n-  protected void doInvoke() throws Throwable {\n-    invocation.getInvocationStageTrace().startHandlersRequest();\n-    invocation.next(resp -> sendResponseQuietly(resp));\n-  }\n+  return null;\n+}\n \n-  public void sendFailResponse(Throwable throwable) {\n-    if (produceProcessor == null) {\n-      produceProcessor = ProduceProcessorManager.DEFAULT_PROCESSOR;\n-    }\n+protected void doInvoke() throws Throwable {\n+  invocation.getInvocationStageTrace().startHandlersRequest();\n+  invocation.next(resp -> sendResponseQuietly(resp));\n+}\n \n-    Response response = Response.createProducerFail(throwable);\n-    sendResponseQuietly(response);\n+public void sendFailResponse(Throwable throwable) {\n+  if (produceProcessor == null) {\n+    produceProcessor = ProduceProcessorManager.DEFAULT_PROCESSOR;\n   }\n \n-  protected void sendResponseQuietly(Response response) {\n-    if (invocation != null) {\n-      invocation.getInvocationStageTrace().finishHandlersResponse();\n-    }\n-    try {\n-      sendResponse(response);\n-    } catch (Throwable e) {\n-      LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n-    }\n+  Response response = Response.createProducerFail(throwable);\n+  sendResponseQuietly(response);\n+}\n+\n+protected void sendResponseQuietly(Response response) {\n+  if (invocation != null) {\n+    invocation.getInvocationStageTrace().finishHandlersResponse();\n+  }\n+  try {\n+    sendResponse(response);\n+  } catch (Throwable e) {\n+    LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n   }\n+}\n \n-  @SuppressWarnings(\"deprecation\")\n-  protected void sendResponse(Response response) {\n-    if (response.getHeaders().getHeaderMap() != null) {\n-      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n-        for (Object value : entry.getValue()) {\n-          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n-              && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n-            responseEx.addHeader(entry.getKey(), String.valueOf(value));\n-          }\n+@SuppressWarnings(\"deprecation\")\n+protected void sendResponse(Response response) {\n+  if (response.getHeaders().getHeaderMap() != null) {\n+    for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n+      for (Object value : entry.getValue()) {\n+        if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n+            && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n+          responseEx.addHeader(entry.getKey(), String.valueOf(value));\n         }\n       }\n     }\n-    responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n-    responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n-    responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n-\n-    executeHttpServerFilters(response);\n   }\n+  responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n+  responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n+  responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n \n-  protected void executeHttpServerFilters(Response response) {\n-    HttpServerFilterBeforeSendResponseExecutor exec =\n-        new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n-    CompletableFuture<Void> future = exec.run();\n-    future.whenComplete((v, e) -> {\n-      if (invocation != null) {\n-        invocation.getInvocationStageTrace().finishServerFiltersResponse();\n-      }\n-\n-      onExecuteHttpServerFiltersFinish(response, e);\n-    });\n-  }\n+  executeHttpServerFilters(response);\n+}\n \n-  protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n-    if (e != null) {\n-      LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+protected void executeHttpServerFilters(Response response) {\n+  HttpServerFilterBeforeSendResponseExecutor exec =\n+      new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n+  CompletableFuture<Void> future = exec.run();\n+  future.whenComplete((v, e) -> {\n+    if (invocation != null) {\n+      invocation.getInvocationStageTrace().finishServerFiltersResponse();\n     }\n \n-    try {\n-      responseEx.flushBuffer();\n-    } catch (Throwable flushException) {\n-      LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n-    }\n+    onExecuteHttpServerFiltersFinish(response, e);\n+  });\n+}\n \n-    try {\n-      requestEx.getAsyncContext().complete();\n-    } catch (Throwable completeException) {\n-      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n-    }\n+protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n+  if (e != null) {\n+    LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+  }\n \n-    // if failed to locate path, then will not create invocation\n-    // TODO: statistics this case\n-    if (invocation != null) {\n-      invocation.onFinish(response);\n-    }\n+  try {\n+    responseEx.flushBuffer();\n+  } catch (Throwable flushException) {\n+    LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n+  }\n+\n+  try {\n+    requestEx.getAsyncContext().complete();\n+  } catch (Throwable completeException) {\n+    LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n+        getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n   }\n \n-  private String getMicroserviceQualifiedName() {\n-    return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n+  // if failed to locate path, then will not create invocation\n+  // TODO: statistics this case\n+  if (invocation != null) {\n+    invocation.onFinish(response);\n   }\n }\n+\n+private String getMicroserviceQualifiedName() {\n+  return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n+}\n+}\n",
            "diff_size": 134
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "194",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}