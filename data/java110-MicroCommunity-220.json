{
    "error_id": "220",
    "information": {
        "errors": [
            {
                "line": "45",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 214).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n\n        List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n\n        if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n            return inspectionRoutes;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..ba987443f2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -40,9 +40,7 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n \n         if (page != PageDto.DEFAULT_PAGE) {\n             inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n-        }\n-\n-        List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n+        } List<InspectionRouteDto>inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n \n         if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n             return inspectionRoutes;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..6676c2c6f9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -25,52 +25,53 @@ import java.util.List;\n @RestController\n public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implements IInspectionRouteInnerServiceSMO {\n \n-    @Autowired\n-    private IInspectionRouteServiceDao inspectionRouteServiceDaoImpl;\n+  @Autowired\n+  private IInspectionRouteServiceDao inspectionRouteServiceDaoImpl;\n \n-    @Autowired\n-    private IUserInnerServiceSMO userInnerServiceSMOImpl;\n+  @Autowired\n+  private IUserInnerServiceSMO userInnerServiceSMOImpl;\n \n-    @Override\n-    public List<InspectionRouteDto> queryInspectionRoutes(@RequestBody  InspectionRouteDto inspectionRouteDto) {\n+  @Override\n+  public List<InspectionRouteDto> queryInspectionRoutes(@RequestBody InspectionRouteDto inspectionRouteDto) {\n \n-        //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n+    //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n \n-        int page = inspectionRouteDto.getPage();\n+    int page = inspectionRouteDto.getPage();\n \n-        if (page != PageDto.DEFAULT_PAGE) {\n-            inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n-        }\n-\n-        List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n+    if (page != PageDto.DEFAULT_PAGE) {\n+      inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n+    }\n \n-        if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n-            return inspectionRoutes;\n-        }\n+    List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil\n+      .covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)),\n+        InspectionRouteDto.class);\n \n-        return inspectionRoutes;\n+    if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n+      return inspectionRoutes;\n     }\n \n+    return inspectionRoutes;\n+  }\n \n \n+  @Override\n+  public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n+    return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));\n+  }\n \n-    @Override\n-    public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n-        return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));    }\n+  public IInspectionRouteServiceDao getInspectionRouteServiceDaoImpl() {\n+    return inspectionRouteServiceDaoImpl;\n+  }\n \n-    public IInspectionRouteServiceDao getInspectionRouteServiceDaoImpl() {\n-        return inspectionRouteServiceDaoImpl;\n-    }\n+  public void setInspectionRouteServiceDaoImpl(IInspectionRouteServiceDao inspectionRouteServiceDaoImpl) {\n+    this.inspectionRouteServiceDaoImpl = inspectionRouteServiceDaoImpl;\n+  }\n \n-    public void setInspectionRouteServiceDaoImpl(IInspectionRouteServiceDao inspectionRouteServiceDaoImpl) {\n-        this.inspectionRouteServiceDaoImpl = inspectionRouteServiceDaoImpl;\n-    }\n+  public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n+    return userInnerServiceSMOImpl;\n+  }\n \n-    public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n-        return userInnerServiceSMOImpl;\n-    }\n-\n-    public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n-        this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n-    }\n+  public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n+    this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n+  }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..addab3783c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -51,10 +51,7 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n         return inspectionRoutes;\n     }\n \n-\n-\n-\n-    @Override\n+@Override\n     public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n         return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));    }\n \n@@ -73,4 +70,4 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n     public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n         this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..e836668d0b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -1,6 +1,5 @@\n package com.java110.community.smo.impl;\n \n-\n import com.java110.community.dao.IInspectionRouteServiceDao;\n import com.java110.utils.util.BeanConvertUtil;\n import com.java110.core.base.smo.BaseServiceSMO;\n@@ -11,7 +10,6 @@ import com.java110.dto.inspectionRoute.InspectionRouteDto;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RestController;\n-\n import java.util.List;\n \n /**\n@@ -22,6 +20,8 @@ import java.util.List;\n  * @Version 1.0\n  * add by wuxw 2019/4/24\n  **/\n+\n+\n @RestController\n public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implements IInspectionRouteInnerServiceSMO {\n \n@@ -32,18 +32,15 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n     private IUserInnerServiceSMO userInnerServiceSMOImpl;\n \n     @Override\n-    public List<InspectionRouteDto> queryInspectionRoutes(@RequestBody  InspectionRouteDto inspectionRouteDto) {\n+    public List<InspectionRouteDto> queryInspectionRoutes(@RequestBody InspectionRouteDto inspectionRouteDto) {\n \n         //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n-\n         int page = inspectionRouteDto.getPage();\n-\n         if (page != PageDto.DEFAULT_PAGE) {\n             inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n         }\n \n         List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n-\n         if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n             return inspectionRoutes;\n         }\n@@ -52,11 +49,10 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n     }\n \n \n-\n-\n     @Override\n     public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n-        return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));    }\n+        return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));\n+    }\n \n     public IInspectionRouteServiceDao getInspectionRouteServiceDaoImpl() {\n         return inspectionRouteServiceDaoImpl;\n@@ -73,4 +69,4 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n     public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n         this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "column": "56",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "44",
                    "column": "56",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "44",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "45",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..34c3afdacb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -41,36 +41,39 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n         if (page != PageDto.DEFAULT_PAGE) {\n             inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n         }\n+            List < InspectionRouteDto >inspectionRoutes=BeanConvertUtil.covertBeanList (inspectionRouteServiceDaoImpl.\n+        getInspectionRouteInfo ( BeanConvertUtil .beanCovertMap(inspectionRouteDto)),\n \n-        List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n+        InspectionRouteDto .class);\n \n-        if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n-            return inspectionRoutes;\n-        }\n+         if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n+             return inspectionRoutes;\n+         }\n \n-        return inspectionRoutes;\n-    }\n+         return inspectionRoutes;\n+     }\n \n \n \n \n-    @Override\n-    public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n-        return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));    }\n+     @Override\n+     public int queryInspectionRoutesCount(@RequestBody InspectionRouteDto inspectionRouteDto) {\n+         return inspectionRouteServiceDaoImpl.queryInspectionRoutesCount(BeanConvertUtil.beanCovertMap(inspectionRouteDto));    }\n \n-    public IInspectionRouteServiceDao getInspectionRouteServiceDaoImpl() {\n-        return inspectionRouteServiceDaoImpl;\n-    }\n+     public IInspectionRouteServiceDao getInspectionRouteServiceDaoImpl() {\n+         return inspectionRouteServiceDaoImpl;\n+     }\n \n-    public void setInspectionRouteServiceDaoImpl(IInspectionRouteServiceDao inspectionRouteServiceDaoImpl) {\n-        this.inspectionRouteServiceDaoImpl = inspectionRouteServiceDaoImpl;\n-    }\n+     public void setInspectionRouteServiceDaoImpl(IInspectionRouteServiceDao inspectionRouteServiceDaoImpl) {\n+         this.inspectionRouteServiceDaoImpl = inspectionRouteServiceDaoImpl;\n+     }\n \n-    public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n-        return userInnerServiceSMOImpl;\n-    }\n+     public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n+         return userInnerServiceSMOImpl;\n+     }\n \n-    public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n-        this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n-    }\n-}\n+     public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n+         this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/220/InspectionRouteInnerServiceSMOImpl.java\nindex 8980047fe6..ba987443f2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/220/InspectionRouteInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/220/InspectionRouteInnerServiceSMOImpl.java\n@@ -40,9 +40,7 @@ public class InspectionRouteInnerServiceSMOImpl extends BaseServiceSMO implement\n \n         if (page != PageDto.DEFAULT_PAGE) {\n             inspectionRouteDto.setPage((page - 1) * inspectionRouteDto.getRow());\n-        }\n-\n-        List<InspectionRouteDto> inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n+        } List<InspectionRouteDto>inspectionRoutes = BeanConvertUtil.covertBeanList(inspectionRouteServiceDaoImpl.getInspectionRouteInfo(BeanConvertUtil.beanCovertMap(inspectionRouteDto)), InspectionRouteDto.class);\n \n         if (inspectionRoutes == null || inspectionRoutes.size() == 0) {\n             return inspectionRoutes;\n",
            "diff_size": 3
        }
    ]
}