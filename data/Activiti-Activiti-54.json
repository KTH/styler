{
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.ArrayList;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..dc779b2e96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/54/AbstractBpmnActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..652aa2fc50 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/54/AbstractBpmnActivityBehavior.java\n@@ -34,89 +34,87 @@ import org.activiti.engine.impl.util.ProcessDefinitionUtil;\n \n /**\n  * Denotes an 'activity' in the sense of BPMN 2.0: a parent class for all tasks, subprocess and callActivity.\n- *\n-\n  */\n public class AbstractBpmnActivityBehavior extends FlowNodeActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  protected MultiInstanceActivityBehavior multiInstanceActivityBehavior;\n-\n-  /**\n-   * Subclasses that call leave() will first pass through this method, before the regular {@link FlowNodeActivityBehavior#leave(ActivityExecution)} is called. This way, we can check if the activity\n-   * has loop characteristics, and delegate to the behavior if this is the case.\n-   */\n-  public void leave(DelegateExecution execution) {\n-    FlowElement currentFlowElement = execution.getCurrentFlowElement();\n-    Collection<BoundaryEvent> boundaryEvents = findBoundaryEventsForFlowNode(execution.getProcessDefinitionId(), currentFlowElement);\n-    if (CollectionUtil.isNotEmpty(boundaryEvents)) {\n-      executeCompensateBoundaryEvents(boundaryEvents, execution);\n+    private static final long serialVersionUID = 1L;\n+\n+    protected MultiInstanceActivityBehavior multiInstanceActivityBehavior;\n+\n+    /**\n+     * Subclasses that call leave() will first pass through this method, before the regular {@link FlowNodeActivityBehavior#leave(ActivityExecution)} is called. This way, we can check if the activity\n+     * has loop characteristics, and delegate to the behavior if this is the case.\n+     */\n+    public void leave(DelegateExecution execution) {\n+        FlowElement currentFlowElement = execution.getCurrentFlowElement();\n+        Collection<BoundaryEvent> boundaryEvents = findBoundaryEventsForFlowNode(execution.getProcessDefinitionId(), currentFlowElement);\n+        if (CollectionUtil.isNotEmpty(boundaryEvents)) {\n+            executeCompensateBoundaryEvents(boundaryEvents, execution);\n+        }\n+        if (!hasLoopCharacteristics()) {\n+            super.leave(execution);\n+        } else if (hasMultiInstanceCharacteristics() && !execution.isEnded()) {\n+            multiInstanceActivityBehavior.leave(execution);\n+        }\n     }\n-    if (!hasLoopCharacteristics()) {\n-      super.leave(execution);\n-    } else if (hasMultiInstanceCharacteristics() && !execution.isEnded()) {\n-      multiInstanceActivityBehavior.leave(execution);\n-    }\n-  }\n-\n-  protected void executeCompensateBoundaryEvents(Collection<BoundaryEvent> boundaryEvents, DelegateExecution execution) {\n \n-    // The parent execution becomes a scope, and a child execution is created for each of the boundary events\n-    for (BoundaryEvent boundaryEvent : boundaryEvents) {\n+    protected void executeCompensateBoundaryEvents(Collection<BoundaryEvent> boundaryEvents, DelegateExecution execution) {\n \n-      if (CollectionUtil.isEmpty(boundaryEvent.getEventDefinitions())) {\n-        continue;\n-      }\n+        // The parent execution becomes a scope, and a child execution is created for each of the boundary events\n+        for (BoundaryEvent boundaryEvent : boundaryEvents) {\n \n-      if (boundaryEvent.getEventDefinitions().get(0) instanceof CompensateEventDefinition == false) {\n-        continue;\n-      }\n+            if (CollectionUtil.isEmpty(boundaryEvent.getEventDefinitions())) {\n+                continue;\n+            }\n \n-      ExecutionEntity childExecutionEntity = Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity) execution);\n-      childExecutionEntity.setParentId(execution.getId());\n-      childExecutionEntity.setCurrentFlowElement(boundaryEvent);\n-      childExecutionEntity.setScope(false);\n+            if (boundaryEvent.getEventDefinitions().get(0) instanceof CompensateEventDefinition == false) {\n+                continue;\n+            }\n \n-      ActivityBehavior boundaryEventBehavior = ((ActivityBehavior) boundaryEvent.getBehavior());\n-      boundaryEventBehavior.execute(childExecutionEntity);\n-    }\n+            ExecutionEntity childExecutionEntity = Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity) execution);\n+            childExecutionEntity.setParentId(execution.getId());\n+            childExecutionEntity.setCurrentFlowElement(boundaryEvent);\n+            childExecutionEntity.setScope(false);\n \n-  }\n+            ActivityBehavior boundaryEventBehavior = ((ActivityBehavior) boundaryEvent.getBehavior());\n+            boundaryEventBehavior.execute(childExecutionEntity);\n+        }\n \n-  protected Collection<BoundaryEvent> findBoundaryEventsForFlowNode(final String processDefinitionId, final FlowElement flowElement) {\n-    Process process = getProcessDefinition(processDefinitionId);\n+    }\n \n-    // This could be cached or could be done at parsing time\n-    List<BoundaryEvent> results = new ArrayList<BoundaryEvent>(1);\n-    Collection<BoundaryEvent> boundaryEvents = process.findFlowElementsOfType(BoundaryEvent.class, true);\n-    for (BoundaryEvent boundaryEvent : boundaryEvents) {\n-      if (boundaryEvent.getAttachedToRefId() != null && boundaryEvent.getAttachedToRefId().equals(flowElement.getId())) {\n-        results.add(boundaryEvent);\n-      }\n+    protected Collection<BoundaryEvent> findBoundaryEventsForFlowNode(final String processDefinitionId, final FlowElement flowElement) {\n+        Process process = getProcessDefinition(processDefinitionId);\n+\n+        // This could be cached or could be done at parsing time\n+        List<BoundaryEvent> results = new ArrayList<BoundaryEvent>(1);\n+        Collection<BoundaryEvent> boundaryEvents = process.findFlowElementsOfType(BoundaryEvent.class, true);\n+        for (BoundaryEvent boundaryEvent : boundaryEvents) {\n+            if (boundaryEvent.getAttachedToRefId() != null && boundaryEvent.getAttachedToRefId().equals(flowElement.getId())) {\n+                results.add(boundaryEvent);\n+            }\n+        }\n+        return results;\n     }\n-    return results;\n-  }\n \n-  protected Process getProcessDefinition(String processDefinitionId) {\n-    // TODO: must be extracted / cache should be accessed in another way\n-    return ProcessDefinitionUtil.getProcess(processDefinitionId);\n-  }\n+    protected Process getProcessDefinition(String processDefinitionId) {\n+        // TODO: must be extracted / cache should be accessed in another way\n+        return ProcessDefinitionUtil.getProcess(processDefinitionId);\n+    }\n \n-  protected boolean hasLoopCharacteristics() {\n-    return hasMultiInstanceCharacteristics();\n-  }\n+    protected boolean hasLoopCharacteristics() {\n+        return hasMultiInstanceCharacteristics();\n+    }\n \n-  protected boolean hasMultiInstanceCharacteristics() {\n-    return multiInstanceActivityBehavior != null;\n-  }\n+    protected boolean hasMultiInstanceCharacteristics() {\n+        return multiInstanceActivityBehavior != null;\n+    }\n \n-  public MultiInstanceActivityBehavior getMultiInstanceActivityBehavior() {\n-    return multiInstanceActivityBehavior;\n-  }\n+    public MultiInstanceActivityBehavior getMultiInstanceActivityBehavior() {\n+        return multiInstanceActivityBehavior;\n+    }\n \n-  public void setMultiInstanceActivityBehavior(MultiInstanceActivityBehavior multiInstanceActivityBehavior) {\n-    this.multiInstanceActivityBehavior = multiInstanceActivityBehavior;\n-  }\n+    public void setMultiInstanceActivityBehavior(MultiInstanceActivityBehavior multiInstanceActivityBehavior) {\n+        this.multiInstanceActivityBehavior = multiInstanceActivityBehavior;\n+    }\n \n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..c7b97a90d5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/54/AbstractBpmnActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.ArrayList;\n@@ -119,4 +118,4 @@ public class AbstractBpmnActivityBehavior extends FlowNodeActivityBehavior {\n     this.multiInstanceActivityBehavior = multiInstanceActivityBehavior;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 68.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..641fb0b217 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/54/AbstractBpmnActivityBehavior.java\n@@ -20,7 +20,6 @@ package org.activiti.engine.impl.bpmn.behavior;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n-\n import org.activiti.bpmn.model.BoundaryEvent;\n import org.activiti.bpmn.model.CompensateEventDefinition;\n import org.activiti.bpmn.model.FlowElement;\n@@ -37,86 +36,88 @@ import org.activiti.engine.impl.util.ProcessDefinitionUtil;\n  *\n \n  */\n-public class AbstractBpmnActivityBehavior extends FlowNodeActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n \n-  protected MultiInstanceActivityBehavior multiInstanceActivityBehavior;\n+public class AbstractBpmnActivityBehavior extends FlowNodeActivityBehavior {\n+\n+    private static final long serialVersionUID = 1L;\n+    protected MultiInstanceActivityBehavior multiInstanceActivityBehavior;\n \n   /**\n    * Subclasses that call leave() will first pass through this method, before the regular {@link FlowNodeActivityBehavior#leave(ActivityExecution)} is called. This way, we can check if the activity\n    * has loop characteristics, and delegate to the behavior if this is the case.\n    */\n-  public void leave(DelegateExecution execution) {\n+    public void leave(DelegateExecution execution) {\n     FlowElement currentFlowElement = execution.getCurrentFlowElement();\n-    Collection<BoundaryEvent> boundaryEvents = findBoundaryEventsForFlowNode(execution.getProcessDefinitionId(), currentFlowElement);\n+    Collection<BoundaryEvent> boundaryEvents = findBoundaryEventsForFlowNode(execution.getProcessDefinitionId(),\n+                                                                             currentFlowElement);\n     if (CollectionUtil.isNotEmpty(boundaryEvents)) {\n-      executeCompensateBoundaryEvents(boundaryEvents, execution);\n+        executeCompensateBoundaryEvents(boundaryEvents, execution);\n     }\n+\n     if (!hasLoopCharacteristics()) {\n-      super.leave(execution);\n+        super.leave(execution);\n     } else if (hasMultiInstanceCharacteristics() && !execution.isEnded()) {\n       multiInstanceActivityBehavior.leave(execution);\n     }\n-  }\n+    }\n \n-  protected void executeCompensateBoundaryEvents(Collection<BoundaryEvent> boundaryEvents, DelegateExecution execution) {\n+    protected void executeCompensateBoundaryEvents(Collection<BoundaryEvent> boundaryEvents, DelegateExecution execution) {\n \n     // The parent execution becomes a scope, and a child execution is created for each of the boundary events\n-    for (BoundaryEvent boundaryEvent : boundaryEvents) {\n+for (BoundaryEvent boundaryEvent : boundaryEvents) {\n+        if (CollectionUtil.isEmpty(boundaryEvent.getEventDefinitions())) {\n+    continue;\n+        }\n \n-      if (CollectionUtil.isEmpty(boundaryEvent.getEventDefinitions())) {\n-        continue;\n-      }\n+        if (boundaryEvent.getEventDefinitions().get(0) instanceof CompensateEventDefinition == false) {\n+    continue;\n+        }\n \n-      if (boundaryEvent.getEventDefinitions().get(0) instanceof CompensateEventDefinition == false) {\n-        continue;\n-      }\n+        ExecutionEntity childExecutionEntity = Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity) execution);\n+        childExecutionEntity.setParentId(execution.getId());\n+        childExecutionEntity.setCurrentFlowElement(boundaryEvent);\n+        childExecutionEntity.setScope(false);\n \n-      ExecutionEntity childExecutionEntity = Context.getCommandContext().getExecutionEntityManager().createChildExecution((ExecutionEntity) execution);\n-      childExecutionEntity.setParentId(execution.getId());\n-      childExecutionEntity.setCurrentFlowElement(boundaryEvent);\n-      childExecutionEntity.setScope(false);\n \n-      ActivityBehavior boundaryEventBehavior = ((ActivityBehavior) boundaryEvent.getBehavior());\n-      boundaryEventBehavior.execute(childExecutionEntity);\n+        ActivityBehavior boundaryEventBehavior = ((ActivityBehavior) boundaryEvent.getBehavior());\n+        boundaryEventBehavior.execute(childExecutionEntity);\n+}\n     }\n \n-  }\n-\n-  protected Collection<BoundaryEvent> findBoundaryEventsForFlowNode(final String processDefinitionId, final FlowElement flowElement) {\n+    protected Collection<BoundaryEvent> findBoundaryEventsForFlowNode(final String processDefinitionId, final FlowElement flowElement) {\n     Process process = getProcessDefinition(processDefinitionId);\n \n     // This could be cached or could be done at parsing time\n     List<BoundaryEvent> results = new ArrayList<BoundaryEvent>(1);\n     Collection<BoundaryEvent> boundaryEvents = process.findFlowElementsOfType(BoundaryEvent.class, true);\n     for (BoundaryEvent boundaryEvent : boundaryEvents) {\n-      if (boundaryEvent.getAttachedToRefId() != null && boundaryEvent.getAttachedToRefId().equals(flowElement.getId())) {\n-        results.add(boundaryEvent);\n-      }\n+        if (boundaryEvent.getAttachedToRefId() != null && boundaryEvent.getAttachedToRefId().equals(flowElement.getId())) {\n+            results.add(boundaryEvent);\n+        }\n     }\n     return results;\n-  }\n+    }\n \n-  protected Process getProcessDefinition(String processDefinitionId) {\n+    protected Process getProcessDefinition(String processDefinitionId) {\n     // TODO: must be extracted / cache should be accessed in another way\n     return ProcessDefinitionUtil.getProcess(processDefinitionId);\n-  }\n+    }\n \n-  protected boolean hasLoopCharacteristics() {\n+    protected boolean hasLoopCharacteristics() {\n     return hasMultiInstanceCharacteristics();\n-  }\n+    }\n \n-  protected boolean hasMultiInstanceCharacteristics() {\n+    protected boolean hasMultiInstanceCharacteristics() {\n     return multiInstanceActivityBehavior != null;\n-  }\n+    }\n \n-  public MultiInstanceActivityBehavior getMultiInstanceActivityBehavior() {\n+    public MultiInstanceActivityBehavior getMultiInstanceActivityBehavior() {\n     return multiInstanceActivityBehavior;\n-  }\n+    }\n \n-  public void setMultiInstanceActivityBehavior(MultiInstanceActivityBehavior multiInstanceActivityBehavior) {\n+    public void setMultiInstanceActivityBehavior(MultiInstanceActivityBehavior multiInstanceActivityBehavior) {\n     this.multiInstanceActivityBehavior = multiInstanceActivityBehavior;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..dc779b2e96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/54/AbstractBpmnActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/54/AbstractBpmnActivityBehavior.java\nindex ee8d035fc3..dc779b2e96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/54/AbstractBpmnActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/54/AbstractBpmnActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ]
}