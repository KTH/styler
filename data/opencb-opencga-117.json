{
    "error_id": "117",
    "information": {
        "errors": [
            {
                "line": "99",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 143).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        if (StringUtils.isNotEmpty(commandOptions.project)) {\n            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n            catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n                    Paths.get(commandOptions.inputFile).toFile(), token);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler/117/CatalogCommandExecutor.java\nindex fd1afe72be..4debbfd31d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler/117/CatalogCommandExecutor.java\n@@ -96,7 +96,7 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n         String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n         if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n+        catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n         } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n             catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n                     Paths.get(commandOptions.inputFile).toFile(), token);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/117/CatalogCommandExecutor.java\nindex fd1afe72be..8fe796b70e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/117/CatalogCommandExecutor.java\n@@ -47,270 +47,270 @@ import java.util.stream.Stream;\n  */\n public class CatalogCommandExecutor extends AdminCommandExecutor {\n \n-    private AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions;\n-\n-    public CatalogCommandExecutor(AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions) {\n-        super(catalogCommandOptions.commonOptions);\n-        this.catalogCommandOptions = catalogCommandOptions;\n+  private AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions;\n+\n+  public CatalogCommandExecutor(AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions) {\n+    super(catalogCommandOptions.commonOptions);\n+    this.catalogCommandOptions = catalogCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    String subCommandString = catalogCommandOptions.getParsedSubCommand();\n+    logger.debug(\"Executing catalog admin {} command line\", subCommandString);\n+    switch (subCommandString) {\n+      case \"install\":\n+        install();\n+        break;\n+      case \"delete\":\n+        delete();\n+        break;\n+      case \"index\":\n+        index();\n+        break;\n+      case \"export\":\n+        export();\n+        break;\n+      case \"import\":\n+        importDatabase();\n+        break;\n+      case \"daemon\":\n+        daemons();\n+        break;\n+      case \"panel\":\n+        panels();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n-        String subCommandString = catalogCommandOptions.getParsedSubCommand();\n-        logger.debug(\"Executing catalog admin {} command line\", subCommandString);\n-        switch (subCommandString) {\n-            case \"install\":\n-                install();\n-                break;\n-            case \"delete\":\n-                delete();\n-                break;\n-            case \"index\":\n-                index();\n-                break;\n-            case \"export\":\n-                export();\n-                break;\n-            case \"import\":\n-                importDatabase();\n-                break;\n-            case \"daemon\":\n-                daemons();\n-                break;\n-            case \"panel\":\n-                panels();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-    }\n-\n-    private void export() throws CatalogException {\n-        AdminCliOptionsParser.ExportCatalogCommandOptions commandOptions = catalogCommandOptions.exportCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n+  private void export() throws CatalogException {\n+    AdminCliOptionsParser.ExportCatalogCommandOptions commandOptions = catalogCommandOptions.exportCatalogCommandOptions;\n+    validateConfiguration(commandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n-        if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n-        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n-            catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n-                    Paths.get(commandOptions.inputFile).toFile(), token);\n-        }\n+    if (StringUtils.isNotEmpty(commandOptions.project)) {\n+      catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n+    } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n+      catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n+          Paths.get(commandOptions.inputFile).toFile(), token);\n     }\n+  }\n \n-    private void importDatabase() throws CatalogException, IOException {\n-        AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n+  private void importDatabase() throws CatalogException, IOException {\n+    AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n+    validateConfiguration(commandOptions);\n \n-        catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n-    }\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n-    private void install() throws CatalogException, URISyntaxException {\n-        AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n+    catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n+  }\n \n-        validateConfiguration(commandOptions);\n+  private void install() throws CatalogException, URISyntaxException {\n+    AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n \n-        this.configuration.getAdmin().setAlgorithm(\"HS256\");\n+    validateConfiguration(commandOptions);\n \n-        this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n-        if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n-            configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n-        }\n+    this.configuration.getAdmin().setAlgorithm(\"HS256\");\n \n-        if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n-            throw new CatalogException(\"No admin password found. Please, insert your password.\");\n-        }\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        if (catalogManager.existsCatalogDB()) {\n-            if (commandOptions.force) {\n-                // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n-                // results calling first to \"catalog delete\" and then \"catalog install\"\n-                String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n-                catalogManager.deleteCatalogDB(token);\n-            } else {\n-                throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n-            }\n-        }\n+    this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n+    if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n+      configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n+    }\n \n-        logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n-                configuration.getCatalog().getDatabase().getHosts());\n+    if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n+      throw new CatalogException(\"No admin password found. Please, insert your password.\");\n+    }\n \n-        catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n-                commandOptions.email, commandOptions.organization);\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    if (catalogManager.existsCatalogDB()) {\n+      if (commandOptions.force) {\n+        // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n+        // results calling first to \"catalog delete\" and then \"catalog install\"\n+        String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n+        catalogManager.deleteCatalogDB(token);\n+      } else {\n+        throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n+      }\n     }\n \n-    /**\n-     * Checks if the database exists.\n-     *\n-     * @return true if exists.\n-     */\n-    private boolean checkDatabaseExists(String database) {\n-        List<DataStoreServerAddress> dataStoreServerAddresses = new ArrayList<>();\n-        for (String host : configuration.getCatalog().getDatabase().getHosts()) {\n-            if (host.contains(\":\")) {\n-                String[] split = host.split(\":\");\n-                Integer port = Integer.valueOf(split[1]);\n-                dataStoreServerAddresses.add(new DataStoreServerAddress(split[0], port));\n-            } else {\n-                dataStoreServerAddresses.add(new DataStoreServerAddress(host, 27017));\n-            }\n-        }\n-        MongoDataStoreManager mongoDataStoreManager = new MongoDataStoreManager(dataStoreServerAddresses);\n-        return mongoDataStoreManager.exists(database);\n+    logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n+        configuration.getCatalog().getDatabase().getHosts());\n+\n+    catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n+        commandOptions.email, commandOptions.organization);\n+  }\n+\n+  /**\n+   * Checks if the database exists.\n+   *\n+   * @return true if exists.\n+   */\n+  private boolean checkDatabaseExists(String database) {\n+    List<DataStoreServerAddress> dataStoreServerAddresses = new ArrayList<>();\n+    for (String host : configuration.getCatalog().getDatabase().getHosts()) {\n+      if (host.contains(\":\")) {\n+        String[] split = host.split(\":\");\n+        Integer port = Integer.valueOf(split[1]);\n+        dataStoreServerAddresses.add(new DataStoreServerAddress(split[0], port));\n+      } else {\n+        dataStoreServerAddresses.add(new DataStoreServerAddress(host, 27017));\n+      }\n     }\n+    MongoDataStoreManager mongoDataStoreManager = new MongoDataStoreManager(dataStoreServerAddresses);\n+    return mongoDataStoreManager.exists(database);\n+  }\n \n-    private void delete() throws CatalogException, URISyntaxException {\n-        validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n+  private void delete() throws CatalogException, URISyntaxException {\n+    validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n \n-        if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n-            throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n-        }\n-        logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n-                .getHosts());\n-        catalogManager.deleteCatalogDB(token);\n+    if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n+      throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n     }\n+    logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n+        .getHosts());\n+    catalogManager.deleteCatalogDB(token);\n+  }\n \n-    private void index() throws CatalogException {\n-        validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n+  private void index() throws CatalogException {\n+    validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n \n-        if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n-            throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n-        }\n-\n-        logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n-                catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n-\n-        catalogManager.installIndexes(token);\n+    if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n+      throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n     }\n \n-    private void daemons() throws Exception {\n-        validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n-\n-        if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n-            // Server crated and started\n-            MonitorService monitorService =\n-                    new MonitorService(configuration, appHome, token);\n-            monitorService.start();\n-            monitorService.blockUntilShutdown();\n-            logger.info(\"Shutting down OpenCGA Storage REST server\");\n-        }\n-\n-        if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n-            Client client = ClientBuilder.newClient();\n-            WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n-                    .path(\"opencga\")\n-                    .path(\"monitor\")\n-                    .path(\"admin\")\n-                    .path(\"stop\");\n-            Response response = target.request().get();\n-            logger.info(response.toString());\n-        }\n-    }\n+    logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n+        catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n \n-    private void panels() throws CatalogException, IOException {\n-        validateConfiguration(catalogCommandOptions.panelCatalogCommandOptions);\n+    catalogManager.installIndexes(token);\n+  }\n \n-        try (CatalogManager catalogManager = new CatalogManager(configuration)) {\n-            String token = catalogManager.getUserManager()\n-                    .loginAsAdmin(catalogCommandOptions.panelCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+  private void daemons() throws Exception {\n+    validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n \n-            if (catalogCommandOptions.panelCatalogCommandOptions.panelAppImport) {\n-                catalogManager.getPanelManager().importPanelApp(token, catalogCommandOptions.panelCatalogCommandOptions.overwrite);\n-            } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.panelImport)) {\n-                importPanels(catalogManager, token);\n-            } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.delete)) {\n-                deletePanels(catalogManager, token);\n-            } else {\n-                logger.error(\"Expected --import or --delete parameter. Nothing to do.\");\n-            }\n-        }\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+    if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n+      // Server crated and started\n+      MonitorService monitorService =\n+          new MonitorService(configuration, appHome, token);\n+      monitorService.start();\n+      monitorService.blockUntilShutdown();\n+      logger.info(\"Shutting down OpenCGA Storage REST server\");\n+    }\n \n+    if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n+      Client client = ClientBuilder.newClient();\n+      WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n+          .path(\"opencga\")\n+          .path(\"monitor\")\n+          .path(\"admin\")\n+          .path(\"stop\");\n+      Response response = target.request().get();\n+      logger.info(response.toString());\n+    }\n+  }\n+\n+  private void panels() throws CatalogException, IOException {\n+    validateConfiguration(catalogCommandOptions.panelCatalogCommandOptions);\n+\n+    try (CatalogManager catalogManager = new CatalogManager(configuration)) {\n+      String token = catalogManager.getUserManager()\n+          .loginAsAdmin(catalogCommandOptions.panelCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+      if (catalogCommandOptions.panelCatalogCommandOptions.panelAppImport) {\n+        catalogManager.getPanelManager().importPanelApp(token, catalogCommandOptions.panelCatalogCommandOptions.overwrite);\n+      } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.panelImport)) {\n+        importPanels(catalogManager, token);\n+      } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.delete)) {\n+        deletePanels(catalogManager, token);\n+      } else {\n+        logger.error(\"Expected --import or --delete parameter. Nothing to do.\");\n+      }\n     }\n \n-    private void importPanels(CatalogManager catalogManager, String token) throws IOException {\n-        Path path = Paths.get(catalogCommandOptions.panelCatalogCommandOptions.panelImport);\n-\n-        if (path.toFile().isDirectory()) {\n-            // Load all the json files from the directory\n-            try (Stream<Path> paths = Files.walk(path)) {\n-                paths\n-                        .filter(Files::isRegularFile)\n-                        .forEach(filePath -> {\n-                            // Import the panel file\n-                            Panel panel;\n-                            try {\n-                                panel = Panel.load(FileUtils.openInputStream(filePath.toFile()));\n-                            } catch (IOException e) {\n-                                logger.error(\"Could not load file {}. {}\", filePath.toString(), e.getMessage());\n-                                return;\n-                            }\n-                            try {\n-                                catalogManager.getPanelManager().create(panel,\n-                                        catalogCommandOptions.panelCatalogCommandOptions.overwrite, token);\n-                                logger.info(\"Panel {} imported\", panel.getId());\n-                            } catch (CatalogException e) {\n-                                logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n-                            }\n-                        });\n-            }\n-        } else {\n-            // Import the panel file\n-            Panel panel = Panel.load(FileUtils.openInputStream(path.toFile()));\n-            try {\n-                catalogManager.getPanelManager().create(panel, catalogCommandOptions.panelCatalogCommandOptions.overwrite,\n-                        token);\n+  }\n+\n+  private void importPanels(CatalogManager catalogManager, String token) throws IOException {\n+    Path path = Paths.get(catalogCommandOptions.panelCatalogCommandOptions.panelImport);\n+\n+    if (path.toFile().isDirectory()) {\n+      // Load all the json files from the directory\n+      try (Stream<Path> paths = Files.walk(path)) {\n+        paths\n+            .filter(Files::isRegularFile)\n+            .forEach(filePath -> {\n+              // Import the panel file\n+              Panel panel;\n+              try {\n+                panel = Panel.load(FileUtils.openInputStream(filePath.toFile()));\n+              } catch (IOException e) {\n+                logger.error(\"Could not load file {}. {}\", filePath.toString(), e.getMessage());\n+                return;\n+              }\n+              try {\n+                catalogManager.getPanelManager().create(panel,\n+                    catalogCommandOptions.panelCatalogCommandOptions.overwrite, token);\n                 logger.info(\"Panel {} imported\", panel.getId());\n-            } catch (CatalogException e) {\n+              } catch (CatalogException e) {\n                 logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n-            }\n-        }\n+              }\n+            });\n+      }\n+    } else {\n+      // Import the panel file\n+      Panel panel = Panel.load(FileUtils.openInputStream(path.toFile()));\n+      try {\n+        catalogManager.getPanelManager().create(panel, catalogCommandOptions.panelCatalogCommandOptions.overwrite,\n+            token);\n+        logger.info(\"Panel {} imported\", panel.getId());\n+      } catch (CatalogException e) {\n+        logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n+      }\n     }\n-\n-    private void deletePanels(CatalogManager catalogManager, String token) {\n-        String[] panelIds = catalogCommandOptions.panelCatalogCommandOptions.delete.split(\",\");\n-        for (String panelId : panelIds) {\n-            try {\n-                catalogManager.getPanelManager().delete(panelId, token);\n-                logger.info(\"Panel {} deleted\", panelId);\n-            } catch (CatalogException e) {\n-                logger.error(\"Could not delete panel {} - {}\", panelId, e.getMessage());\n-            }\n-        }\n+  }\n+\n+  private void deletePanels(CatalogManager catalogManager, String token) {\n+    String[] panelIds = catalogCommandOptions.panelCatalogCommandOptions.delete.split(\",\");\n+    for (String panelId : panelIds) {\n+      try {\n+        catalogManager.getPanelManager().delete(panelId, token);\n+        logger.info(\"Panel {} deleted\", panelId);\n+      } catch (CatalogException e) {\n+        logger.error(\"Could not delete panel {} - {}\", panelId, e.getMessage());\n+      }\n     }\n+  }\n \n-    private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n-        if (catalogOptions.databaseUser != null) {\n-            configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n-        }\n-        if (catalogOptions.databasePassword != null) {\n-            configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n-        }\n-        if (catalogOptions.prefix != null) {\n-            configuration.setDatabasePrefix(catalogOptions.prefix);\n-        }\n-        if (catalogOptions.databaseHost != null) {\n-            configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n-        }\n+  private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n+    if (catalogOptions.databaseUser != null) {\n+      configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n+    }\n+    if (catalogOptions.databasePassword != null) {\n+      configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n+    }\n+    if (catalogOptions.prefix != null) {\n+      configuration.setDatabasePrefix(catalogOptions.prefix);\n+    }\n+    if (catalogOptions.databaseHost != null) {\n+      configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n     }\n+  }\n }\n",
            "diff_size": 325
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/117/CatalogCommandExecutor.java\nindex fd1afe72be..387895d88b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/117/CatalogCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.admin.executors;\n-\n-\n import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -254,8 +252,7 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n         if (path.toFile().isDirectory()) {\n             // Load all the json files from the directory\n             try (Stream<Path> paths = Files.walk(path)) {\n-                paths\n-                        .filter(Files::isRegularFile)\n+                paths.filter(Files::isRegularFile)\n                         .forEach(filePath -> {\n                             // Import the panel file\n                             Panel panel;\n@@ -313,4 +310,4 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n             configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "109",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "99",
                    "column": "137",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "99",
                    "column": "143",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "99",
                    "column": "145",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "99",
                    "column": "145",
                    "severity": "error",
                    "message": "'}' at column 145 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_random/117/CatalogCommandExecutor.java\nindex fd1afe72be..42f652c3e9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_random/117/CatalogCommandExecutor.java\n@@ -96,221 +96,222 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n         String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n         if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n-        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n-            catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n-                    Paths.get(commandOptions.inputFile).toFile(), token);\n-        }\n-    }\n-\n-    private void importDatabase() throws CatalogException, IOException {\n-        AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n-\n-        catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n-    }\n-\n-    private void install() throws CatalogException, URISyntaxException {\n-        AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n-\n-        validateConfiguration(commandOptions);\n-\n-        this.configuration.getAdmin().setAlgorithm(\"HS256\");\n-\n-        this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n-        if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n-            configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n-        }\n-\n-        if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n-            throw new CatalogException(\"No admin password found. Please, insert your password.\");\n-        }\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        if (catalogManager.existsCatalogDB()) {\n-            if (commandOptions.force) {\n-                // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n-                // results calling first to \"catalog delete\" and then \"catalog install\"\n-                String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n-                catalogManager.deleteCatalogDB(token);\n-            } else {\n-                throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n-            }\n-        }\n-\n-        logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n-                configuration.getCatalog().getDatabase().getHosts());\n-\n-        catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n-                commandOptions.email, commandOptions.organization);\n-    }\n-\n-    /**\n+            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release , commandOptions.outputDir,token) ;} else\n+                if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n+                 catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n+                         Paths.get(commandOptions.inputFile).toFile(), token);\n+             }\n+         }\n+\n+         private void importDatabase() throws CatalogException, IOException {\n+             AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n+             validateConfiguration(commandOptions);\n+\n+             CatalogManager catalogManager = new CatalogManager(configuration);\n+             String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n+\n+             catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n+         }\n+\n+         private void install() throws CatalogException, URISyntaxException {\n+             AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n+\n+             validateConfiguration(commandOptions);\n+\n+             this.configuration.getAdmin().setAlgorithm(\"HS256\");\n+\n+             this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n+             if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n+                 configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n+             }\n+\n+             if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n+                 throw new CatalogException(\"No admin password found. Please, insert your password.\");\n+             }\n+\n+             CatalogManager catalogManager = new CatalogManager(configuration);\n+             if (catalogManager.existsCatalogDB()) {\n+                 if (commandOptions.force) {\n+                     // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n+                     // results calling first to \"catalog delete\" and then \"catalog install\"\n+                     String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n+                     catalogManager.deleteCatalogDB(token);\n+                 } else {\n+                     throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n+                 }\n+             }\n+\n+             logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n+                     configuration.getCatalog().getDatabase().getHosts());\n+\n+             catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n+                     commandOptions.email, commandOptions.organization);\n+         }\n+\n+         /**\n      * Checks if the database exists.\n      *\n      * @return true if exists.\n      */\n-    private boolean checkDatabaseExists(String database) {\n-        List<DataStoreServerAddress> dataStoreServerAddresses = new ArrayList<>();\n-        for (String host : configuration.getCatalog().getDatabase().getHosts()) {\n-            if (host.contains(\":\")) {\n-                String[] split = host.split(\":\");\n-                Integer port = Integer.valueOf(split[1]);\n-                dataStoreServerAddresses.add(new DataStoreServerAddress(split[0], port));\n-            } else {\n-                dataStoreServerAddresses.add(new DataStoreServerAddress(host, 27017));\n-            }\n-        }\n-        MongoDataStoreManager mongoDataStoreManager = new MongoDataStoreManager(dataStoreServerAddresses);\n-        return mongoDataStoreManager.exists(database);\n-    }\n-\n-    private void delete() throws CatalogException, URISyntaxException {\n-        validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n-\n-        if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n-            throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n-        }\n-        logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n-                .getHosts());\n-        catalogManager.deleteCatalogDB(token);\n-    }\n-\n-    private void index() throws CatalogException {\n-        validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n-\n-        if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n-            throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n-        }\n-\n-        logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n-                catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n-\n-        catalogManager.installIndexes(token);\n-    }\n-\n-    private void daemons() throws Exception {\n-        validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n-\n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n-\n-        if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n-            // Server crated and started\n-            MonitorService monitorService =\n-                    new MonitorService(configuration, appHome, token);\n-            monitorService.start();\n-            monitorService.blockUntilShutdown();\n-            logger.info(\"Shutting down OpenCGA Storage REST server\");\n-        }\n-\n-        if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n-            Client client = ClientBuilder.newClient();\n-            WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n-                    .path(\"opencga\")\n-                    .path(\"monitor\")\n-                    .path(\"admin\")\n-                    .path(\"stop\");\n-            Response response = target.request().get();\n-            logger.info(response.toString());\n-        }\n-    }\n-\n-    private void panels() throws CatalogException, IOException {\n-        validateConfiguration(catalogCommandOptions.panelCatalogCommandOptions);\n-\n-        try (CatalogManager catalogManager = new CatalogManager(configuration)) {\n-            String token = catalogManager.getUserManager()\n-                    .loginAsAdmin(catalogCommandOptions.panelCatalogCommandOptions.commonOptions.adminPassword).getToken();\n-\n-            if (catalogCommandOptions.panelCatalogCommandOptions.panelAppImport) {\n-                catalogManager.getPanelManager().importPanelApp(token, catalogCommandOptions.panelCatalogCommandOptions.overwrite);\n-            } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.panelImport)) {\n-                importPanels(catalogManager, token);\n-            } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.delete)) {\n-                deletePanels(catalogManager, token);\n-            } else {\n-                logger.error(\"Expected --import or --delete parameter. Nothing to do.\");\n-            }\n-        }\n-\n-    }\n-\n-    private void importPanels(CatalogManager catalogManager, String token) throws IOException {\n-        Path path = Paths.get(catalogCommandOptions.panelCatalogCommandOptions.panelImport);\n-\n-        if (path.toFile().isDirectory()) {\n-            // Load all the json files from the directory\n-            try (Stream<Path> paths = Files.walk(path)) {\n-                paths\n-                        .filter(Files::isRegularFile)\n-                        .forEach(filePath -> {\n-                            // Import the panel file\n-                            Panel panel;\n-                            try {\n-                                panel = Panel.load(FileUtils.openInputStream(filePath.toFile()));\n-                            } catch (IOException e) {\n-                                logger.error(\"Could not load file {}. {}\", filePath.toString(), e.getMessage());\n-                                return;\n-                            }\n-                            try {\n-                                catalogManager.getPanelManager().create(panel,\n-                                        catalogCommandOptions.panelCatalogCommandOptions.overwrite, token);\n-                                logger.info(\"Panel {} imported\", panel.getId());\n-                            } catch (CatalogException e) {\n-                                logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n-                            }\n-                        });\n-            }\n-        } else {\n-            // Import the panel file\n-            Panel panel = Panel.load(FileUtils.openInputStream(path.toFile()));\n-            try {\n-                catalogManager.getPanelManager().create(panel, catalogCommandOptions.panelCatalogCommandOptions.overwrite,\n-                        token);\n-                logger.info(\"Panel {} imported\", panel.getId());\n-            } catch (CatalogException e) {\n-                logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n-            }\n-        }\n-    }\n-\n-    private void deletePanels(CatalogManager catalogManager, String token) {\n-        String[] panelIds = catalogCommandOptions.panelCatalogCommandOptions.delete.split(\",\");\n-        for (String panelId : panelIds) {\n-            try {\n-                catalogManager.getPanelManager().delete(panelId, token);\n-                logger.info(\"Panel {} deleted\", panelId);\n-            } catch (CatalogException e) {\n-                logger.error(\"Could not delete panel {} - {}\", panelId, e.getMessage());\n-            }\n-        }\n-    }\n-\n-    private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n-        if (catalogOptions.databaseUser != null) {\n-            configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n-        }\n-        if (catalogOptions.databasePassword != null) {\n-            configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n-        }\n-        if (catalogOptions.prefix != null) {\n-            configuration.setDatabasePrefix(catalogOptions.prefix);\n-        }\n-        if (catalogOptions.databaseHost != null) {\n-            configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n-        }\n-    }\n-}\n+         private boolean checkDatabaseExists(String database) {\n+             List<DataStoreServerAddress> dataStoreServerAddresses = new ArrayList<>();\n+             for (String host : configuration.getCatalog().getDatabase().getHosts()) {\n+                 if (host.contains(\":\")) {\n+                     String[] split = host.split(\":\");\n+                     Integer port = Integer.valueOf(split[1]);\n+                     dataStoreServerAddresses.add(new DataStoreServerAddress(split[0], port));\n+                 } else {\n+                     dataStoreServerAddresses.add(new DataStoreServerAddress(host, 27017));\n+                 }\n+             }\n+             MongoDataStoreManager mongoDataStoreManager = new MongoDataStoreManager(dataStoreServerAddresses);\n+             return mongoDataStoreManager.exists(database);\n+         }\n+\n+         private void delete() throws CatalogException, URISyntaxException {\n+             validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n+\n+             CatalogManager catalogManager = new CatalogManager(configuration);\n+             String token = catalogManager.getUserManager()\n+                     .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+             if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n+                 throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n+             }\n+             logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n+                     .getHosts());\n+             catalogManager.deleteCatalogDB(token);\n+         }\n+\n+         private void index() throws CatalogException {\n+             validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n+\n+             CatalogManager catalogManager = new CatalogManager(configuration);\n+             String token = catalogManager.getUserManager()\n+                     .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+             if (!checkDatabaseExists(catalogManager.getCatalogDatabase())) {\n+                 throw new CatalogException(\"The database \" + catalogManager.getCatalogDatabase() + \" does not exist.\");\n+             }\n+\n+             logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n+                     catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n+\n+             catalogManager.installIndexes(token);\n+         }\n+\n+         private void daemons() throws Exception {\n+             validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n+\n+             CatalogManager catalogManager = new CatalogManager(configuration);\n+             String token = catalogManager.getUserManager()\n+                     .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+             if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n+                 // Server crated and started\n+                 MonitorService monitorService =\n+                         new MonitorService(configuration, appHome, token);\n+                 monitorService.start();\n+                 monitorService.blockUntilShutdown();\n+                 logger.info(\"Shutting down OpenCGA Storage REST server\");\n+             }\n+\n+             if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n+                 Client client = ClientBuilder.newClient();\n+                 WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n+                         .path(\"opencga\")\n+                         .path(\"monitor\")\n+                         .path(\"admin\")\n+                         .path(\"stop\");\n+                 Response response = target.request().get();\n+                 logger.info(response.toString());\n+             }\n+         }\n+\n+         private void panels() throws CatalogException, IOException {\n+             validateConfiguration(catalogCommandOptions.panelCatalogCommandOptions);\n+\n+             try (CatalogManager catalogManager = new CatalogManager(configuration)) {\n+                 String token = catalogManager.getUserManager()\n+                         .loginAsAdmin(catalogCommandOptions.panelCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+\n+                 if (catalogCommandOptions.panelCatalogCommandOptions.panelAppImport) {\n+                     catalogManager.getPanelManager().importPanelApp(token, catalogCommandOptions.panelCatalogCommandOptions.overwrite);\n+                 } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.panelImport)) {\n+                     importPanels(catalogManager, token);\n+                 } else if (StringUtils.isNotEmpty(catalogCommandOptions.panelCatalogCommandOptions.delete)) {\n+                     deletePanels(catalogManager, token);\n+                 } else {\n+                     logger.error(\"Expected --import or --delete parameter. Nothing to do.\");\n+                 }\n+             }\n+\n+         }\n+\n+         private void importPanels(CatalogManager catalogManager, String token) throws IOException {\n+             Path path = Paths.get(catalogCommandOptions.panelCatalogCommandOptions.panelImport);\n+\n+             if (path.toFile().isDirectory()) {\n+                 // Load all the json files from the directory\n+                 try (Stream<Path> paths = Files.walk(path)) {\n+                     paths\n+                             .filter(Files::isRegularFile)\n+                             .forEach(filePath -> {\n+                                 // Import the panel file\n+                                 Panel panel;\n+                                 try {\n+                                     panel = Panel.load(FileUtils.openInputStream(filePath.toFile()));\n+                                 } catch (IOException e) {\n+                                     logger.error(\"Could not load file {}. {}\", filePath.toString(), e.getMessage());\n+                                     return;\n+                                 }\n+                                 try {\n+                                     catalogManager.getPanelManager().create(panel,\n+                                             catalogCommandOptions.panelCatalogCommandOptions.overwrite, token);\n+                                     logger.info(\"Panel {} imported\", panel.getId());\n+                                 } catch (CatalogException e) {\n+                                     logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n+                                 }\n+                             });\n+                 }\n+             } else {\n+                 // Import the panel file\n+                 Panel panel = Panel.load(FileUtils.openInputStream(path.toFile()));\n+                 try {\n+                     catalogManager.getPanelManager().create(panel, catalogCommandOptions.panelCatalogCommandOptions.overwrite,\n+                             token);\n+                     logger.info(\"Panel {} imported\", panel.getId());\n+                 } catch (CatalogException e) {\n+                     logger.error(\"Could not import {} - {}\", panel.getId(), e.getMessage());\n+                 }\n+             }\n+         }\n+\n+         private void deletePanels(CatalogManager catalogManager, String token) {\n+             String[] panelIds = catalogCommandOptions.panelCatalogCommandOptions.delete.split(\",\");\n+             for (String panelId : panelIds) {\n+                 try {\n+                     catalogManager.getPanelManager().delete(panelId, token);\n+                     logger.info(\"Panel {} deleted\", panelId);\n+                 } catch (CatalogException e) {\n+                     logger.error(\"Could not delete panel {} - {}\", panelId, e.getMessage());\n+                 }\n+             }\n+         }\n+\n+         private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n+             if (catalogOptions.databaseUser != null) {\n+                 configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n+             }\n+             if (catalogOptions.databasePassword != null) {\n+                 configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n+             }\n+             if (catalogOptions.prefix != null) {\n+                 configuration.setDatabasePrefix(catalogOptions.prefix);\n+             }\n+             if (catalogOptions.databaseHost != null) {\n+                 configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n+             }\n+         }\n+     }\n+     \n\\ No newline at end of file\n",
            "diff_size": 215
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_three_grams/117/CatalogCommandExecutor.java\nindex fd1afe72be..4debbfd31d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/117/CatalogCommandExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_three_grams/117/CatalogCommandExecutor.java\n@@ -96,7 +96,7 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n         String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n         if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n+        catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n         } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n             catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n                     Paths.get(commandOptions.inputFile).toFile(), token);\n",
            "diff_size": 1
        }
    ]
}