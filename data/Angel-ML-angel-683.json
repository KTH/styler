{
    "error_id": "683",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/683/FeatureInfo.java\nindex 6ed1cf550c..ac2f8fcdbb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/683/FeatureInfo.java\n@@ -22,156 +22,158 @@ import java.util.*;\n \n public class FeatureInfo {\n \n-  public class Match {\n-    public Match(String fieldName, int index) {\n-      super();\n-      this.fieldName = fieldName;\n-      this.index = index;\n-    }\n-\n-    public String fieldName;\n-    public int index;\n-  }\n+    public class Match {\n+        public Match(String fieldName, int index) {\n+            super();\n+            this.fieldName = fieldName;\n+            this.index = index;\n+        }\n \n-  public class SimpleFeature {\n-    public SimpleFeature(String featureName) {\n-      super();\n-      this.featureName = featureName;\n+        public String fieldName;\n+        public int index;\n     }\n \n-    public String featureName;\n-  }\n+    public class SimpleFeature {\n+        public SimpleFeature(String featureName) {\n+            super();\n+            this.featureName = featureName;\n+        }\n \n-  public class CombineFeature {\n-    public CombineFeature(String featureName, String[] dependFeatures) {\n-      super();\n-      this.featureName = featureName;\n-      this.dependFeatures = dependFeatures;\n+        public String featureName;\n     }\n \n-    public String featureName;\n-    public String[] dependFeatures;\n+    public class CombineFeature {\n+        public CombineFeature(String featureName, String[] dependFeatures) {\n+            super();\n+            this.featureName = featureName;\n+            this.dependFeatures = dependFeatures;\n+        }\n \n-    public int dependFeatureSize() {\n-      return dependFeatures.length;\n-    }\n-  }\n+        public String featureName;\n+        public String[] dependFeatures;\n \n-  public final Map<String, Integer> matchMap;\n-  public final List<SimpleFeature> simpleFeatureList;\n-  public final List<CombineFeature> combineFeatures;\n+        public int dependFeatureSize() {\n+            return dependFeatures.length;\n+        }\n+    }\n \n-  public String[] simpleFeatureNames;\n-  public int[] simpleFeatureIndexes;\n-  public String[][] combineFeatureNames;\n-  public int[][] combineFeatureIndexes;\n+    public final Map<String, Integer> matchMap;\n+    public final List<SimpleFeature> simpleFeatureList;\n+    public final List<CombineFeature> combineFeatures;\n \n-  public FeatureInfo() {\n-    // this.matchList = new ArrayList<Match>();\n-    this.matchMap = new HashMap<String, Integer>();\n-    this.simpleFeatureList = new ArrayList<SimpleFeature>();\n-    this.combineFeatures = new ArrayList<CombineFeature>();\n-  }\n+    public String[] simpleFeatureNames;\n+    public int[] simpleFeatureIndexes;\n+    public String[][] combineFeatureNames;\n+    public int[][] combineFeatureIndexes;\n \n-  public void addMatch(String name, int index) {\n-    matchMap.put(name, index);\n-  }\n+    public FeatureInfo() {\n+        // this.matchList = new ArrayList<Match>();\n+        this.matchMap = new HashMap<String, Integer>();\n+        this.simpleFeatureList = new ArrayList<SimpleFeature>();\n+        this.combineFeatures = new ArrayList<CombineFeature>();\n+    }\n \n-  public int findMatchIndex(String name) {\n-    return matchMap.get(name);\n-  }\n+    public void addMatch(String name, int index) {\n+        matchMap.put(name, index);\n+    }\n \n-  public void addSimpleFeature(String name) {\n-    simpleFeatureList.add(new SimpleFeature(name));\n-  }\n+    public int findMatchIndex(String name) {\n+        return matchMap.get(name);\n+    }\n \n-  public void addCombineFeatures(String name, String[] dependFeatures) {\n-    combineFeatures.add(new CombineFeature(name, dependFeatures));\n-  }\n+    public void addSimpleFeature(String name) {\n+        simpleFeatureList.add(new SimpleFeature(name));\n+    }\n \n-  public int getMatchSize() {\n-    return matchMap.size();\n-  }\n+    public void addCombineFeatures(String name, String[] dependFeatures) {\n+        combineFeatures.add(new CombineFeature(name, dependFeatures));\n+    }\n \n-  public Map<String, Integer> getMatchMap() {\n-    return matchMap;\n-  }\n+    public int getMatchSize() {\n+        return matchMap.size();\n+    }\n \n-  public List<SimpleFeature> getSimpleFeatureList() {\n-    return simpleFeatureList;\n-  }\n+    public Map<String, Integer> getMatchMap() {\n+        return matchMap;\n+    }\n \n-  public List<CombineFeature> getCombineFeatures() {\n-    return combineFeatures;\n-  }\n+    public List<SimpleFeature> getSimpleFeatureList() {\n+        return simpleFeatureList;\n+    }\n \n-  public String[][] getCombineFeatureNames() {\n-    if (combineFeatureNames == null) {\n-      combineFeatureNames = new String[combineFeatures.size()][];\n-      for (int i = 0; i < combineFeatures.size(); i++) {\n-        combineFeatureNames[i] = combineFeatures.get(i).dependFeatures;\n-      }\n+    public List<CombineFeature> getCombineFeatures() {\n+        return combineFeatures;\n     }\n \n-    return combineFeatureNames;\n-  }\n+    public String[][] getCombineFeatureNames() {\n+        if (combineFeatureNames == null) {\n+            combineFeatureNames = new String[combineFeatures.size()][];\n+            for (int i = 0; i < combineFeatures.size(); i++) {\n+                combineFeatureNames[i] = combineFeatures.get(i).dependFeatures;\n+            }\n+        }\n \n-  public String[] getSimpleFeatureNames() {\n-    if (simpleFeatureNames == null) {\n-      simpleFeatureNames = new String[simpleFeatureList.size()];\n-      for (int i = 0; i < simpleFeatureNames.length; i++) {\n-        simpleFeatureNames[i] = simpleFeatureList.get(i).featureName;\n-      }\n+        return combineFeatureNames;\n     }\n \n-    return simpleFeatureNames;\n-  }\n+    public String[] getSimpleFeatureNames() {\n+        if (simpleFeatureNames == null) {\n+            simpleFeatureNames = new String[simpleFeatureList.size()];\n+            for (int i = 0; i < simpleFeatureNames.length; i++) {\n+                simpleFeatureNames[i] = simpleFeatureList.get(i).featureName;\n+            }\n+        }\n \n-  public int[] getSimpleFeatureIndexes() throws InvalidParameterException {\n-    if (simpleFeatureIndexes == null) {\n-      simpleFeatureIndexes = new int[simpleFeatureList.size()];\n+        return simpleFeatureNames;\n+    }\n \n-      for (int i = 0; i < simpleFeatureIndexes.length; i++) {\n-        Integer index = matchMap.get(simpleFeatureList.get(i).featureName);\n-        if (index == null) {\n-          throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName\n-              + \" can not found in match list\");\n+    public int[] getSimpleFeatureIndexes() throws InvalidParameterException {\n+        if (simpleFeatureIndexes == null) {\n+            simpleFeatureIndexes = new int[simpleFeatureList.size()];\n+\n+            for (int i = 0; i < simpleFeatureIndexes.length; i++) {\n+                Integer index = matchMap.get(simpleFeatureList.get(i).featureName);\n+                if (index == null) {\n+                    throw new InvalidParameterException(\n+                            \"feature \" + simpleFeatureList.get(i).featureName\n+                                    + \" can not found in match list\");\n+                }\n+                simpleFeatureIndexes[i] = index;\n+            }\n         }\n-        simpleFeatureIndexes[i] = index;\n-      }\n-    }\n-\n-    return simpleFeatureIndexes;\n-  }\n-\n-  public int[][] getCombineFeatureIndexes() throws InvalidParameterException {\n-    if (combineFeatureIndexes == null) {\n-      combineFeatureIndexes = new int[combineFeatures.size()][];\n-\n-      for (int i = 0; i < combineFeatureIndexes.length; i++) {\n-        combineFeatureIndexes[i] = new int[combineFeatures.get(i).dependFeatures.length];\n-        for (int j = 0; j < combineFeatureIndexes[i].length; j++) {\n-          Integer index = matchMap.get(combineFeatures.get(i).dependFeatures[j]);\n-          if (index == null) {\n-            throw new InvalidParameterException(\"feature \"\n-                + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n-          }\n-          combineFeatureIndexes[i][j] = index;\n-        }\n-      }\n+\n+        return simpleFeatureIndexes;\n     }\n \n-    return combineFeatureIndexes;\n-  }\n+    public int[][] getCombineFeatureIndexes() throws InvalidParameterException {\n+        if (combineFeatureIndexes == null) {\n+            combineFeatureIndexes = new int[combineFeatures.size()][];\n+\n+            for (int i = 0; i < combineFeatureIndexes.length; i++) {\n+                combineFeatureIndexes[i] = new int[combineFeatures.get(i).dependFeatures.length];\n+                for (int j = 0; j < combineFeatureIndexes[i].length; j++) {\n+                    Integer index = matchMap.get(combineFeatures.get(i).dependFeatures[j]);\n+                    if (index == null) {\n+                        throw new InvalidParameterException(\"feature \"\n+                                + combineFeatures.get(i).dependFeatures[j] +\n+                                \" can not found in match list\");\n+                    }\n+                    combineFeatureIndexes[i][j] = index;\n+                }\n+            }\n+        }\n+\n+        return combineFeatureIndexes;\n+    }\n \n-  @Override\n-  public String toString() {\n-    return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList\n-        + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\"\n-        + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\"\n-        + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\"\n-        + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\"\n-        + Arrays.toString(combineFeatureIndexes) + \"]\";\n-  }\n+    @Override\n+    public String toString() {\n+        return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList\n+                + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\"\n+                + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\"\n+                + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\"\n+                + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\"\n+                + Arrays.toString(combineFeatureIndexes) + \"]\";\n+    }\n \n }\n",
            "diff_size": 168
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/683/FeatureInfo.java\nindex 6ed1cf550c..96cb6dd57b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/683/FeatureInfo.java\n@@ -136,8 +136,9 @@ public class FeatureInfo {\n         if (index == null) {\n           throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName\n               + \" can not found in match list\");\n-        }\n-        simpleFeatureIndexes[i] = index;\n+  }\n+\n+simpleFeatureIndexes[i] = index;\n       }\n     }\n \n@@ -155,8 +156,9 @@ public class FeatureInfo {\n           if (index == null) {\n             throw new InvalidParameterException(\"feature \"\n                 + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n-          }\n-          combineFeatureIndexes[i][j] = index;\n+  }\n+\n+combineFeatureIndexes[i][j] = index;\n         }\n       }\n     }\n@@ -174,4 +176,4 @@ public class FeatureInfo {\n         + Arrays.toString(combineFeatureIndexes) + \"]\";\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 407).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/683/FeatureInfo.java\nindex 6ed1cf550c..826d133c58 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/683/FeatureInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/683/FeatureInfo.java\n@@ -17,161 +17,160 @@\n package com.tencent.angel.ml.feature;\n \n import com.tencent.angel.exception.InvalidParameterException;\n-\n import java.util.*;\n \n public class FeatureInfo {\n \n-  public class Match {\n+    public class Match {\n+\n     public Match(String fieldName, int index) {\n-      super();\n-      this.fieldName = fieldName;\n-      this.index = index;\n+        super();\n+        this.fieldName = fieldName;\n+        this.index = index;\n     }\n \n     public String fieldName;\n+\n     public int index;\n-  }\n \n-  public class SimpleFeature {\n+    }\n+\n+    public class SimpleFeature {\n+\n     public SimpleFeature(String featureName) {\n-      super();\n-      this.featureName = featureName;\n+        super();\n+        this.featureName = featureName;\n     }\n \n     public String featureName;\n-  }\n \n-  public class CombineFeature {\n+    }\n+\n+    public class CombineFeature {\n+\n     public CombineFeature(String featureName, String[] dependFeatures) {\n-      super();\n-      this.featureName = featureName;\n-      this.dependFeatures = dependFeatures;\n+        super();\n+        this.featureName = featureName;\n+        this.dependFeatures = dependFeatures;\n     }\n \n     public String featureName;\n+\n     public String[] dependFeatures;\n \n     public int dependFeatureSize() {\n-      return dependFeatures.length;\n+        return dependFeatures.length;\n     }\n-  }\n \n-  public final Map<String, Integer> matchMap;\n-  public final List<SimpleFeature> simpleFeatureList;\n-  public final List<CombineFeature> combineFeatures;\n+    }\n+\n+    public final Map<String, Integer> matchMap;\n+\n+    public final List<SimpleFeature> simpleFeatureList;\n+\n+    public final List<CombineFeature> combineFeatures;\n+\n+    public String[] simpleFeatureNames;\n \n-  public String[] simpleFeatureNames;\n-  public int[] simpleFeatureIndexes;\n-  public String[][] combineFeatureNames;\n-  public int[][] combineFeatureIndexes;\n+    public int[] simpleFeatureIndexes;\n \n-  public FeatureInfo() {\n+    public String[][] combineFeatureNames;\n+\n+    public int[][] combineFeatureIndexes;\n+\n+    public FeatureInfo() {\n     // this.matchList = new ArrayList<Match>();\n     this.matchMap = new HashMap<String, Integer>();\n     this.simpleFeatureList = new ArrayList<SimpleFeature>();\n     this.combineFeatures = new ArrayList<CombineFeature>();\n-  }\n+    }\n \n-  public void addMatch(String name, int index) {\n+    public void addMatch(String name, int index) {\n     matchMap.put(name, index);\n-  }\n+    }\n \n-  public int findMatchIndex(String name) {\n+    public int findMatchIndex(String name) {\n     return matchMap.get(name);\n-  }\n+    }\n \n-  public void addSimpleFeature(String name) {\n+    public void addSimpleFeature(String name) {\n     simpleFeatureList.add(new SimpleFeature(name));\n-  }\n+    }\n \n-  public void addCombineFeatures(String name, String[] dependFeatures) {\n+    public void addCombineFeatures(String name, String[] dependFeatures) {\n     combineFeatures.add(new CombineFeature(name, dependFeatures));\n-  }\n+    }\n \n-  public int getMatchSize() {\n+    public int getMatchSize() {\n     return matchMap.size();\n-  }\n+    }\n \n-  public Map<String, Integer> getMatchMap() {\n+    public Map<String, Integer> getMatchMap() {\n     return matchMap;\n-  }\n+    }\n \n-  public List<SimpleFeature> getSimpleFeatureList() {\n+    public List<SimpleFeature> getSimpleFeatureList() {\n     return simpleFeatureList;\n-  }\n+    }\n \n-  public List<CombineFeature> getCombineFeatures() {\n+    public List<CombineFeature> getCombineFeatures() {\n     return combineFeatures;\n-  }\n+    }\n \n-  public String[][] getCombineFeatureNames() {\n+    public String[][] getCombineFeatureNames() {\n     if (combineFeatureNames == null) {\n-      combineFeatureNames = new String[combineFeatures.size()][];\n-      for (int i = 0; i < combineFeatures.size(); i++) {\n-        combineFeatureNames[i] = combineFeatures.get(i).dependFeatures;\n-      }\n+        combineFeatureNames = new String[combineFeatures.size()][];\n+        for (int i = 0; i < combineFeatures.size(); i++) {\n+                                         combineFeatureNames[i] = combineFeatures.get(i).dependFeatures;\n+        }\n     }\n-\n     return combineFeatureNames;\n-  }\n+    }\n \n-  public String[] getSimpleFeatureNames() {\n+    public String[] getSimpleFeatureNames() {\n     if (simpleFeatureNames == null) {\n-      simpleFeatureNames = new String[simpleFeatureList.size()];\n-      for (int i = 0; i < simpleFeatureNames.length; i++) {\n-        simpleFeatureNames[i] = simpleFeatureList.get(i).featureName;\n-      }\n+        simpleFeatureNames = new String[simpleFeatureList.size()];\n+        for (int i = 0; i < simpleFeatureNames.length; i++) {\n+                                        simpleFeatureNames[i] = simpleFeatureList.get(i).featureName;\n+        }\n     }\n-\n     return simpleFeatureNames;\n-  }\n+    }\n \n-  public int[] getSimpleFeatureIndexes() throws InvalidParameterException {\n+    public int[] getSimpleFeatureIndexes() throws InvalidParameterException {\n     if (simpleFeatureIndexes == null) {\n-      simpleFeatureIndexes = new int[simpleFeatureList.size()];\n-\n-      for (int i = 0; i < simpleFeatureIndexes.length; i++) {\n-        Integer index = matchMap.get(simpleFeatureList.get(i).featureName);\n-        if (index == null) {\n-          throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName\n-              + \" can not found in match list\");\n+        simpleFeatureIndexes = new int[simpleFeatureList.size()];\n+        for (int i = 0; i < simpleFeatureIndexes.length; i++) {\n+                                          Integer index = matchMap.get(simpleFeatureList.get(i).featureName);\n+                                          if (index == null) {\n+            throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName + \" can not found in match list\");\n+                                          }\n+                                          simpleFeatureIndexes[i] = index;\n         }\n-        simpleFeatureIndexes[i] = index;\n-      }\n     }\n-\n     return simpleFeatureIndexes;\n-  }\n+    }\n \n-  public int[][] getCombineFeatureIndexes() throws InvalidParameterException {\n+    public int[][] getCombineFeatureIndexes() throws InvalidParameterException {\n     if (combineFeatureIndexes == null) {\n-      combineFeatureIndexes = new int[combineFeatures.size()][];\n-\n-      for (int i = 0; i < combineFeatureIndexes.length; i++) {\n-        combineFeatureIndexes[i] = new int[combineFeatures.get(i).dependFeatures.length];\n-        for (int j = 0; j < combineFeatureIndexes[i].length; j++) {\n-          Integer index = matchMap.get(combineFeatures.get(i).dependFeatures[j]);\n-          if (index == null) {\n-            throw new InvalidParameterException(\"feature \"\n-                + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n-          }\n-          combineFeatureIndexes[i][j] = index;\n+        combineFeatureIndexes = new int[combineFeatures.size()][];\n+        for (int i = 0; i < combineFeatureIndexes.length; i++) {\n+                                           combineFeatureIndexes[i] = new int[combineFeatures.get(i).dependFeatures.length];\n+                                           for (int j = 0; j < combineFeatureIndexes[i].length; j++) {\n+                                                                   Integer index = matchMap.get(combineFeatures.get(i).dependFeatures[j]);\n+                                                                   if (index == null) {\n+                                               throw new InvalidParameterException(\"feature \" + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n+                                                                   }\n+                                                                   combineFeatureIndexes[i][j] = index;\n+                                           }\n         }\n-      }\n     }\n-\n     return combineFeatureIndexes;\n-  }\n-\n-  @Override\n-  public String toString() {\n-    return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList\n-        + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\"\n-        + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\"\n-        + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\"\n-        + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\"\n-        + Arrays.toString(combineFeatureIndexes) + \"]\";\n-  }\n-\n-}\n+    }\n+\n+    @Override\n+    public String toString() {\n+    return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\" + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\" + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\" + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\" + Arrays.toString(combineFeatureIndexes) + \"]\";\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}