{
    "error_id": "459",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/459/SparseFloatMatrixTest.java\nindex 8347ebc143..4a942760ec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/459/SparseFloatMatrixTest.java\n@@ -22,71 +22,71 @@ import org.junit.Test;\n import static junit.framework.Assert.assertEquals;\n \n public class SparseFloatMatrixTest {\n-  @Test\n-  public void testPlusByGet() {\n-    SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n-    matrix.plusBy(0, 0, 1.0f);\n-    matrix.plusBy(1, 1, 1.0f);\n-    assertEquals(matrix.get(0, 0), 1.0f);\n-    assertEquals(matrix.get(0, 1), 0.0f);\n-    assertEquals(matrix.get(1, 0), 0.0f);\n-    assertEquals(matrix.get(1, 1), 1.0f);\n+    @Test\n+    public void testPlusByGet() {\n+        SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n+        matrix.plusBy(0, 0, 1.0f);\n+        matrix.plusBy(1, 1, 1.0f);\n+        assertEquals(matrix.get(0, 0), 1.0f);\n+        assertEquals(matrix.get(0, 1), 0.0f);\n+        assertEquals(matrix.get(1, 0), 0.0f);\n+        assertEquals(matrix.get(1, 1), 1.0f);\n \n-    matrix.clear();\n-    SparseFloatVector incVec = new SparseFloatVector(2);\n-    incVec.set(0, 1);\n-    incVec.set(1, 1);\n-    incVec.setRowId(0);\n-    matrix.plusBy(incVec);\n-    assertEquals(matrix.get(0, 0), 1.0f);\n-    assertEquals(matrix.get(0, 1), 1.0f);\n-    assertEquals(matrix.get(1, 0), 0.0f);\n-    assertEquals(matrix.get(1, 1), 0.0f);\n+        matrix.clear();\n+        SparseFloatVector incVec = new SparseFloatVector(2);\n+        incVec.set(0, 1);\n+        incVec.set(1, 1);\n+        incVec.setRowId(0);\n+        matrix.plusBy(incVec);\n+        assertEquals(matrix.get(0, 0), 1.0f);\n+        assertEquals(matrix.get(0, 1), 1.0f);\n+        assertEquals(matrix.get(1, 0), 0.0f);\n+        assertEquals(matrix.get(1, 1), 0.0f);\n \n-    matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n-    float [] values = {1.0f, 1.0f};\n-    matrix.plusBy(rowIndexes, colIndexes, values);\n-    assertEquals(matrix.get(0, 0), 1.0f);\n-    assertEquals(matrix.get(0, 1), 0.0f);\n-    assertEquals(matrix.get(1, 0), 0.0f);\n-    assertEquals(matrix.get(1, 1), 1.0f);\n+        matrix.clear();\n+        int[] rowIndexes = {0, 1};\n+        int[] colIndexes = {0, 1};\n+        float[] values = {1.0f, 1.0f};\n+        matrix.plusBy(rowIndexes, colIndexes, values);\n+        assertEquals(matrix.get(0, 0), 1.0f);\n+        assertEquals(matrix.get(0, 1), 0.0f);\n+        assertEquals(matrix.get(1, 0), 0.0f);\n+        assertEquals(matrix.get(1, 1), 1.0f);\n \n-    matrix.clear();\n-    colIndexes[0] = 0;\n-    colIndexes[1] = 1;\n-    values[0] = 1.0f;\n-    values[1] = 1.0f;\n-    matrix.plusBy(0, colIndexes, values);\n-    assertEquals(matrix.get(0, 0), 1.0f);\n-    assertEquals(matrix.get(0, 1), 1.0f);\n-    assertEquals(matrix.get(1, 0), 0.0f);\n-    assertEquals(matrix.get(1, 1), 0.0f);\n+        matrix.clear();\n+        colIndexes[0] = 0;\n+        colIndexes[1] = 1;\n+        values[0] = 1.0f;\n+        values[1] = 1.0f;\n+        matrix.plusBy(0, colIndexes, values);\n+        assertEquals(matrix.get(0, 0), 1.0f);\n+        assertEquals(matrix.get(0, 1), 1.0f);\n+        assertEquals(matrix.get(1, 0), 0.0f);\n+        assertEquals(matrix.get(1, 1), 0.0f);\n \n-    SparseFloatMatrix matrix1 = new SparseFloatMatrix(2, 2);\n-    matrix.clear();\n-    matrix.plusBy(0, 0, 1.0f);\n-    matrix.plusBy(1, 1, 1.0f);\n-    matrix1.plusBy(0, 0, 1.0f);\n-    matrix1.plusBy(1, 1, 1.0f);\n-    matrix.plusBy(matrix1);\n-    assertEquals(matrix.get(0, 0), 2.0f);\n-    assertEquals(matrix.get(0, 1), 0.0f);\n-    assertEquals(matrix.get(1, 0), 0.0f);\n-    assertEquals(matrix.get(1, 1), 2.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(0)).get(0), 2.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(0)).get(1), 0.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(1)).get(0), 0.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(1)).get(1), 2.0f);\n-  }\n+        SparseFloatMatrix matrix1 = new SparseFloatMatrix(2, 2);\n+        matrix.clear();\n+        matrix.plusBy(0, 0, 1.0f);\n+        matrix.plusBy(1, 1, 1.0f);\n+        matrix1.plusBy(0, 0, 1.0f);\n+        matrix1.plusBy(1, 1, 1.0f);\n+        matrix.plusBy(matrix1);\n+        assertEquals(matrix.get(0, 0), 2.0f);\n+        assertEquals(matrix.get(0, 1), 0.0f);\n+        assertEquals(matrix.get(1, 0), 0.0f);\n+        assertEquals(matrix.get(1, 1), 2.0f);\n+        assertEquals(((SparseFloatVector) matrix.getTVector(0)).get(0), 2.0f);\n+        assertEquals(((SparseFloatVector) matrix.getTVector(0)).get(1), 0.0f);\n+        assertEquals(((SparseFloatVector) matrix.getTVector(1)).get(0), 0.0f);\n+        assertEquals(((SparseFloatVector) matrix.getTVector(1)).get(1), 2.0f);\n+    }\n \n-  @Test\n-  public void testSizeSparsity() {\n-    SparseFloatMatrix matrix= new SparseFloatMatrix(2, 2);\n-    matrix.plusBy(0, 0, 1.0f);\n-    matrix.plusBy(1, 1, 1.0f);\n-    assertEquals(matrix.size(), 4);\n-    assertEquals(matrix.sparsity(), 0.5);\n-  }\n+    @Test\n+    public void testSizeSparsity() {\n+        SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n+        matrix.plusBy(0, 0, 1.0f);\n+        matrix.plusBy(1, 1, 1.0f);\n+        assertEquals(matrix.size(), 4);\n+        assertEquals(matrix.sparsity(), 0.5);\n+    }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/459/SparseFloatMatrixTest.java\nindex 8347ebc143..a702973064 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/459/SparseFloatMatrixTest.java\n@@ -44,9 +44,9 @@ public class SparseFloatMatrixTest {\n     assertEquals(matrix.get(1, 1), 0.0f);\n \n     matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n-    float [] values = {1.0f, 1.0f};\n+    int[] rowIndexes = {0, 1};\n+    int[] colIndexes = {0, 1};\n+    float[] values = {1.0f, 1.0f};\n     matrix.plusBy(rowIndexes, colIndexes, values);\n     assertEquals(matrix.get(0, 0), 1.0f);\n     assertEquals(matrix.get(0, 1), 0.0f);\n@@ -83,10 +83,10 @@ public class SparseFloatMatrixTest {\n \n   @Test\n   public void testSizeSparsity() {\n-    SparseFloatMatrix matrix= new SparseFloatMatrix(2, 2);\n+    SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0f);\n     matrix.plusBy(1, 1, 1.0f);\n     assertEquals(matrix.size(), 4);\n     assertEquals(matrix.sparsity(), 0.5);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/459/SparseFloatMatrixTest.java\nindex 8347ebc143..d60d540c38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/459/SparseFloatMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/459/SparseFloatMatrixTest.java\n@@ -18,12 +18,13 @@ package com.tencent.angel.ml.math.matrix;\n \n import com.tencent.angel.ml.math.vector.SparseFloatVector;\n import org.junit.Test;\n-\n import static junit.framework.Assert.assertEquals;\n \n public class SparseFloatMatrixTest {\n-  @Test\n-  public void testPlusByGet() {\n+\n+\n+    @Test\n+    public void testPlusByGet() {\n     SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0f);\n     matrix.plusBy(1, 1, 1.0f);\n@@ -31,7 +32,6 @@ public class SparseFloatMatrixTest {\n     assertEquals(matrix.get(0, 1), 0.0f);\n     assertEquals(matrix.get(1, 0), 0.0f);\n     assertEquals(matrix.get(1, 1), 1.0f);\n-\n     matrix.clear();\n     SparseFloatVector incVec = new SparseFloatVector(2);\n     incVec.set(0, 1);\n@@ -42,17 +42,16 @@ public class SparseFloatMatrixTest {\n     assertEquals(matrix.get(0, 1), 1.0f);\n     assertEquals(matrix.get(1, 0), 0.0f);\n     assertEquals(matrix.get(1, 1), 0.0f);\n-\n     matrix.clear();\n-    int [] rowIndexes = {0, 1};\n-    int [] colIndexes = {0, 1};\n-    float [] values = {1.0f, 1.0f};\n+\n+    int[] rowIndexes = {0, 1};\n+    int[] colIndexes = {0, 1};\n+    float[] values = {1.0f, 1.0f};\n     matrix.plusBy(rowIndexes, colIndexes, values);\n     assertEquals(matrix.get(0, 0), 1.0f);\n     assertEquals(matrix.get(0, 1), 0.0f);\n     assertEquals(matrix.get(1, 0), 0.0f);\n     assertEquals(matrix.get(1, 1), 1.0f);\n-\n     matrix.clear();\n     colIndexes[0] = 0;\n     colIndexes[1] = 1;\n@@ -63,7 +62,6 @@ public class SparseFloatMatrixTest {\n     assertEquals(matrix.get(0, 1), 1.0f);\n     assertEquals(matrix.get(1, 0), 0.0f);\n     assertEquals(matrix.get(1, 1), 0.0f);\n-\n     SparseFloatMatrix matrix1 = new SparseFloatMatrix(2, 2);\n     matrix.clear();\n     matrix.plusBy(0, 0, 1.0f);\n@@ -75,18 +73,18 @@ public class SparseFloatMatrixTest {\n     assertEquals(matrix.get(0, 1), 0.0f);\n     assertEquals(matrix.get(1, 0), 0.0f);\n     assertEquals(matrix.get(1, 1), 2.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(0)).get(0), 2.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(0)).get(1), 0.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(1)).get(0), 0.0f);\n-    assertEquals(((SparseFloatVector)matrix.getTVector(1)).get(1), 2.0f);\n-  }\n+    assertEquals(((SparseFloatVector) matrix.getTVector(0)).get(0), 2.0f);\n+    assertEquals(((SparseFloatVector) matrix.getTVector(0)).get(1), 0.0f);\n+    assertEquals(((SparseFloatVector) matrix.getTVector(1)).get(0), 0.0f);\n+    assertEquals(((SparseFloatVector) matrix.getTVector(1)).get(1), 2.0f);\n+    }\n \n-  @Test\n-  public void testSizeSparsity() {\n-    SparseFloatMatrix matrix= new SparseFloatMatrix(2, 2);\n+    @Test\n+    public void testSizeSparsity() {\n+    SparseFloatMatrix matrix = new SparseFloatMatrix(2, 2);\n     matrix.plusBy(0, 0, 1.0f);\n     matrix.plusBy(1, 1, 1.0f);\n     assertEquals(matrix.size(), 4);\n     assertEquals(matrix.sparsity(), 0.5);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}