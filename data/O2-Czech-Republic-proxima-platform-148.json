{
    "error_id": "148",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 95).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    FileFormat format = FileFormat.blob(true);\n    NamingConvention namingConvention =\n        FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n    assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/148/FileFormatUtilsTest.java\nindex 7a606e773c..1ce04d9532 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/148/FileFormatUtilsTest.java\n@@ -28,6 +28,6 @@ public class FileFormatUtilsTest {\n     FileFormat format = FileFormat.blob(true);\n     NamingConvention namingConvention =\n         FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n-    assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n+      assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/148/FileFormatUtilsTest.java\nindex 7a606e773c..4af8d3c0bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/148/FileFormatUtilsTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.*;\n@@ -27,7 +28,8 @@ public class FileFormatUtilsTest {\n   public void testNamingConvention() {\n     FileFormat format = FileFormat.blob(true);\n     NamingConvention namingConvention =\n-        FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n+        FileFormatUtils\n+            .getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n     assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n   }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/148/FileFormatUtilsTest.java\nindex 7a606e773c..3411807294 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/148/FileFormatUtilsTest.java\n@@ -30,4 +30,4 @@ public class FileFormatUtilsTest {\n         FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n     assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/148/FileFormatUtilsTest.java\nindex 7a606e773c..c18db934ad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/148/FileFormatUtilsTest.java\n@@ -16,18 +16,18 @@\n package cz.o2.proxima.direct.bulk;\n \n import static org.junit.Assert.*;\n-\n import java.util.Collections;\n import org.junit.Test;\n \n /** Test {@link FileFormatUtils}. */\n+\n+\n public class FileFormatUtilsTest {\n \n-  @Test\n-  public void testNamingConvention() {\n+    @Test\n+    public void testNamingConvention() {\n     FileFormat format = FileFormat.blob(true);\n-    NamingConvention namingConvention =\n-        FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n+    NamingConvention namingConvention = FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n     assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "column": "167",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/148/FileFormatUtilsTest.java\nindex 7a606e773c..c0d4c39847 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/148/FileFormatUtilsTest.java\n@@ -27,7 +27,7 @@ public class FileFormatUtilsTest {\n   public void testNamingConvention() {\n     FileFormat format = FileFormat.blob(true);\n     NamingConvention namingConvention =\n-        FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n-    assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n-  }\n-}\n+        FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000,format);assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n+      }\n+    }\n+    \n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/148/FileFormatUtilsTest.java\nindex 7a606e773c..1ce04d9532 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/148/FileFormatUtilsTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/148/FileFormatUtilsTest.java\n@@ -28,6 +28,6 @@ public class FileFormatUtilsTest {\n     FileFormat format = FileFormat.blob(true);\n     NamingConvention namingConvention =\n         FileFormatUtils.getNamingConvention(\"prefix\", Collections.emptyMap(), 3600000, format);\n-    assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n+      assertTrue(namingConvention.nameOf(1500000000000L).startsWith(\"/2017/\"));\n   }\n }\n",
            "diff_size": 1
        }
    ]
}