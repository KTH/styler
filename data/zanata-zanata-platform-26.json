{
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "157",
                "column": "13",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n            // attach the extensions to the authentication request\n            for(MessageExtension ext : extensions) {\n                authReq.addExtension(ext,\n                        openIdProvider.getAliasForExtension(ext));\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/26/ZanataOpenId.java\nindex 9f9c62f089..7931bada1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/26/ZanataOpenId.java\n@@ -154,7 +154,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/26/ZanataOpenId.java\nindex 9f9c62f089..3890e265af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/26/ZanataOpenId.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.security;\n \n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n@@ -71,7 +72,7 @@ import java.util.List;\n  */\n public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private static final Logger LOGGER = LoggerFactory\n-            .getLogger(ZanataOpenId.class);\n+        .getLogger(ZanataOpenId.class);\n     private static final long serialVersionUID = 275020888578950801L;\n \n     @Inject\n@@ -151,12 +152,12 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n             AuthRequest authReq = manager.authenticate(discovered, returnToUrl, realm());\n \n             Collection<MessageExtension> extensions =\n-                    openIdProvider.createExtensions();\n+                openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n-                        openIdProvider.getAliasForExtension(ext));\n+                    openIdProvider.getAliasForExtension(ext));\n             }\n \n             return authReq.getDestinationUrl(true);\n@@ -169,8 +170,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n \n     public void verify() {\n         ExternalContext context =\n-                javax.faces.context.FacesContext.getCurrentInstance()\n-                        .getExternalContext();\n+            javax.faces.context.FacesContext.getCurrentInstance()\n+                .getExternalContext();\n         HttpServletRequest request = (HttpServletRequest) context.getRequest();\n \n         authResult.setAuthenticatedId(verifyResponse(request));\n@@ -179,7 +180,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     public boolean loginImmediately() {\n         if (authResult.isAuthenticated()) {\n             ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                    (new SimplePrincipal(authResult.getAuthenticatedId())));\n+                (new SimplePrincipal(authResult.getAuthenticatedId())));\n             return true;\n         }\n \n@@ -219,8 +220,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n             // verify the response; ConsumerManager needs to be the same\n             // (static) instance used to place the authentication request\n             VerificationResult verification =\n-                    manager.verify(receivingURL.toString(), respParams,\n-                            discovered);\n+                manager.verify(receivingURL.toString(), respParams,\n+                    discovered);\n \n             // The OpenId provider cancelled the authentication\n             // TODO shouldn't we check verification.getAuthResponse() instanceof AuthFailure ?\n@@ -280,10 +281,10 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         if (loginImmediately()) {\n             if (org.zanata.util.Contexts.isRequestContextActive()) {\n                 HAccount authenticatedAccount =\n-                        ServiceLocator.instance().getInstance(\n-                                HAccount.class, new AuthenticatedLiteral());\n+                    ServiceLocator.instance().getInstance(\n+                        HAccount.class, new AuthenticatedLiteral());\n                 postAuthenticateEvent.fire(new PostAuthenticateEvent(\n-                        authenticatedAccount));\n+                    authenticatedAccount));\n             }\n \n             // Events.instance().raiseEvent(Identity.EVENT_LOGIN_SUCCESSFUL,\n@@ -293,7 +294,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     }\n \n     private void authenticate(String username, OpenIdProvider openIdProvider,\n-            OpenIdAuthCallback callback) {\n+                              OpenIdAuthCallback callback) {\n         String var = openIdProvider.getOpenId(username);\n         setId(var);\n         setCallback(callback);\n@@ -347,20 +348,20 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n         if (result.isAuthenticated()) {\n             HAccount authenticatedAccount =\n-                    accountDAO.getByCredentialsId(result.getAuthenticatedId());\n+                accountDAO.getByCredentialsId(result.getAuthenticatedId());\n \n             identity.setPreAuthenticated(true);\n \n             // TODO check authenticatedAccount != null only once\n             if (authenticatedAccount != null\n-                    && authenticatedAccount.isEnabled()) {\n+                && authenticatedAccount.isEnabled()) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n                 ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                        (new SimplePrincipal(result.getAuthenticatedId())));\n+                    (new SimplePrincipal(result.getAuthenticatedId())));\n                 this.loginImmediate();\n             } else if (authenticatedAccount != null) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n+            } else {\n                 // If the user hasn't been registered yet\n                 // this is the full open id\n                 credentials.setUsername(result.getAuthenticatedId());\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/26/ZanataOpenId.java\nindex 9f9c62f089..095827c3b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/26/ZanataOpenId.java\n@@ -154,7 +154,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n@@ -319,10 +319,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         String url = authRequest(openIdProvider, id, returnToUrl);\n \n         if (url != null) {\n-            // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n-//            Redirect redirect = Redirect.instance();\n-//            redirect.captureCurrentView();\n-            try {\n+            // TO\n+try {\n                 FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n@@ -360,7 +358,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                 this.loginImmediate();\n             } else if (authenticatedAccount != null) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n+            } else {\n                 // If the user hasn't been registered yet\n                 // this is the full open id\n                 credentials.setUsername(result.getAuthenticatedId());\n@@ -395,4 +393,4 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                 throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/26/ZanataOpenId.java\nindex 9f9c62f089..b3d8cb335c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/26/ZanataOpenId.java\n@@ -51,7 +51,6 @@ import org.zanata.ui.faces.FacesMessages;\n import org.zanata.util.ServiceLocator;\n import org.zanata.util.Synchronized;\n import org.zanata.util.UrlUtil;\n-\n import javax.annotation.PostConstruct;\n import javax.enterprise.context.SessionScoped;\n import javax.enterprise.event.Event;\n@@ -64,14 +63,14 @@ import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n \n+\n @SessionScoped\n @Synchronized\n /*\n  * based on org.jboss.seam.security.openid.OpenId class\n  */\n public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n-    private static final Logger LOGGER = LoggerFactory\n-            .getLogger(ZanataOpenId.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZanataOpenId.class);\n     private static final long serialVersionUID = 275020888578950801L;\n \n     @Inject\n@@ -149,44 +148,35 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n             // obtain a AuthRequest message to be sent to the OpenID\n             // providerType\n             AuthRequest authReq = manager.authenticate(discovered, returnToUrl, realm());\n-\n-            Collection<MessageExtension> extensions =\n-                    openIdProvider.createExtensions();\n+            Collection<MessageExtension> extensions = openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n-                authReq.addExtension(ext,\n-                        openIdProvider.getAliasForExtension(ext));\n+            for (MessageExtension ext : extensions) {\n+                authReq.addExtension(ext, openIdProvider.getAliasForExtension(ext));\n             }\n-\n             return authReq.getDestinationUrl(true);\n         } catch (OpenIDException e) {\n             LOGGER.warn(\"exception\", e);\n         }\n-\n         return null;\n     }\n \n     public void verify() {\n-        ExternalContext context =\n-                javax.faces.context.FacesContext.getCurrentInstance()\n-                        .getExternalContext();\n+        ExternalContext context = javax.faces.context.FacesContext.getCurrentInstance().getExternalContext();\n         HttpServletRequest request = (HttpServletRequest) context.getRequest();\n-\n         authResult.setAuthenticatedId(verifyResponse(request));\n     }\n \n     public boolean loginImmediately() {\n         if (authResult.isAuthenticated()) {\n-            ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                    (new SimplePrincipal(authResult.getAuthenticatedId())));\n+            ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal((new SimplePrincipal(authResult.getAuthenticatedId())));\n             return true;\n         }\n-\n         return false;\n     }\n \n     // returns a verified id (external username), or null\n+\n     @Transactional\n     public String verifyResponse(HttpServletRequest httpReq) {\n         try {\n@@ -204,8 +194,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n              * due to the unicode encoding in URI is different from signature.\n              * Reported issue: https://zanata.atlassian.net/browse/ZNTA-1275\n              */\n-            ParameterList respParams =\n-                ParameterList.createFromQueryString(httpReq.getQueryString());\n+            ParameterList respParams = ParameterList.createFromQueryString(httpReq.getQueryString());\n             AuthSuccess authSuccess = AuthSuccess.createAuthSuccess(respParams);\n \n             // strip existing params (eg dswid)\n@@ -218,9 +207,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n \n             // verify the response; ConsumerManager needs to be the same\n             // (static) instance used to place the authentication request\n-            VerificationResult verification =\n-                    manager.verify(receivingURL.toString(), respParams,\n-                            discovered);\n+            VerificationResult verification = manager.verify(receivingURL.toString(), respParams, discovered);\n \n             // The OpenId provider cancelled the authentication\n             // TODO shouldn't we check verification.getAuthResponse() instanceof AuthFailure ?\n@@ -252,14 +239,12 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     userRedirect.setUrl(callback.getRedirectToUrl());\n                 }\n             }\n-\n             if (verified != null) {\n                 return verified.getIdentifier();\n             }\n         } catch (OpenIDException e) {\n             LOGGER.warn(\"exception\", e);\n         }\n-\n         return null;\n     }\n \n@@ -279,11 +264,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private void loginImmediate() {\n         if (loginImmediately()) {\n             if (org.zanata.util.Contexts.isRequestContextActive()) {\n-                HAccount authenticatedAccount =\n-                        ServiceLocator.instance().getInstance(\n-                                HAccount.class, new AuthenticatedLiteral());\n-                postAuthenticateEvent.fire(new PostAuthenticateEvent(\n-                        authenticatedAccount));\n+                HAccount authenticatedAccount = ServiceLocator.instance().getInstance(HAccount.class, new AuthenticatedLiteral());\n+                postAuthenticateEvent.fire(new PostAuthenticateEvent(authenticatedAccount));\n             }\n \n             // Events.instance().raiseEvent(Identity.EVENT_LOGIN_SUCCESSFUL,\n@@ -292,8 +274,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         }\n     }\n \n-    private void authenticate(String username, OpenIdProvider openIdProvider,\n-            OpenIdAuthCallback callback) {\n+    private void authenticate(String username, OpenIdProvider openIdProvider, OpenIdAuthCallback callback) {\n         String var = openIdProvider.getOpenId(username);\n         setId(var);\n         setCallback(callback);\n@@ -315,9 +296,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private void authenticate(OpenIdProvider openIdProvider) {\n         authResult = new OpenIdAuthenticationResult();\n         String returnToUrl = returnToUrl();\n-\n         String url = authRequest(openIdProvider, id, returnToUrl);\n-\n         if (url != null) {\n             // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n //            Redirect redirect = Redirect.instance();\n@@ -343,24 +322,21 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n      * Default implementation for an authentication callback. This\n      * implementations simply authenticates the user locally.\n      */\n+\n     @Override\n     public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n         if (result.isAuthenticated()) {\n-            HAccount authenticatedAccount =\n-                    accountDAO.getByCredentialsId(result.getAuthenticatedId());\n-\n+            HAccount authenticatedAccount = accountDAO.getByCredentialsId(result.getAuthenticatedId());\n             identity.setPreAuthenticated(true);\n \n             // TODO check authenticatedAccount != null only once\n-            if (authenticatedAccount != null\n-                    && authenticatedAccount.isEnabled()) {\n+            if (authenticatedAccount != null && authenticatedAccount.isEnabled()) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-                ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                        (new SimplePrincipal(result.getAuthenticatedId())));\n+                ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal((new SimplePrincipal(result.getAuthenticatedId())));\n                 this.loginImmediate();\n             } else if (authenticatedAccount != null) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n+            } else {\n                 // If the user hasn't been registered yet\n                 // this is the full open id\n                 credentials.setUsername(result.getAuthenticatedId());\n@@ -372,6 +348,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n      * Default implementation for an authentication callback. This\n      * implementation does not provide a redirect url.\n      */\n+\n     @Override\n     public String getRedirectToUrl() {\n         return null;\n@@ -382,17 +359,14 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n             throw new RuntimeException(\"OpenIdProviderType is null\");\n         }\n         switch (openIdProviderType) {\n-            case Fedora:\n-                return new FedoraOpenIdProvider();\n-\n-            case Yahoo:\n-                return new YahooOpenIdProvider();\n-\n-            case Generic:\n-                return new GenericOpenIdProvider();\n-\n-            default:\n-                throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n+        case Fedora:\n+            return new FedoraOpenIdProvider();\n+        case Yahoo:\n+            return new YahooOpenIdProvider();\n+        case Generic:\n+            return new GenericOpenIdProvider();\n+        default:\n+            throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/26/ZanataOpenId.java\nindex 9f9c62f089..7931bada1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/26/ZanataOpenId.java\n@@ -154,7 +154,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/26/ZanataOpenId.java\nindex 9f9c62f089..7931bada1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/26/ZanataOpenId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/26/ZanataOpenId.java\n@@ -154,7 +154,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        }
    ]
}