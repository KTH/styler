{
    "error_id": "354",
    "information": {
        "errors": [
            {
                "line": "56",
                "column": "47",
                "severity": "error",
                "message": "'=' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n\n        ResponseEntity<String> responseEntity =visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n\n        context.setResponseEntity(responseEntity);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/354/SaveVisitListener.java\nindex dadebdef31..e3b5bf482a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/354/SaveVisitListener.java\n@@ -53,7 +53,7 @@ public class SaveVisitListener extends AbstractServiceApiListener {\n \n \n \n-        ResponseEntity<String> responseEntity =visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n+        ResponseEntity<String> responseEntity = visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n \n         context.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/354/SaveVisitListener.java\nindex dadebdef31..66e8ab271b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/354/SaveVisitListener.java\n@@ -26,74 +26,74 @@ import com.java110.core.annotation.Java110Listener;\n @Java110Listener(\"saveVisitListener\")\n public class SaveVisitListener extends AbstractServiceApiListener {\n \n-    @Autowired\n-    private IVisitBMO visitBMOImpl;\n-    @Override\n-    protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n-        //Assert.hasKeyAndValue(reqJson, \"xxx\", \"xxx\");\n+  @Autowired\n+  private IVisitBMO visitBMOImpl;\n \n-        Assert.hasKeyAndValue(reqJson, \"vName\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n-        Assert.hasKeyAndValue(reqJson, \"visitGender\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n-        Assert.hasKeyAndValue(reqJson, \"phoneNumber\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u8054\u7cfb\u65b9\u5f0f\");\n-        Assert.hasKeyAndValue(reqJson, \"visitTime\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u62dc\u8bbf\u65f6\u95f4\");\n+  @Override\n+  protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n+    //Assert.hasKeyAndValue(reqJson, \"xxx\", \"xxx\");\n \n-    }\n+    Assert.hasKeyAndValue(reqJson, \"vName\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n+    Assert.hasKeyAndValue(reqJson, \"visitGender\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n+    Assert.hasKeyAndValue(reqJson, \"phoneNumber\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u8054\u7cfb\u65b9\u5f0f\");\n+    Assert.hasKeyAndValue(reqJson, \"visitTime\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u62dc\u8bbf\u65f6\u95f4\");\n \n-    @Override\n-    protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n+  }\n \n-        HttpHeaders header = new HttpHeaders();\n-        context.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n-        JSONArray businesses = new JSONArray();\n+  @Override\n+  protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n \n-        AppService service = event.getAppService();\n+    HttpHeaders header = new HttpHeaders();\n+    context.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n+    JSONArray businesses = new JSONArray();\n \n-        //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n-        businesses.add(addVisit(reqJson, context));\n+    AppService service = event.getAppService();\n \n+    //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n+    businesses.add(addVisit(reqJson, context));\n \n \n-        ResponseEntity<String> responseEntity =visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n+    ResponseEntity<String> responseEntity = visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n \n-        context.setResponseEntity(responseEntity);\n-    }\n+    context.setResponseEntity(responseEntity);\n+  }\n \n-    @Override\n-    public String getServiceCode() {\n-        return ServiceCodeVisitConstant.ADD_VISIT;\n-    }\n+  @Override\n+  public String getServiceCode() {\n+    return ServiceCodeVisitConstant.ADD_VISIT;\n+  }\n \n-    @Override\n-    public HttpMethod getHttpMethod() {\n-        return HttpMethod.POST;\n-    }\n+  @Override\n+  public HttpMethod getHttpMethod() {\n+    return HttpMethod.POST;\n+  }\n \n-    @Override\n-    public int getOrder() {\n-        return DEFAULT_ORDER;\n-    }\n+  @Override\n+  public int getOrder() {\n+    return DEFAULT_ORDER;\n+  }\n \n \n-    /**\n-     * \u6dfb\u52a0\u5c0f\u533a\u4fe1\u606f\n-     *\n-     * @param paramInJson     \u63a5\u53e3\u8c03\u7528\u653e\u4f20\u5165\u5165\u53c2\n-     * @param dataFlowContext \u6570\u636e\u4e0a\u4e0b\u6587\n-     * @return \u8ba2\u5355\u670d\u52a1\u80fd\u591f\u63a5\u53d7\u7684\u62a5\u6587\n-     */\n-    private JSONObject addVisit(JSONObject paramInJson, DataFlowContext dataFlowContext) {\n+  /**\n+   * \u6dfb\u52a0\u5c0f\u533a\u4fe1\u606f\n+   *\n+   * @param paramInJson     \u63a5\u53e3\u8c03\u7528\u653e\u4f20\u5165\u5165\u53c2\n+   * @param dataFlowContext \u6570\u636e\u4e0a\u4e0b\u6587\n+   * @return \u8ba2\u5355\u670d\u52a1\u80fd\u591f\u63a5\u53d7\u7684\u62a5\u6587\n+   */\n+  private JSONObject addVisit(JSONObject paramInJson, DataFlowContext dataFlowContext) {\n \n \n-        JSONObject business = JSONObject.parseObject(\"{\\\"datas\\\":{}}\");\n-        business.put(CommonConstant.HTTP_BUSINESS_TYPE_CD, BusinessTypeConstant.BUSINESS_TYPE_SAVE_VISIT);\n-        business.put(CommonConstant.HTTP_SEQ, DEFAULT_SEQ);\n-        business.put(CommonConstant.HTTP_INVOKE_MODEL, CommonConstant.HTTP_INVOKE_MODEL_S);\n-        JSONObject businessVisit = new JSONObject();\n-        businessVisit.putAll(paramInJson);\n-        businessVisit.put(\"vId\", \"-1\");\n-        //\u8ba1\u7b97 \u5e94\u6536\u91d1\u989dbusinessVisit\n-        business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(\"businessVisit\", businessVisit);\n-        return business;\n-    }\n+    JSONObject business = JSONObject.parseObject(\"{\\\"datas\\\":{}}\");\n+    business.put(CommonConstant.HTTP_BUSINESS_TYPE_CD, BusinessTypeConstant.BUSINESS_TYPE_SAVE_VISIT);\n+    business.put(CommonConstant.HTTP_SEQ, DEFAULT_SEQ);\n+    business.put(CommonConstant.HTTP_INVOKE_MODEL, CommonConstant.HTTP_INVOKE_MODEL_S);\n+    JSONObject businessVisit = new JSONObject();\n+    businessVisit.putAll(paramInJson);\n+    businessVisit.put(\"vId\", \"-1\");\n+    //\u8ba1\u7b97 \u5e94\u6536\u91d1\u989dbusinessVisit\n+    business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(\"businessVisit\", businessVisit);\n+    return business;\n+  }\n \n }\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/354/SaveVisitListener.java\nindex dadebdef31..390edb5753 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/354/SaveVisitListener.java\n@@ -15,59 +15,59 @@ import org.springframework.http.ResponseEntity;\n import com.java110.utils.constant.CommonConstant;\n import com.java110.utils.constant.BusinessTypeConstant;\n import com.java110.utils.constant.ServiceCodeVisitConstant;\n-\n-\n import com.java110.core.annotation.Java110Listener;\n \n /**\n  * \u4fdd\u5b58\u5c0f\u533a\u4fa6\u542c\n  * add by wuxw 2019-06-30\n  */\n+\n+\n @Java110Listener(\"saveVisitListener\")\n public class SaveVisitListener extends AbstractServiceApiListener {\n \n     @Autowired\n     private IVisitBMO visitBMOImpl;\n+\n     @Override\n     protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n         //Assert.hasKeyAndValue(reqJson, \"xxx\", \"xxx\");\n-\n         Assert.hasKeyAndValue(reqJson, \"vName\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n         Assert.hasKeyAndValue(reqJson, \"visitGender\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u59d3\u540d\");\n         Assert.hasKeyAndValue(reqJson, \"phoneNumber\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u8054\u7cfb\u65b9\u5f0f\");\n         Assert.hasKeyAndValue(reqJson, \"visitTime\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u8bbf\u5ba2\u62dc\u8bbf\u65f6\u95f4\");\n-\n     }\n \n-    @Override\n-    protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n \n+    @Override\n+    protected void doSoService(ServiceDataFlowEvent event,\n+                               DataFlowContext context, JSONObject reqJson) {\n         HttpHeaders header = new HttpHeaders();\n         context.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n-        JSONArray businesses = new JSONArray();\n \n+        JSONArray businesses = new JSONArray();\n         AppService service = event.getAppService();\n \n         //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n         businesses.add(addVisit(reqJson, context));\n \n-\n-\n-        ResponseEntity<String> responseEntity =visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n-\n+        ResponseEntity<String> responseEntity = visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n         context.setResponseEntity(responseEntity);\n     }\n \n+\n     @Override\n     public String getServiceCode() {\n         return ServiceCodeVisitConstant.ADD_VISIT;\n     }\n \n+\n     @Override\n     public HttpMethod getHttpMethod() {\n         return HttpMethod.POST;\n     }\n \n+\n     @Override\n     public int getOrder() {\n         return DEFAULT_ORDER;\n@@ -81,13 +81,14 @@ public class SaveVisitListener extends AbstractServiceApiListener {\n      * @param dataFlowContext \u6570\u636e\u4e0a\u4e0b\u6587\n      * @return \u8ba2\u5355\u670d\u52a1\u80fd\u591f\u63a5\u53d7\u7684\u62a5\u6587\n      */\n-    private JSONObject addVisit(JSONObject paramInJson, DataFlowContext dataFlowContext) {\n \n \n+    private JSONObject addVisit(JSONObject paramInJson, DataFlowContext dataFlowContext) {\n         JSONObject business = JSONObject.parseObject(\"{\\\"datas\\\":{}}\");\n         business.put(CommonConstant.HTTP_BUSINESS_TYPE_CD, BusinessTypeConstant.BUSINESS_TYPE_SAVE_VISIT);\n         business.put(CommonConstant.HTTP_SEQ, DEFAULT_SEQ);\n         business.put(CommonConstant.HTTP_INVOKE_MODEL, CommonConstant.HTTP_INVOKE_MODEL_S);\n+\n         JSONObject businessVisit = new JSONObject();\n         businessVisit.putAll(paramInJson);\n         businessVisit.put(\"vId\", \"-1\");\n@@ -95,5 +96,4 @@ public class SaveVisitListener extends AbstractServiceApiListener {\n         business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(\"businessVisit\", businessVisit);\n         return business;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/354/SaveVisitListener.java\nindex dadebdef31..e3b5bf482a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/354/SaveVisitListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/354/SaveVisitListener.java\n@@ -53,7 +53,7 @@ public class SaveVisitListener extends AbstractServiceApiListener {\n \n \n \n-        ResponseEntity<String> responseEntity =visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n+        ResponseEntity<String> responseEntity = visitBMOImpl.callService(context, service.getServiceCode(), businesses);\n \n         context.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "column": "47",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}