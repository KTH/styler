{
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "284",
                "column": "44",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public BigInteger getAsBigInteger() {\n        return value instanceof BigInteger ?\n                (BigInteger) value : new BigInteger(value.toString());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler/42/JsonPrimitiveNode.java\nindex 402be55956..b0b4a7c5df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler/42/JsonPrimitiveNode.java\n@@ -281,130 +281,129 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n-    }\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a float.\n      *\n      * @return get this element as a float.\n      * @throws NumberFormatException if the value contained is not a valid float.\n      */\n-    @Override\n-    public float getAsFloat() {\n-        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n-    }\n+@Override\n+public float getAsFloat() {\n+    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive long.\n      *\n      * @return get this element as a primitive long.\n      * @throws NumberFormatException if the value contained is not a valid long.\n      */\n-    @Override\n-    public long getAsLong() {\n-        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n-    }\n+@Override\n+public long getAsLong() {\n+    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive short.\n      *\n      * @return get this element as a primitive short.\n      * @throws NumberFormatException if the value contained is not a valid short value.\n      */\n-    @Override\n-    public short getAsShort() {\n-        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n-    }\n+@Override\n+public short getAsShort() {\n+    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive integer.\n      *\n      * @return get this element as a primitive integer.\n      * @throws NumberFormatException if the value contained is not a valid integer.\n      */\n-    @Override\n-    public int getAsInt() {\n-        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n-    }\n+@Override\n+public int getAsInt() {\n+    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n+}\n \n-    @Override\n-    public byte getAsByte() {\n-        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n-    }\n+@Override\n+public byte getAsByte() {\n+    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n+}\n \n-    @Override\n-    public char getAsCharacter() {\n-        return getAsString().charAt(0);\n+@Override\n+public char getAsCharacter() {\n+    return getAsString().charAt(0);\n+}\n+\n+private static boolean isPrimitiveOrString(Object target) {\n+    if (target instanceof String) {\n+        return true;\n     }\n \n-    private static boolean isPrimitiveOrString(Object target) {\n-        if (target instanceof String) {\n+    Class<?> classOfPrimitive = target.getClass();\n+    for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n+        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n             return true;\n         }\n-\n-        Class<?> classOfPrimitive = target.getClass();\n-        for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n-            if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n-                return true;\n-            }\n-        }\n-        return false;\n     }\n+    return false;\n+}\n \n-    @Override\n-    public int hashCode() {\n-        if (value == null) {\n-            return 31;\n-        }\n-        // Using recommended hashing algorithm from Effective Java for longs and doubles\n-        if (isIntegral(this)) {\n-            long value = getAsNumber().longValue();\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        if (value instanceof Number) {\n-            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        return value.hashCode();\n+@Override\n+public int hashCode() {\n+    if (value == null) {\n+        return 31;\n+    }\n+    // Using recommended hashing algorithm from Effective Java for longs and doubles\n+    if (isIntegral(this)) {\n+        long value = getAsNumber().longValue();\n+        return (int) (value ^ (value >>> 32));\n     }\n+    if (value instanceof Number) {\n+        long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+        return (int) (value ^ (value >>> 32));\n+    }\n+    return value.hashCode();\n+}\n \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n-        if (value == null) {\n-            return other.value == null;\n-        }\n-        if (isIntegral(this) && isIntegral(other)) {\n-            return getAsNumber().longValue() == other.getAsNumber().longValue();\n-        }\n-        if (value instanceof Number && other.value instanceof Number) {\n-            double a = getAsNumber().doubleValue();\n-            // Java standard types other than double return true for two NaN. So, need\n-            // special handling for double.\n-            double b = other.getAsNumber().doubleValue();\n-            return a == b || (Double.isNaN(a) && Double.isNaN(b));\n-        }\n-        return value.equals(other.value);\n+@Override\n+public boolean equals(Object obj) {\n+    if (this == obj) {\n+        return true;\n+    }\n+    if (obj == null || getClass() != obj.getClass()) {\n+        return false;\n+    }\n+    JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n+    if (value == null) {\n+        return other.value == null;\n+    }\n+    if (isIntegral(this) && isIntegral(other)) {\n+        return getAsNumber().longValue() == other.getAsNumber().longValue();\n     }\n+    if (value instanceof Number && other.value instanceof Number) {\n+        double a = getAsNumber().doubleValue();\n+        // Java standard types other than double return true for two NaN. So, need\n+        // special handling for double.\n+        double b = other.getAsNumber().doubleValue();\n+        return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+    }\n+    return value.equals(other.value);\n+}\n \n-    /**\n+/**\n      * Returns true if the specified number is an integral type\n      * (Long, Integer, Short, Byte, BigInteger)\n      */\n-    public static boolean isIntegral(JsonPrimitiveNode primitive) {\n-        if (primitive.value instanceof Number) {\n-            Number number = (Number) primitive.value;\n-            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n-        }\n-        return false;\n+public static boolean isIntegral(JsonPrimitiveNode primitive) {\n+    if (primitive.value instanceof Number) {\n+        Number number = (Number) primitive.value;\n+        return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n+                || number instanceof Short || number instanceof Byte;\n     }\n+    return false;\n+}\n }\n",
            "diff_size": 111
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "284",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/intellij/42/JsonPrimitiveNode.java\nindex 402be55956..11670f883c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/intellij/42/JsonPrimitiveNode.java\n@@ -24,8 +24,8 @@ import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n     private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n-            Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n+        float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n+        Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n \n     private Object value;\n \n@@ -94,7 +94,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n             this.value = String.valueOf(c);\n         } else {\n             Preconditions.checkArgument(primitive instanceof Number\n-                    || isPrimitiveOrString(primitive));\n+                || isPrimitiveOrString(primitive));\n             this.value = primitive;\n         }\n     }\n@@ -282,7 +282,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n     @Override\n     public BigInteger getAsBigInteger() {\n         return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+            (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -403,7 +403,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         if (primitive.value instanceof Number) {\n             Number number = (Number) primitive.value;\n             return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n+                || number instanceof Short || number instanceof Byte;\n         }\n         return false;\n     }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/naturalize/42/JsonPrimitiveNode.java\nindex 402be55956..ec1498d2d4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/naturalize/42/JsonPrimitiveNode.java\n@@ -23,11 +23,11 @@ import java.math.BigDecimal;\n import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n-    private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n+    private static final Class<?>[] PRIMITIVE_TYPES = {\n+    int.class, long.class, short.class, float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n             Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n \n-    private Object value;\n+private Object value;\n \n     /**\n      * Create a primitive containing a boolean value.\n@@ -95,7 +95,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         } else {\n             Preconditions.checkArgument(primitive instanceof Number\n                     || isPrimitiveOrString(primitive));\n-            this.value = primitive;\n+this.value = primitive;\n         }\n     }\n \n@@ -281,8 +281,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -407,4 +406,4 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/codebuff/42/JsonPrimitiveNode.java\nindex 402be55956..021974fb76 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/codebuff/42/JsonPrimitiveNode.java\n@@ -18,15 +18,28 @@ package com.github.fangjinuo.easyjson.core.node;\n import com.github.fangjinuo.easyjson.core.JsonTreeNode;\n import com.github.fangjinuo.easyjson.core.util.LazilyParsedNumber;\n import com.github.fangjinuo.easyjson.core.util.Preconditions;\n-\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n public class JsonPrimitiveNode extends JsonTreeNode {\n-    private static final Class<?>[] PRIMITIVE_TYPES = {int.class, long.class, short.class,\n-            float.class, double.class, byte.class, boolean.class, char.class, Integer.class, Long.class,\n-            Short.class, Float.class, Double.class, Byte.class, Boolean.class, Character.class};\n-\n+    private static final Class<?>[] PRIMITIVE_TYPES = {\n+int.class,\n+long.class,\n+short.class,\n+float.class,\n+double.class,\n+byte.class,\n+boolean.class,\n+char.class,\n+Integer.class,\n+Long.class,\n+Short.class,\n+Float.class,\n+Double.class,\n+Byte.class,\n+Boolean.class,\n+Character.class\n+};\n     private Object value;\n \n     /**\n@@ -34,6 +47,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param bool the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Boolean bool) {\n         setValue(bool);\n     }\n@@ -43,6 +57,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param number the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Number number) {\n         setValue(number);\n     }\n@@ -52,6 +67,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param string the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(String string) {\n         setValue(string);\n     }\n@@ -62,6 +78,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param c the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Character c) {\n         setValue(c);\n     }\n@@ -72,6 +89,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @param primitive the value to create the primitive with.\n      */\n+\n     public JsonPrimitiveNode(Object primitive) {\n         setValue(primitive);\n     }\n@@ -81,6 +99,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @since 2.8.2\n      */\n+\n     @Override\n     public JsonPrimitiveNode deepCopy() {\n         return this;\n@@ -93,8 +112,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n             char c = ((Character) primitive).charValue();\n             this.value = String.valueOf(c);\n         } else {\n-            Preconditions.checkArgument(primitive instanceof Number\n-                    || isPrimitiveOrString(primitive));\n+            Preconditions.checkArgument(primitive instanceof Number || isPrimitiveOrString(primitive));\n             this.value = primitive;\n         }\n     }\n@@ -104,6 +122,8 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a boolean value, false otherwise.\n      */\n+\n+\n     public boolean isBoolean() {\n         return value instanceof Boolean;\n     }\n@@ -113,6 +133,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a {@link Boolean}.\n      */\n+\n     protected Boolean getAsBooleanWrapper() {\n         return (Boolean) value;\n     }\n@@ -122,6 +143,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a primitive boolean value.\n      */\n+\n     @Override\n     public boolean getAsBoolean() {\n         if (isBoolean()) {\n@@ -137,6 +159,8 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a Number, false otherwise.\n      */\n+\n+\n     public boolean isNumber() {\n         return value instanceof Number;\n     }\n@@ -147,6 +171,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a Number.\n      * @throws NumberFormatException if the value contained is not a valid Number.\n      */\n+\n     @Override\n     public Number getAsNumber() {\n         return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n@@ -157,6 +182,8 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return true if this primitive contains a String value, false otherwise.\n      */\n+\n+\n     public boolean isString() {\n         return value instanceof String;\n     }\n@@ -166,6 +193,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      *\n      * @return get this element as a String.\n      */\n+\n     @Override\n     public String getAsString() {\n         if (isNumber()) {\n@@ -173,12 +201,13 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         } else if (isBoolean()) {\n             return getAsBooleanWrapper().toString();\n         } else if (isChar()) {\n-            return \"\" + value;\n-        } else {\n-            return (String) value;\n+                   return \"\" + value;\n+               } else {\n+                   return (String) value;\n         }\n     }\n \n+\n     public boolean isDouble() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -187,6 +216,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isLong() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -195,6 +225,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isFloat() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -203,6 +234,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isInteger() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -211,6 +243,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isShort() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -219,6 +252,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isByte() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -227,6 +261,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isBigInteger() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -235,10 +270,12 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public boolean isChar() {\n         return value instanceof Character || value.getClass() == char.class;\n     }\n \n+\n     public boolean isBigDecimal() {\n         if (isNumber()) {\n             Number n = getAsNumber();\n@@ -247,6 +284,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return false;\n     }\n \n+\n     public Object getValue() {\n         return value;\n     }\n@@ -257,6 +295,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive double.\n      * @throws NumberFormatException if the value contained is not a valid double.\n      */\n+\n     @Override\n     public double getAsDouble() {\n         return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n@@ -268,6 +307,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a {@link BigDecimal}.\n      * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.\n      */\n+\n     @Override\n     public BigDecimal getAsBigDecimal() {\n         return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n@@ -279,10 +319,10 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a {@link BigInteger}.\n      * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.\n      */\n+\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n     }\n \n     /**\n@@ -291,6 +331,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a float.\n      * @throws NumberFormatException if the value contained is not a valid float.\n      */\n+\n     @Override\n     public float getAsFloat() {\n         return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n@@ -302,6 +343,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive long.\n      * @throws NumberFormatException if the value contained is not a valid long.\n      */\n+\n     @Override\n     public long getAsLong() {\n         return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n@@ -313,6 +355,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive short.\n      * @throws NumberFormatException if the value contained is not a valid short value.\n      */\n+\n     @Override\n     public short getAsShort() {\n         return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n@@ -324,6 +367,7 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * @return get this element as a primitive integer.\n      * @throws NumberFormatException if the value contained is not a valid integer.\n      */\n+\n     @Override\n     public int getAsInt() {\n         return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n@@ -339,11 +383,11 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         return getAsString().charAt(0);\n     }\n \n+\n     private static boolean isPrimitiveOrString(Object target) {\n         if (target instanceof String) {\n             return true;\n         }\n-\n         Class<?> classOfPrimitive = target.getClass();\n         for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n             if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n@@ -361,11 +405,13 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n         // Using recommended hashing algorithm from Effective Java for longs and doubles\n         if (isIntegral(this)) {\n             long value = getAsNumber().longValue();\n-            return (int) (value ^ (value >>> 32));\n+            return (int) (value\n+                ^ (value >>> 32));\n         }\n         if (value instanceof Number) {\n             long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-            return (int) (value ^ (value >>> 32));\n+            return (int) (value\n+                ^ (value >>> 32));\n         }\n         return value.hashCode();\n     }\n@@ -399,12 +445,13 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      * Returns true if the specified number is an integral type\n      * (Long, Integer, Short, Byte, BigInteger)\n      */\n+\n+\n     public static boolean isIntegral(JsonPrimitiveNode primitive) {\n         if (primitive.value instanceof Number) {\n             Number number = (Number) primitive.value;\n-            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n+            return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_random/42/JsonPrimitiveNode.java\nindex 402be55956..b0b4a7c5df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_random/42/JsonPrimitiveNode.java\n@@ -281,130 +281,129 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n-    }\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a float.\n      *\n      * @return get this element as a float.\n      * @throws NumberFormatException if the value contained is not a valid float.\n      */\n-    @Override\n-    public float getAsFloat() {\n-        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n-    }\n+@Override\n+public float getAsFloat() {\n+    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive long.\n      *\n      * @return get this element as a primitive long.\n      * @throws NumberFormatException if the value contained is not a valid long.\n      */\n-    @Override\n-    public long getAsLong() {\n-        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n-    }\n+@Override\n+public long getAsLong() {\n+    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive short.\n      *\n      * @return get this element as a primitive short.\n      * @throws NumberFormatException if the value contained is not a valid short value.\n      */\n-    @Override\n-    public short getAsShort() {\n-        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n-    }\n+@Override\n+public short getAsShort() {\n+    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive integer.\n      *\n      * @return get this element as a primitive integer.\n      * @throws NumberFormatException if the value contained is not a valid integer.\n      */\n-    @Override\n-    public int getAsInt() {\n-        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n-    }\n+@Override\n+public int getAsInt() {\n+    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n+}\n \n-    @Override\n-    public byte getAsByte() {\n-        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n-    }\n+@Override\n+public byte getAsByte() {\n+    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n+}\n \n-    @Override\n-    public char getAsCharacter() {\n-        return getAsString().charAt(0);\n+@Override\n+public char getAsCharacter() {\n+    return getAsString().charAt(0);\n+}\n+\n+private static boolean isPrimitiveOrString(Object target) {\n+    if (target instanceof String) {\n+        return true;\n     }\n \n-    private static boolean isPrimitiveOrString(Object target) {\n-        if (target instanceof String) {\n+    Class<?> classOfPrimitive = target.getClass();\n+    for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n+        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n             return true;\n         }\n-\n-        Class<?> classOfPrimitive = target.getClass();\n-        for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n-            if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n-                return true;\n-            }\n-        }\n-        return false;\n     }\n+    return false;\n+}\n \n-    @Override\n-    public int hashCode() {\n-        if (value == null) {\n-            return 31;\n-        }\n-        // Using recommended hashing algorithm from Effective Java for longs and doubles\n-        if (isIntegral(this)) {\n-            long value = getAsNumber().longValue();\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        if (value instanceof Number) {\n-            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        return value.hashCode();\n+@Override\n+public int hashCode() {\n+    if (value == null) {\n+        return 31;\n+    }\n+    // Using recommended hashing algorithm from Effective Java for longs and doubles\n+    if (isIntegral(this)) {\n+        long value = getAsNumber().longValue();\n+        return (int) (value ^ (value >>> 32));\n     }\n+    if (value instanceof Number) {\n+        long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+        return (int) (value ^ (value >>> 32));\n+    }\n+    return value.hashCode();\n+}\n \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n-        if (value == null) {\n-            return other.value == null;\n-        }\n-        if (isIntegral(this) && isIntegral(other)) {\n-            return getAsNumber().longValue() == other.getAsNumber().longValue();\n-        }\n-        if (value instanceof Number && other.value instanceof Number) {\n-            double a = getAsNumber().doubleValue();\n-            // Java standard types other than double return true for two NaN. So, need\n-            // special handling for double.\n-            double b = other.getAsNumber().doubleValue();\n-            return a == b || (Double.isNaN(a) && Double.isNaN(b));\n-        }\n-        return value.equals(other.value);\n+@Override\n+public boolean equals(Object obj) {\n+    if (this == obj) {\n+        return true;\n+    }\n+    if (obj == null || getClass() != obj.getClass()) {\n+        return false;\n+    }\n+    JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n+    if (value == null) {\n+        return other.value == null;\n+    }\n+    if (isIntegral(this) && isIntegral(other)) {\n+        return getAsNumber().longValue() == other.getAsNumber().longValue();\n     }\n+    if (value instanceof Number && other.value instanceof Number) {\n+        double a = getAsNumber().doubleValue();\n+        // Java standard types other than double return true for two NaN. So, need\n+        // special handling for double.\n+        double b = other.getAsNumber().doubleValue();\n+        return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+    }\n+    return value.equals(other.value);\n+}\n \n-    /**\n+/**\n      * Returns true if the specified number is an integral type\n      * (Long, Integer, Short, Byte, BigInteger)\n      */\n-    public static boolean isIntegral(JsonPrimitiveNode primitive) {\n-        if (primitive.value instanceof Number) {\n-            Number number = (Number) primitive.value;\n-            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n-        }\n-        return false;\n+public static boolean isIntegral(JsonPrimitiveNode primitive) {\n+    if (primitive.value instanceof Number) {\n+        Number number = (Number) primitive.value;\n+        return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n+                || number instanceof Short || number instanceof Byte;\n     }\n+    return false;\n+}\n }\n",
            "diff_size": 111
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_three_grams/42/JsonPrimitiveNode.java\nindex 402be55956..b0b4a7c5df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/42/JsonPrimitiveNode.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_three_grams/42/JsonPrimitiveNode.java\n@@ -281,130 +281,129 @@ public class JsonPrimitiveNode extends JsonTreeNode {\n      */\n     @Override\n     public BigInteger getAsBigInteger() {\n-        return value instanceof BigInteger ?\n-                (BigInteger) value : new BigInteger(value.toString());\n-    }\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a float.\n      *\n      * @return get this element as a float.\n      * @throws NumberFormatException if the value contained is not a valid float.\n      */\n-    @Override\n-    public float getAsFloat() {\n-        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n-    }\n+@Override\n+public float getAsFloat() {\n+    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive long.\n      *\n      * @return get this element as a primitive long.\n      * @throws NumberFormatException if the value contained is not a valid long.\n      */\n-    @Override\n-    public long getAsLong() {\n-        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n-    }\n+@Override\n+public long getAsLong() {\n+    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive short.\n      *\n      * @return get this element as a primitive short.\n      * @throws NumberFormatException if the value contained is not a valid short value.\n      */\n-    @Override\n-    public short getAsShort() {\n-        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n-    }\n+@Override\n+public short getAsShort() {\n+    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n+}\n \n-    /**\n+/**\n      * convenience method to get this element as a primitive integer.\n      *\n      * @return get this element as a primitive integer.\n      * @throws NumberFormatException if the value contained is not a valid integer.\n      */\n-    @Override\n-    public int getAsInt() {\n-        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n-    }\n+@Override\n+public int getAsInt() {\n+    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n+}\n \n-    @Override\n-    public byte getAsByte() {\n-        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n-    }\n+@Override\n+public byte getAsByte() {\n+    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n+}\n \n-    @Override\n-    public char getAsCharacter() {\n-        return getAsString().charAt(0);\n+@Override\n+public char getAsCharacter() {\n+    return getAsString().charAt(0);\n+}\n+\n+private static boolean isPrimitiveOrString(Object target) {\n+    if (target instanceof String) {\n+        return true;\n     }\n \n-    private static boolean isPrimitiveOrString(Object target) {\n-        if (target instanceof String) {\n+    Class<?> classOfPrimitive = target.getClass();\n+    for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n+        if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n             return true;\n         }\n-\n-        Class<?> classOfPrimitive = target.getClass();\n-        for (Class<?> standardPrimitive : PRIMITIVE_TYPES) {\n-            if (standardPrimitive.isAssignableFrom(classOfPrimitive)) {\n-                return true;\n-            }\n-        }\n-        return false;\n     }\n+    return false;\n+}\n \n-    @Override\n-    public int hashCode() {\n-        if (value == null) {\n-            return 31;\n-        }\n-        // Using recommended hashing algorithm from Effective Java for longs and doubles\n-        if (isIntegral(this)) {\n-            long value = getAsNumber().longValue();\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        if (value instanceof Number) {\n-            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-            return (int) (value ^ (value >>> 32));\n-        }\n-        return value.hashCode();\n+@Override\n+public int hashCode() {\n+    if (value == null) {\n+        return 31;\n+    }\n+    // Using recommended hashing algorithm from Effective Java for longs and doubles\n+    if (isIntegral(this)) {\n+        long value = getAsNumber().longValue();\n+        return (int) (value ^ (value >>> 32));\n     }\n+    if (value instanceof Number) {\n+        long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+        return (int) (value ^ (value >>> 32));\n+    }\n+    return value.hashCode();\n+}\n \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null || getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n-        if (value == null) {\n-            return other.value == null;\n-        }\n-        if (isIntegral(this) && isIntegral(other)) {\n-            return getAsNumber().longValue() == other.getAsNumber().longValue();\n-        }\n-        if (value instanceof Number && other.value instanceof Number) {\n-            double a = getAsNumber().doubleValue();\n-            // Java standard types other than double return true for two NaN. So, need\n-            // special handling for double.\n-            double b = other.getAsNumber().doubleValue();\n-            return a == b || (Double.isNaN(a) && Double.isNaN(b));\n-        }\n-        return value.equals(other.value);\n+@Override\n+public boolean equals(Object obj) {\n+    if (this == obj) {\n+        return true;\n+    }\n+    if (obj == null || getClass() != obj.getClass()) {\n+        return false;\n+    }\n+    JsonPrimitiveNode other = (JsonPrimitiveNode) obj;\n+    if (value == null) {\n+        return other.value == null;\n+    }\n+    if (isIntegral(this) && isIntegral(other)) {\n+        return getAsNumber().longValue() == other.getAsNumber().longValue();\n     }\n+    if (value instanceof Number && other.value instanceof Number) {\n+        double a = getAsNumber().doubleValue();\n+        // Java standard types other than double return true for two NaN. So, need\n+        // special handling for double.\n+        double b = other.getAsNumber().doubleValue();\n+        return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+    }\n+    return value.equals(other.value);\n+}\n \n-    /**\n+/**\n      * Returns true if the specified number is an integral type\n      * (Long, Integer, Short, Byte, BigInteger)\n      */\n-    public static boolean isIntegral(JsonPrimitiveNode primitive) {\n-        if (primitive.value instanceof Number) {\n-            Number number = (Number) primitive.value;\n-            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-                    || number instanceof Short || number instanceof Byte;\n-        }\n-        return false;\n+public static boolean isIntegral(JsonPrimitiveNode primitive) {\n+    if (primitive.value instanceof Number) {\n+        Number number = (Number) primitive.value;\n+        return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n+                || number instanceof Short || number instanceof Byte;\n     }\n+    return false;\n+}\n }\n",
            "diff_size": 111
        }
    ]
}