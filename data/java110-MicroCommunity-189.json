{
    "error_id": "189",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 172).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n\n        List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n\n        if (workflows == null || workflows.size() == 0) {\n            return workflows;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..44ccefab92 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/189/WorkflowInnerServiceSMOImpl.java\n@@ -42,9 +42,7 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n \n         if (page != PageDto.DEFAULT_PAGE) {\n             workflowDto.setPage((page - 1) * workflowDto.getRow());\n-        }\n-\n-        List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n+        } List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n \n         if (workflows == null || workflows.size() == 0) {\n             return workflows;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..48ce4dd1f9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/189/WorkflowInnerServiceSMOImpl.java\n@@ -27,85 +27,87 @@ import java.util.List;\n @RestController\n public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWorkflowInnerServiceSMO {\n \n-    @Autowired\n-    private IWorkflowServiceDao workflowServiceDaoImpl;\n+  @Autowired\n+  private IWorkflowServiceDao workflowServiceDaoImpl;\n \n-    @Autowired\n-    private IUserInnerServiceSMO userInnerServiceSMOImpl;\n+  @Autowired\n+  private IUserInnerServiceSMO userInnerServiceSMOImpl;\n \n-    @Override\n-    public List<WorkflowDto> queryWorkflows(@RequestBody  WorkflowDto workflowDto) {\n+  @Override\n+  public List<WorkflowDto> queryWorkflows(@RequestBody WorkflowDto workflowDto) {\n \n-        //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n+    //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n \n-        int page = workflowDto.getPage();\n+    int page = workflowDto.getPage();\n \n-        if (page != PageDto.DEFAULT_PAGE) {\n-            workflowDto.setPage((page - 1) * workflowDto.getRow());\n-        }\n+    if (page != PageDto.DEFAULT_PAGE) {\n+      workflowDto.setPage((page - 1) * workflowDto.getRow());\n+    }\n \n-        List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n+    List<WorkflowDto> workflows =\n+      BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n \n-        if (workflows == null || workflows.size() == 0) {\n-            return workflows;\n-        }\n+    if (workflows == null || workflows.size() == 0) {\n+      return workflows;\n+    }\n \n-        String[] userIds = getUserIds(workflows);\n-        //\u6839\u636e userId \u67e5\u8be2\u7528\u6237\u4fe1\u606f\n-        List<UserDto> users = userInnerServiceSMOImpl.getUserInfo(userIds);\n+    String[] userIds = getUserIds(workflows);\n+    //\u6839\u636e userId \u67e5\u8be2\u7528\u6237\u4fe1\u606f\n+    List<UserDto> users = userInnerServiceSMOImpl.getUserInfo(userIds);\n \n-        for (WorkflowDto workflow : workflows) {\n-            refreshWorkflow(workflow, users);\n-        }\n-        return workflows;\n+    for (WorkflowDto workflow : workflows) {\n+      refreshWorkflow(workflow, users);\n     }\n-\n-    /**\n-     * \u4ece\u7528\u6237\u5217\u8868\u4e2d\u67e5\u8be2\u7528\u6237\uff0c\u5c06\u7528\u6237\u4e2d\u7684\u4fe1\u606f \u5237\u65b0\u5230 floor\u5bf9\u8c61\u4e2d\n-     *\n-     * @param workflow \u5c0f\u533a\u5de5\u4f5c\u6d41\u4fe1\u606f\n-     * @param users \u7528\u6237\u5217\u8868\n-     */\n-    private void refreshWorkflow(WorkflowDto workflow, List<UserDto> users) {\n-        for (UserDto user : users) {\n-            if (workflow.getFlowId().equals(user.getUserId())) {\n-                BeanConvertUtil.covertBean(user, workflow);\n-            }\n-        }\n+    return workflows;\n+  }\n+\n+  /**\n+   * \u4ece\u7528\u6237\u5217\u8868\u4e2d\u67e5\u8be2\u7528\u6237\uff0c\u5c06\u7528\u6237\u4e2d\u7684\u4fe1\u606f \u5237\u65b0\u5230 floor\u5bf9\u8c61\u4e2d\n+   *\n+   * @param workflow \u5c0f\u533a\u5de5\u4f5c\u6d41\u4fe1\u606f\n+   * @param users    \u7528\u6237\u5217\u8868\n+   */\n+  private void refreshWorkflow(WorkflowDto workflow, List<UserDto> users) {\n+    for (UserDto user : users) {\n+      if (workflow.getFlowId().equals(user.getUserId())) {\n+        BeanConvertUtil.covertBean(user, workflow);\n+      }\n     }\n-\n-    /**\n-     * \u83b7\u53d6\u6279\u91cfuserId\n-     *\n-     * @param workflows \u5c0f\u533a\u697c\u4fe1\u606f\n-     * @return \u6279\u91cfuserIds \u4fe1\u606f\n-     */\n-     private String[] getUserIds(List<WorkflowDto> workflows) {\n-        List<String> userIds = new ArrayList<String>();\n-        for (WorkflowDto workflow : workflows) {\n-            userIds.add(workflow.getFlowId());\n-        }\n-\n-        return userIds.toArray(new String[userIds.size()]);\n+  }\n+\n+  /**\n+   * \u83b7\u53d6\u6279\u91cfuserId\n+   *\n+   * @param workflows \u5c0f\u533a\u697c\u4fe1\u606f\n+   * @return \u6279\u91cfuserIds \u4fe1\u606f\n+   */\n+  private String[] getUserIds(List<WorkflowDto> workflows) {\n+    List<String> userIds = new ArrayList<String>();\n+    for (WorkflowDto workflow : workflows) {\n+      userIds.add(workflow.getFlowId());\n     }\n \n-    @Override\n-    public int queryWorkflowsCount(@RequestBody WorkflowDto workflowDto) {\n-        return workflowServiceDaoImpl.queryWorkflowsCount(BeanConvertUtil.beanCovertMap(workflowDto));    }\n+    return userIds.toArray(new String[userIds.size()]);\n+  }\n \n-    public IWorkflowServiceDao getWorkflowServiceDaoImpl() {\n-        return workflowServiceDaoImpl;\n-    }\n+  @Override\n+  public int queryWorkflowsCount(@RequestBody WorkflowDto workflowDto) {\n+    return workflowServiceDaoImpl.queryWorkflowsCount(BeanConvertUtil.beanCovertMap(workflowDto));\n+  }\n \n-    public void setWorkflowServiceDaoImpl(IWorkflowServiceDao workflowServiceDaoImpl) {\n-        this.workflowServiceDaoImpl = workflowServiceDaoImpl;\n-    }\n+  public IWorkflowServiceDao getWorkflowServiceDaoImpl() {\n+    return workflowServiceDaoImpl;\n+  }\n \n-    public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n-        return userInnerServiceSMOImpl;\n-    }\n+  public void setWorkflowServiceDaoImpl(IWorkflowServiceDao workflowServiceDaoImpl) {\n+    this.workflowServiceDaoImpl = workflowServiceDaoImpl;\n+  }\n \n-    public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n-        this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n-    }\n+  public IUserInnerServiceSMO getUserInnerServiceSMOImpl() {\n+    return userInnerServiceSMOImpl;\n+  }\n+\n+  public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n+    this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..d181b683c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/189/WorkflowInnerServiceSMOImpl.java\n@@ -80,8 +80,8 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n      * @param workflows \u5c0f\u533a\u697c\u4fe1\u606f\n      * @return \u6279\u91cfuserIds \u4fe1\u606f\n      */\n-     private String[] getUserIds(List<WorkflowDto> workflows) {\n-        List<String> userIds = new ArrayList<String>();\n+private String[] getUserIds(List<WorkflowDto> workflows) {\n+    List<String> userIds = new ArrayList<String>();\n         for (WorkflowDto workflow : workflows) {\n             userIds.add(workflow.getFlowId());\n         }\n@@ -108,4 +108,4 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n     public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n         this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..e0f36a073b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/189/WorkflowInnerServiceSMOImpl.java\n@@ -1,6 +1,5 @@\n package com.java110.common.smo.impl;\n \n-\n import com.java110.common.dao.IWorkflowServiceDao;\n import com.java110.core.smo.common.IWorkflowInnerServiceSMO;\n import com.java110.dto.workflow.WorkflowDto;\n@@ -12,7 +11,6 @@ import com.java110.dto.PageDto;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RestController;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -24,6 +22,8 @@ import java.util.List;\n  * @Version 1.0\n  * add by wuxw 2019/4/24\n  **/\n+\n+\n @RestController\n public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWorkflowInnerServiceSMO {\n \n@@ -34,18 +34,15 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n     private IUserInnerServiceSMO userInnerServiceSMOImpl;\n \n     @Override\n-    public List<WorkflowDto> queryWorkflows(@RequestBody  WorkflowDto workflowDto) {\n+    public List<WorkflowDto> queryWorkflows(@RequestBody WorkflowDto workflowDto) {\n \n         //\u6821\u9a8c\u662f\u5426\u4f20\u4e86 \u5206\u9875\u4fe1\u606f\n-\n         int page = workflowDto.getPage();\n-\n         if (page != PageDto.DEFAULT_PAGE) {\n             workflowDto.setPage((page - 1) * workflowDto.getRow());\n         }\n \n         List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n-\n         if (workflows == null || workflows.size() == 0) {\n             return workflows;\n         }\n@@ -53,10 +50,10 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n         String[] userIds = getUserIds(workflows);\n         //\u6839\u636e userId \u67e5\u8be2\u7528\u6237\u4fe1\u606f\n         List<UserDto> users = userInnerServiceSMOImpl.getUserInfo(userIds);\n-\n         for (WorkflowDto workflow : workflows) {\n             refreshWorkflow(workflow, users);\n         }\n+\n         return workflows;\n     }\n \n@@ -66,6 +63,8 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n      * @param workflow \u5c0f\u533a\u5de5\u4f5c\u6d41\u4fe1\u606f\n      * @param users \u7528\u6237\u5217\u8868\n      */\n+\n+\n     private void refreshWorkflow(WorkflowDto workflow, List<UserDto> users) {\n         for (UserDto user : users) {\n             if (workflow.getFlowId().equals(user.getUserId())) {\n@@ -80,7 +79,9 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n      * @param workflows \u5c0f\u533a\u697c\u4fe1\u606f\n      * @return \u6279\u91cfuserIds \u4fe1\u606f\n      */\n-     private String[] getUserIds(List<WorkflowDto> workflows) {\n+\n+\n+    private String[] getUserIds(List<WorkflowDto> workflows) {\n         List<String> userIds = new ArrayList<String>();\n         for (WorkflowDto workflow : workflows) {\n             userIds.add(workflow.getFlowId());\n@@ -89,9 +90,11 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n         return userIds.toArray(new String[userIds.size()]);\n     }\n \n+\n     @Override\n     public int queryWorkflowsCount(@RequestBody WorkflowDto workflowDto) {\n-        return workflowServiceDaoImpl.queryWorkflowsCount(BeanConvertUtil.beanCovertMap(workflowDto));    }\n+        return workflowServiceDaoImpl.queryWorkflowsCount(BeanConvertUtil.beanCovertMap(workflowDto));\n+    }\n \n     public IWorkflowServiceDao getWorkflowServiceDaoImpl() {\n         return workflowServiceDaoImpl;\n@@ -108,4 +111,4 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n     public void setUserInnerServiceSMOImpl(IUserInnerServiceSMO userInnerServiceSMOImpl) {\n         this.userInnerServiceSMOImpl = userInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..44ccefab92 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/189/WorkflowInnerServiceSMOImpl.java\n@@ -42,9 +42,7 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n \n         if (page != PageDto.DEFAULT_PAGE) {\n             workflowDto.setPage((page - 1) * workflowDto.getRow());\n-        }\n-\n-        List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n+        } List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n \n         if (workflows == null || workflows.size() == 0) {\n             return workflows;\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/189/WorkflowInnerServiceSMOImpl.java\nindex 1b68a09038..e6ce191937 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/189/WorkflowInnerServiceSMOImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/189/WorkflowInnerServiceSMOImpl.java\n@@ -42,9 +42,7 @@ public class WorkflowInnerServiceSMOImpl extends BaseServiceSMO implements IWork\n \n         if (page != PageDto.DEFAULT_PAGE) {\n             workflowDto.setPage((page - 1) * workflowDto.getRow());\n-        }\n-\n-        List<WorkflowDto> workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n+        } List<WorkflowDto>workflows = BeanConvertUtil.covertBeanList(workflowServiceDaoImpl.getWorkflowInfo(BeanConvertUtil.beanCovertMap(workflowDto)), WorkflowDto.class);\n \n         if (workflows == null || workflows.size() == 0) {\n             return workflows;\n",
            "diff_size": 3
        }
    ]
}