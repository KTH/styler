{
    "error_id": "91",
    "information": {
        "errors": [
            {
                "line": "275",
                "column": "11",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//<<<<<<< HEAD\n//        if (!bigger) {\n//        \t//\u5bf9\u4e8eEND\u7684\u573a\u666f\uff0c\u6bd4\u5982\u5047\u8bbea=10\uff0cb=20\uff0c\u6240\u4ee5a.compareTo(b)<0\uff0c\u5373comp=-1\uff0c\u6240\u4ee5comp = -comp = 1\n//        \t//\u5bf9\u4e8ef < 10 and f < 20\u7684\u573a\u666f\uff0c\u663e\u7136\u53ea\u8981f<10\u5c31\u591f\u4e86\uff0c\u6240\u4ee5comp>0\u65f6\u8fd8\u662f\u8fd4\u56dea\n//            comp = -comp;\n//        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "275",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "276",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/91/IndexCursor.java\nindex 49a4f32e40..fd6c10ae02 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/91/IndexCursor.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.ArrayList;\n@@ -74,7 +75,7 @@ public class IndexCursor implements Cursor {\n     /**\n      * Prepare this index cursor to make a lookup in index.\n      *\n-     * @param s Session.\n+     * @param s               Session.\n      * @param indexConditions Index conditions.\n      */\n     public void prepare(Session s, ArrayList<IndexCondition> indexConditions) {\n@@ -172,7 +173,7 @@ public class IndexCursor implements Cursor {\n     /**\n      * Re-evaluate the start and end values of the index search for rows.\n      *\n-     * @param s the session\n+     * @param s               the session\n      * @param indexConditions the index conditions\n      */\n     public void find(Session s, ArrayList<IndexCondition> indexConditions) {\n@@ -183,7 +184,7 @@ public class IndexCursor implements Cursor {\n         if (!alwaysFalse) {\n             if (intersects != null && index instanceof SpatialIndex) {\n                 cursor = ((SpatialIndex) index).findByGeometry(tableFilter,\n-                        start, end, intersects);\n+                    start, end, intersects);\n             } else {\n                 cursor = index.find(tableFilter, start, end);\n             }\n@@ -220,9 +221,9 @@ public class IndexCursor implements Cursor {\n             // then it needs to overlap with the the union of a and b\n             // (not the intersection)\n             ValueGeometry vg = (ValueGeometry) row.getValue(columnId).\n-                    convertTo(Value.GEOMETRY);\n+                convertTo(Value.GEOMETRY);\n             v = ((ValueGeometry) v.convertTo(Value.GEOMETRY)).\n-                    getEnvelopeUnion(vg);\n+                getEnvelopeUnion(vg);\n         }\n         if (columnId == SearchRow.ROWID_INDEX) {\n             row.setKey(v.getLong());\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/91/IndexCursor.java\nindex 49a4f32e40..385dccbba8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/91/IndexCursor.java\n@@ -86,13 +86,8 @@ public class IndexCursor implements Cursor {\n         inResult = null;\n         inResultTested = null;\n         intersects = null;\n-//<<<<<<< HEAD\n-//        // don't use enhanced for loop to avoid creating objects\n-//        for (int i = 0, size = indexConditions.size(); i < size; i++) {\n-//            IndexCondition condition = indexConditions.get(i);\n-//            if (condition.isAlwaysFalse()) { //\u5982: \"select * from IndexCursorTest where 2>3\n-//=======\n-        for (IndexCondition condition : indexConditions) {\n+//<<<<<<< H\n+for (IndexCondition condition : indexConditions) {\n             if (condition.isAlwaysFalse()) {\n                 alwaysFalse = true;\n                 break;\n@@ -271,14 +266,8 @@ public class IndexCursor implements Cursor {\n             }\n         }\n //<<<<<<< HEAD\n-//        if (!bigger) {\n-//        \t//\u5bf9\u4e8eEND\u7684\u573a\u666f\uff0c\u6bd4\u5982\u5047\u8bbea=10\uff0cb=20\uff0c\u6240\u4ee5a.compareTo(b)<0\uff0c\u5373comp=-1\uff0c\u6240\u4ee5comp = -comp = 1\n-//        \t//\u5bf9\u4e8ef < 10 and f < 20\u7684\u573a\u666f\uff0c\u663e\u7136\u53ea\u8981f<10\u5c31\u591f\u4e86\uff0c\u6240\u4ee5comp>0\u65f6\u8fd8\u662f\u8fd4\u56dea\n-//            comp = -comp;\n-//        }\n-//        return comp > 0 ? a : b;\n-//=======\n-        return (comp > 0) == bigger ? a : b;\n+\n+return (comp > 0) == bigger ? a : b;\n     }\n \n     /**\n@@ -374,4 +363,4 @@ public class IndexCursor implements Cursor {\n         throw DbException.throwInternalError(toString());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/91/IndexCursor.java\nindex 49a4f32e40..e90a294d46 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/91/IndexCursor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/91/IndexCursor.java\n@@ -7,7 +7,6 @@ package org.h2.index;\n \n import java.util.ArrayList;\n import java.util.HashSet;\n-\n import org.h2.engine.Session;\n import org.h2.expression.Comparison;\n import org.h2.message.DbException;\n@@ -33,6 +32,8 @@ import org.h2.value.ValueNull;\n  */\n //\u6839\u636ewhere\u6761\u4ef6\u4e2d\u7684\u503c\u6765\u5224\u65adindex\u4ece\u54ea\u91cc\u5f00\u59cb\u627e\u4ece\u54ea\u91cc\u7ed3\u675f\uff0c\n //\u6bd4\u5982where id>10 and id<20\uff0c\u5c31\u610f\u5473\u7740\u8981\u627e(10\uff0c20)\u8fd9\u4e2a\u533a\u95f4\u5185\u7684\u8bb0\u5f55\u3002\n+\n+\n public class IndexCursor implements Cursor {\n \n     private Session session;\n@@ -41,7 +42,6 @@ public class IndexCursor implements Cursor {\n     private Table table;\n     private IndexColumn[] indexColumns;\n     private boolean alwaysFalse;\n-\n     private SearchRow start, end, intersects;\n     private Cursor cursor;\n     private Column inColumn;\n@@ -54,6 +54,7 @@ public class IndexCursor implements Cursor {\n         this.tableFilter = filter;\n     }\n \n+\n     public void setIndex(Index index) {\n         this.index = index;\n         this.table = index.getTable();\n@@ -77,6 +78,8 @@ public class IndexCursor implements Cursor {\n      * @param s Session.\n      * @param indexConditions Index conditions.\n      */\n+\n+\n     public void prepare(Session s, ArrayList<IndexCondition> indexConditions) {\n         this.session = s;\n         alwaysFalse = false;\n@@ -175,6 +178,8 @@ public class IndexCursor implements Cursor {\n      * @param s the session\n      * @param indexConditions the index conditions\n      */\n+\n+\n     public void find(Session s, ArrayList<IndexCondition> indexConditions) {\n         prepare(s, indexConditions);\n         if (inColumn != null) {\n@@ -182,8 +187,7 @@ public class IndexCursor implements Cursor {\n         }\n         if (!alwaysFalse) {\n             if (intersects != null && index instanceof SpatialIndex) {\n-                cursor = ((SpatialIndex) index).findByGeometry(tableFilter,\n-                        start, end, intersects);\n+                cursor = ((SpatialIndex) index).findByGeometry(tableFilter, start, end, intersects);\n             } else {\n                 cursor = index.find(tableFilter, start, end);\n             }\n@@ -219,10 +223,8 @@ public class IndexCursor implements Cursor {\n             // if an object needs to overlap with both a and b,\n             // then it needs to overlap with the the union of a and b\n             // (not the intersection)\n-            ValueGeometry vg = (ValueGeometry) row.getValue(columnId).\n-                    convertTo(Value.GEOMETRY);\n-            v = ((ValueGeometry) v.convertTo(Value.GEOMETRY)).\n-                    getEnvelopeUnion(vg);\n+            ValueGeometry vg = (ValueGeometry) row.getValue(columnId).convertTo(Value.GEOMETRY);\n+            v = ((ValueGeometry) v.convertTo(Value.GEOMETRY)).getEnvelopeUnion(vg);\n         }\n         if (columnId == SearchRow.ROWID_INDEX) {\n             row.setKey(v.getLong());\n@@ -272,8 +274,8 @@ public class IndexCursor implements Cursor {\n         }\n //<<<<<<< HEAD\n //        if (!bigger) {\n-//        \t//\u5bf9\u4e8eEND\u7684\u573a\u666f\uff0c\u6bd4\u5982\u5047\u8bbea=10\uff0cb=20\uff0c\u6240\u4ee5a.compareTo(b)<0\uff0c\u5373comp=-1\uff0c\u6240\u4ee5comp = -comp = 1\n-//        \t//\u5bf9\u4e8ef < 10 and f < 20\u7684\u573a\u666f\uff0c\u663e\u7136\u53ea\u8981f<10\u5c31\u591f\u4e86\uff0c\u6240\u4ee5comp>0\u65f6\u8fd8\u662f\u8fd4\u56dea\n+//          //\u5bf9\u4e8eEND\u7684\u573a\u666f\uff0c\u6bd4\u5982\u5047\u8bbea=10\uff0cb=20\uff0c\u6240\u4ee5a.compareTo(b)<0\uff0c\u5373comp=-1\uff0c\u6240\u4ee5comp = -comp = 1\n+//          //\u5bf9\u4e8ef < 10 and f < 20\u7684\u573a\u666f\uff0c\u663e\u7136\u53ea\u8981f<10\u5c31\u591f\u4e86\uff0c\u6240\u4ee5comp>0\u65f6\u8fd8\u662f\u8fd4\u56dea\n //            comp = -comp;\n //        }\n //        return comp > 0 ? a : b;\n@@ -286,6 +288,8 @@ public class IndexCursor implements Cursor {\n      *\n      * @return true if it is\n      */\n+\n+\n     public boolean isAlwaysFalse() {\n         return alwaysFalse;\n     }\n@@ -295,6 +299,8 @@ public class IndexCursor implements Cursor {\n      *\n      * @return search row\n      */\n+\n+\n     public SearchRow getStart() {\n         return start;\n     }\n@@ -304,6 +310,8 @@ public class IndexCursor implements Cursor {\n      *\n      * @return search row\n      */\n+\n+\n     public SearchRow getEnd() {\n         return end;\n     }\n@@ -351,7 +359,7 @@ public class IndexCursor implements Cursor {\n                 Value v = inResult.currentRow()[0];\n                 if (v != ValueNull.INSTANCE) {\n                     if (inResultTested == null) {\n-                        inResultTested = new HashSet<>();\n+                        inResultTested = new HashSet< >();\n                     }\n                     if (inResultTested.add(v)) {\n                         find(v);\n@@ -374,4 +382,4 @@ public class IndexCursor implements Cursor {\n         throw DbException.throwInternalError(toString());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "275",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "275",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}