{
    "error_id": "193",
    "information": {
        "errors": [
            {
                "line": "71",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 134).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                if (!items.isEmpty()) {\n                    String tableName = getTpsTableName(db);\n                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n                    db.addItems(tableName, items, false);\n                }\n            } catch (Exception t) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "72",
                    "column": "21",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..895cee65bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/193/DatabaseResultsReporter.java\n@@ -68,84 +68,86 @@ public class DatabaseResultsReporter implements ResultsReporter {\n                         .collect(Collectors.toList());\n                 if (!items.isEmpty()) {\n                     String tableName = getTpsTableName(db);\n-                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n-                    db.addItems(tableName, items, false);\n-                }\n-            } catch (Exception t) {\n-                LOG.error(\"Error adding results: \" + t.getMessage(), t);\n-                throw new RuntimeException(t);\n-            }\n-        };\n-        if (async) {\n-            EXECUTOR.execute(task);\n-        } else {\n-            task.run();\n-        }\n-\n-    }\n-\n-    /**\n+                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size()\n+                    +\" to TPS Table \"+ tableName)));\n+                     db.addItems(tableName, items, false);\n+                 }\n+             } catch (Exception t) {\n+                 LOG.error(\"Error adding results: \" + t.getMessage(), t);\n+                 throw new RuntimeException(t);\n+             }\n+         };\n+         if (async) {\n+             EXECUTOR.execute(task);\n+         } else {\n+             task.run();\n+         }\n+\n+     }\n+\n+     /**\n      * @inheritDoc\n      */\n-    @Override\n-    public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n-        String tableName = getTimingTableName(db, jobId);\n-        if (results.size() != 0 && tableName != null) {\n-            final List<TankResult> list;\n-            synchronized (results) {\n-                list = new ArrayList<TankResult>(results);\n-                results.clear();\n-            }\n-            DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n-        }\n-\n-    }\n-\n-    private Item createItem(String jobId, String instanceId, TPSInfo info) {\n-        Item item = new Item();\n-        List<Attribute> attributes = new ArrayList<Attribute>();\n-        String ts = ReportUtil.getTimestamp(info.getTimestamp());\n-        addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n-        addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n-        addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n-        addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n-        addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n-        addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n-        item.setAttributes(attributes);\n-        String name = instanceId\n-                + \"_\" + jobId\n-                + \"_\" + info.getKey()\n-                + \"_\" + ts;\n-        item.setName(name);\n-        return item;\n-    }\n-\n-    public static void addAttribute(List<Attribute> attributes, String key, String value) {\n-        if (value == null) {\n-            value = \"\";\n-        }\n-        attributes.add(new Attribute(key, value));\n-    }\n-\n-    @Override\n-    public void config(HierarchicalConfiguration config) {\n-        // nothing to configure\n-    }\n-\n-    private String getTimingTableName(IDatabase db, String jobId) {\n-        if (StringUtils.isBlank(timingTableName)) {\n-            timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n-            db.initNamespace(timingTableName);\n-        }\n-        return timingTableName;\n-    }\n-\n-    private String getTpsTableName(IDatabase db) {\n-        if (StringUtils.isBlank(tpsTableName)) {\n-            tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n-            db.initNamespace(tpsTableName);\n-        }\n-        return tpsTableName;\n-    }\n-\n-}\n+     @Override\n+     public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n+         String tableName = getTimingTableName(db, jobId);\n+         if (results.size() != 0 && tableName != null) {\n+             final List<TankResult> list;\n+             synchronized (results) {\n+                 list = new ArrayList<TankResult>(results);\n+                 results.clear();\n+             }\n+             DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n+         }\n+\n+     }\n+\n+     private Item createItem(String jobId, String instanceId, TPSInfo info) {\n+         Item item = new Item();\n+         List<Attribute> attributes = new ArrayList<Attribute>();\n+         String ts = ReportUtil.getTimestamp(info.getTimestamp());\n+         addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n+         addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n+         addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n+         addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n+         addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n+         addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n+         item.setAttributes(attributes);\n+         String name = instanceId\n+                 + \"_\" + jobId\n+                 + \"_\" + info.getKey()\n+                 + \"_\" + ts;\n+         item.setName(name);\n+         return item;\n+     }\n+\n+     public static void addAttribute(List<Attribute> attributes, String key, String value) {\n+         if (value == null) {\n+             value = \"\";\n+         }\n+         attributes.add(new Attribute(key, value));\n+     }\n+\n+     @Override\n+     public void config(HierarchicalConfiguration config) {\n+         // nothing to configure\n+     }\n+\n+     private String getTimingTableName(IDatabase db, String jobId) {\n+         if (StringUtils.isBlank(timingTableName)) {\n+             timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n+             db.initNamespace(timingTableName);\n+         }\n+         return timingTableName;\n+     }\n+\n+     private String getTpsTableName(IDatabase db) {\n+         if (StringUtils.isBlank(tpsTableName)) {\n+             tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n+             db.initNamespace(tpsTableName);\n+         }\n+         return tpsTableName;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 81
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..c849aad0ce 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/193/DatabaseResultsReporter.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.reporting.db;\n \n import java.util.ArrayList;\n@@ -33,119 +34,119 @@ import org.apache.logging.log4j.message.ObjectMessage;\n \n /**\n  * DatabaseResultsReporter\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class DatabaseResultsReporter implements ResultsReporter {\n \n-    private static final Logger LOG = LogManager.getLogger(DatabaseResultsReporter.class);\n-\n-    private static final ThreadPoolExecutor EXECUTOR =\n-            new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS,\n-                    new ArrayBlockingQueue<Runnable>(50), Executors.defaultThreadFactory(),\n-                    new ThreadPoolExecutor.DiscardOldestPolicy());\n-\n-    private String tpsTableName;\n-    private String timingTableName;\n-    private IDatabase db;\n-\n-    public DatabaseResultsReporter() {\n-        db = DataBaseFactory.getDatabase();\n-    }\n-\n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public void sendTpsResults(final String jobId, final String instanceId, final TPSInfoContainer container,\n-            boolean async) {\n-\n-        Runnable task = () -> {\n-            try {\n-                List<Item> items = container.getTpsInfos().stream()\n-                        .map(info -> createItem(jobId, instanceId, info))\n-                        .collect(Collectors.toList());\n-                if (!items.isEmpty()) {\n-                    String tableName = getTpsTableName(db);\n-                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n-                    db.addItems(tableName, items, false);\n-                }\n-            } catch (Exception t) {\n-                LOG.error(\"Error adding results: \" + t.getMessage(), t);\n-                throw new RuntimeException(t);\n-            }\n-        };\n-        if (async) {\n-            EXECUTOR.execute(task);\n-        } else {\n-            task.run();\n+  private static final Logger LOG = LogManager.getLogger(DatabaseResultsReporter.class);\n+\n+  private static final ThreadPoolExecutor EXECUTOR =\n+    new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS,\n+      new ArrayBlockingQueue<Runnable>(50), Executors.defaultThreadFactory(),\n+      new ThreadPoolExecutor.DiscardOldestPolicy());\n+\n+  private String tpsTableName;\n+  private String timingTableName;\n+  private IDatabase db;\n+\n+  public DatabaseResultsReporter() {\n+    db = DataBaseFactory.getDatabase();\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public void sendTpsResults(final String jobId, final String instanceId, final TPSInfoContainer container,\n+                             boolean async) {\n+\n+    Runnable task = () -> {\n+      try {\n+        List<Item> items = container.getTpsInfos().stream()\n+          .map(info -> createItem(jobId, instanceId, info))\n+          .collect(Collectors.toList());\n+        if (!items.isEmpty()) {\n+          String tableName = getTpsTableName(db);\n+          LOG.info(\n+            new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n+          db.addItems(tableName, items, false);\n         }\n-\n+      } catch (Exception t) {\n+        LOG.error(\"Error adding results: \" + t.getMessage(), t);\n+        throw new RuntimeException(t);\n+      }\n+    };\n+    if (async) {\n+      EXECUTOR.execute(task);\n+    } else {\n+      task.run();\n     }\n \n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n-        String tableName = getTimingTableName(db, jobId);\n-        if (results.size() != 0 && tableName != null) {\n-            final List<TankResult> list;\n-            synchronized (results) {\n-                list = new ArrayList<TankResult>(results);\n-                results.clear();\n-            }\n-            DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n-        }\n-\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n+    String tableName = getTimingTableName(db, jobId);\n+    if (results.size() != 0 && tableName != null) {\n+      final List<TankResult> list;\n+      synchronized (results) {\n+        list = new ArrayList<TankResult>(results);\n+        results.clear();\n+      }\n+      DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n     }\n \n-    private Item createItem(String jobId, String instanceId, TPSInfo info) {\n-        Item item = new Item();\n-        List<Attribute> attributes = new ArrayList<Attribute>();\n-        String ts = ReportUtil.getTimestamp(info.getTimestamp());\n-        addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n-        addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n-        addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n-        addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n-        addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n-        addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n-        item.setAttributes(attributes);\n-        String name = instanceId\n-                + \"_\" + jobId\n-                + \"_\" + info.getKey()\n-                + \"_\" + ts;\n-        item.setName(name);\n-        return item;\n+  }\n+\n+  private Item createItem(String jobId, String instanceId, TPSInfo info) {\n+    Item item = new Item();\n+    List<Attribute> attributes = new ArrayList<Attribute>();\n+    String ts = ReportUtil.getTimestamp(info.getTimestamp());\n+    addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n+    addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n+    addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n+    addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n+    addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n+    addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n+    item.setAttributes(attributes);\n+    String name = instanceId\n+      + \"_\" + jobId\n+      + \"_\" + info.getKey()\n+      + \"_\" + ts;\n+    item.setName(name);\n+    return item;\n+  }\n+\n+  public static void addAttribute(List<Attribute> attributes, String key, String value) {\n+    if (value == null) {\n+      value = \"\";\n     }\n-\n-    public static void addAttribute(List<Attribute> attributes, String key, String value) {\n-        if (value == null) {\n-            value = \"\";\n-        }\n-        attributes.add(new Attribute(key, value));\n-    }\n-\n-    @Override\n-    public void config(HierarchicalConfiguration config) {\n-        // nothing to configure\n+    attributes.add(new Attribute(key, value));\n+  }\n+\n+  @Override\n+  public void config(HierarchicalConfiguration config) {\n+    // nothing to configure\n+  }\n+\n+  private String getTimingTableName(IDatabase db, String jobId) {\n+    if (StringUtils.isBlank(timingTableName)) {\n+      timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n+      db.initNamespace(timingTableName);\n     }\n+    return timingTableName;\n+  }\n \n-    private String getTimingTableName(IDatabase db, String jobId) {\n-        if (StringUtils.isBlank(timingTableName)) {\n-            timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n-            db.initNamespace(timingTableName);\n-        }\n-        return timingTableName;\n-    }\n-\n-    private String getTpsTableName(IDatabase db) {\n-        if (StringUtils.isBlank(tpsTableName)) {\n-            tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n-            db.initNamespace(tpsTableName);\n-        }\n-        return tpsTableName;\n+  private String getTpsTableName(IDatabase db) {\n+    if (StringUtils.isBlank(tpsTableName)) {\n+      tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n+      db.initNamespace(tpsTableName);\n     }\n+    return tpsTableName;\n+  }\n \n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..d35db7e276 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/193/DatabaseResultsReporter.java\n@@ -41,8 +41,7 @@ public class DatabaseResultsReporter implements ResultsReporter {\n \n     private static final Logger LOG = LogManager.getLogger(DatabaseResultsReporter.class);\n \n-    private static final ThreadPoolExecutor EXECUTOR =\n-            new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS,\n+    private static final ThreadPoolExecutor EXECUTOR = new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS,\n                     new ArrayBlockingQueue<Runnable>(50), Executors.defaultThreadFactory(),\n                     new ThreadPoolExecutor.DiscardOldestPolicy());\n \n@@ -148,4 +147,4 @@ public class DatabaseResultsReporter implements ResultsReporter {\n         return tpsTableName;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..15b9073389 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/193/DatabaseResultsReporter.java\n@@ -3,6 +3,8 @@\n  */\n package com.intuit.tank.reporting.db;\n \n+\n+\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.ArrayBlockingQueue;\n@@ -10,13 +12,11 @@ import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadPoolExecutor;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n-\n import com.google.common.collect.ImmutableMap;\n import org.apache.commons.configuration.HierarchicalConfiguration;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import com.intuit.tank.persistence.databases.DataBaseFactory;\n import com.intuit.tank.persistence.databases.DatabaseKeys;\n import com.intuit.tank.reporting.api.ResultsReporter;\n@@ -37,19 +37,16 @@ import org.apache.logging.log4j.message.ObjectMessage;\n  * @author dangleton\n  * \n  */\n+\n public class DatabaseResultsReporter implements ResultsReporter {\n \n     private static final Logger LOG = LogManager.getLogger(DatabaseResultsReporter.class);\n-\n-    private static final ThreadPoolExecutor EXECUTOR =\n-            new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS,\n-                    new ArrayBlockingQueue<Runnable>(50), Executors.defaultThreadFactory(),\n-                    new ThreadPoolExecutor.DiscardOldestPolicy());\n-\n+    private static final ThreadPoolExecutor EXECUTOR = new ThreadPoolExecutor(10, 50, 60, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(50), Executors.defaultThreadFactory(), new ThreadPoolExecutor.DiscardOldestPolicy());\n     private String tpsTableName;\n     private String timingTableName;\n     private IDatabase db;\n \n+\n     public DatabaseResultsReporter() {\n         db = DataBaseFactory.getDatabase();\n     }\n@@ -57,38 +54,38 @@ public class DatabaseResultsReporter implements ResultsReporter {\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n-    public void sendTpsResults(final String jobId, final String instanceId, final TPSInfoContainer container,\n-            boolean async) {\n-\n-        Runnable task = () -> {\n-            try {\n-                List<Item> items = container.getTpsInfos().stream()\n-                        .map(info -> createItem(jobId, instanceId, info))\n-                        .collect(Collectors.toList());\n-                if (!items.isEmpty()) {\n-                    String tableName = getTpsTableName(db);\n-                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n-                    db.addItems(tableName, items, false);\n-                }\n-            } catch (Exception t) {\n-                LOG.error(\"Error adding results: \" + t.getMessage(), t);\n-                throw new RuntimeException(t);\n-            }\n-        };\n+    public void sendTpsResults(final String jobId, final String instanceId, final TPSInfoContainer container, boolean async) {\n+        Runnable task = ()-> {\n+                            try {\n+                                List<Item> items = container.getTpsInfos().stream().map(info-> createItem(jobId, instanceId, info)).collect(Collectors.toList());\n+                                if (!items.isEmpty()) {\n+                                    String tableName = getTpsTableName(db);\n+                                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n+                                    db.addItems(tableName, items, false);\n+                                }\n+                            } catch (Exception t) {\n+                                LOG.error(\"Error adding results: \" + t.getMessage(), t);\n+                                throw new RuntimeException(t);\n+                            }\n+                        };\n         if (async) {\n             EXECUTOR.execute(task);\n         } else {\n             task.run();\n         }\n-\n     }\n \n     /**\n      * @inheritDoc\n      */\n+\n+\n     @Override\n-    public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n+    public void sendTimingResults(String jobId,\n+        String instanceId,\n+            List<TankResult> results, boolean async) {\n         String tableName = getTimingTableName(db, jobId);\n         if (results.size() != 0 && tableName != null) {\n             final List<TankResult> list;\n@@ -98,28 +95,29 @@ public class DatabaseResultsReporter implements ResultsReporter {\n             }\n             DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n         }\n-\n     }\n \n     private Item createItem(String jobId, String instanceId, TPSInfo info) {\n         Item item = new Item();\n         List<Attribute> attributes = new ArrayList<Attribute>();\n         String ts = ReportUtil.getTimestamp(info.getTimestamp());\n-        addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n-        addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n+        addAttribute(attributes,\n+                    DatabaseKeys.TIMESTAMP_KEY.getShortKey(),\n+                    ts);\n+        addAttribute(attributes,\n+                    DatabaseKeys.JOB_ID_KEY.getShortKey(),\n+                    jobId);\n         addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n         addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n         addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n         addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n         item.setAttributes(attributes);\n-        String name = instanceId\n-                + \"_\" + jobId\n-                + \"_\" + info.getKey()\n-                + \"_\" + ts;\n+        String name = instanceId + \"_\" + jobId + \"_\" + info.getKey() + \"_\" + ts;\n         item.setName(name);\n         return item;\n     }\n \n+\n     public static void addAttribute(List<Attribute> attributes, String key, String value) {\n         if (value == null) {\n             value = \"\";\n@@ -127,9 +125,11 @@ public class DatabaseResultsReporter implements ResultsReporter {\n         attributes.add(new Attribute(key, value));\n     }\n \n+\n     @Override\n     public void config(HierarchicalConfiguration config) {\n         // nothing to configure\n+\n     }\n \n     private String getTimingTableName(IDatabase db, String jobId) {\n@@ -148,4 +148,4 @@ public class DatabaseResultsReporter implements ResultsReporter {\n         return tpsTableName;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "72",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "71",
                    "column": "83",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "83",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "96",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "96",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "113",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "113",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..1f36294d90 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/193/DatabaseResultsReporter.java\n@@ -68,8 +68,8 @@ public class DatabaseResultsReporter implements ResultsReporter {\n                         .collect(Collectors.toList());\n                 if (!items.isEmpty()) {\n                     String tableName = getTpsTableName(db);\n-                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n-                    db.addItems(tableName, items, false);\n+                    LOG.info(newObjectMessage(ImmutableMap.of(\"Message\",\"Sending \"+items.size()+\" to TPS Table \"+tableName)));db\n+                    .addItems(tableName, items, false);\n                 }\n             } catch (Exception t) {\n                 LOG.error(\"Error adding results: \" + t.getMessage(), t);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "72",
                    "column": "21",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/193/DatabaseResultsReporter.java\nindex 2ea444b9dc..895cee65bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/193/DatabaseResultsReporter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/193/DatabaseResultsReporter.java\n@@ -68,84 +68,86 @@ public class DatabaseResultsReporter implements ResultsReporter {\n                         .collect(Collectors.toList());\n                 if (!items.isEmpty()) {\n                     String tableName = getTpsTableName(db);\n-                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size() + \" to TPS Table \" + tableName)));\n-                    db.addItems(tableName, items, false);\n-                }\n-            } catch (Exception t) {\n-                LOG.error(\"Error adding results: \" + t.getMessage(), t);\n-                throw new RuntimeException(t);\n-            }\n-        };\n-        if (async) {\n-            EXECUTOR.execute(task);\n-        } else {\n-            task.run();\n-        }\n-\n-    }\n-\n-    /**\n+                    LOG.info(new ObjectMessage(ImmutableMap.of(\"Message\", \"Sending \" + items.size()\n+                    +\" to TPS Table \"+ tableName)));\n+                     db.addItems(tableName, items, false);\n+                 }\n+             } catch (Exception t) {\n+                 LOG.error(\"Error adding results: \" + t.getMessage(), t);\n+                 throw new RuntimeException(t);\n+             }\n+         };\n+         if (async) {\n+             EXECUTOR.execute(task);\n+         } else {\n+             task.run();\n+         }\n+\n+     }\n+\n+     /**\n      * @inheritDoc\n      */\n-    @Override\n-    public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n-        String tableName = getTimingTableName(db, jobId);\n-        if (results.size() != 0 && tableName != null) {\n-            final List<TankResult> list;\n-            synchronized (results) {\n-                list = new ArrayList<TankResult>(results);\n-                results.clear();\n-            }\n-            DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n-        }\n-\n-    }\n-\n-    private Item createItem(String jobId, String instanceId, TPSInfo info) {\n-        Item item = new Item();\n-        List<Attribute> attributes = new ArrayList<Attribute>();\n-        String ts = ReportUtil.getTimestamp(info.getTimestamp());\n-        addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n-        addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n-        addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n-        addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n-        addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n-        addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n-        item.setAttributes(attributes);\n-        String name = instanceId\n-                + \"_\" + jobId\n-                + \"_\" + info.getKey()\n-                + \"_\" + ts;\n-        item.setName(name);\n-        return item;\n-    }\n-\n-    public static void addAttribute(List<Attribute> attributes, String key, String value) {\n-        if (value == null) {\n-            value = \"\";\n-        }\n-        attributes.add(new Attribute(key, value));\n-    }\n-\n-    @Override\n-    public void config(HierarchicalConfiguration config) {\n-        // nothing to configure\n-    }\n-\n-    private String getTimingTableName(IDatabase db, String jobId) {\n-        if (StringUtils.isBlank(timingTableName)) {\n-            timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n-            db.initNamespace(timingTableName);\n-        }\n-        return timingTableName;\n-    }\n-\n-    private String getTpsTableName(IDatabase db) {\n-        if (StringUtils.isBlank(tpsTableName)) {\n-            tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n-            db.initNamespace(tpsTableName);\n-        }\n-        return tpsTableName;\n-    }\n-\n-}\n+     @Override\n+     public void sendTimingResults(String jobId, String instanceId, List<TankResult> results, boolean async) {\n+         String tableName = getTimingTableName(db, jobId);\n+         if (results.size() != 0 && tableName != null) {\n+             final List<TankResult> list;\n+             synchronized (results) {\n+                 list = new ArrayList<TankResult>(results);\n+                 results.clear();\n+             }\n+             DataBaseFactory.getDatabase().addTimingResults(tableName, list, async);\n+         }\n+\n+     }\n+\n+     private Item createItem(String jobId, String instanceId, TPSInfo info) {\n+         Item item = new Item();\n+         List<Attribute> attributes = new ArrayList<Attribute>();\n+         String ts = ReportUtil.getTimestamp(info.getTimestamp());\n+         addAttribute(attributes, DatabaseKeys.TIMESTAMP_KEY.getShortKey(), ts);\n+         addAttribute(attributes, DatabaseKeys.JOB_ID_KEY.getShortKey(), jobId);\n+         addAttribute(attributes, DatabaseKeys.INSTANCE_ID_KEY.getShortKey(), instanceId);\n+         addAttribute(attributes, DatabaseKeys.LOGGING_KEY_KEY.getShortKey(), info.getKey());\n+         addAttribute(attributes, DatabaseKeys.PERIOD_KEY.getShortKey(), Integer.toString(info.getPeriodInSeconds()));\n+         addAttribute(attributes, DatabaseKeys.TRANSACTIONS_KEY.getShortKey(), Integer.toString(info.getTransactions()));\n+         item.setAttributes(attributes);\n+         String name = instanceId\n+                 + \"_\" + jobId\n+                 + \"_\" + info.getKey()\n+                 + \"_\" + ts;\n+         item.setName(name);\n+         return item;\n+     }\n+\n+     public static void addAttribute(List<Attribute> attributes, String key, String value) {\n+         if (value == null) {\n+             value = \"\";\n+         }\n+         attributes.add(new Attribute(key, value));\n+     }\n+\n+     @Override\n+     public void config(HierarchicalConfiguration config) {\n+         // nothing to configure\n+     }\n+\n+     private String getTimingTableName(IDatabase db, String jobId) {\n+         if (StringUtils.isBlank(timingTableName)) {\n+             timingTableName = db.getDatabaseName(TankDatabaseType.timing, jobId);\n+             db.initNamespace(timingTableName);\n+         }\n+         return timingTableName;\n+     }\n+\n+     private String getTpsTableName(IDatabase db) {\n+         if (StringUtils.isBlank(tpsTableName)) {\n+             tpsTableName = new TankConfig().getInstanceName() + \"_tps\";\n+             db.initNamespace(tpsTableName);\n+         }\n+         return tpsTableName;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 81
        }
    ]
}