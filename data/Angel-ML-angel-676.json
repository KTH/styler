{
    "error_id": "676",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/676/ByteBufUtils.java\nindex 76382ee5d1..f6e5c227cb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/676/ByteBufUtils.java\n@@ -23,22 +23,22 @@ import io.netty.buffer.PooledByteBufAllocator;\n  * Netty ByteBuf allocation utils.\n  */\n public class ByteBufUtils {\n-  // private static UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);\n-  private static PooledByteBufAllocator allocator = new PooledByteBufAllocator();\n+    // private static UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);\n+    private static PooledByteBufAllocator allocator = new PooledByteBufAllocator();\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n-    return allocator.buffer(estimizeSerilizeSize);\n-  }\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n+        return allocator.buffer(estimizeSerilizeSize);\n+    }\n \n-  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n-    return allocator.directBuffer(estimizeSerilizeSize);\n-  }\n+    public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n+        return allocator.directBuffer(estimizeSerilizeSize);\n+    }\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n-    if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n-    } else {\n-      return newByteBuf(estimizeSerilizeSize);\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n+        if (useDirect) {\n+            return newDirectByteBuf(estimizeSerilizeSize);\n+        } else {\n+            return newByteBuf(estimizeSerilizeSize);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/676/ByteBufUtils.java\nindex 76382ee5d1..02ddd8340e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/676/ByteBufUtils.java\n@@ -41,4 +41,4 @@ public class ByteBufUtils {\n       return newByteBuf(estimizeSerilizeSize);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/676/ByteBufUtils.java\nindex 76382ee5d1..3e65ce192d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/676/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/676/ByteBufUtils.java\n@@ -22,23 +22,25 @@ import io.netty.buffer.PooledByteBufAllocator;\n /**\n  * Netty ByteBuf allocation utils.\n  */\n+\n public class ByteBufUtils {\n   // private static UnpooledByteBufAllocator allocator = new UnpooledByteBufAllocator(false);\n-  private static PooledByteBufAllocator allocator = new PooledByteBufAllocator();\n+    private static PooledByteBufAllocator allocator = new PooledByteBufAllocator();\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n     return allocator.buffer(estimizeSerilizeSize);\n-  }\n+    }\n \n-  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n+    public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n     return allocator.directBuffer(estimizeSerilizeSize);\n-  }\n+    }\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n     if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n+        return newDirectByteBuf(estimizeSerilizeSize);\n     } else {\n       return newByteBuf(estimizeSerilizeSize);\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}