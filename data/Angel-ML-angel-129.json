{
    "error_id": "129",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n\n        double [] delta = new double[col];\n        for(int i = 0; i < col; i++) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/129/PSFTestTask.java\nindex 3500dace3b..2d698cf61c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/129/PSFTestTask.java\n@@ -57,7 +57,7 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n         //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n+        + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n \n         double [] delta = new double[col];\n         for(int i = 0; i < col; i++) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/129/PSFTestTask.java\nindex 3500dace3b..7daba3b5b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/129/PSFTestTask.java\n@@ -32,66 +32,72 @@ import org.apache.commons.logging.LogFactory;\n  * Created by payniexiao on 2017/7/18.\n  */\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n-    super(taskContext);\n-  }\n+    public PSFTestTask(TaskContext taskContext) {\n+        super(taskContext);\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n-    return null;\n-  }\n+    @Override\n+    public Long parse(Long key, Long value) {\n+        return null;\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {\n+    }\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    int col = conf.getInt(\"col\", 100000000);\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n-      //Pull func1 = new Pull(client.getMatrixId(), 1);\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+        int col = conf.getInt(\"col\", 100000000);\n+        try {\n+            MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+            Pull func = new Pull(client.getMatrixId(), 0);\n+            //Pull func1 = new Pull(client.getMatrixId(), 1);\n \n-      while (taskContext.getEpoch() < 100) {\n-        //taskContext.globalSync(client.getMatrixId());\n-        long startTs = System.currentTimeMillis();\n-        TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n-        //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n+            while (taskContext.getEpoch() < 100) {\n+                //taskContext.globalSync(client.getMatrixId());\n+                long startTs = System.currentTimeMillis();\n+                TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n+                //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" pull use time=\" + (System.currentTimeMillis() - startTs) +\n+                        \", sum of row 0=\" + sum((DenseDoubleVector) row));\n \n-        double [] delta = new double[col];\n-        for(int i = 0; i < col; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(col, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+                double[] delta = new double[col];\n+                for (int i = 0; i < col; i++) {\n+                    delta[i] = 1.0;\n+                }\n+                DenseDoubleVector deltaV = new DenseDoubleVector(col, delta);\n+                deltaV.setMatrixId(client.getMatrixId());\n+                deltaV.setRowId(0);\n \n-        //double [] delta1 = new double[col];\n-        //for(int i = 0; i < col; i++) {\n-        //  delta1[i] = 2.0;\n-        //}\n-        //DenseDoubleVector deltaV1 = new DenseDoubleVector(col, delta1);\n-        //deltaV1.setMatrixId(client.getMatrixId());\n-        //deltaV1.setRowId(1);\n+                //double [] delta1 = new double[col];\n+                //for(int i = 0; i < col; i++) {\n+                //  delta1[i] = 2.0;\n+                //}\n+                //DenseDoubleVector deltaV1 = new DenseDoubleVector(col, delta1);\n+                //deltaV1.setMatrixId(client.getMatrixId());\n+                //deltaV1.setRowId(1);\n \n-        client.increment(deltaV);\n-        //client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+                client.increment(deltaV);\n+                //client.increment(deltaV1);\n+                client.clock().get();\n+                taskContext.incEpoch();\n+            }\n+        } catch (Throwable x) {\n+            throw new AngelException(\"run task failed \", x);\n+        }\n     }\n-  }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+    private double sum(DenseDoubleVector row) {\n+        double[] data = row.getValues();\n+        double ret = 0.0;\n+        for (int i = 0; i < data.length; i++) {\n+            ret += data[i];\n+        }\n \n-    return ret;\n-  }\n+        return ret;\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 57.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/129/PSFTestTask.java\nindex 3500dace3b..ee5e525d30 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/129/PSFTestTask.java\n@@ -31,38 +31,40 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * Created by payniexiao on 2017/7/18.\n  */\n+\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n+    public PSFTestTask(TaskContext taskContext) {\n     super(taskContext);\n-  }\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n+    @Override\n+    public Long parse(Long key, Long value) {\n     return null;\n-  }\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n     int col = conf.getInt(\"col\", 100000000);\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n+    try {\n+        MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+        Pull func = new Pull(client.getMatrixId(), 0);\n       //Pull func1 = new Pull(client.getMatrixId(), 1);\n-\n-      while (taskContext.getEpoch() < 100) {\n+        while (taskContext.getEpoch() < 100) {\n         //taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n         //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n-\n-        double [] delta = new double[col];\n-        for(int i = 0; i < col; i++) {\n-          delta[i] = 1.0;\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector) row));\n+        double[] delta = new double[col];\n+        for (int i = 0; i < col; i++) {\n+                                                 delta[i] = 1.0;\n         }\n+\n         DenseDoubleVector deltaV = new DenseDoubleVector(col, delta);\n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n@@ -74,24 +76,23 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         //DenseDoubleVector deltaV1 = new DenseDoubleVector(col, delta1);\n         //deltaV1.setMatrixId(client.getMatrixId());\n         //deltaV1.setRowId(1);\n-\n         client.increment(deltaV);\n         //client.increment(deltaV1);\n         client.clock().get();\n         taskContext.incEpoch();\n-      }\n+        }\n     } catch (Throwable x) {\n       throw new AngelException(\"run task failed \", x);\n     }\n-  }\n+    }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n+    private double sum(DenseDoubleVector row) {\n+    double[] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+    for (int i = 0; i < data.length; i++) {\n+        ret += data[i];\n     }\n-\n     return ret;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/129/PSFTestTask.java\nindex 3500dace3b..a6a0046471 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/129/PSFTestTask.java\n@@ -57,41 +57,43 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n         //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n+          +\n+          \" pull use time=\" +(System.currentTimeMillis()- startTs) +\n+            \", sum of row 0=\" + sum ((DenseDoubleVector)row));double\n+          [ ] delta = new double[col];\n+             for(int i = 0; i < col; i++) {\n+               delta[i] = 1.0;\n+             }\n+             DenseDoubleVector deltaV = new DenseDoubleVector(col, delta);\n+             deltaV.setMatrixId(client.getMatrixId());\n+             deltaV.setRowId(0);\n \n-        double [] delta = new double[col];\n-        for(int i = 0; i < col; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(col, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+             //double [] delta1 = new double[col];\n+             //for(int i = 0; i < col; i++) {\n+             //  delta1[i] = 2.0;\n+             //}\n+             //DenseDoubleVector deltaV1 = new DenseDoubleVector(col, delta1);\n+             //deltaV1.setMatrixId(client.getMatrixId());\n+             //deltaV1.setRowId(1);\n \n-        //double [] delta1 = new double[col];\n-        //for(int i = 0; i < col; i++) {\n-        //  delta1[i] = 2.0;\n-        //}\n-        //DenseDoubleVector deltaV1 = new DenseDoubleVector(col, delta1);\n-        //deltaV1.setMatrixId(client.getMatrixId());\n-        //deltaV1.setRowId(1);\n+             client.increment(deltaV);\n+             //client.increment(deltaV1);\n+             client.clock().get();\n+             taskContext.incEpoch();\n+           }\n+         } catch (Throwable x) {\n+           throw new AngelException(\"run task failed \", x);\n+         }\n+       }\n \n-        client.increment(deltaV);\n-        //client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n-    }\n-  }\n-\n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+       private double sum(DenseDoubleVector row) {\n+         double [] data = row.getValues();\n+         double ret = 0.0;\n+         for(int i = 0; i < data.length; i++) {\n+           ret += data[i];\n+         }\n \n-    return ret;\n-  }\n-}\n+         return ret;\n+       }\n+     }\n+     \n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/129/PSFTestTask.java\nindex 3500dace3b..2d698cf61c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/129/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/129/PSFTestTask.java\n@@ -57,7 +57,7 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         TVector row = ((GetRowResult) client.get(func)).getRow();//client.getRow(0);\n         //TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n+        + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row));\n \n         double [] delta = new double[col];\n         for(int i = 0; i < col; i++) {\n",
            "diff_size": 1
        }
    ]
}