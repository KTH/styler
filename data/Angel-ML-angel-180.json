{
    "error_id": "180",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/180/ColIdValueTextRowFormat.java\nindex 48c41bf542..f1b41ed0c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/180/ColIdValueTextRowFormat.java\n@@ -25,93 +25,109 @@ import java.io.IOException;\n  * Text format: column id + sep + element value\n  */\n public class ColIdValueTextRowFormat extends RowFormat {\n-  private String sep = \",\";\n-\n-  @Override public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(IntIntElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(IntLongElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(LongIntElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void save(LongLongElement element, DataOutputStream out) throws IOException {\n-    out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n-\n-  @Override public void load(IntFloatElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Integer.valueOf(kv[0]);\n-    element.value = Float.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Integer.valueOf(kv[0]);\n-    element.value = Double.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(IntIntElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Integer.valueOf(kv[0]);\n-    element.value = Integer.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(IntLongElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Integer.valueOf(kv[0]);\n-    element.value = Long.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(LongFloatElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Long.valueOf(kv[0]);\n-    element.value = Float.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Long.valueOf(kv[0]);\n-    element.value = Double.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(LongIntElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Long.valueOf(kv[0]);\n-    element.value = Integer.valueOf(kv[1]);\n-  }\n-\n-  @Override public void load(LongLongElement element, DataInputStream in) throws IOException {\n-    String line = in.readLine();\n-    String[] kv = line.split(sep);\n-    element.colId = Long.valueOf(kv[0]);\n-    element.value = Long.valueOf(kv[1]);\n-  }\n+    private String sep = \",\";\n+\n+    @Override\n+    public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(IntIntElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(IntLongElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(LongIntElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void save(LongLongElement element, DataOutputStream out) throws IOException {\n+        out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n+    }\n+\n+    @Override\n+    public void load(IntFloatElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Integer.valueOf(kv[0]);\n+        element.value = Float.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Integer.valueOf(kv[0]);\n+        element.value = Double.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(IntIntElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Integer.valueOf(kv[0]);\n+        element.value = Integer.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(IntLongElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Integer.valueOf(kv[0]);\n+        element.value = Long.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(LongFloatElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Long.valueOf(kv[0]);\n+        element.value = Float.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Long.valueOf(kv[0]);\n+        element.value = Double.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(LongIntElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Long.valueOf(kv[0]);\n+        element.value = Integer.valueOf(kv[1]);\n+    }\n+\n+    @Override\n+    public void load(LongLongElement element, DataInputStream in) throws IOException {\n+        String line = in.readLine();\n+        String[] kv = line.split(sep);\n+        element.colId = Long.valueOf(kv[0]);\n+        element.value = Long.valueOf(kv[1]);\n+    }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/180/ColIdValueTextRowFormat.java\nindex 48c41bf542..4970bbb7e1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/180/ColIdValueTextRowFormat.java\n@@ -27,91 +27,107 @@ import java.io.IOException;\n public class ColIdValueTextRowFormat extends RowFormat {\n   private String sep = \",\";\n \n-  @Override public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(IntIntElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(IntIntElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(IntLongElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(IntLongElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(LongIntElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(LongIntElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void save(LongLongElement element, DataOutputStream out) throws IOException {\n+  @Override\n+public void save(LongLongElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n   }\n \n-  @Override public void load(IntFloatElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(IntFloatElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Float.valueOf(kv[1]);\n   }\n \n-  @Override public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Double.valueOf(kv[1]);\n   }\n \n-  @Override public void load(IntIntElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(IntIntElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Integer.valueOf(kv[1]);\n   }\n \n-  @Override public void load(IntLongElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(IntLongElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Long.valueOf(kv[1]);\n   }\n \n-  @Override public void load(LongFloatElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(LongFloatElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Float.valueOf(kv[1]);\n   }\n \n-  @Override public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Double.valueOf(kv[1]);\n   }\n \n-  @Override public void load(LongIntElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(LongIntElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Integer.valueOf(kv[1]);\n   }\n \n-  @Override public void load(LongLongElement element, DataInputStream in) throws IOException {\n+  @Override\n+public void load(LongLongElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Long.valueOf(kv[1]);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/180/ColIdValueTextRowFormat.java\nindex 48c41bf542..bbc9ee2ab9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/180/ColIdValueTextRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/180/ColIdValueTextRowFormat.java\n@@ -24,94 +24,111 @@ import java.io.IOException;\n /**\n  * Text format: column id + sep + element value\n  */\n+\n public class ColIdValueTextRowFormat extends RowFormat {\n-  private String sep = \",\";\n+    private String sep = \",\";\n \n-  @Override public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(IntFloatElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(IntDoubleElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(IntIntElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(IntIntElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(IntLongElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(IntLongElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(LongFloatElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(LongDoubleElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(LongIntElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(LongIntElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void save(LongLongElement element, DataOutputStream out) throws IOException {\n+    @Override\n+    public void save(LongLongElement element, DataOutputStream out) throws IOException {\n     out.writeBytes(String.valueOf(element.colId) + sep + String.valueOf(element.value) + \"\\n\");\n-  }\n+    }\n \n-  @Override public void load(IntFloatElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(IntFloatElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Float.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(IntDoubleElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Double.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(IntIntElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(IntIntElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Integer.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(IntLongElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(IntLongElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Integer.valueOf(kv[0]);\n     element.value = Long.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(LongFloatElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(LongFloatElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Float.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(LongDoubleElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Double.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(LongIntElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(LongIntElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Integer.valueOf(kv[1]);\n-  }\n+    }\n \n-  @Override public void load(LongLongElement element, DataInputStream in) throws IOException {\n+    @Override\n+    public void load(LongLongElement element, DataInputStream in) throws IOException {\n     String line = in.readLine();\n     String[] kv = line.split(sep);\n     element.colId = Long.valueOf(kv[0]);\n     element.value = Long.valueOf(kv[1]);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}