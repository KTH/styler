{
    "error_id": "129",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\nimport static org.seedstack.business.internal.utils.PluginUtils.associateInterfacesToImplementations;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/129/DomainPlugin.java\nindex 21276ac481..a0879455b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/129/DomainPlugin.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.domain;\n+\n+package org .seedstack.business.internal.domain;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n import static org.seedstack.business.internal.utils.PluginUtils.associateInterfacesToImplementations;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/129/DomainPlugin.java\nindex 21276ac481..c1961a67dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/129/DomainPlugin.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 12, indentation should be the same level as line 164.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'bindings' has incorrect indentation level 8, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 12, indentation should be the same level as line 169.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/129/DomainPlugin.java\nindex 21276ac481..0d2cb321b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/129/DomainPlugin.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n@@ -43,29 +44,21 @@ import org.slf4j.LoggerFactory;\n public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DomainPlugin.class);\n-\n-    private final Collection<Class<?>> aggregateClasses = new HashSet<>();\n+private final Collection<Class<?>> aggregateClasses = new HashSet<>();\n     private final Collection<Class<?>> entityClasses = new HashSet<>();\n     private final Collection<Class<?>> valueObjectClasses = new HashSet<>();\n-\n-    private final Collection<Class<?>> repositoryInterfaces = new HashSet<>();\n+private final Collection<Class<?>> repositoryInterfaces = new HashSet<>();\n     private final Collection<Class<? extends Repository>> defaultRepositoryClasses = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> repositorySpecs = new HashMap<>();\n-\n-    private final Collection<Class<?>> factoryInterfaces = new HashSet<>();\n+private final Collection<Class<?>> factoryInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> factorySpecs = new HashMap<>();\n-\n-    private final Collection<Class<?>> serviceInterfaces = new HashSet<>();\n+private final Collection<Class<?>> serviceInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> serviceSpecs = new HashMap<>();\n-\n-    private final Collection<Class<?>> policyInterfaces = new HashSet<>();\n+private final Collection<Class<?>> policyInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> policySpecs = new HashMap<>();\n-\n-    private final Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses = new HashSet<>();\n-\n-    private final Collection<Class<? extends DomainEventHandler>> eventHandlerClasses = new HashSet<>();\n-\n-    private final Map<Key<?>, Class<?>> bindings = new HashMap<>();\n+private final Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses = new HashSet<>();\n+private final Collection<Class<? extends DomainEventHandler>> eventHandlerClasses = new HashSet<>();\n+private final Map<Key<?>, Class<?>> bindings = new HashMap<>();\n     private final Map<Key<?>, Class<?>> overridingBindings = new HashMap<>();\n     private final Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n \n@@ -91,15 +84,12 @@ public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n                     .build();\n         } else {\n             ClasspathScanRequestBuilder classpathScanRequestBuilder = classpathScanRequestBuilder();\n-            repositorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder,\n-                    repositoryInterfaces));\n-            factorySpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, factoryInterfaces));\n-            serviceSpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, serviceInterfaces));\n-            policySpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, policyInterfaces));\n-            return classpathScanRequestBuilder.build();\n+            repositorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, repositoryInterfaces));\n+            factorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, factoryInterfaces));\n+            serviceSpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, serviceInterfaces));\n+            policySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, policyInterfaces));\n+\n+return classpathScanRequestBuilder.build();\n         }\n     }\n \n@@ -155,41 +145,27 @@ public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n             return InitState.NON_INITIALIZED;\n         } else {\n             // Then add bindings for explicit implementations\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n+            bindings.putAll(associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n                             false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n+        overridingBindings.putAll(associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n                             true));\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n+        bindings.putAll(associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n                             false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n+        overridingBindings.putAll(associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n                             true));\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n+        bindings.putAll(associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n                             false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n+        overridingBindings.putAll(associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n                             true));\n-            bindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs,\n+        bindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs,\n                     false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs, true));\n-\n-            // Then add bindings for default repositories\n-            DefaultRepositoryCollector defaultRepositoryCollector = new DefaultRepositoryCollector(\n-                    getApplication(),\n-                    bindings,\n-                    defaultRepositoryClasses\n-            );\n-            bindingStrategies.addAll(defaultRepositoryCollector.collectFromAggregates(\n-                    streamClasses(aggregateClasses, AggregateRoot.class).collect(Collectors.toSet())));\n-            bindingStrategies.addAll(defaultRepositoryCollector.collectFromInterfaces(\n-                    streamClasses(repositoryInterfaces, Repository.class).collect(Collectors.toSet())));\n-\n-            // Then add bindings for default factories when no explicit factory has been defined\n+            overridingBindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs, true));\n+// Then add bindings for default repositories\n+            DefaultRepositoryCollector defaultRepositoryCollector = new DefaultRepositoryCollector(getApplication(),\n+        bindings, defaultRepositoryClasses);\n+            bindingStrategies.addAll(defaultRepositoryCollector.collectFromAggregates(streamClasses(aggregateClasses, AggregateRoot.class).collect(Collectors.toSet())));\n+            bindingStrategies.addAll(defaultRepositoryCollector.collectFromInterfaces(streamClasses(repositoryInterfaces, Repository.class).collect(Collectors.toSet())));\n+// Then add bindings for default factories when no explicit factory has been defined\n             DefaultFactoryCollector defaultFactoryCollector = new DefaultFactoryCollector(bindings);\n             bindingStrategies.addAll(defaultFactoryCollector.collect(aggregateClasses, valueObjectClasses));\n \n@@ -241,4 +217,4 @@ public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n     public Collection<Class<?>> policies() {\n         return Collections.unmodifiableCollection(policyInterfaces);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'\"unchecked\"' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/129/DomainPlugin.java\nindex 21276ac481..4af0929e26 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/129/DomainPlugin.java\n@@ -8,8 +8,8 @@\n package org.seedstack.business.internal.domain;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n-import static org.seedstack.business.internal.utils.PluginUtils.associateInterfacesToImplementations;\n \n+import static org.seedstack.business.internal.utils.PluginUtils.associateInterfacesToImplementations;\n import com.google.inject.Key;\n import io.nuun.kernel.api.plugin.InitState;\n import io.nuun.kernel.api.plugin.context.InitContext;\n@@ -40,35 +40,28 @@ import org.slf4j.LoggerFactory;\n  * repositories, factories, services, policies and finders. It also handles default repositories and\n  * default factories.\n  */\n+\n+\n public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(DomainPlugin.class);\n-\n     private final Collection<Class<?>> aggregateClasses = new HashSet<>();\n     private final Collection<Class<?>> entityClasses = new HashSet<>();\n     private final Collection<Class<?>> valueObjectClasses = new HashSet<>();\n-\n     private final Collection<Class<?>> repositoryInterfaces = new HashSet<>();\n     private final Collection<Class<? extends Repository>> defaultRepositoryClasses = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> repositorySpecs = new HashMap<>();\n-\n     private final Collection<Class<?>> factoryInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> factorySpecs = new HashMap<>();\n-\n     private final Collection<Class<?>> serviceInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> serviceSpecs = new HashMap<>();\n-\n     private final Collection<Class<?>> policyInterfaces = new HashSet<>();\n     private final Map<Class<?>, Specification<? extends Class<?>>> policySpecs = new HashMap<>();\n-\n     private final Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses = new HashSet<>();\n-\n     private final Collection<Class<? extends DomainEventHandler>> eventHandlerClasses = new HashSet<>();\n-\n     private final Map<Key<?>, Class<?>> bindings = new HashMap<>();\n     private final Map<Key<?>, Class<?>> overridingBindings = new HashMap<>();\n     private final Collection<BindingStrategy> bindingStrategies = new ArrayList<>();\n-\n     @Override\n     public String name() {\n         return \"business-domain\";\n@@ -78,121 +71,77 @@ public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n     public Collection<ClasspathScanRequest> classpathScanRequests() {\n         if (round.isFirst()) {\n             return classpathScanRequestBuilder().specification(BusinessSpecifications.AGGREGATE_ROOT)\n-                    .specification(BusinessSpecifications.ENTITY)\n-                    .specification(BusinessSpecifications.VALUE_OBJECT)\n-                    .specification(BusinessSpecifications.REPOSITORY)\n-                    .specification(BusinessSpecifications.DEFAULT_REPOSITORY)\n-                    .specification(BusinessSpecifications.FACTORY)\n-                    .specification(BusinessSpecifications.IDENTITY_GENERATOR)\n-                    .specification(BusinessSpecifications.SERVICE)\n-                    .specification(BusinessSpecifications.POLICY)\n-                    .specification(BusinessSpecifications.DOMAIN_EVENT)\n-                    .specification(BusinessSpecifications.DOMAIN_EVENT_HANDLER)\n-                    .build();\n+.specification(BusinessSpecifications.ENTITY)\n+.specification(BusinessSpecifications.VALUE_OBJECT)\n+.specification(BusinessSpecifications.REPOSITORY)\n+.specification(BusinessSpecifications.DEFAULT_REPOSITORY)\n+.specification(BusinessSpecifications.FACTORY)\n+.specification(BusinessSpecifications.IDENTITY_GENERATOR)\n+.specification(BusinessSpecifications.SERVICE)\n+.specification(BusinessSpecifications.POLICY)\n+.specification(BusinessSpecifications.DOMAIN_EVENT)\n+.specification(BusinessSpecifications.DOMAIN_EVENT_HANDLER)\n+.build();\n         } else {\n             ClasspathScanRequestBuilder classpathScanRequestBuilder = classpathScanRequestBuilder();\n-            repositorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder,\n-                    repositoryInterfaces));\n-            factorySpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, factoryInterfaces));\n-            serviceSpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, serviceInterfaces));\n-            policySpecs.putAll(\n-                    PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, policyInterfaces));\n+            repositorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, repositoryInterfaces));\n+            factorySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, factoryInterfaces));\n+            serviceSpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, serviceInterfaces));\n+            policySpecs.putAll(PluginUtils.classpathRequestForDescendantTypesOf(classpathScanRequestBuilder, policyInterfaces));\n             return classpathScanRequestBuilder.build();\n         }\n     }\n \n-    @SuppressWarnings({\"unchecked\"})\n-    @Override\n+    @SuppressWarnings({\n+        \"unchecked\"}) @Override\n     public InitState initialize(InitContext initContext) {\n         if (round.isFirst()) {\n             Map<Specification, Collection<Class<?>>> classesBySpec = initContext.scannedTypesBySpecification();\n \n             // Scan interfaces\n-            streamClasses(classesBySpec.get(BusinessSpecifications.AGGREGATE_ROOT), Object.class)\n-                    .forEach(aggregateClasses::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.AGGREGATE_ROOT), Object.class).forEach(aggregateClasses::add);\n             LOGGER.debug(\"Aggregate roots => {}\", aggregateClasses);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.ENTITY), Object.class)\n-                    .forEach(entityClasses::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.ENTITY), Object.class).forEach(entityClasses::add);\n             LOGGER.debug(\"Entities => {}\", entityClasses);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.VALUE_OBJECT), Object.class)\n-                    .forEach(valueObjectClasses::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.VALUE_OBJECT), Object.class).forEach(valueObjectClasses::add);\n             LOGGER.debug(\"Value objects => {}\", valueObjectClasses);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.REPOSITORY), Object.class)\n-                    .forEach(repositoryInterfaces::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.REPOSITORY), Object.class).forEach(repositoryInterfaces::add);\n             LOGGER.debug(\"Repositories => {}\", repositoryInterfaces);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.FACTORY), Object.class)\n-                    .forEach(factoryInterfaces::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.FACTORY), Object.class).forEach(factoryInterfaces::add);\n             LOGGER.debug(\"Factories => {}\", factoryInterfaces);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.SERVICE), Object.class)\n-                    .forEach(serviceInterfaces::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.SERVICE), Object.class).forEach(serviceInterfaces::add);\n             LOGGER.debug(\"Services => {}\", serviceInterfaces);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.POLICY), Object.class)\n-                    .forEach(policyInterfaces::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.POLICY), Object.class).forEach(policyInterfaces::add);\n             LOGGER.debug(\"Policies => {}\", policyInterfaces);\n-\n-            streamClasses(classesBySpec.get(BusinessSpecifications.DEFAULT_REPOSITORY), Repository.class)\n-                    .forEach(defaultRepositoryClasses::add);\n+            streamClasses(classesBySpec.get(BusinessSpecifications.DEFAULT_REPOSITORY),\n+                Repository.class).forEach(defaultRepositoryClasses::add);\n             LOGGER.debug(\"Default repositories => {}\", defaultRepositoryClasses);\n-\n             streamClasses(classesBySpec.get(BusinessSpecifications.DOMAIN_EVENT_HANDLER),\n-                    DomainEventHandler.class)\n-                    .forEach(eventHandlerClasses::add);\n+                DomainEventHandler.class).forEach(eventHandlerClasses::add);\n             LOGGER.debug(\"Domain event handlers => {}\", eventHandlerClasses);\n-\n             streamClasses(classesBySpec.get(BusinessSpecifications.IDENTITY_GENERATOR),\n-                    IdentityGenerator.class)\n-                    .forEach(identityGeneratorClasses::add);\n+                IdentityGenerator.class).forEach(identityGeneratorClasses::add);\n             LOGGER.debug(\"Identity generators => {}\", identityGeneratorClasses);\n-\n             return InitState.NON_INITIALIZED;\n         } else {\n             // Then add bindings for explicit implementations\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n-                            false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs,\n-                            true));\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n-                            false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs,\n-                            true));\n-            bindings.putAll(\n-                    associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n-                            false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs,\n-                            true));\n-            bindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs,\n-                    false));\n-            overridingBindings.putAll(\n-                    associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs, true));\n+            bindings.putAll(associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs, false));\n+            overridingBindings.putAll(associateInterfacesToImplementations(initContext, repositoryInterfaces, repositorySpecs, true));\n+            bindings.putAll(associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs, false));\n+            overridingBindings.putAll(associateInterfacesToImplementations(initContext, factoryInterfaces, factorySpecs, true));\n+            bindings.putAll(associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs, false));\n+            overridingBindings.putAll(associateInterfacesToImplementations(initContext, serviceInterfaces, serviceSpecs, true));\n+            bindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs, false));\n+            overridingBindings.putAll(associateInterfacesToImplementations(initContext, policyInterfaces, policySpecs, true));\n \n             // Then add bindings for default repositories\n-            DefaultRepositoryCollector defaultRepositoryCollector = new DefaultRepositoryCollector(\n-                    getApplication(),\n-                    bindings,\n-                    defaultRepositoryClasses\n-            );\n-            bindingStrategies.addAll(defaultRepositoryCollector.collectFromAggregates(\n-                    streamClasses(aggregateClasses, AggregateRoot.class).collect(Collectors.toSet())));\n-            bindingStrategies.addAll(defaultRepositoryCollector.collectFromInterfaces(\n-                    streamClasses(repositoryInterfaces, Repository.class).collect(Collectors.toSet())));\n+            DefaultRepositoryCollector defaultRepositoryCollector = new DefaultRepositoryCollector(getApplication(), bindings, defaultRepositoryClasses);\n+            bindingStrategies.addAll(defaultRepositoryCollector.collectFromAggregates(streamClasses(aggregateClasses, AggregateRoot.class).collect(Collectors.toSet())));\n+            bindingStrategies.addAll(defaultRepositoryCollector.collectFromInterfaces(streamClasses(repositoryInterfaces, Repository.class).collect(Collectors.toSet())));\n \n             // Then add bindings for default factories when no explicit factory has been defined\n             DefaultFactoryCollector defaultFactoryCollector = new DefaultFactoryCollector(bindings);\n             bindingStrategies.addAll(defaultFactoryCollector.collect(aggregateClasses, valueObjectClasses));\n-\n             return InitState.INITIALIZED;\n         }\n     }\n@@ -241,4 +190,4 @@ public class DomainPlugin extends AbstractSeedPlugin implements DomainProvider {\n     public Collection<Class<?>> policies() {\n         return Collections.unmodifiableCollection(policyInterfaces);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/129/DomainPlugin.java\nindex 21276ac481..a0879455b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/129/DomainPlugin.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/129/DomainPlugin.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.domain;\n+\n+package org .seedstack.business.internal.domain;\n \n import static org.seedstack.business.internal.utils.BusinessUtils.streamClasses;\n import static org.seedstack.business.internal.utils.PluginUtils.associateInterfacesToImplementations;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}