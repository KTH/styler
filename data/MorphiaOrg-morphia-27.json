{
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "18",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n        writer.writeStartDocument();\n        if(value.getFrom() != null) {\n            writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n        } else {\n            MongoCollection collection = getMapper().getCollection(value.getFromType());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler/27/LookupCodec.java\nindex e0d53699b8..42a9308057 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler/27/LookupCodec.java\n@@ -15,7 +15,7 @@ public class LookupCodec extends StageCodec<Lookup> {\n     @Override\n     protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n         writer.writeStartDocument();\n-        if(value.getFrom() != null) {\n+        if (value.getFrom() != null) {\n             writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n         } else {\n             MongoCollection collection = getMapper().getCollection(value.getFromType());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/intellij/27/LookupCodec.java\nindex e0d53699b8..42a9308057 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/intellij/27/LookupCodec.java\n@@ -15,7 +15,7 @@ public class LookupCodec extends StageCodec<Lookup> {\n     @Override\n     protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n         writer.writeStartDocument();\n-        if(value.getFrom() != null) {\n+        if (value.getFrom() != null) {\n             writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n         } else {\n             MongoCollection collection = getMapper().getCollection(value.getFromType());\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/naturalize/27/LookupCodec.java\nindex e0d53699b8..a8a524cccb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/naturalize/27/LookupCodec.java\n@@ -15,7 +15,7 @@ public class LookupCodec extends StageCodec<Lookup> {\n     @Override\n     protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n         writer.writeStartDocument();\n-        if(value.getFrom() != null) {\n+        if (value.getFrom() != null) {\n             writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n         } else {\n             MongoCollection collection = getMapper().getCollection(value.getFromType());\n@@ -32,4 +32,4 @@ public class LookupCodec extends StageCodec<Lookup> {\n     public Class<Lookup> getEncoderClass() {\n         return Lookup.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_random/27/LookupCodec.java\nindex e0d53699b8..42a9308057 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_random/27/LookupCodec.java\n@@ -15,7 +15,7 @@ public class LookupCodec extends StageCodec<Lookup> {\n     @Override\n     protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n         writer.writeStartDocument();\n-        if(value.getFrom() != null) {\n+        if (value.getFrom() != null) {\n             writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n         } else {\n             MongoCollection collection = getMapper().getCollection(value.getFromType());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "17",
                    "column": "38",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_three_grams/27/LookupCodec.java\nindex e0d53699b8..ea2bec32a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/errored/1/27/LookupCodec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/MorphiaOrg-morphia/styler_three_grams/27/LookupCodec.java\n@@ -14,8 +14,7 @@ public class LookupCodec extends StageCodec<Lookup> {\n \n     @Override\n     protected void encodeStage(final BsonWriter writer, final Lookup value, final EncoderContext encoderContext) {\n-        writer.writeStartDocument();\n-        if(value.getFrom() != null) {\n+        writer.writeStartDocument(); if(value.getFrom() != null) {\n             writeNamedValue(writer, \"from\", value.getFrom(), encoderContext);\n         } else {\n             MongoCollection collection = getMapper().getCollection(value.getFromType());\n",
            "diff_size": 2
        }
    ]
}