{
    "error_id": "62",
    "information": {
        "errors": [
            {
                "line": "82",
                "column": "118",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "      }\n    } catch (IllegalStateException e) {\n      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n              \" certificate source?\",\n          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n              .getDSSIdAsString(), e);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/62/OCSPCertificateValidator.java\nindex 092d2311ad..fb3fa01fdd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/62/OCSPCertificateValidator.java\n@@ -79,39 +79,39 @@ public class OCSPCertificateValidator implements CertificateValidator {\n         return this.getFromCertificateSource(certificateToken.getIssuerX500Principal());\n       }\n     } catch (IllegalStateException e) {\n-      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n-              \" certificate source?\",\n-          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n-              .getDSSIdAsString(), e);\n-    }\n-    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n-  }\n+      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\"\n+          + \" certificate source?\",\n+   (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n+       .getDSSIdAsString(), e);\n+}\n+throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n+        \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n+}\n \n-  private CertificateToken getFromCertificateSource(X500Principal principal) {\n-    List<CertificateToken> tokens = this.getCertificateTokens(principal);\n-    if (tokens.size() != 1) {\n-      throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n-          tokens.size()));\n-    }\n-    return tokens.get(0);\n+private CertificateToken getFromCertificateSource(X500Principal principal) {\n+  List<CertificateToken> tokens = this.getCertificateTokens(principal);\n+  if (tokens.size() != 1) {\n+    throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n+        tokens.size()));\n   }\n+  return tokens.get(0);\n+}\n \n-  private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n-    List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n-    if (CollectionUtils.isEmpty(tokens)) {\n-      tokens = this.certificateSource.get(principal);\n-    }\n-    return tokens;\n+private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n+  List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n+  if (CollectionUtils.isEmpty(tokens)) {\n+    tokens = this.certificateSource.get(principal);\n   }\n+  return tokens;\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public CertificateSource getCertificateSource() {\n-    return certificateSource;\n-  }\n+@Override\n+public CertificateSource getCertificateSource() {\n+  return certificateSource;\n+}\n \n }\n",
            "diff_size": 30
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "82",
                    "column": "118",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/62/OCSPCertificateValidator.java\nindex 092d2311ad..d44a02ca86 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/62/OCSPCertificateValidator.java\n@@ -85,7 +85,7 @@ public class OCSPCertificateValidator implements CertificateValidator {\n               .getDSSIdAsString(), e);\n     }\n     throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n+        \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n   }\n \n   private CertificateToken getFromCertificateSource(X500Principal principal) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 262).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/62/OCSPCertificateValidator.java\nindex 092d2311ad..d6745e8ab3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/62/OCSPCertificateValidator.java\n@@ -45,8 +45,7 @@ public class OCSPCertificateValidator implements CertificateValidator {\n    * @param certificateSource the source of certificates\n    * @param ocspSource        the source of OCSP\n    */\n-  public OCSPCertificateValidator(Configuration configuration, CertificateSource certificateSource, OCSPSource\n-      ocspSource) {\n+  public OCSPCertificateValidator(Configuration configuration, CertificateSource certificateSource, OCSPSource ocspSource) {\n     this.configuration = configuration;\n     this.certificateSource = certificateSource;\n     this.ocspSource = ocspSource;\n@@ -79,13 +78,9 @@ public class OCSPCertificateValidator implements CertificateValidator {\n         return this.getFromCertificateSource(certificateToken.getIssuerX500Principal());\n       }\n     } catch (IllegalStateException e) {\n-      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n-              \" certificate source?\",\n-          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n-              .getDSSIdAsString(), e);\n-    }\n-    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n+      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" + \" certificate source?\", (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken.getDSSIdAsString(), e);\n+  }\n+    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED, \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n   }\n \n   private CertificateToken getFromCertificateSource(X500Principal principal) {\n@@ -114,4 +109,4 @@ public class OCSPCertificateValidator implements CertificateValidator {\n     return certificateSource;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 262).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/62/OCSPCertificateValidator.java\nindex 092d2311ad..6de77cac1c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/62/OCSPCertificateValidator.java\n@@ -22,7 +22,6 @@ import org.digidoc4j.exceptions.CertificateValidationException.CertificateValida\n import org.digidoc4j.exceptions.NetworkException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import javax.security.auth.x500.X500Principal;\n import java.security.cert.CertificateEncodingException;\n import java.security.cert.X509Certificate;\n@@ -33,85 +32,84 @@ import java.util.List;\n  * <p>\n  * Created by Janar Rahumeel (CGI Estonia)\n  */\n+\n+\n public class OCSPCertificateValidator implements CertificateValidator {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(OCSPCertificateValidator.class);\n-  private final Configuration configuration;\n-  private final CertificateSource certificateSource;\n-  private final OCSPSource ocspSource;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OCSPCertificateValidator.class);\n+    private final Configuration configuration;\n+    private final CertificateSource certificateSource;\n+    private final OCSPSource ocspSource;\n \n   /**\n    * @param configuration     configuration context\n    * @param certificateSource the source of certificates\n    * @param ocspSource        the source of OCSP\n    */\n-  public OCSPCertificateValidator(Configuration configuration, CertificateSource certificateSource, OCSPSource\n-      ocspSource) {\n+\n+\n+    public OCSPCertificateValidator(Configuration configuration, CertificateSource certificateSource, OCSPSource ocspSource) {\n     this.configuration = configuration;\n     this.certificateSource = certificateSource;\n     this.ocspSource = ocspSource;\n-  }\n+    }\n \n-  @Override\n-  public void validate(X509Certificate subjectCertificate) throws CertificateValidationException {\n+    @Override\n+    public void validate(X509Certificate subjectCertificate) throws CertificateValidationException {\n     try {\n-      if (subjectCertificate == null) {\n+        if (subjectCertificate == null) {\n         throw new IllegalArgumentException(\"Subject certificate is not provided\");\n-      }\n-      CertificateToken issuerCertificateToken = this.getIssuerCertificateToken(subjectCertificate);\n-      this.ocspSource.getRevocationToken(new CertificateToken(subjectCertificate), issuerCertificateToken);\n+        }\n+        CertificateToken issuerCertificateToken = this.getIssuerCertificateToken(subjectCertificate);\n+        this.ocspSource.getRevocationToken(new CertificateToken(subjectCertificate), issuerCertificateToken);\n     } catch (CertificateValidationException | NetworkException e) {\n       throw e;\n     } catch (Exception e) {\n       throw CertificateValidationException.of(CertificateValidationStatus.TECHNICAL, \"OCSP validation failed\", e);\n     }\n-  }\n+    }\n \n   /*\n    * RESTRICTED METHODS\n    */\n \n-  private CertificateToken getIssuerCertificateToken(X509Certificate certificate) throws CertificateEncodingException {\n+    private CertificateToken getIssuerCertificateToken(X509Certificate certificate) throws CertificateEncodingException {\n     CertificateToken certificateToken = null;\n     try {\n-      certificateToken = DSSUtils.loadCertificate(certificate.getEncoded());\n-      if (certificateToken.getIssuerX500Principal() != null) {\n+        certificateToken = DSSUtils.loadCertificate(certificate.getEncoded());\n+        if (certificateToken.getIssuerX500Principal() != null) {\n         return this.getFromCertificateSource(certificateToken.getIssuerX500Principal());\n-      }\n+        }\n     } catch (IllegalStateException e) {\n-      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n-              \" certificate source?\",\n-          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n-              .getDSSIdAsString(), e);\n+      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" + \" certificate source?\", (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken.getDSSIdAsString(), e);\n+    }\n+    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED, \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n     }\n-    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n-  }\n \n-  private CertificateToken getFromCertificateSource(X500Principal principal) {\n+    private CertificateToken getFromCertificateSource(X500Principal principal) {\n     List<CertificateToken> tokens = this.getCertificateTokens(principal);\n     if (tokens.size() != 1) {\n-      throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n-          tokens.size()));\n+        throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n+                                            tokens.size()));\n     }\n     return tokens.get(0);\n-  }\n+    }\n \n-  private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n+    private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n     List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n     if (CollectionUtils.isEmpty(tokens)) {\n-      tokens = this.certificateSource.get(principal);\n+        tokens = this.certificateSource.get(principal);\n     }\n     return tokens;\n-  }\n+    }\n \n   /*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public CertificateSource getCertificateSource() {\n+    @Override\n+    public CertificateSource getCertificateSource() {\n     return certificateSource;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/62/OCSPCertificateValidator.java\nindex 092d2311ad..fb3fa01fdd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/62/OCSPCertificateValidator.java\n@@ -79,39 +79,39 @@ public class OCSPCertificateValidator implements CertificateValidator {\n         return this.getFromCertificateSource(certificateToken.getIssuerX500Principal());\n       }\n     } catch (IllegalStateException e) {\n-      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n-              \" certificate source?\",\n-          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n-              .getDSSIdAsString(), e);\n-    }\n-    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n-  }\n+      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\"\n+          + \" certificate source?\",\n+   (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n+       .getDSSIdAsString(), e);\n+}\n+throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n+        \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n+}\n \n-  private CertificateToken getFromCertificateSource(X500Principal principal) {\n-    List<CertificateToken> tokens = this.getCertificateTokens(principal);\n-    if (tokens.size() != 1) {\n-      throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n-          tokens.size()));\n-    }\n-    return tokens.get(0);\n+private CertificateToken getFromCertificateSource(X500Principal principal) {\n+  List<CertificateToken> tokens = this.getCertificateTokens(principal);\n+  if (tokens.size() != 1) {\n+    throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n+        tokens.size()));\n   }\n+  return tokens.get(0);\n+}\n \n-  private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n-    List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n-    if (CollectionUtils.isEmpty(tokens)) {\n-      tokens = this.certificateSource.get(principal);\n-    }\n-    return tokens;\n+private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n+  List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n+  if (CollectionUtils.isEmpty(tokens)) {\n+    tokens = this.certificateSource.get(principal);\n   }\n+  return tokens;\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public CertificateSource getCertificateSource() {\n-    return certificateSource;\n-  }\n+@Override\n+public CertificateSource getCertificateSource() {\n+  return certificateSource;\n+}\n \n }\n",
            "diff_size": 30
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "118",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/62/OCSPCertificateValidator.java\nindex 092d2311ad..0e98cb5d69 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/62/OCSPCertificateValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/62/OCSPCertificateValidator.java\n@@ -79,39 +79,38 @@ public class OCSPCertificateValidator implements CertificateValidator {\n         return this.getFromCertificateSource(certificateToken.getIssuerX500Principal());\n       }\n     } catch (IllegalStateException e) {\n-      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\n-              \" certificate source?\",\n-          (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n-              .getDSSIdAsString(), e);\n-    }\n-    throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n-            \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n-  }\n+      LOGGER.warn(\"Certificate with DSS ID <{}> is untrusted. Not all the intermediate certificates added into OCSP\" +\" certificate source?\",\n+  (certificateToken == null) ? certificate.getSubjectX500Principal().getName() : certificateToken\n+      .getDSSIdAsString(), e);\n+}\n+throw CertificateValidationException.of(CertificateValidationStatus.UNTRUSTED,\n+        \"Failed to parse issuer certificate token. Not all intermediate certificates added into OCSP.\");\n+}\n \n-  private CertificateToken getFromCertificateSource(X500Principal principal) {\n-    List<CertificateToken> tokens = this.getCertificateTokens(principal);\n-    if (tokens.size() != 1) {\n-      throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n-          tokens.size()));\n-    }\n-    return tokens.get(0);\n+private CertificateToken getFromCertificateSource(X500Principal principal) {\n+  List<CertificateToken> tokens = this.getCertificateTokens(principal);\n+  if (tokens.size() != 1) {\n+    throw new IllegalStateException(String.format(\"<%s> matching certificate tokens found from certificate source\",\n+        tokens.size()));\n   }\n+  return tokens.get(0);\n+}\n \n-  private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n-    List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n-    if (CollectionUtils.isEmpty(tokens)) {\n-      tokens = this.certificateSource.get(principal);\n-    }\n-    return tokens;\n+private List<CertificateToken> getCertificateTokens(X500Principal principal) {\n+  List<CertificateToken> tokens = this.configuration.getTSL().get(principal);\n+  if (CollectionUtils.isEmpty(tokens)) {\n+    tokens = this.certificateSource.get(principal);\n   }\n+  return tokens;\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public CertificateSource getCertificateSource() {\n-    return certificateSource;\n-  }\n+@Override\n+public CertificateSource getCertificateSource() {\n+  return certificateSource;\n+}\n \n }\n",
            "diff_size": 30
        }
    ]
}