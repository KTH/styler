{
    "error_id": "369",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "78",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  public void setInvocationMonitorType(InvocationType invocationType) {\n    if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n    }\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/369/InvocationMonitor.java\nindex e11ee89c61..01196611a1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/369/InvocationMonitor.java\n@@ -52,73 +52,73 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n-    }\n-  }\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+ }\n+}\n \n-  public String getOperationName() {\n-    return operationName;\n-  }\n+public String getOperationName() {\n+  return operationName;\n+}\n \n-  public TimerMonitor getConsumerLatency() {\n-    return consumerLatency;\n-  }\n+public TimerMonitor getConsumerLatency() {\n+  return consumerLatency;\n+}\n \n-  public TimerMonitor getLifeTimeInQueue() {\n-    return lifeTimeInQueue;\n-  }\n+public TimerMonitor getLifeTimeInQueue() {\n+  return lifeTimeInQueue;\n+}\n \n-  public TimerMonitor getExecutionTime() {\n-    return executionTime;\n-  }\n+public TimerMonitor getExecutionTime() {\n+  return executionTime;\n+}\n \n-  public TimerMonitor getProducerLatency() {\n-    return producerLatency;\n-  }\n+public TimerMonitor getProducerLatency() {\n+  return producerLatency;\n+}\n \n-  public CallMonitor getConsumerCall() {\n-    return consumerCall;\n-  }\n+public CallMonitor getConsumerCall() {\n+  return consumerCall;\n+}\n \n-  public CallMonitor getProducerCall() {\n-    return producerCall;\n-  }\n+public CallMonitor getProducerCall() {\n+  return producerCall;\n+}\n \n-  public BasicCounter getWaitInQueue() {\n-    return waitInQueue;\n-  }\n+public BasicCounter getWaitInQueue() {\n+  return waitInQueue;\n+}\n \n-  public InvocationMonitor(String operationName) {\n-    this.operationName = operationName;\n-    this.consumerPrefix = String.format(MetricsConst.CONSUMER_PREFIX_TEMPLATE, operationName);\n-    this.producerPrefix = String.format(MetricsConst.PRODUCER_PREFIX_TEMPLATE, operationName);\n-    this.waitInQueue = new BasicCounter(MonitorConfig.builder(producerPrefix + \".waitInQueue.count\").build());\n+public InvocationMonitor(String operationName) {\n+  this.operationName = operationName;\n+  this.consumerPrefix = String.format(MetricsConst.CONSUMER_PREFIX_TEMPLATE, operationName);\n+  this.producerPrefix = String.format(MetricsConst.PRODUCER_PREFIX_TEMPLATE, operationName);\n+  this.waitInQueue = new BasicCounter(MonitorConfig.builder(producerPrefix + \".waitInQueue.count\").build());\n \n-    this.consumerLatency = new TimerMonitor(consumerPrefix + \".consumerLatency\");\n-    this.consumerCall = new CallMonitor(consumerPrefix + \".consumerCall\");\n+  this.consumerLatency = new TimerMonitor(consumerPrefix + \".consumerLatency\");\n+  this.consumerCall = new CallMonitor(consumerPrefix + \".consumerCall\");\n \n-    this.lifeTimeInQueue = new TimerMonitor(producerPrefix + \".lifeTimeInQueue\");\n-    this.executionTime = new TimerMonitor(producerPrefix + \".executionTime\");\n-    this.producerLatency = new TimerMonitor(producerPrefix + \".producerLatency\");\n-    this.producerCall = new CallMonitor(producerPrefix + \".producerCall\");\n-  }\n+  this.lifeTimeInQueue = new TimerMonitor(producerPrefix + \".lifeTimeInQueue\");\n+  this.executionTime = new TimerMonitor(producerPrefix + \".executionTime\");\n+  this.producerLatency = new TimerMonitor(producerPrefix + \".producerLatency\");\n+  this.producerCall = new CallMonitor(producerPrefix + \".producerCall\");\n+}\n \n-  public InvocationMetric toInvocationMetric(int pollerIndex) {\n-    InvocationMetric metric;\n-    long queueCount = waitInQueue.getValue(pollerIndex).longValue();\n-    if (invocationMonitorType.equals(InvocationMonitorType.PRODUCER)) {\n-      metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount,\n-          lifeTimeInQueue.toTimerMetric(pollerIndex),\n-          executionTime.toTimerMetric(pollerIndex),\n-          producerLatency.toTimerMetric(pollerIndex),\n-          producerCall.toCallMetric(pollerIndex));\n-    } else if (invocationMonitorType.equals(InvocationMonitorType.CONSUMER)) {\n-      metric = new ConsumerInvocationMetric(operationName, consumerPrefix, queueCount,\n-          consumerLatency.toTimerMetric(pollerIndex), consumerCall.toCallMetric(pollerIndex));\n-    } else {\n-      metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n-    }\n-    return metric;\n+public InvocationMetric toInvocationMetric(int pollerIndex) {\n+  InvocationMetric metric;\n+  long queueCount = waitInQueue.getValue(pollerIndex).longValue();\n+  if (invocationMonitorType.equals(InvocationMonitorType.PRODUCER)) {\n+    metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount,\n+        lifeTimeInQueue.toTimerMetric(pollerIndex),\n+        executionTime.toTimerMetric(pollerIndex),\n+        producerLatency.toTimerMetric(pollerIndex),\n+        producerCall.toCallMetric(pollerIndex));\n+  } else if (invocationMonitorType.equals(InvocationMonitorType.CONSUMER)) {\n+    metric = new ConsumerInvocationMetric(operationName, consumerPrefix, queueCount,\n+        consumerLatency.toTimerMetric(pollerIndex), consumerCall.toCallMetric(pollerIndex));\n+  } else {\n+    metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n   }\n+  return metric;\n+}\n }\n",
            "diff_size": 58
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "55",
                    "column": "78",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/369/InvocationMonitor.java\nindex e11ee89c61..bceaa8bd55 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/369/InvocationMonitor.java\n@@ -52,8 +52,7 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n@@ -121,4 +120,4 @@ public class InvocationMonitor {\n     }\n     return metric;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/369/InvocationMonitor.java\nindex e11ee89c61..01196611a1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/369/InvocationMonitor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/369/InvocationMonitor.java\n@@ -52,73 +52,73 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n-    }\n-  }\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+ }\n+}\n \n-  public String getOperationName() {\n-    return operationName;\n-  }\n+public String getOperationName() {\n+  return operationName;\n+}\n \n-  public TimerMonitor getConsumerLatency() {\n-    return consumerLatency;\n-  }\n+public TimerMonitor getConsumerLatency() {\n+  return consumerLatency;\n+}\n \n-  public TimerMonitor getLifeTimeInQueue() {\n-    return lifeTimeInQueue;\n-  }\n+public TimerMonitor getLifeTimeInQueue() {\n+  return lifeTimeInQueue;\n+}\n \n-  public TimerMonitor getExecutionTime() {\n-    return executionTime;\n-  }\n+public TimerMonitor getExecutionTime() {\n+  return executionTime;\n+}\n \n-  public TimerMonitor getProducerLatency() {\n-    return producerLatency;\n-  }\n+public TimerMonitor getProducerLatency() {\n+  return producerLatency;\n+}\n \n-  public CallMonitor getConsumerCall() {\n-    return consumerCall;\n-  }\n+public CallMonitor getConsumerCall() {\n+  return consumerCall;\n+}\n \n-  public CallMonitor getProducerCall() {\n-    return producerCall;\n-  }\n+public CallMonitor getProducerCall() {\n+  return producerCall;\n+}\n \n-  public BasicCounter getWaitInQueue() {\n-    return waitInQueue;\n-  }\n+public BasicCounter getWaitInQueue() {\n+  return waitInQueue;\n+}\n \n-  public InvocationMonitor(String operationName) {\n-    this.operationName = operationName;\n-    this.consumerPrefix = String.format(MetricsConst.CONSUMER_PREFIX_TEMPLATE, operationName);\n-    this.producerPrefix = String.format(MetricsConst.PRODUCER_PREFIX_TEMPLATE, operationName);\n-    this.waitInQueue = new BasicCounter(MonitorConfig.builder(producerPrefix + \".waitInQueue.count\").build());\n+public InvocationMonitor(String operationName) {\n+  this.operationName = operationName;\n+  this.consumerPrefix = String.format(MetricsConst.CONSUMER_PREFIX_TEMPLATE, operationName);\n+  this.producerPrefix = String.format(MetricsConst.PRODUCER_PREFIX_TEMPLATE, operationName);\n+  this.waitInQueue = new BasicCounter(MonitorConfig.builder(producerPrefix + \".waitInQueue.count\").build());\n \n-    this.consumerLatency = new TimerMonitor(consumerPrefix + \".consumerLatency\");\n-    this.consumerCall = new CallMonitor(consumerPrefix + \".consumerCall\");\n+  this.consumerLatency = new TimerMonitor(consumerPrefix + \".consumerLatency\");\n+  this.consumerCall = new CallMonitor(consumerPrefix + \".consumerCall\");\n \n-    this.lifeTimeInQueue = new TimerMonitor(producerPrefix + \".lifeTimeInQueue\");\n-    this.executionTime = new TimerMonitor(producerPrefix + \".executionTime\");\n-    this.producerLatency = new TimerMonitor(producerPrefix + \".producerLatency\");\n-    this.producerCall = new CallMonitor(producerPrefix + \".producerCall\");\n-  }\n+  this.lifeTimeInQueue = new TimerMonitor(producerPrefix + \".lifeTimeInQueue\");\n+  this.executionTime = new TimerMonitor(producerPrefix + \".executionTime\");\n+  this.producerLatency = new TimerMonitor(producerPrefix + \".producerLatency\");\n+  this.producerCall = new CallMonitor(producerPrefix + \".producerCall\");\n+}\n \n-  public InvocationMetric toInvocationMetric(int pollerIndex) {\n-    InvocationMetric metric;\n-    long queueCount = waitInQueue.getValue(pollerIndex).longValue();\n-    if (invocationMonitorType.equals(InvocationMonitorType.PRODUCER)) {\n-      metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount,\n-          lifeTimeInQueue.toTimerMetric(pollerIndex),\n-          executionTime.toTimerMetric(pollerIndex),\n-          producerLatency.toTimerMetric(pollerIndex),\n-          producerCall.toCallMetric(pollerIndex));\n-    } else if (invocationMonitorType.equals(InvocationMonitorType.CONSUMER)) {\n-      metric = new ConsumerInvocationMetric(operationName, consumerPrefix, queueCount,\n-          consumerLatency.toTimerMetric(pollerIndex), consumerCall.toCallMetric(pollerIndex));\n-    } else {\n-      metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n-    }\n-    return metric;\n+public InvocationMetric toInvocationMetric(int pollerIndex) {\n+  InvocationMetric metric;\n+  long queueCount = waitInQueue.getValue(pollerIndex).longValue();\n+  if (invocationMonitorType.equals(InvocationMonitorType.PRODUCER)) {\n+    metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount,\n+        lifeTimeInQueue.toTimerMetric(pollerIndex),\n+        executionTime.toTimerMetric(pollerIndex),\n+        producerLatency.toTimerMetric(pollerIndex),\n+        producerCall.toCallMetric(pollerIndex));\n+  } else if (invocationMonitorType.equals(InvocationMonitorType.CONSUMER)) {\n+    metric = new ConsumerInvocationMetric(operationName, consumerPrefix, queueCount,\n+        consumerLatency.toTimerMetric(pollerIndex), consumerCall.toCallMetric(pollerIndex));\n+  } else {\n+    metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n   }\n+  return metric;\n+}\n }\n",
            "diff_size": 58
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "column": "78",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}