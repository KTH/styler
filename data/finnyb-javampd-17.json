{
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "69",
                "severity": "error",
                "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        } catch (InterruptedException e) {\n            //don't care\n            e.printStackTrace();\n        }\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/17/MPDStandAloneMonitorIT.java\nindex 30692d3c44..102fb4472c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/17/MPDStandAloneMonitorIT.java\n@@ -66,7 +66,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n+        e .printStackTrace();\n         }\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/17/MPDStandAloneMonitorIT.java\nindex 30692d3c44..21f8e5cb5b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/17/MPDStandAloneMonitorIT.java\n@@ -251,9 +251,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n                 }\n             }\n         });\n-\n-\n-        success = false;\n+success = false;\n         loadSeveralSongs();\n         player.play();\n         delay();\n@@ -345,4 +343,4 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         playlist.addSong(MPDSongs.getSongs().get(8));\n         playlist.addSong(MPDSongs.getSongs().get(9));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/17/MPDStandAloneMonitorIT.java\nindex 30692d3c44..131108bb9c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/17/MPDStandAloneMonitorIT.java\n@@ -16,7 +16,6 @@ import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Calendar;\n@@ -29,8 +28,8 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     /**\n      * Delay for various monitor actions\n      */\n-    private static final int MONITOR_DELAY = 1500;\n \n+    private static final int MONITOR_DELAY = 1500;\n     private Player player;\n     private Playlist playlist;\n     private Admin admin;\n@@ -42,10 +41,11 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         this.playlist = getMpd().getPlaylist();\n         this.admin = getMpd().getAdmin();\n         this.monitor = getMpd().getMonitor();\n-\n         playlist.clearPlaylist();\n         player.stop();\n+\n         MPDOutput output = new ArrayList<>(admin.getOutputs()).get(0);\n+\n         admin.enableOutput(output);\n         monitor.start();\n         delay();\n@@ -75,98 +75,83 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testAddSong() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_ADDED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n+                                              @Override\n+                                              public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                                                  switch (event.getEvent()) {\n+                                                      case SONG_ADDED:\n+                                                          success = true;\n+                                                          break;\n+                                                  }\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlaylistChanged() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case PLAYLIST_CHANGED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n+                                              @Override\n+                                              public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                                                  switch (event.getEvent()) {\n+                                                      case PLAYLIST_CHANGED:\n+                                                          success = true;\n+                                                          break;\n+                                                  }\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testRemoveSong() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_DELETED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n+                                              @Override\n+                                              public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                                                  switch (event.getEvent()) {\n+                                                      case SONG_DELETED:\n+                                                          success = true;\n+                                                          break;\n+                                                  }\n+                                              }\n+                                          });\n \n         MPDSong song = MPDSongs.getSongs().get(0);\n \n         playlist.addSong(song);\n         delay(2);\n         playlist.removeSong(playlist.getSongList().get(0));\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testSongChanged() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_CHANGED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n+                                              @Override\n+                                              public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                                                  switch (event.getEvent()) {\n+                                                      case SONG_CHANGED:\n+                                                          success = true;\n+                                                          break;\n+                                                  }\n+                                              }\n+                                          });\n         playlist.addSong(MPDSongs.getSongs().get(0));\n         playlist.addSong(MPDSongs.getSongs().get(1));\n-\n         player.play();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n@@ -184,105 +169,86 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testPlayerStarted() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_STARTED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n+                                            @Override\n+                                            public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                                                switch (event.getStatus()) {\n+                                                    case PLAYER_STARTED:\n+                                                        success = true;\n+                                                        break;\n+                                                }\n+                                            }\n+                                        });\n         player.stop();\n         delay();\n-\n         success = false;\n         loadSeveralSongs();\n         player.play();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlayerStopped() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_STOPPED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n+                                            @Override\n+                                            public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                                                switch (event.getStatus()) {\n+                                                    case PLAYER_STOPPED:\n+                                                        success = true;\n+                                                        break;\n+                                                }\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         delay(5);\n         player.stop();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testPlayerPaused() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_PAUSED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n-\n+                                            @Override\n+                                            public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                                                switch (event.getStatus()) {\n+                                                    case PLAYER_PAUSED:\n+                                                        success = true;\n+                                                        break;\n+                                                }\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         delay();\n         player.pause();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testVolumeChanged() throws MPDException, IOException {\n         success = false;\n-\n         player.setVolume(0);\n-\n         delay(2);\n-\n         monitor.addVolumeChangeListener(new VolumeChangeListener() {\n \n-            @Override\n-            public void volumeChanged(VolumeChangeEvent event) {\n-                success = true;\n-            }\n-        });\n-\n+                                            @Override\n+                                            public void volumeChanged(VolumeChangeEvent event) {\n+                                                success = true;\n+                                            }\n+                                        });\n         loadSeveralSongs();\n         player.play();\n-\n         player.setVolume(5);\n         waitForSuccess();\n         Assert.assertTrue(success);\n@@ -291,43 +257,43 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n     @Test\n     public void testPlayerUnPaused() throws MPDException, IOException {\n         success = false;\n+\n         Date start = Calendar.getInstance().getTime();\n+\n         monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_UNPAUSED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n+                                            @Override\n+                                            public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                                                switch (event.getStatus()) {\n+                                                    case PLAYER_UNPAUSED:\n+                                                        success = true;\n+                                                        break;\n+                                                }\n+                                            }\n+                                        });\n         success = false;\n         loadSeveralSongs();\n         player.play();\n         player.pause();\n         delay();\n         player.pause();\n-\n         waitForSuccess();\n-\n         Assert.assertTrue(success);\n     }\n \n     @Test\n     public void testOutputChanged() throws MPDException, IOException {\n         success = false;\n-\n         monitor.addOutputChangeListener(new OutputChangeListener() {\n \n-            @Override\n-            public void outputChanged(OutputChangeEvent event) {\n-                success = true;\n-            }\n-        });\n+                                            @Override\n+                                            public void outputChanged(OutputChangeEvent event) {\n+                                                success = true;\n+                                            }\n+                                        });\n \n         MPDOutput output = new ArrayList<MPDOutput>(admin.getOutputs()).get(0);\n+\n         admin.disableOutput(output);\n         waitForSuccess();\n         Assert.assertTrue(success);\n@@ -345,4 +311,4 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n         playlist.addSong(MPDSongs.getSongs().get(8));\n         playlist.addSong(MPDSongs.getSongs().get(9));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 129
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "column": "34",
                    "severity": "error",
                    "message": "'}' at column 34 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/17/MPDStandAloneMonitorIT.java\nindex 30692d3c44..3a3c0b71db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/17/MPDStandAloneMonitorIT.java\n@@ -66,283 +66,282 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n-        }\n-    }\n \n-    private boolean success;\n+            e\n+            .printStackTrace( ) ;}}private boolean success;\n \n-    @Test\n-    public void testAddSong() throws MPDException, IOException {\n-        success = false;\n+            @Test\n+            public void testAddSong() throws MPDException, IOException {\n+                success = false;\n \n-        monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n+                monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_ADDED:\n-                        success = true;\n-                        break;\n-                }\n-            }\n-        });\n-\n-        playlist.addSong(MPDSongs.getSongs().get(0));\n+                    @Override\n+                    public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                        switch (event.getEvent()) {\n+                            case SONG_ADDED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-        waitForSuccess();\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n \n-        Assert.assertTrue(success);\n-    }\n+                waitForSuccess();\n \n-    @Test\n-    public void testPlaylistChanged() throws MPDException, IOException {\n-        success = false;\n-\n-        monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n-\n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case PLAYLIST_CHANGED:\n-                        success = true;\n-                        break;\n-                }\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        playlist.addSong(MPDSongs.getSongs().get(0));\n+            @Test\n+            public void testPlaylistChanged() throws MPDException, IOException {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-        Assert.assertTrue(success);\n-    }\n+                    @Override\n+                    public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                        switch (event.getEvent()) {\n+                            case PLAYLIST_CHANGED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-    @Test\n-    public void testRemoveSong() throws MPDException, IOException {\n-        success = false;\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n \n-        monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n+                waitForSuccess();\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_DELETED:\n-                        success = true;\n-                        break;\n-                }\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        MPDSong song = MPDSongs.getSongs().get(0);\n+            @Test\n+            public void testRemoveSong() throws MPDException, IOException {\n+                success = false;\n \n-        playlist.addSong(song);\n-        delay(2);\n-        playlist.removeSong(playlist.getSongList().get(0));\n+                monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-        waitForSuccess();\n+                    @Override\n+                    public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                        switch (event.getEvent()) {\n+                            case SONG_DELETED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-        Assert.assertTrue(success);\n-    }\n+                MPDSong song = MPDSongs.getSongs().get(0);\n \n-    @Test\n-    public void testSongChanged() throws MPDException, IOException {\n-        success = false;\n+                playlist.addSong(song);\n+                delay(2);\n+                playlist.removeSong(playlist.getSongList().get(0));\n \n-        monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n+                waitForSuccess();\n \n-            @Override\n-            public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n-                switch (event.getEvent()) {\n-                    case SONG_CHANGED:\n-                        success = true;\n-                        break;\n-                }\n+                Assert.assertTrue(success);\n             }\n-        });\n-        playlist.addSong(MPDSongs.getSongs().get(0));\n-        playlist.addSong(MPDSongs.getSongs().get(1));\n \n-        player.play();\n+            @Test\n+            public void testSongChanged() throws MPDException, IOException {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlaylistChangeListener(new PlaylistBasicChangeListener() {\n \n-        Assert.assertTrue(success);\n-    }\n+                    @Override\n+                    public void playlistBasicChange(PlaylistBasicChangeEvent event) {\n+                        switch (event.getEvent()) {\n+                            case SONG_CHANGED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n+                playlist.addSong(MPDSongs.getSongs().get(1));\n \n-    private void waitForSuccess() {\n-        int count = 0;\n-        while (!success && count++ < 100) {\n-            try {\n-                Thread.sleep(100);\n-            } catch (InterruptedException ex) {\n-                Logger.getLogger(MPDStandAloneMonitorIT.class.getName()).log(Level.SEVERE, null, ex);\n-            }\n-        }\n-    }\n+                player.play();\n \n-    @Test\n-    public void testPlayerStarted() throws MPDException, IOException {\n-        success = false;\n+                waitForSuccess();\n \n-        monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n+                Assert.assertTrue(success);\n+            }\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_STARTED:\n-                        success = true;\n-                        break;\n+            private void waitForSuccess() {\n+                int count = 0;\n+                while (!success && count++ < 100) {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException ex) {\n+                        Logger.getLogger(MPDStandAloneMonitorIT.class.getName()).log(Level.SEVERE, null, ex);\n+                    }\n                 }\n             }\n-        });\n \n-        player.stop();\n-        delay();\n+            @Test\n+            public void testPlayerStarted() throws MPDException, IOException {\n+                success = false;\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n+                monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-        waitForSuccess();\n+                    @Override\n+                    public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                        switch (event.getStatus()) {\n+                            case PLAYER_STARTED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-        Assert.assertTrue(success);\n-    }\n+                player.stop();\n+                delay();\n \n-    @Test\n-    public void testPlayerStopped() throws MPDException, IOException {\n-        success = false;\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n \n-        monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n+                waitForSuccess();\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_STOPPED:\n-                        success = true;\n-                        break;\n-                }\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        delay(5);\n-        player.stop();\n+            @Test\n+            public void testPlayerStopped() throws MPDException, IOException {\n+                success = false;\n \n-        waitForSuccess();\n+                monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-        Assert.assertTrue(success);\n-    }\n+                    @Override\n+                    public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                        switch (event.getStatus()) {\n+                            case PLAYER_STOPPED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-    @Test\n-    public void testPlayerPaused() throws MPDException, IOException {\n-        success = false;\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                delay(5);\n+                player.stop();\n \n-        monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n+                waitForSuccess();\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_PAUSED:\n-                        success = true;\n-                        break;\n-                }\n+                Assert.assertTrue(success);\n             }\n-        });\n \n+            @Test\n+            public void testPlayerPaused() throws MPDException, IOException {\n+                success = false;\n \n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        delay();\n-        player.pause();\n-\n-        waitForSuccess();\n-\n-        Assert.assertTrue(success);\n-    }\n+                monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n \n-    @Test\n-    public void testVolumeChanged() throws MPDException, IOException {\n-        success = false;\n+                    @Override\n+                    public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                        switch (event.getStatus()) {\n+                            case PLAYER_PAUSED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n \n-        player.setVolume(0);\n \n-        delay(2);\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                delay();\n+                player.pause();\n \n-        monitor.addVolumeChangeListener(new VolumeChangeListener() {\n+                waitForSuccess();\n \n-            @Override\n-            public void volumeChanged(VolumeChangeEvent event) {\n-                success = true;\n+                Assert.assertTrue(success);\n             }\n-        });\n \n-        loadSeveralSongs();\n-        player.play();\n+            @Test\n+            public void testVolumeChanged() throws MPDException, IOException {\n+                success = false;\n \n-        player.setVolume(5);\n-        waitForSuccess();\n-        Assert.assertTrue(success);\n-    }\n+                player.setVolume(0);\n+\n+                delay(2);\n \n-    @Test\n-    public void testPlayerUnPaused() throws MPDException, IOException {\n-        success = false;\n-        Date start = Calendar.getInstance().getTime();\n-        monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n+                monitor.addVolumeChangeListener(new VolumeChangeListener() {\n \n-            @Override\n-            public void playerBasicChange(PlayerBasicChangeEvent event) {\n-                switch (event.getStatus()) {\n-                    case PLAYER_UNPAUSED:\n+                    @Override\n+                    public void volumeChanged(VolumeChangeEvent event) {\n                         success = true;\n-                        break;\n-                }\n+                    }\n+                });\n+\n+                loadSeveralSongs();\n+                player.play();\n+\n+                player.setVolume(5);\n+                waitForSuccess();\n+                Assert.assertTrue(success);\n             }\n-        });\n-        success = false;\n-        loadSeveralSongs();\n-        player.play();\n-        player.pause();\n-        delay();\n-        player.pause();\n \n-        waitForSuccess();\n+            @Test\n+            public void testPlayerUnPaused() throws MPDException, IOException {\n+                success = false;\n+                Date start = Calendar.getInstance().getTime();\n+                monitor.addPlayerChangeListener(new PlayerBasicChangeListener() {\n+\n+                    @Override\n+                    public void playerBasicChange(PlayerBasicChangeEvent event) {\n+                        switch (event.getStatus()) {\n+                            case PLAYER_UNPAUSED:\n+                                success = true;\n+                                break;\n+                        }\n+                    }\n+                });\n+                success = false;\n+                loadSeveralSongs();\n+                player.play();\n+                player.pause();\n+                delay();\n+                player.pause();\n+\n+                waitForSuccess();\n+\n+                Assert.assertTrue(success);\n+            }\n \n-        Assert.assertTrue(success);\n-    }\n+            @Test\n+            public void testOutputChanged() throws MPDException, IOException {\n+                success = false;\n \n-    @Test\n-    public void testOutputChanged() throws MPDException, IOException {\n-        success = false;\n+                monitor.addOutputChangeListener(new OutputChangeListener() {\n \n-        monitor.addOutputChangeListener(new OutputChangeListener() {\n+                    @Override\n+                    public void outputChanged(OutputChangeEvent event) {\n+                        success = true;\n+                    }\n+                });\n \n-            @Override\n-            public void outputChanged(OutputChangeEvent event) {\n-                success = true;\n+                MPDOutput output = new ArrayList<MPDOutput>(admin.getOutputs()).get(0);\n+                admin.disableOutput(output);\n+                waitForSuccess();\n+                Assert.assertTrue(success);\n             }\n-        });\n-\n-        MPDOutput output = new ArrayList<MPDOutput>(admin.getOutputs()).get(0);\n-        admin.disableOutput(output);\n-        waitForSuccess();\n-        Assert.assertTrue(success);\n-    }\n \n-    private void loadSeveralSongs() throws MPDException, IOException {\n-        playlist.addSong(MPDSongs.getSongs().get(0));\n-        playlist.addSong(MPDSongs.getSongs().get(1));\n-        playlist.addSong(MPDSongs.getSongs().get(2));\n-        playlist.addSong(MPDSongs.getSongs().get(3));\n-        playlist.addSong(MPDSongs.getSongs().get(4));\n-        playlist.addSong(MPDSongs.getSongs().get(5));\n-        playlist.addSong(MPDSongs.getSongs().get(6));\n-        playlist.addSong(MPDSongs.getSongs().get(7));\n-        playlist.addSong(MPDSongs.getSongs().get(8));\n-        playlist.addSong(MPDSongs.getSongs().get(9));\n-    }\n-}\n+            private void loadSeveralSongs() throws MPDException, IOException {\n+                playlist.addSong(MPDSongs.getSongs().get(0));\n+                playlist.addSong(MPDSongs.getSongs().get(1));\n+                playlist.addSong(MPDSongs.getSongs().get(2));\n+                playlist.addSong(MPDSongs.getSongs().get(3));\n+                playlist.addSong(MPDSongs.getSongs().get(4));\n+                playlist.addSong(MPDSongs.getSongs().get(5));\n+                playlist.addSong(MPDSongs.getSongs().get(6));\n+                playlist.addSong(MPDSongs.getSongs().get(7));\n+                playlist.addSong(MPDSongs.getSongs().get(8));\n+                playlist.addSong(MPDSongs.getSongs().get(9));\n+            }\n+        }\n+        \n\\ No newline at end of file\n",
            "diff_size": 317
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/17/MPDStandAloneMonitorIT.java\nindex 30692d3c44..102fb4472c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/17/MPDStandAloneMonitorIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/17/MPDStandAloneMonitorIT.java\n@@ -66,7 +66,7 @@ public class MPDStandAloneMonitorIT extends BaseTest {\n             Thread.sleep(MONITOR_DELAY * multiplier);\n         } catch (InterruptedException e) {\n             //don't care\n-            e.printStackTrace();\n+        e .printStackTrace();\n         }\n     }\n \n",
            "diff_size": 1
        }
    ]
}