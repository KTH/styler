{
    "error_id": "842",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 112).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Filter elements that absolute value less than a specific value if need.\n   * @param x a int value\n   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n   */\n  public abstract TIntVector filter(int x);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/842/TIntVector.java\nindex c34e5b9e9d..be2582e037 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/842/TIntVector.java\n@@ -4,105 +4,126 @@ import com.tencent.angel.ml.math.TAbstractVector;\n import com.tencent.angel.ml.math.TVector;\n \n public abstract class TIntVector extends TVector {\n-  public TIntVector() {\n-    super();\n-  }\n-\n-  public TIntVector(TIntVector other) {\n-    super(other);\n-  }\n-\n-  /**\n-   * Get element value\n-   * @param index element index\n-   * @return element value\n-   */\n-  public abstract int get(int index);\n-\n-  /**\n-   * Set element value\n-   * @param index element index\n-   * @param value element value\n-   * @return this\n-   */\n-  public abstract TIntVector set(int index, int value);\n-\n-  /**\n-   * Get all indexes of vector\n-   * @return all indexes of vector\n-   */\n-  public abstract int[] getIndices();\n-\n-  /**\n-   * Get all element values\n-   * @return all element values\n-   */\n-  public abstract int[] getValues();\n-\n-  /**\n-   * Plus a element with a update value\n-   * @param index element index\n-   * @param delta update value\n-   * @return this\n-   */\n-  public abstract TIntVector plusBy(int index, int delta);\n-\n-  /**\n-   * Filter elements that absolute value less than a specific value if need.\n-   * @param x a int value\n-   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n-   */\n-  public abstract TIntVector filter(int x);\n-\n-  /**\n-   * Times all elements by a int factor\n-   * @param x factor\n-   * @return a new vector\n-   */\n-  public abstract TIntVector times(int x);\n-\n-  /**\n-   * Times all elements by a int factor\n-   * @param x factor\n-   * @return this\n-   */\n-  public abstract TIntVector timesBy(int x);\n-\n-  /**\n-   * Plus the vector with a update vector that has same dimension\n-   * @param other update vector\n-   * @param x factor\n-   * @return a new result vector\n-   */\n-  public abstract TVector plus(TAbstractVector other, int x);\n-\n-  /**\n-   * Plus the vector with a update vector that has same dimension\n-   * @param other update vector\n-   * @param x factor\n-   * @return this\n-   */\n-  public abstract TIntVector plusBy(TAbstractVector other, int x);\n-\n-\n-\n-  @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n-\n-  @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n-\n-  @Override\n-  public TVector times(double x) { return times((int)x); }\n-\n-  @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n-\n-  @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n-\n-  @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n-\n-  public abstract long sum();\n+    public TIntVector() {\n+        super();\n+    }\n+\n+    public TIntVector(TIntVector other) {\n+        super(other);\n+    }\n+\n+    /**\n+     * Get element value\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public abstract int get(int index);\n+\n+    /**\n+     * Set element value\n+     *\n+     * @param index element index\n+     * @param value element value\n+     * @return this\n+     */\n+    public abstract TIntVector set(int index, int value);\n+\n+    /**\n+     * Get all indexes of vector\n+     *\n+     * @return all indexes of vector\n+     */\n+    public abstract int[] getIndices();\n+\n+    /**\n+     * Get all element values\n+     *\n+     * @return all element values\n+     */\n+    public abstract int[] getValues();\n+\n+    /**\n+     * Plus a element with a update value\n+     *\n+     * @param index element index\n+     * @param delta update value\n+     * @return this\n+     */\n+    public abstract TIntVector plusBy(int index, int delta);\n+\n+    /**\n+     * Filter elements that absolute value less than a specific value if need.\n+     *\n+     * @param x a int value\n+     * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n+     */\n+    public abstract TIntVector filter(int x);\n+\n+    /**\n+     * Times all elements by a int factor\n+     *\n+     * @param x factor\n+     * @return a new vector\n+     */\n+    public abstract TIntVector times(int x);\n+\n+    /**\n+     * Times all elements by a int factor\n+     *\n+     * @param x factor\n+     * @return this\n+     */\n+    public abstract TIntVector timesBy(int x);\n+\n+    /**\n+     * Plus the vector with a update vector that has same dimension\n+     *\n+     * @param other update vector\n+     * @param x     factor\n+     * @return a new result vector\n+     */\n+    public abstract TVector plus(TAbstractVector other, int x);\n+\n+    /**\n+     * Plus the vector with a update vector that has same dimension\n+     *\n+     * @param other update vector\n+     * @param x     factor\n+     * @return this\n+     */\n+    public abstract TIntVector plusBy(TAbstractVector other, int x);\n+\n+\n+    @Override\n+    public TVector plusBy(int index, double delta) {\n+        return plusBy(index, (int) delta);\n+    }\n+\n+    @Override\n+    public TVector filter(double x) {\n+        return filter((int) x);\n+    }\n+\n+    @Override\n+    public TVector times(double x) {\n+        return times((int) x);\n+    }\n+\n+    @Override\n+    public TVector timesBy(double x) {\n+        return timesBy((int) x);\n+    }\n+\n+    @Override\n+    public TVector plus(TAbstractVector other, double x) {\n+        return plus(other, (int) x);\n+    }\n+\n+    @Override\n+    public TVector plusBy(TAbstractVector other, double x) {\n+        return plusBy(other, (int) x);\n+    }\n+\n+    public abstract long sum();\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/842/TIntVector.java\nindex c34e5b9e9d..673f0fd92b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/842/TIntVector.java\n@@ -84,25 +84,35 @@ public abstract class TIntVector extends TVector {\n    */\n   public abstract TIntVector plusBy(TAbstractVector other, int x);\n \n-\n-\n-  @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n+@Override\n+  public TVector plusBy(int index, double delta) {\n+  return plusBy(index, (int) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n+  public TVector filter(double x) {\n+  return filter((int) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return times((int)x); }\n+  public TVector times(double x) {\n+  return times((int) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n+  public TVector timesBy(double x) {\n+  return timesBy((int) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+  return plus(other, (int) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+  return plusBy(other, (int) x);\n+  }\n \n   public abstract long sum();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 22.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 38.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 62.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 70.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 78.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 87.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 96.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/842/TIntVector.java\nindex c34e5b9e9d..d1d0f57aee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/842/TIntVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/842/TIntVector.java\n@@ -4,20 +4,22 @@ import com.tencent.angel.ml.math.TAbstractVector;\n import com.tencent.angel.ml.math.TVector;\n \n public abstract class TIntVector extends TVector {\n-  public TIntVector() {\n+\n+    public TIntVector() {\n     super();\n-  }\n+    }\n \n-  public TIntVector(TIntVector other) {\n+    public TIntVector(TIntVector other) {\n     super(other);\n-  }\n+    }\n \n   /**\n    * Get element value\n    * @param index element index\n    * @return element value\n    */\n-  public abstract int get(int index);\n+\n+    public abstract int get(int index);\n \n   /**\n    * Set element value\n@@ -25,19 +27,22 @@ public abstract class TIntVector extends TVector {\n    * @param value element value\n    * @return this\n    */\n-  public abstract TIntVector set(int index, int value);\n+\n+    public abstract TIntVector set(int index, int value);\n \n   /**\n    * Get all indexes of vector\n    * @return all indexes of vector\n    */\n-  public abstract int[] getIndices();\n+\n+    public abstract int[] getIndices();\n \n   /**\n    * Get all element values\n    * @return all element values\n    */\n-  public abstract int[] getValues();\n+\n+    public abstract int[] getValues();\n \n   /**\n    * Plus a element with a update value\n@@ -45,28 +50,32 @@ public abstract class TIntVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TIntVector plusBy(int index, int delta);\n+\n+    public abstract TIntVector plusBy(int index, int delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n    * @param x a int value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n-  public abstract TIntVector filter(int x);\n+\n+    public abstract TIntVector filter(int x);\n \n   /**\n    * Times all elements by a int factor\n    * @param x factor\n    * @return a new vector\n    */\n-  public abstract TIntVector times(int x);\n+\n+    public abstract TIntVector times(int x);\n \n   /**\n    * Times all elements by a int factor\n    * @param x factor\n    * @return this\n    */\n-  public abstract TIntVector timesBy(int x);\n+\n+    public abstract TIntVector timesBy(int x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n@@ -74,7 +83,8 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return a new result vector\n    */\n-  public abstract TVector plus(TAbstractVector other, int x);\n+\n+    public abstract TVector plus(TAbstractVector other, int x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n@@ -82,27 +92,39 @@ public abstract class TIntVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n-  public abstract TIntVector plusBy(TAbstractVector other, int x);\n \n+    public abstract TIntVector plusBy(TAbstractVector other, int x);\n \n+    @Override\n+    public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (int) delta);\n+    }\n \n-  @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (int) delta);}\n+    @Override\n+    public TVector filter(double x) {\n+    return filter((int) x);\n+    }\n \n-  @Override\n-  public TVector filter(double x) { return  filter((int)x); }\n+    @Override\n+    public TVector times(double x) {\n+    return times((int) x);\n+    }\n \n-  @Override\n-  public TVector times(double x) { return times((int)x); }\n+    @Override\n+    public TVector timesBy(double x) {\n+    return timesBy((int) x);\n+    }\n \n-  @Override\n-  public TVector timesBy(double x) { return  timesBy((int) x); }\n+    @Override\n+    public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (int) x);\n+    }\n \n-  @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (int) x); }\n+    @Override\n+    public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (int) x);\n+    }\n \n-  @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (int) x); }\n+    public abstract long sum();\n \n-  public abstract long sum();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}