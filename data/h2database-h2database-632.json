{
    "error_id": "632",
    "information": {
        "errors": [
            {
                "line": "39",
                "column": "9",
                "severity": "warning",
                "message": "';' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "    DENSE_RANK,\n\n        ;\n\n        /**\n         * Returns the type of window function with the specified name, or null.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/632/WindowFunction.java\nindex 516492371c..ec9be90321 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/632/WindowFunction.java\n@@ -34,55 +34,54 @@ public class WindowFunction extends AbstractAggregate {\n     /**\n      * The type for DENSE_RANK() window function.\n      */\n-    DENSE_RANK,\n+    DENSE_RANK,;\n \n-        ;\n \n-        /**\n+    /**\n          * Returns the type of window function with the specified name, or null.\n          *\n          * @param name\n          *            name of a window function\n          * @return the type of window function, or null.\n          */\n-        public static WindowFunctionType get(String name) {\n-            switch (name) {\n-            case \"ROW_NUMBER\":\n-                return WindowFunctionType.ROW_NUMBER;\n-            case \"RANK\":\n-                return RANK;\n-            case \"DENSE_RANK\":\n-                return WindowFunctionType.DENSE_RANK;\n-            default:\n-                return null;\n-            }\n+    public static WindowFunctionType get(String name) {\n+        switch (name) {\n+        case \"ROW_NUMBER\":\n+            return WindowFunctionType.ROW_NUMBER;\n+        case \"RANK\":\n+            return RANK;\n+        case \"DENSE_RANK\":\n+            return WindowFunctionType.DENSE_RANK;\n+        default:\n+            return null;\n         }\n-\n     }\n \n-    private static class RowNumberData {\n+}\n \n-        int number;\n+private static class RowNumberData {\n \n-        RowNumberData() {\n-        }\n+    int number;\n \n+    RowNumberData() {\n     }\n \n-    private static final class RankData extends RowNumberData {\n+}\n \n-        Value[] previousRow;\n+private static final class RankData extends RowNumberData {\n \n-        int previousNumber;\n+    Value[] previousRow;\n \n-        RankData() {\n-        }\n+    int previousNumber;\n \n+    RankData() {\n     }\n \n-    private WindowFunctionType type;\n+}\n \n-    /**\n+private WindowFunctionType type;\n+\n+/**\n      * Creates new instance of a window function.\n      *\n      * @param type\n@@ -90,149 +89,149 @@ public class WindowFunction extends AbstractAggregate {\n      * @param select\n      *            the select statement\n      */\n-    public WindowFunction(WindowFunctionType type, Select select) {\n-        super(select, false);\n-        this.type = type;\n-    }\n+public WindowFunction(WindowFunctionType type, Select select) {\n+    super(select, false);\n+    this.type = type;\n+}\n \n-    @Override\n-    public boolean isAggregate() {\n-        return false;\n-    }\n+@Override\n+public boolean isAggregate() {\n+    return false;\n+}\n \n-    @Override\n-    protected void updateAggregate(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            data.previousNumber++;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected void updateAggregate(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        data.previousNumber++;\n+        break;\n+    }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected void updateGroupAggregates(Session session, int stage) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void updateGroupAggregates(Session session, int stage) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected int getNumExpressions() {\n-        return 0;\n-    }\n+@Override\n+protected int getNumExpressions() {\n+    return 0;\n+}\n \n-    @Override\n-    protected void rememberExpressions(Session session, Value[] array) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void rememberExpressions(Session session, Value[] array) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            Value[] previous = data.previousRow;\n-            if (previous == null) {\n-                data.previousNumber++;\n-            } else {\n-                if (getOverOrderBySort().compare(previous, array) != 0) {\n-                    if (type == WindowFunctionType.RANK) {\n-                        data.previousNumber = data.number;\n-                    } else /* DENSE_RANK */ {\n-                        data.previousNumber++;\n-                    }\n+@Override\n+protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        Value[] previous = data.previousRow;\n+        if (previous == null) {\n+            data.previousNumber++;\n+        } else {\n+            if (getOverOrderBySort().compare(previous, array) != 0) {\n+                if (type == WindowFunctionType.RANK) {\n+                    data.previousNumber = data.number;\n+                } else /* DENSE_RANK */ {\n+                    data.previousNumber++;\n                 }\n             }\n-            data.previousRow = array;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n         }\n+        data.previousRow = array;\n+        break;\n     }\n-\n-    @Override\n-    protected Object createAggregateData() {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return new RowNumberData();\n-        case RANK:\n-        case DENSE_RANK:\n-            return new RankData();\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected Value getAggregatedValue(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return ValueInt.get(((RowNumberData) aggregateData).number);\n-        case RANK:\n-        case DENSE_RANK:\n-            return ValueInt.get(((RankData) aggregateData).previousNumber);\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected Object createAggregateData() {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return new RowNumberData();\n+    case RANK:\n+    case DENSE_RANK:\n+        return new RankData();\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getType() {\n-        return Value.INT;\n+@Override\n+protected Value getAggregatedValue(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return ValueInt.get(((RowNumberData) aggregateData).number);\n+    case RANK:\n+    case DENSE_RANK:\n+        return ValueInt.get(((RankData) aggregateData).previousNumber);\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getScale() {\n-        return 0;\n-    }\n+@Override\n+public int getType() {\n+    return Value.INT;\n+}\n \n-    @Override\n-    public long getPrecision() {\n-        return ValueInt.PRECISION;\n-    }\n+@Override\n+public int getScale() {\n+    return 0;\n+}\n \n-    @Override\n-    public int getDisplaySize() {\n-        return ValueInt.DISPLAY_SIZE;\n-    }\n+@Override\n+public long getPrecision() {\n+    return ValueInt.PRECISION;\n+}\n \n-    @Override\n-    public String getSQL() {\n-        String text;\n-        switch (type) {\n-        case ROW_NUMBER:\n-            text = \"ROW_NUMBER\";\n-            break;\n-        case RANK:\n-            text = \"RANK\";\n-            break;\n-        case DENSE_RANK:\n-            text = \"DENSE_RANK\";\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-        StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n-        return appendTailConditions(builder).toString();\n-    }\n+@Override\n+public int getDisplaySize() {\n+    return ValueInt.DISPLAY_SIZE;\n+}\n \n-    @Override\n-    public int getCost() {\n-        int cost = 1;\n-        return cost;\n-    }\n+@Override\n+public String getSQL() {\n+    String text;\n+    switch (type) {\n+    case ROW_NUMBER:\n+        text = \"ROW_NUMBER\";\n+        break;\n+    case RANK:\n+        text = \"RANK\";\n+        break;\n+    case DENSE_RANK:\n+        text = \"DENSE_RANK\";\n+        break;\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+    StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n+    return appendTailConditions(builder).toString();\n+}\n+\n+@Override\n+public int getCost() {\n+    int cost = 1;\n+    return cost;\n+}\n \n }\n",
            "diff_size": 186
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "40",
                    "column": "5",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/632/WindowFunction.java\nindex 516492371c..36eec2ad3e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/632/WindowFunction.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression.aggregate;\n \n import org.h2.command.dml.Select;\n@@ -16,10 +17,10 @@ import org.h2.value.ValueInt;\n  */\n public class WindowFunction extends AbstractAggregate {\n \n-    /**\n-     * A type of a window function.\n-     */\n-    public enum WindowFunctionType {\n+  /**\n+   * A type of a window function.\n+   */\n+  public enum WindowFunctionType {\n \n     /**\n      * The type for ROW_NUMBER() window function.\n@@ -36,203 +37,201 @@ public class WindowFunction extends AbstractAggregate {\n      */\n     DENSE_RANK,\n \n-        ;\n-\n-        /**\n-         * Returns the type of window function with the specified name, or null.\n-         *\n-         * @param name\n-         *            name of a window function\n-         * @return the type of window function, or null.\n-         */\n-        public static WindowFunctionType get(String name) {\n-            switch (name) {\n-            case \"ROW_NUMBER\":\n-                return WindowFunctionType.ROW_NUMBER;\n-            case \"RANK\":\n-                return RANK;\n-            case \"DENSE_RANK\":\n-                return WindowFunctionType.DENSE_RANK;\n-            default:\n-                return null;\n-            }\n-        }\n-\n-    }\n-\n-    private static class RowNumberData {\n-\n-        int number;\n-\n-        RowNumberData() {\n-        }\n-\n-    }\n-\n-    private static final class RankData extends RowNumberData {\n-\n-        Value[] previousRow;\n-\n-        int previousNumber;\n-\n-        RankData() {\n-        }\n-\n-    }\n-\n-    private WindowFunctionType type;\n+    ;\n \n     /**\n-     * Creates new instance of a window function.\n+     * Returns the type of window function with the specified name, or null.\n      *\n-     * @param type\n-     *            the type\n-     * @param select\n-     *            the select statement\n+     * @param name name of a window function\n+     * @return the type of window function, or null.\n      */\n-    public WindowFunction(WindowFunctionType type, Select select) {\n-        super(select, false);\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public boolean isAggregate() {\n-        return false;\n-    }\n-\n-    @Override\n-    protected void updateAggregate(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            data.previousNumber++;\n-            break;\n-        }\n+    public static WindowFunctionType get(String name) {\n+      switch (name) {\n+        case \"ROW_NUMBER\":\n+          return WindowFunctionType.ROW_NUMBER;\n+        case \"RANK\":\n+          return RANK;\n+        case \"DENSE_RANK\":\n+          return WindowFunctionType.DENSE_RANK;\n         default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-    }\n-\n-    @Override\n-    protected void updateGroupAggregates(Session session, int stage) {\n-        // Nothing to do\n-    }\n-\n-    @Override\n-    protected int getNumExpressions() {\n-        return 0;\n-    }\n-\n-    @Override\n-    protected void rememberExpressions(Session session, Value[] array) {\n-        // Nothing to do\n-    }\n-\n-    @Override\n-    protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            Value[] previous = data.previousRow;\n-            if (previous == null) {\n-                data.previousNumber++;\n-            } else {\n-                if (getOverOrderBySort().compare(previous, array) != 0) {\n-                    if (type == WindowFunctionType.RANK) {\n-                        data.previousNumber = data.number;\n-                    } else /* DENSE_RANK */ {\n-                        data.previousNumber++;\n-                    }\n-                }\n+          return null;\n+      }\n+    }\n+\n+  }\n+\n+  private static class RowNumberData {\n+\n+    int number;\n+\n+    RowNumberData() {\n+    }\n+\n+  }\n+\n+  private static final class RankData extends RowNumberData {\n+\n+    Value[] previousRow;\n+\n+    int previousNumber;\n+\n+    RankData() {\n+    }\n+\n+  }\n+\n+  private WindowFunctionType type;\n+\n+  /**\n+   * Creates new instance of a window function.\n+   *\n+   * @param type   the type\n+   * @param select the select statement\n+   */\n+  public WindowFunction(WindowFunctionType type, Select select) {\n+    super(select, false);\n+    this.type = type;\n+  }\n+\n+  @Override\n+  public boolean isAggregate() {\n+    return false;\n+  }\n+\n+  @Override\n+  protected void updateAggregate(Session session, Object aggregateData) {\n+    switch (type) {\n+      case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+      case RANK:\n+      case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        data.previousNumber++;\n+        break;\n+      }\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+  }\n+\n+  @Override\n+  protected void updateGroupAggregates(Session session, int stage) {\n+    // Nothing to do\n+  }\n+\n+  @Override\n+  protected int getNumExpressions() {\n+    return 0;\n+  }\n+\n+  @Override\n+  protected void rememberExpressions(Session session, Value[] array) {\n+    // Nothing to do\n+  }\n+\n+  @Override\n+  protected void updateFromExpressions(Session session, Object aggregateData,\n+                                       Value[] array) {\n+    switch (type) {\n+      case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+      case RANK:\n+      case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        Value[] previous = data.previousRow;\n+        if (previous == null) {\n+          data.previousNumber++;\n+        } else {\n+          if (getOverOrderBySort().compare(previous, array) != 0) {\n+            if (type == WindowFunctionType.RANK) {\n+              data.previousNumber = data.number;\n+            } else /* DENSE_RANK */ {\n+              data.previousNumber++;\n             }\n-            data.previousRow = array;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-    }\n-\n-    @Override\n-    protected Object createAggregateData() {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return new RowNumberData();\n-        case RANK:\n-        case DENSE_RANK:\n-            return new RankData();\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-    }\n-\n-    @Override\n-    protected Value getAggregatedValue(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return ValueInt.get(((RowNumberData) aggregateData).number);\n-        case RANK:\n-        case DENSE_RANK:\n-            return ValueInt.get(((RankData) aggregateData).previousNumber);\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n+          }\n         }\n-    }\n-\n-    @Override\n-    public int getType() {\n-        return Value.INT;\n-    }\n-\n-    @Override\n-    public int getScale() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public long getPrecision() {\n-        return ValueInt.PRECISION;\n-    }\n-\n-    @Override\n-    public int getDisplaySize() {\n-        return ValueInt.DISPLAY_SIZE;\n-    }\n-\n-    @Override\n-    public String getSQL() {\n-        String text;\n-        switch (type) {\n-        case ROW_NUMBER:\n-            text = \"ROW_NUMBER\";\n-            break;\n-        case RANK:\n-            text = \"RANK\";\n-            break;\n-        case DENSE_RANK:\n-            text = \"DENSE_RANK\";\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-        StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n-        return appendTailConditions(builder).toString();\n-    }\n-\n-    @Override\n-    public int getCost() {\n-        int cost = 1;\n-        return cost;\n-    }\n+        data.previousRow = array;\n+        break;\n+      }\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+  }\n+\n+  @Override\n+  protected Object createAggregateData() {\n+    switch (type) {\n+      case ROW_NUMBER:\n+        return new RowNumberData();\n+      case RANK:\n+      case DENSE_RANK:\n+        return new RankData();\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+  }\n+\n+  @Override\n+  protected Value getAggregatedValue(Session session, Object aggregateData) {\n+    switch (type) {\n+      case ROW_NUMBER:\n+        return ValueInt.get(((RowNumberData) aggregateData).number);\n+      case RANK:\n+      case DENSE_RANK:\n+        return ValueInt.get(((RankData) aggregateData).previousNumber);\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return Value.INT;\n+  }\n+\n+  @Override\n+  public int getScale() {\n+    return 0;\n+  }\n+\n+  @Override\n+  public long getPrecision() {\n+    return ValueInt.PRECISION;\n+  }\n+\n+  @Override\n+  public int getDisplaySize() {\n+    return ValueInt.DISPLAY_SIZE;\n+  }\n+\n+  @Override\n+  public String getSQL() {\n+    String text;\n+    switch (type) {\n+      case ROW_NUMBER:\n+        text = \"ROW_NUMBER\";\n+        break;\n+      case RANK:\n+        text = \"RANK\";\n+        break;\n+      case DENSE_RANK:\n+        text = \"DENSE_RANK\";\n+        break;\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+    StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n+    return appendTailConditions(builder).toString();\n+  }\n+\n+  @Override\n+  public int getCost() {\n+    int cost = 1;\n+    return cost;\n+  }\n \n }\n",
            "diff_size": 285
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/632/WindowFunction.java\nindex 516492371c..00f124b150 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/632/WindowFunction.java\n@@ -34,9 +34,7 @@ public class WindowFunction extends AbstractAggregate {\n     /**\n      * The type for DENSE_RANK() window function.\n      */\n-    DENSE_RANK,\n-\n-        ;\n+    DENSE_RANK,;\n \n         /**\n          * Returns the type of window function with the specified name, or null.\n@@ -65,8 +63,7 @@ public class WindowFunction extends AbstractAggregate {\n         int number;\n \n         RowNumberData() {\n-        }\n-\n+    }\n     }\n \n     private static final class RankData extends RowNumberData {\n@@ -76,8 +73,7 @@ public class WindowFunction extends AbstractAggregate {\n         int previousNumber;\n \n         RankData() {\n-        }\n-\n+    }\n     }\n \n     private WindowFunctionType type;\n@@ -235,4 +231,4 @@ public class WindowFunction extends AbstractAggregate {\n         return cost;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/632/WindowFunction.java\nindex 516492371c..1011c5d3de 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/632/WindowFunction.java\n@@ -14,29 +14,29 @@ import org.h2.value.ValueInt;\n /**\n  * A window function.\n  */\n+\n+\n public class WindowFunction extends AbstractAggregate {\n \n     /**\n      * A type of a window function.\n      */\n+\n+\n     public enum WindowFunctionType {\n \n     /**\n      * The type for ROW_NUMBER() window function.\n      */\n-    ROW_NUMBER,\n+        ROW_NUMBER,\n \n     /**\n      * The type for RANK() window function.\n-     */\n-    RANK,\n+     */ RANK,\n \n     /**\n      * The type for DENSE_RANK() window function.\n-     */\n-    DENSE_RANK,\n-\n-        ;\n+     */ DENSE_RANK,;\n \n         /**\n          * Returns the type of window function with the specified name, or null.\n@@ -45,6 +45,7 @@ public class WindowFunction extends AbstractAggregate {\n          *            name of a window function\n          * @return the type of window function, or null.\n          */\n+\n         public static WindowFunctionType get(String name) {\n             switch (name) {\n             case \"ROW_NUMBER\":\n@@ -62,22 +63,26 @@ public class WindowFunction extends AbstractAggregate {\n \n     private static class RowNumberData {\n \n+\n         int number;\n \n         RowNumberData() {\n+\n         }\n \n     }\n \n     private static final class RankData extends RowNumberData {\n \n+\n         Value[] previousRow;\n \n+\n         int previousNumber;\n \n         RankData() {\n-        }\n \n+        }\n     }\n \n     private WindowFunctionType type;\n@@ -90,6 +95,7 @@ public class WindowFunction extends AbstractAggregate {\n      * @param select\n      *            the select statement\n      */\n+\n     public WindowFunction(WindowFunctionType type, Select select) {\n         super(select, false);\n         this.type = type;\n@@ -121,6 +127,7 @@ public class WindowFunction extends AbstractAggregate {\n     @Override\n     protected void updateGroupAggregates(Session session, int stage) {\n         // Nothing to do\n+\n     }\n \n     @Override\n@@ -131,6 +138,7 @@ public class WindowFunction extends AbstractAggregate {\n     @Override\n     protected void rememberExpressions(Session session, Value[] array) {\n         // Nothing to do\n+\n     }\n \n     @Override\n@@ -235,4 +243,4 @@ public class WindowFunction extends AbstractAggregate {\n         return cost;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/632/WindowFunction.java\nindex 516492371c..8b4336fb0d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/632/WindowFunction.java\n@@ -34,55 +34,53 @@ public class WindowFunction extends AbstractAggregate {\n     /**\n      * The type for DENSE_RANK() window function.\n      */\n-    DENSE_RANK,\n+    DENSE_RANK,;\n \n-        ;\n-\n-        /**\n+    /**\n          * Returns the type of window function with the specified name, or null.\n          *\n          * @param name\n          *            name of a window function\n          * @return the type of window function, or null.\n          */\n-        public static WindowFunctionType get(String name) {\n-            switch (name) {\n-            case \"ROW_NUMBER\":\n-                return WindowFunctionType.ROW_NUMBER;\n-            case \"RANK\":\n-                return RANK;\n-            case \"DENSE_RANK\":\n-                return WindowFunctionType.DENSE_RANK;\n-            default:\n-                return null;\n-            }\n+    public static WindowFunctionType get(String name) {\n+        switch (name) {\n+        case \"ROW_NUMBER\":\n+            return WindowFunctionType.ROW_NUMBER;\n+        case \"RANK\":\n+            return RANK;\n+        case \"DENSE_RANK\":\n+            return WindowFunctionType.DENSE_RANK;\n+        default:\n+            return null;\n         }\n-\n     }\n \n-    private static class RowNumberData {\n+}\n \n-        int number;\n+private static class RowNumberData {\n \n-        RowNumberData() {\n-        }\n+    int number;\n \n+    RowNumberData() {\n     }\n \n-    private static final class RankData extends RowNumberData {\n+}\n \n-        Value[] previousRow;\n+private static final class RankData extends RowNumberData {\n \n-        int previousNumber;\n+    Value[] previousRow;\n \n-        RankData() {\n-        }\n+    int previousNumber;\n \n+    RankData() {\n     }\n \n-    private WindowFunctionType type;\n+}\n \n-    /**\n+private WindowFunctionType type;\n+\n+/**\n      * Creates new instance of a window function.\n      *\n      * @param type\n@@ -90,149 +88,149 @@ public class WindowFunction extends AbstractAggregate {\n      * @param select\n      *            the select statement\n      */\n-    public WindowFunction(WindowFunctionType type, Select select) {\n-        super(select, false);\n-        this.type = type;\n-    }\n+public WindowFunction(WindowFunctionType type, Select select) {\n+    super(select, false);\n+    this.type = type;\n+}\n \n-    @Override\n-    public boolean isAggregate() {\n-        return false;\n-    }\n+@Override\n+public boolean isAggregate() {\n+    return false;\n+}\n \n-    @Override\n-    protected void updateAggregate(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            data.previousNumber++;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected void updateAggregate(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        data.previousNumber++;\n+        break;\n+    }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected void updateGroupAggregates(Session session, int stage) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void updateGroupAggregates(Session session, int stage) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected int getNumExpressions() {\n-        return 0;\n-    }\n+@Override\n+protected int getNumExpressions() {\n+    return 0;\n+}\n \n-    @Override\n-    protected void rememberExpressions(Session session, Value[] array) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void rememberExpressions(Session session, Value[] array) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            Value[] previous = data.previousRow;\n-            if (previous == null) {\n-                data.previousNumber++;\n-            } else {\n-                if (getOverOrderBySort().compare(previous, array) != 0) {\n-                    if (type == WindowFunctionType.RANK) {\n-                        data.previousNumber = data.number;\n-                    } else /* DENSE_RANK */ {\n-                        data.previousNumber++;\n-                    }\n+@Override\n+protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        Value[] previous = data.previousRow;\n+        if (previous == null) {\n+            data.previousNumber++;\n+        } else {\n+            if (getOverOrderBySort().compare(previous, array) != 0) {\n+                if (type == WindowFunctionType.RANK) {\n+                    data.previousNumber = data.number;\n+                } else /* DENSE_RANK */ {\n+                    data.previousNumber++;\n                 }\n             }\n-            data.previousRow = array;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n         }\n+        data.previousRow = array;\n+        break;\n     }\n-\n-    @Override\n-    protected Object createAggregateData() {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return new RowNumberData();\n-        case RANK:\n-        case DENSE_RANK:\n-            return new RankData();\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected Value getAggregatedValue(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return ValueInt.get(((RowNumberData) aggregateData).number);\n-        case RANK:\n-        case DENSE_RANK:\n-            return ValueInt.get(((RankData) aggregateData).previousNumber);\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected Object createAggregateData() {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return new RowNumberData();\n+    case RANK:\n+    case DENSE_RANK:\n+        return new RankData();\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getType() {\n-        return Value.INT;\n+@Override\n+protected Value getAggregatedValue(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return ValueInt.get(((RowNumberData) aggregateData).number);\n+    case RANK:\n+    case DENSE_RANK:\n+        return ValueInt.get(((RankData) aggregateData).previousNumber);\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getScale() {\n-        return 0;\n-    }\n+@Override\n+public int getType() {\n+    return Value.INT;\n+}\n \n-    @Override\n-    public long getPrecision() {\n-        return ValueInt.PRECISION;\n-    }\n+@Override\n+public int getScale() {\n+    return 0;\n+}\n \n-    @Override\n-    public int getDisplaySize() {\n-        return ValueInt.DISPLAY_SIZE;\n-    }\n+@Override\n+public long getPrecision() {\n+    return ValueInt.PRECISION;\n+}\n \n-    @Override\n-    public String getSQL() {\n-        String text;\n-        switch (type) {\n-        case ROW_NUMBER:\n-            text = \"ROW_NUMBER\";\n-            break;\n-        case RANK:\n-            text = \"RANK\";\n-            break;\n-        case DENSE_RANK:\n-            text = \"DENSE_RANK\";\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-        StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n-        return appendTailConditions(builder).toString();\n-    }\n+@Override\n+public int getDisplaySize() {\n+    return ValueInt.DISPLAY_SIZE;\n+}\n \n-    @Override\n-    public int getCost() {\n-        int cost = 1;\n-        return cost;\n-    }\n+@Override\n+public String getSQL() {\n+    String text;\n+    switch (type) {\n+    case ROW_NUMBER:\n+        text = \"ROW_NUMBER\";\n+        break;\n+    case RANK:\n+        text = \"RANK\";\n+        break;\n+    case DENSE_RANK:\n+        text = \"DENSE_RANK\";\n+        break;\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+    StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n+    return appendTailConditions(builder).toString();\n+}\n+\n+@Override\n+public int getCost() {\n+    int cost = 1;\n+    return cost;\n+}\n \n }\n",
            "diff_size": 187
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/632/WindowFunction.java\nindex 516492371c..ec9be90321 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/632/WindowFunction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/632/WindowFunction.java\n@@ -34,55 +34,54 @@ public class WindowFunction extends AbstractAggregate {\n     /**\n      * The type for DENSE_RANK() window function.\n      */\n-    DENSE_RANK,\n+    DENSE_RANK,;\n \n-        ;\n \n-        /**\n+    /**\n          * Returns the type of window function with the specified name, or null.\n          *\n          * @param name\n          *            name of a window function\n          * @return the type of window function, or null.\n          */\n-        public static WindowFunctionType get(String name) {\n-            switch (name) {\n-            case \"ROW_NUMBER\":\n-                return WindowFunctionType.ROW_NUMBER;\n-            case \"RANK\":\n-                return RANK;\n-            case \"DENSE_RANK\":\n-                return WindowFunctionType.DENSE_RANK;\n-            default:\n-                return null;\n-            }\n+    public static WindowFunctionType get(String name) {\n+        switch (name) {\n+        case \"ROW_NUMBER\":\n+            return WindowFunctionType.ROW_NUMBER;\n+        case \"RANK\":\n+            return RANK;\n+        case \"DENSE_RANK\":\n+            return WindowFunctionType.DENSE_RANK;\n+        default:\n+            return null;\n         }\n-\n     }\n \n-    private static class RowNumberData {\n+}\n \n-        int number;\n+private static class RowNumberData {\n \n-        RowNumberData() {\n-        }\n+    int number;\n \n+    RowNumberData() {\n     }\n \n-    private static final class RankData extends RowNumberData {\n+}\n \n-        Value[] previousRow;\n+private static final class RankData extends RowNumberData {\n \n-        int previousNumber;\n+    Value[] previousRow;\n \n-        RankData() {\n-        }\n+    int previousNumber;\n \n+    RankData() {\n     }\n \n-    private WindowFunctionType type;\n+}\n \n-    /**\n+private WindowFunctionType type;\n+\n+/**\n      * Creates new instance of a window function.\n      *\n      * @param type\n@@ -90,149 +89,149 @@ public class WindowFunction extends AbstractAggregate {\n      * @param select\n      *            the select statement\n      */\n-    public WindowFunction(WindowFunctionType type, Select select) {\n-        super(select, false);\n-        this.type = type;\n-    }\n+public WindowFunction(WindowFunctionType type, Select select) {\n+    super(select, false);\n+    this.type = type;\n+}\n \n-    @Override\n-    public boolean isAggregate() {\n-        return false;\n-    }\n+@Override\n+public boolean isAggregate() {\n+    return false;\n+}\n \n-    @Override\n-    protected void updateAggregate(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            data.previousNumber++;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected void updateAggregate(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        data.previousNumber++;\n+        break;\n+    }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected void updateGroupAggregates(Session session, int stage) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void updateGroupAggregates(Session session, int stage) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected int getNumExpressions() {\n-        return 0;\n-    }\n+@Override\n+protected int getNumExpressions() {\n+    return 0;\n+}\n \n-    @Override\n-    protected void rememberExpressions(Session session, Value[] array) {\n-        // Nothing to do\n-    }\n+@Override\n+protected void rememberExpressions(Session session, Value[] array) {\n+    // Nothing to do\n+}\n \n-    @Override\n-    protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            ((RowNumberData) aggregateData).number++;\n-            break;\n-        case RANK:\n-        case DENSE_RANK: {\n-            RankData data = (RankData) aggregateData;\n-            data.number++;\n-            Value[] previous = data.previousRow;\n-            if (previous == null) {\n-                data.previousNumber++;\n-            } else {\n-                if (getOverOrderBySort().compare(previous, array) != 0) {\n-                    if (type == WindowFunctionType.RANK) {\n-                        data.previousNumber = data.number;\n-                    } else /* DENSE_RANK */ {\n-                        data.previousNumber++;\n-                    }\n+@Override\n+protected void updateFromExpressions(Session session, Object aggregateData, Value[] array) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        ((RowNumberData) aggregateData).number++;\n+        break;\n+    case RANK:\n+    case DENSE_RANK: {\n+        RankData data = (RankData) aggregateData;\n+        data.number++;\n+        Value[] previous = data.previousRow;\n+        if (previous == null) {\n+            data.previousNumber++;\n+        } else {\n+            if (getOverOrderBySort().compare(previous, array) != 0) {\n+                if (type == WindowFunctionType.RANK) {\n+                    data.previousNumber = data.number;\n+                } else /* DENSE_RANK */ {\n+                    data.previousNumber++;\n                 }\n             }\n-            data.previousRow = array;\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n         }\n+        data.previousRow = array;\n+        break;\n     }\n-\n-    @Override\n-    protected Object createAggregateData() {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return new RowNumberData();\n-        case RANK:\n-        case DENSE_RANK:\n-            return new RankData();\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    protected Value getAggregatedValue(Session session, Object aggregateData) {\n-        switch (type) {\n-        case ROW_NUMBER:\n-            return ValueInt.get(((RowNumberData) aggregateData).number);\n-        case RANK:\n-        case DENSE_RANK:\n-            return ValueInt.get(((RankData) aggregateData).previousNumber);\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n+@Override\n+protected Object createAggregateData() {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return new RowNumberData();\n+    case RANK:\n+    case DENSE_RANK:\n+        return new RankData();\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getType() {\n-        return Value.INT;\n+@Override\n+protected Value getAggregatedValue(Session session, Object aggregateData) {\n+    switch (type) {\n+    case ROW_NUMBER:\n+        return ValueInt.get(((RowNumberData) aggregateData).number);\n+    case RANK:\n+    case DENSE_RANK:\n+        return ValueInt.get(((RankData) aggregateData).previousNumber);\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n+}\n \n-    @Override\n-    public int getScale() {\n-        return 0;\n-    }\n+@Override\n+public int getType() {\n+    return Value.INT;\n+}\n \n-    @Override\n-    public long getPrecision() {\n-        return ValueInt.PRECISION;\n-    }\n+@Override\n+public int getScale() {\n+    return 0;\n+}\n \n-    @Override\n-    public int getDisplaySize() {\n-        return ValueInt.DISPLAY_SIZE;\n-    }\n+@Override\n+public long getPrecision() {\n+    return ValueInt.PRECISION;\n+}\n \n-    @Override\n-    public String getSQL() {\n-        String text;\n-        switch (type) {\n-        case ROW_NUMBER:\n-            text = \"ROW_NUMBER\";\n-            break;\n-        case RANK:\n-            text = \"RANK\";\n-            break;\n-        case DENSE_RANK:\n-            text = \"DENSE_RANK\";\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-        StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n-        return appendTailConditions(builder).toString();\n-    }\n+@Override\n+public int getDisplaySize() {\n+    return ValueInt.DISPLAY_SIZE;\n+}\n \n-    @Override\n-    public int getCost() {\n-        int cost = 1;\n-        return cost;\n-    }\n+@Override\n+public String getSQL() {\n+    String text;\n+    switch (type) {\n+    case ROW_NUMBER:\n+        text = \"ROW_NUMBER\";\n+        break;\n+    case RANK:\n+        text = \"RANK\";\n+        break;\n+    case DENSE_RANK:\n+        text = \"DENSE_RANK\";\n+        break;\n+    default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n+    }\n+    StringBuilder builder = new StringBuilder().append(text).append(\"()\");\n+    return appendTailConditions(builder).toString();\n+}\n+\n+@Override\n+public int getCost() {\n+    int cost = 1;\n+    return cost;\n+}\n \n }\n",
            "diff_size": 186
        }
    ]
}