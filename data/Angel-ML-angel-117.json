{
    "error_id": "117",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/117/IntFloatDenseVectorStorage.java\nindex 95a8056eae..e58c182ea8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/117/IntFloatDenseVectorStorage.java\n@@ -27,275 +27,275 @@ import java.util.Random;\n \n public class IntFloatDenseVectorStorage implements IntFloatVectorStorage {\n \n-  private float[] values;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private int dim;\n-\n-  public IntFloatDenseVectorStorage() {\n-    super();\n-  }\n-\n-  public IntFloatDenseVectorStorage(float[] values) {\n-    this.flag = 1;\n-    this.dim = values.length;\n-    this.values = values;\n-  }\n-\n-  public IntFloatDenseVectorStorage(int dim) {\n-    this(new float[dim]);\n-  }\n-\n-  @Override\n-  public float get(int idx) {\n-    return values[idx];\n-  }\n-\n-  @Override\n-  public void set(int idx, float value) {\n-    values[idx] = value;\n-  }\n-\n-  @Override\n-  public float[] getValues() {\n-    return values;\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage clone() {\n-    return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage copy() {\n-    return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeDense() {\n-    float[] oneLikeValues = new float[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse() {\n-    int capacity = Math.max(128, (int) (dim / 1000));\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted() {\n-    int capacity = Math.max(128, (int) (dim / 1000));\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeDense(int dim) {\n-    float[] oneLikeValues = new float[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse(int dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted(int dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptyDense() {\n-    return new IntFloatDenseVectorStorage(dim);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySparse() {\n-    return new IntFloatSparseVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySorted() {\n-    return new IntFloatSortedVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptyDense(int length) {\n-    return new IntFloatDenseVectorStorage(length);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySparse(int dim, int capacity) {\n-    return new IntFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySorted(int dim, int capacity) {\n-    return new IntFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySparse(int capacity) {\n-    return new IntFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntFloatVectorStorage emptySorted(int capacity) {\n-    return new IntFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public int size() {\n-    return values.length;\n-  }\n-\n-  public void setSize(int size) {\n-  }\n-\n-  @Override\n-  public boolean hasKey(int key) {\n-    return (key >= 0 && key < values.length);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_FLOAT_DENSE;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    for (int i = 0; i < values.length; i++) {\n-      values[i] = 0;\n-    }\n-  }\n+    private float[] values;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private int dim;\n+\n+    public IntFloatDenseVectorStorage() {\n+        super();\n+    }\n+\n+    public IntFloatDenseVectorStorage(float[] values) {\n+        this.flag = 1;\n+        this.dim = values.length;\n+        this.values = values;\n+    }\n+\n+    public IntFloatDenseVectorStorage(int dim) {\n+        this(new float[dim]);\n+    }\n+\n+    @Override\n+    public float get(int idx) {\n+        return values[idx];\n+    }\n+\n+    @Override\n+    public void set(int idx, float value) {\n+        values[idx] = value;\n+    }\n+\n+    @Override\n+    public float[] getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage clone() {\n+        return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage copy() {\n+        return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeDense() {\n+        float[] oneLikeValues = new float[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatDenseVectorStorage(oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse() {\n+        int capacity = Math.max(128, (int) (dim / 1000));\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted() {\n+        int capacity = Math.max(128, (int) (dim / 1000));\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeDense(int dim) {\n+        float[] oneLikeValues = new float[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatDenseVectorStorage(oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse(int dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted(int dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptyDense() {\n+        return new IntFloatDenseVectorStorage(dim);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySparse() {\n+        return new IntFloatSparseVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySorted() {\n+        return new IntFloatSortedVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptyDense(int length) {\n+        return new IntFloatDenseVectorStorage(length);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySparse(int dim, int capacity) {\n+        return new IntFloatSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySorted(int dim, int capacity) {\n+        return new IntFloatSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySparse(int capacity) {\n+        return new IntFloatSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntFloatVectorStorage emptySorted(int capacity) {\n+        return new IntFloatSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return values.length;\n+    }\n+\n+    public void setSize(int size) {\n+    }\n+\n+    @Override\n+    public boolean hasKey(int key) {\n+        return (key >= 0 && key < values.length);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_FLOAT_DENSE;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        for (int i = 0; i < values.length; i++) {\n+            values[i] = 0;\n+        }\n+    }\n }\n",
            "diff_size": 271
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/117/IntFloatDenseVectorStorage.java\nindex 95a8056eae..4acbdc50d7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/117/IntFloatDenseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n@@ -298,4 +297,4 @@ public class IntFloatDenseVectorStorage implements IntFloatVectorStorage {\n       values[i] = 0;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/117/IntFloatDenseVectorStorage.java\nindex 95a8056eae..8bb669290c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/117/IntFloatDenseVectorStorage.java\n@@ -20,67 +20,65 @@ package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n import com.tencent.angel.ml.matrix.RowType;\n-\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Random;\n \n public class IntFloatDenseVectorStorage implements IntFloatVectorStorage {\n+    private float[] values;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private int dim;\n \n-  private float[] values;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private int dim;\n-\n-  public IntFloatDenseVectorStorage() {\n+    public IntFloatDenseVectorStorage() {\n     super();\n-  }\n+    }\n \n-  public IntFloatDenseVectorStorage(float[] values) {\n+    public IntFloatDenseVectorStorage(float[] values) {\n     this.flag = 1;\n     this.dim = values.length;\n     this.values = values;\n-  }\n+    }\n \n-  public IntFloatDenseVectorStorage(int dim) {\n+    public IntFloatDenseVectorStorage(int dim) {\n     this(new float[dim]);\n-  }\n+    }\n \n-  @Override\n-  public float get(int idx) {\n+    @Override\n+    public float get(int idx) {\n     return values[idx];\n-  }\n+    }\n \n-  @Override\n-  public void set(int idx, float value) {\n+    @Override\n+    public void set(int idx, float value) {\n     values[idx] = value;\n-  }\n+    }\n \n-  @Override\n-  public float[] getValues() {\n+    @Override\n+    public float[] getValues() {\n     return values;\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage clone() {\n+    @Override\n+    public IntFloatVectorStorage clone() {\n     return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage copy() {\n+    @Override\n+    public IntFloatVectorStorage copy() {\n     return new IntFloatDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeDense() {\n+    @Override\n+    public IntFloatVectorStorage oneLikeDense() {\n     float[] oneLikeValues = new float[dim];\n     for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatDenseVectorStorage(oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse() {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse() {\n     int capacity = Math.max(128, (int) (dim / 1000));\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n@@ -88,21 +86,22 @@ public class IntFloatDenseVectorStorage implements IntFloatVectorStorage {\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted() {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted() {\n     int capacity = Math.max(128, (int) (dim / 1000));\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n@@ -110,192 +109,194 @@ public class IntFloatDenseVectorStorage implements IntFloatVectorStorage {\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeDense(int dim) {\n+    @Override\n+    public IntFloatVectorStorage oneLikeDense(int dim) {\n     float[] oneLikeValues = new float[dim];\n     for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatDenseVectorStorage(oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse(int dim, int capacity) {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse(int dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted(int dim, int capacity) {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted(int dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSparse(int capacity) {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSparse(int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage oneLikeSorted(int capacity) {\n+    @Override\n+    public IntFloatVectorStorage oneLikeSorted(int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     int[] indices = new int[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt(dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new IntFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptyDense() {\n+    @Override\n+    public IntFloatVectorStorage emptyDense() {\n     return new IntFloatDenseVectorStorage(dim);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySparse() {\n+    @Override\n+    public IntFloatVectorStorage emptySparse() {\n     return new IntFloatSparseVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySorted() {\n+    @Override\n+    public IntFloatVectorStorage emptySorted() {\n     return new IntFloatSortedVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptyDense(int length) {\n+    @Override\n+    public IntFloatVectorStorage emptyDense(int length) {\n     return new IntFloatDenseVectorStorage(length);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySparse(int dim, int capacity) {\n+    @Override\n+    public IntFloatVectorStorage emptySparse(int dim, int capacity) {\n     return new IntFloatSparseVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySorted(int dim, int capacity) {\n+    @Override\n+    public IntFloatVectorStorage emptySorted(int dim, int capacity) {\n     return new IntFloatSortedVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySparse(int capacity) {\n+    @Override\n+    public IntFloatVectorStorage emptySparse(int capacity) {\n     return new IntFloatSparseVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public IntFloatVectorStorage emptySorted(int capacity) {\n+    @Override\n+    public IntFloatVectorStorage emptySorted(int capacity) {\n     return new IntFloatSortedVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public int size() {\n+    @Override\n+    public int size() {\n     return values.length;\n-  }\n+    }\n \n-  public void setSize(int size) {\n-  }\n+    public void setSize(int size) {}\n \n-  @Override\n-  public boolean hasKey(int key) {\n+    @Override\n+    public boolean hasKey(int key) {\n     return (key >= 0 && key < values.length);\n-  }\n+    }\n \n-  @Override\n-  public RowType getType() {\n+    @Override\n+    public RowType getType() {\n     return RowType.T_FLOAT_DENSE;\n-  }\n+    }\n \n-  @Override\n-  public boolean isDense() {\n+    @Override\n+    public boolean isDense() {\n     return flag == 1;\n-  }\n+    }\n \n-  @Override\n-  public boolean isSparse() {\n+    @Override\n+    public boolean isSparse() {\n     return flag == 2;\n-  }\n+    }\n \n-  @Override\n-  public boolean isSorted() {\n+    @Override\n+    public boolean isSorted() {\n     return flag == 4;\n-  }\n+    }\n \n-  @Override\n-  public void clear() {\n+    @Override\n+    public void clear() {\n     for (int i = 0; i < values.length; i++) {\n-      values[i] = 0;\n+        values[i] = 0;\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 132
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/117/IntFloatDenseVectorStorage.java\nindex 95a8056eae..0c7c8074f0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/117/IntFloatDenseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/117/IntFloatDenseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n",
            "diff_size": 1
        }
    ]
}