{
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "144",
                "column": "76",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n    return\n        Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n        Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/43/AvailableFontsResponse.java\nindex bf93e8de45..c3fd2f21cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/43/AvailableFontsResponse.java\n@@ -141,7 +141,7 @@ public class AvailableFontsResponse extends WordsResponse {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n+    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse) o;\n     return\n         Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n         Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/43/AvailableFontsResponse.java\nindex bf93e8de45..17e1a6fe6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/43/AvailableFontsResponse.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,106 +50,110 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"The list of fonts, available for document processing.\")\n public class AvailableFontsResponse extends WordsResponse {\n-    @SerializedName(\"AdditionalFonts\")\n-    private List<FontInfo> additionalFonts = null;\n+  @SerializedName(\"AdditionalFonts\")\n+  private List<FontInfo> additionalFonts = null;\n \n-    @SerializedName(\"CustomFonts\")\n-    private List<FontInfo> customFonts = null;\n+  @SerializedName(\"CustomFonts\")\n+  private List<FontInfo> customFonts = null;\n \n-    @SerializedName(\"SystemFonts\")\n-    private List<FontInfo> systemFonts = null;\n-    public AvailableFontsResponse additionalFonts(List<FontInfo> additionalFonts) {\n-        this.additionalFonts = additionalFonts;\n-        return this;\n-    }\n+  @SerializedName(\"SystemFonts\")\n+  private List<FontInfo> systemFonts = null;\n \n-    public AvailableFontsResponse addAdditionalFontsItem(FontInfo additionalFontsItem) {\n-        if (this.additionalFonts == null) {\n-            this.additionalFonts = new ArrayList<FontInfo>();\n-        }\n-        this.additionalFonts.add(additionalFontsItem);\n-        return this;\n-    }\n+  public AvailableFontsResponse additionalFonts(List<FontInfo> additionalFonts) {\n+    this.additionalFonts = additionalFonts;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets the list of addititional fonts, provided by aspose team.\n-    * @return additionalFonts\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the list of addititional fonts, provided by aspose team.\")\n-    public List<FontInfo> getAdditionalFonts() {\n-        return additionalFonts;\n+  public AvailableFontsResponse addAdditionalFontsItem(FontInfo additionalFontsItem) {\n+    if (this.additionalFonts == null) {\n+      this.additionalFonts = new ArrayList<FontInfo>();\n     }\n+    this.additionalFonts.add(additionalFontsItem);\n+    return this;\n+  }\n \n-    public void setAdditionalFonts(List<FontInfo> additionalFonts) {\n-        this.additionalFonts = additionalFonts;\n-    }\n+  /**\n+   * Gets or sets the list of addititional fonts, provided by aspose team.\n+   *\n+   * @return additionalFonts\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the list of addititional fonts, provided by aspose team.\")\n+  public List<FontInfo> getAdditionalFonts() {\n+    return additionalFonts;\n+  }\n \n-    public AvailableFontsResponse customFonts(List<FontInfo> customFonts) {\n-        this.customFonts = customFonts;\n-        return this;\n-    }\n+  public void setAdditionalFonts(List<FontInfo> additionalFonts) {\n+    this.additionalFonts = additionalFonts;\n+  }\n \n-    public AvailableFontsResponse addCustomFontsItem(FontInfo customFontsItem) {\n-        if (this.customFonts == null) {\n-            this.customFonts = new ArrayList<FontInfo>();\n-        }\n-        this.customFonts.add(customFontsItem);\n-        return this;\n-    }\n+  public AvailableFontsResponse customFonts(List<FontInfo> customFonts) {\n+    this.customFonts = customFonts;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets custom user fonts (from user file storage). To use them, you should specify \"fontsLocation\" parameter in any request.\n-    * @return customFonts\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets custom user fonts (from user file storage). To use them, you should specify \\\"fontsLocation\\\" parameter in any request.\")\n-    public List<FontInfo> getCustomFonts() {\n-        return customFonts;\n+  public AvailableFontsResponse addCustomFontsItem(FontInfo customFontsItem) {\n+    if (this.customFonts == null) {\n+      this.customFonts = new ArrayList<FontInfo>();\n     }\n+    this.customFonts.add(customFontsItem);\n+    return this;\n+  }\n \n-    public void setCustomFonts(List<FontInfo> customFonts) {\n-        this.customFonts = customFonts;\n-    }\n+  /**\n+   * Gets or sets custom user fonts (from user file storage). To use them, you should specify \"fontsLocation\" parameter in any request.\n+   *\n+   * @return customFonts\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets custom user fonts (from user file storage). To use them, you should specify \\\"fontsLocation\\\" parameter in any request.\")\n+  public List<FontInfo> getCustomFonts() {\n+    return customFonts;\n+  }\n \n-    public AvailableFontsResponse systemFonts(List<FontInfo> systemFonts) {\n-        this.systemFonts = systemFonts;\n-        return this;\n-    }\n+  public void setCustomFonts(List<FontInfo> customFonts) {\n+    this.customFonts = customFonts;\n+  }\n \n-    public AvailableFontsResponse addSystemFontsItem(FontInfo systemFontsItem) {\n-        if (this.systemFonts == null) {\n-            this.systemFonts = new ArrayList<FontInfo>();\n-        }\n-        this.systemFonts.add(systemFontsItem);\n-        return this;\n-    }\n+  public AvailableFontsResponse systemFonts(List<FontInfo> systemFonts) {\n+    this.systemFonts = systemFonts;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets the list of system fonts, availiable on the server.\n-    * @return systemFonts\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the list of system fonts, availiable on the server.\")\n-    public List<FontInfo> getSystemFonts() {\n-        return systemFonts;\n+  public AvailableFontsResponse addSystemFontsItem(FontInfo systemFontsItem) {\n+    if (this.systemFonts == null) {\n+      this.systemFonts = new ArrayList<FontInfo>();\n     }\n+    this.systemFonts.add(systemFontsItem);\n+    return this;\n+  }\n \n-    public void setSystemFonts(List<FontInfo> systemFonts) {\n-        this.systemFonts = systemFonts;\n-    }\n+  /**\n+   * Gets or sets the list of system fonts, availiable on the server.\n+   *\n+   * @return systemFonts\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the list of system fonts, availiable on the server.\")\n+  public List<FontInfo> getSystemFonts() {\n+    return systemFonts;\n+  }\n+\n+  public void setSystemFonts(List<FontInfo> systemFonts) {\n+    this.systemFonts = systemFonts;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse) o;\n     return\n         Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n-        Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n-        Objects.equals(this.systemFonts, availableFontsResponse.systemFonts) &&\n-        super.equals(o);\n+            Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n+            Objects.equals(this.systemFonts, availableFontsResponse.systemFonts) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 117
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "146",
                    "column": "72",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/43/AvailableFontsResponse.java\nindex bf93e8de45..2e952199f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/43/AvailableFontsResponse.java\n@@ -55,10 +55,11 @@ public class AvailableFontsResponse extends WordsResponse {\n \n     @SerializedName(\"SystemFonts\")\n     private List<FontInfo> systemFonts = null;\n-    public AvailableFontsResponse additionalFonts(List<FontInfo> additionalFonts) {\n+\n+public AvailableFontsResponse additionalFonts(List<FontInfo> additionalFonts) {\n         this.additionalFonts = additionalFonts;\n         return this;\n-    }\n+  }\n \n     public AvailableFontsResponse addAdditionalFontsItem(FontInfo additionalFontsItem) {\n         if (this.additionalFonts == null) {\n@@ -84,7 +85,7 @@ public class AvailableFontsResponse extends WordsResponse {\n     public AvailableFontsResponse customFonts(List<FontInfo> customFonts) {\n         this.customFonts = customFonts;\n         return this;\n-    }\n+  }\n \n     public AvailableFontsResponse addCustomFontsItem(FontInfo customFontsItem) {\n         if (this.customFonts == null) {\n@@ -110,7 +111,7 @@ public class AvailableFontsResponse extends WordsResponse {\n     public AvailableFontsResponse systemFonts(List<FontInfo> systemFonts) {\n         this.systemFonts = systemFonts;\n         return this;\n-    }\n+  }\n \n     public AvailableFontsResponse addSystemFontsItem(FontInfo systemFontsItem) {\n         if (this.systemFonts == null) {\n@@ -137,13 +138,13 @@ public class AvailableFontsResponse extends WordsResponse {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n-    return\n-        Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n+\n+AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n+    return Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n         Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n         Objects.equals(this.systemFonts, availableFontsResponse.systemFonts) &&\n         super.equals(o);\n@@ -176,4 +177,4 @@ public class AvailableFontsResponse extends WordsResponse {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/43/AvailableFontsResponse.java\nindex bf93e8de45..4883c34b9d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/43/AvailableFontsResponse.java\n@@ -45,7 +45,10 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * The list of fonts, available for document processing.\n  */\n+\n+\n @ApiModel(description = \"The list of fonts, available for document processing.\")\n+\n public class AvailableFontsResponse extends WordsResponse {\n     @SerializedName(\"AdditionalFonts\")\n     private List<FontInfo> additionalFonts = null;\n@@ -55,107 +58,127 @@ public class AvailableFontsResponse extends WordsResponse {\n \n     @SerializedName(\"SystemFonts\")\n     private List<FontInfo> systemFonts = null;\n+\n     public AvailableFontsResponse additionalFonts(List<FontInfo> additionalFonts) {\n-        this.additionalFonts = additionalFonts;\n-        return this;\n+    this.additionalFonts = additionalFonts;\n+    return this;\n     }\n \n+\n     public AvailableFontsResponse addAdditionalFontsItem(FontInfo additionalFontsItem) {\n-        if (this.additionalFonts == null) {\n-            this.additionalFonts = new ArrayList<FontInfo>();\n-        }\n-        this.additionalFonts.add(additionalFontsItem);\n-        return this;\n+    if (this.additionalFonts == null) {\n+        this.additionalFonts = new ArrayList<FontInfo>();\n+    }\n+    this.additionalFonts.add(additionalFontsItem);\n+    return this;\n     }\n \n     /**\n      * Gets or sets the list of addititional fonts, provided by aspose team.\n     * @return additionalFonts\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the list of addititional fonts, provided by aspose team.\")\n     public List<FontInfo> getAdditionalFonts() {\n-        return additionalFonts;\n+    return additionalFonts;\n     }\n \n+\n     public void setAdditionalFonts(List<FontInfo> additionalFonts) {\n-        this.additionalFonts = additionalFonts;\n+    this.additionalFonts = additionalFonts;\n     }\n \n+\n     public AvailableFontsResponse customFonts(List<FontInfo> customFonts) {\n-        this.customFonts = customFonts;\n-        return this;\n+    this.customFonts = customFonts;\n+    return this;\n     }\n \n+\n     public AvailableFontsResponse addCustomFontsItem(FontInfo customFontsItem) {\n-        if (this.customFonts == null) {\n-            this.customFonts = new ArrayList<FontInfo>();\n-        }\n-        this.customFonts.add(customFontsItem);\n-        return this;\n+    if (this.customFonts == null) {\n+        this.customFonts = new ArrayList<FontInfo>();\n+    }\n+    this.customFonts.add(customFontsItem);\n+    return this;\n     }\n \n     /**\n      * Gets or sets custom user fonts (from user file storage). To use them, you should specify \"fontsLocation\" parameter in any request.\n     * @return customFonts\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets custom user fonts (from user file storage). To use them, you should specify \\\"fontsLocation\\\" parameter in any request.\")\n     public List<FontInfo> getCustomFonts() {\n-        return customFonts;\n+    return customFonts;\n     }\n \n+\n     public void setCustomFonts(List<FontInfo> customFonts) {\n-        this.customFonts = customFonts;\n+    this.customFonts = customFonts;\n     }\n \n+\n     public AvailableFontsResponse systemFonts(List<FontInfo> systemFonts) {\n-        this.systemFonts = systemFonts;\n-        return this;\n+    this.systemFonts = systemFonts;\n+    return this;\n     }\n \n+\n     public AvailableFontsResponse addSystemFontsItem(FontInfo systemFontsItem) {\n-        if (this.systemFonts == null) {\n-            this.systemFonts = new ArrayList<FontInfo>();\n-        }\n-        this.systemFonts.add(systemFontsItem);\n-        return this;\n+    if (this.systemFonts == null) {\n+        this.systemFonts = new ArrayList<FontInfo>();\n+    }\n+    this.systemFonts.add(systemFontsItem);\n+    return this;\n     }\n \n     /**\n      * Gets or sets the list of system fonts, availiable on the server.\n     * @return systemFonts\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the list of system fonts, availiable on the server.\")\n     public List<FontInfo> getSystemFonts() {\n-        return systemFonts;\n+    return systemFonts;\n     }\n \n+\n     public void setSystemFonts(List<FontInfo> systemFonts) {\n-        this.systemFonts = systemFonts;\n+    this.systemFonts = systemFonts;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n-    return\n-        Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n+\n+        AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse) o;\n+        return Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n         Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n-        Objects.equals(this.systemFonts, availableFontsResponse.systemFonts) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.systemFonts, availableFontsResponse.systemFonts) &&\n+            super.equals(o);\n+    }\n \n-  @Override\n-  public int hashCode() {\n+\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(additionalFonts, customFonts, systemFonts, super.hashCode());\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class AvailableFontsResponse {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -164,16 +187,18 @@ public class AvailableFontsResponse extends WordsResponse {\n     sb.append(\"    systemFonts: \").append(toIndentedString(systemFonts)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/43/AvailableFontsResponse.java\nindex bf93e8de45..c3fd2f21cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/43/AvailableFontsResponse.java\n@@ -141,7 +141,7 @@ public class AvailableFontsResponse extends WordsResponse {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n+    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse) o;\n     return\n         Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n         Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/43/AvailableFontsResponse.java\nindex bf93e8de45..dc4c38bf15 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/43/AvailableFontsResponse.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/43/AvailableFontsResponse.java\n@@ -141,7 +141,8 @@ public class AvailableFontsResponse extends WordsResponse {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse)o;\n+    AvailableFontsResponse availableFontsResponse = (AvailableFontsResponse\n+) o;\n     return\n         Objects.equals(this.additionalFonts, availableFontsResponse.additionalFonts) &&\n         Objects.equals(this.customFonts, availableFontsResponse.customFonts) &&\n",
            "diff_size": 2
        }
    ]
}