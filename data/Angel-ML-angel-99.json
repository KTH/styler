{
    "error_id": "99",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "847",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/99/UpdatePSFTest.java\nindex a00182a6d0..9c23f38853 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/99/UpdatePSFTest.java\n@@ -81,1184 +81,1198 @@ import org.junit.Test;\n \n public class UpdatePSFTest {\n \n-  public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n-  public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n-  public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n-  public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n-\n-  public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n-  public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n-  public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n-  public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n-\n-  public static String DENSE_INT_MAT = \"dense_int_mat\";\n-  public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n-  public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n-  public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n-\n-  public static String DENSE_LONG_MAT = \"dense_long_mat\";\n-  public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n-  public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n-  public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n-\n-  public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n-  public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n-  public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n-\n-  public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n-  public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n-  public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n-\n-  public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n-  public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n-  public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n-\n-  public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n-  public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n-\n-  private static final Log LOG = LogFactory.getLog(GetRowTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100;\n-  int nnz = 10;\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @Before\n-  public void setup() throws Exception {\n-    // set basic configuration keys\n-    Configuration conf = new Configuration();\n-    conf.setBoolean(\"mapred.mapper.new-api\", true);\n-    conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-    conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n-\n-    // use local deploy mode and dummy dataspliter\n-    conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-    conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n-    conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n-    conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n-    conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n-    conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setBoolean(\"use.new.split\", true);\n-    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);\n-\n-    // get a angel client\n-    angelClient = AngelClientFactory.get(conf);\n-\n-    // add dense double matrix\n-    MatrixContext dMat = new MatrixContext();\n-    dMat.setName(DENSE_DOUBLE_MAT);\n-    dMat.setRowNum(1);\n-    dMat.setColNum(feaNum);\n-    dMat.setMaxColNumInBlock(feaNum / 3);\n-    dMat.setRowType(RowType.T_DOUBLE_DENSE);\n-    angelClient.addMatrix(dMat);\n-\n-    // add comp dense double matrix\n-    MatrixContext dcMat = new MatrixContext();\n-    dcMat.setName(DENSE_DOUBLE_MAT_COMP);\n-    dcMat.setRowNum(1);\n-    dcMat.setColNum(feaNum);\n-    dcMat.setMaxColNumInBlock(feaNum / 3);\n-    dcMat.setRowType(RowType.T_DOUBLE_DENSE_COMPONENT);\n-    angelClient.addMatrix(dcMat);\n-\n-    // add sparse double matrix\n-    MatrixContext sMat = new MatrixContext();\n-    sMat.setName(SPARSE_DOUBLE_MAT);\n-    sMat.setRowNum(1);\n-    sMat.setColNum(feaNum);\n-    sMat.setMaxColNumInBlock(feaNum);\n-    sMat.setRowType(RowType.T_DOUBLE_SPARSE);\n-    angelClient.addMatrix(sMat);\n-\n-    // add component sparse double matrix\n-    MatrixContext sCompMat = new MatrixContext();\n-    sCompMat.setName(SPARSE_DOUBLE_MAT_COMP);\n-    sCompMat.setRowNum(1);\n-    sCompMat.setColNum(feaNum);\n-    sCompMat.setMaxColNumInBlock(feaNum / 3);\n-    sCompMat.setRowType(RowType.T_DOUBLE_SPARSE_COMPONENT);\n-    angelClient.addMatrix(sCompMat);\n-\n-    // add dense float matrix\n-    MatrixContext dfMat = new MatrixContext();\n-    dfMat.setName(DENSE_FLOAT_MAT);\n-    dfMat.setRowNum(1);\n-    dfMat.setColNum(feaNum);\n-    dfMat.setMaxColNumInBlock(feaNum / 3);\n-    dfMat.setRowType(RowType.T_FLOAT_DENSE);\n-    angelClient.addMatrix(dfMat);\n-\n-    // add comp dense float matrix\n-    MatrixContext dcfMat = new MatrixContext();\n-    dcfMat.setName(DENSE_FLOAT_MAT_COMP);\n-    dcfMat.setRowNum(1);\n-    dcfMat.setColNum(feaNum);\n-    dcfMat.setMaxColNumInBlock(feaNum / 3);\n-    dcfMat.setRowType(RowType.T_FLOAT_DENSE_COMPONENT);\n-    angelClient.addMatrix(dcfMat);\n-\n-    // add sparse float matrix\n-    MatrixContext sfMat = new MatrixContext();\n-    sfMat.setName(SPARSE_FLOAT_MAT);\n-    sfMat.setRowNum(1);\n-    sfMat.setColNum(feaNum);\n-    sfMat.setMaxColNumInBlock(feaNum / 3);\n-    sfMat.setRowType(RowType.T_FLOAT_SPARSE);\n-    angelClient.addMatrix(sfMat);\n-\n-    // add component sparse float matrix\n-    MatrixContext sfCompMat = new MatrixContext();\n-    sfCompMat.setName(SPARSE_FLOAT_MAT_COMP);\n-    sfCompMat.setRowNum(1);\n-    sfCompMat.setColNum(feaNum);\n-    sfCompMat.setMaxColNumInBlock(feaNum / 3);\n-    sfCompMat.setRowType(RowType.T_FLOAT_SPARSE_COMPONENT);\n-    angelClient.addMatrix(sfCompMat);\n-\n-    // add dense float matrix\n-    MatrixContext diMat = new MatrixContext();\n-    diMat.setName(DENSE_INT_MAT);\n-    diMat.setRowNum(1);\n-    diMat.setColNum(feaNum);\n-    diMat.setMaxColNumInBlock(feaNum / 3);\n-    diMat.setRowType(RowType.T_INT_DENSE);\n-    angelClient.addMatrix(diMat);\n-\n-    // add comp dense float matrix\n-    MatrixContext dciMat = new MatrixContext();\n-    dciMat.setName(DENSE_INT_MAT_COMP);\n-    dciMat.setRowNum(1);\n-    dciMat.setColNum(feaNum);\n-    dciMat.setMaxColNumInBlock(feaNum / 3);\n-    dciMat.setRowType(RowType.T_INT_DENSE_COMPONENT);\n-    angelClient.addMatrix(dciMat);\n-\n-    // add sparse float matrix\n-    MatrixContext siMat = new MatrixContext();\n-    siMat.setName(SPARSE_INT_MAT);\n-    siMat.setRowNum(1);\n-    siMat.setColNum(feaNum);\n-    siMat.setMaxColNumInBlock(feaNum / 3);\n-    siMat.setRowType(RowType.T_INT_SPARSE);\n-    angelClient.addMatrix(siMat);\n-\n-    // add component sparse float matrix\n-    MatrixContext siCompMat = new MatrixContext();\n-    siCompMat.setName(SPARSE_INT_MAT_COMP);\n-    siCompMat.setRowNum(1);\n-    siCompMat.setColNum(feaNum);\n-    siCompMat.setMaxColNumInBlock(feaNum / 3);\n-    siCompMat.setRowType(RowType.T_INT_SPARSE_COMPONENT);\n-    angelClient.addMatrix(siCompMat);\n-\n-    // add dense long matrix\n-    MatrixContext dlMat = new MatrixContext();\n-    dlMat.setName(DENSE_LONG_MAT);\n-    dlMat.setRowNum(1);\n-    dlMat.setColNum(feaNum);\n-    dlMat.setMaxColNumInBlock(feaNum / 3);\n-    dlMat.setRowType(RowType.T_LONG_DENSE);\n-    angelClient.addMatrix(dlMat);\n-\n-    // add comp dense long matrix\n-    MatrixContext dclMat = new MatrixContext();\n-    dclMat.setName(DENSE_LONG_MAT_COMP);\n-    dclMat.setRowNum(1);\n-    dclMat.setColNum(feaNum);\n-    dclMat.setMaxColNumInBlock(feaNum / 3);\n-    dclMat.setRowType(RowType.T_LONG_DENSE_COMPONENT);\n-    angelClient.addMatrix(dclMat);\n-\n-    // add sparse long matrix\n-    MatrixContext slMat = new MatrixContext();\n-    slMat.setName(SPARSE_LONG_MAT);\n-    slMat.setRowNum(1);\n-    slMat.setColNum(feaNum);\n-    slMat.setMaxColNumInBlock(feaNum / 3);\n-    slMat.setRowType(RowType.T_LONG_SPARSE);\n-    angelClient.addMatrix(slMat);\n-\n-    // add component sparse long matrix\n-    MatrixContext slcMat = new MatrixContext();\n-    slcMat.setName(SPARSE_LONG_MAT_COMP);\n-    slcMat.setRowNum(1);\n-    slcMat.setColNum(feaNum);\n-    slcMat.setMaxColNumInBlock(feaNum / 3);\n-    slcMat.setRowType(RowType.T_LONG_SPARSE_COMPONENT);\n-    angelClient.addMatrix(slcMat);\n-\n-    // add comp dense long double matrix\n-    MatrixContext dldcMatrix = new MatrixContext();\n-    dldcMatrix.setName(DENSE_DOUBLE_LONG_MAT_COMP);\n-    dldcMatrix.setRowNum(1);\n-    dldcMatrix.setColNum(feaNum);\n-    dldcMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dldcMatrix.setRowType(RowType.T_DOUBLE_DENSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(dldcMatrix);\n-\n-    // add sparse long-key double matrix\n-    MatrixContext dLongKeysMatrix = new MatrixContext();\n-    dLongKeysMatrix.setName(SPARSE_DOUBLE_LONG_MAT);\n-    dLongKeysMatrix.setRowNum(1);\n-    dLongKeysMatrix.setColNum(feaNum);\n-    dLongKeysMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dLongKeysMatrix.setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY);\n-    angelClient.addMatrix(dLongKeysMatrix);\n-\n-    // add component long-key sparse double matrix\n-    MatrixContext dLongKeysCompMatrix = new MatrixContext();\n-    dLongKeysCompMatrix.setName(SPARSE_DOUBLE_LONG_MAT_COMP);\n-    dLongKeysCompMatrix.setRowNum(1);\n-    dLongKeysCompMatrix.setColNum(feaNum);\n-    dLongKeysCompMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dLongKeysCompMatrix.setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(dLongKeysCompMatrix);\n-\n-    // add component long-key sparse float matrix\n-    MatrixContext dlfcMatrix = new MatrixContext();\n-    dlfcMatrix.setName(DENSE_FLOAT_LONG_MAT_COMP);\n-    dlfcMatrix.setRowNum(1);\n-    dlfcMatrix.setColNum(feaNum);\n-    dlfcMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dlfcMatrix.setRowType(RowType.T_FLOAT_DENSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(dlfcMatrix);\n-\n-    // add sparse long-key float matrix\n-    MatrixContext slfMatrix = new MatrixContext();\n-    slfMatrix.setName(SPARSE_FLOAT_LONG_MAT);\n-    slfMatrix.setRowNum(1);\n-    slfMatrix.setColNum(feaNum);\n-    slfMatrix.setMaxColNumInBlock(feaNum / 3);\n-    slfMatrix.setRowType(RowType.T_FLOAT_SPARSE_LONGKEY);\n-    angelClient.addMatrix(slfMatrix);\n-\n-    // add component long-key sparse float matrix\n-    MatrixContext slfcMatrix = new MatrixContext();\n-    slfcMatrix.setName(SPARSE_FLOAT_LONG_MAT_COMP);\n-    slfcMatrix.setRowNum(1);\n-    slfcMatrix.setColNum(feaNum);\n-    slfcMatrix.setMaxColNumInBlock(feaNum / 3);\n-    slfcMatrix.setRowType(RowType.T_FLOAT_SPARSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(slfcMatrix);\n-\n-    // add component long-key sparse int matrix\n-    MatrixContext dlicMatrix = new MatrixContext();\n-    dlicMatrix.setName(DENSE_INT_LONG_MAT_COMP);\n-    dlicMatrix.setRowNum(1);\n-    dlicMatrix.setColNum(feaNum);\n-    dlicMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dlicMatrix.setRowType(RowType.T_INT_DENSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(dlicMatrix);\n-\n-    // add sparse long-key int matrix\n-    MatrixContext sliMatrix = new MatrixContext();\n-    sliMatrix.setName(SPARSE_INT_LONG_MAT);\n-    sliMatrix.setRowNum(1);\n-    sliMatrix.setColNum(feaNum);\n-    sliMatrix.setMaxColNumInBlock(feaNum / 3);\n-    sliMatrix.setRowType(RowType.T_INT_SPARSE_LONGKEY);\n-    angelClient.addMatrix(sliMatrix);\n-\n-    // add component long-key sparse int matrix\n-    MatrixContext slicMatrix = new MatrixContext();\n-    slicMatrix.setName(SPARSE_INT_LONG_MAT_COMP);\n-    slicMatrix.setRowNum(1);\n-    slicMatrix.setColNum(feaNum);\n-    slicMatrix.setMaxColNumInBlock(feaNum / 3);\n-    slicMatrix.setRowType(RowType.T_INT_SPARSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(slicMatrix);\n-\n-    // add component long-key sparse long matrix\n-    MatrixContext dllcMatrix = new MatrixContext();\n-    dllcMatrix.setName(DENSE_LONG_LONG_MAT_COMP);\n-    dllcMatrix.setRowNum(1);\n-    dllcMatrix.setColNum(feaNum);\n-    dllcMatrix.setMaxColNumInBlock(feaNum / 3);\n-    dllcMatrix.setRowType(RowType.T_LONG_DENSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(dllcMatrix);\n-\n-    // add sparse long-key long matrix\n-    MatrixContext sllMatrix = new MatrixContext();\n-    sllMatrix.setName(SPARSE_LONG_LONG_MAT);\n-    sllMatrix.setRowNum(1);\n-    sllMatrix.setColNum(feaNum);\n-    sllMatrix.setMaxColNumInBlock(feaNum / 3);\n-    sllMatrix.setRowType(RowType.T_LONG_SPARSE_LONGKEY);\n-    angelClient.addMatrix(sllMatrix);\n-\n-    // add component long-key sparse long matrix\n-    MatrixContext sllcMatrix = new MatrixContext();\n-    sllcMatrix.setName(SPARSE_LONG_LONG_MAT_COMP);\n-    sllcMatrix.setRowNum(1);\n-    sllcMatrix.setColNum(feaNum);\n-    sllcMatrix.setMaxColNumInBlock(feaNum / 3);\n-    sllcMatrix.setRowType(RowType.T_LONG_SPARSE_LONGKEY_COMPONENT);\n-    angelClient.addMatrix(sllcMatrix);\n-\n-    // Start PS\n-    angelClient.startPSServer();\n-    // Start to run application\n-    angelClient.run();\n-\n-    Thread.sleep(5000);\n-\n-    psId = new ParameterServerId(0);\n-    psAttempt0Id = new PSAttemptId(psId, 0);\n-\n-    WorkerGroupId workerGroupId = new WorkerGroupId(0);\n-    workerId = new WorkerId(workerGroupId, 0);\n-    workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n-\n-  @Test\n-  public void test() throws Exception {\n-    testDenseDoubleUDF();\n-    testSparseDoubleUDF();\n-\n-    testDenseDoubleCompUDF();\n-    testSparseDoubleCompUDF();\n-\n-    testDenseFloatUDF();\n-    testSparseFloatUDF();\n-\n-    testDenseFloatCompUDF();\n-    testSparseFloatCompUDF();\n-\n-    testDenseIntUDF();\n-    testSparseIntUDF();\n-\n-    testDenseIntCompUDF();\n-    testSparseIntCompUDF();\n-\n-    testDenseLongUDF();\n-    testSparseLongUDF();\n-\n-    testDenseLongCompUDF();\n-    testSparseLongCompUDF();\n-\n-    testSparseDoubleLongKeyUDF();\n-    testSparseDoubleLongKeyCompUDF();\n-\n-    testSparseFloatLongKeyUDF();\n-    testSparseFloatLongKeyCompUDF();\n-\n-    testSparseIntLongKeyUDF();\n-    testSparseIntLongKeyCompUDF();\n-\n-    testSparseLongLongKeyUDF();\n-    testSparseLongLongKeyCompUDF();\n-  }\n-\n-\n-  public void testSparseDoubleLongKeyUDF() throws Exception {\n-\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-\n-    long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongDoubleVector deltaVec =\n-        new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+    public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+    public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+    public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+    public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n+\n+    public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+    public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+    public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+    public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n+\n+    public static String DENSE_INT_MAT = \"dense_int_mat\";\n+    public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+    public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+    public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n+\n+    public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+    public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+    public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+    public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n+\n+    public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+    public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+    public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n+\n+    public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+    public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+    public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n+\n+    public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+    public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+    public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n+\n+    public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+    public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n+    public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n+\n+    private static final Log LOG = LogFactory.getLog(GetRowTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100;\n+    int nnz = 10;\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n-    //client1.clock().get();\n-\n-    LongDoubleVector row = (LongDoubleVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+    @Before\n+    public void setup() throws Exception {\n+        // set basic configuration keys\n+        Configuration conf = new Configuration();\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n+\n+        // use local deploy mode and dummy dataspliter\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n+        conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n+\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n+\n+        conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n+        conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setBoolean(\"use.new.split\", true);\n+        conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);\n+\n+        // get a angel client\n+        angelClient = AngelClientFactory.get(conf);\n+\n+        // add dense double matrix\n+        MatrixContext dMat = new MatrixContext();\n+        dMat.setName(DENSE_DOUBLE_MAT);\n+        dMat.setRowNum(1);\n+        dMat.setColNum(feaNum);\n+        dMat.setMaxColNumInBlock(feaNum / 3);\n+        dMat.setRowType(RowType.T_DOUBLE_DENSE);\n+        angelClient.addMatrix(dMat);\n+\n+        // add comp dense double matrix\n+        MatrixContext dcMat = new MatrixContext();\n+        dcMat.setName(DENSE_DOUBLE_MAT_COMP);\n+        dcMat.setRowNum(1);\n+        dcMat.setColNum(feaNum);\n+        dcMat.setMaxColNumInBlock(feaNum / 3);\n+        dcMat.setRowType(RowType.T_DOUBLE_DENSE_COMPONENT);\n+        angelClient.addMatrix(dcMat);\n+\n+        // add sparse double matrix\n+        MatrixContext sMat = new MatrixContext();\n+        sMat.setName(SPARSE_DOUBLE_MAT);\n+        sMat.setRowNum(1);\n+        sMat.setColNum(feaNum);\n+        sMat.setMaxColNumInBlock(feaNum);\n+        sMat.setRowType(RowType.T_DOUBLE_SPARSE);\n+        angelClient.addMatrix(sMat);\n+\n+        // add component sparse double matrix\n+        MatrixContext sCompMat = new MatrixContext();\n+        sCompMat.setName(SPARSE_DOUBLE_MAT_COMP);\n+        sCompMat.setRowNum(1);\n+        sCompMat.setColNum(feaNum);\n+        sCompMat.setMaxColNumInBlock(feaNum / 3);\n+        sCompMat.setRowType(RowType.T_DOUBLE_SPARSE_COMPONENT);\n+        angelClient.addMatrix(sCompMat);\n+\n+        // add dense float matrix\n+        MatrixContext dfMat = new MatrixContext();\n+        dfMat.setName(DENSE_FLOAT_MAT);\n+        dfMat.setRowNum(1);\n+        dfMat.setColNum(feaNum);\n+        dfMat.setMaxColNumInBlock(feaNum / 3);\n+        dfMat.setRowType(RowType.T_FLOAT_DENSE);\n+        angelClient.addMatrix(dfMat);\n+\n+        // add comp dense float matrix\n+        MatrixContext dcfMat = new MatrixContext();\n+        dcfMat.setName(DENSE_FLOAT_MAT_COMP);\n+        dcfMat.setRowNum(1);\n+        dcfMat.setColNum(feaNum);\n+        dcfMat.setMaxColNumInBlock(feaNum / 3);\n+        dcfMat.setRowType(RowType.T_FLOAT_DENSE_COMPONENT);\n+        angelClient.addMatrix(dcfMat);\n+\n+        // add sparse float matrix\n+        MatrixContext sfMat = new MatrixContext();\n+        sfMat.setName(SPARSE_FLOAT_MAT);\n+        sfMat.setRowNum(1);\n+        sfMat.setColNum(feaNum);\n+        sfMat.setMaxColNumInBlock(feaNum / 3);\n+        sfMat.setRowType(RowType.T_FLOAT_SPARSE);\n+        angelClient.addMatrix(sfMat);\n+\n+        // add component sparse float matrix\n+        MatrixContext sfCompMat = new MatrixContext();\n+        sfCompMat.setName(SPARSE_FLOAT_MAT_COMP);\n+        sfCompMat.setRowNum(1);\n+        sfCompMat.setColNum(feaNum);\n+        sfCompMat.setMaxColNumInBlock(feaNum / 3);\n+        sfCompMat.setRowType(RowType.T_FLOAT_SPARSE_COMPONENT);\n+        angelClient.addMatrix(sfCompMat);\n+\n+        // add dense float matrix\n+        MatrixContext diMat = new MatrixContext();\n+        diMat.setName(DENSE_INT_MAT);\n+        diMat.setRowNum(1);\n+        diMat.setColNum(feaNum);\n+        diMat.setMaxColNumInBlock(feaNum / 3);\n+        diMat.setRowType(RowType.T_INT_DENSE);\n+        angelClient.addMatrix(diMat);\n+\n+        // add comp dense float matrix\n+        MatrixContext dciMat = new MatrixContext();\n+        dciMat.setName(DENSE_INT_MAT_COMP);\n+        dciMat.setRowNum(1);\n+        dciMat.setColNum(feaNum);\n+        dciMat.setMaxColNumInBlock(feaNum / 3);\n+        dciMat.setRowType(RowType.T_INT_DENSE_COMPONENT);\n+        angelClient.addMatrix(dciMat);\n+\n+        // add sparse float matrix\n+        MatrixContext siMat = new MatrixContext();\n+        siMat.setName(SPARSE_INT_MAT);\n+        siMat.setRowNum(1);\n+        siMat.setColNum(feaNum);\n+        siMat.setMaxColNumInBlock(feaNum / 3);\n+        siMat.setRowType(RowType.T_INT_SPARSE);\n+        angelClient.addMatrix(siMat);\n+\n+        // add component sparse float matrix\n+        MatrixContext siCompMat = new MatrixContext();\n+        siCompMat.setName(SPARSE_INT_MAT_COMP);\n+        siCompMat.setRowNum(1);\n+        siCompMat.setColNum(feaNum);\n+        siCompMat.setMaxColNumInBlock(feaNum / 3);\n+        siCompMat.setRowType(RowType.T_INT_SPARSE_COMPONENT);\n+        angelClient.addMatrix(siCompMat);\n+\n+        // add dense long matrix\n+        MatrixContext dlMat = new MatrixContext();\n+        dlMat.setName(DENSE_LONG_MAT);\n+        dlMat.setRowNum(1);\n+        dlMat.setColNum(feaNum);\n+        dlMat.setMaxColNumInBlock(feaNum / 3);\n+        dlMat.setRowType(RowType.T_LONG_DENSE);\n+        angelClient.addMatrix(dlMat);\n+\n+        // add comp dense long matrix\n+        MatrixContext dclMat = new MatrixContext();\n+        dclMat.setName(DENSE_LONG_MAT_COMP);\n+        dclMat.setRowNum(1);\n+        dclMat.setColNum(feaNum);\n+        dclMat.setMaxColNumInBlock(feaNum / 3);\n+        dclMat.setRowType(RowType.T_LONG_DENSE_COMPONENT);\n+        angelClient.addMatrix(dclMat);\n+\n+        // add sparse long matrix\n+        MatrixContext slMat = new MatrixContext();\n+        slMat.setName(SPARSE_LONG_MAT);\n+        slMat.setRowNum(1);\n+        slMat.setColNum(feaNum);\n+        slMat.setMaxColNumInBlock(feaNum / 3);\n+        slMat.setRowType(RowType.T_LONG_SPARSE);\n+        angelClient.addMatrix(slMat);\n+\n+        // add component sparse long matrix\n+        MatrixContext slcMat = new MatrixContext();\n+        slcMat.setName(SPARSE_LONG_MAT_COMP);\n+        slcMat.setRowNum(1);\n+        slcMat.setColNum(feaNum);\n+        slcMat.setMaxColNumInBlock(feaNum / 3);\n+        slcMat.setRowType(RowType.T_LONG_SPARSE_COMPONENT);\n+        angelClient.addMatrix(slcMat);\n+\n+        // add comp dense long double matrix\n+        MatrixContext dldcMatrix = new MatrixContext();\n+        dldcMatrix.setName(DENSE_DOUBLE_LONG_MAT_COMP);\n+        dldcMatrix.setRowNum(1);\n+        dldcMatrix.setColNum(feaNum);\n+        dldcMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dldcMatrix.setRowType(RowType.T_DOUBLE_DENSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(dldcMatrix);\n+\n+        // add sparse long-key double matrix\n+        MatrixContext dLongKeysMatrix = new MatrixContext();\n+        dLongKeysMatrix.setName(SPARSE_DOUBLE_LONG_MAT);\n+        dLongKeysMatrix.setRowNum(1);\n+        dLongKeysMatrix.setColNum(feaNum);\n+        dLongKeysMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dLongKeysMatrix.setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY);\n+        angelClient.addMatrix(dLongKeysMatrix);\n+\n+        // add component long-key sparse double matrix\n+        MatrixContext dLongKeysCompMatrix = new MatrixContext();\n+        dLongKeysCompMatrix.setName(SPARSE_DOUBLE_LONG_MAT_COMP);\n+        dLongKeysCompMatrix.setRowNum(1);\n+        dLongKeysCompMatrix.setColNum(feaNum);\n+        dLongKeysCompMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dLongKeysCompMatrix.setRowType(RowType.T_DOUBLE_SPARSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(dLongKeysCompMatrix);\n+\n+        // add component long-key sparse float matrix\n+        MatrixContext dlfcMatrix = new MatrixContext();\n+        dlfcMatrix.setName(DENSE_FLOAT_LONG_MAT_COMP);\n+        dlfcMatrix.setRowNum(1);\n+        dlfcMatrix.setColNum(feaNum);\n+        dlfcMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dlfcMatrix.setRowType(RowType.T_FLOAT_DENSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(dlfcMatrix);\n+\n+        // add sparse long-key float matrix\n+        MatrixContext slfMatrix = new MatrixContext();\n+        slfMatrix.setName(SPARSE_FLOAT_LONG_MAT);\n+        slfMatrix.setRowNum(1);\n+        slfMatrix.setColNum(feaNum);\n+        slfMatrix.setMaxColNumInBlock(feaNum / 3);\n+        slfMatrix.setRowType(RowType.T_FLOAT_SPARSE_LONGKEY);\n+        angelClient.addMatrix(slfMatrix);\n+\n+        // add component long-key sparse float matrix\n+        MatrixContext slfcMatrix = new MatrixContext();\n+        slfcMatrix.setName(SPARSE_FLOAT_LONG_MAT_COMP);\n+        slfcMatrix.setRowNum(1);\n+        slfcMatrix.setColNum(feaNum);\n+        slfcMatrix.setMaxColNumInBlock(feaNum / 3);\n+        slfcMatrix.setRowType(RowType.T_FLOAT_SPARSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(slfcMatrix);\n+\n+        // add component long-key sparse int matrix\n+        MatrixContext dlicMatrix = new MatrixContext();\n+        dlicMatrix.setName(DENSE_INT_LONG_MAT_COMP);\n+        dlicMatrix.setRowNum(1);\n+        dlicMatrix.setColNum(feaNum);\n+        dlicMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dlicMatrix.setRowType(RowType.T_INT_DENSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(dlicMatrix);\n+\n+        // add sparse long-key int matrix\n+        MatrixContext sliMatrix = new MatrixContext();\n+        sliMatrix.setName(SPARSE_INT_LONG_MAT);\n+        sliMatrix.setRowNum(1);\n+        sliMatrix.setColNum(feaNum);\n+        sliMatrix.setMaxColNumInBlock(feaNum / 3);\n+        sliMatrix.setRowType(RowType.T_INT_SPARSE_LONGKEY);\n+        angelClient.addMatrix(sliMatrix);\n+\n+        // add component long-key sparse int matrix\n+        MatrixContext slicMatrix = new MatrixContext();\n+        slicMatrix.setName(SPARSE_INT_LONG_MAT_COMP);\n+        slicMatrix.setRowNum(1);\n+        slicMatrix.setColNum(feaNum);\n+        slicMatrix.setMaxColNumInBlock(feaNum / 3);\n+        slicMatrix.setRowType(RowType.T_INT_SPARSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(slicMatrix);\n+\n+        // add component long-key sparse long matrix\n+        MatrixContext dllcMatrix = new MatrixContext();\n+        dllcMatrix.setName(DENSE_LONG_LONG_MAT_COMP);\n+        dllcMatrix.setRowNum(1);\n+        dllcMatrix.setColNum(feaNum);\n+        dllcMatrix.setMaxColNumInBlock(feaNum / 3);\n+        dllcMatrix.setRowType(RowType.T_LONG_DENSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(dllcMatrix);\n+\n+        // add sparse long-key long matrix\n+        MatrixContext sllMatrix = new MatrixContext();\n+        sllMatrix.setName(SPARSE_LONG_LONG_MAT);\n+        sllMatrix.setRowNum(1);\n+        sllMatrix.setColNum(feaNum);\n+        sllMatrix.setMaxColNumInBlock(feaNum / 3);\n+        sllMatrix.setRowType(RowType.T_LONG_SPARSE_LONGKEY);\n+        angelClient.addMatrix(sllMatrix);\n+\n+        // add component long-key sparse long matrix\n+        MatrixContext sllcMatrix = new MatrixContext();\n+        sllcMatrix.setName(SPARSE_LONG_LONG_MAT_COMP);\n+        sllcMatrix.setRowNum(1);\n+        sllcMatrix.setColNum(feaNum);\n+        sllcMatrix.setMaxColNumInBlock(feaNum / 3);\n+        sllcMatrix.setRowType(RowType.T_LONG_SPARSE_LONGKEY_COMPONENT);\n+        angelClient.addMatrix(sllcMatrix);\n+\n+        // Start PS\n+        angelClient.startPSServer();\n+        // Start to run application\n+        angelClient.run();\n+\n+        Thread.sleep(5000);\n+\n+        psId = new ParameterServerId(0);\n+        psAttempt0Id = new PSAttemptId(psId, 0);\n+\n+        WorkerGroupId workerGroupId = new WorkerGroupId(0);\n+        workerId = new WorkerId(workerGroupId, 0);\n+        workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n     }\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+    @Test\n+    public void test() throws Exception {\n+        testDenseDoubleUDF();\n+        testSparseDoubleUDF();\n \n+        testDenseDoubleCompUDF();\n+        testSparseDoubleCompUDF();\n \n-  public void testSparseDoubleLongKeyCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+        testDenseFloatUDF();\n+        testSparseFloatUDF();\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n+        testDenseFloatCompUDF();\n+        testSparseFloatCompUDF();\n \n-    int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n-    LongDoubleVector[] vectors = new LongDoubleVector[num];\n-    for (int i = 0; i < num; i++) {\n-      vectors[i] = new LongDoubleVector(blockColNum,\n-          new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n-    }\n-    CompLongDoubleVector deltaVec = new CompLongDoubleVector(feaNum, vectors, blockColNum);\n-    for (long i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n-    }\n-    deltaVec.setRowId(0);\n-\n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n-    CompLongDoubleVector row = (CompLongDoubleVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n-    }\n+        testDenseIntUDF();\n+        testSparseIntUDF();\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+        testDenseIntCompUDF();\n+        testSparseIntCompUDF();\n \n-  public void testSparseFloatLongKeyUDF() throws Exception {\n+        testDenseLongUDF();\n+        testSparseLongUDF();\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        testDenseLongCompUDF();\n+        testSparseLongCompUDF();\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n+        testSparseDoubleLongKeyUDF();\n+        testSparseDoubleLongKeyCompUDF();\n \n-    LongFloatVector deltaVec =\n-        new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        testSparseFloatLongKeyUDF();\n+        testSparseFloatLongKeyCompUDF();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-    //client1.clock().get();\n+        testSparseIntLongKeyUDF();\n+        testSparseIntLongKeyCompUDF();\n \n-    LongFloatVector row = (LongFloatVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        testSparseLongLongKeyUDF();\n+        testSparseLongLongKeyCompUDF();\n     }\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n \n-  public void testSparseFloatLongKeyCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    public void testSparseDoubleLongKeyUDF() throws Exception {\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n-    LongFloatVector[] vectors = new LongFloatVector[num];\n-    for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongFloatVector(blockColNum,\n-              new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n-    }\n-    CompLongFloatVector deltaVec = new CompLongFloatVector(feaNum, vectors, blockColNum);\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        long[] index = genLongIndexs(feaNum, nnz);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        LongDoubleVector deltaVec =\n+                new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n-    CompLongFloatVector row = (CompLongFloatVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n-    }\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+        //client1.clock().get();\n \n-  public void testSparseLongLongKeyUDF() throws Exception {\n+        LongDoubleVector row = (LongDoubleVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        //Assert.assertTrue(index.length == row.size());\n+    }\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n \n-    LongLongVector deltaVec =\n-        new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+    public void testSparseDoubleLongKeyCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+\n+        long[] index = genLongIndexs(feaNum, nnz);\n+\n+        int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n+        LongDoubleVector[] vectors = new LongDoubleVector[num];\n+        for (int i = 0; i < num; i++) {\n+            vectors[i] = new LongDoubleVector(blockColNum,\n+                    new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n+        }\n+        CompLongDoubleVector deltaVec = new CompLongDoubleVector(feaNum, vectors, blockColNum);\n+        for (long i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompLongDoubleVector row = (CompLongDoubleVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        }\n+\n+        //Assert.assertTrue(index.length == row.size());\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testSparseFloatLongKeyUDF() throws Exception {\n \n-    LongLongVector row = (LongLongVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id));\n-    }\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+        long[] index = genLongIndexs(feaNum, nnz);\n \n-  public void testSparseLongLongKeyCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+        LongFloatVector deltaVec =\n+                new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        //client1.clock().get();\n \n-    int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n-    LongLongVector[] vectors = new LongLongVector[num];\n-    for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongLongVector(blockColNum, new LongLongSparseVectorStorage(blockColNum, nnz / num));\n-    }\n-    CompLongLongVector deltaVec = new CompLongLongVector(feaNum, vectors, blockColNum);\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        LongFloatVector row = (LongFloatVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        //Assert.assertTrue(index.length == row.size());\n+    }\n \n-    CompLongLongVector row = (CompLongLongVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+    public void testSparseFloatLongKeyCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+\n+        long[] index = genLongIndexs(feaNum, nnz);\n+\n+        int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n+        LongFloatVector[] vectors = new LongFloatVector[num];\n+        for (int i = 0; i < num; i++) {\n+            vectors[i] =\n+                    new LongFloatVector(blockColNum,\n+                            new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n+        }\n+        CompLongFloatVector deltaVec = new CompLongFloatVector(feaNum, vectors, blockColNum);\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompLongFloatVector row = (CompLongFloatVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        }\n+\n+        //Assert.assertTrue(index.length == row.size());\n     }\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+    public void testSparseLongLongKeyUDF() throws Exception {\n \n-  public void testSparseIntLongKeyUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        long[] index = genLongIndexs(feaNum, nnz);\n \n-    long[] index = genLongIndexs(feaNum, nnz);\n+        LongLongVector deltaVec =\n+                new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-    LongIntVector deltaVec = new LongIntVector(feaNum, new LongIntSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], (int) index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        LongLongVector row = (LongLongVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id));\n+        }\n \n-    LongIntVector row = (LongIntVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        //Assert.assertTrue(index.length == row.size());\n     }\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n-\n-  public void testSparseIntLongKeyCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n-    long[] index = genLongIndexs(feaNum, nnz);\n-\n-    int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n-    LongIntVector[] vectors = new LongIntVector[num];\n-    for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongIntVector(blockColNum, new LongIntSparseVectorStorage(blockColNum, nnz / num));\n-    }\n-    CompLongIntVector deltaVec = new CompLongIntVector(feaNum, vectors, blockColNum);\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], (int) index[i]);\n+    public void testSparseLongLongKeyCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+\n+        long[] index = genLongIndexs(feaNum, nnz);\n+\n+        int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n+        LongLongVector[] vectors = new LongLongVector[num];\n+        for (int i = 0; i < num; i++) {\n+            vectors[i] =\n+                    new LongLongVector(blockColNum,\n+                            new LongLongSparseVectorStorage(blockColNum, nnz / num));\n+        }\n+        CompLongLongVector deltaVec = new CompLongLongVector(feaNum, vectors, blockColNum);\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompLongLongVector row = (CompLongLongVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        }\n+\n+        //Assert.assertTrue(index.length == row.size());\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testSparseIntLongKeyUDF() throws Exception {\n \n-    CompLongIntVector row = (CompLongIntVector) client1.getRow(0);\n-    for (long id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n-    }\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    //Assert.assertTrue(index.length == row.size());\n-  }\n+        long[] index = genLongIndexs(feaNum, nnz);\n \n+        LongIntVector deltaVec =\n+                new LongIntVector(feaNum, new LongIntSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], (int) index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-  public void testDenseDoubleUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        LongIntVector row = (LongIntVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    IntDoubleVector deltaVec = new IntDoubleVector(feaNum, new IntDoubleDenseVectorStorage(feaNum));\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        //Assert.assertTrue(index.length == row.size());\n     }\n-    deltaVec.setRowId(0);\n-\n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n+    public void testSparseIntLongKeyCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+\n+        long[] index = genLongIndexs(feaNum, nnz);\n+\n+        int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n+        LongIntVector[] vectors = new LongIntVector[num];\n+        for (int i = 0; i < num; i++) {\n+            vectors[i] =\n+                    new LongIntVector(blockColNum,\n+                            new LongIntSparseVectorStorage(blockColNum, nnz / num));\n+        }\n+        CompLongIntVector deltaVec = new CompLongIntVector(feaNum, vectors, blockColNum);\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], (int) index[i]);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompLongIntVector row = (CompLongIntVector) client1.getRow(0);\n+        for (long id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        }\n+\n+        //Assert.assertTrue(index.length == row.size());\n     }\n-    Assert.assertEquals(feaNum, row.size());\n-  }\n \n-  public void testSparseDoubleUDF() throws Exception {\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+    public void testDenseDoubleUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    int[] index = new int[feaNum];//genIndexs(feaNum, nnz);\n-    for(int i = 0; i < index.length; i++) {\n-      index[i] = i;\n-    }\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    IntDoubleVector deltaVec =\n-        new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        IntDoubleVector deltaVec =\n+                new IntDoubleVector(feaNum, new IntDoubleDenseVectorStorage(feaNum));\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n+        }\n+        Assert.assertEquals(feaNum, row.size());\n     }\n-    //for (int i = 0; i < feaNum; i++) {\n-    //  deltaVec.set(i, i);\n-    //}\n \n-    deltaVec.setRowId(0);\n+    public void testSparseDoubleUDF() throws Exception {\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n-    }\n+        int[] index = new int[feaNum];//genIndexs(feaNum, nnz);\n+        for (int i = 0; i < index.length; i++) {\n+            index[i] = i;\n+        }\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+        IntDoubleVector deltaVec =\n+                new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < index.length; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        //for (int i = 0; i < feaNum; i++) {\n+        //  deltaVec.set(i, i);\n+        //}\n \n-  public void testDenseDoubleCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        deltaVec.setRowId(0);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseDoubleVector((int) blockColNum);\n-    }\n+        IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n+        }\n \n-    CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        Assert.assertTrue(index.length == row.size());\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testDenseDoubleCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+\n+        int[] index = genIndexs(feaNum, nnz);\n+\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.denseDoubleVector((int) blockColNum);\n+        }\n+\n+        CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-    Assert.assertTrue(feaNum == row.size());\n \n-  }\n+    public void testSparseDoubleCompUDF() throws Exception {\n \n-  public void testSparseDoubleCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.sparseDoubleVector((int) blockColNum, nnz / partNum);\n+        }\n \n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseDoubleVector((int) blockColNum, nnz / partNum);\n-    }\n+        CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n \n-    CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n+        //CompSparseDoubleVector deltaVec = new CompSparseDoubleVector(matrixW1Id, 0, feaNum, feaNum);\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-    //CompSparseDoubleVector deltaVec = new CompSparseDoubleVector(matrixW1Id, 0, feaNum, feaNum);\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(index.length == row.size());\n     }\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+    public void testDenseFloatUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  public void testDenseFloatUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        IntFloatVector deltaVec =\n+                new IntFloatVector(feaNum, new IntFloatDenseVectorStorage(feaNum));\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n-    IntFloatVector deltaVec = new IntFloatVector(feaNum, new IntFloatDenseVectorStorage(feaNum));\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        IntFloatVector row = (IntFloatVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    IntFloatVector row = (IntFloatVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-    Assert.assertTrue(feaNum == row.size());\n \n-  }\n+    public void testSparseFloatUDF() throws Exception {\n \n-  public void testSparseFloatUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        IntFloatVector deltaVec =\n+                new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < index.length; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        //for (int i = 0; i < feaNum; i++) {\n+        //  deltaVec.set(i, i);\n+        //}\n+        deltaVec.setRowId(0);\n \n-    IntFloatVector deltaVec =\n-        new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    //for (int i = 0; i < feaNum; i++) {\n-    //  deltaVec.set(i, i);\n-    //}\n-    deltaVec.setRowId(0);\n-\n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n-    IntFloatVector row = (IntFloatVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      assertEquals(row.get(id), deltaVec.get(id), 0.000001);\n-    }\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+        IntFloatVector row = (IntFloatVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            assertEquals(row.get(id), deltaVec.get(id), 0.000001);\n+        }\n \n-  public void testDenseFloatCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        Assert.assertTrue(index.length == row.size());\n+    }\n \n-    int[] index = genIndexs(feaNum, nnz);\n+    public void testDenseFloatCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+\n+        int[] index = genIndexs(feaNum, nnz);\n+\n+        long blockColNum =\n+                worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id)\n+                        .getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntFloatVector[] subVecs = new IntFloatVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.denseFloatVector((int) blockColNum);\n+        }\n+\n+        CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n+\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntFloatVector[] subVecs = new IntFloatVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseFloatVector((int) blockColNum);\n     }\n \n-    CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n-    }\n-    deltaVec.setRowId(0);\n+    public void testSparseFloatCompUDF() throws Exception {\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n-    }\n-    Assert.assertTrue(feaNum == row.size());\n+        int[] index = genIndexs(feaNum, nnz);\n+        MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_FLOAT_MAT_COMP);\n \n-  }\n+        long blockColNum = meta.getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntFloatVector[] subVecs = new IntFloatVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.sparseFloatVector((int) blockColNum, nnz / partNum);\n+        }\n \n-  public void testSparseFloatCompUDF() throws Exception {\n+        CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        for (int i = 0; i < index.length; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n \n-    int[] index = genIndexs(feaNum, nnz);\n-    MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_FLOAT_MAT_COMP);\n+        deltaVec.setRowId(0);\n \n-    long blockColNum = meta.getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntFloatVector[] subVecs = new IntFloatVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseFloatVector((int) blockColNum, nnz / partNum);\n-    }\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n+        CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id), 0.000000001);\n+        }\n \n-    for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        Assert.assertTrue(index.length == row.size());\n     }\n \n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testDenseIntUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.000000001);\n-    }\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+        IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntDenseVectorStorage(feaNum));\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-  public void testDenseIntUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        IntIntVector row = (IntIntVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    int[] index = genIndexs(feaNum, nnz);\n-\n-    IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntDenseVectorStorage(feaNum));\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testSparseIntUDF() throws Exception {\n \n-    IntIntVector row = (IntIntVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n-    }\n-    Assert.assertTrue(feaNum == row.size());\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  }\n+        int[] index = genIndexs(feaNum, nnz);\n \n-  public void testSparseIntUDF() throws Exception {\n+        IntIntVector deltaVec =\n+                new IntIntVector(feaNum, new IntIntSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < index.length; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        //for (int i = 0; i < feaNum; i++) {\n+        //  deltaVec.set(i, i);\n+        //}\n+        deltaVec.setRowId(0);\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        IntIntVector row = (IntIntVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    //for (int i = 0; i < feaNum; i++) {\n-    //  deltaVec.set(i, i);\n-    //}\n-    deltaVec.setRowId(0);\n-\n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n-    IntIntVector row = (IntIntVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(index.length == row.size());\n     }\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+    public void testDenseIntCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  public void testDenseIntCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_INT_MAT_COMP);\n \n-    MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_INT_MAT_COMP);\n+        long blockColNum = meta.getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntIntVector[] subVecs = new IntIntVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.denseIntVector((int) blockColNum);\n+        }\n \n-    long blockColNum = meta.getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntIntVector[] subVecs = new IntIntVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseIntVector((int) blockColNum);\n-    }\n+        CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n \n-    CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-    Assert.assertTrue(feaNum == row.size());\n \n-  }\n+    public void testDenseLongCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  public void testDenseLongCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_LONG_MAT_COMP);\n \n-    MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_LONG_MAT_COMP);\n+        long blockColNum = meta.getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntLongVector[] subVecs = new IntLongVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.denseLongVector((int) blockColNum);\n+        }\n \n-    long blockColNum = meta.getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntLongVector[] subVecs = new IntLongVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseLongVector((int) blockColNum);\n-    }\n+        CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n \n-    CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-    Assert.assertTrue(feaNum == row.size());\n \n-  }\n+    public void testSparseLongCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  public void testSparseLongCompUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_LONG_MAT_COMP);\n \n-    MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_LONG_MAT_COMP);\n+        long blockColNum = meta.getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntLongVector[] subVecs = new IntLongVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.sparseLongVector((int) blockColNum);\n+        }\n \n-    long blockColNum = meta.getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntLongVector[] subVecs = new IntLongVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseLongVector((int) blockColNum);\n-    }\n+        CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n+\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-    CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n+        for (int id : index) {\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n+        Assert.assertEquals(index.length, row.size());\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testDenseLongUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-    CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n-    for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n-    }\n-    Assert.assertEquals(index.length, row.size());\n-  }\n+        int[] index = genIndexs(feaNum, nnz);\n \n-  public void testDenseLongUDF() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongDenseVectorStorage(feaNum));\n+        for (int i = 0; i < feaNum; i++) {\n+            deltaVec.set(i, i);\n+        }\n+        deltaVec.setRowId(0);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+\n+        IntLongVector row = (IntLongVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertEquals(row.get(id), deltaVec.get(id));\n+        }\n+        Assert.assertTrue(feaNum == row.size());\n \n-    IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongDenseVectorStorage(feaNum));\n-    for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n     }\n-    deltaVec.setRowId(0);\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+    public void testSparseLongUDF() throws Exception {\n \n-    IntLongVector row = (IntLongVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id));\n-    }\n-    Assert.assertTrue(feaNum == row.size());\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT, 0);\n+        int matrixW1Id = client1.getMatrixId();\n \n-  }\n+        int[] index = genIndexs(feaNum, nnz);\n \n-  public void testSparseLongUDF() throws Exception {\n+        IntLongVector deltaVec =\n+                new IntLongVector(feaNum, new IntLongSparseVectorStorage(feaNum, nnz));\n+        for (int i = 0; i < index.length; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        //for (int i = 0; i < feaNum; i++) {\n+        //  deltaVec.set(i, i);\n+        //}\n+        deltaVec.setRowId(0);\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT, 0);\n-    int matrixW1Id = client1.getMatrixId();\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        IntLongVector row = (IntLongVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongSparseVectorStorage(feaNum, nnz));\n-    for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    //for (int i = 0; i < feaNum; i++) {\n-    //  deltaVec.set(i, i);\n-    //}\n-    deltaVec.setRowId(0);\n-\n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n-    IntLongVector row = (IntLongVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(index.length == row.size());\n     }\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n+    public void testSparseIntCompUDF() throws Exception {\n \n-  public void testSparseIntCompUDF() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT_COMP, 0);\n+        int matrixW1Id = client1.getMatrixId();\n+        MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_INT_MAT_COMP);\n \n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT_COMP, 0);\n-    int matrixW1Id = client1.getMatrixId();\n-    MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_INT_MAT_COMP);\n+        int[] index = genIndexs(feaNum, nnz);\n \n-    int[] index = genIndexs(feaNum, nnz);\n+        long blockColNum = meta.getBlockColNum();\n+        int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n+        IntIntVector[] subVecs = new IntIntVector[partNum];\n+        for (int i = 0; i < partNum; i++) {\n+            subVecs[i] = VFactory.sparseIntVector((int) blockColNum, nnz / partNum);\n+        }\n \n-    long blockColNum = meta.getBlockColNum();\n-    int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n-    IntIntVector[] subVecs = new IntIntVector[partNum];\n-    for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseIntVector((int) blockColNum, nnz / partNum);\n-    }\n+        CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n+        for (int i = 0; i < nnz; i++) {\n+            deltaVec.set(index[i], index[i]);\n+        }\n+        deltaVec.setRowId(0);\n \n-    CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n-    for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n-    }\n-    deltaVec.setRowId(0);\n+        Vector[] updates = new Vector[1];\n+        updates[0] = deltaVec;\n+        client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n-    Vector[] updates = new Vector[1];\n-    updates[0] = deltaVec;\n-    client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n+        CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n+        for (int id : index) {\n+            //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n+            Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        }\n \n-    CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n-    for (int id : index) {\n-      //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(index.length == row.size());\n     }\n \n-    Assert.assertTrue(index.length == row.size());\n-  }\n \n+    public static int[] genIndexs(int feaNum, int nnz) {\n \n-  public static int[] genIndexs(int feaNum, int nnz) {\n+        int[] sortedIndex = new int[nnz];\n+        Random random = new Random(System.currentTimeMillis());\n+        sortedIndex[0] = random.nextInt(feaNum / nnz);\n+        for (int i = 1; i < nnz; i++) {\n+            int rand = random.nextInt((feaNum - sortedIndex[i - 1]) / (nnz - i));\n+            if (rand == 0) {\n+                rand = 1;\n+            }\n+            sortedIndex[i] = rand + sortedIndex[i - 1];\n+        }\n \n-    int[] sortedIndex = new int[nnz];\n-    Random random = new Random(System.currentTimeMillis());\n-    sortedIndex[0] = random.nextInt(feaNum / nnz);\n-    for (int i = 1; i < nnz; i++) {\n-      int rand = random.nextInt((feaNum - sortedIndex[i - 1]) / (nnz - i));\n-      if (rand == 0) {\n-        rand = 1;\n-      }\n-      sortedIndex[i] = rand + sortedIndex[i - 1];\n+        return sortedIndex;\n     }\n \n-    return sortedIndex;\n-  }\n+    public static long[] genLongIndexs(long feaNum, int nnz) {\n+        long[] sortedIndex = new long[nnz];\n+        Random random = new Random(System.currentTimeMillis());\n+        for (int i = 1; i < nnz; i++) {\n+            sortedIndex[i] = Math.abs(random.nextLong()) % feaNum;\n+        }\n+        return sortedIndex;\n+    }\n \n-  public static long[] genLongIndexs(long feaNum, int nnz) {\n-    long[] sortedIndex = new long[nnz];\n-    Random random = new Random(System.currentTimeMillis());\n-    for (int i = 1; i < nnz; i++) {\n-      sortedIndex[i] = Math.abs(random.nextLong()) % feaNum;\n+    @After\n+    public void stop() throws AngelException {\n+        LOG.info(\"stop local cluster\");\n+        angelClient.stop();\n     }\n-    return sortedIndex;\n-  }\n-\n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n-  }\n }\n",
            "diff_size": 1652
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "481",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "493",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 494.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "504",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "509",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "522",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 523.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "534",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "545",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 546.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "556",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "561",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "574",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 575.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "586",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "596",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 597.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "607",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "612",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "625",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 626.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "647",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 648.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "658",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "663",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "676",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 677.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "712",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "725",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 726.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "736",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "763",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "782",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 783.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "813",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "826",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 827.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "837",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "882",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 883.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "926",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 927.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "1031",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 1,032.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "1055",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 1,056.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "1084",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 1,085.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/99/UpdatePSFTest.java\nindex a00182a6d0..327cf9ddc1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/99/UpdatePSFTest.java\n@@ -19,7 +19,6 @@\n package com.tencent.angel.psagent;\n \n import static org.junit.Assert.assertEquals;\n-\n import com.tencent.angel.client.AngelClient;\n import com.tencent.angel.client.AngelClientFactory;\n import com.tencent.angel.conf.AngelConf;\n@@ -81,60 +80,80 @@ import org.junit.Test;\n \n public class UpdatePSFTest {\n \n-  public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n-  public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n-  public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n-  public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n-\n-  public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n-  public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n-  public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n-  public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n-\n-  public static String DENSE_INT_MAT = \"dense_int_mat\";\n-  public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n-  public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n-  public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n-\n-  public static String DENSE_LONG_MAT = \"dense_long_mat\";\n-  public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n-  public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n-  public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n-\n-  public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n-  public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n-  public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n-\n-  public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n-  public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n-  public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n-\n-  public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n-  public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n-  public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n-\n-  public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n-  public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n-  public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n-\n-  private static final Log LOG = LogFactory.getLog(GetRowTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100;\n-  int nnz = 10;\n-\n-  static {\n+    public static String DENSE_DOUBLE_MAT = \"dense_double_mat\";\n+\n+    public static String DENSE_DOUBLE_MAT_COMP = \"dense_double_mat_comp\";\n+\n+    public static String SPARSE_DOUBLE_MAT = \"sparse_double_mat\";\n+\n+    public static String SPARSE_DOUBLE_MAT_COMP = \"sparse_double_mat_comp\";\n+\n+    public static String DENSE_FLOAT_MAT = \"dense_float_mat\";\n+\n+    public static String DENSE_FLOAT_MAT_COMP = \"dense_float_mat_comp\";\n+\n+    public static String SPARSE_FLOAT_MAT = \"sparse_float_mat\";\n+\n+    public static String SPARSE_FLOAT_MAT_COMP = \"sparse_float_mat_comp\";\n+\n+    public static String DENSE_INT_MAT = \"dense_int_mat\";\n+\n+    public static String DENSE_INT_MAT_COMP = \"dense_int_mat_comp\";\n+\n+    public static String SPARSE_INT_MAT = \"sparse_int_mat\";\n+\n+    public static String SPARSE_INT_MAT_COMP = \"sparse_int_mat_comp\";\n+\n+    public static String DENSE_LONG_MAT = \"dense_long_mat\";\n+\n+    public static String DENSE_LONG_MAT_COMP = \"dense_long_mat_comp\";\n+\n+    public static String SPARSE_LONG_MAT = \"sparse_long_mat\";\n+\n+    public static String SPARSE_LONG_MAT_COMP = \"sparse_long_mat_comp\";\n+\n+    public static String DENSE_DOUBLE_LONG_MAT_COMP = \"dense_double_long_mat_comp\";\n+\n+    public static String SPARSE_DOUBLE_LONG_MAT = \"sparse_double_long_mat\";\n+\n+    public static String SPARSE_DOUBLE_LONG_MAT_COMP = \"sparse_double_long_mat_comp\";\n+\n+    public static String DENSE_FLOAT_LONG_MAT_COMP = \"dense_float_long_mat_comp\";\n+\n+    public static String SPARSE_FLOAT_LONG_MAT = \"sparse_float_long_mat\";\n+\n+    public static String SPARSE_FLOAT_LONG_MAT_COMP = \"sparse_float_long_mat_comp\";\n+\n+    public static String DENSE_INT_LONG_MAT_COMP = \"dense_int_long_mat_comp\";\n+\n+    public static String SPARSE_INT_LONG_MAT = \"sparse_int_long_mat\";\n+\n+    public static String SPARSE_INT_LONG_MAT_COMP = \"sparse_int_long_mat_comp\";\n+\n+    public static String DENSE_LONG_LONG_MAT_COMP = \"dense_long_long_mat_comp\";\n+\n+    public static String SPARSE_LONG_LONG_MAT = \"sparse_long_long_mat\";\n+\n+    public static String SPARSE_LONG_LONG_MAT_COMP = \"sparse_long_long_mat_comp\";\n+    private static final Log LOG = LogFactory.getLog(GetRowTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100;\n+\n+    int nnz = 10;\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @Before\n-  public void setup() throws Exception {\n+    @Before\n+    public void setup() throws Exception {\n     // set basic configuration keys\n     Configuration conf = new Configuration();\n     conf.setBoolean(\"mapred.mapper.new-api\", true);\n@@ -148,12 +167,10 @@ public class UpdatePSFTest {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -420,845 +437,683 @@ public class UpdatePSFTest {\n     angelClient.startPSServer();\n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n+    }\n \n-  @Test\n-  public void test() throws Exception {\n+    @Test\n+    public void test() throws Exception {\n     testDenseDoubleUDF();\n     testSparseDoubleUDF();\n-\n     testDenseDoubleCompUDF();\n     testSparseDoubleCompUDF();\n-\n     testDenseFloatUDF();\n     testSparseFloatUDF();\n-\n     testDenseFloatCompUDF();\n     testSparseFloatCompUDF();\n-\n     testDenseIntUDF();\n     testSparseIntUDF();\n-\n     testDenseIntCompUDF();\n     testSparseIntCompUDF();\n-\n     testDenseLongUDF();\n     testSparseLongUDF();\n-\n     testDenseLongCompUDF();\n     testSparseLongCompUDF();\n-\n     testSparseDoubleLongKeyUDF();\n     testSparseDoubleLongKeyCompUDF();\n-\n     testSparseFloatLongKeyUDF();\n     testSparseFloatLongKeyCompUDF();\n-\n     testSparseIntLongKeyUDF();\n     testSparseIntLongKeyCompUDF();\n-\n     testSparseLongLongKeyUDF();\n     testSparseLongLongKeyCompUDF();\n-  }\n-\n-\n-  public void testSparseDoubleLongKeyUDF() throws Exception {\n+    }\n \n+    public void testSparseDoubleLongKeyUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongDoubleVector deltaVec =\n-        new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n+    LongDoubleVector deltaVec = new LongDoubleVector(feaNum, new LongDoubleSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n \n     //client1.clock().get();\n-\n     LongDoubleVector row = (LongDoubleVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n-\n+    }\n \n-  public void testSparseDoubleLongKeyCompUDF() throws Exception {\n+    public void testSparseDoubleLongKeyCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongDoubleVector[] vectors = new LongDoubleVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] = new LongDoubleVector(blockColNum,\n-          new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n+        vectors[i] = new LongDoubleVector(blockColNum, new LongDoubleSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongDoubleVector deltaVec = new CompLongDoubleVector(feaNum, vectors, blockColNum);\n     for (long i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongDoubleVector row = (CompLongDoubleVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n-\n-  public void testSparseFloatLongKeyUDF() throws Exception {\n+    }\n \n+    public void testSparseFloatLongKeyUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongFloatVector deltaVec =\n-        new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n+    LongFloatVector deltaVec = new LongFloatVector(feaNum, new LongFloatSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n     //client1.clock().get();\n-\n     LongFloatVector row = (LongFloatVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testSparseFloatLongKeyCompUDF() throws Exception {\n+    public void testSparseFloatLongKeyCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongFloatVector[] vectors = new LongFloatVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongFloatVector(blockColNum,\n-              new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n+        vectors[i] = new LongFloatVector(blockColNum, new LongFloatSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongFloatVector deltaVec = new CompLongFloatVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongFloatVector row = (CompLongFloatVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n-\n-  public void testSparseLongLongKeyUDF() throws Exception {\n+    }\n \n+    public void testSparseLongLongKeyUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n-    LongLongVector deltaVec =\n-        new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n+    LongLongVector deltaVec = new LongLongVector(feaNum, new LongLongSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     LongLongVector row = (LongLongVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id));\n+        Assert.assertEquals(row.get(id), deltaVec.get(id));\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testSparseLongLongKeyCompUDF() throws Exception {\n+    public void testSparseLongLongKeyCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongLongVector[] vectors = new LongLongVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongLongVector(blockColNum, new LongLongSparseVectorStorage(blockColNum, nnz / num));\n+        vectors[i] = new LongLongVector(blockColNum, new LongLongSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongLongVector deltaVec = new CompLongLongVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongLongVector row = (CompLongLongVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n-\n-  public void testSparseIntLongKeyUDF() throws Exception {\n+    }\n \n+    public void testSparseIntLongKeyUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     LongIntVector deltaVec = new LongIntVector(feaNum, new LongIntSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], (int) index[i]);\n+        deltaVec.set(index[i], (int) index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     LongIntVector row = (LongIntVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testSparseIntLongKeyCompUDF() throws Exception {\n+    public void testSparseIntLongKeyCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n-\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     long[] index = genLongIndexs(feaNum, nnz);\n-\n     int num = (int) ((feaNum + blockColNum - 1) / blockColNum);\n     LongIntVector[] vectors = new LongIntVector[num];\n     for (int i = 0; i < num; i++) {\n-      vectors[i] =\n-          new LongIntVector(blockColNum, new LongIntSparseVectorStorage(blockColNum, nnz / num));\n+        vectors[i] = new LongIntVector(blockColNum, new LongIntSparseVectorStorage(blockColNum, nnz / num));\n     }\n+\n     CompLongIntVector deltaVec = new CompLongIntVector(feaNum, vectors, blockColNum);\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], (int) index[i]);\n+        deltaVec.set(index[i], (int) index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompLongIntVector row = (CompLongIntVector) client1.getRow(0);\n     for (long id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0.0000000001);\n     }\n \n     //Assert.assertTrue(index.length == row.size());\n-  }\n-\n+    }\n \n-  public void testDenseDoubleUDF() throws Exception {\n+    public void testDenseDoubleUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntDoubleVector deltaVec = new IntDoubleVector(feaNum, new IntDoubleDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n     }\n     Assert.assertEquals(feaNum, row.size());\n-  }\n-\n-  public void testSparseDoubleUDF() throws Exception {\n+    }\n \n+    public void testSparseDoubleUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = new int[feaNum];//genIndexs(feaNum, nnz);\n-    for(int i = 0; i < index.length; i++) {\n-      index[i] = i;\n+    for (int i = 0; i < index.length; i++) {\n+        index[i] = i;\n     }\n \n-    IntDoubleVector deltaVec =\n-        new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n+    IntDoubleVector deltaVec = new IntDoubleVector(feaNum, new IntDoubleSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     //for (int i = 0; i < feaNum; i++) {\n     //  deltaVec.set(i, i);\n     //}\n-\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntDoubleVector row = (IntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testDenseDoubleCompUDF() throws Exception {\n+    public void testDenseDoubleCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_DOUBLE_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseDoubleVector((int) blockColNum);\n+        subVecs[i] = VFactory.denseDoubleVector((int) blockColNum);\n     }\n \n     CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseDoubleCompUDF() throws Exception {\n-\n+    public void testSparseDoubleCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_DOUBLE_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntDoubleVector[] subVecs = new IntDoubleVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseDoubleVector((int) blockColNum, nnz / partNum);\n+        subVecs[i] = VFactory.sparseDoubleVector((int) blockColNum, nnz / partNum);\n     }\n \n     CompIntDoubleVector deltaVec = new CompIntDoubleVector(feaNum, subVecs, (int) blockColNum);\n \n     //CompSparseDoubleVector deltaVec = new CompSparseDoubleVector(matrixW1Id, 0, feaNum, feaNum);\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntDoubleVector row = (CompIntDoubleVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testDenseFloatUDF() throws Exception {\n+    public void testDenseFloatUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntFloatVector deltaVec = new IntFloatVector(feaNum, new IntFloatDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntFloatVector row = (IntFloatVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseFloatUDF() throws Exception {\n-\n+    public void testSparseFloatUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    IntFloatVector deltaVec =\n-        new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n+    IntFloatVector deltaVec = new IntFloatVector(feaNum, new IntFloatSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     //for (int i = 0; i < feaNum; i++) {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntFloatVector row = (IntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      assertEquals(row.get(id), deltaVec.get(id), 0.000001);\n+        assertEquals(row.get(id), deltaVec.get(id), 0.000001);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testDenseFloatCompUDF() throws Exception {\n+    public void testDenseFloatCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_FLOAT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n-    long blockColNum =\n-        worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n+    long blockColNum = worker.getPSAgent().getMatrixMetaManager().getMatrixMeta(matrixW1Id).getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntFloatVector[] subVecs = new IntFloatVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseFloatVector((int) blockColNum);\n+        subVecs[i] = VFactory.denseFloatVector((int) blockColNum);\n     }\n \n     CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseFloatCompUDF() throws Exception {\n-\n+    public void testSparseFloatCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_FLOAT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_FLOAT_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntFloatVector[] subVecs = new IntFloatVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseFloatVector((int) blockColNum, nnz / partNum);\n+        subVecs[i] = VFactory.sparseFloatVector((int) blockColNum, nnz / partNum);\n     }\n \n     CompIntFloatVector deltaVec = new CompIntFloatVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n-\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntFloatVector row = (CompIntFloatVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id), 0.000000001);\n+        Assert.assertEquals(row.get(id), deltaVec.get(id), 0.000000001);\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n-\n+    }\n \n-  public void testDenseIntUDF() throws Exception {\n+    public void testDenseIntUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntIntVector row = (IntIntVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseIntUDF() throws Exception {\n-\n+    public void testSparseIntUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntIntVector deltaVec = new IntIntVector(feaNum, new IntIntSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     //for (int i = 0; i < feaNum; i++) {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntIntVector row = (IntIntVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n+    }\n \n-  public void testDenseIntCompUDF() throws Exception {\n+    public void testDenseIntCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_INT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_INT_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntIntVector[] subVecs = new IntIntVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseIntVector((int) blockColNum);\n+        subVecs[i] = VFactory.denseIntVector((int) blockColNum);\n     }\n \n     CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testDenseLongCompUDF() throws Exception {\n+    public void testDenseLongCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(DENSE_LONG_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntLongVector[] subVecs = new IntLongVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.denseLongVector((int) blockColNum);\n+        subVecs[i] = VFactory.denseLongVector((int) blockColNum);\n     }\n \n     CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseLongCompUDF() throws Exception {\n+    public void testSparseLongCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_LONG_MAT_COMP);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntLongVector[] subVecs = new IntLongVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseLongVector((int) blockColNum);\n+        subVecs[i] = VFactory.sparseLongVector((int) blockColNum);\n     }\n \n     CompIntLongVector deltaVec = new CompIntLongVector(feaNum, subVecs, (int) blockColNum);\n-\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntLongVector row = (CompIntLongVector) client1.getRow(0);\n     for (int id : index) {\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n     Assert.assertEquals(index.length, row.size());\n-  }\n+    }\n \n-  public void testDenseLongUDF() throws Exception {\n+    public void testDenseLongUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(DENSE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongDenseVectorStorage(feaNum));\n     for (int i = 0; i < feaNum; i++) {\n-      deltaVec.set(i, i);\n+        deltaVec.set(i, i);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntLongVector row = (IntLongVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertEquals(row.get(id), deltaVec.get(id));\n+        Assert.assertEquals(row.get(id), deltaVec.get(id));\n     }\n     Assert.assertTrue(feaNum == row.size());\n+    }\n \n-  }\n-\n-  public void testSparseLongUDF() throws Exception {\n-\n+    public void testSparseLongUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_LONG_MAT, 0);\n     int matrixW1Id = client1.getMatrixId();\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     IntLongVector deltaVec = new IntLongVector(feaNum, new IntLongSparseVectorStorage(feaNum, nnz));\n     for (int i = 0; i < index.length; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     //for (int i = 0; i < feaNum; i++) {\n     //  deltaVec.set(i, i);\n     //}\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     IntLongVector row = (IntLongVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n-\n-  public void testSparseIntCompUDF() throws Exception {\n+    }\n \n+    public void testSparseIntCompUDF() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client1 = worker.getPSAgent().getMatrixClient(SPARSE_INT_MAT_COMP, 0);\n     int matrixW1Id = client1.getMatrixId();\n     MatrixMeta meta = worker.getPSAgent().getMatrix(SPARSE_INT_MAT_COMP);\n-\n     int[] index = genIndexs(feaNum, nnz);\n-\n     long blockColNum = meta.getBlockColNum();\n     int partNum = (feaNum + (int) blockColNum - 1) / (int) blockColNum;\n     IntIntVector[] subVecs = new IntIntVector[partNum];\n     for (int i = 0; i < partNum; i++) {\n-      subVecs[i] = VFactory.sparseIntVector((int) blockColNum, nnz / partNum);\n+        subVecs[i] = VFactory.sparseIntVector((int) blockColNum, nnz / partNum);\n     }\n \n     CompIntIntVector deltaVec = new CompIntIntVector(feaNum, subVecs, (int) blockColNum);\n     for (int i = 0; i < nnz; i++) {\n-      deltaVec.set(index[i], index[i]);\n+        deltaVec.set(index[i], index[i]);\n     }\n     deltaVec.setRowId(0);\n-\n     Vector[] updates = new Vector[1];\n     updates[0] = deltaVec;\n     client1.update(new IncrementRows(new IncrementRowsParam(matrixW1Id, updates))).get();\n-\n     CompIntIntVector row = (CompIntIntVector) client1.getRow(0);\n     for (int id : index) {\n       //System.out.println(\"id=\" + id + \", value=\" + row.get(id));\n-      Assert.assertTrue(row.get(id) == deltaVec.get(id));\n+        Assert.assertTrue(row.get(id) == deltaVec.get(id));\n     }\n-\n     Assert.assertTrue(index.length == row.size());\n-  }\n-\n-\n-  public static int[] genIndexs(int feaNum, int nnz) {\n+    }\n \n+    public static int[] genIndexs(int feaNum, int nnz) {\n     int[] sortedIndex = new int[nnz];\n     Random random = new Random(System.currentTimeMillis());\n     sortedIndex[0] = random.nextInt(feaNum / nnz);\n     for (int i = 1; i < nnz; i++) {\n-      int rand = random.nextInt((feaNum - sortedIndex[i - 1]) / (nnz - i));\n-      if (rand == 0) {\n+        int rand = random.nextInt((feaNum - sortedIndex[i - 1]) / (nnz - i));\n+        if (rand == 0) {\n         rand = 1;\n-      }\n-      sortedIndex[i] = rand + sortedIndex[i - 1];\n+        }\n+        sortedIndex[i] = rand + sortedIndex[i - 1];\n     }\n-\n     return sortedIndex;\n-  }\n+    }\n \n-  public static long[] genLongIndexs(long feaNum, int nnz) {\n+    public static long[] genLongIndexs(long feaNum, int nnz) {\n     long[] sortedIndex = new long[nnz];\n     Random random = new Random(System.currentTimeMillis());\n     for (int i = 1; i < nnz; i++) {\n-      sortedIndex[i] = Math.abs(random.nextLong()) % feaNum;\n+        sortedIndex[i] = Math.abs(random.nextLong()) % feaNum;\n     }\n     return sortedIndex;\n-  }\n+    }\n \n-  @After\n-  public void stop() throws AngelException {\n+    @After\n+    public void stop() throws AngelException {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 400
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/99/UpdatePSFTest.java\nindex a00182a6d0..366ef3bb46 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/99/UpdatePSFTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/99/UpdatePSFTest.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent;\n \n import static org.junit.Assert.assertEquals;\n",
            "diff_size": 1
        }
    ]
}