{
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "115",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link JsonArrayDocument}.\n     */\n    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n        return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/8/JsonArrayDocument.java\nindex 1c7d383ac1..8fea927743 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/8/JsonArrayDocument.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n@@ -25,7 +26,7 @@ import java.io.Serializable;\n \n /**\n  * Stores a properly encoded JSON array as the toplevel type.\n- *\n+ * <p>\n  * This document works exactly like {@link JsonDocument}, but it accepts a different toplevel type. This document\n  * is interoperable with other SDKs.\n  *\n@@ -49,7 +50,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Creates a {@link JsonDocument} which the document id and JSON content.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n@@ -60,9 +61,9 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content and the CAS value.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n     public static JsonArrayDocument create(String id, JsonArray content, long cas) {\n@@ -72,9 +73,9 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content and the expiration time.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param expiry the expiration time of the document.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content) {\n@@ -83,15 +84,15 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n \n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas) {\n@@ -100,19 +101,20 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n \n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n-     * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param id            the per-bucket unique document id.\n+     * @param content       the content of the document.\n+     * @param cas           the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry        the expiration time of the document.\n      * @param mutationToken the optional mutation token.\n      * @return a {@link JsonArrayDocument}.\n      */\n-    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n+    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas,\n+                                           MutationToken mutationToken) {\n         return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -120,7 +122,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * Creates a copy from a different {@link JsonArrayDocument}, but changes the document ID.\n      *\n      * @param doc the original {@link JsonArrayDocument} to copy.\n-     * @param id the per-bucket unique document id.\n+     * @param id  the per-bucket unique document id.\n      * @return a copied {@link JsonArrayDocument} with the changed properties.\n      */\n     public static JsonArrayDocument from(JsonArrayDocument doc, String id) {\n@@ -130,7 +132,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Creates a copy from a different {@link JsonDocument}, but changes the content.\n      *\n-     * @param doc the original {@link JsonDocument} to copy.\n+     * @param doc     the original {@link JsonDocument} to copy.\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n@@ -141,8 +143,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Creates a copy from a different {@link JsonDocument}, but changes the document ID and content.\n      *\n-     * @param doc the original {@link JsonDocument} to copy.\n-     * @param id the per-bucket unique document id.\n+     * @param doc     the original {@link JsonDocument} to copy.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n@@ -164,10 +166,10 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     /**\n      * Private constructor which is called by the static factory methods eventually.\n      *\n-     * @param id the per-bucket unique document id.\n-     * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param id            the per-bucket unique document id.\n+     * @param content       the content of the document.\n+     * @param cas           the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry        the expiration time of the document.\n      * @param mutationToken the optional mutation token.\n      */\n     private JsonArrayDocument(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/8/JsonArrayDocument.java\nindex 1c7d383ac1..70b99eec5b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/8/JsonArrayDocument.java\n@@ -181,4 +181,4 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/8/JsonArrayDocument.java\nindex 1c7d383ac1..1efee21d9a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/8/JsonArrayDocument.java\n@@ -17,7 +17,6 @@ package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.java.document.json.JsonArray;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -32,9 +31,11 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0.0\n  */\n+\n+\n public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Serializable {\n \n-    private static final long serialVersionUID = -2300114084316366873L;\n+    private static final long serialVersionUID = - 2300114084316366873L;\n \n     /**\n      * Creates a {@link JsonDocument} which the document id.\n@@ -53,6 +54,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n+\n     public static JsonArrayDocument create(String id, JsonArray content) {\n         return new JsonArrayDocument(id, 0, content, 0, null);\n     }\n@@ -65,6 +68,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n+\n+\n     public static JsonArrayDocument create(String id, JsonArray content, long cas) {\n         return new JsonArrayDocument(id, 0, content, cas, null);\n     }\n@@ -77,6 +82,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content) {\n         return new JsonArrayDocument(id, expiry, content, 0, null);\n     }\n@@ -94,6 +101,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas) {\n         return new JsonArrayDocument(id, expiry, content, cas, null);\n     }\n@@ -112,6 +121,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param mutationToken the optional mutation token.\n      * @return a {@link JsonArrayDocument}.\n      */\n+\n+\n     public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n         return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n@@ -123,6 +134,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param id the per-bucket unique document id.\n      * @return a copied {@link JsonArrayDocument} with the changed properties.\n      */\n+\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, String id) {\n         return JsonArrayDocument.create(id, doc.expiry(), doc.content(), doc.cas(), doc.mutationToken());\n     }\n@@ -134,6 +147,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, JsonArray content) {\n         return JsonArrayDocument.create(doc.id(), doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -146,6 +161,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, String id, JsonArray content) {\n         return JsonArrayDocument.create(id, doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -157,6 +174,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n+\n     public static JsonArrayDocument from(JsonArrayDocument doc, long cas) {\n         return JsonArrayDocument.create(doc.id(), doc.expiry(), doc.content(), cas, doc.mutationToken());\n     }\n@@ -170,6 +189,8 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @param mutationToken the optional mutation token.\n      */\n+\n+\n     private JsonArrayDocument(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n     }\n@@ -181,4 +202,4 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/8/JsonArrayDocument.java\nindex 1c7d383ac1..95fc7f9c1b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/8/JsonArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/8/JsonArrayDocument.java\n@@ -111,8 +111,7 @@ public class JsonArrayDocument extends AbstractDocument<JsonArray> implements Se\n      * @param expiry the expiration time of the document.\n      * @param mutationToken the optional mutation token.\n      * @return a {@link JsonArrayDocument}.\n-     */\n-    public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n+     */ public static JsonArrayDocument create(String id, int expiry, JsonArray content, long cas, MutationToken mutationToken) {\n         return new JsonArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 2
        }
    ]
}