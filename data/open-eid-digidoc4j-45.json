{
    "error_id": "45",
    "information": {
        "errors": [
            {
                "line": "48",
                "column": "43",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n    logger.debug(\"File name: \" + fileName +\n        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n    try {\n      DigestDocument document = new DigestDocument();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/45/DigestDataFile.java\nindex fb2e0d3e49..cd71034ef2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/45/DigestDataFile.java\n@@ -45,26 +45,26 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n-        document.setMimeType(mimeType);\n-      setDocument(document);\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n+    logger.debug(\"File name: \" + fileName\n+  + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+ try {\n+   DigestDocument document = new DigestDocument();\n+   document.setName(fileName);\n+   document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+   if (mimeType != null)\n+     document.setMimeType(mimeType);\n+   setDocument(document);\n+ } catch (Exception e) {\n+   logger.error(e.getMessage());\n+   throw new InvalidDataFileException(e);\n+ }\n+}\n \n-  public String getContentType() {\n-    return contentType;\n-  }\n+public String getContentType() {\n+  return contentType;\n+}\n \n-  public void setContentType(String contentType) {\n-    this.contentType = contentType;\n-  }\n+public void setContentType(String contentType) {\n+  this.contentType = contentType;\n+}\n }\n",
            "diff_size": 20
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/45/DigestDataFile.java\nindex fb2e0d3e49..b519e589c7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/45/DigestDataFile.java\n@@ -51,8 +51,9 @@ public class DigestDataFile extends DataFile {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n       document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n+      if (mimeType != null) {\n         document.setMimeType(mimeType);\n+      }\n       setDocument(document);\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/45/DigestDataFile.java\nindex fb2e0d3e49..533567f439 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/45/DigestDataFile.java\n@@ -45,15 +45,14 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+try {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n       document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n       if (mimeType != null)\n         document.setMimeType(mimeType);\n-      setDocument(document);\n+setDocument(document);\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n       throw new InvalidDataFileException(e);\n@@ -67,4 +66,4 @@ public class DigestDataFile extends DataFile {\n   public void setContentType(String contentType) {\n     this.contentType = contentType;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/45/DigestDataFile.java\nindex fb2e0d3e49..905333057c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/45/DigestDataFile.java\n@@ -1,20 +1,18 @@\n package org.digidoc4j;\n \n import java.util.Arrays;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.digidoc4j.exceptions.InvalidDataFileException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.model.DigestDocument;\n import eu.europa.esig.dss.model.MimeType;\n \n-public class DigestDataFile extends DataFile {\n \n-  private static final Logger logger = LoggerFactory.getLogger(DigestDataFile.class);\n+public class DigestDataFile extends DataFile {\n \n-  private String contentType = null;\n+    private static final Logger logger = LoggerFactory.getLogger(DigestDataFile.class);\n+    private String contentType = null;\n \n   /**\n    * Creates digest based data file.\n@@ -25,9 +23,11 @@ public class DigestDataFile extends DataFile {\n    * @param digest          digest of the file contents\n    * @param mimeType        mime-type of the data file, for example 'text/plain' or 'application/msword'\n    */\n-  public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n+\n+\n+    public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n     setDigestDataFile(fileName, digestAlgorithm, digest, getMimeType(mimeType));\n-  }\n+    }\n \n   /**\n    * Creates digest based data file.\n@@ -39,32 +39,36 @@ public class DigestDataFile extends DataFile {\n    * @deprecated use DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType)\n    * https://github.com/open-eid/digidoc4j/wiki/Examples-of-using-it#detached-xades-containerless-signature-handling\n    */\n-  @Deprecated\n-  public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n+\n+\n+    @Deprecated\n+    public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n     setDigestDataFile(fileName, digestAlgorithm, digest, null);\n-  }\n+    }\n \n-  private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+    private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n     try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n+        DigestDocument document = new DigestDocument();\n+        document.setName(fileName);\n+        document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+        if (mimeType != null)\n         document.setMimeType(mimeType);\n-      setDocument(document);\n+        setDocument(document);\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n       throw new InvalidDataFileException(e);\n     }\n-  }\n+    }\n+\n \n-  public String getContentType() {\n+    public String getContentType() {\n     return contentType;\n-  }\n+    }\n+\n \n-  public void setContentType(String contentType) {\n+    public void setContentType(String contentType) {\n     this.contentType = contentType;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/45/DigestDataFile.java\nindex fb2e0d3e49..cd71034ef2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/45/DigestDataFile.java\n@@ -45,26 +45,26 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n-        document.setMimeType(mimeType);\n-      setDocument(document);\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n+    logger.debug(\"File name: \" + fileName\n+  + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+ try {\n+   DigestDocument document = new DigestDocument();\n+   document.setName(fileName);\n+   document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+   if (mimeType != null)\n+     document.setMimeType(mimeType);\n+   setDocument(document);\n+ } catch (Exception e) {\n+   logger.error(e.getMessage());\n+   throw new InvalidDataFileException(e);\n+ }\n+}\n \n-  public String getContentType() {\n-    return contentType;\n-  }\n+public String getContentType() {\n+  return contentType;\n+}\n \n-  public void setContentType(String contentType) {\n-    this.contentType = contentType;\n-  }\n+public void setContentType(String contentType) {\n+  this.contentType = contentType;\n+}\n }\n",
            "diff_size": 20
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/45/DigestDataFile.java\nindex fb2e0d3e49..c35dfce928 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/45/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/45/DigestDataFile.java\n@@ -45,26 +45,25 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, MimeType mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n-        document.setMimeType(mimeType);\n-      setDocument(document);\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n+    logger.debug(\"File name: \" + fileName +\", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+try {\n+  DigestDocument document = new DigestDocument();\n+  document.setName(fileName);\n+  document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+  if (mimeType != null)\n+    document.setMimeType(mimeType);\n+  setDocument(document);\n+} catch (Exception e) {\n+  logger.error(e.getMessage());\n+  throw new InvalidDataFileException(e);\n+}\n+}\n \n-  public String getContentType() {\n-    return contentType;\n-  }\n+public String getContentType() {\n+  return contentType;\n+}\n \n-  public void setContentType(String contentType) {\n-    this.contentType = contentType;\n-  }\n+public void setContentType(String contentType) {\n+  this.contentType = contentType;\n+}\n }\n",
            "diff_size": 20
        }
    ]
}