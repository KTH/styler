{
    "error_id": "59",
    "information": {
        "errors": [
            {
                "line": "105",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n\n        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n        final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n\n        OpenBucketResponse response = core",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler/59/BucketLifecycleTest.java\nindex c547193f6a..5395b285e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler/59/BucketLifecycleTest.java\n@@ -101,8 +101,7 @@ public class BucketLifecycleTest {\n         final CouchbaseCore core = new CouchbaseCore();\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n-\n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+            OpenBucketRequestbadAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/59/BucketLifecycleTest.java\nindex c547193f6a..ba2e7f93ad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/59/BucketLifecycleTest.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core;\n \n import com.couchbase.client.core.config.ConfigurationException;\n@@ -102,7 +103,8 @@ public class BucketLifecycleTest {\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n \n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+        OpenBucketRequest badAttempt =\n+            new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/59/BucketLifecycleTest.java\nindex c547193f6a..8d9f4a8b43 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/59/BucketLifecycleTest.java\n@@ -120,4 +120,4 @@ public class BucketLifecycleTest {\n         assertEquals(ResponseStatus.SUCCESS, response.status());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 112, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 116, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 112, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 98, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/59/BucketLifecycleTest.java\nindex c547193f6a..0d83706c23 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/59/BucketLifecycleTest.java\n@@ -30,11 +30,9 @@ import com.couchbase.client.core.util.TestProperties;\n import org.junit.Test;\n import rx.Observable;\n import rx.functions.Func0;\n-\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.concurrent.TimeUnit;\n-\n import static org.junit.Assert.assertEquals;\n \n /**\n@@ -43,12 +41,12 @@ import static org.junit.Assert.assertEquals;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class BucketLifecycleTest {\n \n+\n+public class BucketLifecycleTest {\n     @Test\n     public void shouldSuccessfullyOpenBucket() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n         Observable<OpenBucketResponse> response = core.send(request);\n@@ -72,7 +70,6 @@ public class BucketLifecycleTest {\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningNonExistentBucket() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         core.send(request).toBlocking().single();\n@@ -81,7 +78,6 @@ public class BucketLifecycleTest {\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningBucketWithWrongPassword() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password() + \"asd\");\n         core.send(request).toBlocking().single();\n@@ -90,7 +86,6 @@ public class BucketLifecycleTest {\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningWithWrongHost() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(\"certainlyInvalidHostname\")));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password() + \"asd\");\n         core.send(request).toBlocking().single();\n@@ -99,25 +94,15 @@ public class BucketLifecycleTest {\n     @Test\n     public void shouldSucceedSubsequentlyAfterFailedAttempt() {\n         final CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n-\n         OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n-\n-        OpenBucketResponse response = core\n-            .<OpenBucketResponse>send(badAttempt)\n-            .onErrorResumeNext(Observable.defer(new Func0<Observable<OpenBucketResponse>>() {\n-                @Override\n-                public Observable<OpenBucketResponse> call() {\n-                    return core.send(goodAttempt);\n-                }\n-            }))\n-            .timeout(10, TimeUnit.SECONDS)\n-            .toBlocking()\n-            .single();\n-\n+        OpenBucketResponse response = core.<OpenBucketResponse>send(badAttempt).onErrorResumeNext(Observable.defer(new Func0<Observable<OpenBucketResponse>>() {\n+                                                                                                                @Override\n+                                                                                                                public Observable<OpenBucketResponse> call() {\n+                                                                                                                    return core.send(goodAttempt);\n+                                                                                                                }\n+                                                                                                  })).timeout(10, TimeUnit.SECONDS).toBlocking().single();\n         assertEquals(ResponseStatus.SUCCESS, response.status());\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "column": "85",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "230",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/59/BucketLifecycleTest.java\nindex c547193f6a..d8645927af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/59/BucketLifecycleTest.java\n@@ -102,8 +102,7 @@ public class BucketLifecycleTest {\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n \n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n-        final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n+        OpenBucketRequest badAttempt = newOpenBucketRequest(TestProperties. bucket()+ \"asd\" ,TestProperties.password());finalOpenBucketRequestgoodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n             .<OpenBucketResponse>send(badAttempt)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_three_grams/59/BucketLifecycleTest.java\nindex c547193f6a..5395b285e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/59/BucketLifecycleTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_three_grams/59/BucketLifecycleTest.java\n@@ -101,8 +101,7 @@ public class BucketLifecycleTest {\n         final CouchbaseCore core = new CouchbaseCore();\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n-\n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+            OpenBucketRequestbadAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 2
        }
    ]
}