{
    "error_id": "242",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/242/ByteBufUtils.java\nindex 28e0309997..a9aecaae22 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/242/ByteBufUtils.java\n@@ -22,42 +22,42 @@ import io.netty.buffer.*;\n  * Netty ByteBuf allocation utils.\n  */\n public class ByteBufUtils {\n-  private static volatile ByteBufAllocator allocator = null;\n-  public static volatile boolean useDirect = true;\n-  public static volatile boolean usePool = true;\n-\n-  private static ByteBufAllocator getBufferAllocator() {\n-    if(allocator == null) {\n-      if(usePool) {\n-        allocator = new PooledByteBufAllocator();\n-      } else {\n-        allocator = new UnpooledByteBufAllocator(true);\n-      }\n+    private static volatile ByteBufAllocator allocator = null;\n+    public static volatile boolean useDirect = true;\n+    public static volatile boolean usePool = true;\n+\n+    private static ByteBufAllocator getBufferAllocator() {\n+        if (allocator == null) {\n+            if (usePool) {\n+                allocator = new PooledByteBufAllocator();\n+            } else {\n+                allocator = new UnpooledByteBufAllocator(true);\n+            }\n+        }\n+        return allocator;\n     }\n-    return allocator;\n-  }\n-\n-  public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\n-    return getBufferAllocator().buffer(estimizeSerilizeSize);\n-  }\n-\n-  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n-    return getBufferAllocator().directBuffer(estimizeSerilizeSize);\n-  }\n-\n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n-    if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n-    } else {\n-      return newHeapByteBuf(estimizeSerilizeSize);\n+\n+    public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\n+        return getBufferAllocator().buffer(estimizeSerilizeSize);\n+    }\n+\n+    public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n+        return getBufferAllocator().directBuffer(estimizeSerilizeSize);\n+    }\n+\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n+        if (useDirect) {\n+            return newDirectByteBuf(estimizeSerilizeSize);\n+        } else {\n+            return newHeapByteBuf(estimizeSerilizeSize);\n+        }\n     }\n-  }\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n-    if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n-    } else {\n-      return newHeapByteBuf(estimizeSerilizeSize);\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n+        if (useDirect) {\n+            return newDirectByteBuf(estimizeSerilizeSize);\n+        } else {\n+            return newHeapByteBuf(estimizeSerilizeSize);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/242/ByteBufUtils.java\nindex 28e0309997..40875f65e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/242/ByteBufUtils.java\n@@ -60,4 +60,4 @@ public class ByteBufUtils {\n       return newHeapByteBuf(estimizeSerilizeSize);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/242/ByteBufUtils.java\nindex 28e0309997..37deb5c901 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/242/ByteBufUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/242/ByteBufUtils.java\n@@ -21,43 +21,45 @@ import io.netty.buffer.*;\n /**\n  * Netty ByteBuf allocation utils.\n  */\n+\n public class ByteBufUtils {\n-  private static volatile ByteBufAllocator allocator = null;\n-  public static volatile boolean useDirect = true;\n-  public static volatile boolean usePool = true;\n+    private static volatile ByteBufAllocator allocator = null;\n+\n+    public static volatile boolean useDirect = true;\n \n-  private static ByteBufAllocator getBufferAllocator() {\n-    if(allocator == null) {\n-      if(usePool) {\n+    public static volatile boolean usePool = true;\n+    private static ByteBufAllocator getBufferAllocator() {\n+    if (allocator == null) {\n+        if (usePool) {\n         allocator = new PooledByteBufAllocator();\n-      } else {\n-        allocator = new UnpooledByteBufAllocator(true);\n-      }\n+        } else {\n+          allocator = new UnpooledByteBufAllocator(true);\n+        }\n     }\n     return allocator;\n-  }\n+    }\n \n-  public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\n+    public static ByteBuf newHeapByteBuf(int estimizeSerilizeSize) {\n     return getBufferAllocator().buffer(estimizeSerilizeSize);\n-  }\n+    }\n \n-  public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n+    public static ByteBuf newDirectByteBuf(int estimizeSerilizeSize) {\n     return getBufferAllocator().directBuffer(estimizeSerilizeSize);\n-  }\n+    }\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize, boolean useDirect) {\n     if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n+        return newDirectByteBuf(estimizeSerilizeSize);\n     } else {\n       return newHeapByteBuf(estimizeSerilizeSize);\n     }\n-  }\n+    }\n \n-  public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n+    public static ByteBuf newByteBuf(int estimizeSerilizeSize) {\n     if (useDirect) {\n-      return newDirectByteBuf(estimizeSerilizeSize);\n+        return newDirectByteBuf(estimizeSerilizeSize);\n     } else {\n       return newHeapByteBuf(estimizeSerilizeSize);\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}