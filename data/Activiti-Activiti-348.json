{
    "error_id": "348",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.calendar;\n\nimport java.util.Calendar;\nimport java.util.Date;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/348/AdvancedSchedulerResolverWithTimeZone.java\nindex c5e057a79b..17559cddb9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/348/AdvancedSchedulerResolverWithTimeZone.java\n@@ -1,51 +1,52 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.calendar;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.TimeZone;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.api.internal.Internal;\r\n-import org.activiti.engine.runtime.ClockReader;\r\n-\r\n-/**\r\n- * Resolves a due date taking into account the specified time zone.\r\n- *\r\n- */\r\n-@Internal\r\n-public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\r\n-\r\n-  @Override\r\n-  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n-    Calendar nextRun = null;\r\n-\r\n-    try {\r\n-      if (duedateDescription.startsWith(\"R\")) {\r\n-        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      } else {\r\n-        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      }\r\n-\r\n-    } catch (Exception e) {\r\n-      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n-    }\r\n-\r\n-    return nextRun == null ? null : nextRun.getTime();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.calendar;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.api.internal.Internal;\n+import org.activiti.engine.runtime.ClockReader;\n+\n+/**\n+ * Resolves a due date taking into account the specified time zone.\n+ *\n+ */\n+@Internal\n+public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\n+\n+  @Override\n+  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\n+    Calendar nextRun = null;\n+\n+    try {\n+      if (duedateDescription.startsWith(\"R\")) {\n+        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\n+      } else {\n+        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\n+      }\n+\n+    } catch (Exception e) {\n+      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\n+    }\n+\n+    return nextRun == null ? null : nextRun.getTime();\n+  }\n+\n+}\n",
            "diff_size": 52
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/348/AdvancedSchedulerResolverWithTimeZone.java\nindex c5e057a79b..4313cb9c0c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/348/AdvancedSchedulerResolverWithTimeZone.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.calendar;\r\n \r\n import java.util.Calendar;\r\n@@ -25,27 +26,26 @@ import org.activiti.engine.runtime.ClockReader;\n \r\n /**\r\n  * Resolves a due date taking into account the specified time zone.\r\n- *\r\n  */\r\n @Internal\r\n public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\r\n \r\n-  @Override\r\n-  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n-    Calendar nextRun = null;\r\n+    @Override\r\n+    public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n+        Calendar nextRun = null;\r\n \r\n-    try {\r\n-      if (duedateDescription.startsWith(\"R\")) {\r\n-        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      } else {\r\n-        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      }\r\n+        try {\r\n+            if (duedateDescription.startsWith(\"R\")) {\r\n+                nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n+            } else {\r\n+                nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n+            }\r\n \r\n-    } catch (Exception e) {\r\n-      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n-    }\r\n+        } catch (Exception e) {\r\n+            throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n+        }\r\n \r\n-    return nextRun == null ? null : nextRun.getTime();\r\n-  }\r\n+        return nextRun == null ? null : nextRun.getTime();\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/348/AdvancedSchedulerResolverWithTimeZone.java\nindex c5e057a79b..06f7f84bb7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/348/AdvancedSchedulerResolverWithTimeZone.java\n@@ -13,39 +13,37 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.activiti.engine.impl.calendar;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.TimeZone;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.api.internal.Internal;\r\n+package org.activiti.engine.impl.calendar;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.api.internal.Internal;\n import org.activiti.engine.runtime.ClockReader;\r\n \r\n /**\r\n  * Resolves a due date taking into account the specified time zone.\r\n  *\r\n- */\r\n-@Internal\r\n-public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\r\n-\r\n-  @Override\r\n-  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n-    Calendar nextRun = null;\r\n-\r\n-    try {\r\n-      if (duedateDescription.startsWith(\"R\")) {\r\n-        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      } else {\r\n-        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      }\r\n-\r\n-    } catch (Exception e) {\r\n-      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n-    }\r\n-\r\n-    return nextRun == null ? null : nextRun.getTime();\r\n-  }\r\n-\r\n-}\r\n+ */\n+\n+@Internal\n+public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\n+\n+    @Override\n+    public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\n+    Calendar nextRun = null;\n+    try {\n+        if (duedateDescription.startsWith(\"R\")) {\n+        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\n+        } else {\n+            nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\n+        }\n+    } catch (Exception e) {\n+      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription,\n+                                  e);\n+    }\n+    return nextRun == null ? null : nextRun.getTime();\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/348/AdvancedSchedulerResolverWithTimeZone.java\nindex c5e057a79b..17559cddb9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/348/AdvancedSchedulerResolverWithTimeZone.java\n@@ -1,51 +1,52 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.calendar;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.TimeZone;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.api.internal.Internal;\r\n-import org.activiti.engine.runtime.ClockReader;\r\n-\r\n-/**\r\n- * Resolves a due date taking into account the specified time zone.\r\n- *\r\n- */\r\n-@Internal\r\n-public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\r\n-\r\n-  @Override\r\n-  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n-    Calendar nextRun = null;\r\n-\r\n-    try {\r\n-      if (duedateDescription.startsWith(\"R\")) {\r\n-        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      } else {\r\n-        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      }\r\n-\r\n-    } catch (Exception e) {\r\n-      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n-    }\r\n-\r\n-    return nextRun == null ? null : nextRun.getTime();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.calendar;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.api.internal.Internal;\n+import org.activiti.engine.runtime.ClockReader;\n+\n+/**\n+ * Resolves a due date taking into account the specified time zone.\n+ *\n+ */\n+@Internal\n+public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\n+\n+  @Override\n+  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\n+    Calendar nextRun = null;\n+\n+    try {\n+      if (duedateDescription.startsWith(\"R\")) {\n+        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\n+      } else {\n+        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\n+      }\n+\n+    } catch (Exception e) {\n+      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\n+    }\n+\n+    return nextRun == null ? null : nextRun.getTime();\n+  }\n+\n+}\n",
            "diff_size": 52
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/348/AdvancedSchedulerResolverWithTimeZone.java\nindex c5e057a79b..17559cddb9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/348/AdvancedSchedulerResolverWithTimeZone.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/348/AdvancedSchedulerResolverWithTimeZone.java\n@@ -1,51 +1,52 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.calendar;\r\n-\r\n-import java.util.Calendar;\r\n-import java.util.Date;\r\n-import java.util.TimeZone;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.api.internal.Internal;\r\n-import org.activiti.engine.runtime.ClockReader;\r\n-\r\n-/**\r\n- * Resolves a due date taking into account the specified time zone.\r\n- *\r\n- */\r\n-@Internal\r\n-public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\r\n-\r\n-  @Override\r\n-  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\r\n-    Calendar nextRun = null;\r\n-\r\n-    try {\r\n-      if (duedateDescription.startsWith(\"R\")) {\r\n-        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      } else {\r\n-        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\r\n-      }\r\n-\r\n-    } catch (Exception e) {\r\n-      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\r\n-    }\r\n-\r\n-    return nextRun == null ? null : nextRun.getTime();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.calendar;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.api.internal.Internal;\n+import org.activiti.engine.runtime.ClockReader;\n+\n+/**\n+ * Resolves a due date taking into account the specified time zone.\n+ *\n+ */\n+@Internal\n+public class AdvancedSchedulerResolverWithTimeZone implements AdvancedSchedulerResolver {\n+\n+  @Override\n+  public Date resolve(String duedateDescription, ClockReader clockReader, TimeZone timeZone) {\n+    Calendar nextRun = null;\n+\n+    try {\n+      if (duedateDescription.startsWith(\"R\")) {\n+        nextRun = new DurationHelper(duedateDescription, clockReader).getCalendarAfter(clockReader.getCurrentCalendar(timeZone));\n+      } else {\n+        nextRun = new CronExpression(duedateDescription, clockReader, timeZone).getTimeAfter(clockReader.getCurrentCalendar(timeZone));\n+      }\n+\n+    } catch (Exception e) {\n+      throw new ActivitiException(\"Failed to parse scheduler expression: \" + duedateDescription, e);\n+    }\n+\n+    return nextRun == null ? null : nextRun.getTime();\n+  }\n+\n+}\n",
            "diff_size": 52
        }
    ]
}