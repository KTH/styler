{
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n        if (!env().bootstrapCarrierEnabled()) {\n            LOGGER.info(\"Carrier Bootstrap manually disabled.\");\n            return Observable.error(new ConfigurationException(\"Carrier Bootstrap disabled through configuration.\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/10/CarrierLoader.java\nindex 3634d8a8bd..f6233c4a86 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/10/CarrierLoader.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.config.loader;\n \n import com.couchbase.client.core.ClusterFacade;\n@@ -65,7 +66,8 @@ public class CarrierLoader extends AbstractLoader {\n     }\n \n     @Override\n-    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n+    protected Observable<String> discoverConfig(final String bucket, final String password,\n+                                                final InetAddress hostname) {\n         if (!env().bootstrapCarrierEnabled()) {\n             LOGGER.info(\"Carrier Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"Carrier Bootstrap disabled through configuration.\"));\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/10/CarrierLoader.java\nindex 3634d8a8bd..0df0e69ad2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/10/CarrierLoader.java\n@@ -84,5 +84,4 @@ public class CarrierLoader extends AbstractLoader {\n                 }\n             });\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 105, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 109, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 113, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 109, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 109, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 109, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 105, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 100, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/10/CarrierLoader.java\nindex 3634d8a8bd..38d1c8adaf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/10/CarrierLoader.java\n@@ -33,7 +33,6 @@ import com.couchbase.client.core.service.ServiceType;\n import io.netty.util.CharsetUtil;\n import rx.Observable;\n import rx.functions.Func1;\n-\n import java.net.InetAddress;\n \n /**\n@@ -42,11 +41,14 @@ import java.net.InetAddress;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n+\n public class CarrierLoader extends AbstractLoader {\n \n     /**\n      * The logger used.\n      */\n+\n     private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(CarrierLoader.class);\n \n     /**\n@@ -55,6 +57,7 @@ public class CarrierLoader extends AbstractLoader {\n      * @param cluster the cluster reference.\n      * @param environment the environment to use.\n      */\n+\n     public CarrierLoader(ClusterFacade cluster, CoreEnvironment environment) {\n         super(LoaderType.Carrier, ServiceType.BINARY, cluster, environment);\n     }\n@@ -70,19 +73,16 @@ public class CarrierLoader extends AbstractLoader {\n             LOGGER.info(\"Carrier Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"Carrier Bootstrap disabled through configuration.\"));\n         }\n-        return cluster()\n-            .<GetBucketConfigResponse>send(new GetBucketConfigRequest(bucket, hostname))\n-            .map(new Func1<GetBucketConfigResponse, String>() {\n-                @Override\n-                public String call(GetBucketConfigResponse response) {\n-                    if (!response.status().isSuccess()) {\n-                        throw new IllegalStateException(\"Bucket config response did not return with success.\");\n-                    }\n+        return cluster().<GetBucketConfigResponse>send(new GetBucketConfigRequest(bucket, hostname)).map(new Func1<GetBucketConfigResponse, String>() {\n+                                                                                                         @Override\n+                                                                                                         public String call(GetBucketConfigResponse response) {\n+                                                                                                             if (!response.status().isSuccess()) {\n+                                                                                                                 throw new IllegalStateException(\"Bucket config response did not return with success.\");\n+                                                                                                             }\n \n-                    LOGGER.debug(\"Successfully loaded config through carrier.\");\n-                    return replaceHostWildcard(response.content().toString(CharsetUtil.UTF_8), hostname);\n-                }\n-            });\n+                                                                                                             LOGGER.debug(\"Successfully loaded config through carrier.\");\n+                                                                                                             return replaceHostWildcard(response.content().toString(CharsetUtil.UTF_8), hostname);\n+                                                                                                         }\n+                                                                                                    });\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/10/CarrierLoader.java\nindex 3634d8a8bd..47fe34505b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/10/CarrierLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/10/CarrierLoader.java\n@@ -64,8 +64,7 @@ public class CarrierLoader extends AbstractLoader {\n         return env().sslEnabled() ? env().bootstrapCarrierSslPort() : env().bootstrapCarrierDirectPort();\n     }\n \n-    @Override\n-    protected Observable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n+    @Override protectedObservable<String> discoverConfig(final String bucket, final String password, final InetAddress hostname) {\n         if (!env().bootstrapCarrierEnabled()) {\n             LOGGER.info(\"Carrier Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"Carrier Bootstrap disabled through configuration.\"));\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}