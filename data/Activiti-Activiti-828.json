{
    "error_id": "828",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "error",
                "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 32.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
            }
        ]
    },
    "source_code": "  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n    return commandContext.getExecutionEntityManager()\n    // can use execution count, since the result type doesn't matter\n        .findExecutionCountByNativeQuery(parameterMap);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/828/NativeProcessInstanceQueryImpl.java\nindex de9fb44d34..5fc47b9b50 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/828/NativeProcessInstanceQueryImpl.java\n@@ -1,35 +1,35 @@\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-import org.activiti.engine.runtime.NativeProcessInstanceQuery;\r\n-import org.activiti.engine.runtime.ProcessInstance;\r\n-\r\n-public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getExecutionEntityManager()\r\n-    // can use execution count, since the result type doesn't matter\r\n-        .findExecutionCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+import org.activiti.engine.runtime.NativeProcessInstanceQuery;\n+import org.activiti.engine.runtime.ProcessInstance;\n+\n+public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getExecutionEntityManager()\n+    // can use execution count, since the result type doesn't matter\n+    .findExecutionCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 35
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/828/NativeProcessInstanceQueryImpl.java\nindex de9fb44d34..8efd99783d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/828/NativeProcessInstanceQueryImpl.java\n@@ -10,26 +10,26 @@ import org.activiti.engine.runtime.ProcessInstance;\n \r\n public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\r\n \r\n-  private static final long serialVersionUID = 1L;\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n-  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n+    public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\r\n+        super(commandContext);\r\n+    }\r\n \r\n-  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n+    public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n+        super(commandExecutor);\r\n+    }\r\n \r\n-  // results ////////////////////////////////////////////////////////////////\r\n+    // results ////////////////////////////////////////////////////////////////\r\n \r\n-  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n+    public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n+        return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\r\n+    }\r\n \r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getExecutionEntityManager()\r\n-    // can use execution count, since the result type doesn't matter\r\n-        .findExecutionCountByNativeQuery(parameterMap);\r\n-  }\r\n+    public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n+        return commandContext.getExecutionEntityManager()\r\n+                // can use execution count, since the result type doesn't matter\r\n+                .findExecutionCountByNativeQuery(parameterMap);\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/828/NativeProcessInstanceQueryImpl.java\nindex de9fb44d34..30854a16e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/828/NativeProcessInstanceQueryImpl.java\n@@ -32,4 +32,4 @@ public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativePr\n         .findExecutionCountByNativeQuery(parameterMap);\r\n   }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/828/NativeProcessInstanceQueryImpl.java\nindex de9fb44d34..5fc47b9b50 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/828/NativeProcessInstanceQueryImpl.java\n@@ -1,35 +1,35 @@\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-import org.activiti.engine.runtime.NativeProcessInstanceQuery;\r\n-import org.activiti.engine.runtime.ProcessInstance;\r\n-\r\n-public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getExecutionEntityManager()\r\n-    // can use execution count, since the result type doesn't matter\r\n-        .findExecutionCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+import org.activiti.engine.runtime.NativeProcessInstanceQuery;\n+import org.activiti.engine.runtime.ProcessInstance;\n+\n+public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getExecutionEntityManager()\n+    // can use execution count, since the result type doesn't matter\n+    .findExecutionCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 35
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/828/NativeProcessInstanceQueryImpl.java\nindex de9fb44d34..65deab904f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/828/NativeProcessInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/828/NativeProcessInstanceQueryImpl.java\n@@ -1,35 +1,34 @@\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-import org.activiti.engine.runtime.NativeProcessInstanceQuery;\r\n-import org.activiti.engine.runtime.ProcessInstance;\r\n-\r\n-public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getExecutionEntityManager()\r\n-    // can use execution count, since the result type doesn't matter\r\n-        .findExecutionCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+import org.activiti.engine.runtime.NativeProcessInstanceQuery;\n+import org.activiti.engine.runtime.ProcessInstance;\n+\n+public class NativeProcessInstanceQueryImpl extends AbstractNativeQuery<NativeProcessInstanceQuery, ProcessInstance> implements NativeProcessInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeProcessInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeProcessInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<ProcessInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getExecutionEntityManager().findProcessInstanceByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getExecutionEntityManager()// can use execution count, since the result type doesn't matter\n+    .findExecutionCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 35
        }
    ]
}