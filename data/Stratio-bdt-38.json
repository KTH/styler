{
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.stratio.qa.specs;\n\nimport com.stratio.qa.utils.ThreadProperty;\nimport io.cucumber.datatable.DataTable;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/38/MiscTest.java\nindex 15f75026e1..70f2c8aea2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/38/MiscTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/38/MiscTest.java\nindex 15f75026e1..7516039759 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/38/MiscTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -40,18 +41,21 @@ public class MiscTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n         try {\n-            misc.saveElementEnvironment(null, jsonString.concat(\".$.[0]\"), envVar);\n+            misc.saveElementEnvironment(null, jsonString.concat(\".$.[0]\"),\n+                envVar);\n         } catch (Exception e) {\n             fail(\"Error parsing JSON String\");\n         }\n \n-        assertThat(ThreadProperty.get(envVar)).as(\"Not correctly ordered\").isEqualTo(\"stratiopaaslogs-2016-07-26\");\n+        assertThat(ThreadProperty.get(envVar)).as(\"Not correctly ordered\")\n+            .isEqualTo(\"stratiopaaslogs-2016-07-26\");\n     }\n \n     @Test\n@@ -63,9 +67,11 @@ public class MiscTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n         String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n+            Paths.get(getClass().getClassLoader().getResource(ascendingFile)\n+                .getFile())));\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n@@ -80,7 +86,8 @@ public class MiscTest {\n \n         String value = ThreadProperty.get(envVar);\n \n-        assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n+        assertThat(value).as(\"Not correctly ordered\")\n+            .isEqualTo(jsonStringAscending);\n     }\n \n     @Test\n@@ -92,9 +99,11 @@ public class MiscTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n         String jsonStringDescending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n+            Paths.get(getClass().getClassLoader().getResource(descendingFile)\n+                .getFile())));\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n@@ -109,7 +118,8 @@ public class MiscTest {\n \n         String value = ThreadProperty.get(envVar);\n \n-        assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringDescending);\n+        assertThat(value).as(\"Not correctly ordered\")\n+            .isEqualTo(jsonStringDescending);\n     }\n \n     @Test\n@@ -120,7 +130,8 @@ public class MiscTest {\n         String envVar = \"envVar\";\n \n         String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n+            Paths.get(getClass().getClassLoader().getResource(ascendingFile)\n+                .getFile())));\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n@@ -135,7 +146,8 @@ public class MiscTest {\n \n         String value = ThreadProperty.get(envVar);\n \n-        assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n+        assertThat(value).as(\"Not correctly ordered\")\n+            .isEqualTo(jsonStringAscending);\n     }\n \n     @Test\n@@ -146,7 +158,8 @@ public class MiscTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n@@ -170,12 +183,15 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n-        List<String> row2 = Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -194,12 +210,15 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n-        List<String> row2 = Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -218,12 +237,15 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n-        List<String> row2 = Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -242,12 +264,15 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n-        List<String> row2 = Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -266,12 +291,14 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"&&\", \"leader\");\n-        List<String> row2 = Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -290,12 +317,15 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n-        List<String> row2 = Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n+        List<String> row2 =\n+            Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -314,7 +344,8 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -338,7 +369,8 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -358,7 +390,8 @@ public class MiscTest {\n         MiscSpec misc = new MiscSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -376,7 +409,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"BlaBlaBla\", \"not valid comparison\", \"BleBleBle\")).withMessageContaining(\"Not a valid comparison. Valid ones are: is | matches | is higher than | is higher than or equal to | is lower than | is lower than or equal to | contains | does not contain | is different from\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc\n+            .checkValue(\"BlaBlaBla\", \"not valid comparison\", \"BleBleBle\"))\n+            .withMessageContaining(\n+                \"Not a valid comparison. Valid ones are: is | matches | is higher than | is higher than or equal to | is lower than | is lower than or equal to | contains | does not contain | is different from\");\n     }\n \n     @Test\n@@ -385,7 +421,9 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(ComparisonFailure.class).isThrownBy(() -> misc.checkValue(\"10\", \"is\", \"5\")).withMessageContaining(\"Values are not equal.\");\n+        assertThatExceptionOfType(ComparisonFailure.class)\n+            .isThrownBy(() -> misc.checkValue(\"10\", \"is\", \"5\"))\n+            .withMessageContaining(\"Values are not equal.\");\n     }\n \n     @Test()\n@@ -403,7 +441,9 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"matches\", \"test\")).withMessageContaining(\"Values are different.\");\n+        assertThatExceptionOfType(AssertionError.class)\n+            .isThrownBy(() -> misc.checkValue(\"prueba\", \"matches\", \"test\"))\n+            .withMessageContaining(\"Values are different.\");\n     }\n \n     @Test\n@@ -421,7 +461,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is higher than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(() -> misc.checkValue(\"prueba\", \"is higher than\", \"10\"))\n+            .withMessageContaining(\n+                \"A number should be provided in order to perform a valid comparison.\");\n     }\n \n     @Test\n@@ -430,7 +473,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"5\", \"is higher than\", \"10\")).withMessageContaining(\"First value is not higher than second one.\");\n+        assertThatExceptionOfType(AssertionError.class)\n+            .isThrownBy(() -> misc.checkValue(\"5\", \"is higher than\", \"10\"))\n+            .withMessageContaining(\n+                \"First value is not higher than second one.\");\n     }\n \n     @Test\n@@ -443,12 +489,16 @@ public class MiscTest {\n     }\n \n     @Test\n-    public void testCheckValueIsHigherThanOrEqualToException() throws Exception {\n+    public void testCheckValueIsHigherThanOrEqualToException()\n+        throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(\n+            () -> misc.checkValue(\"prueba\", \"is higher than or equal to\", \"10\"))\n+            .withMessageContaining(\n+                \"A number should be provided in order to perform a valid comparison.\");\n     }\n \n     @Test\n@@ -457,7 +507,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"5\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"First value is not higher than or equal to second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(\n+            () -> misc.checkValue(\"5\", \"is higher than or equal to\", \"10\"))\n+            .withMessageContaining(\n+                \"First value is not higher than or equal to second one.\");\n     }\n \n     @Test\n@@ -484,7 +537,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is lower than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(() -> misc.checkValue(\"prueba\", \"is lower than\", \"10\"))\n+            .withMessageContaining(\n+                \"A number should be provided in order to perform a valid comparison.\");\n     }\n \n     @Test\n@@ -493,7 +549,9 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"10\", \"is lower than\", \"5\")).withMessageContaining(\"First value is not lower than second one.\");\n+        assertThatExceptionOfType(AssertionError.class)\n+            .isThrownBy(() -> misc.checkValue(\"10\", \"is lower than\", \"5\"))\n+            .withMessageContaining(\"First value is not lower than second one.\");\n     }\n \n     @Test\n@@ -511,7 +569,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is lower than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(\n+            () -> misc.checkValue(\"prueba\", \"is lower than or equal to\", \"10\"))\n+            .withMessageContaining(\n+                \"A number should be provided in order to perform a valid comparison.\");\n     }\n \n     @Test\n@@ -520,7 +581,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"10\", \"is lower than or equal to\", \"5\")).withMessageContaining(\"First value is not lower than or equal to second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(\n+            () -> misc.checkValue(\"10\", \"is lower than or equal to\", \"5\"))\n+            .withMessageContaining(\n+                \"First value is not lower than or equal to second one.\");\n     }\n \n     @Test\n@@ -547,7 +611,10 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"contains\", \"test\")).withMessageContaining(\"Second value is not contained in first one.\");\n+        assertThatExceptionOfType(AssertionError.class)\n+            .isThrownBy(() -> misc.checkValue(\"Prueba\", \"contains\", \"test\"))\n+            .withMessageContaining(\n+                \"Second value is not contained in first one.\");\n     }\n \n     @Test\n@@ -565,7 +632,9 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"does not contain\", \"rueb\")).withMessageContaining(\"Second value is contained in first one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(\n+            () -> misc.checkValue(\"Prueba\", \"does not contain\", \"rueb\"))\n+            .withMessageContaining(\"Second value is contained in first one.\");\n     }\n \n     @Test\n@@ -583,7 +652,9 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n \n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"is different from\", \"Prueba\")).withMessageContaining(\"Both values are equal.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(\n+            () -> misc.checkValue(\"Prueba\", \"is different from\", \"Prueba\"))\n+            .withMessageContaining(\"Both values are equal.\");\n     }\n \n     @Test\n@@ -601,8 +672,9 @@ public class MiscTest {\n         System.clearProperty(\"DCOS_TENANT\");\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setTenantVariables)\n-                .withMessage(\"DCOS_TENANT is null\");\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(misc::setTenantVariables)\n+            .withMessage(\"DCOS_TENANT is null\");\n     }\n \n     @Test\n@@ -612,25 +684,44 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setTenantVariables();\n-        assertThat(\"NONE\").as(\"Check CC_TENANT\").isEqualTo(ThreadProperty.get(\"CC_TENANT\"));\n-        assertThat(\"test\").as(\"Check XD_TENANT\").isEqualTo(ThreadProperty.get(\"XD_TENANT\"));\n-        assertThat(\"test\").as(\"Check ZK_TENANT\").isEqualTo(ThreadProperty.get(\"ZK_TENANT\"));\n-        assertThat(\"test\").as(\"Check PG_TENANT\").isEqualTo(ThreadProperty.get(\"PG_TENANT\"));\n-        assertThat(\"test\").as(\"Check ELASTIC_TENANT\").isEqualTo(ThreadProperty.get(\"ELASTIC_TENANT\"));\n-        assertThat(\"test\").as(\"Check KAFKA_TENANT\").isEqualTo(ThreadProperty.get(\"KAFKA_TENANT\"));\n-        assertThat(\"test\").as(\"Check SPARK_TENANT\").isEqualTo(ThreadProperty.get(\"SPARK_TENANT\"));\n-        assertThat(\"test\").as(\"Check PGD_TENANT\").isEqualTo(ThreadProperty.get(\"PGD_TENANT\"));\n-        assertThat(\"test\").as(\"Check SCHEMA_REGISTRY_TENANT\").isEqualTo(ThreadProperty.get(\"SCHEMA_REGISTRY_TENANT\"));\n-        assertThat(\"test\").as(\"Check REST_PROXY_TENANT\").isEqualTo(ThreadProperty.get(\"REST_PROXY_TENANT\"));\n-        assertThat(\"test\").as(\"Check GOV_TENANT\").isEqualTo(ThreadProperty.get(\"GOV_TENANT\"));\n-        assertThat(\"test\").as(\"Check CASSANDRA_TENANT\").isEqualTo(ThreadProperty.get(\"CASSANDRA_TENANT\"));\n-        assertThat(\"test\").as(\"Check IGNITE_TENANT\").isEqualTo(ThreadProperty.get(\"IGNITE_TENANT\"));\n-        assertThat(\"test\").as(\"Check ETCD_TENANT\").isEqualTo(ThreadProperty.get(\"ETCD_TENANT\"));\n-        assertThat(\"test\").as(\"Check K8S_TENANT\").isEqualTo(ThreadProperty.get(\"K8S_TENANT\"));\n-        assertThat(\"test\").as(\"Check ARANGO_TENANT\").isEqualTo(ThreadProperty.get(\"ARANGO_TENANT\"));\n-        assertThat(\"test\").as(\"Check KIBANA_TENANT\").isEqualTo(ThreadProperty.get(\"KIBANA_TENANT\"));\n-        assertThat(\"test\").as(\"Check HDFS_TENANT\").isEqualTo(ThreadProperty.get(\"HDFS_TENANT\"));\n-        assertThat(\"test\").as(\"Check SPARTA_TENANT\").isEqualTo(ThreadProperty.get(\"SPARTA_TENANT\"));\n+        assertThat(\"NONE\").as(\"Check CC_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"CC_TENANT\"));\n+        assertThat(\"test\").as(\"Check XD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"XD_TENANT\"));\n+        assertThat(\"test\").as(\"Check ZK_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ZK_TENANT\"));\n+        assertThat(\"test\").as(\"Check PG_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"PG_TENANT\"));\n+        assertThat(\"test\").as(\"Check ELASTIC_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ELASTIC_TENANT\"));\n+        assertThat(\"test\").as(\"Check KAFKA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"KAFKA_TENANT\"));\n+        assertThat(\"test\").as(\"Check SPARK_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SPARK_TENANT\"));\n+        assertThat(\"test\").as(\"Check PGD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"PGD_TENANT\"));\n+        assertThat(\"test\").as(\"Check SCHEMA_REGISTRY_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SCHEMA_REGISTRY_TENANT\"));\n+        assertThat(\"test\").as(\"Check REST_PROXY_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"REST_PROXY_TENANT\"));\n+        assertThat(\"test\").as(\"Check GOV_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"GOV_TENANT\"));\n+        assertThat(\"test\").as(\"Check CASSANDRA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"CASSANDRA_TENANT\"));\n+        assertThat(\"test\").as(\"Check IGNITE_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"IGNITE_TENANT\"));\n+        assertThat(\"test\").as(\"Check ETCD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ETCD_TENANT\"));\n+        assertThat(\"test\").as(\"Check K8S_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"K8S_TENANT\"));\n+        assertThat(\"test\").as(\"Check ARANGO_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ARANGO_TENANT\"));\n+        assertThat(\"test\").as(\"Check KIBANA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"KIBANA_TENANT\"));\n+        assertThat(\"test\").as(\"Check HDFS_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"HDFS_TENANT\"));\n+        assertThat(\"test\").as(\"Check SPARTA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SPARTA_TENANT\"));\n         System.clearProperty(\"DCOS_TENANT\");\n     }\n \n@@ -660,25 +751,44 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setTenantVariables();\n-        assertThat(\"cc\").as(\"Check CC_TENANT\").isEqualTo(ThreadProperty.get(\"CC_TENANT\"));\n-        assertThat(\"xd\").as(\"Check XD_TENANT\").isEqualTo(ThreadProperty.get(\"XD_TENANT\"));\n-        assertThat(\"zk\").as(\"Check ZK_TENANT\").isEqualTo(ThreadProperty.get(\"ZK_TENANT\"));\n-        assertThat(\"pg\").as(\"Check PG_TENANT\").isEqualTo(ThreadProperty.get(\"PG_TENANT\"));\n-        assertThat(\"elastic\").as(\"Check ELASTIC_TENANT\").isEqualTo(ThreadProperty.get(\"ELASTIC_TENANT\"));\n-        assertThat(\"kafka\").as(\"Check KAFKA_TENANT\").isEqualTo(ThreadProperty.get(\"KAFKA_TENANT\"));\n-        assertThat(\"spark\").as(\"Check SPARK_TENANT\").isEqualTo(ThreadProperty.get(\"SPARK_TENANT\"));\n-        assertThat(\"pgd\").as(\"Check PGD_TENANT\").isEqualTo(ThreadProperty.get(\"PGD_TENANT\"));\n-        assertThat(\"sr\").as(\"Check SCHEMA_REGISTRY_TENANT\").isEqualTo(ThreadProperty.get(\"SCHEMA_REGISTRY_TENANT\"));\n-        assertThat(\"rp\").as(\"Check REST_PROXY_TENANT\").isEqualTo(ThreadProperty.get(\"REST_PROXY_TENANT\"));\n-        assertThat(\"gov\").as(\"Check GOV_TENANT\").isEqualTo(ThreadProperty.get(\"GOV_TENANT\"));\n-        assertThat(\"cas\").as(\"Check CASSANDRA_TENANT\").isEqualTo(ThreadProperty.get(\"CASSANDRA_TENANT\"));\n-        assertThat(\"ign\").as(\"Check IGNITE_TENANT\").isEqualTo(ThreadProperty.get(\"IGNITE_TENANT\"));\n-        assertThat(\"etcd\").as(\"Check ETCD_TENANT\").isEqualTo(ThreadProperty.get(\"ETCD_TENANT\"));\n-        assertThat(\"k8s\").as(\"Check K8S_TENANT\").isEqualTo(ThreadProperty.get(\"K8S_TENANT\"));\n-        assertThat(\"arango\").as(\"Check ARANGO_TENANT\").isEqualTo(ThreadProperty.get(\"ARANGO_TENANT\"));\n-        assertThat(\"kib\").as(\"Check KIBANA_TENANT\").isEqualTo(ThreadProperty.get(\"KIBANA_TENANT\"));\n-        assertThat(\"hdfs\").as(\"Check HDFS_TENANT\").isEqualTo(ThreadProperty.get(\"HDFS_TENANT\"));\n-        assertThat(\"sparta\").as(\"Check SPARTA_TENANT\").isEqualTo(ThreadProperty.get(\"SPARTA_TENANT\"));\n+        assertThat(\"cc\").as(\"Check CC_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"CC_TENANT\"));\n+        assertThat(\"xd\").as(\"Check XD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"XD_TENANT\"));\n+        assertThat(\"zk\").as(\"Check ZK_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ZK_TENANT\"));\n+        assertThat(\"pg\").as(\"Check PG_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"PG_TENANT\"));\n+        assertThat(\"elastic\").as(\"Check ELASTIC_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ELASTIC_TENANT\"));\n+        assertThat(\"kafka\").as(\"Check KAFKA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"KAFKA_TENANT\"));\n+        assertThat(\"spark\").as(\"Check SPARK_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SPARK_TENANT\"));\n+        assertThat(\"pgd\").as(\"Check PGD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"PGD_TENANT\"));\n+        assertThat(\"sr\").as(\"Check SCHEMA_REGISTRY_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SCHEMA_REGISTRY_TENANT\"));\n+        assertThat(\"rp\").as(\"Check REST_PROXY_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"REST_PROXY_TENANT\"));\n+        assertThat(\"gov\").as(\"Check GOV_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"GOV_TENANT\"));\n+        assertThat(\"cas\").as(\"Check CASSANDRA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"CASSANDRA_TENANT\"));\n+        assertThat(\"ign\").as(\"Check IGNITE_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"IGNITE_TENANT\"));\n+        assertThat(\"etcd\").as(\"Check ETCD_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ETCD_TENANT\"));\n+        assertThat(\"k8s\").as(\"Check K8S_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"K8S_TENANT\"));\n+        assertThat(\"arango\").as(\"Check ARANGO_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"ARANGO_TENANT\"));\n+        assertThat(\"kib\").as(\"Check KIBANA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"KIBANA_TENANT\"));\n+        assertThat(\"hdfs\").as(\"Check HDFS_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"HDFS_TENANT\"));\n+        assertThat(\"sparta\").as(\"Check SPARTA_TENANT\")\n+            .isEqualTo(ThreadProperty.get(\"SPARTA_TENANT\"));\n         System.clearProperty(\"DCOS_TENANT\");\n         System.clearProperty(\"CC_TENANT\");\n         System.clearProperty(\"XD_TENANT\");\n@@ -706,8 +816,9 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables)\n-                .withMessage(\"gosec-management_version has not been defined\");\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(misc::setGosecVariables)\n+            .withMessage(\"gosec-management_version has not been defined\");\n     }\n \n     @Test\n@@ -717,8 +828,9 @@ public class MiscTest {\n \n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables)\n-                .withMessage(\"gosec-management_version must have X.X.X format\");\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(misc::setGosecVariables)\n+            .withMessage(\"gosec-management_version must have X.X.X format\");\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n@@ -728,7 +840,8 @@ public class MiscTest {\n         ThreadProperty.set(\"gosec-management_version\", \"1.x.1\");\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables);\n+        assertThatExceptionOfType(Exception.class)\n+            .isThrownBy(misc::setGosecVariables);\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n@@ -739,14 +852,22 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setGosecVariables();\n-        assertThat(\"/api/user/\").as(\"Check API_USER\").isEqualTo(ThreadProperty.get(\"API_USER\"));\n-        assertThat(\"/api/group/\").as(\"Check API_GROUP\").isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n-        assertThat(\"/api/policy/\").as(\"Check API_POLICY\").isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n-        assertThat(\"/api/policy/tag/\").as(\"Check API_TAG\").isEqualTo(ThreadProperty.get(\"API_TAG\"));\n-        assertThat(\"/api/user\").as(\"Check API_USERS\").isEqualTo(ThreadProperty.get(\"API_USERS\"));\n-        assertThat(\"/api/group\").as(\"Check API_GROUPS\").isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n-        assertThat(\"/api/policy\").as(\"Check API_POLICIES\").isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n-        assertThat(\"/api/policy/tag\").as(\"Check API_TAGS\").isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n+        assertThat(\"/api/user/\").as(\"Check API_USER\")\n+            .isEqualTo(ThreadProperty.get(\"API_USER\"));\n+        assertThat(\"/api/group/\").as(\"Check API_GROUP\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n+        assertThat(\"/api/policy/\").as(\"Check API_POLICY\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n+        assertThat(\"/api/policy/tag/\").as(\"Check API_TAG\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAG\"));\n+        assertThat(\"/api/user\").as(\"Check API_USERS\")\n+            .isEqualTo(ThreadProperty.get(\"API_USERS\"));\n+        assertThat(\"/api/group\").as(\"Check API_GROUPS\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n+        assertThat(\"/api/policy\").as(\"Check API_POLICIES\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n+        assertThat(\"/api/policy/tag\").as(\"Check API_TAGS\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n@@ -757,14 +878,22 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setGosecVariables();\n-        assertThat(\"/api/user/\").as(\"Check API_USER\").isEqualTo(ThreadProperty.get(\"API_USER\"));\n-        assertThat(\"/api/group/\").as(\"Check API_GROUP\").isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n-        assertThat(\"/api/policy/\").as(\"Check API_POLICY\").isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n-        assertThat(\"/api/policy/tag/\").as(\"Check API_TAG\").isEqualTo(ThreadProperty.get(\"API_TAG\"));\n-        assertThat(\"/api/user\").as(\"Check API_USERS\").isEqualTo(ThreadProperty.get(\"API_USERS\"));\n-        assertThat(\"/api/group\").as(\"Check API_GROUPS\").isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n-        assertThat(\"/api/policy\").as(\"Check API_POLICIES\").isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n-        assertThat(\"/api/policy/tag\").as(\"Check API_TAGS\").isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n+        assertThat(\"/api/user/\").as(\"Check API_USER\")\n+            .isEqualTo(ThreadProperty.get(\"API_USER\"));\n+        assertThat(\"/api/group/\").as(\"Check API_GROUP\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n+        assertThat(\"/api/policy/\").as(\"Check API_POLICY\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n+        assertThat(\"/api/policy/tag/\").as(\"Check API_TAG\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAG\"));\n+        assertThat(\"/api/user\").as(\"Check API_USERS\")\n+            .isEqualTo(ThreadProperty.get(\"API_USERS\"));\n+        assertThat(\"/api/group\").as(\"Check API_GROUPS\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n+        assertThat(\"/api/policy\").as(\"Check API_POLICIES\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n+        assertThat(\"/api/policy/tag\").as(\"Check API_TAGS\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n@@ -775,14 +904,22 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setGosecVariables();\n-        assertThat(\"/api/user?id=\").as(\"Check API_USER\").isEqualTo(ThreadProperty.get(\"API_USER\"));\n-        assertThat(\"/api/group?id=\").as(\"Check API_GROUP\").isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n-        assertThat(\"/api/policy?id=\").as(\"Check API_POLICY\").isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n-        assertThat(\"/api/policy/tag?id=\").as(\"Check API_TAG\").isEqualTo(ThreadProperty.get(\"API_TAG\"));\n-        assertThat(\"/api/users\").as(\"Check API_USERS\").isEqualTo(ThreadProperty.get(\"API_USERS\"));\n-        assertThat(\"/api/groups\").as(\"Check API_GROUPS\").isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n-        assertThat(\"/api/policies\").as(\"Check API_POLICIES\").isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n-        assertThat(\"/api/policies/tags\").as(\"Check API_TAGS\").isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n+        assertThat(\"/api/user?id=\").as(\"Check API_USER\")\n+            .isEqualTo(ThreadProperty.get(\"API_USER\"));\n+        assertThat(\"/api/group?id=\").as(\"Check API_GROUP\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n+        assertThat(\"/api/policy?id=\").as(\"Check API_POLICY\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n+        assertThat(\"/api/policy/tag?id=\").as(\"Check API_TAG\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAG\"));\n+        assertThat(\"/api/users\").as(\"Check API_USERS\")\n+            .isEqualTo(ThreadProperty.get(\"API_USERS\"));\n+        assertThat(\"/api/groups\").as(\"Check API_GROUPS\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n+        assertThat(\"/api/policies\").as(\"Check API_POLICIES\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n+        assertThat(\"/api/policies/tags\").as(\"Check API_TAGS\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n@@ -793,14 +930,22 @@ public class MiscTest {\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n         misc.setGosecVariables();\n-        assertThat(\"/api/user?id=\").as(\"Check API_USER\").isEqualTo(ThreadProperty.get(\"API_USER\"));\n-        assertThat(\"/api/group?id=\").as(\"Check API_GROUP\").isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n-        assertThat(\"/api/policy?id=\").as(\"Check API_POLICY\").isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n-        assertThat(\"/api/policy/tag?id=\").as(\"Check API_TAG\").isEqualTo(ThreadProperty.get(\"API_TAG\"));\n-        assertThat(\"/api/users\").as(\"Check API_USERS\").isEqualTo(ThreadProperty.get(\"API_USERS\"));\n-        assertThat(\"/api/groups\").as(\"Check API_GROUPS\").isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n-        assertThat(\"/api/policies\").as(\"Check API_POLICIES\").isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n-        assertThat(\"/api/policies/tags\").as(\"Check API_TAGS\").isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n+        assertThat(\"/api/user?id=\").as(\"Check API_USER\")\n+            .isEqualTo(ThreadProperty.get(\"API_USER\"));\n+        assertThat(\"/api/group?id=\").as(\"Check API_GROUP\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUP\"));\n+        assertThat(\"/api/policy?id=\").as(\"Check API_POLICY\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICY\"));\n+        assertThat(\"/api/policy/tag?id=\").as(\"Check API_TAG\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAG\"));\n+        assertThat(\"/api/users\").as(\"Check API_USERS\")\n+            .isEqualTo(ThreadProperty.get(\"API_USERS\"));\n+        assertThat(\"/api/groups\").as(\"Check API_GROUPS\")\n+            .isEqualTo(ThreadProperty.get(\"API_GROUPS\"));\n+        assertThat(\"/api/policies\").as(\"Check API_POLICIES\")\n+            .isEqualTo(ThreadProperty.get(\"API_POLICIES\"));\n+        assertThat(\"/api/policies/tags\").as(\"Check API_TAGS\")\n+            .isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n",
            "diff_size": 269
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "161",
                    "severity": "error",
                    "message": "'catch rcurly' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/38/MiscTest.java\nindex 15f75026e1..02da271165 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/38/MiscTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -157,8 +158,7 @@ public class MiscTest {\n             misc.sortElements(envVar, \"nocriteria\", \"ascending\");\n             fail(\"No exception returned ordering without criteria\");\n         } catch (Exception e) {\n-\n-        }\n+}\n     }\n \n     @Test\n@@ -804,4 +804,4 @@ public class MiscTest {\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "288",
                    "column": "65",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "297",
                    "column": "73",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "315",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "333",
                    "column": "65",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "342",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "360",
                    "column": "65",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "369",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "396",
                    "column": "65",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "405",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "423",
                    "column": "65",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "432",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "459",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "477",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "495",
                    "column": "70",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/38/MiscTest.java\nindex 15f75026e1..286d58af9d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/38/MiscTest.java\n@@ -18,16 +18,16 @@ package com.stratio.qa.specs;\n import com.stratio.qa.utils.ThreadProperty;\n import io.cucumber.datatable.DataTable;\n import org.testng.annotations.Test;\n-\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.Arrays;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+\n import static org.assertj.core.api.Assertions.fail;\n-import static org.assertj.core.api.AssertionsForClassTypes.assertThatExceptionOfType;\n \n+import static org.assertj.core.api.AssertionsForClassTypes.assertThatExceptionOfType;\n import org.junit.ComparisonFailure;\n \n public class MiscTest {\n@@ -35,43 +35,31 @@ public class MiscTest {\n     @Test\n     public void testSaveElementFromVariable() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         try {\n             misc.saveElementEnvironment(null, jsonString.concat(\".$.[0]\"), envVar);\n         } catch (Exception e) {\n             fail(\"Error parsing JSON String\");\n         }\n-\n         assertThat(ThreadProperty.get(envVar)).as(\"Not correctly ordered\").isEqualTo(\"stratiopaaslogs-2016-07-26\");\n     }\n \n+\n     @Test\n     public void testSortJSONElementsAscending() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String ascendingFile = \"indicesJSONAscending.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-        String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+        String jsonStringAscending = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonString);\n-\n         try {\n             misc.sortElements(envVar, \"alphabetical\", \"ascending\");\n         } catch (Exception e) {\n@@ -79,28 +67,21 @@ public class MiscTest {\n         }\n \n         String value = ThreadProperty.get(envVar);\n-\n         assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n     }\n \n+\n     @Test\n     public void testSortJSONElementsDescending() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String descendingFile = \"indicesJSONDescending.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-        String jsonStringDescending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+        String jsonStringDescending = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonString);\n-\n         try {\n             misc.sortElements(envVar, \"alphabetical\", \"descending\");\n         } catch (Exception e) {\n@@ -108,25 +89,19 @@ public class MiscTest {\n         }\n \n         String value = ThreadProperty.get(envVar);\n-\n         assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringDescending);\n     }\n \n+\n     @Test\n     public void testSortJSONElementsOrderedByDefault() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String ascendingFile = \"indicesJSONAscending.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n-\n+        String jsonStringAscending = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonStringAscending);\n-\n         try {\n             misc.sortElements(envVar, \"alphabetical\", \"ascending\");\n         } catch (Exception e) {\n@@ -134,33 +109,26 @@ public class MiscTest {\n         }\n \n         String value = ThreadProperty.get(envVar);\n-\n         assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n     }\n \n+\n     @Test\n     public void testSortJSONElementsNoCriteria() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonString);\n-\n         try {\n             misc.sortElements(envVar, \"nocriteria\", \"ascending\");\n             fail(\"No exception returned ordering without criteria\");\n-        } catch (Exception e) {\n-\n-        }\n+        } catch (Exception e) { }\n     }\n \n+\n     @Test\n     public void testValueEqualInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -168,23 +136,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n         List<String> row2 = Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testValueNotEqualInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -192,23 +153,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n         List<String> row2 = Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testValueContainsInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -216,23 +170,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n         List<String> row2 = Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testValueDoesNotContainInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -240,23 +187,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n         List<String> row2 = Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class)\n     public void testWrongOperatorInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -264,23 +204,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"&&\", \"leader\");\n         List<String> row2 = Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testKeysContainsInJSON() throws Exception {\n         String baseData = \"exampleJSON.conf\";\n@@ -288,23 +221,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n         List<String> row2 = Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testSizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -312,23 +238,16 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$\", \"size\", \"4\");\n         List<String> row2 = Arrays.asList(\"$.[0].ServiceTags\", \"size\", \"2\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class)\n     public void testNotParsedArraySizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -336,19 +255,15 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0]\", \"size\", \"4\");\n         List<List<String>> rawData = Arrays.asList(row1);\n-\n         DataTable table = DataTable.create(rawData);\n         misc.matchWithExpresion(envVar, table);\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \".*?Expected array for size operation.*?\")\n     public void testNotArraySizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -356,255 +271,250 @@ public class MiscTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].Node\", \"size\", \"4\");\n         List<List<String>> rawData = Arrays.asList(row1);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         misc.matchWithExpresion(envVar, table);\n     }\n \n+\n     @Test\n     public void testCheckValueInvalidComparison() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"BlaBlaBla\", \"not valid comparison\", \"BleBleBle\")).withMessageContaining(\"Not a valid comparison. Valid ones are: is | matches | is higher than | is higher than or equal to | is lower than | is lower than or equal to | contains | does not contain | is different from\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(()-> misc.checkValue(\"BlaBlaBla\", \"not valid comparison\", \"BleBleBle\")).withMessageContaining(\"Not a valid comparison. Valid ones are: is | matches | is higher than | is higher than or equal to | is lower than | is lower than or equal to | contains | does not contain | is different from\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(ComparisonFailure.class).isThrownBy(() -> misc.checkValue(\"10\", \"is\", \"5\")).withMessageContaining(\"Values are not equal.\");\n+        assertThatExceptionOfType(ComparisonFailure.class).isThrownBy(()-> misc.checkValue(\"10\", \"is\", \"5\")).withMessageContaining(\"Values are not equal.\");\n     }\n \n+\n     @Test()\n     public void testCheckValueIsSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"10\", \"is\", \"10\");\n     }\n \n+\n     @Test\n     public void testCheckValueMatchesFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"matches\", \"test\")).withMessageContaining(\"Values are different.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"prueba\", \"matches\", \"test\")).withMessageContaining(\"Values are different.\");\n     }\n \n+\n     @Test\n     public void testCheckValueMatchesSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"prueba\", \"is\", \"prueba\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanException() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is higher than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(()-> misc.checkValue(\"prueba\", \"is higher than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"5\", \"is higher than\", \"10\")).withMessageContaining(\"First value is not higher than second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"5\", \"is higher than\", \"10\")).withMessageContaining(\"First value is not higher than second one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"10\", \"is higher than\", \"5\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanOrEqualToException() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(()-> misc.checkValue(\"prueba\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanOrEqualToFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"5\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"First value is not higher than or equal to second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"5\", \"is higher than or equal to\", \"10\")).withMessageContaining(\"First value is not higher than or equal to second one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanOrEqualToSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"10\", \"is higher than or equal to\", \"5\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsHigherThanOrEqualToSuccess2() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"5\", \"is higher than or equal to\", \"5\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanException() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is lower than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(()-> misc.checkValue(\"prueba\", \"is lower than\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"10\", \"is lower than\", \"5\")).withMessageContaining(\"First value is not lower than second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"10\", \"is lower than\", \"5\")).withMessageContaining(\"First value is not lower than second one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"5\", \"is lower than\", \"10\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanOrEqualToException() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(Exception.class).isThrownBy(() -> misc.checkValue(\"prueba\", \"is lower than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(()-> misc.checkValue(\"prueba\", \"is lower than or equal to\", \"10\")).withMessageContaining(\"A number should be provided in order to perform a valid comparison.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanOrEqualToFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"10\", \"is lower than or equal to\", \"5\")).withMessageContaining(\"First value is not lower than or equal to second one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"10\", \"is lower than or equal to\", \"5\")).withMessageContaining(\"First value is not lower than or equal to second one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanOrEqualToSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"5\", \"is lower than or equal to\", \"10\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsLowerThanOrEqualToSuccess2() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"5\", \"is lower than or equal to\", \"5\");\n     }\n \n+\n     @Test\n     public void testCheckValueContainsFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"contains\", \"test\")).withMessageContaining(\"Second value is not contained in first one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"Prueba\", \"contains\", \"test\")).withMessageContaining(\"Second value is not contained in first one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueContainsSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"Prueba\", \"contains\", \"rueb\");\n     }\n \n+\n     @Test\n     public void testCheckValueDoesNotContainFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"does not contain\", \"rueb\")).withMessageContaining(\"Second value is contained in first one.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"Prueba\", \"does not contain\", \"rueb\")).withMessageContaining(\"Second value is contained in first one.\");\n     }\n \n+\n     @Test\n     public void testCheckValueDoesNotContainSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"Prueba\", \"does not contain\", \"test\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsDifferentFromFail() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n-        assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> misc.checkValue(\"Prueba\", \"is different from\", \"Prueba\")).withMessageContaining(\"Both values are equal.\");\n+        assertThatExceptionOfType(AssertionError.class).isThrownBy(()-> misc.checkValue(\"Prueba\", \"is different from\", \"Prueba\")).withMessageContaining(\"Both values are equal.\");\n     }\n \n+\n     @Test\n     public void testCheckValueIsDifferentFromSuccess() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-\n         misc.checkValue(\"Prueba\", \"is different from\", \"test\");\n     }\n \n+\n     @Test\n     public void testTenantVariablesException() {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         System.clearProperty(\"DCOS_TENANT\");\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setTenantVariables)\n-                .withMessage(\"DCOS_TENANT is null\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setTenantVariables).withMessage(\"DCOS_TENANT is null\");\n     }\n \n+\n     @Test\n     public void testTenantVariablesDefaultBehaviour() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -634,6 +544,7 @@ public class MiscTest {\n         System.clearProperty(\"DCOS_TENANT\");\n     }\n \n+\n     @Test\n     public void testTenantVariablesAll() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -701,27 +612,27 @@ public class MiscTest {\n         System.clearProperty(\"SPARTA_TENANT\");\n     }\n \n+\n     @Test\n     public void testGosecVariablesNoGosecVersion() {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables)\n-                .withMessage(\"gosec-management_version has not been defined\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables).withMessage(\"gosec-management_version has not been defined\");\n     }\n \n+\n     @Test\n     public void testGosecVariablesInvalidGosecVersion() {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         ThreadProperty.set(\"gosec-management_version\", \"1.0\");\n-\n         CommonG commong = new CommonG();\n         MiscSpec misc = new MiscSpec(commong);\n-        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables)\n-                .withMessage(\"gosec-management_version must have X.X.X format\");\n+        assertThatExceptionOfType(Exception.class).isThrownBy(misc::setGosecVariables).withMessage(\"gosec-management_version must have X.X.X format\");\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n+\n     @Test\n     public void testGosecVariablesGosecVersionWithWrongCharacters() {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -732,6 +643,7 @@ public class MiscTest {\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n+\n     @Test\n     public void testGosecVariables() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -750,6 +662,7 @@ public class MiscTest {\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n+\n     @Test\n     public void testGosecVariables2() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -768,6 +681,7 @@ public class MiscTest {\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n+\n     @Test\n     public void testGosecVariables3() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -786,6 +700,7 @@ public class MiscTest {\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n \n+\n     @Test\n     public void testGosecVariables4() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n@@ -803,5 +718,4 @@ public class MiscTest {\n         assertThat(\"/api/policies/tags\").as(\"Check API_TAGS\").isEqualTo(ThreadProperty.get(\"API_TAGS\"));\n         ThreadProperty.remove(\"gosec-management_version\");\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 221
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/38/MiscTest.java\nindex 15f75026e1..70f2c8aea2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/38/MiscTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/38/MiscTest.java\nindex 15f75026e1..70f2c8aea2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/38/MiscTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/38/MiscTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        }
    ]
}