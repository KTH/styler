{
    "error_id": "185",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/185/DataAssociation.java\nindex 92afc245ee..7e31f3e463 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/185/DataAssociation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/185/DataAssociation.java\nindex 92afc245ee..ee7b90a738 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/185/DataAssociation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -20,59 +21,59 @@ import java.util.List;\n \n public class DataAssociation extends BaseElement {\n \n-  protected String sourceRef;\n-  protected String targetRef;\n-  protected String transformation;\n-  protected List<Assignment> assignments = new ArrayList<Assignment>();\n+    protected String sourceRef;\n+    protected String targetRef;\n+    protected String transformation;\n+    protected List<Assignment> assignments = new ArrayList<Assignment>();\n \n-  public String getSourceRef() {\n-    return sourceRef;\n-  }\n+    public String getSourceRef() {\n+        return sourceRef;\n+    }\n \n-  public void setSourceRef(String sourceRef) {\n-    this.sourceRef = sourceRef;\n-  }\n+    public void setSourceRef(String sourceRef) {\n+        this.sourceRef = sourceRef;\n+    }\n \n-  public String getTargetRef() {\n-    return targetRef;\n-  }\n+    public String getTargetRef() {\n+        return targetRef;\n+    }\n \n-  public void setTargetRef(String targetRef) {\n-    this.targetRef = targetRef;\n-  }\n+    public void setTargetRef(String targetRef) {\n+        this.targetRef = targetRef;\n+    }\n \n-  public String getTransformation() {\n-    return transformation;\n-  }\n+    public String getTransformation() {\n+        return transformation;\n+    }\n \n-  public void setTransformation(String transformation) {\n-    this.transformation = transformation;\n-  }\n+    public void setTransformation(String transformation) {\n+        this.transformation = transformation;\n+    }\n \n-  public List<Assignment> getAssignments() {\n-    return assignments;\n-  }\n+    public List<Assignment> getAssignments() {\n+        return assignments;\n+    }\n \n-  public void setAssignments(List<Assignment> assignments) {\n-    this.assignments = assignments;\n-  }\n+    public void setAssignments(List<Assignment> assignments) {\n+        this.assignments = assignments;\n+    }\n \n-  public DataAssociation clone() {\n-    DataAssociation clone = new DataAssociation();\n-    clone.setValues(this);\n-    return clone;\n-  }\n+    public DataAssociation clone() {\n+        DataAssociation clone = new DataAssociation();\n+        clone.setValues(this);\n+        return clone;\n+    }\n \n-  public void setValues(DataAssociation otherAssociation) {\n-    setSourceRef(otherAssociation.getSourceRef());\n-    setTargetRef(otherAssociation.getTargetRef());\n-    setTransformation(otherAssociation.getTransformation());\n+    public void setValues(DataAssociation otherAssociation) {\n+        setSourceRef(otherAssociation.getSourceRef());\n+        setTargetRef(otherAssociation.getTargetRef());\n+        setTransformation(otherAssociation.getTransformation());\n \n-    assignments = new ArrayList<Assignment>();\n-    if (otherAssociation.getAssignments() != null && !otherAssociation.getAssignments().isEmpty()) {\n-      for (Assignment assignment : otherAssociation.getAssignments()) {\n-        assignments.add(assignment.clone());\n-      }\n+        assignments = new ArrayList<Assignment>();\n+        if (otherAssociation.getAssignments() != null && !otherAssociation.getAssignments().isEmpty()) {\n+            for (Assignment assignment : otherAssociation.getAssignments()) {\n+                assignments.add(assignment.clone());\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/185/DataAssociation.java\nindex 92afc245ee..846a0620b7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/185/DataAssociation.java\n@@ -18,61 +18,60 @@ package org.activiti.bpmn.model;\n import java.util.ArrayList;\n import java.util.List;\n \n-public class DataAssociation extends BaseElement {\n \n-  protected String sourceRef;\n-  protected String targetRef;\n-  protected String transformation;\n-  protected List<Assignment> assignments = new ArrayList<Assignment>();\n+public class DataAssociation extends BaseElement {\n \n-  public String getSourceRef() {\n+    protected String sourceRef;\n+    protected String targetRef;\n+    protected String transformation;\n+    protected List<Assignment> assignments = new ArrayList<Assignment>();\n+    public String getSourceRef() {\n     return sourceRef;\n-  }\n+    }\n \n-  public void setSourceRef(String sourceRef) {\n+    public void setSourceRef(String sourceRef) {\n     this.sourceRef = sourceRef;\n-  }\n+    }\n \n-  public String getTargetRef() {\n+    public String getTargetRef() {\n     return targetRef;\n-  }\n+    }\n \n-  public void setTargetRef(String targetRef) {\n+    public void setTargetRef(String targetRef) {\n     this.targetRef = targetRef;\n-  }\n+    }\n \n-  public String getTransformation() {\n+    public String getTransformation() {\n     return transformation;\n-  }\n+    }\n \n-  public void setTransformation(String transformation) {\n+    public void setTransformation(String transformation) {\n     this.transformation = transformation;\n-  }\n+    }\n \n-  public List<Assignment> getAssignments() {\n+    public List<Assignment> getAssignments() {\n     return assignments;\n-  }\n+    }\n \n-  public void setAssignments(List<Assignment> assignments) {\n+    public void setAssignments(List<Assignment> assignments) {\n     this.assignments = assignments;\n-  }\n+    }\n \n-  public DataAssociation clone() {\n+    public DataAssociation clone() {\n     DataAssociation clone = new DataAssociation();\n     clone.setValues(this);\n     return clone;\n-  }\n+    }\n \n-  public void setValues(DataAssociation otherAssociation) {\n+    public void setValues(DataAssociation otherAssociation) {\n     setSourceRef(otherAssociation.getSourceRef());\n     setTargetRef(otherAssociation.getTargetRef());\n     setTransformation(otherAssociation.getTransformation());\n-\n     assignments = new ArrayList<Assignment>();\n     if (otherAssociation.getAssignments() != null && !otherAssociation.getAssignments().isEmpty()) {\n-      for (Assignment assignment : otherAssociation.getAssignments()) {\n-        assignments.add(assignment.clone());\n-      }\n+        for (Assignment assignment : otherAssociation.getAssignments()) {\n+            assignments.add(assignment.clone());\n+        }\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/185/DataAssociation.java\nindex 92afc245ee..7e31f3e463 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/185/DataAssociation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/185/DataAssociation.java\nindex 92afc245ee..7e31f3e463 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/185/DataAssociation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/185/DataAssociation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ]
}