{
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "59",
                "severity": "warning",
                "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n            IdProvider.AS_LONG::convert,\n            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n\n    /**\n     * The property key used to define the name the metaclass and the opposite containing feature in container {@link",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/intellij/36/AbstractBlueprintsBackend.java\nindex 39953a03bc..9df99c3324 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/intellij/36/AbstractBlueprintsBackend.java\n@@ -55,8 +55,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+        IdProvider.AS_LONG::convert,\n+        o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the name the metaclass and the opposite containing feature in container {@link\n@@ -94,8 +94,8 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder()\n-            .softValues()\n-            .build();\n+        .softValues()\n+        .build();\n \n     /**\n      * A set that holds indexed {@link ClassBean}.\n@@ -122,7 +122,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Constructs a new {@code AbstractBlueprintsBackend} wrapping the provided {@code baseGraph}.\n      *\n      * @param baseGraph the base {@link KeyIndexableGraph} used to access the database\n-     *\n      * @see BlueprintsBackendFactory\n      */\n     protected AbstractBlueprintsBackend(KeyIndexableGraph baseGraph) {\n@@ -138,7 +137,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Builds the {@link Id} used to identify a {@link ClassBean} {@link Vertex}.\n      *\n      * @param metaClass the {@link ClassBean} to build an {@link Id} from\n-     *\n      * @return the create {@link Id}\n      */\n     @Nonnull\n@@ -151,7 +149,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      *\n      * @param label  the label of the property\n      * @param suffix the suffix of the property\n-     *\n      * @return the formatted property\n      */\n     @Nonnull\n@@ -163,7 +160,6 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Formats a label.\n      *\n      * @param label the label to format\n-     *\n      * @return the formatted label\n      */\n     @Nonnull\n@@ -175,21 +171,19 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * Retrieves or create an index for the given {@code name}.\n      *\n      * @param name the name of the index\n-     *\n      * @return the index\n      */\n     @Nonnull\n     private Index<Vertex> getOrCreateIndex(String name) {\n         return Optional.ofNullable(graph.getIndex(name, Vertex.class))\n-                .orElseGet(() -> graph.createIndex(name, Vertex.class));\n+            .orElseGet(() -> graph.createIndex(name, Vertex.class));\n     }\n \n     @Override\n     public void save() {\n         if (graph.getFeatures().supportsTransactions) {\n             graph.commit();\n-        }\n-        else {\n+        } else {\n             graph.shutdown();\n         }\n     }\n@@ -203,8 +197,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     protected void innerClose() {\n         try {\n             graph.shutdown();\n-        }\n-        catch (Exception ignored) {\n+        } catch (Exception ignored) {\n         }\n     }\n \n@@ -233,15 +226,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> edges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         return MoreIterables.onlyElement(edges)\n-                .map(e -> SingleFeatureBean.of(\n-                        AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n-                        e.getProperty(PROPERTY_NAME)));\n+            .map(e -> SingleFeatureBean.of(\n+                AS_LONG_OBJECT.revert(e.getVertex(Direction.IN).getId()),\n+                e.getProperty(PROPERTY_NAME)));\n     }\n \n     @Override\n@@ -253,10 +246,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         Vertex containerVertex = getOrCreate(container.owner());\n \n         Iterable<Edge> containmentEdges = containmentVertex.query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n \n@@ -275,10 +268,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Edge> containmentEdges = containmentVertex.get().query()\n-                .labels(EDGE_CONTAINER)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_CONTAINER)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         containmentEdges.forEach(Edge::remove);\n     }\n@@ -295,15 +288,15 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n         }\n \n         Iterable<Vertex> metaClassVertices = vertex.get().query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .vertices();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .vertices();\n \n         return MoreIterables.onlyElement(metaClassVertices)\n-                .map(v -> ClassBean.of(\n-                        v.getProperty(PROPERTY_NAME),\n-                        v.getProperty(PROPERTY_URI)));\n+            .map(v -> ClassBean.of(\n+                v.getProperty(PROPERTY_NAME),\n+                v.getProperty(PROPERTY_URI)));\n     }\n \n     @Override\n@@ -315,10 +308,10 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n \n         // Check the presence of a meta-class\n         Iterable<Edge> instanceEdges = vertex.query()\n-                .labels(EDGE_INSTANCE_OF)\n-                .direction(Direction.OUT)\n-                .limit(1)\n-                .edges();\n+            .labels(EDGE_INSTANCE_OF)\n+            .direction(Direction.OUT)\n+            .limit(1)\n+            .edges();\n \n         if (MoreIterables.onlyElement(instanceEdges).isPresent()) {\n             return false;\n@@ -348,19 +341,18 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n     @Override\n     public Iterable<Id> allInstancesOf(Set<ClassBean> metaClasses) {\n         return metaClasses.stream()\n-                .map(mc -> metaClassIndex.get(PROPERTY_NAME, mc.name()))\n-                .flatMap(MoreIterables::stream)\n-                .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n-                .flatMap(MoreIterables::stream)\n-                .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n-                .collect(Collectors.toSet());\n+            .map(mc -> metaClassIndex.get(PROPERTY_NAME, mc.name()))\n+            .flatMap(MoreIterables::stream)\n+            .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n+            .flatMap(MoreIterables::stream)\n+            .map(v -> AS_LONG_OBJECT.revert(v.getId()))\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n      * Retrieves the {@link Vertex} corresponding to the provided {@code id}.\n      *\n      * @param id the {@link Id} of the element to find\n-     *\n      * @return an {@link Optional} containing the {@link Vertex}, or {@link Optional#empty()} if it doesn't exist\n      */\n     @Nonnull\n@@ -373,14 +365,13 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      * created.\n      *\n      * @param id the {@link Id} of the element to find, or create\n-     *\n      * @return the {@link Vertex}\n      */\n     @Nonnull\n     protected Vertex getOrCreate(Id id) {\n         return verticesCache.get(id, i ->\n-                Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n-                        .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n+            Optional.ofNullable(graph.getVertex(AS_LONG_OBJECT.convert(i)))\n+                .orElseGet(() -> graph.addVertex(AS_LONG_OBJECT.convert(i))));\n     }\n \n     /**\n@@ -427,13 +418,12 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n          * Creates a new {@link AutoCleanerIdEdge} from another {@link Edge}.\n          *\n          * @param edge the base edge\n-         *\n          * @return an {@link AutoCleanerIdEdge}\n          */\n         private Edge createFrom(@Nullable Edge edge) {\n             return Optional.ofNullable(edge)\n-                    .map(AutoCleanerIdEdge::new)\n-                    .orElse(null);\n+                .map(AutoCleanerIdEdge::new)\n+                .orElse(null);\n         }\n \n         /**\n@@ -463,9 +453,9 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n                 super.remove();\n \n                 Iterable<Edge> edges = referencedVertex.query()\n-                        .direction(Direction.IN)\n-                        .limit(1)\n-                        .edges();\n+                    .direction(Direction.IN)\n+                    .limit(1)\n+                    .edges();\n \n                 if (MoreIterables.isEmpty(edges)) {\n                     // If the Vertex has no more incoming edges remove it from the DB\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/naturalize/36/AbstractBlueprintsBackend.java\nindex 39953a03bc..2f4247a676 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/naturalize/36/AbstractBlueprintsBackend.java\n@@ -55,8 +55,7 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+            IdProvider.AS_LONG::convert, o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n \n     /**\n      * The property key used to define the name the metaclass and the opposite containing feature in container {@link\n@@ -474,4 +473,4 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 12, expected is 4, indentation should be the same level as line 64.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_three_grams/36/AbstractBlueprintsBackend.java\nindex 39953a03bc..2b13e8eb93 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/36/AbstractBlueprintsBackend.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_three_grams/36/AbstractBlueprintsBackend.java\n@@ -55,10 +55,9 @@ abstract class AbstractBlueprintsBackend extends AbstractPersistentBackend imple\n      */\n     @Nonnull\n     protected static final Converter<Id, Object> AS_LONG_OBJECT = Converter.from(\n-            IdProvider.AS_LONG::convert,\n-            o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n+            IdProvider.AS_LONG::convert,o -> IdProvider.AS_LONG.revert(Long.class.cast(o)));\n \n-    /**\n+            /**\n      * The property key used to define the name the metaclass and the opposite containing feature in container {@link\n      * Edge}s.\n      */\n",
            "diff_size": 3
        }
    ]
}