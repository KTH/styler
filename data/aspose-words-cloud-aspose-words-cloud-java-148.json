{
    "error_id": "148",
    "information": {
        "errors": [
            {
                "line": "191",
                "column": "64",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n    return\n        Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n        Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/148/FormFieldTextInput.java\nindex 1fffe57421..da1ec74b6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/148/FormFieldTextInput.java\n@@ -188,7 +188,7 @@ public class FormFieldTextInput extends FormField {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n+    FormFieldTextInput formFieldTextInput = (FormFieldTextInput) o;\n     return\n         Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n         Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/148/FormFieldTextInput.java\nindex 1fffe57421..ff30e885c3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/148/FormFieldTextInput.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,154 +50,159 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"FormField text input element.\")\n public class FormFieldTextInput extends FormField {\n-    /**\n-     * Gets or sets the type of a text form field.\n-     */\n-    @JsonAdapter(TextInputTypeEnum.Adapter.class)\n-    public enum TextInputTypeEnum {\n-        REGULAR(\"Regular\"),\n-        NUMBER(\"Number\"),\n-        DATE(\"Date\"),\n-        CURRENTDATE(\"CurrentDate\"),\n-        CURRENTTIME(\"CurrentTime\"),\n-        CALCULATED(\"Calculated\");\n-\n-        private String value;\n-\n-        TextInputTypeEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets the type of a text form field.\n+   */\n+  @JsonAdapter(TextInputTypeEnum.Adapter.class)\n+  public enum TextInputTypeEnum {\n+    REGULAR(\"Regular\"),\n+    NUMBER(\"Number\"),\n+    DATE(\"Date\"),\n+    CURRENTDATE(\"CurrentDate\"),\n+    CURRENTTIME(\"CurrentTime\"),\n+    CALCULATED(\"Calculated\");\n+\n+    private String value;\n+\n+    TextInputTypeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public String getValue() {\n-            return value;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static TextInputTypeEnum fromValue(String text) {\n-            for (TextInputTypeEnum b : TextInputTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n+    public static TextInputTypeEnum fromValue(String text) {\n+      for (TextInputTypeEnum b : TextInputTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n \n-        public static class Adapter extends TypeAdapter< TextInputTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextInputTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextInputTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextInputTypeEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    public static class Adapter extends TypeAdapter<TextInputTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TextInputTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public TextInputTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextInputTypeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    @SerializedName(\"MaxLength\")\n-    private Integer maxLength = null;\n+  @SerializedName(\"MaxLength\")\n+  private Integer maxLength = null;\n \n-    @SerializedName(\"TextInputDefault\")\n-    private String textInputDefault = null;\n+  @SerializedName(\"TextInputDefault\")\n+  private String textInputDefault = null;\n \n-    @SerializedName(\"TextInputFormat\")\n-    private String textInputFormat = null;\n+  @SerializedName(\"TextInputFormat\")\n+  private String textInputFormat = null;\n \n-    @SerializedName(\"TextInputType\")\n-    private TextInputTypeEnum textInputType = null;\n-    public FormFieldTextInput maxLength(Integer maxLength) {\n-        this.maxLength = maxLength;\n-        return this;\n-    }\n+  @SerializedName(\"TextInputType\")\n+  private TextInputTypeEnum textInputType = null;\n \n-    /**\n-     * Gets or sets maximum length for the text field. Zero when the length is not limited.\n-    * @return maxLength\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets maximum length for the text field. Zero when the length is not limited.\")\n-    public Integer getMaxLength() {\n-        return maxLength;\n-    }\n+  public FormFieldTextInput maxLength(Integer maxLength) {\n+    this.maxLength = maxLength;\n+    return this;\n+  }\n \n-    public void setMaxLength(Integer maxLength) {\n-        this.maxLength = maxLength;\n-    }\n+  /**\n+   * Gets or sets maximum length for the text field. Zero when the length is not limited.\n+   *\n+   * @return maxLength\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets maximum length for the text field. Zero when the length is not limited.\")\n+  public Integer getMaxLength() {\n+    return maxLength;\n+  }\n \n-    public FormFieldTextInput textInputDefault(String textInputDefault) {\n-        this.textInputDefault = textInputDefault;\n-        return this;\n-    }\n+  public void setMaxLength(Integer maxLength) {\n+    this.maxLength = maxLength;\n+  }\n \n-    /**\n-     * Gets or sets the default string or a calculation expression of a text form field.\n-    * @return textInputDefault\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the default string or a calculation expression of a text form field.\")\n-    public String getTextInputDefault() {\n-        return textInputDefault;\n-    }\n+  public FormFieldTextInput textInputDefault(String textInputDefault) {\n+    this.textInputDefault = textInputDefault;\n+    return this;\n+  }\n \n-    public void setTextInputDefault(String textInputDefault) {\n-        this.textInputDefault = textInputDefault;\n-    }\n+  /**\n+   * Gets or sets the default string or a calculation expression of a text form field.\n+   *\n+   * @return textInputDefault\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the default string or a calculation expression of a text form field.\")\n+  public String getTextInputDefault() {\n+    return textInputDefault;\n+  }\n \n-    public FormFieldTextInput textInputFormat(String textInputFormat) {\n-        this.textInputFormat = textInputFormat;\n-        return this;\n-    }\n+  public void setTextInputDefault(String textInputDefault) {\n+    this.textInputDefault = textInputDefault;\n+  }\n \n-    /**\n-     * Gets or sets returns or sets the text formatting for a text form field.\n-    * @return textInputFormat\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets returns or sets the text formatting for a text form field.\")\n-    public String getTextInputFormat() {\n-        return textInputFormat;\n-    }\n+  public FormFieldTextInput textInputFormat(String textInputFormat) {\n+    this.textInputFormat = textInputFormat;\n+    return this;\n+  }\n \n-    public void setTextInputFormat(String textInputFormat) {\n-        this.textInputFormat = textInputFormat;\n-    }\n+  /**\n+   * Gets or sets returns or sets the text formatting for a text form field.\n+   *\n+   * @return textInputFormat\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets returns or sets the text formatting for a text form field.\")\n+  public String getTextInputFormat() {\n+    return textInputFormat;\n+  }\n \n-    public FormFieldTextInput textInputType(TextInputTypeEnum textInputType) {\n-        this.textInputType = textInputType;\n-        return this;\n-    }\n+  public void setTextInputFormat(String textInputFormat) {\n+    this.textInputFormat = textInputFormat;\n+  }\n \n-    /**\n-     * Gets or sets the type of a text form field.\n-    * @return textInputType\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the type of a text form field.\")\n-    public TextInputTypeEnum getTextInputType() {\n-        return textInputType;\n-    }\n+  public FormFieldTextInput textInputType(TextInputTypeEnum textInputType) {\n+    this.textInputType = textInputType;\n+    return this;\n+  }\n \n-    public void setTextInputType(TextInputTypeEnum textInputType) {\n-        this.textInputType = textInputType;\n-    }\n+  /**\n+   * Gets or sets the type of a text form field.\n+   *\n+   * @return textInputType\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the type of a text form field.\")\n+  public TextInputTypeEnum getTextInputType() {\n+    return textInputType;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n+  public void setTextInputType(TextInputTypeEnum textInputType) {\n+    this.textInputType = textInputType;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    FormFieldTextInput formFieldTextInput = (FormFieldTextInput) o;\n     return\n         Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n-        Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n-        Objects.equals(this.textInputFormat, formFieldTextInput.textInputFormat) &&\n-        Objects.equals(this.textInputType, formFieldTextInput.textInputType) &&\n-        super.equals(o);\n+            Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n+            Objects.equals(this.textInputFormat, formFieldTextInput.textInputFormat) &&\n+            Objects.equals(this.textInputType, formFieldTextInput.textInputType) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 161
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "198",
                    "column": "60",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/148/FormFieldTextInput.java\nindex 1fffe57421..819f0d5874 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/148/FormFieldTextInput.java\n@@ -53,11 +53,16 @@ public class FormFieldTextInput extends FormField {\n     @JsonAdapter(TextInputTypeEnum.Adapter.class)\n     public enum TextInputTypeEnum {\n         REGULAR(\"Regular\"),\n-        NUMBER(\"Number\"),\n-        DATE(\"Date\"),\n-        CURRENTDATE(\"CurrentDate\"),\n-        CURRENTTIME(\"CurrentTime\"),\n-        CALCULATED(\"Calculated\");\n+\n+NUMBER(\"Number\"),\n+\n+DATE(\"Date\"),\n+\n+CURRENTDATE(\"CurrentDate\"),\n+\n+CURRENTTIME(\"CurrentTime\"),\n+\n+CALCULATED(\"Calculated\");\n \n         private String value;\n \n@@ -83,7 +88,7 @@ public class FormFieldTextInput extends FormField {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextInputTypeEnum > {\n+        public static class Adapter extends TypeAdapter<TextInputTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextInputTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -108,7 +113,8 @@ public class FormFieldTextInput extends FormField {\n \n     @SerializedName(\"TextInputType\")\n     private TextInputTypeEnum textInputType = null;\n-    public FormFieldTextInput maxLength(Integer maxLength) {\n+\n+public FormFieldTextInput maxLength(Integer maxLength) {\n         this.maxLength = maxLength;\n         return this;\n     }\n@@ -184,13 +190,13 @@ public class FormFieldTextInput extends FormField {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n-    return\n-        Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n+\n+FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n+    return Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n         Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n         Objects.equals(this.textInputFormat, formFieldTextInput.textInputFormat) &&\n         Objects.equals(this.textInputType, formFieldTextInput.textInputType) &&\n@@ -225,4 +231,4 @@ public class FormFieldTextInput extends FormField {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/148/FormFieldTextInput.java\nindex 1fffe57421..bfd086c47b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/148/FormFieldTextInput.java\n@@ -45,57 +45,67 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * FormField text input element.\n  */\n+\n+\n @ApiModel(description = \"FormField text input element.\")\n+\n public class FormFieldTextInput extends FormField {\n     /**\n      * Gets or sets the type of a text form field.\n      */\n     @JsonAdapter(TextInputTypeEnum.Adapter.class)\n     public enum TextInputTypeEnum {\n-        REGULAR(\"Regular\"),\n-        NUMBER(\"Number\"),\n-        DATE(\"Date\"),\n-        CURRENTDATE(\"CurrentDate\"),\n-        CURRENTTIME(\"CurrentTime\"),\n-        CALCULATED(\"Calculated\");\n+    REGULAR(\"Regular\"),\n \n-        private String value;\n+    NUMBER(\"Number\"),\n \n-        TextInputTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    DATE(\"Date\"),\n+\n+    CURRENTDATE(\"CurrentDate\"),\n+\n+    CURRENTTIME(\"CurrentTime\"),\n+\n+    CALCULATED(\"Calculated\");\n+\n+    private String value;\n+\n+    TextInputTypeEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                      return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static TextInputTypeEnum fromValue(String text) {\n+        for (TextInputTypeEnum b : TextInputTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                   return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<TextInputTypeEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final TextInputTypeEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static TextInputTypeEnum fromValue(String text) {\n-            for (TextInputTypeEnum b : TextInputTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< TextInputTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextInputTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextInputTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextInputTypeEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public TextInputTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextInputTypeEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"MaxLength\")\n     private Integer maxLength = null;\n@@ -108,102 +118,123 @@ public class FormFieldTextInput extends FormField {\n \n     @SerializedName(\"TextInputType\")\n     private TextInputTypeEnum textInputType = null;\n+\n     public FormFieldTextInput maxLength(Integer maxLength) {\n-        this.maxLength = maxLength;\n-        return this;\n+    this.maxLength = maxLength;\n+    return this;\n     }\n \n     /**\n      * Gets or sets maximum length for the text field. Zero when the length is not limited.\n     * @return maxLength\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets maximum length for the text field. Zero when the length is not limited.\")\n     public Integer getMaxLength() {\n-        return maxLength;\n+    return maxLength;\n     }\n \n+\n     public void setMaxLength(Integer maxLength) {\n-        this.maxLength = maxLength;\n+    this.maxLength = maxLength;\n     }\n \n+\n     public FormFieldTextInput textInputDefault(String textInputDefault) {\n-        this.textInputDefault = textInputDefault;\n-        return this;\n+    this.textInputDefault = textInputDefault;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the default string or a calculation expression of a text form field.\n     * @return textInputDefault\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the default string or a calculation expression of a text form field.\")\n     public String getTextInputDefault() {\n-        return textInputDefault;\n+    return textInputDefault;\n     }\n \n+\n     public void setTextInputDefault(String textInputDefault) {\n-        this.textInputDefault = textInputDefault;\n+    this.textInputDefault = textInputDefault;\n     }\n \n+\n     public FormFieldTextInput textInputFormat(String textInputFormat) {\n-        this.textInputFormat = textInputFormat;\n-        return this;\n+    this.textInputFormat = textInputFormat;\n+    return this;\n     }\n \n     /**\n      * Gets or sets returns or sets the text formatting for a text form field.\n     * @return textInputFormat\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets returns or sets the text formatting for a text form field.\")\n     public String getTextInputFormat() {\n-        return textInputFormat;\n+    return textInputFormat;\n     }\n \n+\n     public void setTextInputFormat(String textInputFormat) {\n-        this.textInputFormat = textInputFormat;\n+    this.textInputFormat = textInputFormat;\n     }\n \n+\n     public FormFieldTextInput textInputType(TextInputTypeEnum textInputType) {\n-        this.textInputType = textInputType;\n-        return this;\n+    this.textInputType = textInputType;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the type of a text form field.\n     * @return textInputType\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the type of a text form field.\")\n     public TextInputTypeEnum getTextInputType() {\n-        return textInputType;\n+    return textInputType;\n     }\n \n+\n     public void setTextInputType(TextInputTypeEnum textInputType) {\n-        this.textInputType = textInputType;\n+    this.textInputType = textInputType;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n-    return\n-        Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n+\n+        FormFieldTextInput formFieldTextInput = (FormFieldTextInput) o;\n+        return Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n         Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n         Objects.equals(this.textInputFormat, formFieldTextInput.textInputFormat) &&\n-        Objects.equals(this.textInputType, formFieldTextInput.textInputType) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.textInputType, formFieldTextInput.textInputType) &&\n+            super.equals(o);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(maxLength, textInputDefault, textInputFormat, textInputType, super.hashCode());\n-  }\n+    }\n+\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class FormFieldTextInput {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -213,16 +244,19 @@ public class FormFieldTextInput extends FormField {\n     sb.append(\"    textInputType: \").append(toIndentedString(textInputType)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 121
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/148/FormFieldTextInput.java\nindex 1fffe57421..da1ec74b6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/148/FormFieldTextInput.java\n@@ -188,7 +188,7 @@ public class FormFieldTextInput extends FormField {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n+    FormFieldTextInput formFieldTextInput = (FormFieldTextInput) o;\n     return\n         Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n         Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/148/FormFieldTextInput.java\nindex 1fffe57421..0d36bb7bac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/148/FormFieldTextInput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/148/FormFieldTextInput.java\n@@ -188,7 +188,9 @@ public class FormFieldTextInput extends FormField {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    FormFieldTextInput formFieldTextInput = (FormFieldTextInput)o;\n+    FormFieldTextInput formFieldTextInput = (FormFieldTextInput\n+\n+    ) o;\n     return\n         Objects.equals(this.maxLength, formFieldTextInput.maxLength) &&\n         Objects.equals(this.textInputDefault, formFieldTextInput.textInputDefault) &&\n",
            "diff_size": 3
        }
    ]
}