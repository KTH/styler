{
    "error_id": "185",
    "information": {
        "errors": [
            {
                "line": "56",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     * Method for standalone usage\n     */\n\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n\t\tthis.customScriptManager = customScriptManager;\n\t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "57",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/185/ExternalScriptService.java\nindex 9706957068..8595345a38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/185/ExternalScriptService.java\n@@ -53,16 +53,16 @@ public abstract class ExternalScriptService implements Serializable {\n     /**\n      * Method for standalone usage\n      */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n+    public void configure(StandaloneCustomScriptManager customScriptManager) {\n \t\tthis.customScriptManager = customScriptManager;\n \t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n \t}\n \n     public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n-    \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n+\t\t\t\t\t// Skip reload if global script is not enabled for this application\n+\t\t\t\t\tif (!customScriptManager.isSupportedType(customScriptType)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n         // Get actual list of external configurations\n         List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n                 .getCustomScriptConfigurationsByScriptType(customScriptType);\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/185/ExternalScriptService.java\nindex 9706957068..68e6c6e67b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/185/ExternalScriptService.java\n@@ -53,19 +53,19 @@ public abstract class ExternalScriptService implements Serializable {\n     /**\n      * Method for standalone usage\n      */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n-\t\tthis.customScriptManager = customScriptManager;\n-\t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n-\t}\n+    public void configure(StandaloneCustomScriptManager customScriptManager) {\n+        this.customScriptManager = customScriptManager;\n+        this.log = LoggerFactory.getLogger(ExternalScriptService.class);\n+    }\n \n     public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n-    \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n+        // Skip reload if global script is not enabled for this application\n+        if (!customScriptManager.isSupportedType(customScriptType)) {\n+            return;\n+        }\n         // Get actual list of external configurations\n         List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n-                .getCustomScriptConfigurationsByScriptType(customScriptType);\n+            .getCustomScriptConfigurationsByScriptType(customScriptType);\n         addExternalConfigurations(newCustomScriptConfigurations);\n \n         this.customScriptConfigurations = newCustomScriptConfigurations;\n@@ -86,7 +86,7 @@ public abstract class ExternalScriptService implements Serializable {\n \n     private Map<String, CustomScriptConfiguration> buildExternalConfigurationsNameMap(List<CustomScriptConfiguration> customScriptConfigurations) {\n         Map<String, CustomScriptConfiguration> reloadedExternalConfigurations = new HashMap<String, CustomScriptConfiguration>(\n-                customScriptConfigurations.size());\n+            customScriptConfigurations.size());\n \n         for (CustomScriptConfiguration customScriptConfiguration : customScriptConfigurations) {\n             reloadedExternalConfigurations.put(StringHelper.toLowerCase(customScriptConfiguration.getName()), customScriptConfiguration);\n@@ -161,8 +161,8 @@ public abstract class ExternalScriptService implements Serializable {\n         return scripts;\n     }\n \n-\tpublic CustomScriptType getCustomScriptType() {\n-\t\treturn customScriptType;\n-\t}\n+    public CustomScriptType getCustomScriptType() {\n+        return customScriptType;\n+    }\n \n }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/185/ExternalScriptService.java\nindex 9706957068..fda88e9f96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/185/ExternalScriptService.java\n@@ -53,17 +53,18 @@ public abstract class ExternalScriptService implements Serializable {\n     /**\n      * Method for standalone usage\n      */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n-\t\tthis.customScriptManager = customScriptManager;\n+public void configure(StandaloneCustomScriptManager customScriptManager) {\n+    this.customScriptManager = customScriptManager;\n \t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n-\t}\n+    }\n \n-    public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n+public void reload(@Observes @ReloadScript String event) {\n+    // Skip reload if global script is not enabled for this application\n     \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n-        // Get actual list of external configurations\n+    return;\n+    }\n+\n+// Get actual list of external configurations\n         List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n                 .getCustomScriptConfigurationsByScriptType(customScriptType);\n         addExternalConfigurations(newCustomScriptConfigurations);\n@@ -161,8 +162,8 @@ public abstract class ExternalScriptService implements Serializable {\n         return scripts;\n     }\n \n-\tpublic CustomScriptType getCustomScriptType() {\n-\t\treturn customScriptType;\n-\t}\n+public CustomScriptType getCustomScriptType() {\n+    return customScriptType;\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/185/ExternalScriptService.java\nindex 9706957068..ba99ceabfc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/185/ExternalScriptService.java\n@@ -10,10 +10,8 @@ import java.io.Serializable;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import javax.enterprise.event.Observes;\n import javax.inject.Inject;\n-\n import org.gluu.model.custom.script.CustomScriptType;\n import org.gluu.model.custom.script.conf.CustomScriptConfiguration;\n import org.gluu.model.custom.script.model.CustomScript;\n@@ -22,7 +20,6 @@ import org.gluu.service.custom.inject.ReloadScript;\n import org.gluu.util.StringHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.common.collect.Lists;\n \n /**\n@@ -30,6 +27,8 @@ import com.google.common.collect.Lists;\n  *\n  * @author Yuriy Movchan Date: 01/08/2015\n  */\n+\n+\n public abstract class ExternalScriptService implements Serializable {\n \n     private static final long serialVersionUID = -1070021905117441202L;\n@@ -43,7 +42,9 @@ public abstract class ExternalScriptService implements Serializable {\n     protected CustomScriptType customScriptType;\n \n     protected Map<String, CustomScriptConfiguration> customScriptConfigurationsNameMap;\n+\n     protected List<CustomScriptConfiguration> customScriptConfigurations;\n+\n     protected CustomScriptConfiguration defaultExternalCustomScript;\n \n     public ExternalScriptService(CustomScriptType customScriptType) {\n@@ -53,21 +54,21 @@ public abstract class ExternalScriptService implements Serializable {\n     /**\n      * Method for standalone usage\n      */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n-\t\tthis.customScriptManager = customScriptManager;\n-\t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n-\t}\n+\n+    public void configure(StandaloneCustomScriptManager customScriptManager) {\n+        this.customScriptManager = customScriptManager;\n+        this.log = LoggerFactory.getLogger(ExternalScriptService.class);\n+    }\n \n     public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n-    \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n+        // Skip reload if global script is not enabled for this application\n+        if (!customScriptManager.isSupportedType(customScriptType)) {\n+            return;\n+        }\n         // Get actual list of external configurations\n-        List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n-                .getCustomScriptConfigurationsByScriptType(customScriptType);\n-        addExternalConfigurations(newCustomScriptConfigurations);\n \n+        List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager.getCustomScriptConfigurationsByScriptType(customScriptType);\n+        addExternalConfigurations(newCustomScriptConfigurations);\n         this.customScriptConfigurations = newCustomScriptConfigurations;\n         this.customScriptConfigurationsNameMap = buildExternalConfigurationsNameMap(customScriptConfigurations);\n \n@@ -85,11 +86,11 @@ public abstract class ExternalScriptService implements Serializable {\n     }\n \n     private Map<String, CustomScriptConfiguration> buildExternalConfigurationsNameMap(List<CustomScriptConfiguration> customScriptConfigurations) {\n-        Map<String, CustomScriptConfiguration> reloadedExternalConfigurations = new HashMap<String, CustomScriptConfiguration>(\n-                customScriptConfigurations.size());\n-\n+        Map<String, CustomScriptConfiguration> reloadedExternalConfigurations = new HashMap<String, CustomScriptConfiguration>(customScriptConfigurations.size());\n         for (CustomScriptConfiguration customScriptConfiguration : customScriptConfigurations) {\n-            reloadedExternalConfigurations.put(StringHelper.toLowerCase(customScriptConfiguration.getName()), customScriptConfiguration);\n+            reloadedExternalConfigurations.put(\n+                                          StringHelper.toLowerCase(customScriptConfiguration.getName()),\n+                                          customScriptConfiguration);\n         }\n \n         return reloadedExternalConfigurations;\n@@ -111,6 +112,7 @@ public abstract class ExternalScriptService implements Serializable {\n         try {\n             log.debug(\"Executing python 'getApiVersion' authenticator method\");\n             BaseExternalType externalAuthenticator = (BaseExternalType) customScriptConfiguration.getExternalType();\n+\n             return externalAuthenticator.getApiVersion();\n         } catch (Exception ex) {\n             log.error(ex.getMessage(), ex);\n@@ -152,17 +154,18 @@ public abstract class ExternalScriptService implements Serializable {\n         if (dns == null || dns.isEmpty() || customScriptConfigurations == null || customScriptConfigurations.isEmpty()) {\n             return Lists.newArrayList();\n         }\n+\n         List<CustomScriptConfiguration> scripts = Lists.newArrayList();\n         for (CustomScriptConfiguration script : customScriptConfigurations) {\n             if (dns.contains(script.getCustomScript().getDn())) {\n                 scripts.add(script);\n             }\n         }\n+\n         return scripts;\n     }\n \n-\tpublic CustomScriptType getCustomScriptType() {\n-\t\treturn customScriptType;\n-\t}\n-\n-}\n+    public CustomScriptType getCustomScriptType() {\n+        return customScriptType;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "57",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/185/ExternalScriptService.java\nindex 9706957068..8595345a38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/185/ExternalScriptService.java\n@@ -53,16 +53,16 @@ public abstract class ExternalScriptService implements Serializable {\n     /**\n      * Method for standalone usage\n      */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n+    public void configure(StandaloneCustomScriptManager customScriptManager) {\n \t\tthis.customScriptManager = customScriptManager;\n \t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n \t}\n \n     public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n-    \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n+\t\t\t\t\t// Skip reload if global script is not enabled for this application\n+\t\t\t\t\tif (!customScriptManager.isSupportedType(customScriptType)) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n         // Get actual list of external configurations\n         List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n                 .getCustomScriptConfigurationsByScriptType(customScriptType);\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/185/ExternalScriptService.java\nindex 9706957068..53a815ac59 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/185/ExternalScriptService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/185/ExternalScriptService.java\n@@ -52,117 +52,117 @@ public abstract class ExternalScriptService implements Serializable {\n \n     /**\n      * Method for standalone usage\n-     */\n-\tpublic void configure(StandaloneCustomScriptManager customScriptManager) {\n-\t\tthis.customScriptManager = customScriptManager;\n-\t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n-\t}\n-\n-    public void reload(@Observes @ReloadScript String event) {\n-    \t// Skip reload if global script is not enabled for this application\n-    \tif (!customScriptManager.isSupportedType(customScriptType)) {\n-    \t\treturn;\n-    \t}\n-        // Get actual list of external configurations\n-        List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n-                .getCustomScriptConfigurationsByScriptType(customScriptType);\n-        addExternalConfigurations(newCustomScriptConfigurations);\n-\n-        this.customScriptConfigurations = newCustomScriptConfigurations;\n-        this.customScriptConfigurationsNameMap = buildExternalConfigurationsNameMap(customScriptConfigurations);\n-\n-        // Determine default configuration\n-        this.defaultExternalCustomScript = determineDefaultCustomScriptConfiguration(this.customScriptConfigurations);\n-\n-        // Allow to execute additional logic\n-        reloadExternal();\n-    }\n-\n-    protected void addExternalConfigurations(List<CustomScriptConfiguration> newCustomScriptConfigurations) {\n-    }\n-\n-    protected void reloadExternal() {\n-    }\n-\n-    private Map<String, CustomScriptConfiguration> buildExternalConfigurationsNameMap(List<CustomScriptConfiguration> customScriptConfigurations) {\n-        Map<String, CustomScriptConfiguration> reloadedExternalConfigurations = new HashMap<String, CustomScriptConfiguration>(\n-                customScriptConfigurations.size());\n-\n-        for (CustomScriptConfiguration customScriptConfiguration : customScriptConfigurations) {\n-            reloadedExternalConfigurations.put(StringHelper.toLowerCase(customScriptConfiguration.getName()), customScriptConfiguration);\n-        }\n-\n-        return reloadedExternalConfigurations;\n-    }\n-\n-    public CustomScriptConfiguration determineDefaultCustomScriptConfiguration(List<CustomScriptConfiguration> customScriptConfigurations) {\n-        CustomScriptConfiguration defaultExternalCustomScript = null;\n-        for (CustomScriptConfiguration customScriptConfiguration : this.customScriptConfigurations) {\n-            // Determine default script. It has bigger level than others\n-            if ((defaultExternalCustomScript == null) || (defaultExternalCustomScript.getLevel() < customScriptConfiguration.getLevel())) {\n-                defaultExternalCustomScript = customScriptConfiguration;\n-            }\n-        }\n-\n-        return defaultExternalCustomScript;\n-    }\n-\n-    public int executeExternalGetApiVersion(CustomScriptConfiguration customScriptConfiguration) {\n-        try {\n-            log.debug(\"Executing python 'getApiVersion' authenticator method\");\n-            BaseExternalType externalAuthenticator = (BaseExternalType) customScriptConfiguration.getExternalType();\n-            return externalAuthenticator.getApiVersion();\n-        } catch (Exception ex) {\n-            log.error(ex.getMessage(), ex);\n-            saveScriptError(customScriptConfiguration.getCustomScript(), ex);\n-        }\n-\n-        return -1;\n-    }\n-\n-    public void saveScriptError(CustomScript customScript, Exception exception) {\n-        customScriptManager.saveScriptError(customScript, exception);\n-    }\n-\n-    public void clearScriptError(CustomScript customScript) {\n-        customScriptManager.clearScriptError(customScript);\n-    }\n-\n-    public boolean isEnabled() {\n-        if (this.customScriptConfigurations == null) {\n-            return false;\n-        }\n-\n-        return this.customScriptConfigurations.size() > 0;\n-    }\n-\n-    public CustomScriptConfiguration getCustomScriptConfigurationByName(String name) {\n-        return this.customScriptConfigurationsNameMap.get(StringHelper.toLowerCase(name));\n-    }\n-\n-    public CustomScriptConfiguration getDefaultExternalCustomScript() {\n-        return defaultExternalCustomScript;\n-    }\n-\n-    public List<CustomScriptConfiguration> getCustomScriptConfigurations() {\n-        return this.customScriptConfigurations;\n-    }\n-\n-    public List<CustomScriptConfiguration> getCustomScriptConfigurationsByDns(List<String> dns) {\n-        if (dns == null || dns.isEmpty() || customScriptConfigurations == null || customScriptConfigurations.isEmpty()) {\n-            return Lists.newArrayList();\n-        }\n-        List<CustomScriptConfiguration> scripts = Lists.newArrayList();\n-        for (CustomScriptConfiguration script : customScriptConfigurations) {\n-            if (dns.contains(script.getCustomScript().getDn())) {\n-                scripts.add(script);\n-            }\n-        }\n-        return scripts;\n-    }\n-\n-\tpublic CustomScriptType getCustomScriptType() {\n-\t\treturn customScriptType;\n-\t}\n-\n-}\n+     */ publicvoid configure(StandaloneCustomScriptManager customScriptManager) {\n+\t\t\t\t\tthis.customScriptManager = customScriptManager;\n+\t\t\t\t\tthis.log = LoggerFactory.getLogger(ExternalScriptService.class);\n+\t\t\t\t}\n+\n+       public void reload(@Observes @ReloadScript String event) {\n+\t\t\t\t\t\t\t\t// Skip reload if global script is not enabled for this application\n+\t\t\t\t\t\t\t\tif (!customScriptManager.isSupportedType(customScriptType)) {\n+\t\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t\t}\n+           // Get actual list of external configurations\n+           List<CustomScriptConfiguration> newCustomScriptConfigurations = customScriptManager\n+                   .getCustomScriptConfigurationsByScriptType(customScriptType);\n+           addExternalConfigurations(newCustomScriptConfigurations);\n+\n+           this.customScriptConfigurations = newCustomScriptConfigurations;\n+           this.customScriptConfigurationsNameMap = buildExternalConfigurationsNameMap(customScriptConfigurations);\n+\n+           // Determine default configuration\n+           this.defaultExternalCustomScript = determineDefaultCustomScriptConfiguration(this.customScriptConfigurations);\n+\n+           // Allow to execute additional logic\n+           reloadExternal();\n+       }\n+\n+       protected void addExternalConfigurations(List<CustomScriptConfiguration> newCustomScriptConfigurations) {\n+       }\n+\n+       protected void reloadExternal() {\n+       }\n+\n+       private Map<String, CustomScriptConfiguration> buildExternalConfigurationsNameMap(List<CustomScriptConfiguration> customScriptConfigurations) {\n+           Map<String, CustomScriptConfiguration> reloadedExternalConfigurations = new HashMap<String, CustomScriptConfiguration>(\n+                   customScriptConfigurations.size());\n+\n+           for (CustomScriptConfiguration customScriptConfiguration : customScriptConfigurations) {\n+               reloadedExternalConfigurations.put(StringHelper.toLowerCase(customScriptConfiguration.getName()), customScriptConfiguration);\n+           }\n+\n+           return reloadedExternalConfigurations;\n+       }\n+\n+       public CustomScriptConfiguration determineDefaultCustomScriptConfiguration(List<CustomScriptConfiguration> customScriptConfigurations) {\n+           CustomScriptConfiguration defaultExternalCustomScript = null;\n+           for (CustomScriptConfiguration customScriptConfiguration : this.customScriptConfigurations) {\n+               // Determine default script. It has bigger level than others\n+               if ((defaultExternalCustomScript == null) || (defaultExternalCustomScript.getLevel() < customScriptConfiguration.getLevel())) {\n+                   defaultExternalCustomScript = customScriptConfiguration;\n+               }\n+           }\n+\n+           return defaultExternalCustomScript;\n+       }\n+\n+       public int executeExternalGetApiVersion(CustomScriptConfiguration customScriptConfiguration) {\n+           try {\n+               log.debug(\"Executing python 'getApiVersion' authenticator method\");\n+               BaseExternalType externalAuthenticator = (BaseExternalType) customScriptConfiguration.getExternalType();\n+               return externalAuthenticator.getApiVersion();\n+           } catch (Exception ex) {\n+               log.error(ex.getMessage(), ex);\n+               saveScriptError(customScriptConfiguration.getCustomScript(), ex);\n+           }\n+\n+           return -1;\n+       }\n+\n+       public void saveScriptError(CustomScript customScript, Exception exception) {\n+           customScriptManager.saveScriptError(customScript, exception);\n+       }\n+\n+       public void clearScriptError(CustomScript customScript) {\n+           customScriptManager.clearScriptError(customScript);\n+       }\n+\n+       public boolean isEnabled() {\n+           if (this.customScriptConfigurations == null) {\n+               return false;\n+           }\n+\n+           return this.customScriptConfigurations.size() > 0;\n+       }\n+\n+       public CustomScriptConfiguration getCustomScriptConfigurationByName(String name) {\n+           return this.customScriptConfigurationsNameMap.get(StringHelper.toLowerCase(name));\n+       }\n+\n+       public CustomScriptConfiguration getDefaultExternalCustomScript() {\n+           return defaultExternalCustomScript;\n+       }\n+\n+       public List<CustomScriptConfiguration> getCustomScriptConfigurations() {\n+           return this.customScriptConfigurations;\n+       }\n+\n+       public List<CustomScriptConfiguration> getCustomScriptConfigurationsByDns(List<String> dns) {\n+           if (dns == null || dns.isEmpty() || customScriptConfigurations == null || customScriptConfigurations.isEmpty()) {\n+               return Lists.newArrayList();\n+           }\n+           List<CustomScriptConfiguration> scripts = Lists.newArrayList();\n+           for (CustomScriptConfiguration script : customScriptConfigurations) {\n+               if (dns.contains(script.getCustomScript().getDn())) {\n+                   scripts.add(script);\n+               }\n+           }\n+           return scripts;\n+       }\n+\n+\t\t\t\tpublic CustomScriptType getCustomScriptType() {\n+\t\t\t\t\treturn customScriptType;\n+\t\t\t\t}\n+\n+   }\n+   \n\\ No newline at end of file\n",
            "diff_size": 114
        }
    ]
}