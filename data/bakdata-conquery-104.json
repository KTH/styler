{
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "87",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "@Slf4j\n@RequiredArgsConstructor\npublic class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n\t\n\tprivate final MasterMetaStorage storage;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/104/ConqueryAuthenticator.java\nindex ac19eecb53..756d101f58 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/104/ConqueryAuthenticator.java\n@@ -23,22 +23,22 @@ import org.apache.shiro.authc.AuthenticationToken;\n  */\n @Slf4j\n @RequiredArgsConstructor\n-public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n-\t\n+public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User> {\n+\n \tprivate final MasterMetaStorage storage;\n \n \t@Override\n \tpublic Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n-\t\n+\n \t\t// Submit the token to Shiro (to all realms that were registered)\n \t\tAuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n-\t\t\n+\n \t\t// All authenticating realms must return a UserId as identifying principal\n \t\tUserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n \n \t\t// The UserId is queried in the MasterMetaStorage, the central place for authorization information\n \t\tUser user = storage.getUser(userId);\n-\t\t\n+\n \t\tif(user != null) {\n \t\t\tConqueryMDC.setLocation(user.getId().toString());\n \t\t}\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/104/ConqueryAuthenticator.java\nindex ac19eecb53..c8a221e77a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/104/ConqueryAuthenticator.java\n@@ -23,27 +23,27 @@ import org.apache.shiro.authc.AuthenticationToken;\n  */\n @Slf4j\n @RequiredArgsConstructor\n-public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n-\t\n-\tprivate final MasterMetaStorage storage;\n-\n-\t@Override\n-\tpublic Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n-\t\n-\t\t// Submit the token to Shiro (to all realms that were registered)\n-\t\tAuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n-\t\t\n-\t\t// All authenticating realms must return a UserId as identifying principal\n-\t\tUserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n-\n-\t\t// The UserId is queried in the MasterMetaStorage, the central place for authorization information\n-\t\tUser user = storage.getUser(userId);\n-\t\t\n-\t\tif(user != null) {\n-\t\t\tConqueryMDC.setLocation(user.getId().toString());\n-\t\t}\n-\t\t// If the user was present, all further authorization can know be perfomed on the user object\n-\t\treturn Optional.ofNullable(user);\n-\t}\n+public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User> {\n+\n+    private final MasterMetaStorage storage;\n+\n+    @Override\n+    public Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n+\n+        // Submit the token to Shiro (to all realms that were registered)\n+        AuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n+\n+        // All authenticating realms must return a UserId as identifying principal\n+        UserId userId = (UserId) info.getPrincipals().getPrimaryPrincipal();\n+\n+        // The UserId is queried in the MasterMetaStorage, the central place for authorization information\n+        User user = storage.getUser(userId);\n+\n+        if (user != null) {\n+            ConqueryMDC.setLocation(user.getId().toString());\n+        }\n+        // If the user was present, all further authorization can know be perfomed on the user object\n+        return Optional.ofNullable(user);\n+    }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/104/ConqueryAuthenticator.java\nindex ac19eecb53..0397e993e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/104/ConqueryAuthenticator.java\n@@ -1,7 +1,6 @@\n package com.bakdata.conquery.models.auth;\n \n import java.util.Optional;\n-\n import com.bakdata.conquery.io.xodus.MasterMetaStorage;\n import com.bakdata.conquery.models.auth.entities.User;\n import com.bakdata.conquery.models.identifiable.ids.specific.UserId;\n@@ -21,29 +20,27 @@ import org.apache.shiro.authc.AuthenticationToken;\n  * shiro, where multiple realms might be configured.\n  * We need this authenticator to plug in the security, and hereby shiro, into the AuthFilter.\n  */\n+\n @Slf4j\n @RequiredArgsConstructor\n-public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n-\t\n-\tprivate final MasterMetaStorage storage;\n-\n-\t@Override\n-\tpublic Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n-\t\n-\t\t// Submit the token to Shiro (to all realms that were registered)\n-\t\tAuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n-\t\t\n-\t\t// All authenticating realms must return a UserId as identifying principal\n-\t\tUserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n+public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User> {\n \n-\t\t// The UserId is queried in the MasterMetaStorage, the central place for authorization information\n-\t\tUser user = storage.getUser(userId);\n-\t\t\n-\t\tif(user != null) {\n-\t\t\tConqueryMDC.setLocation(user.getId().toString());\n-\t\t}\n-\t\t// If the user was present, all further authorization can know be perfomed on the user object\n-\t\treturn Optional.ofNullable(user);\n-\t}\n+    private final MasterMetaStorage storage;\n+    @Override\n+    public Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n+    \n+        // Submit the token to Shiro (to all realms that were registered)\n+        AuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n+        \n+        // All authenticating realms must return a UserId as identifying principal\n+        UserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n \n-}\n+        // The UserId is queried in the MasterMetaStorage, the central place for authorization information\n+        User user = storage.getUser(userId);\n+        if(user != null) {\n+            ConqueryMDC.setLocation(user.getId().toString());\n+        }\n+        // If the user was present, all further authorization can know be perfomed on the user object\n+        return Optional.ofNullable(user);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/104/ConqueryAuthenticator.java\nindex ac19eecb53..756d101f58 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/104/ConqueryAuthenticator.java\n@@ -23,22 +23,22 @@ import org.apache.shiro.authc.AuthenticationToken;\n  */\n @Slf4j\n @RequiredArgsConstructor\n-public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n-\t\n+public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User> {\n+\n \tprivate final MasterMetaStorage storage;\n \n \t@Override\n \tpublic Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n-\t\n+\n \t\t// Submit the token to Shiro (to all realms that were registered)\n \t\tAuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n-\t\t\n+\n \t\t// All authenticating realms must return a UserId as identifying principal\n \t\tUserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n \n \t\t// The UserId is queried in the MasterMetaStorage, the central place for authorization information\n \t\tUser user = storage.getUser(userId);\n-\t\t\n+\n \t\tif(user != null) {\n \t\t\tConqueryMDC.setLocation(user.getId().toString());\n \t\t}\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/104/ConqueryAuthenticator.java\nindex ac19eecb53..756d101f58 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/104/ConqueryAuthenticator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/104/ConqueryAuthenticator.java\n@@ -23,22 +23,22 @@ import org.apache.shiro.authc.AuthenticationToken;\n  */\n @Slf4j\n @RequiredArgsConstructor\n-public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User>{\n-\t\n+public class ConqueryAuthenticator implements Authenticator<AuthenticationToken, User> {\n+\n \tprivate final MasterMetaStorage storage;\n \n \t@Override\n \tpublic Optional<User> authenticate(AuthenticationToken token) throws AuthenticationException {\n-\t\n+\n \t\t// Submit the token to Shiro (to all realms that were registered)\n \t\tAuthenticationInfo info = SecurityUtils.getSecurityManager().authenticate(token);\n-\t\t\n+\n \t\t// All authenticating realms must return a UserId as identifying principal\n \t\tUserId userId = (UserId)info.getPrincipals().getPrimaryPrincipal();\n \n \t\t// The UserId is queried in the MasterMetaStorage, the central place for authorization information\n \t\tUser user = storage.getUser(userId);\n-\t\t\n+\n \t\tif(user != null) {\n \t\t\tConqueryMDC.setLocation(user.getId().toString());\n \t\t}\n",
            "diff_size": 5
        }
    ]
}