{
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/33/Login.java\nindex af49f1c2cf..0ed508c4e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/33/Login.java\n@@ -20,94 +20,105 @@ package com.cloudera.director.client.v5.model;\n \n \n public class Login {\n-  /* Login password [redacted on read] */\n-  private String password;\n-  /* Login username */\n-  private String username;\n-  public Login() { }\n-\n-  private Login(String password, String username) {\n-    this.password = password;\n-    this.username = username;\n-  }\n-\n-  private Login(LoginBuilder builder) {\n-    this.password = builder.password;\n-    this.username = builder.username;\n-  }\n-\n-  public static LoginBuilder builder() {\n-    return new LoginBuilder();\n-  }\n-\n-  public static class LoginBuilder {\n-    private String password = null;\n-    private String username = null;\n-\n-    public LoginBuilder password(String password) {\n-      this.password = password;\n-      return this;\n+    /* Login password [redacted on read] */\n+    private String password;\n+    /* Login username */\n+    private String username;\n+\n+    public Login() {\n+    }\n+\n+    private Login(String password, String username) {\n+        this.password = password;\n+        this.username = username;\n+    }\n+\n+    private Login(LoginBuilder builder) {\n+        this.password = builder.password;\n+        this.username = builder.username;\n+    }\n+\n+    public static LoginBuilder builder() {\n+        return new LoginBuilder();\n+    }\n+\n+    public static class LoginBuilder {\n+        private String password = null;\n+        private String username = null;\n+\n+        public LoginBuilder password(String password) {\n+            this.password = password;\n+            return this;\n+        }\n+\n+        public LoginBuilder username(String username) {\n+            this.username = username;\n+            return this;\n+        }\n+\n+        public Login build() {\n+            return new Login(this);\n+        }\n+    }\n+\n+    public LoginBuilder toBuilder() {\n+        return builder()\n+            .password(password)\n+            .username(username)\n+            ;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String password) {\n+        this.password = password;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String username) {\n+        this.username = username;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        Login other = (Login) o; // NOPMD\n+\n+        if (username != null ?\n+            !username.equals(other.username) :\n+            other.username != null) {\n+            return false;\n+        }\n+        return true;\n     }\n \n-    public LoginBuilder username(String username) {\n-      this.username = username;\n-      return this;\n+    @Override\n+    public int hashCode() {\n+        int result = 0;\n+        result = 31 * result + (username != null ? username.hashCode() : 0);\n+        return result;\n     }\n \n-    public Login build() {\n-      return new Login(this);\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        String newLine = System.getProperty(\"line.separator\");\n+        sb.append(\"class Login {\" + newLine);\n+        sb.append(\"  password: \").append(\"REDACTED\").append(newLine);\n+        sb.append(\"  username: \").append(username).append(newLine);\n+        sb.append(\"}\" + newLine);\n+        return sb.toString();\n     }\n-  }\n-\n-  public LoginBuilder toBuilder() {\n-    return builder()\n-      .password(password)\n-      .username(username)\n-      ;\n-  }\n-  public String getPassword() {\n-    return password;\n-  }\n-  public void setPassword(String password) {\n-    this.password = password;\n-  }\n-\n-  public String getUsername() {\n-    return username;\n-  }\n-  public void setUsername(String username) {\n-    this.username = username;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    Login other = (Login) o; // NOPMD\n-\n-    if (username != null ?\n-        !username.equals(other.username) :\n-        other.username != null) return false;\n-    return true;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    int result = 0;\n-    result = 31 * result + (username != null ? username.hashCode() : 0);\n-    return result;\n-  }\n-\n-  @Override\n-  public String toString()  {\n-    StringBuilder sb = new StringBuilder();\n-    String newLine = System.getProperty(\"line.separator\");\n-    sb.append(\"class Login {\" + newLine);\n-    sb.append(\"  password: \").append(\"REDACTED\").append(newLine);\n-    sb.append(\"  username: \").append(username).append(newLine);\n-    sb.append(\"}\" + newLine);\n-    return sb.toString();\n-  }\n }\n \n",
            "diff_size": 147
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/33/Login.java\nindex af49f1c2cf..aae84f833a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/33/Login.java\n@@ -1,30 +1,15 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v5.model;\n \n-\n public class Login {\n   /* Login password [redacted on read] */\n   private String password;\n   /* Login username */\n   private String username;\n-  public Login() { }\n+\n+public Login() { }\n \n   private Login(String password, String username) {\n     this.password = password;\n@@ -41,7 +26,8 @@ public class Login {\n   }\n \n   public static class LoginBuilder {\n-    private String password = null;\n+\n+  private String password = null;\n     private String username = null;\n \n     public LoginBuilder password(String password) {\n@@ -60,12 +46,11 @@ public class Login {\n   }\n \n   public LoginBuilder toBuilder() {\n-    return builder()\n-      .password(password)\n-      .username(username)\n-      ;\n+    return builder().password(password)\n+      .username(username);\n   }\n-  public String getPassword() {\n+\n+public String getPassword() {\n     return password;\n   }\n   public void setPassword(String password) {\n@@ -82,13 +67,14 @@ public class Login {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    Login other = (Login) o;\n \n-    Login other = (Login) o; // NOPMD\n+// NOPMD\n \n-    if (username != null ?\n-        !username.equals(other.username) :\n-        other.username != null) return false;\n+    if (username != null ?!username.equals(other.username) : other.username != null) return false;\n     return true;\n   }\n \n@@ -100,7 +86,7 @@ public class Login {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Login {\" + newLine);\n@@ -109,5 +95,4 @@ public class Login {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "30",
                    "column": "20",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "30",
                    "column": "21",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "98",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "25",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "58",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "106",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "106",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "106",
                    "column": "65",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/33/Login.java\nindex af49f1c2cf..02d93e2992 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/33/Login.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/33/Login.java\n@@ -18,89 +18,98 @@\n \n package com.cloudera.director.client.v5.model;\n \n-\n public class Login {\n   /* Login password [redacted on read] */\n-  private String password;\n+\n+    private String password;\n   /* Login username */\n-  private String username;\n-  public Login() { }\n \n-  private Login(String password, String username) {\n-    this.password = password;\n-    this.username = username;\n-  }\n+    private String username;\n+\n+\n+    public Login() {}\n+\n+    private Login(String password, String username) {\n+                                                    this.password = password;\n+                                                    this.username = username;\n+                   }\n \n-  private Login(LoginBuilder builder) {\n-    this.password = builder.password;\n-    this.username = builder.username;\n-  }\n+    private Login(LoginBuilder builder) {\n+                                        this.password = builder.password;\n+                                        this.username = builder.username;\n+                   }\n \n-  public static LoginBuilder builder() {\n+    public static LoginBuilder builder() {\n     return new LoginBuilder();\n-  }\n+    }\n+\n+    public static class LoginBuilder {\n \n-  public static class LoginBuilder {\n     private String password = null;\n+\n     private String username = null;\n \n     public LoginBuilder password(String password) {\n-      this.password = password;\n-      return this;\n+        this.password = password;\n+        return this;\n     }\n \n     public LoginBuilder username(String username) {\n-      this.username = username;\n-      return this;\n+        this.username = username;\n+        return this;\n     }\n \n     public Login build() {\n-      return new Login(this);\n+        return new Login(this);\n+    }\n     }\n-  }\n-\n-  public LoginBuilder toBuilder() {\n-    return builder()\n-      .password(password)\n-      .username(username)\n-      ;\n-  }\n-  public String getPassword() {\n+\n+    public LoginBuilder toBuilder() {\n+    return builder().password(password)\n+                    .username(username);\n+    }\n+\n+    public String getPassword() {\n     return password;\n-  }\n-  public void setPassword(String password) {\n+    }\n+\n+    public void setPassword(String password) {\n     this.password = password;\n-  }\n+    }\n \n-  public String getUsername() {\n+    public String getUsername() {\n     return username;\n-  }\n-  public void setUsername(String username) {\n+    }\n+\n+    public void setUsername(String username) {\n     this.username = username;\n-  }\n+    }\n+\n \n-  @Override\n-  public boolean equals(Object o) {\n+    @Override\n+    public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n \n-    Login other = (Login) o; // NOPMD\n+    if (o == null ||\n+        getClass() != o.getClass()) return false;\n \n-    if (username != null ?\n-        !username.equals(other.username) :\n-        other.username != null) return false;\n+    Login other = (Login)o; // NOPMD\n+\n+    if (username != null?!username.equals(other.username): other.username != null) return false;\n     return true;\n-  }\n+    }\n \n-  @Override\n-  public int hashCode() {\n+\n+    @Override\n+    public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (username != null ? username.hashCode() : 0);\n+    result = 31 *result + (username != null? username.hashCode(): 0);\n     return result;\n-  }\n+    }\n \n-  @Override\n-  public String toString()  {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class Login {\" + newLine);\n@@ -108,6 +117,5 @@ public class Login {\n     sb.append(\"  username: \").append(username).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n-  }\n-}\n-\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}