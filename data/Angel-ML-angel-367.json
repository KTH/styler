{
    "error_id": "367",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/367/ServerLongIntRow.java\nindex 8fe6b12ab2..cf404a8b75 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/367/ServerLongIntRow.java\n@@ -35,403 +35,420 @@ import java.io.IOException;\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n public class ServerLongIntRow extends ServerIntRow {\n-  /**\n-   * Create a new ServerIntIntRow\n-   *\n-   * @param rowId      row index\n-   * @param rowType    row type\n-   * @param startCol   start position\n-   * @param endCol     end position\n-   * @param estElemNum the estimate element number\n-   * @param innerRow   the inner row\n-   */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-  }\n-\n-  /**\n-   * Create a new ServerIntIntRow\n-   *\n-   * @param rowId      row index\n-   * @param rowType    row type\n-   * @param startCol   start position\n-   * @param endCol     end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerLongIntRow\n-   *\n-   * @param rowType\n-   */\n-  public ServerLongIntRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public int get(long index) {\n-    if (useIntKey) {\n-      return ((IntIntVector) row).get((int) (index - startCol));\n-    } else {\n-      return ((LongIntVector) row).get(index - startCol);\n+    /**\n+     * Create a new ServerIntIntRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param innerRow   the inner row\n+     */\n+    public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n+                            IntVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     }\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(long index, int value) {\n-    if (useIntKey) {\n-      ((IntIntVector) row).set((int) (index - startCol), value);\n-    } else {\n-      ((LongIntVector) row).set(index - startCol, value);\n-    }\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public int[] get(long[] indices) {\n-    int[] values = new int[indices.length];\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((IntIntVector) row).get((int) (indices[i] - startCol));\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n-      }\n+\n+    /**\n+     * Create a new ServerIntIntRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n+                            int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n     }\n \n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values  elements values\n-   */\n-  public void set(long[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((IntIntVector) row).set((int) (indices[i] - startCol), values[i]);\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((LongIntVector) row).set(indices[i] - startCol, values[i]);\n-      }\n+    /**\n+     * Create a new ServerLongIntRow\n+     *\n+     * @param rowType\n+     */\n+    public ServerLongIntRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n     }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(long index, int value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values  elements plus values\n-   */\n-  public void addTo(long[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public int get(long index) {\n+        if (useIntKey) {\n+            return ((IntIntVector) row).get((int) (index - startCol));\n+        } else {\n+            return ((LongIntVector) row).get(index - startCol);\n+        }\n     }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private int[] getValues() {\n-    if (useIntKey) {\n-      return ((IntIntVector) row).getStorage().getValues();\n-    } else {\n-      return ((LongIntVector) row).getStorage().getValues();\n+\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(long index, int value) {\n+        if (useIntKey) {\n+            ((IntIntVector) row).set((int) (index - startCol), value);\n+        } else {\n+            ((LongIntVector) row).set(index - startCol, value);\n+        }\n     }\n-  }\n-\n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-    try {\n-      switch (updateType) {\n-        case T_INT_SPARSE_LONGKEY:\n-        case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseSparse(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public int[] get(long[] indices) {\n+        int[] values = new int[indices.length];\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((IntIntVector) row).get((int) (indices[i] - startCol));\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n+            }\n         }\n-      }\n \n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n+        return values;\n     }\n-  }\n-\n-  private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntIntVector) row).set(index, ((IntIntVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongIntVector) row).set(index, ((LongIntVector) row).get(index) + buf.readInt());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntIntVector) row).set((int) buf.readLong(), buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongIntVector) row).set(buf.readLong(), buf.readInt());\n+\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(long[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((IntIntVector) row).set((int) (indices[i] - startCol), values[i]);\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((LongIntVector) row).set(indices[i] - startCol, values[i]);\n+            }\n         }\n-      }\n     }\n-  }\n \n-  @Override public int size() {\n-    if (useIntKey) {\n-      return ((IntIntVector) row).size();\n-    } else {\n-      return (int) ((LongIntVector) row).size();\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(long index, int value) {\n+        set(index, get(index) + value);\n     }\n-  }\n-\n-  /**\n-   * Merge this row split to a row\n-   *\n-   * @param mergedRow the dest row\n-   */\n-  public void mergeTo(LongIntVector mergedRow) {\n-    startRead();\n-    try {\n-      if (isDense()) {\n-        int[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startCol, values[i]);\n+\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(long[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n         }\n-      } else {\n+    }\n+\n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private int[] getValues() {\n         if (useIntKey) {\n-          ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n-          Int2IntMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n-          }\n+            return ((IntIntVector) row).getStorage().getValues();\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n-          Long2IntMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getLongKey() + startCol, entry.getIntValue());\n-          }\n+            return ((LongIntVector) row).getStorage().getValues();\n         }\n-      }\n-    } finally {\n-      endRead();\n     }\n-  }\n-\n-  @Override protected void serializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        int[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          buf.writeInt(values[i]);\n-        }\n-      } else {\n-        ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n-        Int2IntMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeInt(entry.getIntValue());\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+        try {\n+            switch (updateType) {\n+                case T_INT_SPARSE_LONGKEY:\n+                case T_INT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseSparse(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n         }\n-      }\n-    } else {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n-      Long2IntMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeInt(entry.getIntValue());\n-      }\n     }\n-  }\n-\n-  @Override protected void deserializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      IntIntVector intIntRow = (IntIntVector) row;\n-      if (useDenseSerialize()) {\n-        for (int i = 0; i < size; i++) {\n-          intIntRow.set(i, buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          intIntRow.set(buf.readInt(), buf.readInt());\n+\n+    private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntIntVector) row)\n+                            .set(index, ((IntIntVector) row).get(index) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongIntVector) row)\n+                            .set(index, ((LongIntVector) row).get(index) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntIntVector) row).set((int) buf.readLong(), buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongIntVector) row).set(buf.readLong(), buf.readInt());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      LongIntVector longIntRow = (LongIntVector) row;\n-      for (int i = 0; i < size; i++) {\n-        longIntRow.set(buf.readLong(), buf.readInt());\n-      }\n     }\n-  }\n-\n-  @Override protected int getRowSpace() {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        return size * 4;\n-      } else {\n-        return size * 8;\n-      }\n-    } else {\n-      return size * 12;\n+\n+    @Override\n+    public int size() {\n+        if (useIntKey) {\n+            return ((IntIntVector) row).size();\n+        } else {\n+            return (int) ((LongIntVector) row).size();\n+        }\n     }\n-  }\n-\n-  @Override public ServerRow clone() {\n-    startRead();\n-    try {\n-      if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n-      } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n-      }\n-    } finally {\n-      endRead();\n+\n+    /**\n+     * Merge this row split to a row\n+     *\n+     * @param mergedRow the dest row\n+     */\n+    public void mergeTo(LongIntVector mergedRow) {\n+        startRead();\n+        try {\n+            if (isDense()) {\n+                int[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + startCol, values[i]);\n+                }\n+            } else {\n+                if (useIntKey) {\n+                    ObjectIterator<Int2IntMap.Entry> iter =\n+                            ((IntIntVector) row).getStorage().entryIterator();\n+                    Int2IntMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n+                    }\n+                } else {\n+                    ObjectIterator<Long2IntMap.Entry> iter =\n+                            ((LongIntVector) row).getStorage().entryIterator();\n+                    Long2IntMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getLongKey() + startCol, entry.getIntValue());\n+                    }\n+                }\n+            }\n+        } finally {\n+            endRead();\n+        }\n     }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(long index) {\n-    if (useIntKey) {\n-      if (row.isSparse()) {\n-        return ((IntIntVector) row).getStorage().hasKey((int) (index - startCol));\n-      } else {\n-        return ((IntIntVector) row).getStorage().get((int) (index - startCol)) != 0;\n-      }\n-    } else {\n-      if (row.isSparse()) {\n-        return ((LongIntVector) row).getStorage().hasKey(index - startCol);\n-      } else {\n-        return ((LongIntVector) row).getStorage().get(index - startCol) != 0;\n-      }\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                int[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeInt(values[i]);\n+                }\n+            } else {\n+                ObjectIterator<Int2IntMap.Entry> iter =\n+                        ((IntIntVector) row).getStorage().entryIterator();\n+                Int2IntMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeInt(entry.getIntValue());\n+                }\n+            }\n+        } else {\n+            ObjectIterator<Long2IntMap.Entry> iter =\n+                    ((LongIntVector) row).getStorage().entryIterator();\n+            Long2IntMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeLong(entry.getLongKey());\n+                buf.writeInt(entry.getIntValue());\n+            }\n+        }\n     }\n-  }\n-\n-  public int initAndGet(long index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      int value = (int) func.action();\n-      set(index, value);\n-      return value;\n+\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            IntIntVector intIntRow = (IntIntVector) row;\n+            if (useDenseSerialize()) {\n+                for (int i = 0; i < size; i++) {\n+                    intIntRow.set(i, buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    intIntRow.set(buf.readInt(), buf.readInt());\n+                }\n+            }\n+        } else {\n+            LongIntVector longIntRow = (LongIntVector) row;\n+            for (int i = 0; i < size; i++) {\n+                longIntRow.set(buf.readLong(), buf.readInt());\n+            }\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readInt(), func));\n+\n+    @Override\n+    protected int getRowSpace() {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                return size * 4;\n+            } else {\n+                return size * 8;\n+            }\n+        } else {\n+            return size * 12;\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readLong(), func));\n+    }\n+\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            if (useIntKey) {\n+                return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((IntIntVector) row).clone());\n+            } else {\n+                return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((LongIntVector) row).clone());\n+            }\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readInt()));\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(long index) {\n+        if (useIntKey) {\n+            if (row.isSparse()) {\n+                return ((IntIntVector) row).getStorage().hasKey((int) (index - startCol));\n+            } else {\n+                return ((IntIntVector) row).getStorage().get((int) (index - startCol)) != 0;\n+            }\n+        } else {\n+            if (row.isSparse()) {\n+                return ((LongIntVector) row).getStorage().hasKey(index - startCol);\n+            } else {\n+                return ((LongIntVector) row).getStorage().get(index - startCol) != 0;\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readLong()));\n+    }\n+\n+    public int initAndGet(long index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            int value = (int) func.action();\n+            set(index, value);\n+            return value;\n         }\n-      }\n     }\n-  }\n-\n-  @Override public void setSplit(Vector row) {\n-    super.setSplit(row);\n-  }\n-\n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n-    if (isDense()) {\n-      int[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n-    } else {\n-      if (useIntKey) {\n-        ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n-        Int2IntMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(initAndGet(in.readLong(), func));\n+                }\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(get(in.readInt()));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(get(in.readLong()));\n+                }\n+            }\n         }\n-      } else {\n-        ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n-        Long2IntMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+    }\n+\n+    @Override\n+    public void elemUpdate(IntElemUpdateFunc func) {\n+        if (isDense()) {\n+            int[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = func.update();\n+            }\n+        } else {\n+            if (useIntKey) {\n+                ObjectIterator<Int2IntMap.Entry> iter =\n+                        ((IntIntVector) row).getStorage().entryIterator();\n+                Int2IntMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            } else {\n+                ObjectIterator<Long2IntMap.Entry> iter =\n+                        ((LongIntVector) row).getStorage().entryIterator();\n+                Long2IntMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n }\n",
            "diff_size": 506
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/367/ServerLongIntRow.java\nindex 8fe6b12ab2..d565dbadb6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/367/ServerLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.*;\n@@ -45,9 +44,8 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow   the inner row\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntVector innerRow) {\n+  super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n   /**\n@@ -181,7 +179,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  @Override\n+public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -189,10 +188,8 @@ public class ServerLongIntRow extends ServerIntRow {\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -229,7 +226,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public int size() {\n+  @Override\n+public int size() {\n     if (useIntKey) {\n       return ((IntIntVector) row).size();\n     } else {\n@@ -259,8 +257,7 @@ public class ServerLongIntRow extends ServerIntRow {\n             mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n           }\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n           Long2IntMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -273,7 +270,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void serializeRow(ByteBuf buf) {\n+  @Override\n+protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         int[] values = getValues();\n@@ -300,7 +298,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected void deserializeRow(ByteBuf buf) {\n+  @Override\n+protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n       IntIntVector intIntRow = (IntIntVector) row;\n       if (useDenseSerialize()) {\n@@ -320,7 +319,8 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override protected int getRowSpace() {\n+  @Override\n+protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n       if (useDenseSerialize()) {\n         return size * 4;\n@@ -332,15 +332,14 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public ServerRow clone() {\n+  @Override\n+public ServerRow clone() {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n       } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -380,9 +379,8 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n-    if (func != null) {\n+  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeInt(initAndGet(in.readInt(), func));\n@@ -405,11 +403,13 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-  @Override public void setSplit(Vector row) {\n+  @Override\n+public void setSplit(Vector row) {\n     super.setSplit(row);\n   }\n \n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n+  @Override\n+public void elemUpdate(IntElemUpdateFunc func) {\n     if (isDense()) {\n       int[] values = getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -434,4 +434,4 @@ public class ServerLongIntRow extends ServerIntRow {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 63.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 89.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 104.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 119.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 140.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 160.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 171.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 184.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 253.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "352",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "359",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 366.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "393",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/367/ServerLongIntRow.java\nindex 8fe6b12ab2..6699264fa3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/367/ServerLongIntRow.java\n@@ -28,12 +28,12 @@ import io.netty.buffer.ByteBuf;\n import it.unimi.dsi.fastutil.ints.Int2IntMap;\n import it.unimi.dsi.fastutil.longs.Long2IntMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.io.IOException;\n \n /**\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n+\n public class ServerLongIntRow extends ServerIntRow {\n   /**\n    * Create a new ServerIntIntRow\n@@ -45,10 +45,10 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow   the inner row\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-    IntVector innerRow) {\n+\n+    public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-  }\n+    }\n \n   /**\n    * Create a new ServerIntIntRow\n@@ -59,18 +59,20 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+\n+    public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n+    }\n \n   /**\n    * Create a new ServerLongIntRow\n    *\n    * @param rowType\n    */\n-  public ServerLongIntRow(RowType rowType) {\n+\n+    public ServerLongIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n-  }\n+    }\n \n   //////////////////////////////////////////////////////////////////////////////////////////////////\n   //Methods with out lock operation, you must call startWrite/startRead before using these methods\n@@ -83,13 +85,14 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @return element value\n    */\n-  public int get(long index) {\n+\n+    public int get(long index) {\n     if (useIntKey) {\n-      return ((IntIntVector) row).get((int) (index - startCol));\n+        return ((IntIntVector) row).get((int) (index - startCol));\n     } else {\n       return ((LongIntVector) row).get(index - startCol);\n     }\n-  }\n+    }\n \n   /**\n    * Set a element value without lock operation\n@@ -97,13 +100,14 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element new value\n    */\n-  public void set(long index, int value) {\n+\n+    public void set(long index, int value) {\n     if (useIntKey) {\n-      ((IntIntVector) row).set((int) (index - startCol), value);\n+        ((IntIntVector) row).set((int) (index - startCol), value);\n     } else {\n       ((LongIntVector) row).set(index - startCol, value);\n     }\n-  }\n+    }\n \n   /**\n    * Get a batch elements values without lock\n@@ -111,20 +115,20 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n-  public int[] get(long[] indices) {\n+\n+    public int[] get(long[] indices) {\n     int[] values = new int[indices.length];\n     if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((IntIntVector) row).get((int) (indices[i] - startCol));\n-      }\n+        for (int i = 0; i < indices.length; i++) {\n+                       values[i] = ((IntIntVector) row).get((int) (indices[i] - startCol));\n+        }\n     } else {\n       for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n+               values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n-  }\n+    }\n \n   /**\n    * Set a batch elements values without lock\n@@ -132,18 +136,19 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values  elements values\n    */\n-  public void set(long[] indices, int[] values) {\n+\n+    public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((IntIntVector) row).set((int) (indices[i] - startCol), values[i]);\n-      }\n+        for (int i = 0; i < indices.length; i++) {\n+                       ((IntIntVector) row).set((int) (indices[i] - startCol), values[i]);\n+        }\n     } else {\n       for (int i = 0; i < indices.length; i++) {\n-        ((LongIntVector) row).set(indices[i] - startCol, values[i]);\n+               ((LongIntVector) row).set(indices[i] - startCol, values[i]);\n       }\n     }\n-  }\n+    }\n \n   /**\n    * Add a element value without lock\n@@ -151,9 +156,10 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element plus value\n    */\n-  public void addTo(long index, int value) {\n+\n+    public void addTo(long index, int value) {\n     set(index, get(index) + value);\n-  }\n+    }\n \n   /**\n    * Add a batch elements values without lock\n@@ -161,191 +167,194 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values  elements plus values\n    */\n-  public void addTo(long[] indices, int[] values) {\n+\n+    public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+        set(indices[i], get(indices[i]) + values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n    *\n    * @return all element values\n    */\n-  private int[] getValues() {\n+\n+    private int[] getValues() {\n     if (useIntKey) {\n-      return ((IntIntVector) row).getStorage().getValues();\n+        return ((IntIntVector) row).getStorage().getValues();\n     } else {\n       return ((LongIntVector) row).getStorage().getValues();\n     }\n-  }\n+    }\n \n-  @Override public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n-      switch (updateType) {\n+        switch (updateType) {\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseSparse(buf, op);\n-          break;\n-\n+            updateUseSparse(buf, op);\n+            break;\n         default: {\n-          throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+            throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n-\n-      updateRowVersion();\n+        }\n+        updateRowVersion();\n     } finally {\n       endWrite();\n     }\n-  }\n+    }\n \n-  private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntIntVector) row).set(index, ((IntIntVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongIntVector) row).set(index, ((LongIntVector) row).get(index) + buf.readInt());\n+        if (useIntKey) {\n+                                 for (int i = 0; i < size; i++) {\n+                           int index = (int) buf.readLong();\n+                           ((IntIntVector) row).set(index, ((IntIntVector) row).get(index) + buf.readInt());\n+                                 }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   long index = buf.readLong();\n+                   ((LongIntVector) row).set(index, ((LongIntVector) row).get(index) + buf.readInt());\n+          }\n         }\n-      }\n     } else {\n       if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntIntVector) row).set((int) buf.readLong(), buf.readInt());\n-        }\n+               for (int i = 0; i < size; i++) {\n+                         ((IntIntVector) row).set((int) buf.readLong(), buf.readInt());\n+               }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongIntVector) row).set(buf.readLong(), buf.readInt());\n+                 ((LongIntVector) row).set(buf.readLong(), buf.readInt());\n         }\n       }\n     }\n-  }\n+    }\n \n-  @Override public int size() {\n+    @Override\n+    public int size() {\n     if (useIntKey) {\n-      return ((IntIntVector) row).size();\n+        return ((IntIntVector) row).size();\n     } else {\n       return (int) ((LongIntVector) row).size();\n     }\n-  }\n+    }\n \n   /**\n    * Merge this row split to a row\n    *\n    * @param mergedRow the dest row\n    */\n-  public void mergeTo(LongIntVector mergedRow) {\n+\n+    public void mergeTo(LongIntVector mergedRow) {\n     startRead();\n     try {\n-      if (isDense()) {\n+        if (isDense()) {\n         int[] values = getValues();\n         for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startCol, values[i]);\n+                           mergedRow.set(i + startCol, values[i]);\n         }\n-      } else {\n-        if (useIntKey) {\n-          ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n-          Int2IntMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n-          }\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-            ((LongIntVector) row).getStorage().entryIterator();\n-          Long2IntMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getLongKey() + startCol, entry.getIntValue());\n+          if (useIntKey) {\n+            ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n+            Int2IntMap.Entry entry;\n+            while (iter.hasNext()) {\n+                             entry = iter.next();\n+                             mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n+            }\n+          } else {\n+            ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n+            Long2IntMap.Entry entry;\n+            while (iter.hasNext()) {\n+                     entry = iter.next();\n+                     mergedRow.set(entry.getLongKey() + startCol, entry.getIntValue());\n+            }\n           }\n         }\n-      }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override protected void serializeRow(ByteBuf buf) {\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        int[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          buf.writeInt(values[i]);\n-        }\n-      } else {\n-        ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n-        Int2IntMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeInt(entry.getIntValue());\n+        if (useDenseSerialize()) {\n+                                  int[] values = getValues();\n+                                  for (int i = 0; i < values.length; i++) {\n+                                     buf.writeInt(values[i]);\n+                                  }\n+        } else {\n+          ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n+          Int2IntMap.Entry entry;\n+          while (iter.hasNext()) {\n+                   entry = iter.next();\n+                   buf.writeInt(entry.getIntKey());\n+                   buf.writeInt(entry.getIntValue());\n+          }\n         }\n-      }\n     } else {\n       ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n       Long2IntMap.Entry entry;\n       while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeInt(entry.getIntValue());\n+               entry = iter.next();\n+               buf.writeLong(entry.getLongKey());\n+               buf.writeInt(entry.getIntValue());\n       }\n     }\n-  }\n+    }\n \n-  @Override protected void deserializeRow(ByteBuf buf) {\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n     if (useIntKeySerialize()) {\n-      IntIntVector intIntRow = (IntIntVector) row;\n-      if (useDenseSerialize()) {\n-        for (int i = 0; i < size; i++) {\n-          intIntRow.set(i, buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          intIntRow.set(buf.readInt(), buf.readInt());\n+        IntIntVector intIntRow = (IntIntVector) row;\n+        if (useDenseSerialize()) {\n+                                  for (int i = 0; i < size; i++) {\n+                                     intIntRow.set(i, buf.readInt());\n+                                  }\n+        } else {\n+          for (int i = 0; i < size; i++) {\n+                   intIntRow.set(buf.readInt(), buf.readInt());\n+          }\n         }\n-      }\n     } else {\n       LongIntVector longIntRow = (LongIntVector) row;\n       for (int i = 0; i < size; i++) {\n-        longIntRow.set(buf.readLong(), buf.readInt());\n+               longIntRow.set(buf.readLong(), buf.readInt());\n       }\n     }\n-  }\n+    }\n \n-  @Override protected int getRowSpace() {\n+    @Override\n+    protected int getRowSpace() {\n     if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        return size * 4;\n-      } else {\n-        return size * 8;\n-      }\n+        if (useDenseSerialize()) {\n+                                  return size * 4;\n+        } else {\n+          return size * 8;\n+        }\n     } else {\n       return size * 12;\n     }\n-  }\n+    }\n \n-  @Override public ServerRow clone() {\n+    @Override\n+    public ServerRow clone() {\n     startRead();\n     try {\n-      if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((IntIntVector) row).clone());\n-      } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          ((LongIntVector) row).clone());\n-      }\n+        if (useIntKey) {\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n+        } else {\n+          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n+        }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n   /**\n    * Check the vector contains the index or not\n@@ -353,85 +362,87 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @return true means exist\n    */\n-  public boolean exist(long index) {\n+\n+    public boolean exist(long index) {\n     if (useIntKey) {\n-      if (row.isSparse()) {\n-        return ((IntIntVector) row).getStorage().hasKey((int) (index - startCol));\n-      } else {\n-        return ((IntIntVector) row).getStorage().get((int) (index - startCol)) != 0;\n-      }\n+        if (row.isSparse()) {\n+                       return ((IntIntVector) row).getStorage().hasKey((int) (index - startCol));\n+        } else {\n+          return ((IntIntVector) row).getStorage().get((int) (index - startCol)) != 0;\n+        }\n     } else {\n       if (row.isSparse()) {\n-        return ((LongIntVector) row).getStorage().hasKey(index - startCol);\n+               return ((LongIntVector) row).getStorage().hasKey(index - startCol);\n       } else {\n         return ((LongIntVector) row).getStorage().get(index - startCol) != 0;\n       }\n     }\n-  }\n+    }\n \n-  public int initAndGet(long index, InitFunc func) {\n+    public int initAndGet(long index, InitFunc func) {\n     if (exist(index)) {\n-      return get(index);\n+        return get(index);\n     } else {\n       int value = (int) func.action();\n       set(index, value);\n       return value;\n     }\n-  }\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-    throws IOException {\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readInt(), func));\n-        }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readLong(), func));\n+        if (indexType == IndexType.INT) {\n+                          for (int i = 0; i < indexSize; i++) {\n+                                            out.writeInt(initAndGet(in.readInt(), func));\n+                          }\n+        } else {\n+          for (int i = 0; i < indexSize; i++) {\n+                   out.writeInt(initAndGet(in.readLong(), func));\n+          }\n         }\n-      }\n     } else {\n       if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readInt()));\n-        }\n+               for (int i = 0; i < indexSize; i++) {\n+                                          out.writeInt(get(in.readInt()));\n+               }\n       } else {\n         for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readLong()));\n+                 out.writeInt(get(in.readLong()));\n         }\n       }\n     }\n-  }\n+    }\n \n-  @Override public void setSplit(Vector row) {\n+    @Override\n+    public void setSplit(Vector row) {\n     super.setSplit(row);\n-  }\n+    }\n \n-  @Override public void elemUpdate(IntElemUpdateFunc func) {\n+    @Override\n+    public void elemUpdate(IntElemUpdateFunc func) {\n     if (isDense()) {\n-      int[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n+        int[] values = getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                       values[i] = func.update();\n+        }\n     } else {\n       if (useIntKey) {\n         ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVector) row).getStorage().entryIterator();\n         Int2IntMap.Entry entry;\n         while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+                         entry = iter.next();\n+                         entry.setValue(func.update());\n         }\n       } else {\n         ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n         Long2IntMap.Entry entry;\n         while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+                 entry = iter.next();\n+                 entry.setValue(func.update());\n         }\n       }\n     }\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 203
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/367/ServerLongIntRow.java\nindex 8fe6b12ab2..6a2fb812ec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/367/ServerLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/367/ServerLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.*;\n",
            "diff_size": 1
        }
    ]
}