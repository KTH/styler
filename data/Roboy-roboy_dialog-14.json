{
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "12",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * is time-wasting since a lot of pairs don't type-check. We instead group\n * derivations by type, and only apply the rule to the pairs that type-check.\n * \n * This idea also extends to one-argument rules. For example, for (sum ___),\n * we should only look at child derivations with number type.\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/intellij/14/ChildDerivationsGroup.java\nindex c6ca9e0e92..d5fe8aa478 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/intellij/14/ChildDerivationsGroup.java\n@@ -4,33 +4,33 @@ import java.util.List;\n \n /**\n  * A group containing one or two lists of potential child derivations.\n- *\n+ * <p>\n  * The motivation is to group potential child derivations based on type compatibility.\n  * For example, when building (and __ __), considering all pairs of derivations\n  * is time-wasting since a lot of pairs don't type-check. We instead group\n  * derivations by type, and only apply the rule to the pairs that type-check.\n- * \n+ * <p>\n  * This idea also extends to one-argument rules. For example, for (sum ___),\n  * we should only look at child derivations with number type.\n- *\n+ * <p>\n  * During parsing, for each DerivationGroup:\n  * - For a one-argument rule (derivations2 == null):\n- *   Apply the rule on all derivations in derivations1\n+ * Apply the rule on all derivations in derivations1\n  * - For a two-argument rule (derivations2 != null):\n- *   Apply the rule to all pairs (d1, d2) where d1 is in derivations1 and d2 is in derivations2\n+ * Apply the rule to all pairs (d1, d2) where d1 is in derivations1 and d2 is in derivations2\n  *\n  * @author ppasupat\n  */\n public class ChildDerivationsGroup {\n-  public final List<Derivation> derivations1, derivations2;\n+    public final List<Derivation> derivations1, derivations2;\n \n-  public ChildDerivationsGroup(List<Derivation> derivations1) {\n-    this.derivations1 = derivations1;\n-    this.derivations2 = null;\n-  }\n+    public ChildDerivationsGroup(List<Derivation> derivations1) {\n+        this.derivations1 = derivations1;\n+        this.derivations2 = null;\n+    }\n \n-  public ChildDerivationsGroup(List<Derivation> derivations1, List<Derivation> derivations2) {\n-    this.derivations1 = derivations1;\n-    this.derivations2 = derivations2;\n-  }\n+    public ChildDerivationsGroup(List<Derivation> derivations1, List<Derivation> derivations2) {\n+        this.derivations1 = derivations1;\n+        this.derivations2 = derivations2;\n+    }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/naturalize/14/ChildDerivationsGroup.java\nindex c6ca9e0e92..6f245eb56e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/naturalize/14/ChildDerivationsGroup.java\n@@ -33,4 +33,4 @@ public class ChildDerivationsGroup {\n     this.derivations1 = derivations1;\n     this.derivations2 = derivations2;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/codebuff/14/ChildDerivationsGroup.java\nindex c6ca9e0e92..ab8deccc49 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/14/ChildDerivationsGroup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/codebuff/14/ChildDerivationsGroup.java\n@@ -21,16 +21,18 @@ import java.util.List;\n  *\n  * @author ppasupat\n  */\n+\n+\n public class ChildDerivationsGroup {\n-  public final List<Derivation> derivations1, derivations2;\n+    public final List<Derivation> derivations1, derivations2;\n \n-  public ChildDerivationsGroup(List<Derivation> derivations1) {\n+    public ChildDerivationsGroup(List<Derivation> derivations1) {\n     this.derivations1 = derivations1;\n     this.derivations2 = null;\n-  }\n+    }\n \n-  public ChildDerivationsGroup(List<Derivation> derivations1, List<Derivation> derivations2) {\n+    public ChildDerivationsGroup(List<Derivation> derivations1, List<Derivation> derivations2) {\n     this.derivations1 = derivations1;\n     this.derivations2 = derivations2;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}