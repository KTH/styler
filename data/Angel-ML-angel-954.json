{
    "error_id": "954",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/954/InitNodeFeatsParam.java\nindex d4477d0789..1dd62b2b85 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/954/InitNodeFeatsParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.initnodefeats2;\n \n import com.tencent.angel.PartitionKey;\n@@ -29,47 +30,48 @@ import java.util.List;\n \n public class InitNodeFeatsParam extends UpdateParam {\n \n-  private final long[] nodeIds;\n-  private final IntFloatVector[] feats;\n+    private final long[] nodeIds;\n+    private final IntFloatVector[] feats;\n \n-  public InitNodeFeatsParam(int matrixId, long[] nodeIds, IntFloatVector[] feats) {\n-    super(matrixId);\n-    this.nodeIds = nodeIds;\n-    this.feats = feats;\n-    assert nodeIds.length == feats.length;\n-  }\n+    public InitNodeFeatsParam(int matrixId, long[] nodeIds, IntFloatVector[] feats) {\n+        super(matrixId);\n+        this.nodeIds = nodeIds;\n+        this.feats = feats;\n+        assert nodeIds.length == feats.length;\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    Sort.quickSort(nodeIds, feats, 0, nodeIds.length - 1);\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        Sort.quickSort(nodeIds, feats, 0, nodeIds.length - 1);\n \n-    List<PartitionUpdateParam> partParams = new ArrayList<>();\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        List<PartitionUpdateParam> partParams = new ArrayList<>();\n+        List<PartitionKey> partitions =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n-    if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n-    }\n+        if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n+            throw new AngelException(\n+                    \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" +\n+                            partitions\n+                                    .get(partitions.size() - 1).getEndCol());\n+        }\n \n-    int nodeIndex = 0;\n-    int partIndex = 0;\n-    while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n-      int length = 0;\n-      int endOffset = (int) partitions.get(partIndex).getEndCol();\n-      while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int nodeIndex = 0;\n+        int partIndex = 0;\n+        while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n+            int length = 0;\n+            int endOffset = (int) partitions.get(partIndex).getEndCol();\n+            while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n+                nodeIndex++;\n+                length++;\n+            }\n \n-      if (length > 0) {\n-        partParams.add(new PartInitNodeFeatsParam(matrixId,\n-            partitions.get(partIndex), nodeIds, feats, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n-    }\n+            if (length > 0) {\n+                partParams.add(new PartInitNodeFeatsParam(matrixId,\n+                        partitions.get(partIndex), nodeIds, feats, nodeIndex - length, nodeIndex));\n+            }\n+            partIndex++;\n+        }\n \n-    return partParams;\n-  }\n+        return partParams;\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/954/InitNodeFeatsParam.java\nindex d4477d0789..672f4a7b46 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/954/InitNodeFeatsParam.java\n@@ -48,10 +48,9 @@ public class InitNodeFeatsParam extends UpdateParam {\n         PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n               .get(partitions.size() - 1).getEndCol());\n-    }\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -66,10 +65,11 @@ public class InitNodeFeatsParam extends UpdateParam {\n       if (length > 0) {\n         partParams.add(new PartInitNodeFeatsParam(matrixId,\n             partitions.get(partIndex), nodeIds, feats, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+  }\n+\n+partIndex++;\n     }\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/954/InitNodeFeatsParam.java\nindex d4477d0789..6b48201f4a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/954/InitNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/954/InitNodeFeatsParam.java\n@@ -28,48 +28,41 @@ import java.util.ArrayList;\n import java.util.List;\n \n public class InitNodeFeatsParam extends UpdateParam {\n+    private final long[] nodeIds;\n+    private final IntFloatVector[] feats;\n \n-  private final long[] nodeIds;\n-  private final IntFloatVector[] feats;\n-\n-  public InitNodeFeatsParam(int matrixId, long[] nodeIds, IntFloatVector[] feats) {\n+    public InitNodeFeatsParam(int matrixId, long[] nodeIds, IntFloatVector[] feats) {\n     super(matrixId);\n     this.nodeIds = nodeIds;\n     this.feats = feats;\n     assert nodeIds.length == feats.length;\n-  }\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n     Sort.quickSort(nodeIds, feats, 0, nodeIds.length - 1);\n-\n     List<PartitionUpdateParam> partParams = new ArrayList<>();\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n+    List<PartitionKey> partitions = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n+        throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions.get(partitions.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n     while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n-      int length = 0;\n-      int endOffset = (int) partitions.get(partIndex).getEndCol();\n-      while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int length = 0;\n+        int endOffset = (int) partitions.get(partIndex).getEndCol();\n+        while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n+                                                                            nodeIndex++;\n+                                                                            length++;\n+        }\n \n-      if (length > 0) {\n-        partParams.add(new PartInitNodeFeatsParam(matrixId,\n-            partitions.get(partIndex), nodeIds, feats, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+        if (length > 0) {\n+        partParams.add(new PartInitNodeFeatsParam(matrixId, partitions.get(partIndex), nodeIds, feats, nodeIndex - length, nodeIndex));\n+        }\n+        partIndex++;\n     }\n-\n     return partParams;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}