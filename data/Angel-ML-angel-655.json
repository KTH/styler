{
    "error_id": "655",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/655/ColumnIndex.java\nindex 1456cf9214..e0adee1331 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/655/ColumnIndex.java\n@@ -22,73 +22,73 @@ import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n public class ColumnIndex {\n-  private IntOpenHashSet indexSet;\n-  private int[] index;\n-  private final Lock readLock;\n-  private final Lock writeLock;\n-  private boolean indexUpdated;\n+    private IntOpenHashSet indexSet;\n+    private int[] index;\n+    private final Lock readLock;\n+    private final Lock writeLock;\n+    private boolean indexUpdated;\n \n-  public ColumnIndex() {\n-    indexSet = new IntOpenHashSet();\n-    index = null;\n-    indexUpdated = false;\n-    ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n-    readLock = lock.readLock();\n-    writeLock = lock.writeLock();\n-  }\n+    public ColumnIndex() {\n+        indexSet = new IntOpenHashSet();\n+        index = null;\n+        indexUpdated = false;\n+        ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n+        readLock = lock.readLock();\n+        writeLock = lock.writeLock();\n+    }\n \n-  public void addIndexes(int[] indexArray) {\n-    try {\n-      writeLock.lock();\n-      for (int i = 0; i < indexArray.length; i++) {\n-        indexSet.add(indexArray[i]);\n-      }\n+    public void addIndexes(int[] indexArray) {\n+        try {\n+            writeLock.lock();\n+            for (int i = 0; i < indexArray.length; i++) {\n+                indexSet.add(indexArray[i]);\n+            }\n \n-      indexUpdated = true;\n-    } finally {\n-      writeLock.unlock();\n+            indexUpdated = true;\n+        } finally {\n+            writeLock.unlock();\n+        }\n     }\n-  }\n \n-  public void addIndexes(IntOpenHashSet indexSet) {\n-    try {\n-      writeLock.lock();\n-      this.indexSet.addAll(indexSet);\n-      indexUpdated = true;\n-    } finally {\n-      writeLock.unlock();\n+    public void addIndexes(IntOpenHashSet indexSet) {\n+        try {\n+            writeLock.lock();\n+            this.indexSet.addAll(indexSet);\n+            indexUpdated = true;\n+        } finally {\n+            writeLock.unlock();\n+        }\n     }\n-  }\n \n-  public void merge(ColumnIndex oldIndex) {\n-    if (this == oldIndex) {\n-      return;\n-    }\n+    public void merge(ColumnIndex oldIndex) {\n+        if (this == oldIndex) {\n+            return;\n+        }\n \n-    try {\n-      writeLock.lock();\n-      try {\n-        oldIndex.readLock.lock();\n-        indexSet.addAll(oldIndex.indexSet);\n-        indexUpdated = true;\n-      } finally {\n-        oldIndex.readLock.unlock();\n-      }\n-    } finally {\n-      writeLock.unlock();\n+        try {\n+            writeLock.lock();\n+            try {\n+                oldIndex.readLock.lock();\n+                indexSet.addAll(oldIndex.indexSet);\n+                indexUpdated = true;\n+            } finally {\n+                oldIndex.readLock.unlock();\n+            }\n+        } finally {\n+            writeLock.unlock();\n+        }\n     }\n-  }\n \n-  public int[] getIndex() {\n-    try {\n-      readLock.lock();\n-      if (indexUpdated || index == null) {\n-        index = indexSet.toArray(new int[0]);\n-        indexUpdated = false;\n-      }\n-      return index;\n-    } finally {\n-      readLock.unlock();\n+    public int[] getIndex() {\n+        try {\n+            readLock.lock();\n+            if (indexUpdated || index == null) {\n+                index = indexSet.toArray(new int[0]);\n+                indexUpdated = false;\n+            }\n+            return index;\n+        } finally {\n+            readLock.unlock();\n+        }\n     }\n-  }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/655/ColumnIndex.java\nindex 1456cf9214..82efafb8ad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/655/ColumnIndex.java\n@@ -91,4 +91,4 @@ public class ColumnIndex {\n       readLock.unlock();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/655/ColumnIndex.java\nindex 1456cf9214..71a00e886a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/655/ColumnIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/655/ColumnIndex.java\n@@ -17,78 +17,75 @@\n package com.tencent.angel.psagent.matrix.index;\n \n import it.unimi.dsi.fastutil.ints.IntOpenHashSet;\n-\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n public class ColumnIndex {\n-  private IntOpenHashSet indexSet;\n-  private int[] index;\n-  private final Lock readLock;\n-  private final Lock writeLock;\n-  private boolean indexUpdated;\n+    private IntOpenHashSet indexSet;\n+    private int[] index;\n+    private final Lock readLock;\n+    private final Lock writeLock;\n+    private boolean indexUpdated;\n \n-  public ColumnIndex() {\n+    public ColumnIndex() {\n     indexSet = new IntOpenHashSet();\n     index = null;\n     indexUpdated = false;\n     ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n     readLock = lock.readLock();\n     writeLock = lock.writeLock();\n-  }\n+    }\n \n-  public void addIndexes(int[] indexArray) {\n+    public void addIndexes(int[] indexArray) {\n     try {\n-      writeLock.lock();\n-      for (int i = 0; i < indexArray.length; i++) {\n+        writeLock.lock();\n+        for (int i = 0; i < indexArray.length; i++) {\n         indexSet.add(indexArray[i]);\n-      }\n-\n-      indexUpdated = true;\n+        }\n+        indexUpdated = true;\n     } finally {\n       writeLock.unlock();\n     }\n-  }\n+    }\n \n-  public void addIndexes(IntOpenHashSet indexSet) {\n+    public void addIndexes(IntOpenHashSet indexSet) {\n     try {\n-      writeLock.lock();\n-      this.indexSet.addAll(indexSet);\n-      indexUpdated = true;\n+        writeLock.lock();\n+        this.indexSet.addAll(indexSet);\n+        indexUpdated = true;\n     } finally {\n       writeLock.unlock();\n     }\n-  }\n+    }\n \n-  public void merge(ColumnIndex oldIndex) {\n+    public void merge(ColumnIndex oldIndex) {\n     if (this == oldIndex) {\n-      return;\n+        return;\n     }\n-\n     try {\n-      writeLock.lock();\n-      try {\n+        writeLock.lock();\n+        try {\n         oldIndex.readLock.lock();\n         indexSet.addAll(oldIndex.indexSet);\n         indexUpdated = true;\n-      } finally {\n-        oldIndex.readLock.unlock();\n-      }\n+        } finally {\n+          oldIndex.readLock.unlock();\n+        }\n     } finally {\n       writeLock.unlock();\n     }\n-  }\n+    }\n \n-  public int[] getIndex() {\n+    public int[] getIndex() {\n     try {\n-      readLock.lock();\n-      if (indexUpdated || index == null) {\n+        readLock.lock();\n+        if (indexUpdated || index == null) {\n         index = indexSet.toArray(new int[0]);\n         indexUpdated = false;\n-      }\n-      return index;\n+        }\n+        return index;\n     } finally {\n       readLock.unlock();\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}