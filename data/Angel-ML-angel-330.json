{
    "error_id": "330",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/330/InitPartitionParam.java\nindex 7245bd06b3..d5d9b1bf97 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/330/InitPartitionParam.java\n@@ -23,65 +23,66 @@ import io.netty.buffer.ByteBuf;\n \n public class InitPartitionParam extends PartitionUpdateParam {\n \n-  int numPartitions;\n-  int maxIndex;\n-  int maxLength;\n-  int negative;\n-  int order;\n-  int partDim;\n-  int window;\n+    int numPartitions;\n+    int maxIndex;\n+    int maxLength;\n+    int negative;\n+    int order;\n+    int partDim;\n+    int window;\n \n \n-  public InitPartitionParam(int matrixId,\n-                            PartitionKey partKey,\n-                            int numPartitions,\n-                            int maxIndex,\n-                            int maxLength,\n-                            int negative,\n-                            int order,\n-                            int partDim,\n-                            int window) {\n-    super(matrixId, partKey);\n+    public InitPartitionParam(int matrixId,\n+                              PartitionKey partKey,\n+                              int numPartitions,\n+                              int maxIndex,\n+                              int maxLength,\n+                              int negative,\n+                              int order,\n+                              int partDim,\n+                              int window) {\n+        super(matrixId, partKey);\n \n-    this.numPartitions = numPartitions;\n-    this.maxIndex = maxIndex;\n-    this.maxLength = maxLength;\n-    this.negative = negative;\n-    this.order = order;\n-    this.partDim = partDim;\n-    this.window = window;\n-  }\n+        this.numPartitions = numPartitions;\n+        this.maxIndex = maxIndex;\n+        this.maxLength = maxLength;\n+        this.negative = negative;\n+        this.order = order;\n+        this.partDim = partDim;\n+        this.window = window;\n+    }\n \n-  public InitPartitionParam() {}\n+    public InitPartitionParam() {\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n \n-    buf.writeInt(numPartitions);\n-    buf.writeInt(maxIndex);\n-    buf.writeInt(maxLength);\n-    buf.writeInt(negative);\n-    buf.writeInt(order);\n-    buf.writeInt(partDim);\n-    buf.writeInt(window);\n-  }\n+        buf.writeInt(numPartitions);\n+        buf.writeInt(maxIndex);\n+        buf.writeInt(maxLength);\n+        buf.writeInt(negative);\n+        buf.writeInt(order);\n+        buf.writeInt(partDim);\n+        buf.writeInt(window);\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n \n-    numPartitions = buf.readInt();\n-    maxIndex = buf.readInt();\n-    maxLength = buf.readInt();\n-    negative = buf.readInt();\n-    order = buf.readInt();\n-    partDim = buf.readInt();\n-    window = buf.readInt();\n-  }\n+        numPartitions = buf.readInt();\n+        maxIndex = buf.readInt();\n+        maxLength = buf.readInt();\n+        negative = buf.readInt();\n+        order = buf.readInt();\n+        partDim = buf.readInt();\n+        window = buf.readInt();\n+    }\n \n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + 28;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + 28;\n+    }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/330/InitPartitionParam.java\nindex 7245bd06b3..cb0b40e9ae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/330/InitPartitionParam.java\n@@ -32,8 +32,7 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   int window;\n \n \n-  public InitPartitionParam(int matrixId,\n-                            PartitionKey partKey,\n+  public InitPartitionParam(int matrixId, PartitionKey partKey,\n                             int numPartitions,\n                             int maxIndex,\n                             int maxLength,\n@@ -41,9 +40,8 @@ public class InitPartitionParam extends PartitionUpdateParam {\n                             int order,\n                             int partDim,\n                             int window) {\n-    super(matrixId, partKey);\n-\n-    this.numPartitions = numPartitions;\n+  super(matrixId, partKey);\n+this.numPartitions = numPartitions;\n     this.maxIndex = maxIndex;\n     this.maxLength = maxLength;\n     this.negative = negative;\n@@ -84,4 +82,4 @@ public class InitPartitionParam extends PartitionUpdateParam {\n   public int bufferLen() {\n     return super.bufferLen() + 28;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/330/InitPartitionParam.java\nindex 7245bd06b3..7fbf3a7c6c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/330/InitPartitionParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/330/InitPartitionParam.java\n@@ -23,26 +23,22 @@ import io.netty.buffer.ByteBuf;\n \n public class InitPartitionParam extends PartitionUpdateParam {\n \n-  int numPartitions;\n-  int maxIndex;\n-  int maxLength;\n-  int negative;\n-  int order;\n-  int partDim;\n-  int window;\n+    int numPartitions;\n \n+    int maxIndex;\n \n-  public InitPartitionParam(int matrixId,\n-                            PartitionKey partKey,\n-                            int numPartitions,\n-                            int maxIndex,\n-                            int maxLength,\n-                            int negative,\n-                            int order,\n-                            int partDim,\n-                            int window) {\n-    super(matrixId, partKey);\n+    int maxLength;\n+\n+    int negative;\n+\n+    int order;\n+\n+    int partDim;\n \n+    int window;\n+\n+    public InitPartitionParam(int matrixId, PartitionKey partKey, int numPartitions, int maxIndex, int maxLength, int negative, int order, int partDim, int window) {\n+    super(matrixId, partKey);\n     this.numPartitions = numPartitions;\n     this.maxIndex = maxIndex;\n     this.maxLength = maxLength;\n@@ -50,14 +46,13 @@ public class InitPartitionParam extends PartitionUpdateParam {\n     this.order = order;\n     this.partDim = partDim;\n     this.window = window;\n-  }\n+    }\n \n-  public InitPartitionParam() {}\n+    public InitPartitionParam() {}\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n-\n     buf.writeInt(numPartitions);\n     buf.writeInt(maxIndex);\n     buf.writeInt(maxLength);\n@@ -65,12 +60,11 @@ public class InitPartitionParam extends PartitionUpdateParam {\n     buf.writeInt(order);\n     buf.writeInt(partDim);\n     buf.writeInt(window);\n-  }\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n-\n     numPartitions = buf.readInt();\n     maxIndex = buf.readInt();\n     maxLength = buf.readInt();\n@@ -78,10 +72,10 @@ public class InitPartitionParam extends PartitionUpdateParam {\n     order = buf.readInt();\n     partDim = buf.readInt();\n     window = buf.readInt();\n-  }\n+    }\n \n-  @Override\n-  public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     return super.bufferLen() + 28;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}