{
    "error_id": "162",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/162/ExtensionElement.java\nindex 3011df63ad..4dcd7f2e10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/162/ExtensionElement.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/162/ExtensionElement.java\nindex 3011df63ad..71cf2fa9fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/162/ExtensionElement.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -24,88 +25,88 @@ import org.apache.commons.lang3.StringUtils;\n \n public class ExtensionElement extends BaseElement {\n \n-  protected String name;\n-  protected String namespacePrefix;\n-  protected String namespace;\n-  protected String elementText;\n-  protected Map<String, List<ExtensionElement>> childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n-\n-  public String getElementText() {\n-    return elementText;\n-  }\n-\n-  public void setElementText(String elementText) {\n-    this.elementText = elementText;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getNamespacePrefix() {\n-    return namespacePrefix;\n-  }\n-\n-  public void setNamespacePrefix(String namespacePrefix) {\n-    this.namespacePrefix = namespacePrefix;\n-  }\n-\n-  public String getNamespace() {\n-    return namespace;\n-  }\n-\n-  public void setNamespace(String namespace) {\n-    this.namespace = namespace;\n-  }\n-\n-  public Map<String, List<ExtensionElement>> getChildElements() {\n-    return childElements;\n-  }\n-\n-  public void addChildElement(ExtensionElement childElement) {\n-    if (childElement != null && StringUtils.isNotEmpty(childElement.getName())) {\n-      List<ExtensionElement> elementList = null;\n-      if (!this.childElements.containsKey(childElement.getName())) {\n-        elementList = new ArrayList<ExtensionElement>();\n-        this.childElements.put(childElement.getName(), elementList);\n-      }\n-      this.childElements.get(childElement.getName()).add(childElement);\n+    protected String name;\n+    protected String namespacePrefix;\n+    protected String namespace;\n+    protected String elementText;\n+    protected Map<String, List<ExtensionElement>> childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n+\n+    public String getElementText() {\n+        return elementText;\n+    }\n+\n+    public void setElementText(String elementText) {\n+        this.elementText = elementText;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getNamespacePrefix() {\n+        return namespacePrefix;\n+    }\n+\n+    public void setNamespacePrefix(String namespacePrefix) {\n+        this.namespacePrefix = namespacePrefix;\n+    }\n+\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    public void setNamespace(String namespace) {\n+        this.namespace = namespace;\n     }\n-  }\n-\n-  public void setChildElements(Map<String, List<ExtensionElement>> childElements) {\n-    this.childElements = childElements;\n-  }\n-\n-  public ExtensionElement clone() {\n-    ExtensionElement clone = new ExtensionElement();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(ExtensionElement otherElement) {\n-    setName(otherElement.getName());\n-    setNamespacePrefix(otherElement.getNamespacePrefix());\n-    setNamespace(otherElement.getNamespace());\n-    setElementText(otherElement.getElementText());\n-    setAttributes(otherElement.getAttributes());\n-\n-    childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n-    if (otherElement.getChildElements() != null && !otherElement.getChildElements().isEmpty()) {\n-      for (String key : otherElement.getChildElements().keySet()) {\n-        List<ExtensionElement> otherElementList = otherElement.getChildElements().get(key);\n-        if (otherElementList != null && !otherElementList.isEmpty()) {\n-          List<ExtensionElement> elementList = new ArrayList<ExtensionElement>();\n-          for (ExtensionElement extensionElement : otherElementList) {\n-            elementList.add(extensionElement.clone());\n-          }\n-          childElements.put(key, elementList);\n+\n+    public Map<String, List<ExtensionElement>> getChildElements() {\n+        return childElements;\n+    }\n+\n+    public void addChildElement(ExtensionElement childElement) {\n+        if (childElement != null && StringUtils.isNotEmpty(childElement.getName())) {\n+            List<ExtensionElement> elementList = null;\n+            if (!this.childElements.containsKey(childElement.getName())) {\n+                elementList = new ArrayList<ExtensionElement>();\n+                this.childElements.put(childElement.getName(), elementList);\n+            }\n+            this.childElements.get(childElement.getName()).add(childElement);\n+        }\n+    }\n+\n+    public void setChildElements(Map<String, List<ExtensionElement>> childElements) {\n+        this.childElements = childElements;\n+    }\n+\n+    public ExtensionElement clone() {\n+        ExtensionElement clone = new ExtensionElement();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(ExtensionElement otherElement) {\n+        setName(otherElement.getName());\n+        setNamespacePrefix(otherElement.getNamespacePrefix());\n+        setNamespace(otherElement.getNamespace());\n+        setElementText(otherElement.getElementText());\n+        setAttributes(otherElement.getAttributes());\n+\n+        childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n+        if (otherElement.getChildElements() != null && !otherElement.getChildElements().isEmpty()) {\n+            for (String key : otherElement.getChildElements().keySet()) {\n+                List<ExtensionElement> otherElementList = otherElement.getChildElements().get(key);\n+                if (otherElementList != null && !otherElementList.isEmpty()) {\n+                    List<ExtensionElement> elementList = new ArrayList<ExtensionElement>();\n+                    for (ExtensionElement extensionElement : otherElementList) {\n+                        elementList.add(extensionElement.clone());\n+                    }\n+                    childElements.put(key, elementList);\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/162/ExtensionElement.java\nindex 3011df63ad..e9b7ebbda9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/162/ExtensionElement.java\n@@ -19,93 +19,91 @@ import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.lang3.StringUtils;\n \n-public class ExtensionElement extends BaseElement {\n \n-  protected String name;\n-  protected String namespacePrefix;\n-  protected String namespace;\n-  protected String elementText;\n-  protected Map<String, List<ExtensionElement>> childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n+public class ExtensionElement extends BaseElement {\n \n-  public String getElementText() {\n+    protected String name;\n+    protected String namespacePrefix;\n+    protected String namespace;\n+    protected String elementText;\n+    protected Map<String, List<ExtensionElement>> childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n+    public String getElementText() {\n     return elementText;\n-  }\n+    }\n \n-  public void setElementText(String elementText) {\n+    public void setElementText(String elementText) {\n     this.elementText = elementText;\n-  }\n+    }\n \n-  public String getName() {\n+    public String getName() {\n     return name;\n-  }\n+    }\n \n-  public void setName(String name) {\n+    public void setName(String name) {\n     this.name = name;\n-  }\n+    }\n \n-  public String getNamespacePrefix() {\n+    public String getNamespacePrefix() {\n     return namespacePrefix;\n-  }\n+    }\n \n-  public void setNamespacePrefix(String namespacePrefix) {\n+    public void setNamespacePrefix(String namespacePrefix) {\n     this.namespacePrefix = namespacePrefix;\n-  }\n+    }\n \n-  public String getNamespace() {\n+    public String getNamespace() {\n     return namespace;\n-  }\n+    }\n \n-  public void setNamespace(String namespace) {\n+    public void setNamespace(String namespace) {\n     this.namespace = namespace;\n-  }\n+    }\n \n-  public Map<String, List<ExtensionElement>> getChildElements() {\n+    public Map<String, List<ExtensionElement>> getChildElements() {\n     return childElements;\n-  }\n+    }\n \n-  public void addChildElement(ExtensionElement childElement) {\n+    public void addChildElement(ExtensionElement childElement) {\n     if (childElement != null && StringUtils.isNotEmpty(childElement.getName())) {\n-      List<ExtensionElement> elementList = null;\n-      if (!this.childElements.containsKey(childElement.getName())) {\n-        elementList = new ArrayList<ExtensionElement>();\n-        this.childElements.put(childElement.getName(), elementList);\n-      }\n-      this.childElements.get(childElement.getName()).add(childElement);\n+        List<ExtensionElement> elementList = null;\n+        if (!this.childElements.containsKey(childElement.getName())) {\n+            elementList = new ArrayList<ExtensionElement>();\n+            this.childElements.put(childElement.getName(), elementList);\n+        }\n+        this.childElements.get(childElement.getName()).add(childElement);\n+    }\n     }\n-  }\n \n-  public void setChildElements(Map<String, List<ExtensionElement>> childElements) {\n+    public void setChildElements(Map<String, List<ExtensionElement>> childElements) {\n     this.childElements = childElements;\n-  }\n+    }\n \n-  public ExtensionElement clone() {\n+    public ExtensionElement clone() {\n     ExtensionElement clone = new ExtensionElement();\n     clone.setValues(this);\n     return clone;\n-  }\n+    }\n \n-  public void setValues(ExtensionElement otherElement) {\n+    public void setValues(ExtensionElement otherElement) {\n     setName(otherElement.getName());\n     setNamespacePrefix(otherElement.getNamespacePrefix());\n     setNamespace(otherElement.getNamespace());\n     setElementText(otherElement.getElementText());\n     setAttributes(otherElement.getAttributes());\n-\n     childElements = new LinkedHashMap<String, List<ExtensionElement>>();\n     if (otherElement.getChildElements() != null && !otherElement.getChildElements().isEmpty()) {\n-      for (String key : otherElement.getChildElements().keySet()) {\n-        List<ExtensionElement> otherElementList = otherElement.getChildElements().get(key);\n-        if (otherElementList != null && !otherElementList.isEmpty()) {\n-          List<ExtensionElement> elementList = new ArrayList<ExtensionElement>();\n-          for (ExtensionElement extensionElement : otherElementList) {\n-            elementList.add(extensionElement.clone());\n-          }\n-          childElements.put(key, elementList);\n+        for (String key : otherElement.getChildElements().keySet()) {\n+            List<ExtensionElement> otherElementList = otherElement.getChildElements().get(key);\n+            if (otherElementList != null && !otherElementList.isEmpty()) {\n+                List<ExtensionElement> elementList = new ArrayList<ExtensionElement>();\n+                for (ExtensionElement extensionElement : otherElementList) {\n+                    elementList.add(extensionElement.clone());\n+                }\n+                childElements.put(key, elementList);\n+            }\n         }\n-      }\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/162/ExtensionElement.java\nindex 3011df63ad..4dcd7f2e10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/162/ExtensionElement.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/162/ExtensionElement.java\nindex 3011df63ad..4dcd7f2e10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/162/ExtensionElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/162/ExtensionElement.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ]
}