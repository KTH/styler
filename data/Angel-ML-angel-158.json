{
    "error_id": "158",
    "information": {
        "errors": [
            {
                "line": "94",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 665).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n      conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n    } catch (Exception x) {\n      LOG.error(\"setup failed \", x);\n      throw x;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 698).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/158/GBDTTest.java\nindex 3c60d8ba7e..ec5fc1c40d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/158/GBDTTest.java\n@@ -90,56 +90,55 @@ public class GBDTTest {\n       conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n       conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-      conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n-          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n-    } catch (Exception x) {\n-      LOG.error(\"setup failed \", x);\n-      throw x;\n-    }\n-  }\n+      conf.set(MLConf.ML_GBDT_CATE_FEAT(), \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n+} catch (Exception x) {\n+  LOG.error(\"setup failed \", x);\n+  throw x;\n+}\n+}\n \n-  @Test\n-  public void testGBDT() throws Exception {\n-    train();\n-    predict();\n-  }\n+@Test\n+public void testGBDT() throws Exception {\n+  train();\n+  predict();\n+}\n \n-  private void train() throws Exception {\n-    try {\n-      // Submit GBDT Train Task\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      GBDTRunner runner = new GBDTRunner();\n-      runner.train(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run train failed \", x);\n-      throw x;\n-    }\n+private void train() throws Exception {\n+  try {\n+    // Submit GBDT Train Task\n+    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n+    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+    GBDTRunner runner = new GBDTRunner();\n+    runner.train(conf);\n+\n+    AngelClient angelClient = AngelClientFactory.get(conf);\n+    angelClient.stop();\n+  } catch (Exception x) {\n+    LOG.error(\"run train failed \", x);\n+    throw x;\n   }\n+}\n \n-  private void predict() throws Exception {\n-    try {\n-      // Load Model from HDFS.\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n+private void predict() throws Exception {\n+  try {\n+    // Load Model from HDFS.\n+    conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n+    conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+    conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n+    conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n \n-      conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n-      conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n+    conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n+    conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n \n-      GBDTRunner runner = new GBDTRunner();\n+    GBDTRunner runner = new GBDTRunner();\n \n-      runner.predict(conf);\n+    runner.predict(conf);\n \n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run predict failed \", x);\n-      throw x;\n-    }\n+    AngelClient angelClient = AngelClientFactory.get(conf);\n+    angelClient.stop();\n+  } catch (Exception x) {\n+    LOG.error(\"run predict failed \", x);\n+    throw x;\n   }\n }\n+}\n",
            "diff_size": 45
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 675).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/158/GBDTTest.java\nindex 3c60d8ba7e..fa4713e872 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/158/GBDTTest.java\n@@ -33,113 +33,114 @@ import org.junit.Test;\n \n public class GBDTTest {\n \n-  private static final Log LOG = LogFactory.getLog(GBDTTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private static final String trainInputPath = \"./src/test/data/gbdt/agaricus.txt.train\";\n-  private static final String testInputPath = \"./src/test/data/gbdt/agaricus.txt.test\";\n-  private Configuration conf = new Configuration();\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @Before public void setup() throws Exception {\n-    try {\n-      // Feature number of train data\n-      int featureNum = 127;\n-      // Number of nonzero features\n-      int featureNzz = 25;\n-      // Tree number\n-      int treeNum = 5;\n-      // Tree depth\n-      int treeDepth = 3;\n-      // Split number\n-      int splitNum = 10;\n-      // Feature sample ratio\n-      double sampleRatio = 1.0;\n-\n-      // Data format\n-      String dataFmt = \"libsvm\";\n-\n-      // Learning rate\n-      double learnRate = 0.01;\n-\n-      // Set basic configuration keys\n-      conf.setBoolean(\"mapred.mapper.new-api\", true);\n-      conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-\n-      // Use local deploy mode and dummy data spliter\n-      conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-\n-      // set input, output path\n-      conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-      conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/LOG/log\");\n-\n-      //set angel resource parameters #worker, #task, #PS\n-      conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-      conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-      conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-\n-      // Set GBDT algorithm parameters\n-      conf.set(MLConf.ML_DATA_FORMAT(), dataFmt);\n-      conf.set(MLConf.ML_FEATURE_NUM(), String.valueOf(featureNum));\n-      conf.set(MLConf.ML_FEATURE_NNZ(), String.valueOf(featureNzz));\n-      conf.set(MLConf.ML_GBDT_TREE_NUM(), String.valueOf(treeNum));\n-      conf.set(MLConf.ML_GBDT_TREE_DEPTH(), String.valueOf(treeDepth));\n-      conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n-      conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n-      conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-      conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n-          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n-    } catch (Exception x) {\n-      LOG.error(\"setup failed \", x);\n-      throw x;\n+    private static final Log LOG = LogFactory.getLog(GBDTTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private static final String trainInputPath = \"./src/test/data/gbdt/agaricus.txt.train\";\n+    private static final String testInputPath = \"./src/test/data/gbdt/agaricus.txt.test\";\n+    private Configuration conf = new Configuration();\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n     }\n-  }\n-\n-  @Test\n-  public void testGBDT() throws Exception {\n-    train();\n-    predict();\n-  }\n-\n-  private void train() throws Exception {\n-    try {\n-      // Submit GBDT Train Task\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      GBDTRunner runner = new GBDTRunner();\n-      runner.train(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run train failed \", x);\n-      throw x;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        try {\n+            // Feature number of train data\n+            int featureNum = 127;\n+            // Number of nonzero features\n+            int featureNzz = 25;\n+            // Tree number\n+            int treeNum = 5;\n+            // Tree depth\n+            int treeDepth = 3;\n+            // Split number\n+            int splitNum = 10;\n+            // Feature sample ratio\n+            double sampleRatio = 1.0;\n+\n+            // Data format\n+            String dataFmt = \"libsvm\";\n+\n+            // Learning rate\n+            double learnRate = 0.01;\n+\n+            // Set basic configuration keys\n+            conf.setBoolean(\"mapred.mapper.new-api\", true);\n+            conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+\n+            // Use local deploy mode and dummy data spliter\n+            conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+\n+            // set input, output path\n+            conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+            conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/LOG/log\");\n+\n+            //set angel resource parameters #worker, #task, #PS\n+            conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+            conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+            conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+\n+            // Set GBDT algorithm parameters\n+            conf.set(MLConf.ML_DATA_FORMAT(), dataFmt);\n+            conf.set(MLConf.ML_FEATURE_NUM(), String.valueOf(featureNum));\n+            conf.set(MLConf.ML_FEATURE_NNZ(), String.valueOf(featureNzz));\n+            conf.set(MLConf.ML_GBDT_TREE_NUM(), String.valueOf(treeNum));\n+            conf.set(MLConf.ML_GBDT_TREE_DEPTH(), String.valueOf(treeDepth));\n+            conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n+            conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n+            conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n+            conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n+                    \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n+        } catch (Exception x) {\n+            LOG.error(\"setup failed \", x);\n+            throw x;\n+        }\n+    }\n+\n+    @Test\n+    public void testGBDT() throws Exception {\n+        train();\n+        predict();\n+    }\n+\n+    private void train() throws Exception {\n+        try {\n+            // Submit GBDT Train Task\n+            conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n+            conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+            GBDTRunner runner = new GBDTRunner();\n+            runner.train(conf);\n+\n+            AngelClient angelClient = AngelClientFactory.get(conf);\n+            angelClient.stop();\n+        } catch (Exception x) {\n+            LOG.error(\"run train failed \", x);\n+            throw x;\n+        }\n     }\n-  }\n \n-  private void predict() throws Exception {\n-    try {\n-      // Load Model from HDFS.\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n+    private void predict() throws Exception {\n+        try {\n+            // Load Model from HDFS.\n+            conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n+            conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+            conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n+            conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n \n-      conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n-      conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n+            conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n+            conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n \n-      GBDTRunner runner = new GBDTRunner();\n+            GBDTRunner runner = new GBDTRunner();\n \n-      runner.predict(conf);\n+            runner.predict(conf);\n \n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run predict failed \", x);\n-      throw x;\n+            AngelClient angelClient = AngelClientFactory.get(conf);\n+            angelClient.stop();\n+        } catch (Exception x) {\n+            LOG.error(\"run predict failed \", x);\n+            throw x;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 665).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/158/GBDTTest.java\nindex 3c60d8ba7e..de57d12824 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/158/GBDTTest.java\n@@ -44,7 +44,8 @@ public class GBDTTest {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n   }\n \n-  @Before public void setup() throws Exception {\n+  @Before\n+public void setup() throws Exception {\n     try {\n       // Feature number of train data\n       int featureNum = 127;\n@@ -92,7 +93,7 @@ public class GBDTTest {\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n       conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n           \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n-    } catch (Exception x) {\n+  } catch (Exception x) {\n       LOG.error(\"setup failed \", x);\n       throw x;\n     }\n@@ -142,4 +143,4 @@ public class GBDTTest {\n       throw x;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 50.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 52.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 56.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 58.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 60.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 63.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 69.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 76.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 85.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 700).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 124.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/158/GBDTTest.java\nindex 3c60d8ba7e..9900a92723 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/158/GBDTTest.java\n@@ -32,114 +32,109 @@ import org.junit.Before;\n import org.junit.Test;\n \n public class GBDTTest {\n-\n-  private static final Log LOG = LogFactory.getLog(GBDTTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private static final String trainInputPath = \"./src/test/data/gbdt/agaricus.txt.train\";\n-  private static final String testInputPath = \"./src/test/data/gbdt/agaricus.txt.test\";\n-  private Configuration conf = new Configuration();\n-\n-  static {\n+    private static final Log LOG = LogFactory.getLog(GBDTTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private static final String trainInputPath = \"./src/test/data/gbdt/agaricus.txt.train\";\n+    private static final String testInputPath = \"./src/test/data/gbdt/agaricus.txt.test\";\n+    private Configuration conf = new Configuration();\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @Before public void setup() throws Exception {\n+    @Before\n+    public void setup() throws Exception {\n     try {\n       // Feature number of train data\n-      int featureNum = 127;\n+        int featureNum = 127;\n       // Number of nonzero features\n-      int featureNzz = 25;\n+        int featureNzz = 25;\n       // Tree number\n-      int treeNum = 5;\n+        int treeNum = 5;\n       // Tree depth\n-      int treeDepth = 3;\n+        int treeDepth = 3;\n       // Split number\n-      int splitNum = 10;\n+        int splitNum = 10;\n       // Feature sample ratio\n-      double sampleRatio = 1.0;\n+        double sampleRatio = 1.0;\n \n       // Data format\n-      String dataFmt = \"libsvm\";\n+        String dataFmt = \"libsvm\";\n \n       // Learning rate\n-      double learnRate = 0.01;\n+        double learnRate = 0.01;\n \n       // Set basic configuration keys\n-      conf.setBoolean(\"mapred.mapper.new-api\", true);\n-      conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n \n       // Use local deploy mode and dummy data spliter\n-      conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n \n       // set input, output path\n-      conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-      conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/LOG/log\");\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/LOG/log\");\n \n       //set angel resource parameters #worker, #task, #PS\n-      conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-      conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-      conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n \n       // Set GBDT algorithm parameters\n-      conf.set(MLConf.ML_DATA_FORMAT(), dataFmt);\n-      conf.set(MLConf.ML_FEATURE_NUM(), String.valueOf(featureNum));\n-      conf.set(MLConf.ML_FEATURE_NNZ(), String.valueOf(featureNzz));\n-      conf.set(MLConf.ML_GBDT_TREE_NUM(), String.valueOf(treeNum));\n-      conf.set(MLConf.ML_GBDT_TREE_DEPTH(), String.valueOf(treeDepth));\n-      conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n-      conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n-      conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-      conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n-          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n+        conf.set(MLConf.ML_DATA_FORMAT(), dataFmt);\n+        conf.set(MLConf.ML_FEATURE_NUM(), String.valueOf(featureNum));\n+        conf.set(MLConf.ML_FEATURE_NNZ(), String.valueOf(featureNzz));\n+        conf.set(MLConf.ML_GBDT_TREE_NUM(), String.valueOf(treeNum));\n+        conf.set(MLConf.ML_GBDT_TREE_DEPTH(), String.valueOf(treeDepth));\n+        conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n+        conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n+        conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n+        conf.set(MLConf.ML_GBDT_CATE_FEAT(), \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n     } catch (Exception x) {\n       LOG.error(\"setup failed \", x);\n       throw x;\n     }\n-  }\n+    }\n \n-  @Test\n-  public void testGBDT() throws Exception {\n+    @Test\n+    public void testGBDT() throws Exception {\n     train();\n     predict();\n-  }\n+    }\n \n-  private void train() throws Exception {\n+    private void train() throws Exception {\n     try {\n       // Submit GBDT Train Task\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      GBDTRunner runner = new GBDTRunner();\n-      runner.train(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n+        conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n+        conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+        GBDTRunner runner = new GBDTRunner();\n+        runner.train(conf);\n+        AngelClient angelClient = AngelClientFactory.get(conf);\n+        angelClient.stop();\n     } catch (Exception x) {\n       LOG.error(\"run train failed \", x);\n       throw x;\n     }\n-  }\n+    }\n \n-  private void predict() throws Exception {\n+    private void predict() throws Exception {\n     try {\n       // Load Model from HDFS.\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n-\n-      conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n-      conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n-\n-      GBDTRunner runner = new GBDTRunner();\n-\n-      runner.predict(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n+        conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n+        conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+        conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n+        conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n+        conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n+        conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n+        GBDTRunner runner = new GBDTRunner();\n+        runner.predict(conf);\n+        AngelClient angelClient = AngelClientFactory.get(conf);\n+        angelClient.stop();\n     } catch (Exception x) {\n       LOG.error(\"run predict failed \", x);\n       throw x;\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 684).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/158/GBDTTest.java\nindex 3c60d8ba7e..205de042a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/158/GBDTTest.java\n@@ -91,55 +91,55 @@ public class GBDTTest {\n       conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n       conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n-          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n-    } catch (Exception x) {\n-      LOG.error(\"setup failed \", x);\n-      throw x;\n-    }\n-  }\n-\n-  @Test\n-  public void testGBDT() throws Exception {\n-    train();\n-    predict();\n-  }\n-\n-  private void train() throws Exception {\n-    try {\n-      // Submit GBDT Train Task\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      GBDTRunner runner = new GBDTRunner();\n-      runner.train(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run train failed \", x);\n-      throw x;\n-    }\n-  }\n-\n-  private void predict() throws Exception {\n-    try {\n-      // Load Model from HDFS.\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n-\n-      conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n-      conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n-\n-      GBDTRunner runner = new GBDTRunner();\n-\n-      runner.predict(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run predict failed \", x);\n-      throw x;\n-    }\n-  }\n-}\n+      \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");} catch (Exception x) {\n+            LOG.error(\"setup failed \", x);\n+            throw x;\n+          }\n+        }\n+\n+        @Test\n+        public void testGBDT() throws Exception {\n+          train();\n+          predict();\n+        }\n+\n+        private void train() throws Exception {\n+          try {\n+            // Submit GBDT Train Task\n+            conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n+            conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+            GBDTRunner runner = new GBDTRunner();\n+            runner.train(conf);\n+\n+            AngelClient angelClient = AngelClientFactory.get(conf);\n+            angelClient.stop();\n+          } catch (Exception x) {\n+            LOG.error(\"run train failed \", x);\n+            throw x;\n+          }\n+        }\n+\n+        private void predict() throws Exception {\n+          try {\n+            // Load Model from HDFS.\n+            conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n+            conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+            conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n+            conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n+\n+            conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n+            conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n+\n+            GBDTRunner runner = new GBDTRunner();\n+\n+            runner.predict(conf);\n+\n+            AngelClient angelClient = AngelClientFactory.get(conf);\n+            angelClient.stop();\n+          } catch (Exception x) {\n+            LOG.error(\"run predict failed \", x);\n+            throw x;\n+          }\n+        }\n+      }\n+      \n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 698).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/158/GBDTTest.java\nindex 3c60d8ba7e..ec5fc1c40d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/158/GBDTTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/158/GBDTTest.java\n@@ -90,56 +90,55 @@ public class GBDTTest {\n       conf.set(MLConf.ML_GBDT_SPLIT_NUM(), String.valueOf(splitNum));\n       conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-      conf.set(MLConf.ML_GBDT_CATE_FEAT(),\n-          \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n-    } catch (Exception x) {\n-      LOG.error(\"setup failed \", x);\n-      throw x;\n-    }\n-  }\n+      conf.set(MLConf.ML_GBDT_CATE_FEAT(), \"0:2,1:2,2:2,3:2,4:2,5:2,6:2,7:2,8:2,9:2,10:2,11:2,12:2,13:2,14:2,15:2,16:2,17:2,18:2,19:2,20:2,21:2,22:2,23:2,24:2,25:2,26:2,27:2,28:2,29:2,30:2,31:2,32:2,33:2,34:2,35:2,36:2,37:2,38:2,39:2,40:2,41:2,42:2,43:2,44:2,45:2,46:2,47:2,48:2,49:2,50:2,51:2,52:2,53:2,54:2,55:2,56:2,57:2,58:2,59:2,60:2,61:2,62:2,63:2,64:2,65:2,66:2,67:2,68:2,69:2,70:2,71:2,72:2,73:2,74:2,75:2,76:2,77:2,78:2,79:2,80:2,81:2,82:2,83:2,84:2,85:2,86:2,87:2,88:2,89:2,90:2,91:2,92:2,93:2,94:2,95:2,96:2,97:2,98:2,99:2,100:2,101:2,102:2,103:2,104:2,105:2,106:2,107:2,108:2,109:2,110:2,111:2,112:2,113:2,114:2,115:2,116:2,117:2,118:2,119:2,120:2,121:2,122:2,123:2,124:2,125:2,126:2\");\n+} catch (Exception x) {\n+  LOG.error(\"setup failed \", x);\n+  throw x;\n+}\n+}\n \n-  @Test\n-  public void testGBDT() throws Exception {\n-    train();\n-    predict();\n-  }\n+@Test\n+public void testGBDT() throws Exception {\n+  train();\n+  predict();\n+}\n \n-  private void train() throws Exception {\n-    try {\n-      // Submit GBDT Train Task\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      GBDTRunner runner = new GBDTRunner();\n-      runner.train(conf);\n-\n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run train failed \", x);\n-      throw x;\n-    }\n+private void train() throws Exception {\n+  try {\n+    // Submit GBDT Train Task\n+    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInputPath);\n+    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+    GBDTRunner runner = new GBDTRunner();\n+    runner.train(conf);\n+\n+    AngelClient angelClient = AngelClientFactory.get(conf);\n+    angelClient.stop();\n+  } catch (Exception x) {\n+    LOG.error(\"run train failed \", x);\n+    throw x;\n   }\n+}\n \n-  private void predict() throws Exception {\n-    try {\n-      // Load Model from HDFS.\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n+private void predict() throws Exception {\n+  try {\n+    // Load Model from HDFS.\n+    conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, testInputPath);\n+    conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model\");\n+    conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict\");\n+    conf.set(AngelConf.ANGEL_ACTION_TYPE, MLConf.ANGEL_ML_PREDICT());\n \n-      conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n-      conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n+    conf.set(\"gbdt.split.feature\", TMP_PATH + \"/out/xxx\");\n+    conf.set(\"gbdt.split.value\", TMP_PATH + \"/out/xxx\");\n \n-      GBDTRunner runner = new GBDTRunner();\n+    GBDTRunner runner = new GBDTRunner();\n \n-      runner.predict(conf);\n+    runner.predict(conf);\n \n-      AngelClient angelClient = AngelClientFactory.get(conf);\n-      angelClient.stop();\n-    } catch (Exception x) {\n-      LOG.error(\"run predict failed \", x);\n-      throw x;\n-    }\n+    AngelClient angelClient = AngelClientFactory.get(conf);\n+    angelClient.stop();\n+  } catch (Exception x) {\n+    LOG.error(\"run predict failed \", x);\n+    throw x;\n   }\n }\n+}\n",
            "diff_size": 45
        }
    ]
}