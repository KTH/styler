{
    "error_id": "424",
    "information": {
        "errors": [
            {
                "line": "130",
                "column": "55",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n      for (Parameter parameter : operation.getParameters()) {\n        if (BodyParameter.class.isInstance(parameter) &&\n            ((BodyParameter) parameter).getSchema() == null) {\n          throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/424/SwaggerUtils.java\nindex babe0dd6a0..96ae9b43c2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/424/SwaggerUtils.java\n@@ -127,292 +127,291 @@ public final class SwaggerUtils {\n       }\n \n       for (Parameter parameter : operation.getParameters()) {\n-        if (BodyParameter.class.isInstance(parameter) &&\n-            ((BodyParameter) parameter).getSchema() == null) {\n-          throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n-        }\n-      }\n+        if (BodyParameter.class.isInstance(parameter) && ((BodyParameter) parameter).getSchema() == null) {\n+      throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n     }\n   }\n+}\n+}\n \n-  private static Swagger internalParseSwagger(String swaggerContent) throws IOException {\n-    Swagger swagger = Yaml.mapper().readValue(swaggerContent, Swagger.class);\n-    correctResponses(swagger);\n-    return swagger;\n-  }\n-\n-  public static void correctResponses(Operation operation) {\n-    int okCode = Status.OK.getStatusCode();\n-    String strOkCode = String.valueOf(okCode);\n-    Response okResponse = null;\n-\n-    for (Entry<String, Response> responseEntry : operation.getResponses().entrySet()) {\n-      Response response = responseEntry.getValue();\n-      if (StringUtils.isEmpty(response.getDescription())) {\n-        response.setDescription(\"response of \" + responseEntry.getKey());\n-      }\n+private static Swagger internalParseSwagger(String swaggerContent) throws IOException {\n+  Swagger swagger = Yaml.mapper().readValue(swaggerContent, Swagger.class);\n+  correctResponses(swagger);\n+  return swagger;\n+}\n \n-      if (operation.getResponses().get(strOkCode) != null) {\n-        continue;\n-      }\n+public static void correctResponses(Operation operation) {\n+  int okCode = Status.OK.getStatusCode();\n+  String strOkCode = String.valueOf(okCode);\n+  Response okResponse = null;\n \n-      int statusCode = NumberUtils.toInt(responseEntry.getKey());\n-      if (\"default\".equals(responseEntry.getKey())) {\n-        statusCode = okCode;\n-      }\n-      if (Family.SUCCESSFUL.equals(Family.familyOf(statusCode))) {\n-        okResponse = response;\n-      }\n+  for (Entry<String, Response> responseEntry : operation.getResponses().entrySet()) {\n+    Response response = responseEntry.getValue();\n+    if (StringUtils.isEmpty(response.getDescription())) {\n+      response.setDescription(\"response of \" + responseEntry.getKey());\n     }\n \n-    if (okResponse != null) {\n-      operation.addResponse(strOkCode, okResponse);\n+    if (operation.getResponses().get(strOkCode) != null) {\n+      continue;\n     }\n-  }\n \n-  public static void correctResponses(Swagger swagger) {\n-    if (swagger.getPaths() == null) {\n-      return;\n+    int statusCode = NumberUtils.toInt(responseEntry.getKey());\n+    if (\"default\".equals(responseEntry.getKey())) {\n+      statusCode = okCode;\n     }\n-\n-    for (Path path : swagger.getPaths().values()) {\n-      for (Operation operation : path.getOperations()) {\n-        correctResponses(operation);\n-      }\n+    if (Family.SUCCESSFUL.equals(Family.familyOf(statusCode))) {\n+      okResponse = response;\n     }\n   }\n \n-  public static Map<String, Property> getBodyProperties(Swagger swagger, Parameter parameter) {\n-    if (!(parameter instanceof BodyParameter)) {\n-      return null;\n-    }\n+  if (okResponse != null) {\n+    operation.addResponse(strOkCode, okResponse);\n+  }\n+}\n \n-    Model model = ((BodyParameter) parameter).getSchema();\n-    if (model instanceof RefModel) {\n-      model = swagger.getDefinitions().get(((RefModel) model).getSimpleRef());\n-    }\n+public static void correctResponses(Swagger swagger) {\n+  if (swagger.getPaths() == null) {\n+    return;\n+  }\n \n-    if (model instanceof ModelImpl) {\n-      return model.getProperties();\n+  for (Path path : swagger.getPaths().values()) {\n+    for (Operation operation : path.getOperations()) {\n+      correctResponses(operation);\n     }\n+  }\n+}\n \n+public static Map<String, Property> getBodyProperties(Swagger swagger, Parameter parameter) {\n+  if (!(parameter instanceof BodyParameter)) {\n     return null;\n   }\n \n-  public static void addDefinitions(Swagger swagger, Type paramType) {\n-    Map<String, Model> models = ModelConverters.getInstance().readAll(paramType);\n-    for (Entry<String, Model> entry : models.entrySet()) {\n-      swagger.addDefinition(entry.getKey(), entry.getValue());\n-    }\n+  Model model = ((BodyParameter) parameter).getSchema();\n+  if (model instanceof RefModel) {\n+    model = swagger.getDefinitions().get(((RefModel) model).getSimpleRef());\n   }\n \n-  public static void setParameterType(Swagger swagger, Type type, AbstractSerializableParameter<?> parameter) {\n-    addDefinitions(swagger, type);\n-    Property property = ModelConverters.getInstance().readAsProperty(type);\n-\n-    if (isComplexProperty(property)) {\n-      // cannot set a simple parameter(header, query, etc.) as complex type\n-      String msg = String\n-          .format(\"not allow complex type for %s parameter, type=%s.\", parameter.getIn(), type.getTypeName());\n-      throw new IllegalStateException(msg);\n-    }\n-    parameter.setProperty(property);\n+  if (model instanceof ModelImpl) {\n+    return model.getProperties();\n   }\n \n-  public static boolean isBean(Model model) {\n-    return isBean(new PropertyModelConverter().modelToProperty(model));\n+  return null;\n+}\n+\n+public static void addDefinitions(Swagger swagger, Type paramType) {\n+  Map<String, Model> models = ModelConverters.getInstance().readAll(paramType);\n+  for (Entry<String, Model> entry : models.entrySet()) {\n+    swagger.addDefinition(entry.getKey(), entry.getValue());\n   }\n+}\n \n-  public static boolean isBean(Property property) {\n-    return property instanceof RefProperty || property instanceof ObjectProperty;\n+public static void setParameterType(Swagger swagger, Type type, AbstractSerializableParameter<?> parameter) {\n+  addDefinitions(swagger, type);\n+  Property property = ModelConverters.getInstance().readAsProperty(type);\n+\n+  if (isComplexProperty(property)) {\n+    // cannot set a simple parameter(header, query, etc.) as complex type\n+    String msg = String\n+        .format(\"not allow complex type for %s parameter, type=%s.\", parameter.getIn(), type.getTypeName());\n+    throw new IllegalStateException(msg);\n   }\n+  parameter.setProperty(property);\n+}\n \n-  public static boolean isComplexProperty(Property property) {\n-    if (property instanceof RefProperty || property instanceof ObjectProperty || property instanceof MapProperty) {\n-      return true;\n-    }\n+public static boolean isBean(Model model) {\n+  return isBean(new PropertyModelConverter().modelToProperty(model));\n+}\n \n-    if (ArrayProperty.class.isInstance(property)) {\n-      return isComplexProperty(((ArrayProperty) property).getItems());\n-    }\n+public static boolean isBean(Property property) {\n+  return property instanceof RefProperty || property instanceof ObjectProperty;\n+}\n \n-    return false;\n+public static boolean isComplexProperty(Property property) {\n+  if (property instanceof RefProperty || property instanceof ObjectProperty || property instanceof MapProperty) {\n+    return true;\n   }\n \n-  public static ModelImpl getModelImpl(Swagger swagger, BodyParameter bodyParameter) {\n-    Model model = bodyParameter.getSchema();\n-    if (model instanceof ModelImpl) {\n-      return (ModelImpl) model;\n-    }\n+  if (ArrayProperty.class.isInstance(property)) {\n+    return isComplexProperty(((ArrayProperty) property).getItems());\n+  }\n \n-    if (!(model instanceof RefModel)) {\n-      return null;\n-    }\n+  return false;\n+}\n \n-    String simpleRef = ((RefModel) model).getSimpleRef();\n-    Model targetModel = swagger.getDefinitions().get(simpleRef);\n-    return targetModel instanceof ModelImpl ? (ModelImpl) targetModel : null;\n+public static ModelImpl getModelImpl(Swagger swagger, BodyParameter bodyParameter) {\n+  Model model = bodyParameter.getSchema();\n+  if (model instanceof ModelImpl) {\n+    return (ModelImpl) model;\n   }\n \n-  public static void setCommaConsumes(Swagger swagger, String commaConsumes) {\n-    if (StringUtils.isEmpty(commaConsumes)) {\n-      return;\n-    }\n+  if (!(model instanceof RefModel)) {\n+    return null;\n+  }\n \n-    setConsumes(swagger, commaConsumes.split(\",\"));\n+  String simpleRef = ((RefModel) model).getSimpleRef();\n+  Model targetModel = swagger.getDefinitions().get(simpleRef);\n+  return targetModel instanceof ModelImpl ? (ModelImpl) targetModel : null;\n+}\n+\n+public static void setCommaConsumes(Swagger swagger, String commaConsumes) {\n+  if (StringUtils.isEmpty(commaConsumes)) {\n+    return;\n   }\n \n-  public static void setCommaConsumes(Operation operation, String commaConsumes) {\n-    if (StringUtils.isEmpty(commaConsumes)) {\n-      return;\n-    }\n+  setConsumes(swagger, commaConsumes.split(\",\"));\n+}\n \n-    setConsumes(operation, commaConsumes.split(\",\"));\n+public static void setCommaConsumes(Operation operation, String commaConsumes) {\n+  if (StringUtils.isEmpty(commaConsumes)) {\n+    return;\n   }\n \n-  public static void setConsumes(Operation operation, String... consumes) {\n-    List<String> consumeList = convertConsumesOrProduces(consumes);\n-    if (!consumeList.isEmpty()) {\n-      operation.setConsumes(consumeList);\n-    }\n+  setConsumes(operation, commaConsumes.split(\",\"));\n+}\n+\n+public static void setConsumes(Operation operation, String... consumes) {\n+  List<String> consumeList = convertConsumesOrProduces(consumes);\n+  if (!consumeList.isEmpty()) {\n+    operation.setConsumes(consumeList);\n   }\n+}\n \n-  public static void setConsumes(Swagger swagger, String... consumes) {\n-    List<String> consumeList = convertConsumesOrProduces(consumes);\n-    if (!consumeList.isEmpty()) {\n-      swagger.setConsumes(consumeList);\n-    }\n+public static void setConsumes(Swagger swagger, String... consumes) {\n+  List<String> consumeList = convertConsumesOrProduces(consumes);\n+  if (!consumeList.isEmpty()) {\n+    swagger.setConsumes(consumeList);\n   }\n+}\n+\n+public static List<String> convertConsumesOrProduces(String... consumesOrProduces) {\n+  return Arrays.stream(consumesOrProduces)\n+      .map(String::trim)\n+      .filter(StringUtils::isNotEmpty)\n+      .collect(Collectors.toList());\n+}\n \n-  public static List<String> convertConsumesOrProduces(String... consumesOrProduces) {\n-    return Arrays.stream(consumesOrProduces)\n-        .map(String::trim)\n-        .filter(StringUtils::isNotEmpty)\n-        .collect(Collectors.toList());\n+public static void setCommaProduces(Swagger swagger, String commaProduces) {\n+  if (StringUtils.isEmpty(commaProduces)) {\n+    return;\n   }\n \n-  public static void setCommaProduces(Swagger swagger, String commaProduces) {\n-    if (StringUtils.isEmpty(commaProduces)) {\n-      return;\n-    }\n+  setProduces(swagger, commaProduces.split(\",\"));\n+}\n \n-    setProduces(swagger, commaProduces.split(\",\"));\n+public static void setCommaProduces(Operation operation, String commaProduces) {\n+  if (StringUtils.isEmpty(commaProduces)) {\n+    return;\n   }\n \n-  public static void setCommaProduces(Operation operation, String commaProduces) {\n-    if (StringUtils.isEmpty(commaProduces)) {\n-      return;\n-    }\n+  setProduces(operation, commaProduces.split(\",\"));\n+}\n \n-    setProduces(operation, commaProduces.split(\",\"));\n+public static void setProduces(Operation operation, String... produces) {\n+  List<String> produceList = convertConsumesOrProduces(produces);\n+  if (!produceList.isEmpty()) {\n+    operation.setProduces(produceList);\n   }\n+}\n \n-  public static void setProduces(Operation operation, String... produces) {\n-    List<String> produceList = convertConsumesOrProduces(produces);\n-    if (!produceList.isEmpty()) {\n-      operation.setProduces(produceList);\n-    }\n+public static void setProduces(Swagger swagger, String... produces) {\n+  List<String> produceList = convertConsumesOrProduces(produces);\n+  if (!produceList.isEmpty()) {\n+    swagger.setProduces(produceList);\n   }\n+}\n \n-  public static void setProduces(Swagger swagger, String... produces) {\n-    List<String> produceList = convertConsumesOrProduces(produces);\n-    if (!produceList.isEmpty()) {\n-      swagger.setProduces(produceList);\n-    }\n+public static boolean hasAnnotation(Class<?> cls, Class<? extends Annotation> annotation) {\n+  if (cls.getAnnotation(annotation) != null) {\n+    return true;\n   }\n \n-  public static boolean hasAnnotation(Class<?> cls, Class<? extends Annotation> annotation) {\n-    if (cls.getAnnotation(annotation) != null) {\n+  for (Method method : cls.getMethods()) {\n+    if (method.getAnnotation(annotation) != null) {\n       return true;\n     }\n+  }\n \n-    for (Method method : cls.getMethods()) {\n-      if (method.getAnnotation(annotation) != null) {\n-        return true;\n-      }\n-    }\n+  return false;\n+}\n \n-    return false;\n+public static boolean isRawJsonType(Parameter param) {\n+  Object rawJson = param.getVendorExtensions().get(SwaggerConst.EXT_RAW_JSON_TYPE);\n+  if (rawJson instanceof Boolean) {\n+    return (boolean) rawJson;\n   }\n+  return false;\n+}\n \n-  public static boolean isRawJsonType(Parameter param) {\n-    Object rawJson = param.getVendorExtensions().get(SwaggerConst.EXT_RAW_JSON_TYPE);\n-    if (rawJson instanceof Boolean) {\n-      return (boolean) rawJson;\n-    }\n-    return false;\n+public static Class<?> getInterface(Swagger swagger) {\n+  Info info = swagger.getInfo();\n+  if (info == null) {\n+    return null;\n   }\n \n-  public static Class<?> getInterface(Swagger swagger) {\n-    Info info = swagger.getInfo();\n-    if (info == null) {\n-      return null;\n-    }\n-\n-    String name = getInterfaceName(info.getVendorExtensions());\n-    if (StringUtils.isEmpty(name)) {\n-      return null;\n-    }\n-\n-    return ReflectUtils.getClassByName(name);\n+  String name = getInterfaceName(info.getVendorExtensions());\n+  if (StringUtils.isEmpty(name)) {\n+    return null;\n   }\n \n-  public static String getClassName(Map<String, Object> vendorExtensions) {\n-    return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_CLASS);\n-  }\n+  return ReflectUtils.getClassByName(name);\n+}\n \n-  public static String getInterfaceName(Map<String, Object> vendorExtensions) {\n-    return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_INTF);\n-  }\n+public static String getClassName(Map<String, Object> vendorExtensions) {\n+  return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_CLASS);\n+}\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static <T> T getVendorExtension(Map<String, Object> vendorExtensions, String key) {\n-    if (vendorExtensions == null) {\n-      return null;\n-    }\n+public static String getInterfaceName(Map<String, Object> vendorExtensions) {\n+  return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_INTF);\n+}\n \n-    return (T) vendorExtensions.get(key);\n+@SuppressWarnings(\"unchecked\")\n+public static <T> T getVendorExtension(Map<String, Object> vendorExtensions, String key) {\n+  if (vendorExtensions == null) {\n+    return null;\n   }\n \n-  public static boolean isBean(Type type) {\n-    if (type == null) {\n-      return false;\n-    }\n+  return (T) vendorExtensions.get(key);\n+}\n \n-    JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n-    if (javaType.isContainerType() || javaType.isEnumType()) {\n-      return false;\n-    }\n+public static boolean isBean(Type type) {\n+  if (type == null) {\n+    return false;\n+  }\n \n-    Class<?> cls = javaType.getRawClass();\n-    if (ClassUtils.isPrimitiveOrWrapper(cls)) {\n-      return false;\n-    }\n+  JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n+  if (javaType.isContainerType() || javaType.isEnumType()) {\n+    return false;\n+  }\n \n-    return (cls != String.class\n-        && cls != Date.class\n-        && cls != LocalDate.class\n-        && cls != byte[].class\n-        && cls != File.class\n-        && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n-        && !Part.class.isAssignableFrom(cls));\n+  Class<?> cls = javaType.getRawClass();\n+  if (ClassUtils.isPrimitiveOrWrapper(cls)) {\n+    return false;\n   }\n \n-  public static boolean isFileParameter(Parameter parameter) {\n-    if (!(parameter instanceof FormParameter)) {\n-      return false;\n-    }\n+  return (cls != String.class\n+      && cls != Date.class\n+      && cls != LocalDate.class\n+      && cls != byte[].class\n+      && cls != File.class\n+      && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n+      && !Part.class.isAssignableFrom(cls));\n+}\n \n-    FormParameter formParameter = (FormParameter) parameter;\n-    if (FileProperty.isType(formParameter.getType(), formParameter.getFormat())) {\n-      return true;\n-    }\n+public static boolean isFileParameter(Parameter parameter) {\n+  if (!(parameter instanceof FormParameter)) {\n+    return false;\n+  }\n \n-    Property property = formParameter.getItems();\n-    if (!ArrayProperty.isType(formParameter.getType()) || property == null) {\n-      return false;\n-    }\n+  FormParameter formParameter = (FormParameter) parameter;\n+  if (FileProperty.isType(formParameter.getType(), formParameter.getFormat())) {\n+    return true;\n+  }\n \n-    return FileProperty.isType(property.getType(), property.getFormat());\n+  Property property = formParameter.getItems();\n+  if (!ArrayProperty.isType(formParameter.getType()) || property == null) {\n+    return false;\n   }\n+\n+  return FileProperty.isType(property.getType(), property.getFormat());\n+}\n }\n",
            "diff_size": 277
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "130",
                    "column": "55",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "392",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/424/SwaggerUtils.java\nindex babe0dd6a0..1bcd376fad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/424/SwaggerUtils.java\n@@ -127,8 +127,7 @@ public final class SwaggerUtils {\n       }\n \n       for (Parameter parameter : operation.getParameters()) {\n-        if (BodyParameter.class.isInstance(parameter) &&\n-            ((BodyParameter) parameter).getSchema() == null) {\n+        if (BodyParameter.class.isInstance(parameter) && ((BodyParameter) parameter).getSchema() == null) {\n           throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n         }\n       }\n@@ -390,12 +389,8 @@ public final class SwaggerUtils {\n     }\n \n     return (cls != String.class\n-        && cls != Date.class\n-        && cls != LocalDate.class\n-        && cls != byte[].class\n-        && cls != File.class\n-        && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n-        && !Part.class.isAssignableFrom(cls));\n+        && cls != Date.class && cls != LocalDate.class && cls != byte[].class && cls != File.class && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n+    && !Part.class.isAssignableFrom(cls));\n   }\n \n   public static boolean isFileParameter(Parameter parameter) {\n@@ -415,4 +410,4 @@ public final class SwaggerUtils {\n \n     return FileProperty.isType(property.getType(), property.getFormat());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/424/SwaggerUtils.java\nindex babe0dd6a0..96ae9b43c2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/424/SwaggerUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/424/SwaggerUtils.java\n@@ -127,292 +127,291 @@ public final class SwaggerUtils {\n       }\n \n       for (Parameter parameter : operation.getParameters()) {\n-        if (BodyParameter.class.isInstance(parameter) &&\n-            ((BodyParameter) parameter).getSchema() == null) {\n-          throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n-        }\n-      }\n+        if (BodyParameter.class.isInstance(parameter) && ((BodyParameter) parameter).getSchema() == null) {\n+      throw new ServiceCombException(\"swagger validator: body parameter schema is empty.\");\n     }\n   }\n+}\n+}\n \n-  private static Swagger internalParseSwagger(String swaggerContent) throws IOException {\n-    Swagger swagger = Yaml.mapper().readValue(swaggerContent, Swagger.class);\n-    correctResponses(swagger);\n-    return swagger;\n-  }\n-\n-  public static void correctResponses(Operation operation) {\n-    int okCode = Status.OK.getStatusCode();\n-    String strOkCode = String.valueOf(okCode);\n-    Response okResponse = null;\n-\n-    for (Entry<String, Response> responseEntry : operation.getResponses().entrySet()) {\n-      Response response = responseEntry.getValue();\n-      if (StringUtils.isEmpty(response.getDescription())) {\n-        response.setDescription(\"response of \" + responseEntry.getKey());\n-      }\n+private static Swagger internalParseSwagger(String swaggerContent) throws IOException {\n+  Swagger swagger = Yaml.mapper().readValue(swaggerContent, Swagger.class);\n+  correctResponses(swagger);\n+  return swagger;\n+}\n \n-      if (operation.getResponses().get(strOkCode) != null) {\n-        continue;\n-      }\n+public static void correctResponses(Operation operation) {\n+  int okCode = Status.OK.getStatusCode();\n+  String strOkCode = String.valueOf(okCode);\n+  Response okResponse = null;\n \n-      int statusCode = NumberUtils.toInt(responseEntry.getKey());\n-      if (\"default\".equals(responseEntry.getKey())) {\n-        statusCode = okCode;\n-      }\n-      if (Family.SUCCESSFUL.equals(Family.familyOf(statusCode))) {\n-        okResponse = response;\n-      }\n+  for (Entry<String, Response> responseEntry : operation.getResponses().entrySet()) {\n+    Response response = responseEntry.getValue();\n+    if (StringUtils.isEmpty(response.getDescription())) {\n+      response.setDescription(\"response of \" + responseEntry.getKey());\n     }\n \n-    if (okResponse != null) {\n-      operation.addResponse(strOkCode, okResponse);\n+    if (operation.getResponses().get(strOkCode) != null) {\n+      continue;\n     }\n-  }\n \n-  public static void correctResponses(Swagger swagger) {\n-    if (swagger.getPaths() == null) {\n-      return;\n+    int statusCode = NumberUtils.toInt(responseEntry.getKey());\n+    if (\"default\".equals(responseEntry.getKey())) {\n+      statusCode = okCode;\n     }\n-\n-    for (Path path : swagger.getPaths().values()) {\n-      for (Operation operation : path.getOperations()) {\n-        correctResponses(operation);\n-      }\n+    if (Family.SUCCESSFUL.equals(Family.familyOf(statusCode))) {\n+      okResponse = response;\n     }\n   }\n \n-  public static Map<String, Property> getBodyProperties(Swagger swagger, Parameter parameter) {\n-    if (!(parameter instanceof BodyParameter)) {\n-      return null;\n-    }\n+  if (okResponse != null) {\n+    operation.addResponse(strOkCode, okResponse);\n+  }\n+}\n \n-    Model model = ((BodyParameter) parameter).getSchema();\n-    if (model instanceof RefModel) {\n-      model = swagger.getDefinitions().get(((RefModel) model).getSimpleRef());\n-    }\n+public static void correctResponses(Swagger swagger) {\n+  if (swagger.getPaths() == null) {\n+    return;\n+  }\n \n-    if (model instanceof ModelImpl) {\n-      return model.getProperties();\n+  for (Path path : swagger.getPaths().values()) {\n+    for (Operation operation : path.getOperations()) {\n+      correctResponses(operation);\n     }\n+  }\n+}\n \n+public static Map<String, Property> getBodyProperties(Swagger swagger, Parameter parameter) {\n+  if (!(parameter instanceof BodyParameter)) {\n     return null;\n   }\n \n-  public static void addDefinitions(Swagger swagger, Type paramType) {\n-    Map<String, Model> models = ModelConverters.getInstance().readAll(paramType);\n-    for (Entry<String, Model> entry : models.entrySet()) {\n-      swagger.addDefinition(entry.getKey(), entry.getValue());\n-    }\n+  Model model = ((BodyParameter) parameter).getSchema();\n+  if (model instanceof RefModel) {\n+    model = swagger.getDefinitions().get(((RefModel) model).getSimpleRef());\n   }\n \n-  public static void setParameterType(Swagger swagger, Type type, AbstractSerializableParameter<?> parameter) {\n-    addDefinitions(swagger, type);\n-    Property property = ModelConverters.getInstance().readAsProperty(type);\n-\n-    if (isComplexProperty(property)) {\n-      // cannot set a simple parameter(header, query, etc.) as complex type\n-      String msg = String\n-          .format(\"not allow complex type for %s parameter, type=%s.\", parameter.getIn(), type.getTypeName());\n-      throw new IllegalStateException(msg);\n-    }\n-    parameter.setProperty(property);\n+  if (model instanceof ModelImpl) {\n+    return model.getProperties();\n   }\n \n-  public static boolean isBean(Model model) {\n-    return isBean(new PropertyModelConverter().modelToProperty(model));\n+  return null;\n+}\n+\n+public static void addDefinitions(Swagger swagger, Type paramType) {\n+  Map<String, Model> models = ModelConverters.getInstance().readAll(paramType);\n+  for (Entry<String, Model> entry : models.entrySet()) {\n+    swagger.addDefinition(entry.getKey(), entry.getValue());\n   }\n+}\n \n-  public static boolean isBean(Property property) {\n-    return property instanceof RefProperty || property instanceof ObjectProperty;\n+public static void setParameterType(Swagger swagger, Type type, AbstractSerializableParameter<?> parameter) {\n+  addDefinitions(swagger, type);\n+  Property property = ModelConverters.getInstance().readAsProperty(type);\n+\n+  if (isComplexProperty(property)) {\n+    // cannot set a simple parameter(header, query, etc.) as complex type\n+    String msg = String\n+        .format(\"not allow complex type for %s parameter, type=%s.\", parameter.getIn(), type.getTypeName());\n+    throw new IllegalStateException(msg);\n   }\n+  parameter.setProperty(property);\n+}\n \n-  public static boolean isComplexProperty(Property property) {\n-    if (property instanceof RefProperty || property instanceof ObjectProperty || property instanceof MapProperty) {\n-      return true;\n-    }\n+public static boolean isBean(Model model) {\n+  return isBean(new PropertyModelConverter().modelToProperty(model));\n+}\n \n-    if (ArrayProperty.class.isInstance(property)) {\n-      return isComplexProperty(((ArrayProperty) property).getItems());\n-    }\n+public static boolean isBean(Property property) {\n+  return property instanceof RefProperty || property instanceof ObjectProperty;\n+}\n \n-    return false;\n+public static boolean isComplexProperty(Property property) {\n+  if (property instanceof RefProperty || property instanceof ObjectProperty || property instanceof MapProperty) {\n+    return true;\n   }\n \n-  public static ModelImpl getModelImpl(Swagger swagger, BodyParameter bodyParameter) {\n-    Model model = bodyParameter.getSchema();\n-    if (model instanceof ModelImpl) {\n-      return (ModelImpl) model;\n-    }\n+  if (ArrayProperty.class.isInstance(property)) {\n+    return isComplexProperty(((ArrayProperty) property).getItems());\n+  }\n \n-    if (!(model instanceof RefModel)) {\n-      return null;\n-    }\n+  return false;\n+}\n \n-    String simpleRef = ((RefModel) model).getSimpleRef();\n-    Model targetModel = swagger.getDefinitions().get(simpleRef);\n-    return targetModel instanceof ModelImpl ? (ModelImpl) targetModel : null;\n+public static ModelImpl getModelImpl(Swagger swagger, BodyParameter bodyParameter) {\n+  Model model = bodyParameter.getSchema();\n+  if (model instanceof ModelImpl) {\n+    return (ModelImpl) model;\n   }\n \n-  public static void setCommaConsumes(Swagger swagger, String commaConsumes) {\n-    if (StringUtils.isEmpty(commaConsumes)) {\n-      return;\n-    }\n+  if (!(model instanceof RefModel)) {\n+    return null;\n+  }\n \n-    setConsumes(swagger, commaConsumes.split(\",\"));\n+  String simpleRef = ((RefModel) model).getSimpleRef();\n+  Model targetModel = swagger.getDefinitions().get(simpleRef);\n+  return targetModel instanceof ModelImpl ? (ModelImpl) targetModel : null;\n+}\n+\n+public static void setCommaConsumes(Swagger swagger, String commaConsumes) {\n+  if (StringUtils.isEmpty(commaConsumes)) {\n+    return;\n   }\n \n-  public static void setCommaConsumes(Operation operation, String commaConsumes) {\n-    if (StringUtils.isEmpty(commaConsumes)) {\n-      return;\n-    }\n+  setConsumes(swagger, commaConsumes.split(\",\"));\n+}\n \n-    setConsumes(operation, commaConsumes.split(\",\"));\n+public static void setCommaConsumes(Operation operation, String commaConsumes) {\n+  if (StringUtils.isEmpty(commaConsumes)) {\n+    return;\n   }\n \n-  public static void setConsumes(Operation operation, String... consumes) {\n-    List<String> consumeList = convertConsumesOrProduces(consumes);\n-    if (!consumeList.isEmpty()) {\n-      operation.setConsumes(consumeList);\n-    }\n+  setConsumes(operation, commaConsumes.split(\",\"));\n+}\n+\n+public static void setConsumes(Operation operation, String... consumes) {\n+  List<String> consumeList = convertConsumesOrProduces(consumes);\n+  if (!consumeList.isEmpty()) {\n+    operation.setConsumes(consumeList);\n   }\n+}\n \n-  public static void setConsumes(Swagger swagger, String... consumes) {\n-    List<String> consumeList = convertConsumesOrProduces(consumes);\n-    if (!consumeList.isEmpty()) {\n-      swagger.setConsumes(consumeList);\n-    }\n+public static void setConsumes(Swagger swagger, String... consumes) {\n+  List<String> consumeList = convertConsumesOrProduces(consumes);\n+  if (!consumeList.isEmpty()) {\n+    swagger.setConsumes(consumeList);\n   }\n+}\n+\n+public static List<String> convertConsumesOrProduces(String... consumesOrProduces) {\n+  return Arrays.stream(consumesOrProduces)\n+      .map(String::trim)\n+      .filter(StringUtils::isNotEmpty)\n+      .collect(Collectors.toList());\n+}\n \n-  public static List<String> convertConsumesOrProduces(String... consumesOrProduces) {\n-    return Arrays.stream(consumesOrProduces)\n-        .map(String::trim)\n-        .filter(StringUtils::isNotEmpty)\n-        .collect(Collectors.toList());\n+public static void setCommaProduces(Swagger swagger, String commaProduces) {\n+  if (StringUtils.isEmpty(commaProduces)) {\n+    return;\n   }\n \n-  public static void setCommaProduces(Swagger swagger, String commaProduces) {\n-    if (StringUtils.isEmpty(commaProduces)) {\n-      return;\n-    }\n+  setProduces(swagger, commaProduces.split(\",\"));\n+}\n \n-    setProduces(swagger, commaProduces.split(\",\"));\n+public static void setCommaProduces(Operation operation, String commaProduces) {\n+  if (StringUtils.isEmpty(commaProduces)) {\n+    return;\n   }\n \n-  public static void setCommaProduces(Operation operation, String commaProduces) {\n-    if (StringUtils.isEmpty(commaProduces)) {\n-      return;\n-    }\n+  setProduces(operation, commaProduces.split(\",\"));\n+}\n \n-    setProduces(operation, commaProduces.split(\",\"));\n+public static void setProduces(Operation operation, String... produces) {\n+  List<String> produceList = convertConsumesOrProduces(produces);\n+  if (!produceList.isEmpty()) {\n+    operation.setProduces(produceList);\n   }\n+}\n \n-  public static void setProduces(Operation operation, String... produces) {\n-    List<String> produceList = convertConsumesOrProduces(produces);\n-    if (!produceList.isEmpty()) {\n-      operation.setProduces(produceList);\n-    }\n+public static void setProduces(Swagger swagger, String... produces) {\n+  List<String> produceList = convertConsumesOrProduces(produces);\n+  if (!produceList.isEmpty()) {\n+    swagger.setProduces(produceList);\n   }\n+}\n \n-  public static void setProduces(Swagger swagger, String... produces) {\n-    List<String> produceList = convertConsumesOrProduces(produces);\n-    if (!produceList.isEmpty()) {\n-      swagger.setProduces(produceList);\n-    }\n+public static boolean hasAnnotation(Class<?> cls, Class<? extends Annotation> annotation) {\n+  if (cls.getAnnotation(annotation) != null) {\n+    return true;\n   }\n \n-  public static boolean hasAnnotation(Class<?> cls, Class<? extends Annotation> annotation) {\n-    if (cls.getAnnotation(annotation) != null) {\n+  for (Method method : cls.getMethods()) {\n+    if (method.getAnnotation(annotation) != null) {\n       return true;\n     }\n+  }\n \n-    for (Method method : cls.getMethods()) {\n-      if (method.getAnnotation(annotation) != null) {\n-        return true;\n-      }\n-    }\n+  return false;\n+}\n \n-    return false;\n+public static boolean isRawJsonType(Parameter param) {\n+  Object rawJson = param.getVendorExtensions().get(SwaggerConst.EXT_RAW_JSON_TYPE);\n+  if (rawJson instanceof Boolean) {\n+    return (boolean) rawJson;\n   }\n+  return false;\n+}\n \n-  public static boolean isRawJsonType(Parameter param) {\n-    Object rawJson = param.getVendorExtensions().get(SwaggerConst.EXT_RAW_JSON_TYPE);\n-    if (rawJson instanceof Boolean) {\n-      return (boolean) rawJson;\n-    }\n-    return false;\n+public static Class<?> getInterface(Swagger swagger) {\n+  Info info = swagger.getInfo();\n+  if (info == null) {\n+    return null;\n   }\n \n-  public static Class<?> getInterface(Swagger swagger) {\n-    Info info = swagger.getInfo();\n-    if (info == null) {\n-      return null;\n-    }\n-\n-    String name = getInterfaceName(info.getVendorExtensions());\n-    if (StringUtils.isEmpty(name)) {\n-      return null;\n-    }\n-\n-    return ReflectUtils.getClassByName(name);\n+  String name = getInterfaceName(info.getVendorExtensions());\n+  if (StringUtils.isEmpty(name)) {\n+    return null;\n   }\n \n-  public static String getClassName(Map<String, Object> vendorExtensions) {\n-    return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_CLASS);\n-  }\n+  return ReflectUtils.getClassByName(name);\n+}\n \n-  public static String getInterfaceName(Map<String, Object> vendorExtensions) {\n-    return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_INTF);\n-  }\n+public static String getClassName(Map<String, Object> vendorExtensions) {\n+  return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_CLASS);\n+}\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static <T> T getVendorExtension(Map<String, Object> vendorExtensions, String key) {\n-    if (vendorExtensions == null) {\n-      return null;\n-    }\n+public static String getInterfaceName(Map<String, Object> vendorExtensions) {\n+  return getVendorExtension(vendorExtensions, SwaggerConst.EXT_JAVA_INTF);\n+}\n \n-    return (T) vendorExtensions.get(key);\n+@SuppressWarnings(\"unchecked\")\n+public static <T> T getVendorExtension(Map<String, Object> vendorExtensions, String key) {\n+  if (vendorExtensions == null) {\n+    return null;\n   }\n \n-  public static boolean isBean(Type type) {\n-    if (type == null) {\n-      return false;\n-    }\n+  return (T) vendorExtensions.get(key);\n+}\n \n-    JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n-    if (javaType.isContainerType() || javaType.isEnumType()) {\n-      return false;\n-    }\n+public static boolean isBean(Type type) {\n+  if (type == null) {\n+    return false;\n+  }\n \n-    Class<?> cls = javaType.getRawClass();\n-    if (ClassUtils.isPrimitiveOrWrapper(cls)) {\n-      return false;\n-    }\n+  JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n+  if (javaType.isContainerType() || javaType.isEnumType()) {\n+    return false;\n+  }\n \n-    return (cls != String.class\n-        && cls != Date.class\n-        && cls != LocalDate.class\n-        && cls != byte[].class\n-        && cls != File.class\n-        && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n-        && !Part.class.isAssignableFrom(cls));\n+  Class<?> cls = javaType.getRawClass();\n+  if (ClassUtils.isPrimitiveOrWrapper(cls)) {\n+    return false;\n   }\n \n-  public static boolean isFileParameter(Parameter parameter) {\n-    if (!(parameter instanceof FormParameter)) {\n-      return false;\n-    }\n+  return (cls != String.class\n+      && cls != Date.class\n+      && cls != LocalDate.class\n+      && cls != byte[].class\n+      && cls != File.class\n+      && !cls.getName().equals(\"org.springframework.web.multipart.MultipartFile\")\n+      && !Part.class.isAssignableFrom(cls));\n+}\n \n-    FormParameter formParameter = (FormParameter) parameter;\n-    if (FileProperty.isType(formParameter.getType(), formParameter.getFormat())) {\n-      return true;\n-    }\n+public static boolean isFileParameter(Parameter parameter) {\n+  if (!(parameter instanceof FormParameter)) {\n+    return false;\n+  }\n \n-    Property property = formParameter.getItems();\n-    if (!ArrayProperty.isType(formParameter.getType()) || property == null) {\n-      return false;\n-    }\n+  FormParameter formParameter = (FormParameter) parameter;\n+  if (FileProperty.isType(formParameter.getType(), formParameter.getFormat())) {\n+    return true;\n+  }\n \n-    return FileProperty.isType(property.getType(), property.getFormat());\n+  Property property = formParameter.getItems();\n+  if (!ArrayProperty.isType(formParameter.getType()) || property == null) {\n+    return false;\n   }\n+\n+  return FileProperty.isType(property.getType(), property.getFormat());\n+}\n }\n",
            "diff_size": 277
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "130",
                    "column": "55",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}