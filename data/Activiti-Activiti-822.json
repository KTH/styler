{
    "error_id": "822",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.listener;\n\nimport org.activiti.engine.delegate.ExecutionListener;\nimport org.activiti.engine.delegate.TransactionDependentTaskListener;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..78a9f54904 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/822/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -30,20 +31,20 @@ public class ExecuteTaskListenerTransactionListener implements TransactionListen\n \n   protected TransactionDependentTaskListener listener;\n   protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n+\n+  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener,\n       TransactionDependentTaskListenerExecutionScope scope) {\n     this.listener = listener;\n     this.scope = scope;\n   }\n-  \n+\n   @Override\n   public void execute(CommandContext commandContext) {\n     CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n     CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n     commandExecutor.execute(commandConfig, new Command<Void>() {\n       public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n+        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(),\n             scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n         return null;\n       }\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..f837e23fe7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/822/ExecuteTaskListenerTransactionListener.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -23,31 +24,29 @@ import org.activiti.engine.impl.interceptor.CommandExecutor;\n \n /**\n  * A {@link TransactionListener} that invokes an {@link ExecutionListener}.\n- * \n-\n  */\n public class ExecuteTaskListenerTransactionListener implements TransactionListener {\n \n-  protected TransactionDependentTaskListener listener;\n-  protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n-      TransactionDependentTaskListenerExecutionScope scope) {\n-    this.listener = listener;\n-    this.scope = scope;\n-  }\n-  \n-  @Override\n-  public void execute(CommandContext commandContext) {\n-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n-    CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n-    commandExecutor.execute(commandConfig, new Command<Void>() {\n-      public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n-            scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n-        return null;\n-      }\n-    });\n-  }\n+    protected TransactionDependentTaskListener listener;\n+    protected TransactionDependentTaskListenerExecutionScope scope;\n+\n+    public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener,\n+                                                  TransactionDependentTaskListenerExecutionScope scope) {\n+        this.listener = listener;\n+        this.scope = scope;\n+    }\n+\n+    @Override\n+    public void execute(CommandContext commandContext) {\n+        CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n+        CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n+        commandExecutor.execute(commandConfig, new Command<Void>() {\n+            public Void execute(CommandContext commandContext) {\n+                listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(),\n+                        scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n+                return null;\n+            }\n+        });\n+    }\n \n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..4541021ef6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/822/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -31,9 +32,8 @@ public class ExecuteTaskListenerTransactionListener implements TransactionListen\n   protected TransactionDependentTaskListener listener;\n   protected TransactionDependentTaskListenerExecutionScope scope;\n   \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n-      TransactionDependentTaskListenerExecutionScope scope) {\n-    this.listener = listener;\n+  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, TransactionDependentTaskListenerExecutionScope scope) {\n+  this.listener = listener;\n     this.scope = scope;\n   }\n   \n@@ -45,9 +45,10 @@ public class ExecuteTaskListenerTransactionListener implements TransactionListen\n       public Void execute(CommandContext commandContext) {\n         listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n             scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n-        return null;\n+\n+return null;\n       }\n     });\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..e9836dfb76 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/822/ExecuteTaskListenerTransactionListener.java\n@@ -26,28 +26,28 @@ import org.activiti.engine.impl.interceptor.CommandExecutor;\n  * \n \n  */\n+\n+\n public class ExecuteTaskListenerTransactionListener implements TransactionListener {\n \n-  protected TransactionDependentTaskListener listener;\n-  protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n-      TransactionDependentTaskListenerExecutionScope scope) {\n+    protected TransactionDependentTaskListener listener;\n+    protected TransactionDependentTaskListenerExecutionScope scope;\n+\n+    public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, TransactionDependentTaskListenerExecutionScope scope) {\n     this.listener = listener;\n     this.scope = scope;\n-  }\n-  \n-  @Override\n-  public void execute(CommandContext commandContext) {\n+    }\n+\n+    @Override\n+    public void execute(CommandContext commandContext) {\n     CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n     CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n     commandExecutor.execute(commandConfig, new Command<Void>() {\n-      public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n-            scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n-        return null;\n-      }\n-    });\n-  }\n \n-}\n+        public Void execute(CommandContext commandContext) {\n+            listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n+            return null;\n+        }\n+    });\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..78a9f54904 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/822/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -30,20 +31,20 @@ public class ExecuteTaskListenerTransactionListener implements TransactionListen\n \n   protected TransactionDependentTaskListener listener;\n   protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n+\n+  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener,\n       TransactionDependentTaskListenerExecutionScope scope) {\n     this.listener = listener;\n     this.scope = scope;\n   }\n-  \n+\n   @Override\n   public void execute(CommandContext commandContext) {\n     CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n     CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n     commandExecutor.execute(commandConfig, new Command<Void>() {\n       public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n+        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(),\n             scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n         return null;\n       }\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/822/ExecuteTaskListenerTransactionListener.java\nindex d46242a175..78a9f54904 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/822/ExecuteTaskListenerTransactionListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/822/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -30,20 +31,20 @@ public class ExecuteTaskListenerTransactionListener implements TransactionListen\n \n   protected TransactionDependentTaskListener listener;\n   protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n+\n+  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener,\n       TransactionDependentTaskListenerExecutionScope scope) {\n     this.listener = listener;\n     this.scope = scope;\n   }\n-  \n+\n   @Override\n   public void execute(CommandContext commandContext) {\n     CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n     CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n     commandExecutor.execute(commandConfig, new Command<Void>() {\n       public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n+        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(),\n             scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n         return null;\n       }\n",
            "diff_size": 5
        }
    ]
}