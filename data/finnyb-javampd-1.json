{
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "197",
                "severity": "error",
                "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "                    pw.flush();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }).start();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..f4cadca535 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler/1/MPDCommandExecutorTest.java\n@@ -194,7 +194,7 @@ public class MPDCommandExecutorTest {\n                     pw.write(\"OK MPD Version\\r\\n\");\n                     pw.flush();\n                 } catch (IOException e) {\n-                    e.printStackTrace();\n+                    e .printStackTrace();\n                 }\n             }).start();\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..bf9ea14a96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/intellij/1/MPDCommandExecutorTest.java\n@@ -55,7 +55,7 @@ public class MPDCommandExecutorTest {\n         List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+            .thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString);\n \n@@ -70,7 +70,7 @@ public class MPDCommandExecutorTest {\n         List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+            .thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(command);\n \n@@ -87,7 +87,7 @@ public class MPDCommandExecutorTest {\n         List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+            .thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString, paramString);\n \n@@ -104,7 +104,7 @@ public class MPDCommandExecutorTest {\n         List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+            .thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString, paramInteger);\n \n@@ -120,15 +120,15 @@ public class MPDCommandExecutorTest {\n         MPDCommand passwordCommand = new MPDCommand(\"password\", \"password\");\n \n         when(mpdSocket.sendCommand(passwordCommand))\n-                .thenReturn(new ArrayList<>())\n-                .thenReturn(new ArrayList<>());\n+            .thenReturn(new ArrayList<>())\n+            .thenReturn(new ArrayList<>());\n \n         List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n \n         when(mpdSocket.sendCommand(command))\n-                .thenThrow(new MPDSecurityException(\"exception\"))\n-                .thenReturn(testResponse);\n+            .thenThrow(new MPDSecurityException(\"exception\"))\n+            .thenReturn(testResponse);\n         List<String> response = new ArrayList<>(commandExecutor.sendCommand(command));\n         assertEquals(response.get(0), testResponse.get(0));\n     }\n@@ -147,12 +147,12 @@ public class MPDCommandExecutorTest {\n \n         MPDCommand passwordCommand = new MPDCommand(\"password\", \"password\");\n         when(mpdSocket.sendCommand(passwordCommand))\n-                .thenReturn(new ArrayList<>())\n-                .thenReturn(new ArrayList<>());\n+            .thenReturn(new ArrayList<>())\n+            .thenReturn(new ArrayList<>());\n \n         doThrow(new MPDSecurityException(\"exception\"))\n-                .doNothing()\n-                .when(mpdSocket).sendCommands(commands);\n+            .doNothing()\n+            .when(mpdSocket).sendCommands(commands);\n \n         commandExecutor.sendCommands(commands);\n     }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..c32c0447bd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/naturalize/1/MPDCommandExecutorTest.java\n@@ -56,8 +56,7 @@ public class MPDCommandExecutorTest {\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n                 .thenReturn(testResponse);\n-\n-        List<String> response = commandExecutor.sendCommand(commandString);\n+List<String> response = commandExecutor.sendCommand(commandString);\n \n         assertEquals(response.get(0), testResponse.get(0));\n     }\n@@ -71,8 +70,7 @@ public class MPDCommandExecutorTest {\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n                 .thenReturn(testResponse);\n-\n-        List<String> response = commandExecutor.sendCommand(command);\n+List<String> response = commandExecutor.sendCommand(command);\n \n         assertEquals(response.get(0), testResponse.get(0));\n     }\n@@ -88,8 +86,7 @@ public class MPDCommandExecutorTest {\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n                 .thenReturn(testResponse);\n-\n-        List<String> response = commandExecutor.sendCommand(commandString, paramString);\n+List<String> response = commandExecutor.sendCommand(commandString, paramString);\n \n         assertEquals(response.get(0), testResponse.get(0));\n     }\n@@ -105,8 +102,7 @@ public class MPDCommandExecutorTest {\n         testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command))\n                 .thenReturn(testResponse);\n-\n-        List<String> response = commandExecutor.sendCommand(commandString, paramInteger);\n+List<String> response = commandExecutor.sendCommand(commandString, paramInteger);\n \n         assertEquals(response.get(0), testResponse.get(0));\n     }\n@@ -122,14 +118,13 @@ public class MPDCommandExecutorTest {\n         when(mpdSocket.sendCommand(passwordCommand))\n                 .thenReturn(new ArrayList<>())\n                 .thenReturn(new ArrayList<>());\n-\n-        List<String> testResponse = new ArrayList<>();\n+List<String> testResponse = new ArrayList<>();\n         testResponse.add(\"testResponse\");\n \n         when(mpdSocket.sendCommand(command))\n                 .thenThrow(new MPDSecurityException(\"exception\"))\n                 .thenReturn(testResponse);\n-        List<String> response = new ArrayList<>(commandExecutor.sendCommand(command));\n+List<String> response = new ArrayList<>(commandExecutor.sendCommand(command));\n         assertEquals(response.get(0), testResponse.get(0));\n     }\n \n@@ -153,8 +148,7 @@ public class MPDCommandExecutorTest {\n         doThrow(new MPDSecurityException(\"exception\"))\n                 .doNothing()\n                 .when(mpdSocket).sendCommands(commands);\n-\n-        commandExecutor.sendCommands(commands);\n+commandExecutor.sendCommands(commands);\n     }\n \n     @Test\n@@ -294,4 +288,4 @@ public class MPDCommandExecutorTest {\n             return mpdSocket;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..29fda729ce 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/codebuff/1/MPDCommandExecutorTest.java\n@@ -6,7 +6,6 @@ import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-\n import java.io.IOException;\n import java.io.PrintWriter;\n import java.net.InetAddress;\n@@ -20,16 +19,14 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.mockito.Mockito.*;\n \n-@RunWith(MockitoJUnitRunner.class)\n+@RunWith(MockitoJUnitRunner.class )\n public class MPDCommandExecutorTest {\n-    @Mock\n-    private MPDSocket mpdSocket;\n \n-    @Mock\n-    private MPD mpd;\n+    @Mock private MPDSocket mpdSocket;\n+\n+    @Mock private MPD mpd;\n \n-    @InjectMocks\n-    private MPDCommandExecutor commandExecutor;\n+    @InjectMocks private MPDCommandExecutor commandExecutor;\n \n     @Test\n     public void testGetVersion() throws UnknownHostException {\n@@ -49,13 +46,16 @@ public class MPDCommandExecutorTest {\n     @Test\n     public void testSendCommandString() {\n         String commandString = \"command\";\n+\n         MPDCommand command = new MPDCommand(commandString);\n+\n         commandExecutor = new TestMPDCommandExecutor();\n         commandExecutor.setMpd(mpd);\n+\n         List<String> testResponse = new ArrayList<>();\n+\n         testResponse.add(\"testResponse\");\n-        when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+        when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString);\n \n@@ -65,12 +65,14 @@ public class MPDCommandExecutorTest {\n     @Test\n     public void testSendCommand() {\n         MPDCommand command = new MPDCommand(\"command\");\n+\n         commandExecutor = new TestMPDCommandExecutor();\n         commandExecutor.setMpd(mpd);\n+\n         List<String> testResponse = new ArrayList<>();\n+\n         testResponse.add(\"testResponse\");\n-        when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+        when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(command);\n \n@@ -80,14 +82,18 @@ public class MPDCommandExecutorTest {\n     @Test\n     public void testSendCommandWithStringParams() {\n         String commandString = \"command\";\n+\n         String paramString = \"param\";\n+\n         MPDCommand command = new MPDCommand(commandString, paramString);\n+\n         commandExecutor = new TestMPDCommandExecutor();\n         commandExecutor.setMpd(mpd);\n+\n         List<String> testResponse = new ArrayList<>();\n+\n         testResponse.add(\"testResponse\");\n-        when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+        when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString, paramString);\n \n@@ -97,14 +103,18 @@ public class MPDCommandExecutorTest {\n     @Test\n     public void testSendCommandWithIntegerParams() {\n         String commandString = \"command\";\n+\n         Integer paramInteger = 1;\n+\n         MPDCommand command = new MPDCommand(commandString, Integer.toString(paramInteger));\n+\n         commandExecutor = new TestMPDCommandExecutor();\n         commandExecutor.setMpd(mpd);\n+\n         List<String> testResponse = new ArrayList<>();\n+\n         testResponse.add(\"testResponse\");\n-        when(mpdSocket.sendCommand(command))\n-                .thenReturn(testResponse);\n+        when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n \n         List<String> response = commandExecutor.sendCommand(commandString, paramInteger);\n \n@@ -117,19 +127,18 @@ public class MPDCommandExecutorTest {\n         commandExecutor.setMpd(mpd);\n \n         MPDCommand command = new MPDCommand(\"command\");\n+\n         MPDCommand passwordCommand = new MPDCommand(\"password\", \"password\");\n \n-        when(mpdSocket.sendCommand(passwordCommand))\n-                .thenReturn(new ArrayList<>())\n-                .thenReturn(new ArrayList<>());\n+        when(mpdSocket.sendCommand(passwordCommand)).thenReturn(new ArrayList<>()).thenReturn(new ArrayList<>());\n \n         List<String> testResponse = new ArrayList<>();\n+\n         testResponse.add(\"testResponse\");\n+        when(mpdSocket.sendCommand(command)).thenThrow(new MPDSecurityException(\"exception\")).thenReturn(testResponse);\n \n-        when(mpdSocket.sendCommand(command))\n-                .thenThrow(new MPDSecurityException(\"exception\"))\n-                .thenReturn(testResponse);\n         List<String> response = new ArrayList<>(commandExecutor.sendCommand(command));\n+\n         assertEquals(response.get(0), testResponse.get(0));\n     }\n \n@@ -139,21 +148,18 @@ public class MPDCommandExecutorTest {\n         commandExecutor.setMpd(mpd);\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\");\n \n         List<MPDCommand> commands = new ArrayList<>();\n+\n         commands.add(command1);\n         commands.add(command2);\n \n         MPDCommand passwordCommand = new MPDCommand(\"password\", \"password\");\n-        when(mpdSocket.sendCommand(passwordCommand))\n-                .thenReturn(new ArrayList<>())\n-                .thenReturn(new ArrayList<>());\n-\n-        doThrow(new MPDSecurityException(\"exception\"))\n-                .doNothing()\n-                .when(mpdSocket).sendCommands(commands);\n \n+        when(mpdSocket.sendCommand(passwordCommand)).thenReturn(new ArrayList<>()).thenReturn(new ArrayList<>());\n+        doThrow(new MPDSecurityException(\"exception\")).doNothing().when(mpdSocket).sendCommands(commands);\n         commandExecutor.sendCommands(commands);\n     }\n \n@@ -163,14 +169,14 @@ public class MPDCommandExecutorTest {\n         commandExecutor.setMpd(mpd);\n \n         MPDCommand command1 = new MPDCommand(\"command1\");\n+\n         MPDCommand command2 = new MPDCommand(\"command2\");\n \n         List<MPDCommand> commands = new ArrayList<>();\n+\n         commands.add(command1);\n         commands.add(command2);\n-\n         doNothing().when(mpdSocket).sendCommands(commands);\n-\n         commandExecutor.sendCommands(commands);\n     }\n \n@@ -180,24 +186,28 @@ public class MPDCommandExecutorTest {\n         try {\n             socket = new ServerSocket(0);\n             socket.setReuseAddress(true);\n+\n             int port = socket.getLocalPort();\n+\n             when(mpd.getAddress()).thenReturn(InetAddress.getLocalHost());\n             when(mpd.getPort()).thenReturn(port);\n             when(mpd.getTimeout()).thenReturn(5000);\n \n             ServerSocket finalSocket = socket;\n-            new Thread(() -> {\n-                Socket clientSocket = null;\n-                try {\n-                    clientSocket = finalSocket.accept();\n-                    PrintWriter pw = new PrintWriter(clientSocket.getOutputStream(), true);\n-                    pw.write(\"OK MPD Version\\r\\n\");\n-                    pw.flush();\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n-                }\n-            }).start();\n \n+            new Thread(()-> {\n+                           Socket clientSocket = null;\n+                           try {\n+                               clientSocket = finalSocket.accept();\n+\n+                               PrintWriter pw = new PrintWriter(clientSocket.getOutputStream(), true);\n+\n+                               pw.write(\"OK MPD Version\\r\\n\");\n+                               pw.flush();\n+                           } catch (IOException e) {\n+                               e.printStackTrace();\n+                           }\n+                       }).start();\n             commandExecutor.setMpd(mpd);\n             assertNotNull(commandExecutor.createSocket());\n         } finally {\n@@ -210,7 +220,9 @@ public class MPDCommandExecutorTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testCommandObjectNoMPDSet() {\n         commandExecutor = new MPDCommandExecutor();\n+\n         MPDCommand command = new MPDCommand(\"command\");\n+\n         commandExecutor.sendCommand(command);\n     }\n \n@@ -235,7 +247,9 @@ public class MPDCommandExecutorTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testSendCommandsNoMPDSet() {\n         commandExecutor = new MPDCommandExecutor();\n+\n         List<MPDCommand> commands = new ArrayList<MPDCommand>();\n+\n         commands.add(new MPDCommand(\"command1\"));\n         commands.add(new MPDCommand(\"command2\"));\n         commands.add(new MPDCommand(\"command3\"));\n@@ -250,14 +264,15 @@ public class MPDCommandExecutorTest {\n     @Test\n     public void testAuthentication() {\n         String password = \"password\";\n+\n         ServerProperties serverProperties = new ServerProperties();\n+\n         MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n \n         List<String> testResponse = new ArrayList<>();\n-        testResponse.add(\"testResponse\");\n \n+        testResponse.add(\"testResponse\");\n         when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n-\n         commandExecutor.usePassword(password);\n         commandExecutor.authenticate();\n     }\n@@ -265,8 +280,11 @@ public class MPDCommandExecutorTest {\n     @Test(expected = MPDSecurityException.class)\n     public void testAuthenticateSecurityException() {\n         String password = \"password\";\n+\n         ServerProperties serverProperties = new ServerProperties();\n+\n         MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n+\n         when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException(\"incorrect password\"));\n         commandExecutor.usePassword(password);\n         commandExecutor.authenticate();\n@@ -275,8 +293,11 @@ public class MPDCommandExecutorTest {\n     @Test(expected = MPDConnectionException.class)\n     public void testAuthenticateGeneralException() {\n         String password = \"password\";\n+\n         ServerProperties serverProperties = new ServerProperties();\n+\n         MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n+\n         when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException());\n         commandExecutor.usePassword(password);\n         commandExecutor.authenticate();\n@@ -289,9 +310,10 @@ public class MPDCommandExecutorTest {\n     }\n \n     private class TestMPDCommandExecutor extends MPDCommandExecutor {\n+\n         @Override\n         protected MPDSocket createSocket() {\n             return mpdSocket;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "197",
                    "column": "44",
                    "severity": "error",
                    "message": "'}' at column 44 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..c9e1ecd7d0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_random/1/MPDCommandExecutorTest.java\n@@ -194,104 +194,103 @@ public class MPDCommandExecutorTest {\n                     pw.write(\"OK MPD Version\\r\\n\");\n                     pw.flush();\n                 } catch (IOException e) {\n-                    e.printStackTrace();\n+                    e . printStackTrace ();} }).start();\n+\n+                    commandExecutor.setMpd(mpd);\n+                    assertNotNull(commandExecutor.createSocket());\n+                } finally {\n+                    if (socket != null) {\n+                        socket.close();\n+                    }\n                 }\n-            }).start();\n-\n-            commandExecutor.setMpd(mpd);\n-            assertNotNull(commandExecutor.createSocket());\n-        } finally {\n-            if (socket != null) {\n-                socket.close();\n             }\n-        }\n-    }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testCommandObjectNoMPDSet() {\n-        commandExecutor = new MPDCommandExecutor();\n-        MPDCommand command = new MPDCommand(\"command\");\n-        commandExecutor.sendCommand(command);\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testCommandObjectNoMPDSet() {\n+                commandExecutor = new MPDCommandExecutor();\n+                MPDCommand command = new MPDCommand(\"command\");\n+                commandExecutor.sendCommand(command);\n+            }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testCommandStringParamsNoMPDSet() {\n-        commandExecutor = new MPDCommandExecutor();\n-        commandExecutor.sendCommand(\"command\", \"param1\", \"param2\");\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testCommandStringParamsNoMPDSet() {\n+                commandExecutor = new MPDCommandExecutor();\n+                commandExecutor.sendCommand(\"command\", \"param1\", \"param2\");\n+            }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testCommandStringIntegerParamsNoMPDSet() {\n-        commandExecutor = new MPDCommandExecutor();\n-        commandExecutor.sendCommand(\"command\", 1, 2, 3);\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testCommandStringIntegerParamsNoMPDSet() {\n+                commandExecutor = new MPDCommandExecutor();\n+                commandExecutor.sendCommand(\"command\", 1, 2, 3);\n+            }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testGetVersionNoMPDSet() {\n-        commandExecutor = new MPDCommandExecutor();\n-        commandExecutor.getMPDVersion();\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testGetVersionNoMPDSet() {\n+                commandExecutor = new MPDCommandExecutor();\n+                commandExecutor.getMPDVersion();\n+            }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testSendCommandsNoMPDSet() {\n-        commandExecutor = new MPDCommandExecutor();\n-        List<MPDCommand> commands = new ArrayList<MPDCommand>();\n-        commands.add(new MPDCommand(\"command1\"));\n-        commands.add(new MPDCommand(\"command2\"));\n-        commands.add(new MPDCommand(\"command3\"));\n-        commandExecutor.sendCommands(commands);\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testSendCommandsNoMPDSet() {\n+                commandExecutor = new MPDCommandExecutor();\n+                List<MPDCommand> commands = new ArrayList<MPDCommand>();\n+                commands.add(new MPDCommand(\"command1\"));\n+                commands.add(new MPDCommand(\"command2\"));\n+                commands.add(new MPDCommand(\"command3\"));\n+                commandExecutor.sendCommands(commands);\n+            }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testAuthenticateIllegalArgument() throws Exception {\n-        commandExecutor.usePassword(null);\n-    }\n+            @Test(expected = IllegalArgumentException.class)\n+            public void testAuthenticateIllegalArgument() throws Exception {\n+                commandExecutor.usePassword(null);\n+            }\n \n-    @Test\n-    public void testAuthentication() {\n-        String password = \"password\";\n-        ServerProperties serverProperties = new ServerProperties();\n-        MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n+            @Test\n+            public void testAuthentication() {\n+                String password = \"password\";\n+                ServerProperties serverProperties = new ServerProperties();\n+                MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n \n-        List<String> testResponse = new ArrayList<>();\n-        testResponse.add(\"testResponse\");\n+                List<String> testResponse = new ArrayList<>();\n+                testResponse.add(\"testResponse\");\n \n-        when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n+                when(mpdSocket.sendCommand(command)).thenReturn(testResponse);\n \n-        commandExecutor.usePassword(password);\n-        commandExecutor.authenticate();\n-    }\n+                commandExecutor.usePassword(password);\n+                commandExecutor.authenticate();\n+            }\n \n-    @Test(expected = MPDSecurityException.class)\n-    public void testAuthenticateSecurityException() {\n-        String password = \"password\";\n-        ServerProperties serverProperties = new ServerProperties();\n-        MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n-        when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException(\"incorrect password\"));\n-        commandExecutor.usePassword(password);\n-        commandExecutor.authenticate();\n-    }\n+            @Test(expected = MPDSecurityException.class)\n+            public void testAuthenticateSecurityException() {\n+                String password = \"password\";\n+                ServerProperties serverProperties = new ServerProperties();\n+                MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n+                when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException(\"incorrect password\"));\n+                commandExecutor.usePassword(password);\n+                commandExecutor.authenticate();\n+            }\n \n-    @Test(expected = MPDConnectionException.class)\n-    public void testAuthenticateGeneralException() {\n-        String password = \"password\";\n-        ServerProperties serverProperties = new ServerProperties();\n-        MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n-        when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException());\n-        commandExecutor.usePassword(password);\n-        commandExecutor.authenticate();\n-    }\n+            @Test(expected = MPDConnectionException.class)\n+            public void testAuthenticateGeneralException() {\n+                String password = \"password\";\n+                ServerProperties serverProperties = new ServerProperties();\n+                MPDCommand command = new MPDCommand(serverProperties.getPassword(), password);\n+                when(mpdSocket.sendCommand(command)).thenThrow(new RuntimeException());\n+                commandExecutor.usePassword(password);\n+                commandExecutor.authenticate();\n+            }\n \n-    @Test\n-    public void testClose() {\n-        commandExecutor.close();\n-        verify(mpdSocket).close();\n-    }\n+            @Test\n+            public void testClose() {\n+                commandExecutor.close();\n+                verify(mpdSocket).close();\n+            }\n \n-    private class TestMPDCommandExecutor extends MPDCommandExecutor {\n-        @Override\n-        protected MPDSocket createSocket() {\n-            return mpdSocket;\n+            private class TestMPDCommandExecutor extends MPDCommandExecutor {\n+                @Override\n+                protected MPDSocket createSocket() {\n+                    return mpdSocket;\n+                }\n+            }\n         }\n-    }\n-}\n+        \n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Calls to Throwable.printStackTrace() are not allowed. Log the exception instead.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/1/MPDCommandExecutorTest.java\nindex bb591ffdbe..f4cadca535 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/errored/1/1/MPDCommandExecutorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/finnyb-javampd/styler_three_grams/1/MPDCommandExecutorTest.java\n@@ -194,7 +194,7 @@ public class MPDCommandExecutorTest {\n                     pw.write(\"OK MPD Version\\r\\n\");\n                     pw.flush();\n                 } catch (IOException e) {\n-                    e.printStackTrace();\n+                    e .printStackTrace();\n                 }\n             }).start();\n \n",
            "diff_size": 1
        }
    ]
}