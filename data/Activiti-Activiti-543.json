{
    "error_id": "543",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.spring.process;\n\nimport static java.util.Collections.emptyMap;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/543/ProcessVariablesInitiator.java\nindex 78680dfb69..d21b4cf7ab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/543/ProcessVariablesInitiator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.process;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/543/ProcessVariablesInitiator.java\nindex 78680dfb69..9421007a1d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/543/ProcessVariablesInitiator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.process;\n \n import static java.util.Collections.emptyMap;\n@@ -88,12 +89,12 @@ public class ProcessVariablesInitiator extends ProcessInstanceHelper {\n         if (processExtensionService.hasExtensionsFor(processDefinition)) {\n \n             processVariables = mappingProvider.calculateOutPutVariables(MappingExecutionContext.buildMappingExecutionContext(\n-                processDefinition.getId(),\n-                initialFlowElement.getId()),\n-                variables);\n+                    processDefinition.getId(),\n+                    initialFlowElement.getId()),\n+                    variables);\n \n             processVariables = calculateVariablesFromExtensionFile(processDefinition,\n-                processVariables);\n+                    processVariables);\n         }\n         return processVariables;\n     }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 101.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 29, indentation should be the same level as line 118.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/543/ProcessVariablesInitiator.java\nindex 78680dfb69..7056117e0e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/543/ProcessVariablesInitiator.java\n@@ -16,7 +16,6 @@\n package org.activiti.spring.process;\n \n import static java.util.Collections.emptyMap;\n-\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -36,6 +35,7 @@ import org.activiti.spring.process.model.VariableDefinition;\n import org.activiti.spring.process.variable.VariableParsingService;\n import org.activiti.spring.process.variable.VariableValidationService;\n \n+\n public class ProcessVariablesInitiator extends ProcessInstanceHelper {\n \n     private ProcessExtensionService processExtensionService;\n@@ -48,97 +48,91 @@ public class ProcessVariablesInitiator extends ProcessInstanceHelper {\n \n     public ProcessVariablesInitiator(ProcessExtensionService processExtensionService,\n                                      VariableParsingService variableParsingService,\n-                                     VariableValidationService variableValidationService,\n-                                     VariablesMappingProvider mappingProvider) {\n-        this.processExtensionService = processExtensionService;\n-        this.variableParsingService = variableParsingService;\n-        this.variableValidationService = variableValidationService;\n-        this.mappingProvider = mappingProvider;\n+                                     VariableValidationService variableValidationService, VariablesMappingProvider mappingProvider) {\n+    this.processExtensionService = processExtensionService;\n+    this.variableParsingService = variableParsingService;\n+    this.variableValidationService = variableValidationService;\n+    this.mappingProvider = mappingProvider;\n     }\n \n-    public Map<String, Object> calculateVariablesFromExtensionFile(ProcessDefinition processDefinition,\n-                                                                   Map<String, Object> variables) {\n-        Map<String, Object> processedVariables = new HashMap<>();\n-        if (processExtensionService.hasExtensionsFor(processDefinition)) {\n-            Extension processExtension = processExtensionService.getExtensionsFor(processDefinition);\n-\n-            Map<String, VariableDefinition> variableDefinitionMap = processExtension.getProperties();\n-            processedVariables = processVariables(variables, variableDefinitionMap);\n-\n-            Set<String> missingRequiredVars = checkRequiredVariables(processedVariables,\n-                    variableDefinitionMap);\n-            if (!missingRequiredVars.isEmpty()) {\n-                throw new ActivitiException(\"Can't start process '\" + processDefinition.getKey() + \"' without required variables - \" + String.join(\", \",\n-                        missingRequiredVars));\n-            }\n-            Set<String> varsWithMismatchedTypes = validateVariablesAgainstDefinitions(processedVariables,\n-                    variableDefinitionMap);\n-            if (!varsWithMismatchedTypes.isEmpty()) {\n-                throw new ActivitiException(\"Can't start process '\" + processDefinition.getKey() + \"' as variables fail type validation - \" + String.join(\", \",\n-                        varsWithMismatchedTypes));\n-            }\n+    public Map<String, Object> calculateVariablesFromExtensionFile(ProcessDefinition processDefinition, Map<String, Object> variables) {\n+    Map<String, Object> processedVariables = new HashMap<>();\n+    if (processExtensionService.hasExtensionsFor(processDefinition)) {\n+        Extension processExtension = processExtensionService.getExtensionsFor(processDefinition);\n+        Map<String, VariableDefinition> variableDefinitionMap = processExtension.getProperties();\n+        processedVariables = processVariables(variables, variableDefinitionMap);\n+\n+\n+        Set<String> missingRequiredVars = checkRequiredVariables(processedVariables, variableDefinitionMap);\n+        if (!missingRequiredVars.isEmpty()) {\n+                                                                         throw new ActivitiException(\"Can't start process '\" + processDefinition.getKey() + \"' without required variables - \" + String.join(\", \", missingRequiredVars));\n         }\n \n-        return processedVariables;\n+        Set<String> varsWithMismatchedTypes = validateVariablesAgainstDefinitions(processedVariables, variableDefinitionMap);\n+        if (!varsWithMismatchedTypes.isEmpty()) {\n+                                                                         throw new ActivitiException(\"Can't start process '\" + processDefinition.getKey() + \"' as variables fail type validation - \" + String.join(\", \", varsWithMismatchedTypes));\n+        }\n+    }\n+    return processedVariables;\n     }\n \n     public Map<String, Object> calculateOutputVariables(Map<String, Object> variables, ProcessDefinition processDefinition, FlowElement initialFlowElement) {\n-        Map<String, Object> processVariables = variables;\n-\n-        if (processExtensionService.hasExtensionsFor(processDefinition)) {\n-\n-            processVariables = mappingProvider.calculateOutPutVariables(MappingExecutionContext.buildMappingExecutionContext(\n-                processDefinition.getId(),\n-                initialFlowElement.getId()),\n-                variables);\n-\n-            processVariables = calculateVariablesFromExtensionFile(processDefinition,\n-                processVariables);\n-        }\n-        return processVariables;\n+    Map<String, Object> processVariables = variables;\n+    if (processExtensionService.hasExtensionsFor(processDefinition)) {\n+        processVariables = mappingProvider.calculateOutPutVariables(MappingExecutionContext.buildMappingExecutionContext(processDefinition.getId(),\n+                                                                                                                         initialFlowElement.getId()), variables);\n+        processVariables = calculateVariablesFromExtensionFile(processDefinition, processVariables);\n+    }\n+    return processVariables;\n     }\n \n     private Map<String, Object> processVariables(Map<String, Object> variables, Map<String, VariableDefinition> variableDefinitionMap) {\n-        Map<String, Object> newVarsMap = new HashMap<>(Optional.ofNullable(variables).orElse(emptyMap()));\n-        variableDefinitionMap.forEach((k, v) -> {\n-            if (!newVarsMap.containsKey(v.getName()) && v.getValue() != null) {\n-                newVarsMap.put(v.getName(), createDefaultVariableValue(v));\n-            }\n-        });\n-        return newVarsMap;\n+    Map<String, Object> newVarsMap = new HashMap<>(Optional.ofNullable(variables).orElse(emptyMap()));\n+    variableDefinitionMap.forEach((k,v) -> {\n+                             if (!newVarsMap.containsKey(v.getName()) && v.getValue() != null) {\n+                                 newVarsMap.put(v.getName(), createDefaultVariableValue(v));\n+                             }\n+                         });\n+    return newVarsMap;\n     }\n \n     private Object createDefaultVariableValue(VariableDefinition variableDefinition) {\n         // take a default from the variable definition in the proc extensions\n-        return variableParsingService.parse(variableDefinition);\n+    return variableParsingService.parse(variableDefinition);\n     }\n \n     private Set<String> checkRequiredVariables(Map<String, Object> variables, Map<String, VariableDefinition> variableDefinitionMap) {\n-        Set<String> missingRequiredVars = new HashSet<>();\n-        variableDefinitionMap.forEach((k, v) -> {\n-            if (!variables.containsKey(v.getName()) && v.isRequired()) {\n-                missingRequiredVars.add(v.getName());\n-            }\n-        });\n-        return missingRequiredVars;\n+    Set<String> missingRequiredVars = new HashSet<>();\n+    variableDefinitionMap.forEach((k,v) -> {\n+                             if (!variables.containsKey(v.getName()) && v.isRequired()) {\n+                                 missingRequiredVars.add(v.getName());\n+                             }\n+                         });\n+    return missingRequiredVars;\n     }\n \n     private Set<String> validateVariablesAgainstDefinitions(Map<String, Object> variables, Map<String, VariableDefinition> variableDefinitionMap) {\n-        Set<String> mismatchedVars = new HashSet<>();\n-        variableDefinitionMap.forEach((k, v) -> {\n+    Set<String> mismatchedVars = new HashSet<>();\n+    variableDefinitionMap.forEach((k,v) -> {\n             //if we have definition for this variable then validate it\n-            if (variables.containsKey(v.getName())) {\n-                if (!variableValidationService.validate(variables.get(v.getName()), v)) {\n-                    mismatchedVars.add(v.getName());\n-                }\n-            }\n-        });\n-        return mismatchedVars;\n+                             if (variables.containsKey(v.getName())) {\n+                                      if (!variableValidationService.validate(variables.get(v.getName()), v)) {\n+                                          mismatchedVars.add(v.getName());\n+                                      }\n+                             }\n+                         });\n+    return mismatchedVars;\n     }\n \n-    public void startProcessInstance(ExecutionEntity processInstance, CommandContext commandContext, Map<String, Object> variables, FlowElement initialFlowElement, Map<String, Object> transientVariables) {\n-        ProcessDefinition processDefinition = ProcessDefinitionUtil.getProcessDefinition(processInstance.getProcessDefinitionId());\n-        Map<String, Object> calculatedVariables = calculateOutputVariables(variables, processDefinition, initialFlowElement);\n-        super.startProcessInstance(processInstance, commandContext, calculatedVariables, initialFlowElement, transientVariables);\n+    public void startProcessInstance(ExecutionEntity processInstance,\n+                                     CommandContext commandContext,\n+                                     Map<String, Object> variables,\n+                                     FlowElement initialFlowElement, Map<String, Object> transientVariables) {\n+    ProcessDefinition processDefinition = ProcessDefinitionUtil.getProcessDefinition(processInstance.getProcessDefinitionId());\n+    Map<String, Object> calculatedVariables = calculateOutputVariables(variables,\n+                                                                       processDefinition,\n+                                                                       initialFlowElement);\n+    super.startProcessInstance(processInstance, commandContext, calculatedVariables, initialFlowElement, transientVariables);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/543/ProcessVariablesInitiator.java\nindex 78680dfb69..d21b4cf7ab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/543/ProcessVariablesInitiator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.process;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/543/ProcessVariablesInitiator.java\nindex 78680dfb69..d21b4cf7ab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/543/ProcessVariablesInitiator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/543/ProcessVariablesInitiator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.spring.process;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        }
    ]
}