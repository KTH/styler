{
    "error_id": "469",
    "information": {
        "errors": [
            {
                "line": "153",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    microserviceInstance.setStage(DEFAULT_STAGE);\n    microserviceInstance\n        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n    HealthCheck healthCheck = new HealthCheck();\n    healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n    microserviceInstance.setHealthCheck(healthCheck);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/469/MicroserviceInstance.java\nindex 0af27f923f..b4ef80965c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/469/MicroserviceInstance.java\n@@ -150,7 +150,7 @@ public class MicroserviceInstance {\n     // default hard coded values\n     microserviceInstance.setStage(DEFAULT_STAGE);\n     microserviceInstance\n-        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n+    .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n     HealthCheck healthCheck = new HealthCheck();\n     healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n     microserviceInstance.setHealthCheck(healthCheck);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/469/MicroserviceInstance.java\nindex 0af27f923f..cc06ae0a18 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/469/MicroserviceInstance.java\n@@ -150,7 +150,8 @@ public class MicroserviceInstance {\n     // default hard coded values\n     microserviceInstance.setStage(DEFAULT_STAGE);\n     microserviceInstance\n-        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n+        .setEnvironment(\n+            configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n     HealthCheck healthCheck = new HealthCheck();\n     healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n     microserviceInstance.setHealthCheck(healthCheck);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/469/MicroserviceInstance.java\nindex 0af27f923f..8c6a74bca2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/469/MicroserviceInstance.java\n@@ -52,7 +52,8 @@ public class MicroserviceInstance {\n \n   private MicroserviceInstanceStatus status = MicroserviceInstanceStatus.UP;\n \n-  private Map<String, String> properties = new HashMap<>(); // reserved key list: region|az|stage|group\n+  private Map<String, String> properties = new HashMap<>();\n+// reserved key list: region|az|stage|group\n \n   private HealthCheck healthCheck;\n \n@@ -178,4 +179,4 @@ public class MicroserviceInstance {\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "153",
                    "column": "91",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "154",
                    "column": "7",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "154",
                    "column": "29",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/469/MicroserviceInstance.java\nindex 0af27f923f..b09d0f8ca4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/469/MicroserviceInstance.java\n@@ -150,32 +150,33 @@ public class MicroserviceInstance {\n     // default hard coded values\n     microserviceInstance.setStage(DEFAULT_STAGE);\n     microserviceInstance\n-        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n-    HealthCheck healthCheck = new HealthCheck();\n-    healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n-    microserviceInstance.setHealthCheck(healthCheck);\n-\n-    // load properties\n-    Map<String, String> propertiesMap = InstancePropertiesLoader.INSTANCE.loadProperties(configuration);\n-    microserviceInstance.setProperties(propertiesMap);\n-\n-    // load data center information\n-    loadDataCenterInfo(microserviceInstance);\n-    return microserviceInstance;\n-  }\n-\n-  private static void loadDataCenterInfo(MicroserviceInstance microserviceInstance) {\n-    String dataCenterName = DynamicPropertyFactory.getInstance()\n-        .getStringProperty(\"cse.datacenter.name\", null)\n-        .get();\n-    if (StringUtils.isNotEmpty(dataCenterName)) {\n-      DataCenterInfo dataCenterInfo = new DataCenterInfo();\n-      dataCenterInfo.setName(dataCenterName);\n-      dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"cse.datacenter.region\", null).get());\n-      dataCenterInfo.setAvailableZone(\n-          DynamicPropertyFactory.getInstance().getStringProperty(\"cse.datacenter.availableZone\", null).get());\n-      microserviceInstance.setDataCenterInfo(dataCenterInfo);\n+        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY,DEFAULT_INSTANCE_ENVIRONMENT)\n+    );HealthCheckhealthCheck= new HealthCheck();\n+        healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n+        microserviceInstance.setHealthCheck(healthCheck);\n+\n+        // load properties\n+        Map<String, String> propertiesMap = InstancePropertiesLoader.INSTANCE.loadProperties(configuration);\n+        microserviceInstance.setProperties(propertiesMap);\n+\n+        // load data center information\n+        loadDataCenterInfo(microserviceInstance);\n+        return microserviceInstance;\n+      }\n+\n+      private static void loadDataCenterInfo(MicroserviceInstance microserviceInstance) {\n+        String dataCenterName = DynamicPropertyFactory.getInstance()\n+            .getStringProperty(\"cse.datacenter.name\", null)\n+            .get();\n+        if (StringUtils.isNotEmpty(dataCenterName)) {\n+          DataCenterInfo dataCenterInfo = new DataCenterInfo();\n+          dataCenterInfo.setName(dataCenterName);\n+          dataCenterInfo\n+              .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"cse.datacenter.region\", null).get());\n+          dataCenterInfo.setAvailableZone(\n+              DynamicPropertyFactory.getInstance().getStringProperty(\"cse.datacenter.availableZone\", null).get());\n+          microserviceInstance.setDataCenterInfo(dataCenterInfo);\n+        }\n+      }\n     }\n-  }\n-}\n+    \n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/469/MicroserviceInstance.java\nindex 0af27f923f..b4ef80965c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/469/MicroserviceInstance.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/469/MicroserviceInstance.java\n@@ -150,7 +150,7 @@ public class MicroserviceInstance {\n     // default hard coded values\n     microserviceInstance.setStage(DEFAULT_STAGE);\n     microserviceInstance\n-        .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n+    .setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n     HealthCheck healthCheck = new HealthCheck();\n     healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n     microserviceInstance.setHealthCheck(healthCheck);\n",
            "diff_size": 1
        }
    ]
}