{
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.apache.calcite.rel.type;\n\n/**\n * Describes a policy for resolving fields in record types.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/86/StructKind.java\nindex 1c48ada575..af13e0a794 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/86/StructKind.java\n@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.rel.type;\r\n-\r\n-/**\r\n- * Describes a policy for resolving fields in record types.\r\n- *\r\n- * <p>The usual value is {@link #FULLY_QUALIFIED}.\r\n- *\r\n- * <p>A field whose record type is labeled {@link #PEEK_FIELDS} can be omitted.\r\n- * In Phoenix, column families are represented by fields like this.\r\n- * {@link #PEEK_FIELDS_DEFAULT} is similar, but represents the default column\r\n- * family, so it will win in the event of a tie.\r\n- *\r\n- * <p>SQL usually disallows a record type. For instance,\r\n- *\r\n- * <blockquote><pre>SELECT address.zip FROM Emp AS e</pre></blockquote>\r\n- *\r\n- * <p>is disallowed because {@code address} \"looks like\" a table alias. You'd\r\n- * have to write\r\n- *\r\n- * <blockquote><pre>SELECT e.address.zip FROM Emp AS e</pre></blockquote>\r\n- *\r\n- * <p>But if a table has one or more columns that are record-typed and are\r\n- * labeled {@link #PEEK_FIELDS} or {@link #PEEK_FIELDS_DEFAULT} we suspend that\r\n- * rule and would allow {@code address.zip}.\r\n- *\r\n- * <p>If there are multiple matches, we choose the one that is:\r\n- * <ol>\r\n- *   <li>Shorter. If you write {@code zipcode}, {@code address.zipcode} will\r\n- *   be preferred over {@code product.supplier.zipcode}.\r\n- *   <li>Uses as little skipping as possible. A match that is fully-qualified\r\n- *   will beat one that uses {@code PEEK_FIELDS_DEFAULT} at some point, which\r\n- *   will beat one that uses {@code PEEK_FIELDS} at some point.\r\n- * </ol>\r\n- */\r\n-public enum StructKind {\r\n-  /** This is not a structured type. */\r\n-  NONE,\r\n-\r\n-  /** This is a traditional structured type, where each field must be\r\n-   * referenced explicitly.\r\n-   *\r\n-   * <p>Also, when referencing a struct column, you\r\n-   * need to qualify it with the table alias, per standard SQL. For instance,\r\n-   * {@code SELECT c.address.zipcode FROM customer AS c}\r\n-   * is valid but\r\n-   * {@code SELECT address.zipcode FROM customer}\r\n-   * it not valid.\r\n-   */\r\n-  FULLY_QUALIFIED,\r\n-\r\n-  /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\r\n-   * field also has a field of the name being sought.\r\n-   *\r\n-   * <p>In Phoenix, only one of a table's columns is labeled\r\n-   * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\r\n-   * there could be more than one. */\r\n-  PEEK_FIELDS_DEFAULT,\r\n-\r\n-  /** If a field has this type, you can see its fields without qualifying them\r\n-   * with the name of this field.\r\n-   *\r\n-   * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\r\n-   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\r\n-  PEEK_FIELDS,\r\n-\r\n-  /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\r\n-   *\r\n-   * <p>Used in Flink, not Phoenix. */\r\n-  PEEK_FIELDS_NO_EXPAND,\r\n-}\r\n-\r\n-// End StructKind.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.rel.type;\n+\n+/**\n+ * Describes a policy for resolving fields in record types.\n+ *\n+ * <p>The usual value is {@link #FULLY_QUALIFIED}.\n+ *\n+ * <p>A field whose record type is labeled {@link #PEEK_FIELDS} can be omitted.\n+ * In Phoenix, column families are represented by fields like this.\n+ * {@link #PEEK_FIELDS_DEFAULT} is similar, but represents the default column\n+ * family, so it will win in the event of a tie.\n+ *\n+ * <p>SQL usually disallows a record type. For instance,\n+ *\n+ * <blockquote><pre>SELECT address.zip FROM Emp AS e</pre></blockquote>\n+ *\n+ * <p>is disallowed because {@code address} \"looks like\" a table alias. You'd\n+ * have to write\n+ *\n+ * <blockquote><pre>SELECT e.address.zip FROM Emp AS e</pre></blockquote>\n+ *\n+ * <p>But if a table has one or more columns that are record-typed and are\n+ * labeled {@link #PEEK_FIELDS} or {@link #PEEK_FIELDS_DEFAULT} we suspend that\n+ * rule and would allow {@code address.zip}.\n+ *\n+ * <p>If there are multiple matches, we choose the one that is:\n+ * <ol>\n+ *   <li>Shorter. If you write {@code zipcode}, {@code address.zipcode} will\n+ *   be preferred over {@code product.supplier.zipcode}.\n+ *   <li>Uses as little skipping as possible. A match that is fully-qualified\n+ *   will beat one that uses {@code PEEK_FIELDS_DEFAULT} at some point, which\n+ *   will beat one that uses {@code PEEK_FIELDS} at some point.\n+ * </ol>\n+ */\n+public enum StructKind {\n+  /** This is not a structured type. */\n+  NONE,\n+\n+  /** This is a traditional structured type, where each field must be\n+   * referenced explicitly.\n+   *\n+   * <p>Also, when referencing a struct column, you\n+   * need to qualify it with the table alias, per standard SQL. For instance,\n+   * {@code SELECT c.address.zipcode FROM customer AS c}\n+   * is valid but\n+   * {@code SELECT address.zipcode FROM customer}\n+   * it not valid.\n+   */\n+  FULLY_QUALIFIED,\n+\n+  /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\n+   * field also has a field of the name being sought.\n+   *\n+   * <p>In Phoenix, only one of a table's columns is labeled\n+   * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\n+   * there could be more than one. */\n+  PEEK_FIELDS_DEFAULT,\n+\n+  /** If a field has this type, you can see its fields without qualifying them\n+   * with the name of this field.\n+   *\n+   * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\n+   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\n+  PEEK_FIELDS,\n+\n+  /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\n+   *\n+   * <p>Used in Flink, not Phoenix. */\n+  PEEK_FIELDS_NO_EXPAND,\n+}\n+\n+// End StructKind.java\n",
            "diff_size": 88
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/86/StructKind.java\nindex 1c48ada575..10aec398a7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/86/StructKind.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.apache.calcite.rel.type;\r\n \r\n /**\r\n@@ -49,40 +50,49 @@ package org.apache.calcite.rel.type;\n  * </ol>\r\n  */\r\n public enum StructKind {\r\n-  /** This is not a structured type. */\r\n-  NONE,\r\n+    /**\r\n+     * This is not a structured type.\r\n+     */\r\n+    NONE,\r\n \r\n-  /** This is a traditional structured type, where each field must be\r\n-   * referenced explicitly.\r\n-   *\r\n-   * <p>Also, when referencing a struct column, you\r\n-   * need to qualify it with the table alias, per standard SQL. For instance,\r\n-   * {@code SELECT c.address.zipcode FROM customer AS c}\r\n-   * is valid but\r\n-   * {@code SELECT address.zipcode FROM customer}\r\n-   * it not valid.\r\n-   */\r\n-  FULLY_QUALIFIED,\r\n+    /**\r\n+     * This is a traditional structured type, where each field must be\r\n+     * referenced explicitly.\r\n+     *\r\n+     * <p>Also, when referencing a struct column, you\r\n+     * need to qualify it with the table alias, per standard SQL. For instance,\r\n+     * {@code SELECT c.address.zipcode FROM customer AS c}\r\n+     * is valid but\r\n+     * {@code SELECT address.zipcode FROM customer}\r\n+     * it not valid.\r\n+     */\r\n+    FULLY_QUALIFIED,\r\n \r\n-  /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\r\n-   * field also has a field of the name being sought.\r\n-   *\r\n-   * <p>In Phoenix, only one of a table's columns is labeled\r\n-   * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\r\n-   * there could be more than one. */\r\n-  PEEK_FIELDS_DEFAULT,\r\n+    /**\r\n+     * As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\r\n+     * field also has a field of the name being sought.\r\n+     *\r\n+     * <p>In Phoenix, only one of a table's columns is labeled\r\n+     * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\r\n+     * there could be more than one.\r\n+     */\r\n+    PEEK_FIELDS_DEFAULT,\r\n \r\n-  /** If a field has this type, you can see its fields without qualifying them\r\n-   * with the name of this field.\r\n-   *\r\n-   * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\r\n-   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\r\n-  PEEK_FIELDS,\r\n+    /**\r\n+     * If a field has this type, you can see its fields without qualifying them\r\n+     * with the name of this field.\r\n+     *\r\n+     * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\r\n+     * could write {@code zipcode} as shorthand for {@code address.zipcode}.\r\n+     */\r\n+    PEEK_FIELDS,\r\n \r\n-  /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\r\n-   *\r\n-   * <p>Used in Flink, not Phoenix. */\r\n-  PEEK_FIELDS_NO_EXPAND,\r\n+    /**\r\n+     * As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\r\n+     *\r\n+     * <p>Used in Flink, not Phoenix.\r\n+     */\r\n+    PEEK_FIELDS_NO_EXPAND,\r\n }\r\n \r\n // End StructKind.java\r\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 55.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 6, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 38, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 78, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 39, indentation should be the same level as line 83.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/86/StructKind.java\nindex 1c48ada575..d447e323e9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/86/StructKind.java\n@@ -47,10 +47,12 @@ package org.apache.calcite.rel.type;\n  *   will beat one that uses {@code PEEK_FIELDS_DEFAULT} at some point, which\r\n  *   will beat one that uses {@code PEEK_FIELDS} at some point.\r\n  * </ol>\r\n- */\r\n+ */\n+\n+\n public enum StructKind {\r\n-  /** This is not a structured type. */\r\n-  NONE,\r\n+  /** This is not a structured type. */\n+    NONE,\r\n \r\n   /** This is a traditional structured type, where each field must be\r\n    * referenced explicitly.\r\n@@ -61,28 +63,22 @@ public enum StructKind {\n    * is valid but\r\n    * {@code SELECT address.zipcode FROM customer}\r\n    * it not valid.\r\n-   */\r\n-  FULLY_QUALIFIED,\r\n+   */ FULLY_QUALIFIED,\r\n \r\n   /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\r\n    * field also has a field of the name being sought.\r\n    *\r\n    * <p>In Phoenix, only one of a table's columns is labeled\r\n    * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\r\n-   * there could be more than one. */\r\n-  PEEK_FIELDS_DEFAULT,\r\n+   * there could be more than one. */ PEEK_FIELDS_DEFAULT,\r\n \r\n   /** If a field has this type, you can see its fields without qualifying them\r\n    * with the name of this field.\r\n    *\r\n    * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\r\n-   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\r\n-  PEEK_FIELDS,\r\n+   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */ PEEK_FIELDS,\r\n \r\n   /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\r\n    *\r\n-   * <p>Used in Flink, not Phoenix. */\r\n-  PEEK_FIELDS_NO_EXPAND,\r\n-}\r\n-\r\n-// End StructKind.java\r\n+   * <p>Used in Flink, not Phoenix. */ PEEK_FIELDS_NO_EXPAND,\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/86/StructKind.java\nindex 1c48ada575..af13e0a794 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/86/StructKind.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/86/StructKind.java\n@@ -1,88 +1,88 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.rel.type;\r\n-\r\n-/**\r\n- * Describes a policy for resolving fields in record types.\r\n- *\r\n- * <p>The usual value is {@link #FULLY_QUALIFIED}.\r\n- *\r\n- * <p>A field whose record type is labeled {@link #PEEK_FIELDS} can be omitted.\r\n- * In Phoenix, column families are represented by fields like this.\r\n- * {@link #PEEK_FIELDS_DEFAULT} is similar, but represents the default column\r\n- * family, so it will win in the event of a tie.\r\n- *\r\n- * <p>SQL usually disallows a record type. For instance,\r\n- *\r\n- * <blockquote><pre>SELECT address.zip FROM Emp AS e</pre></blockquote>\r\n- *\r\n- * <p>is disallowed because {@code address} \"looks like\" a table alias. You'd\r\n- * have to write\r\n- *\r\n- * <blockquote><pre>SELECT e.address.zip FROM Emp AS e</pre></blockquote>\r\n- *\r\n- * <p>But if a table has one or more columns that are record-typed and are\r\n- * labeled {@link #PEEK_FIELDS} or {@link #PEEK_FIELDS_DEFAULT} we suspend that\r\n- * rule and would allow {@code address.zip}.\r\n- *\r\n- * <p>If there are multiple matches, we choose the one that is:\r\n- * <ol>\r\n- *   <li>Shorter. If you write {@code zipcode}, {@code address.zipcode} will\r\n- *   be preferred over {@code product.supplier.zipcode}.\r\n- *   <li>Uses as little skipping as possible. A match that is fully-qualified\r\n- *   will beat one that uses {@code PEEK_FIELDS_DEFAULT} at some point, which\r\n- *   will beat one that uses {@code PEEK_FIELDS} at some point.\r\n- * </ol>\r\n- */\r\n-public enum StructKind {\r\n-  /** This is not a structured type. */\r\n-  NONE,\r\n-\r\n-  /** This is a traditional structured type, where each field must be\r\n-   * referenced explicitly.\r\n-   *\r\n-   * <p>Also, when referencing a struct column, you\r\n-   * need to qualify it with the table alias, per standard SQL. For instance,\r\n-   * {@code SELECT c.address.zipcode FROM customer AS c}\r\n-   * is valid but\r\n-   * {@code SELECT address.zipcode FROM customer}\r\n-   * it not valid.\r\n-   */\r\n-  FULLY_QUALIFIED,\r\n-\r\n-  /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\r\n-   * field also has a field of the name being sought.\r\n-   *\r\n-   * <p>In Phoenix, only one of a table's columns is labeled\r\n-   * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\r\n-   * there could be more than one. */\r\n-  PEEK_FIELDS_DEFAULT,\r\n-\r\n-  /** If a field has this type, you can see its fields without qualifying them\r\n-   * with the name of this field.\r\n-   *\r\n-   * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\r\n-   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\r\n-  PEEK_FIELDS,\r\n-\r\n-  /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\r\n-   *\r\n-   * <p>Used in Flink, not Phoenix. */\r\n-  PEEK_FIELDS_NO_EXPAND,\r\n-}\r\n-\r\n-// End StructKind.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.rel.type;\n+\n+/**\n+ * Describes a policy for resolving fields in record types.\n+ *\n+ * <p>The usual value is {@link #FULLY_QUALIFIED}.\n+ *\n+ * <p>A field whose record type is labeled {@link #PEEK_FIELDS} can be omitted.\n+ * In Phoenix, column families are represented by fields like this.\n+ * {@link #PEEK_FIELDS_DEFAULT} is similar, but represents the default column\n+ * family, so it will win in the event of a tie.\n+ *\n+ * <p>SQL usually disallows a record type. For instance,\n+ *\n+ * <blockquote><pre>SELECT address.zip FROM Emp AS e</pre></blockquote>\n+ *\n+ * <p>is disallowed because {@code address} \"looks like\" a table alias. You'd\n+ * have to write\n+ *\n+ * <blockquote><pre>SELECT e.address.zip FROM Emp AS e</pre></blockquote>\n+ *\n+ * <p>But if a table has one or more columns that are record-typed and are\n+ * labeled {@link #PEEK_FIELDS} or {@link #PEEK_FIELDS_DEFAULT} we suspend that\n+ * rule and would allow {@code address.zip}.\n+ *\n+ * <p>If there are multiple matches, we choose the one that is:\n+ * <ol>\n+ *   <li>Shorter. If you write {@code zipcode}, {@code address.zipcode} will\n+ *   be preferred over {@code product.supplier.zipcode}.\n+ *   <li>Uses as little skipping as possible. A match that is fully-qualified\n+ *   will beat one that uses {@code PEEK_FIELDS_DEFAULT} at some point, which\n+ *   will beat one that uses {@code PEEK_FIELDS} at some point.\n+ * </ol>\n+ */\n+public enum StructKind {\n+  /** This is not a structured type. */\n+  NONE,\n+\n+  /** This is a traditional structured type, where each field must be\n+   * referenced explicitly.\n+   *\n+   * <p>Also, when referencing a struct column, you\n+   * need to qualify it with the table alias, per standard SQL. For instance,\n+   * {@code SELECT c.address.zipcode FROM customer AS c}\n+   * is valid but\n+   * {@code SELECT address.zipcode FROM customer}\n+   * it not valid.\n+   */\n+  FULLY_QUALIFIED,\n+\n+  /** As {@link #PEEK_FIELDS}, but takes priority if another struct-typed\n+   * field also has a field of the name being sought.\n+   *\n+   * <p>In Phoenix, only one of a table's columns is labeled\n+   * {@code PEEK_FIELDS_DEFAULT} - the default column family - but in principle\n+   * there could be more than one. */\n+  PEEK_FIELDS_DEFAULT,\n+\n+  /** If a field has this type, you can see its fields without qualifying them\n+   * with the name of this field.\n+   *\n+   * <p>For example, if {@code address} is labeled {@code PEEK_FIELDS}, you\n+   * could write {@code zipcode} as shorthand for {@code address.zipcode}. */\n+  PEEK_FIELDS,\n+\n+  /** As {@link #PEEK_FIELDS}, but fields are not expanded in \"SELECT *\".\n+   *\n+   * <p>Used in Flink, not Phoenix. */\n+  PEEK_FIELDS_NO_EXPAND,\n+}\n+\n+// End StructKind.java\n",
            "diff_size": 88
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}