{
    "error_id": "850",
    "information": {
        "errors": [
            {
                "line": "60",
                "severity": "error",
                "message": "'STATIC_INIT' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "                                                List.class,\n                                                Set.class};\n    static {\n        typeRegistry.put(\"byte\", Byte.class);\n        typeRegistry.put(\"character\", Character.class);\n        typeRegistry.put(\"short\", Short.class);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "column": "56",
                    "severity": "error",
                    "message": "'{' at column 56 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..cb4b274c4a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/850/ProcessVariablesMapTypeRegistry.java\n@@ -57,59 +57,59 @@ public class ProcessVariablesMapTypeRegistry {\n                                                 JsonNode.class,\n                                                 List.class,\n                                                 Set.class};\n-    static {\n-        typeRegistry.put(\"byte\", Byte.class);\n-        typeRegistry.put(\"character\", Character.class);\n-        typeRegistry.put(\"short\", Short.class);\n-        typeRegistry.put(\"string\", String.class);\n-        typeRegistry.put(\"long\", Long.class);\n-        typeRegistry.put(\"integer\", Integer.class);\n-        typeRegistry.put(\"boolean\", Boolean.class);\n-        typeRegistry.put(\"double\", Double.class);\n-        typeRegistry.put(\"float\", Float.class);\n-        typeRegistry.put(\"date\", Date.class);\n-        typeRegistry.put(\"localdate\", LocalDate.class);\n-        typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n-        typeRegistry.put(\"json\", JsonNode.class);\n-        typeRegistry.put(\"map\", Map.class);\n-        typeRegistry.put(\"set\", Set.class);\n-        typeRegistry.put(\"list\", List.class);\n \n-        classRegistry.put(Byte.class, \"byte\");\n-        classRegistry.put(Character.class, \"character\");\n-        classRegistry.put(Short.class, \"short\");\n-        classRegistry.put(String.class, \"string\");\n-        classRegistry.put(Long.class, \"long\");\n-        classRegistry.put(Integer.class, \"integer\");\n-        classRegistry.put(Boolean.class, \"boolean\");\n-        classRegistry.put(Double.class, \"double\");\n-        classRegistry.put(Float.class, \"float\");\n-        classRegistry.put(Date.class, \"date\");\n-        classRegistry.put(LocalDate.class, \"localdate\");\n-        classRegistry.put(BigDecimal.class, \"bigdecimal\");\n-        classRegistry.put(JsonNode.class, \"json\");\n-        classRegistry.put(Map.class, \"map\");\n-        classRegistry.put(List.class, \"list\");\n-        classRegistry.put(Set.class, \"set\");\n-    }\n+                                                static { typeRegistry.put(\"byte\", Byte.class);\n+    typeRegistry.put(\"character\", Character.class);\n+    typeRegistry.put(\"short\", Short.class);\n+    typeRegistry.put(\"string\", String.class);\n+    typeRegistry.put(\"long\", Long.class);\n+    typeRegistry.put(\"integer\", Integer.class);\n+    typeRegistry.put(\"boolean\", Boolean.class);\n+    typeRegistry.put(\"double\", Double.class);\n+    typeRegistry.put(\"float\", Float.class);\n+    typeRegistry.put(\"date\", Date.class);\n+    typeRegistry.put(\"localdate\", LocalDate.class);\n+    typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n+    typeRegistry.put(\"json\", JsonNode.class);\n+    typeRegistry.put(\"map\", Map.class);\n+    typeRegistry.put(\"set\", Set.class);\n+    typeRegistry.put(\"list\", List.class);\n \n-    public static Class<?> forType(String type) {\n-        return typeRegistry.getOrDefault(type, Map.class);\n-    }\n+    classRegistry.put(Byte.class, \"byte\");\n+    classRegistry.put(Character.class, \"character\");\n+    classRegistry.put(Short.class, \"short\");\n+    classRegistry.put(String.class, \"string\");\n+    classRegistry.put(Long.class, \"long\");\n+    classRegistry.put(Integer.class, \"integer\");\n+    classRegistry.put(Boolean.class, \"boolean\");\n+    classRegistry.put(Double.class, \"double\");\n+    classRegistry.put(Float.class, \"float\");\n+    classRegistry.put(Date.class, \"date\");\n+    classRegistry.put(LocalDate.class, \"localdate\");\n+    classRegistry.put(BigDecimal.class, \"bigdecimal\");\n+    classRegistry.put(JsonNode.class, \"json\");\n+    classRegistry.put(Map.class, \"map\");\n+    classRegistry.put(List.class, \"list\");\n+    classRegistry.put(Set.class, \"set\");\n+}\n+\n+public static Class<?> forType(String type) {\n+    return typeRegistry.getOrDefault(type, Map.class);\n+}\n \n-    public static String forClass(Class<?> clazz) {\n-        return classRegistry.getOrDefault(clazz, \"map\");\n-    }\n+public static String forClass(Class<?> clazz) {\n+    return classRegistry.getOrDefault(clazz, \"map\");\n+}\n \n-    public static boolean isScalarType(Class<?> clazz) {\n-        return scalarTypes.contains(clazz);\n-    }\n+public static boolean isScalarType(Class<?> clazz) {\n+    return scalarTypes.contains(clazz);\n+}\n \n-    public static Optional<Class<?>> getContainerType(Class<?> clazz,\n-                                                      Object value) {\n-        return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n-                     .findFirst();\n-    }\n+public static Optional<Class<?>> getContainerType(Class<?> clazz,\n+                                                  Object value) {\n+    return Stream.of(containerTypes)\n+                 .filter(type -> type.isInstance(value))\n+                 .findFirst();\n+}\n \n }\n",
            "diff_size": 67
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..dfd6a0361b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/850/ProcessVariablesMapTypeRegistry.java\n@@ -34,29 +34,30 @@ public class ProcessVariablesMapTypeRegistry {\n     private static Map<String, Class<?>> typeRegistry = new HashMap<>();\n     private static Map<Class<?>, String> classRegistry = new HashMap<>();\n     private static List<Class<?>> scalarTypes = Arrays.asList(int.class,\n-                                                              byte.class,\n-                                                              short.class,\n-                                                              boolean.class,\n-                                                              long.class,\n-                                                              double.class,\n-                                                              float.class,\n-                                                              char.class,\n-                                                              Character.class,\n-                                                              Integer.class,\n-                                                              Byte.class,\n-                                                              Short.class,\n-                                                              Boolean.class,\n-                                                              Long.class,\n-                                                              Double.class,\n-                                                              Float.class,\n-                                                              BigDecimal.class,\n-                                                              Date.class,\n-                                                              String.class);\n+            byte.class,\n+            short.class,\n+            boolean.class,\n+            long.class,\n+            double.class,\n+            float.class,\n+            char.class,\n+            Character.class,\n+            Integer.class,\n+            Byte.class,\n+            Short.class,\n+            Boolean.class,\n+            Long.class,\n+            Double.class,\n+            Float.class,\n+            BigDecimal.class,\n+            Date.class,\n+            String.class);\n \n     private static Class<?>[] containerTypes = {Map.class,\n-                                                JsonNode.class,\n-                                                List.class,\n-                                                Set.class};\n+            JsonNode.class,\n+            List.class,\n+            Set.class};\n+\n     static {\n         typeRegistry.put(\"byte\", Byte.class);\n         typeRegistry.put(\"character\", Character.class);\n@@ -108,8 +109,8 @@ public class ProcessVariablesMapTypeRegistry {\n     public static Optional<Class<?>> getContainerType(Class<?> clazz,\n                                                       Object value) {\n         return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n-                     .findFirst();\n+                .filter(type -> type.isInstance(value))\n+                .findFirst();\n     }\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..97390bdeb4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/850/ProcessVariablesMapTypeRegistry.java\n@@ -33,8 +33,7 @@ public class ProcessVariablesMapTypeRegistry {\n \n     private static Map<String, Class<?>> typeRegistry = new HashMap<>();\n     private static Map<Class<?>, String> classRegistry = new HashMap<>();\n-    private static List<Class<?>> scalarTypes = Arrays.asList(int.class,\n-                                                              byte.class,\n+    private static List<Class<?>> scalarTypes = Arrays.asList(int.class, byte.class,\n                                                               short.class,\n                                                               boolean.class,\n                                                               long.class,\n@@ -53,11 +52,12 @@ public class ProcessVariablesMapTypeRegistry {\n                                                               Date.class,\n                                                               String.class);\n \n-    private static Class<?>[] containerTypes = {Map.class,\n+private static Class<?>[] containerTypes = { Map.class,\n                                                 JsonNode.class,\n                                                 List.class,\n-                                                Set.class};\n-    static {\n+                                                Set.class };\n+\n+static {\n         typeRegistry.put(\"byte\", Byte.class);\n         typeRegistry.put(\"character\", Character.class);\n         typeRegistry.put(\"short\", Short.class);\n@@ -107,9 +107,7 @@ public class ProcessVariablesMapTypeRegistry {\n \n     public static Optional<Class<?>> getContainerType(Class<?> clazz,\n                                                       Object value) {\n-        return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n+  return Stream.of(containerTypes).filter(type -> type.isInstance(value))\n                      .findFirst();\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 319).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..4b5c4a293a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/850/ProcessVariablesMapTypeRegistry.java\n@@ -26,71 +26,52 @@ import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Stream;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n \n+\n public class ProcessVariablesMapTypeRegistry {\n \n     private static Map<String, Class<?>> typeRegistry = new HashMap<>();\n+\n     private static Map<Class<?>, String> classRegistry = new HashMap<>();\n-    private static List<Class<?>> scalarTypes = Arrays.asList(int.class,\n-                                                              byte.class,\n-                                                              short.class,\n-                                                              boolean.class,\n-                                                              long.class,\n-                                                              double.class,\n-                                                              float.class,\n-                                                              char.class,\n-                                                              Character.class,\n-                                                              Integer.class,\n-                                                              Byte.class,\n-                                                              Short.class,\n-                                                              Boolean.class,\n-                                                              Long.class,\n-                                                              Double.class,\n-                                                              Float.class,\n-                                                              BigDecimal.class,\n-                                                              Date.class,\n-                                                              String.class);\n \n-    private static Class<?>[] containerTypes = {Map.class,\n-                                                JsonNode.class,\n-                                                List.class,\n-                                                Set.class};\n-    static {\n-        typeRegistry.put(\"byte\", Byte.class);\n-        typeRegistry.put(\"character\", Character.class);\n-        typeRegistry.put(\"short\", Short.class);\n-        typeRegistry.put(\"string\", String.class);\n-        typeRegistry.put(\"long\", Long.class);\n-        typeRegistry.put(\"integer\", Integer.class);\n-        typeRegistry.put(\"boolean\", Boolean.class);\n-        typeRegistry.put(\"double\", Double.class);\n-        typeRegistry.put(\"float\", Float.class);\n-        typeRegistry.put(\"date\", Date.class);\n-        typeRegistry.put(\"localdate\", LocalDate.class);\n-        typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n-        typeRegistry.put(\"json\", JsonNode.class);\n-        typeRegistry.put(\"map\", Map.class);\n-        typeRegistry.put(\"set\", Set.class);\n-        typeRegistry.put(\"list\", List.class);\n+    private static List<Class<?>> scalarTypes = Arrays.asList(int.class, byte.class, short.class, boolean.class, long.class, double.class, float.class, char.class, Character.class, Integer.class, Byte.class, Short.class, Boolean.class, Long.class, Double.class, Float.class, BigDecimal.class, Date.class, String.class);\n \n-        classRegistry.put(Byte.class, \"byte\");\n-        classRegistry.put(Character.class, \"character\");\n-        classRegistry.put(Short.class, \"short\");\n-        classRegistry.put(String.class, \"string\");\n-        classRegistry.put(Long.class, \"long\");\n-        classRegistry.put(Integer.class, \"integer\");\n-        classRegistry.put(Boolean.class, \"boolean\");\n-        classRegistry.put(Double.class, \"double\");\n-        classRegistry.put(Float.class, \"float\");\n-        classRegistry.put(Date.class, \"date\");\n-        classRegistry.put(LocalDate.class, \"localdate\");\n-        classRegistry.put(BigDecimal.class, \"bigdecimal\");\n-        classRegistry.put(JsonNode.class, \"json\");\n-        classRegistry.put(Map.class, \"map\");\n-        classRegistry.put(List.class, \"list\");\n-        classRegistry.put(Set.class, \"set\");\n+    private static Class<?>[] containerTypes = { Map.class, JsonNode.class, List.class, Set.class };\n+\n+    static {\n+    typeRegistry.put(\"byte\", Byte.class);\n+    typeRegistry.put(\"character\", Character.class);\n+    typeRegistry.put(\"short\", Short.class);\n+    typeRegistry.put(\"string\", String.class);\n+    typeRegistry.put(\"long\", Long.class);\n+    typeRegistry.put(\"integer\", Integer.class);\n+    typeRegistry.put(\"boolean\", Boolean.class);\n+    typeRegistry.put(\"double\", Double.class);\n+    typeRegistry.put(\"float\", Float.class);\n+    typeRegistry.put(\"date\", Date.class);\n+    typeRegistry.put(\"localdate\", LocalDate.class);\n+    typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n+    typeRegistry.put(\"json\", JsonNode.class);\n+    typeRegistry.put(\"map\", Map.class);\n+    typeRegistry.put(\"set\", Set.class);\n+    typeRegistry.put(\"list\", List.class);\n+    classRegistry.put(Byte.class, \"byte\");\n+    classRegistry.put(Character.class, \"character\");\n+    classRegistry.put(Short.class, \"short\");\n+    classRegistry.put(String.class, \"string\");\n+    classRegistry.put(Long.class, \"long\");\n+    classRegistry.put(Integer.class, \"integer\");\n+    classRegistry.put(Boolean.class, \"boolean\");\n+    classRegistry.put(Double.class, \"double\");\n+    classRegistry.put(Float.class, \"float\");\n+    classRegistry.put(Date.class, \"date\");\n+    classRegistry.put(LocalDate.class, \"localdate\");\n+    classRegistry.put(BigDecimal.class, \"bigdecimal\");\n+    classRegistry.put(JsonNode.class, \"json\");\n+    classRegistry.put(Map.class, \"map\");\n+    classRegistry.put(List.class, \"list\");\n+    classRegistry.put(Set.class, \"set\");\n     }\n \n     public static Class<?> forType(String type) {\n@@ -105,11 +86,7 @@ public class ProcessVariablesMapTypeRegistry {\n         return scalarTypes.contains(clazz);\n     }\n \n-    public static Optional<Class<?>> getContainerType(Class<?> clazz,\n-                                                      Object value) {\n-        return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n-                     .findFirst();\n+    public static Optional<Class<?>> getContainerType(Class<?> clazz, Object value) {\n+        return Stream.of(containerTypes).filter(type -> type.isInstance(value)).findFirst();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 85
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "column": "56",
                    "severity": "error",
                    "message": "'{' at column 56 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "61",
                    "column": "56",
                    "severity": "error",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..7a9f334a68 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/850/ProcessVariablesMapTypeRegistry.java\n@@ -57,59 +57,59 @@ public class ProcessVariablesMapTypeRegistry {\n                                                 JsonNode.class,\n                                                 List.class,\n                                                 Set.class};\n-    static {\n-        typeRegistry.put(\"byte\", Byte.class);\n-        typeRegistry.put(\"character\", Character.class);\n-        typeRegistry.put(\"short\", Short.class);\n-        typeRegistry.put(\"string\", String.class);\n-        typeRegistry.put(\"long\", Long.class);\n-        typeRegistry.put(\"integer\", Integer.class);\n-        typeRegistry.put(\"boolean\", Boolean.class);\n-        typeRegistry.put(\"double\", Double.class);\n-        typeRegistry.put(\"float\", Float.class);\n-        typeRegistry.put(\"date\", Date.class);\n-        typeRegistry.put(\"localdate\", LocalDate.class);\n-        typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n-        typeRegistry.put(\"json\", JsonNode.class);\n-        typeRegistry.put(\"map\", Map.class);\n-        typeRegistry.put(\"set\", Set.class);\n-        typeRegistry.put(\"list\", List.class);\n \n-        classRegistry.put(Byte.class, \"byte\");\n-        classRegistry.put(Character.class, \"character\");\n-        classRegistry.put(Short.class, \"short\");\n-        classRegistry.put(String.class, \"string\");\n-        classRegistry.put(Long.class, \"long\");\n-        classRegistry.put(Integer.class, \"integer\");\n-        classRegistry.put(Boolean.class, \"boolean\");\n-        classRegistry.put(Double.class, \"double\");\n-        classRegistry.put(Float.class, \"float\");\n-        classRegistry.put(Date.class, \"date\");\n-        classRegistry.put(LocalDate.class, \"localdate\");\n-        classRegistry.put(BigDecimal.class, \"bigdecimal\");\n-        classRegistry.put(JsonNode.class, \"json\");\n-        classRegistry.put(Map.class, \"map\");\n-        classRegistry.put(List.class, \"list\");\n-        classRegistry.put(Set.class, \"set\");\n-    }\n+                                                static {typeRegistry.put(\"byte\", Byte.class);\n+    typeRegistry.put(\"character\", Character.class);\n+    typeRegistry.put(\"short\", Short.class);\n+    typeRegistry.put(\"string\", String.class);\n+    typeRegistry.put(\"long\", Long.class);\n+    typeRegistry.put(\"integer\", Integer.class);\n+    typeRegistry.put(\"boolean\", Boolean.class);\n+    typeRegistry.put(\"double\", Double.class);\n+    typeRegistry.put(\"float\", Float.class);\n+    typeRegistry.put(\"date\", Date.class);\n+    typeRegistry.put(\"localdate\", LocalDate.class);\n+    typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n+    typeRegistry.put(\"json\", JsonNode.class);\n+    typeRegistry.put(\"map\", Map.class);\n+    typeRegistry.put(\"set\", Set.class);\n+    typeRegistry.put(\"list\", List.class);\n \n-    public static Class<?> forType(String type) {\n-        return typeRegistry.getOrDefault(type, Map.class);\n-    }\n+    classRegistry.put(Byte.class, \"byte\");\n+    classRegistry.put(Character.class, \"character\");\n+    classRegistry.put(Short.class, \"short\");\n+    classRegistry.put(String.class, \"string\");\n+    classRegistry.put(Long.class, \"long\");\n+    classRegistry.put(Integer.class, \"integer\");\n+    classRegistry.put(Boolean.class, \"boolean\");\n+    classRegistry.put(Double.class, \"double\");\n+    classRegistry.put(Float.class, \"float\");\n+    classRegistry.put(Date.class, \"date\");\n+    classRegistry.put(LocalDate.class, \"localdate\");\n+    classRegistry.put(BigDecimal.class, \"bigdecimal\");\n+    classRegistry.put(JsonNode.class, \"json\");\n+    classRegistry.put(Map.class, \"map\");\n+    classRegistry.put(List.class, \"list\");\n+    classRegistry.put(Set.class, \"set\");\n+}\n+\n+public static Class<?> forType(String type) {\n+    return typeRegistry.getOrDefault(type, Map.class);\n+}\n \n-    public static String forClass(Class<?> clazz) {\n-        return classRegistry.getOrDefault(clazz, \"map\");\n-    }\n+public static String forClass(Class<?> clazz) {\n+    return classRegistry.getOrDefault(clazz, \"map\");\n+}\n \n-    public static boolean isScalarType(Class<?> clazz) {\n-        return scalarTypes.contains(clazz);\n-    }\n+public static boolean isScalarType(Class<?> clazz) {\n+    return scalarTypes.contains(clazz);\n+}\n \n-    public static Optional<Class<?>> getContainerType(Class<?> clazz,\n-                                                      Object value) {\n-        return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n-                     .findFirst();\n-    }\n+public static Optional<Class<?>> getContainerType(Class<?> clazz,\n+                                                  Object value) {\n+    return Stream.of(containerTypes)\n+                 .filter(type -> type.isInstance(value))\n+                 .findFirst();\n+}\n \n }\n",
            "diff_size": 67
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "column": "56",
                    "severity": "error",
                    "message": "'{' at column 56 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/850/ProcessVariablesMapTypeRegistry.java\nindex e79dcc0e57..cb4b274c4a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/850/ProcessVariablesMapTypeRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/850/ProcessVariablesMapTypeRegistry.java\n@@ -57,59 +57,59 @@ public class ProcessVariablesMapTypeRegistry {\n                                                 JsonNode.class,\n                                                 List.class,\n                                                 Set.class};\n-    static {\n-        typeRegistry.put(\"byte\", Byte.class);\n-        typeRegistry.put(\"character\", Character.class);\n-        typeRegistry.put(\"short\", Short.class);\n-        typeRegistry.put(\"string\", String.class);\n-        typeRegistry.put(\"long\", Long.class);\n-        typeRegistry.put(\"integer\", Integer.class);\n-        typeRegistry.put(\"boolean\", Boolean.class);\n-        typeRegistry.put(\"double\", Double.class);\n-        typeRegistry.put(\"float\", Float.class);\n-        typeRegistry.put(\"date\", Date.class);\n-        typeRegistry.put(\"localdate\", LocalDate.class);\n-        typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n-        typeRegistry.put(\"json\", JsonNode.class);\n-        typeRegistry.put(\"map\", Map.class);\n-        typeRegistry.put(\"set\", Set.class);\n-        typeRegistry.put(\"list\", List.class);\n \n-        classRegistry.put(Byte.class, \"byte\");\n-        classRegistry.put(Character.class, \"character\");\n-        classRegistry.put(Short.class, \"short\");\n-        classRegistry.put(String.class, \"string\");\n-        classRegistry.put(Long.class, \"long\");\n-        classRegistry.put(Integer.class, \"integer\");\n-        classRegistry.put(Boolean.class, \"boolean\");\n-        classRegistry.put(Double.class, \"double\");\n-        classRegistry.put(Float.class, \"float\");\n-        classRegistry.put(Date.class, \"date\");\n-        classRegistry.put(LocalDate.class, \"localdate\");\n-        classRegistry.put(BigDecimal.class, \"bigdecimal\");\n-        classRegistry.put(JsonNode.class, \"json\");\n-        classRegistry.put(Map.class, \"map\");\n-        classRegistry.put(List.class, \"list\");\n-        classRegistry.put(Set.class, \"set\");\n-    }\n+                                                static { typeRegistry.put(\"byte\", Byte.class);\n+    typeRegistry.put(\"character\", Character.class);\n+    typeRegistry.put(\"short\", Short.class);\n+    typeRegistry.put(\"string\", String.class);\n+    typeRegistry.put(\"long\", Long.class);\n+    typeRegistry.put(\"integer\", Integer.class);\n+    typeRegistry.put(\"boolean\", Boolean.class);\n+    typeRegistry.put(\"double\", Double.class);\n+    typeRegistry.put(\"float\", Float.class);\n+    typeRegistry.put(\"date\", Date.class);\n+    typeRegistry.put(\"localdate\", LocalDate.class);\n+    typeRegistry.put(\"bigdecimal\", BigDecimal.class);\n+    typeRegistry.put(\"json\", JsonNode.class);\n+    typeRegistry.put(\"map\", Map.class);\n+    typeRegistry.put(\"set\", Set.class);\n+    typeRegistry.put(\"list\", List.class);\n \n-    public static Class<?> forType(String type) {\n-        return typeRegistry.getOrDefault(type, Map.class);\n-    }\n+    classRegistry.put(Byte.class, \"byte\");\n+    classRegistry.put(Character.class, \"character\");\n+    classRegistry.put(Short.class, \"short\");\n+    classRegistry.put(String.class, \"string\");\n+    classRegistry.put(Long.class, \"long\");\n+    classRegistry.put(Integer.class, \"integer\");\n+    classRegistry.put(Boolean.class, \"boolean\");\n+    classRegistry.put(Double.class, \"double\");\n+    classRegistry.put(Float.class, \"float\");\n+    classRegistry.put(Date.class, \"date\");\n+    classRegistry.put(LocalDate.class, \"localdate\");\n+    classRegistry.put(BigDecimal.class, \"bigdecimal\");\n+    classRegistry.put(JsonNode.class, \"json\");\n+    classRegistry.put(Map.class, \"map\");\n+    classRegistry.put(List.class, \"list\");\n+    classRegistry.put(Set.class, \"set\");\n+}\n+\n+public static Class<?> forType(String type) {\n+    return typeRegistry.getOrDefault(type, Map.class);\n+}\n \n-    public static String forClass(Class<?> clazz) {\n-        return classRegistry.getOrDefault(clazz, \"map\");\n-    }\n+public static String forClass(Class<?> clazz) {\n+    return classRegistry.getOrDefault(clazz, \"map\");\n+}\n \n-    public static boolean isScalarType(Class<?> clazz) {\n-        return scalarTypes.contains(clazz);\n-    }\n+public static boolean isScalarType(Class<?> clazz) {\n+    return scalarTypes.contains(clazz);\n+}\n \n-    public static Optional<Class<?>> getContainerType(Class<?> clazz,\n-                                                      Object value) {\n-        return Stream.of(containerTypes)\n-                     .filter(type -> type.isInstance(value))\n-                     .findFirst();\n-    }\n+public static Optional<Class<?>> getContainerType(Class<?> clazz,\n+                                                  Object value) {\n+    return Stream.of(containerTypes)\n+                 .filter(type -> type.isInstance(value))\n+                 .findFirst();\n+}\n \n }\n",
            "diff_size": 67
        }
    ]
}