{
    "error_id": "456",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n\n  private static RootDeserializer<RequestHeader> rootDeserializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n      .createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n\n  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/456/RequestHeader.java\nindex 1835e25b96..29187a9bb4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/456/RequestHeader.java\n@@ -33,8 +33,9 @@ public class RequestHeader {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<RequestHeader> rootDeserializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n-      .createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n+  private static RootDeserializer<RequestHeader> rootDeserializer =\n+      protoMapperFactory.createFromName(\"RequestHeader.proto\")\n+          .createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n       .createRootSerializer(\"RequestHeader\", RequestHeader.class);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/456/RequestHeader.java\nindex 1835e25b96..94e043b36c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/456/RequestHeader.java\n@@ -109,4 +109,4 @@ public class RequestHeader {\n   public void setContext(Map<String, String> context) {\n     this.context = context;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/456/RequestHeader.java\nindex 1835e25b96..ced6c8ae41 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/456/RequestHeader.java\n@@ -18,95 +18,94 @@\n package org.apache.servicecomb.transport.highway.message;\n \n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.protobuf.ProtoMapperFactory;\n import org.apache.servicecomb.foundation.protobuf.RootDeserializer;\n import org.apache.servicecomb.foundation.protobuf.RootSerializer;\n-\n import io.vertx.core.buffer.Buffer;\n \n /**\n  * tag\u7684\u7f3a\u5931\u3001\u4e71\u5e8f\uff0c\u662f\u56e0\u4e3a\u8981\u517c\u5bb9\u5386\u53f2\u7248\u672c\n  * 1.tag(4)\uff0c\u662f\u5386\u53f2\u7248\u672c\u4e2d\u7684\u538b\u7f29\u7b97\u6cd5\u540d\uff0c\u8f6c\u79fb\u5230login\u6d88\u606f\u4e2d\u4f20\u9012\n  */\n+\n public class RequestHeader {\n   // TODO : WEAK refactor reuse\n-  private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n+    private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<RequestHeader> rootDeserializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n-      .createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n+    private static RootDeserializer<RequestHeader> rootDeserializer = protoMapperFactory.createFromName(\"RequestHeader.proto\").createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n \n-  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n-      .createRootSerializer(\"RequestHeader\", RequestHeader.class);\n+    private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\").createRootSerializer(\"RequestHeader\", RequestHeader.class);\n \n-  public static RootSerializer getRootSerializer() {\n+    public static RootSerializer getRootSerializer() {\n     return rootSerializer;\n-  }\n+    }\n \n-  public static RequestHeader readObject(Buffer bodyBuffer) throws Exception {\n+    public static RequestHeader readObject(Buffer bodyBuffer) throws Exception {\n     return rootDeserializer.deserialize(bodyBuffer.getBytes());\n-  }\n+    }\n \n-  private int msgType;\n+    private int msgType;\n \n   // \u8fd0\u884c\u65f6\u5fc5\u987b\u7684\u6570\u636e\uff0c\u6bd4\u5982body\u662f\u5426\u538b\u7f29\n   // \u9884\u7559\u7279\u6027\u9009\u9879\n-  private int flags;\n \n-  private String destMicroservice;\n+    private int flags;\n \n-  private String schemaId;\n+    private String destMicroservice;\n \n-  private String operationName;\n+    private String schemaId;\n \n-  private Map<String, String> context;\n+    private String operationName;\n+\n+    private Map<String, String> context;\n \n   //CHECKSTYLE:ON\n-  public int getMsgType() {\n+\n+    public int getMsgType() {\n     return msgType;\n-  }\n+    }\n \n-  public void setMsgType(int msgType) {\n+    public void setMsgType(int msgType) {\n     this.msgType = msgType;\n-  }\n+    }\n \n-  public String getDestMicroservice() {\n+    public String getDestMicroservice() {\n     return destMicroservice;\n-  }\n+    }\n \n-  public void setDestMicroservice(String destMicroservice) {\n+    public void setDestMicroservice(String destMicroservice) {\n     this.destMicroservice = destMicroservice;\n-  }\n+    }\n \n-  public int getFlags() {\n+    public int getFlags() {\n     return flags;\n-  }\n+    }\n \n-  public void setFlags(int flags) {\n+    public void setFlags(int flags) {\n     this.flags = flags;\n-  }\n+    }\n \n-  public String getSchemaId() {\n+    public String getSchemaId() {\n     return schemaId;\n-  }\n+    }\n \n-  public void setSchemaId(String schemaId) {\n+    public void setSchemaId(String schemaId) {\n     this.schemaId = schemaId;\n-  }\n+    }\n \n-  public String getOperationName() {\n+    public String getOperationName() {\n     return operationName;\n-  }\n+    }\n \n-  public void setOperationName(String operationName) {\n+    public void setOperationName(String operationName) {\n     this.operationName = operationName;\n-  }\n+    }\n \n-  public Map<String, String> getContext() {\n+    public Map<String, String> getContext() {\n     return context;\n-  }\n+    }\n \n-  public void setContext(Map<String, String> context) {\n+    public void setContext(Map<String, String> context) {\n     this.context = context;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "column": "18",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/456/RequestHeader.java\nindex 1835e25b96..60e2cf8e29 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/456/RequestHeader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/456/RequestHeader.java\n@@ -33,80 +33,80 @@ public class RequestHeader {\n   // TODO : WEAK refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<RequestHeader> rootDeserializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n-      .createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n+  private static RootDeserializer <\n+    RequestHeader > rootDeserializer = protoMapperFactory .createFromName(\"RequestHeader.proto\").createRootDeserializer(\"RequestHeader\", RequestHeader.class);\n \n-  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n-      .createRootSerializer(\"RequestHeader\", RequestHeader.class);\n+private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"RequestHeader.proto\")\n+    .createRootSerializer(\"RequestHeader\", RequestHeader.class);\n \n-  public static RootSerializer getRootSerializer() {\n-    return rootSerializer;\n-  }\n+public static RootSerializer getRootSerializer() {\n+  return rootSerializer;\n+}\n \n-  public static RequestHeader readObject(Buffer bodyBuffer) throws Exception {\n-    return rootDeserializer.deserialize(bodyBuffer.getBytes());\n-  }\n+public static RequestHeader readObject(Buffer bodyBuffer) throws Exception {\n+  return rootDeserializer.deserialize(bodyBuffer.getBytes());\n+}\n \n-  private int msgType;\n+private int msgType;\n \n-  // \u8fd0\u884c\u65f6\u5fc5\u987b\u7684\u6570\u636e\uff0c\u6bd4\u5982body\u662f\u5426\u538b\u7f29\n-  // \u9884\u7559\u7279\u6027\u9009\u9879\n-  private int flags;\n+// \u8fd0\u884c\u65f6\u5fc5\u987b\u7684\u6570\u636e\uff0c\u6bd4\u5982body\u662f\u5426\u538b\u7f29\n+// \u9884\u7559\u7279\u6027\u9009\u9879\n+private int flags;\n \n-  private String destMicroservice;\n+private String destMicroservice;\n \n-  private String schemaId;\n+private String schemaId;\n \n-  private String operationName;\n+private String operationName;\n \n-  private Map<String, String> context;\n+private Map<String, String> context;\n \n-  //CHECKSTYLE:ON\n-  public int getMsgType() {\n-    return msgType;\n-  }\n+//CHECKSTYLE:ON\n+public int getMsgType() {\n+  return msgType;\n+}\n \n-  public void setMsgType(int msgType) {\n-    this.msgType = msgType;\n-  }\n+public void setMsgType(int msgType) {\n+  this.msgType = msgType;\n+}\n \n-  public String getDestMicroservice() {\n-    return destMicroservice;\n-  }\n+public String getDestMicroservice() {\n+  return destMicroservice;\n+}\n \n-  public void setDestMicroservice(String destMicroservice) {\n-    this.destMicroservice = destMicroservice;\n-  }\n+public void setDestMicroservice(String destMicroservice) {\n+  this.destMicroservice = destMicroservice;\n+}\n \n-  public int getFlags() {\n-    return flags;\n-  }\n+public int getFlags() {\n+  return flags;\n+}\n \n-  public void setFlags(int flags) {\n-    this.flags = flags;\n-  }\n+public void setFlags(int flags) {\n+  this.flags = flags;\n+}\n \n-  public String getSchemaId() {\n-    return schemaId;\n-  }\n+public String getSchemaId() {\n+  return schemaId;\n+}\n \n-  public void setSchemaId(String schemaId) {\n-    this.schemaId = schemaId;\n-  }\n+public void setSchemaId(String schemaId) {\n+  this.schemaId = schemaId;\n+}\n \n-  public String getOperationName() {\n-    return operationName;\n-  }\n+public String getOperationName() {\n+  return operationName;\n+}\n \n-  public void setOperationName(String operationName) {\n-    this.operationName = operationName;\n-  }\n+public void setOperationName(String operationName) {\n+  this.operationName = operationName;\n+}\n \n-  public Map<String, String> getContext() {\n-    return context;\n-  }\n+public Map<String, String> getContext() {\n+  return context;\n+}\n \n-  public void setContext(Map<String, String> context) {\n-    this.context = context;\n-  }\n+public void setContext(Map<String, String> context) {\n+  this.context = context;\n+}\n }\n",
            "diff_size": 55
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}