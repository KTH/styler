{
    "error_id": "194",
    "information": {
        "errors": [
            {
                "line": "636",
                "column": "64",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n    return\n        Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n        Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/194/PdfSaveOptionsData.java\nindex e239ec60c4..2156be8feb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/194/PdfSaveOptionsData.java\n@@ -633,7 +633,7 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n+    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData) o;\n     return\n         Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n         Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/194/PdfSaveOptionsData.java\nindex e239ec60c4..a139ac7045 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/194/PdfSaveOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,620 +50,646 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"container class for pdf save options.\")\n public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n-    /**\n-     * Gets or sets determines how bookmarks in headers/footers are exported.\n-     * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\n-     */\n-    @JsonAdapter(HeaderFooterBookmarksExportModeEnum.Adapter.class)\n-    public enum HeaderFooterBookmarksExportModeEnum {\n-        NONE(\"None\"),\n-        FIRST(\"First\"),\n-        ALL(\"All\");\n-\n-        private String value;\n-\n-        HeaderFooterBookmarksExportModeEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets determines how bookmarks in headers/footers are exported.\n+   * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\n+   */\n+  @JsonAdapter(HeaderFooterBookmarksExportModeEnum.Adapter.class)\n+  public enum HeaderFooterBookmarksExportModeEnum {\n+    NONE(\"None\"),\n+    FIRST(\"First\"),\n+    ALL(\"All\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    HeaderFooterBookmarksExportModeEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static HeaderFooterBookmarksExportModeEnum fromValue(String text) {\n-            for (HeaderFooterBookmarksExportModeEnum b : HeaderFooterBookmarksExportModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< HeaderFooterBookmarksExportModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HeaderFooterBookmarksExportModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HeaderFooterBookmarksExportModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HeaderFooterBookmarksExportModeEnum.fromValue(String.valueOf(value));\n-            }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static HeaderFooterBookmarksExportModeEnum fromValue(String text) {\n+      for (HeaderFooterBookmarksExportModeEnum b : HeaderFooterBookmarksExportModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"Compliance\")\n-    private String compliance = null;\n+    public static class Adapter extends TypeAdapter<HeaderFooterBookmarksExportModeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final HeaderFooterBookmarksExportModeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"CreateNoteHyperlinks\")\n-    private Boolean createNoteHyperlinks = null;\n+      @Override\n+      public HeaderFooterBookmarksExportModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HeaderFooterBookmarksExportModeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"CustomPropertiesExport\")\n-    private String customPropertiesExport = null;\n+  @SerializedName(\"Compliance\")\n+  private String compliance = null;\n \n-    @SerializedName(\"DigitalSignatureDetails\")\n-    private PdfDigitalSignatureDetailsData digitalSignatureDetails = null;\n+  @SerializedName(\"CreateNoteHyperlinks\")\n+  private Boolean createNoteHyperlinks = null;\n \n-    @SerializedName(\"DisplayDocTitle\")\n-    private Boolean displayDocTitle = null;\n+  @SerializedName(\"CustomPropertiesExport\")\n+  private String customPropertiesExport = null;\n \n-    @SerializedName(\"DownsampleOptions\")\n-    private DownsampleOptionsData downsampleOptions = null;\n+  @SerializedName(\"DigitalSignatureDetails\")\n+  private PdfDigitalSignatureDetailsData digitalSignatureDetails = null;\n \n-    @SerializedName(\"EmbedFullFonts\")\n-    private Boolean embedFullFonts = null;\n+  @SerializedName(\"DisplayDocTitle\")\n+  private Boolean displayDocTitle = null;\n \n-    @SerializedName(\"EncryptionDetails\")\n-    private PdfEncryptionDetailsData encryptionDetails = null;\n+  @SerializedName(\"DownsampleOptions\")\n+  private DownsampleOptionsData downsampleOptions = null;\n \n-    @SerializedName(\"EscapeUri\")\n-    private Boolean escapeUri = null;\n+  @SerializedName(\"EmbedFullFonts\")\n+  private Boolean embedFullFonts = null;\n \n-    @SerializedName(\"ExportDocumentStructure\")\n-    private Boolean exportDocumentStructure = null;\n+  @SerializedName(\"EncryptionDetails\")\n+  private PdfEncryptionDetailsData encryptionDetails = null;\n \n-    @SerializedName(\"FontEmbeddingMode\")\n-    private String fontEmbeddingMode = null;\n+  @SerializedName(\"EscapeUri\")\n+  private Boolean escapeUri = null;\n \n-    @SerializedName(\"HeaderFooterBookmarksExportMode\")\n-    private HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode = null;\n+  @SerializedName(\"ExportDocumentStructure\")\n+  private Boolean exportDocumentStructure = null;\n \n-    @SerializedName(\"ImageColorSpaceExportMode\")\n-    private String imageColorSpaceExportMode = null;\n+  @SerializedName(\"FontEmbeddingMode\")\n+  private String fontEmbeddingMode = null;\n \n-    @SerializedName(\"ImageCompression\")\n-    private String imageCompression = null;\n+  @SerializedName(\"HeaderFooterBookmarksExportMode\")\n+  private HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode = null;\n \n-    @SerializedName(\"InterpolateImages\")\n-    private Boolean interpolateImages = null;\n+  @SerializedName(\"ImageColorSpaceExportMode\")\n+  private String imageColorSpaceExportMode = null;\n \n-    @SerializedName(\"OpenHyperlinksInNewWindow\")\n-    private Boolean openHyperlinksInNewWindow = null;\n+  @SerializedName(\"ImageCompression\")\n+  private String imageCompression = null;\n \n-    @SerializedName(\"OutlineOptions\")\n-    private OutlineOptionsData outlineOptions = null;\n+  @SerializedName(\"InterpolateImages\")\n+  private Boolean interpolateImages = null;\n \n-    @SerializedName(\"PageMode\")\n-    private String pageMode = null;\n+  @SerializedName(\"OpenHyperlinksInNewWindow\")\n+  private Boolean openHyperlinksInNewWindow = null;\n \n-    @SerializedName(\"PreblendImages\")\n-    private Boolean preblendImages = null;\n+  @SerializedName(\"OutlineOptions\")\n+  private OutlineOptionsData outlineOptions = null;\n \n-    @SerializedName(\"PreserveFormFields\")\n-    private Boolean preserveFormFields = null;\n+  @SerializedName(\"PageMode\")\n+  private String pageMode = null;\n \n-    @SerializedName(\"TextCompression\")\n-    private String textCompression = null;\n+  @SerializedName(\"PreblendImages\")\n+  private Boolean preblendImages = null;\n \n-    @SerializedName(\"UseBookFoldPrintingSettings\")\n-    private Boolean useBookFoldPrintingSettings = null;\n+  @SerializedName(\"PreserveFormFields\")\n+  private Boolean preserveFormFields = null;\n \n-    @SerializedName(\"UseCoreFonts\")\n-    private Boolean useCoreFonts = null;\n+  @SerializedName(\"TextCompression\")\n+  private String textCompression = null;\n \n-    @SerializedName(\"ZoomBehavior\")\n-    private String zoomBehavior = null;\n+  @SerializedName(\"UseBookFoldPrintingSettings\")\n+  private Boolean useBookFoldPrintingSettings = null;\n \n-    @SerializedName(\"ZoomFactor\")\n-    private Integer zoomFactor = null;\n-    public PdfSaveOptionsData compliance(String compliance) {\n-        this.compliance = compliance;\n-        return this;\n-    }\n+  @SerializedName(\"UseCoreFonts\")\n+  private Boolean useCoreFonts = null;\n \n-    /**\n-     * Gets or sets specifies the PDF standards compliance level for output documents.\n-    * @return compliance\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the PDF standards compliance level for output documents.\")\n-    public String getCompliance() {\n-        return compliance;\n-    }\n+  @SerializedName(\"ZoomBehavior\")\n+  private String zoomBehavior = null;\n \n-    public void setCompliance(String compliance) {\n-        this.compliance = compliance;\n-    }\n+  @SerializedName(\"ZoomFactor\")\n+  private Integer zoomFactor = null;\n \n-    public PdfSaveOptionsData createNoteHyperlinks(Boolean createNoteHyperlinks) {\n-        this.createNoteHyperlinks = createNoteHyperlinks;\n-        return this;\n-    }\n+  public PdfSaveOptionsData compliance(String compliance) {\n+    this.compliance = compliance;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks.\n-     * When clicked the hyperlink will lead to the corresponding footnote/endnote.\n-     * Default is false.\n-    * @return createNoteHyperlinks\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks. When clicked the hyperlink will lead to the corresponding footnote/endnote. Default is false.\")\n-    public Boolean getCreateNoteHyperlinks() {\n-        return createNoteHyperlinks;\n-    }\n+  /**\n+   * Gets or sets specifies the PDF standards compliance level for output documents.\n+   *\n+   * @return compliance\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the PDF standards compliance level for output documents.\")\n+  public String getCompliance() {\n+    return compliance;\n+  }\n \n-    public void setCreateNoteHyperlinks(Boolean createNoteHyperlinks) {\n-        this.createNoteHyperlinks = createNoteHyperlinks;\n-    }\n+  public void setCompliance(String compliance) {\n+    this.compliance = compliance;\n+  }\n \n-    public PdfSaveOptionsData customPropertiesExport(String customPropertiesExport) {\n-        this.customPropertiesExport = customPropertiesExport;\n-        return this;\n-    }\n+  public PdfSaveOptionsData createNoteHyperlinks(Boolean createNoteHyperlinks) {\n+    this.createNoteHyperlinks = createNoteHyperlinks;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file.\n-     * Default value is None.\n-    * @return customPropertiesExport\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file. Default value is None.\")\n-    public String getCustomPropertiesExport() {\n-        return customPropertiesExport;\n-    }\n+  /**\n+   * Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks.\n+   * When clicked the hyperlink will lead to the corresponding footnote/endnote.\n+   * Default is false.\n+   *\n+   * @return createNoteHyperlinks\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks. When clicked the hyperlink will lead to the corresponding footnote/endnote. Default is false.\")\n+  public Boolean getCreateNoteHyperlinks() {\n+    return createNoteHyperlinks;\n+  }\n \n-    public void setCustomPropertiesExport(String customPropertiesExport) {\n-        this.customPropertiesExport = customPropertiesExport;\n-    }\n+  public void setCreateNoteHyperlinks(Boolean createNoteHyperlinks) {\n+    this.createNoteHyperlinks = createNoteHyperlinks;\n+  }\n \n-    public PdfSaveOptionsData digitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n-        this.digitalSignatureDetails = digitalSignatureDetails;\n-        return this;\n-    }\n+  public PdfSaveOptionsData customPropertiesExport(String customPropertiesExport) {\n+    this.customPropertiesExport = customPropertiesExport;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies the details for signing the output PDF document.\n-    * @return digitalSignatureDetails\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the details for signing the output PDF document.\")\n-    public PdfDigitalSignatureDetailsData getDigitalSignatureDetails() {\n-        return digitalSignatureDetails;\n-    }\n+  /**\n+   * Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file.\n+   * Default value is None.\n+   *\n+   * @return customPropertiesExport\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file. Default value is None.\")\n+  public String getCustomPropertiesExport() {\n+    return customPropertiesExport;\n+  }\n \n-    public void setDigitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n-        this.digitalSignatureDetails = digitalSignatureDetails;\n-    }\n+  public void setCustomPropertiesExport(String customPropertiesExport) {\n+    this.customPropertiesExport = customPropertiesExport;\n+  }\n \n-    public PdfSaveOptionsData displayDocTitle(Boolean displayDocTitle) {\n-        this.displayDocTitle = displayDocTitle;\n-        return this;\n-    }\n+  public PdfSaveOptionsData digitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n+    this.digitalSignatureDetails = digitalSignatureDetails;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\n-    * @return displayDocTitle\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\")\n-    public Boolean getDisplayDocTitle() {\n-        return displayDocTitle;\n-    }\n+  /**\n+   * Gets or sets specifies the details for signing the output PDF document.\n+   *\n+   * @return digitalSignatureDetails\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the details for signing the output PDF document.\")\n+  public PdfDigitalSignatureDetailsData getDigitalSignatureDetails() {\n+    return digitalSignatureDetails;\n+  }\n \n-    public void setDisplayDocTitle(Boolean displayDocTitle) {\n-        this.displayDocTitle = displayDocTitle;\n-    }\n+  public void setDigitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n+    this.digitalSignatureDetails = digitalSignatureDetails;\n+  }\n \n-    public PdfSaveOptionsData downsampleOptions(DownsampleOptionsData downsampleOptions) {\n-        this.downsampleOptions = downsampleOptions;\n-        return this;\n-    }\n+  public PdfSaveOptionsData displayDocTitle(Boolean displayDocTitle) {\n+    this.displayDocTitle = displayDocTitle;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets allows to specify downsample options.\n-    * @return downsampleOptions\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets allows to specify downsample options.\")\n-    public DownsampleOptionsData getDownsampleOptions() {\n-        return downsampleOptions;\n-    }\n+  /**\n+   * Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\n+   *\n+   * @return displayDocTitle\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\")\n+  public Boolean getDisplayDocTitle() {\n+    return displayDocTitle;\n+  }\n \n-    public void setDownsampleOptions(DownsampleOptionsData downsampleOptions) {\n-        this.downsampleOptions = downsampleOptions;\n-    }\n+  public void setDisplayDocTitle(Boolean displayDocTitle) {\n+    this.displayDocTitle = displayDocTitle;\n+  }\n \n-    public PdfSaveOptionsData embedFullFonts(Boolean embedFullFonts) {\n-        this.embedFullFonts = embedFullFonts;\n-        return this;\n-    }\n+  public PdfSaveOptionsData downsampleOptions(DownsampleOptionsData downsampleOptions) {\n+    this.downsampleOptions = downsampleOptions;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets controls how fonts are embedded into the resulting PDF documents.\n-    * @return embedFullFonts\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets controls how fonts are embedded into the resulting PDF documents.\")\n-    public Boolean getEmbedFullFonts() {\n-        return embedFullFonts;\n-    }\n+  /**\n+   * Gets or sets allows to specify downsample options.\n+   *\n+   * @return downsampleOptions\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets allows to specify downsample options.\")\n+  public DownsampleOptionsData getDownsampleOptions() {\n+    return downsampleOptions;\n+  }\n \n-    public void setEmbedFullFonts(Boolean embedFullFonts) {\n-        this.embedFullFonts = embedFullFonts;\n-    }\n+  public void setDownsampleOptions(DownsampleOptionsData downsampleOptions) {\n+    this.downsampleOptions = downsampleOptions;\n+  }\n \n-    public PdfSaveOptionsData encryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n-        this.encryptionDetails = encryptionDetails;\n-        return this;\n-    }\n+  public PdfSaveOptionsData embedFullFonts(Boolean embedFullFonts) {\n+    this.embedFullFonts = embedFullFonts;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies the details for encrypting the output PDF document.\n-    * @return encryptionDetails\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the details for encrypting the output PDF document.\")\n-    public PdfEncryptionDetailsData getEncryptionDetails() {\n-        return encryptionDetails;\n-    }\n+  /**\n+   * Gets or sets controls how fonts are embedded into the resulting PDF documents.\n+   *\n+   * @return embedFullFonts\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets controls how fonts are embedded into the resulting PDF documents.\")\n+  public Boolean getEmbedFullFonts() {\n+    return embedFullFonts;\n+  }\n \n-    public void setEncryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n-        this.encryptionDetails = encryptionDetails;\n-    }\n+  public void setEmbedFullFonts(Boolean embedFullFonts) {\n+    this.embedFullFonts = embedFullFonts;\n+  }\n \n-    public PdfSaveOptionsData escapeUri(Boolean escapeUri) {\n-        this.escapeUri = escapeUri;\n-        return this;\n-    }\n+  public PdfSaveOptionsData encryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n+    this.encryptionDetails = encryptionDetails;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets a flag specifying whether URI should be escaped before writing.\n-    * @return escapeUri\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a flag specifying whether URI should be escaped before writing.\")\n-    public Boolean getEscapeUri() {\n-        return escapeUri;\n-    }\n+  /**\n+   * Gets or sets specifies the details for encrypting the output PDF document.\n+   *\n+   * @return encryptionDetails\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the details for encrypting the output PDF document.\")\n+  public PdfEncryptionDetailsData getEncryptionDetails() {\n+    return encryptionDetails;\n+  }\n \n-    public void setEscapeUri(Boolean escapeUri) {\n-        this.escapeUri = escapeUri;\n-    }\n+  public void setEncryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n+    this.encryptionDetails = encryptionDetails;\n+  }\n \n-    public PdfSaveOptionsData exportDocumentStructure(Boolean exportDocumentStructure) {\n-        this.exportDocumentStructure = exportDocumentStructure;\n-        return this;\n-    }\n+  public PdfSaveOptionsData escapeUri(Boolean escapeUri) {\n+    this.escapeUri = escapeUri;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines whether or not to export document structure.\n-    * @return exportDocumentStructure\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines whether or not to export document structure.\")\n-    public Boolean getExportDocumentStructure() {\n-        return exportDocumentStructure;\n-    }\n+  /**\n+   * Gets or sets a flag specifying whether URI should be escaped before writing.\n+   *\n+   * @return escapeUri\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a flag specifying whether URI should be escaped before writing.\")\n+  public Boolean getEscapeUri() {\n+    return escapeUri;\n+  }\n \n-    public void setExportDocumentStructure(Boolean exportDocumentStructure) {\n-        this.exportDocumentStructure = exportDocumentStructure;\n-    }\n+  public void setEscapeUri(Boolean escapeUri) {\n+    this.escapeUri = escapeUri;\n+  }\n \n-    public PdfSaveOptionsData fontEmbeddingMode(String fontEmbeddingMode) {\n-        this.fontEmbeddingMode = fontEmbeddingMode;\n-        return this;\n-    }\n+  public PdfSaveOptionsData exportDocumentStructure(Boolean exportDocumentStructure) {\n+    this.exportDocumentStructure = exportDocumentStructure;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies the font embedding mode.\n-    * @return fontEmbeddingMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies the font embedding mode.\")\n-    public String getFontEmbeddingMode() {\n-        return fontEmbeddingMode;\n-    }\n+  /**\n+   * Gets or sets determines whether or not to export document structure.\n+   *\n+   * @return exportDocumentStructure\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines whether or not to export document structure.\")\n+  public Boolean getExportDocumentStructure() {\n+    return exportDocumentStructure;\n+  }\n \n-    public void setFontEmbeddingMode(String fontEmbeddingMode) {\n-        this.fontEmbeddingMode = fontEmbeddingMode;\n-    }\n+  public void setExportDocumentStructure(Boolean exportDocumentStructure) {\n+    this.exportDocumentStructure = exportDocumentStructure;\n+  }\n \n-    public PdfSaveOptionsData headerFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n-        this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n-        return this;\n-    }\n+  public PdfSaveOptionsData fontEmbeddingMode(String fontEmbeddingMode) {\n+    this.fontEmbeddingMode = fontEmbeddingMode;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines how bookmarks in headers/footers are exported.\n-     * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\n-    * @return headerFooterBookmarksExportMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines how bookmarks in headers/footers are exported. The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\")\n-    public HeaderFooterBookmarksExportModeEnum getHeaderFooterBookmarksExportMode() {\n-        return headerFooterBookmarksExportMode;\n-    }\n+  /**\n+   * Gets or sets specifies the font embedding mode.\n+   *\n+   * @return fontEmbeddingMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies the font embedding mode.\")\n+  public String getFontEmbeddingMode() {\n+    return fontEmbeddingMode;\n+  }\n \n-    public void setHeaderFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n-        this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n-    }\n+  public void setFontEmbeddingMode(String fontEmbeddingMode) {\n+    this.fontEmbeddingMode = fontEmbeddingMode;\n+  }\n \n-    public PdfSaveOptionsData imageColorSpaceExportMode(String imageColorSpaceExportMode) {\n-        this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n-        return this;\n-    }\n+  public PdfSaveOptionsData headerFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n+    this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies how the color space will be selected for the images in PDF document.\n-    * @return imageColorSpaceExportMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies how the color space will be selected for the images in PDF document.\")\n-    public String getImageColorSpaceExportMode() {\n-        return imageColorSpaceExportMode;\n-    }\n+  /**\n+   * Gets or sets determines how bookmarks in headers/footers are exported.\n+   * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\n+   *\n+   * @return headerFooterBookmarksExportMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines how bookmarks in headers/footers are exported. The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\")\n+  public HeaderFooterBookmarksExportModeEnum getHeaderFooterBookmarksExportMode() {\n+    return headerFooterBookmarksExportMode;\n+  }\n \n-    public void setImageColorSpaceExportMode(String imageColorSpaceExportMode) {\n-        this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n-    }\n+  public void setHeaderFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n+    this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n+  }\n \n-    public PdfSaveOptionsData imageCompression(String imageCompression) {\n-        this.imageCompression = imageCompression;\n-        return this;\n-    }\n+  public PdfSaveOptionsData imageColorSpaceExportMode(String imageColorSpaceExportMode) {\n+    this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies compression type to be used for all images in the document.\n-    * @return imageCompression\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all images in the document.\")\n-    public String getImageCompression() {\n-        return imageCompression;\n-    }\n+  /**\n+   * Gets or sets specifies how the color space will be selected for the images in PDF document.\n+   *\n+   * @return imageColorSpaceExportMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies how the color space will be selected for the images in PDF document.\")\n+  public String getImageColorSpaceExportMode() {\n+    return imageColorSpaceExportMode;\n+  }\n \n-    public void setImageCompression(String imageCompression) {\n-        this.imageCompression = imageCompression;\n-    }\n+  public void setImageColorSpaceExportMode(String imageColorSpaceExportMode) {\n+    this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n+  }\n \n-    public PdfSaveOptionsData interpolateImages(Boolean interpolateImages) {\n-        this.interpolateImages = interpolateImages;\n-        return this;\n-    }\n+  public PdfSaveOptionsData imageCompression(String imageCompression) {\n+    this.imageCompression = imageCompression;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets a flag indicating whether image interpolation shall be performed by a conforming\n-     * reader. When false is specified, the flag is not written to the output document\n-     * and the default behaviour of reader is used instead.\n-    * @return interpolateImages\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a flag indicating whether image interpolation shall be performed by a conforming reader. When false is specified, the flag is not written to the output document and the default behaviour of reader is used instead.\")\n-    public Boolean getInterpolateImages() {\n-        return interpolateImages;\n-    }\n+  /**\n+   * Gets or sets specifies compression type to be used for all images in the document.\n+   *\n+   * @return imageCompression\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all images in the document.\")\n+  public String getImageCompression() {\n+    return imageCompression;\n+  }\n \n-    public void setInterpolateImages(Boolean interpolateImages) {\n-        this.interpolateImages = interpolateImages;\n-    }\n+  public void setImageCompression(String imageCompression) {\n+    this.imageCompression = imageCompression;\n+  }\n \n-    public PdfSaveOptionsData openHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n-        this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n-        return this;\n-    }\n+  public PdfSaveOptionsData interpolateImages(Boolean interpolateImages) {\n+    this.interpolateImages = interpolateImages;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\n-    * @return openHyperlinksInNewWindow\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\")\n-    public Boolean getOpenHyperlinksInNewWindow() {\n-        return openHyperlinksInNewWindow;\n-    }\n+  /**\n+   * Gets or sets a flag indicating whether image interpolation shall be performed by a conforming\n+   * reader. When false is specified, the flag is not written to the output document\n+   * and the default behaviour of reader is used instead.\n+   *\n+   * @return interpolateImages\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a flag indicating whether image interpolation shall be performed by a conforming reader. When false is specified, the flag is not written to the output document and the default behaviour of reader is used instead.\")\n+  public Boolean getInterpolateImages() {\n+    return interpolateImages;\n+  }\n \n-    public void setOpenHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n-        this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n-    }\n+  public void setInterpolateImages(Boolean interpolateImages) {\n+    this.interpolateImages = interpolateImages;\n+  }\n \n-    public PdfSaveOptionsData outlineOptions(OutlineOptionsData outlineOptions) {\n-        this.outlineOptions = outlineOptions;\n-        return this;\n-    }\n+  public PdfSaveOptionsData openHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n+    this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets allows to specify outline options.\n-    * @return outlineOptions\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets allows to specify outline options.\")\n-    public OutlineOptionsData getOutlineOptions() {\n-        return outlineOptions;\n-    }\n+  /**\n+   * Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\n+   *\n+   * @return openHyperlinksInNewWindow\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\")\n+  public Boolean getOpenHyperlinksInNewWindow() {\n+    return openHyperlinksInNewWindow;\n+  }\n \n-    public void setOutlineOptions(OutlineOptionsData outlineOptions) {\n-        this.outlineOptions = outlineOptions;\n-    }\n+  public void setOpenHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n+    this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n+  }\n \n-    public PdfSaveOptionsData pageMode(String pageMode) {\n-        this.pageMode = pageMode;\n-        return this;\n-    }\n+  public PdfSaveOptionsData outlineOptions(OutlineOptionsData outlineOptions) {\n+    this.outlineOptions = outlineOptions;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\n-    * @return pageMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\")\n-    public String getPageMode() {\n-        return pageMode;\n-    }\n+  /**\n+   * Gets or sets allows to specify outline options.\n+   *\n+   * @return outlineOptions\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets allows to specify outline options.\")\n+  public OutlineOptionsData getOutlineOptions() {\n+    return outlineOptions;\n+  }\n \n-    public void setPageMode(String pageMode) {\n-        this.pageMode = pageMode;\n-    }\n+  public void setOutlineOptions(OutlineOptionsData outlineOptions) {\n+    this.outlineOptions = outlineOptions;\n+  }\n \n-    public PdfSaveOptionsData preblendImages(Boolean preblendImages) {\n-        this.preblendImages = preblendImages;\n-        return this;\n-    }\n+  public PdfSaveOptionsData pageMode(String pageMode) {\n+    this.pageMode = pageMode;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets a value determining whether or not to preblend transparent images with black background color.\n-    * @return preblendImages\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining whether or not to preblend transparent images with black background color.\")\n-    public Boolean getPreblendImages() {\n-        return preblendImages;\n-    }\n+  /**\n+   * Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\n+   *\n+   * @return pageMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\")\n+  public String getPageMode() {\n+    return pageMode;\n+  }\n \n-    public void setPreblendImages(Boolean preblendImages) {\n-        this.preblendImages = preblendImages;\n-    }\n+  public void setPageMode(String pageMode) {\n+    this.pageMode = pageMode;\n+  }\n \n-    public PdfSaveOptionsData preserveFormFields(Boolean preserveFormFields) {\n-        this.preserveFormFields = preserveFormFields;\n-        return this;\n-    }\n+  public PdfSaveOptionsData preblendImages(Boolean preblendImages) {\n+    this.preblendImages = preblendImages;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\n-    * @return preserveFormFields\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\")\n-    public Boolean getPreserveFormFields() {\n-        return preserveFormFields;\n-    }\n+  /**\n+   * Gets or sets a value determining whether or not to preblend transparent images with black background color.\n+   *\n+   * @return preblendImages\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value determining whether or not to preblend transparent images with black background color.\")\n+  public Boolean getPreblendImages() {\n+    return preblendImages;\n+  }\n \n-    public void setPreserveFormFields(Boolean preserveFormFields) {\n-        this.preserveFormFields = preserveFormFields;\n-    }\n+  public void setPreblendImages(Boolean preblendImages) {\n+    this.preblendImages = preblendImages;\n+  }\n \n-    public PdfSaveOptionsData textCompression(String textCompression) {\n-        this.textCompression = textCompression;\n-        return this;\n-    }\n+  public PdfSaveOptionsData preserveFormFields(Boolean preserveFormFields) {\n+    this.preserveFormFields = preserveFormFields;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies compression type to be used for all textual content in the document.\n-    * @return textCompression\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all textual content in the document.\")\n-    public String getTextCompression() {\n-        return textCompression;\n-    }\n+  /**\n+   * Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\n+   *\n+   * @return preserveFormFields\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\")\n+  public Boolean getPreserveFormFields() {\n+    return preserveFormFields;\n+  }\n \n-    public void setTextCompression(String textCompression) {\n-        this.textCompression = textCompression;\n-    }\n+  public void setPreserveFormFields(Boolean preserveFormFields) {\n+    this.preserveFormFields = preserveFormFields;\n+  }\n \n-    public PdfSaveOptionsData useBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n-        this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n-        return this;\n-    }\n+  public PdfSaveOptionsData textCompression(String textCompression) {\n+    this.textCompression = textCompression;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines whether the document should be saved using a booklet printing layout.\n-    * @return useBookFoldPrintingSettings\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines whether the document should be saved using a booklet printing layout.\")\n-    public Boolean getUseBookFoldPrintingSettings() {\n-        return useBookFoldPrintingSettings;\n-    }\n+  /**\n+   * Gets or sets specifies compression type to be used for all textual content in the document.\n+   *\n+   * @return textCompression\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all textual content in the document.\")\n+  public String getTextCompression() {\n+    return textCompression;\n+  }\n \n-    public void setUseBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n-        this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n-    }\n+  public void setTextCompression(String textCompression) {\n+    this.textCompression = textCompression;\n+  }\n \n-    public PdfSaveOptionsData useCoreFonts(Boolean useCoreFonts) {\n-        this.useCoreFonts = useCoreFonts;\n-        return this;\n-    }\n+  public PdfSaveOptionsData useBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n+    this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\n-    * @return useCoreFonts\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\")\n-    public Boolean getUseCoreFonts() {\n-        return useCoreFonts;\n-    }\n+  /**\n+   * Gets or sets determines whether the document should be saved using a booklet printing layout.\n+   *\n+   * @return useBookFoldPrintingSettings\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines whether the document should be saved using a booklet printing layout.\")\n+  public Boolean getUseBookFoldPrintingSettings() {\n+    return useBookFoldPrintingSettings;\n+  }\n \n-    public void setUseCoreFonts(Boolean useCoreFonts) {\n-        this.useCoreFonts = useCoreFonts;\n-    }\n+  public void setUseBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n+    this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n+  }\n \n-    public PdfSaveOptionsData zoomBehavior(String zoomBehavior) {\n-        this.zoomBehavior = zoomBehavior;\n-        return this;\n-    }\n+  public PdfSaveOptionsData useCoreFonts(Boolean useCoreFonts) {\n+    this.useCoreFonts = useCoreFonts;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\n-    * @return zoomBehavior\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\")\n-    public String getZoomBehavior() {\n-        return zoomBehavior;\n-    }\n+  /**\n+   * Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\n+   *\n+   * @return useCoreFonts\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\")\n+  public Boolean getUseCoreFonts() {\n+    return useCoreFonts;\n+  }\n \n-    public void setZoomBehavior(String zoomBehavior) {\n-        this.zoomBehavior = zoomBehavior;\n-    }\n+  public void setUseCoreFonts(Boolean useCoreFonts) {\n+    this.useCoreFonts = useCoreFonts;\n+  }\n \n-    public PdfSaveOptionsData zoomFactor(Integer zoomFactor) {\n-        this.zoomFactor = zoomFactor;\n-        return this;\n-    }\n+  public PdfSaveOptionsData zoomBehavior(String zoomBehavior) {\n+    this.zoomBehavior = zoomBehavior;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets determines zoom factor (in percentages) for a document.\n-    * @return zoomFactor\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines zoom factor (in percentages) for a document.\")\n-    public Integer getZoomFactor() {\n-        return zoomFactor;\n-    }\n+  /**\n+   * Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\n+   *\n+   * @return zoomBehavior\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\")\n+  public String getZoomBehavior() {\n+    return zoomBehavior;\n+  }\n \n-    public void setZoomFactor(Integer zoomFactor) {\n-        this.zoomFactor = zoomFactor;\n-    }\n+  public void setZoomBehavior(String zoomBehavior) {\n+    this.zoomBehavior = zoomBehavior;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n+  public PdfSaveOptionsData zoomFactor(Integer zoomFactor) {\n+    this.zoomFactor = zoomFactor;\n+    return this;\n+  }\n+\n+  /**\n+   * Gets or sets determines zoom factor (in percentages) for a document.\n+   *\n+   * @return zoomFactor\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines zoom factor (in percentages) for a document.\")\n+  public Integer getZoomFactor() {\n+    return zoomFactor;\n+  }\n+\n+  public void setZoomFactor(Integer zoomFactor) {\n+    this.zoomFactor = zoomFactor;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData) o;\n     return\n         Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n-        Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n-        Objects.equals(this.customPropertiesExport, pdfSaveOptionsData.customPropertiesExport) &&\n-        Objects.equals(this.digitalSignatureDetails, pdfSaveOptionsData.digitalSignatureDetails) &&\n-        Objects.equals(this.displayDocTitle, pdfSaveOptionsData.displayDocTitle) &&\n-        Objects.equals(this.downsampleOptions, pdfSaveOptionsData.downsampleOptions) &&\n-        Objects.equals(this.embedFullFonts, pdfSaveOptionsData.embedFullFonts) &&\n-        Objects.equals(this.encryptionDetails, pdfSaveOptionsData.encryptionDetails) &&\n-        Objects.equals(this.escapeUri, pdfSaveOptionsData.escapeUri) &&\n-        Objects.equals(this.exportDocumentStructure, pdfSaveOptionsData.exportDocumentStructure) &&\n-        Objects.equals(this.fontEmbeddingMode, pdfSaveOptionsData.fontEmbeddingMode) &&\n-        Objects.equals(this.headerFooterBookmarksExportMode, pdfSaveOptionsData.headerFooterBookmarksExportMode) &&\n-        Objects.equals(this.imageColorSpaceExportMode, pdfSaveOptionsData.imageColorSpaceExportMode) &&\n-        Objects.equals(this.imageCompression, pdfSaveOptionsData.imageCompression) &&\n-        Objects.equals(this.interpolateImages, pdfSaveOptionsData.interpolateImages) &&\n-        Objects.equals(this.openHyperlinksInNewWindow, pdfSaveOptionsData.openHyperlinksInNewWindow) &&\n-        Objects.equals(this.outlineOptions, pdfSaveOptionsData.outlineOptions) &&\n-        Objects.equals(this.pageMode, pdfSaveOptionsData.pageMode) &&\n-        Objects.equals(this.preblendImages, pdfSaveOptionsData.preblendImages) &&\n-        Objects.equals(this.preserveFormFields, pdfSaveOptionsData.preserveFormFields) &&\n-        Objects.equals(this.textCompression, pdfSaveOptionsData.textCompression) &&\n-        Objects.equals(this.useBookFoldPrintingSettings, pdfSaveOptionsData.useBookFoldPrintingSettings) &&\n-        Objects.equals(this.useCoreFonts, pdfSaveOptionsData.useCoreFonts) &&\n-        Objects.equals(this.zoomBehavior, pdfSaveOptionsData.zoomBehavior) &&\n-        Objects.equals(this.zoomFactor, pdfSaveOptionsData.zoomFactor) &&\n-        super.equals(o);\n+            Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n+            Objects.equals(this.customPropertiesExport, pdfSaveOptionsData.customPropertiesExport) &&\n+            Objects.equals(this.digitalSignatureDetails, pdfSaveOptionsData.digitalSignatureDetails) &&\n+            Objects.equals(this.displayDocTitle, pdfSaveOptionsData.displayDocTitle) &&\n+            Objects.equals(this.downsampleOptions, pdfSaveOptionsData.downsampleOptions) &&\n+            Objects.equals(this.embedFullFonts, pdfSaveOptionsData.embedFullFonts) &&\n+            Objects.equals(this.encryptionDetails, pdfSaveOptionsData.encryptionDetails) &&\n+            Objects.equals(this.escapeUri, pdfSaveOptionsData.escapeUri) &&\n+            Objects.equals(this.exportDocumentStructure, pdfSaveOptionsData.exportDocumentStructure) &&\n+            Objects.equals(this.fontEmbeddingMode, pdfSaveOptionsData.fontEmbeddingMode) &&\n+            Objects.equals(this.headerFooterBookmarksExportMode, pdfSaveOptionsData.headerFooterBookmarksExportMode) &&\n+            Objects.equals(this.imageColorSpaceExportMode, pdfSaveOptionsData.imageColorSpaceExportMode) &&\n+            Objects.equals(this.imageCompression, pdfSaveOptionsData.imageCompression) &&\n+            Objects.equals(this.interpolateImages, pdfSaveOptionsData.interpolateImages) &&\n+            Objects.equals(this.openHyperlinksInNewWindow, pdfSaveOptionsData.openHyperlinksInNewWindow) &&\n+            Objects.equals(this.outlineOptions, pdfSaveOptionsData.outlineOptions) &&\n+            Objects.equals(this.pageMode, pdfSaveOptionsData.pageMode) &&\n+            Objects.equals(this.preblendImages, pdfSaveOptionsData.preblendImages) &&\n+            Objects.equals(this.preserveFormFields, pdfSaveOptionsData.preserveFormFields) &&\n+            Objects.equals(this.textCompression, pdfSaveOptionsData.textCompression) &&\n+            Objects.equals(this.useBookFoldPrintingSettings, pdfSaveOptionsData.useBookFoldPrintingSettings) &&\n+            Objects.equals(this.useCoreFonts, pdfSaveOptionsData.useCoreFonts) &&\n+            Objects.equals(this.zoomBehavior, pdfSaveOptionsData.zoomBehavior) &&\n+            Objects.equals(this.zoomFactor, pdfSaveOptionsData.zoomFactor) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 566
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "640",
                    "column": "60",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/194/PdfSaveOptionsData.java\nindex e239ec60c4..bef890a617 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/194/PdfSaveOptionsData.java\n@@ -54,8 +54,10 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n     @JsonAdapter(HeaderFooterBookmarksExportModeEnum.Adapter.class)\n     public enum HeaderFooterBookmarksExportModeEnum {\n         NONE(\"None\"),\n-        FIRST(\"First\"),\n-        ALL(\"All\");\n+\n+FIRST(\"First\"),\n+\n+ALL(\"All\");\n \n         private String value;\n \n@@ -81,7 +83,7 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< HeaderFooterBookmarksExportModeEnum > {\n+        public static class Adapter extends TypeAdapter<HeaderFooterBookmarksExportModeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final HeaderFooterBookmarksExportModeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -169,7 +171,8 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n \n     @SerializedName(\"ZoomFactor\")\n     private Integer zoomFactor = null;\n-    public PdfSaveOptionsData compliance(String compliance) {\n+\n+public PdfSaveOptionsData compliance(String compliance) {\n         this.compliance = compliance;\n         return this;\n     }\n@@ -629,13 +632,13 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n-    return\n-        Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n+\n+PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n+    return Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n         Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n         Objects.equals(this.customPropertiesExport, pdfSaveOptionsData.customPropertiesExport) &&\n         Objects.equals(this.digitalSignatureDetails, pdfSaveOptionsData.digitalSignatureDetails) &&\n@@ -712,4 +715,4 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/194/PdfSaveOptionsData.java\nindex e239ec60c4..36528f0600 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/194/PdfSaveOptionsData.java\n@@ -45,7 +45,10 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * container class for pdf save options.\n  */\n+\n+\n @ApiModel(description = \"container class for pdf save options.\")\n+\n public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n     /**\n      * Gets or sets determines how bookmarks in headers/footers are exported.\n@@ -53,47 +56,47 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n      */\n     @JsonAdapter(HeaderFooterBookmarksExportModeEnum.Adapter.class)\n     public enum HeaderFooterBookmarksExportModeEnum {\n-        NONE(\"None\"),\n-        FIRST(\"First\"),\n-        ALL(\"All\");\n+    NONE(\"None\"), FIRST(\"First\"), ALL(\"All\");\n \n-        private String value;\n+    private String value;\n \n-        HeaderFooterBookmarksExportModeEnum(String value) {\n-            this.value = value;\n-        }\n+    HeaderFooterBookmarksExportModeEnum(String value) {\n+        this.value = value;\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                                        return String.valueOf(value);\n+    }\n+\n+    public static HeaderFooterBookmarksExportModeEnum fromValue(String text) {\n+        for (HeaderFooterBookmarksExportModeEnum b : HeaderFooterBookmarksExportModeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                                                       return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<HeaderFooterBookmarksExportModeEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final HeaderFooterBookmarksExportModeEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static HeaderFooterBookmarksExportModeEnum fromValue(String text) {\n-            for (HeaderFooterBookmarksExportModeEnum b : HeaderFooterBookmarksExportModeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< HeaderFooterBookmarksExportModeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HeaderFooterBookmarksExportModeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HeaderFooterBookmarksExportModeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HeaderFooterBookmarksExportModeEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public HeaderFooterBookmarksExportModeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HeaderFooterBookmarksExportModeEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"Compliance\")\n     private String compliance = null;\n@@ -169,27 +172,32 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n \n     @SerializedName(\"ZoomFactor\")\n     private Integer zoomFactor = null;\n+\n     public PdfSaveOptionsData compliance(String compliance) {\n-        this.compliance = compliance;\n-        return this;\n+    this.compliance = compliance;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the PDF standards compliance level for output documents.\n     * @return compliance\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the PDF standards compliance level for output documents.\")\n     public String getCompliance() {\n-        return compliance;\n+    return compliance;\n     }\n \n+\n     public void setCompliance(String compliance) {\n-        this.compliance = compliance;\n+    this.compliance = compliance;\n     }\n \n+\n     public PdfSaveOptionsData createNoteHyperlinks(Boolean createNoteHyperlinks) {\n-        this.createNoteHyperlinks = createNoteHyperlinks;\n-        return this;\n+    this.createNoteHyperlinks = createNoteHyperlinks;\n+    return this;\n     }\n \n     /**\n@@ -198,18 +206,22 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n      * Default is false.\n     * @return createNoteHyperlinks\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether to convert footnote/endnote references in main text story into active hyperlinks. When clicked the hyperlink will lead to the corresponding footnote/endnote. Default is false.\")\n     public Boolean getCreateNoteHyperlinks() {\n-        return createNoteHyperlinks;\n+    return createNoteHyperlinks;\n     }\n \n+\n     public void setCreateNoteHyperlinks(Boolean createNoteHyperlinks) {\n-        this.createNoteHyperlinks = createNoteHyperlinks;\n+    this.createNoteHyperlinks = createNoteHyperlinks;\n     }\n \n+\n     public PdfSaveOptionsData customPropertiesExport(String customPropertiesExport) {\n-        this.customPropertiesExport = customPropertiesExport;\n-        return this;\n+    this.customPropertiesExport = customPropertiesExport;\n+    return this;\n     }\n \n     /**\n@@ -217,162 +229,198 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n      * Default value is None.\n     * @return customPropertiesExport\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value determining the way CustomDocumentProperties are exported to PDF file. Default value is None.\")\n     public String getCustomPropertiesExport() {\n-        return customPropertiesExport;\n+    return customPropertiesExport;\n     }\n \n+\n     public void setCustomPropertiesExport(String customPropertiesExport) {\n-        this.customPropertiesExport = customPropertiesExport;\n+    this.customPropertiesExport = customPropertiesExport;\n     }\n \n+\n     public PdfSaveOptionsData digitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n-        this.digitalSignatureDetails = digitalSignatureDetails;\n-        return this;\n+    this.digitalSignatureDetails = digitalSignatureDetails;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the details for signing the output PDF document.\n     * @return digitalSignatureDetails\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the details for signing the output PDF document.\")\n     public PdfDigitalSignatureDetailsData getDigitalSignatureDetails() {\n-        return digitalSignatureDetails;\n+    return digitalSignatureDetails;\n     }\n \n+\n     public void setDigitalSignatureDetails(PdfDigitalSignatureDetailsData digitalSignatureDetails) {\n-        this.digitalSignatureDetails = digitalSignatureDetails;\n+    this.digitalSignatureDetails = digitalSignatureDetails;\n     }\n \n+\n     public PdfSaveOptionsData displayDocTitle(Boolean displayDocTitle) {\n-        this.displayDocTitle = displayDocTitle;\n-        return this;\n+    this.displayDocTitle = displayDocTitle;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\n     * @return displayDocTitle\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a flag specifying whether the window\u2019s title bar should display the document title taken from the Title entry of the document information dictionary.\")\n     public Boolean getDisplayDocTitle() {\n-        return displayDocTitle;\n+    return displayDocTitle;\n     }\n \n+\n     public void setDisplayDocTitle(Boolean displayDocTitle) {\n-        this.displayDocTitle = displayDocTitle;\n+    this.displayDocTitle = displayDocTitle;\n     }\n \n+\n     public PdfSaveOptionsData downsampleOptions(DownsampleOptionsData downsampleOptions) {\n-        this.downsampleOptions = downsampleOptions;\n-        return this;\n+    this.downsampleOptions = downsampleOptions;\n+    return this;\n     }\n \n     /**\n      * Gets or sets allows to specify downsample options.\n     * @return downsampleOptions\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets allows to specify downsample options.\")\n     public DownsampleOptionsData getDownsampleOptions() {\n-        return downsampleOptions;\n+    return downsampleOptions;\n     }\n \n+\n     public void setDownsampleOptions(DownsampleOptionsData downsampleOptions) {\n-        this.downsampleOptions = downsampleOptions;\n+    this.downsampleOptions = downsampleOptions;\n     }\n \n+\n     public PdfSaveOptionsData embedFullFonts(Boolean embedFullFonts) {\n-        this.embedFullFonts = embedFullFonts;\n-        return this;\n+    this.embedFullFonts = embedFullFonts;\n+    return this;\n     }\n \n     /**\n      * Gets or sets controls how fonts are embedded into the resulting PDF documents.\n     * @return embedFullFonts\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets controls how fonts are embedded into the resulting PDF documents.\")\n     public Boolean getEmbedFullFonts() {\n-        return embedFullFonts;\n+    return embedFullFonts;\n     }\n \n+\n     public void setEmbedFullFonts(Boolean embedFullFonts) {\n-        this.embedFullFonts = embedFullFonts;\n+    this.embedFullFonts = embedFullFonts;\n     }\n \n+\n     public PdfSaveOptionsData encryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n-        this.encryptionDetails = encryptionDetails;\n-        return this;\n+    this.encryptionDetails = encryptionDetails;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the details for encrypting the output PDF document.\n     * @return encryptionDetails\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the details for encrypting the output PDF document.\")\n     public PdfEncryptionDetailsData getEncryptionDetails() {\n-        return encryptionDetails;\n+    return encryptionDetails;\n     }\n \n+\n     public void setEncryptionDetails(PdfEncryptionDetailsData encryptionDetails) {\n-        this.encryptionDetails = encryptionDetails;\n+    this.encryptionDetails = encryptionDetails;\n     }\n \n+\n     public PdfSaveOptionsData escapeUri(Boolean escapeUri) {\n-        this.escapeUri = escapeUri;\n-        return this;\n+    this.escapeUri = escapeUri;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a flag specifying whether URI should be escaped before writing.\n     * @return escapeUri\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a flag specifying whether URI should be escaped before writing.\")\n     public Boolean getEscapeUri() {\n-        return escapeUri;\n+    return escapeUri;\n     }\n \n+\n     public void setEscapeUri(Boolean escapeUri) {\n-        this.escapeUri = escapeUri;\n+    this.escapeUri = escapeUri;\n     }\n \n+\n     public PdfSaveOptionsData exportDocumentStructure(Boolean exportDocumentStructure) {\n-        this.exportDocumentStructure = exportDocumentStructure;\n-        return this;\n+    this.exportDocumentStructure = exportDocumentStructure;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines whether or not to export document structure.\n     * @return exportDocumentStructure\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines whether or not to export document structure.\")\n     public Boolean getExportDocumentStructure() {\n-        return exportDocumentStructure;\n+    return exportDocumentStructure;\n     }\n \n+\n     public void setExportDocumentStructure(Boolean exportDocumentStructure) {\n-        this.exportDocumentStructure = exportDocumentStructure;\n+    this.exportDocumentStructure = exportDocumentStructure;\n     }\n \n+\n     public PdfSaveOptionsData fontEmbeddingMode(String fontEmbeddingMode) {\n-        this.fontEmbeddingMode = fontEmbeddingMode;\n-        return this;\n+    this.fontEmbeddingMode = fontEmbeddingMode;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies the font embedding mode.\n     * @return fontEmbeddingMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies the font embedding mode.\")\n     public String getFontEmbeddingMode() {\n-        return fontEmbeddingMode;\n+    return fontEmbeddingMode;\n     }\n \n+\n     public void setFontEmbeddingMode(String fontEmbeddingMode) {\n-        this.fontEmbeddingMode = fontEmbeddingMode;\n+    this.fontEmbeddingMode = fontEmbeddingMode;\n     }\n \n+\n     public PdfSaveOptionsData headerFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n-        this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n-        return this;\n+    this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n+    return this;\n     }\n \n     /**\n@@ -380,54 +428,66 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n      * The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\n     * @return headerFooterBookmarksExportMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines how bookmarks in headers/footers are exported. The default value is Aspose.Words.Saving.HeaderFooterBookmarksExportMode.All.\")\n     public HeaderFooterBookmarksExportModeEnum getHeaderFooterBookmarksExportMode() {\n-        return headerFooterBookmarksExportMode;\n+    return headerFooterBookmarksExportMode;\n     }\n \n+\n     public void setHeaderFooterBookmarksExportMode(HeaderFooterBookmarksExportModeEnum headerFooterBookmarksExportMode) {\n-        this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n+    this.headerFooterBookmarksExportMode = headerFooterBookmarksExportMode;\n     }\n \n+\n     public PdfSaveOptionsData imageColorSpaceExportMode(String imageColorSpaceExportMode) {\n-        this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n-        return this;\n+    this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies how the color space will be selected for the images in PDF document.\n     * @return imageColorSpaceExportMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies how the color space will be selected for the images in PDF document.\")\n     public String getImageColorSpaceExportMode() {\n-        return imageColorSpaceExportMode;\n+    return imageColorSpaceExportMode;\n     }\n \n+\n     public void setImageColorSpaceExportMode(String imageColorSpaceExportMode) {\n-        this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n+    this.imageColorSpaceExportMode = imageColorSpaceExportMode;\n     }\n \n+\n     public PdfSaveOptionsData imageCompression(String imageCompression) {\n-        this.imageCompression = imageCompression;\n-        return this;\n+    this.imageCompression = imageCompression;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies compression type to be used for all images in the document.\n     * @return imageCompression\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all images in the document.\")\n     public String getImageCompression() {\n-        return imageCompression;\n+    return imageCompression;\n     }\n \n+\n     public void setImageCompression(String imageCompression) {\n-        this.imageCompression = imageCompression;\n+    this.imageCompression = imageCompression;\n     }\n \n+\n     public PdfSaveOptionsData interpolateImages(Boolean interpolateImages) {\n-        this.interpolateImages = interpolateImages;\n-        return this;\n+    this.interpolateImages = interpolateImages;\n+    return this;\n     }\n \n     /**\n@@ -436,206 +496,252 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n      * and the default behaviour of reader is used instead.\n     * @return interpolateImages\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a flag indicating whether image interpolation shall be performed by a conforming reader. When false is specified, the flag is not written to the output document and the default behaviour of reader is used instead.\")\n     public Boolean getInterpolateImages() {\n-        return interpolateImages;\n+    return interpolateImages;\n     }\n \n+\n     public void setInterpolateImages(Boolean interpolateImages) {\n-        this.interpolateImages = interpolateImages;\n+    this.interpolateImages = interpolateImages;\n     }\n \n+\n     public PdfSaveOptionsData openHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n-        this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n-        return this;\n+    this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\n     * @return openHyperlinksInNewWindow\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines whether hyperlinks in the output Pdf document are forced to be opened in a new window (or tab) of a browser.\")\n     public Boolean getOpenHyperlinksInNewWindow() {\n-        return openHyperlinksInNewWindow;\n+    return openHyperlinksInNewWindow;\n     }\n \n+\n     public void setOpenHyperlinksInNewWindow(Boolean openHyperlinksInNewWindow) {\n-        this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n+    this.openHyperlinksInNewWindow = openHyperlinksInNewWindow;\n     }\n \n+\n     public PdfSaveOptionsData outlineOptions(OutlineOptionsData outlineOptions) {\n-        this.outlineOptions = outlineOptions;\n-        return this;\n+    this.outlineOptions = outlineOptions;\n+    return this;\n     }\n \n     /**\n      * Gets or sets allows to specify outline options.\n     * @return outlineOptions\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets allows to specify outline options.\")\n     public OutlineOptionsData getOutlineOptions() {\n-        return outlineOptions;\n+    return outlineOptions;\n     }\n \n+\n     public void setOutlineOptions(OutlineOptionsData outlineOptions) {\n-        this.outlineOptions = outlineOptions;\n+    this.outlineOptions = outlineOptions;\n     }\n \n+\n     public PdfSaveOptionsData pageMode(String pageMode) {\n-        this.pageMode = pageMode;\n-        return this;\n+    this.pageMode = pageMode;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\n     * @return pageMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies how the PDF document should be displayed when opened in the PDF reader.\")\n     public String getPageMode() {\n-        return pageMode;\n+    return pageMode;\n     }\n \n+\n     public void setPageMode(String pageMode) {\n-        this.pageMode = pageMode;\n+    this.pageMode = pageMode;\n     }\n \n+\n     public PdfSaveOptionsData preblendImages(Boolean preblendImages) {\n-        this.preblendImages = preblendImages;\n-        return this;\n+    this.preblendImages = preblendImages;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a value determining whether or not to preblend transparent images with black background color.\n     * @return preblendImages\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value determining whether or not to preblend transparent images with black background color.\")\n     public Boolean getPreblendImages() {\n-        return preblendImages;\n+    return preblendImages;\n     }\n \n+\n     public void setPreblendImages(Boolean preblendImages) {\n-        this.preblendImages = preblendImages;\n+    this.preblendImages = preblendImages;\n     }\n \n+\n     public PdfSaveOptionsData preserveFormFields(Boolean preserveFormFields) {\n-        this.preserveFormFields = preserveFormFields;\n-        return this;\n+    this.preserveFormFields = preserveFormFields;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\n     * @return preserveFormFields\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies whether to preserve Microsoft Word form fields as form fields in PDF or convert them to text.\")\n     public Boolean getPreserveFormFields() {\n-        return preserveFormFields;\n+    return preserveFormFields;\n     }\n \n+\n     public void setPreserveFormFields(Boolean preserveFormFields) {\n-        this.preserveFormFields = preserveFormFields;\n+    this.preserveFormFields = preserveFormFields;\n     }\n \n+\n     public PdfSaveOptionsData textCompression(String textCompression) {\n-        this.textCompression = textCompression;\n-        return this;\n+    this.textCompression = textCompression;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies compression type to be used for all textual content in the document.\n     * @return textCompression\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies compression type to be used for all textual content in the document.\")\n     public String getTextCompression() {\n-        return textCompression;\n+    return textCompression;\n     }\n \n+\n     public void setTextCompression(String textCompression) {\n-        this.textCompression = textCompression;\n+    this.textCompression = textCompression;\n     }\n \n+\n     public PdfSaveOptionsData useBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n-        this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n-        return this;\n+    this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines whether the document should be saved using a booklet printing layout.\n     * @return useBookFoldPrintingSettings\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines whether the document should be saved using a booklet printing layout.\")\n     public Boolean getUseBookFoldPrintingSettings() {\n-        return useBookFoldPrintingSettings;\n+    return useBookFoldPrintingSettings;\n     }\n \n+\n     public void setUseBookFoldPrintingSettings(Boolean useBookFoldPrintingSettings) {\n-        this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n+    this.useBookFoldPrintingSettings = useBookFoldPrintingSettings;\n     }\n \n+\n     public PdfSaveOptionsData useCoreFonts(Boolean useCoreFonts) {\n-        this.useCoreFonts = useCoreFonts;\n-        return this;\n+    this.useCoreFonts = useCoreFonts;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\n     * @return useCoreFonts\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines whether or not to substitute TrueType fonts Arial, Times New Roman, Courier New and Symbol with core PDF Type 1 fonts.\")\n     public Boolean getUseCoreFonts() {\n-        return useCoreFonts;\n+    return useCoreFonts;\n     }\n \n+\n     public void setUseCoreFonts(Boolean useCoreFonts) {\n-        this.useCoreFonts = useCoreFonts;\n+    this.useCoreFonts = useCoreFonts;\n     }\n \n+\n     public PdfSaveOptionsData zoomBehavior(String zoomBehavior) {\n-        this.zoomBehavior = zoomBehavior;\n-        return this;\n+    this.zoomBehavior = zoomBehavior;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\n     * @return zoomBehavior\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines what type of zoom should be applied when a document is opened with a PDF viewer.\")\n     public String getZoomBehavior() {\n-        return zoomBehavior;\n+    return zoomBehavior;\n     }\n \n+\n     public void setZoomBehavior(String zoomBehavior) {\n-        this.zoomBehavior = zoomBehavior;\n+    this.zoomBehavior = zoomBehavior;\n     }\n \n+\n     public PdfSaveOptionsData zoomFactor(Integer zoomFactor) {\n-        this.zoomFactor = zoomFactor;\n-        return this;\n+    this.zoomFactor = zoomFactor;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines zoom factor (in percentages) for a document.\n     * @return zoomFactor\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines zoom factor (in percentages) for a document.\")\n     public Integer getZoomFactor() {\n-        return zoomFactor;\n+    return zoomFactor;\n     }\n \n+\n     public void setZoomFactor(Integer zoomFactor) {\n-        this.zoomFactor = zoomFactor;\n+    this.zoomFactor = zoomFactor;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n-    return\n-        Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n+\n+        PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData) o;\n+        return Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n         Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n         Objects.equals(this.customPropertiesExport, pdfSaveOptionsData.customPropertiesExport) &&\n         Objects.equals(this.digitalSignatureDetails, pdfSaveOptionsData.digitalSignatureDetails) &&\n@@ -659,17 +765,19 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n         Objects.equals(this.useBookFoldPrintingSettings, pdfSaveOptionsData.useBookFoldPrintingSettings) &&\n         Objects.equals(this.useCoreFonts, pdfSaveOptionsData.useCoreFonts) &&\n         Objects.equals(this.zoomBehavior, pdfSaveOptionsData.zoomBehavior) &&\n-        Objects.equals(this.zoomFactor, pdfSaveOptionsData.zoomFactor) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.zoomFactor, pdfSaveOptionsData.zoomFactor) &&\n+            super.equals(o);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(compliance, createNoteHyperlinks, customPropertiesExport, digitalSignatureDetails, displayDocTitle, downsampleOptions, embedFullFonts, encryptionDetails, escapeUri, exportDocumentStructure, fontEmbeddingMode, headerFooterBookmarksExportMode, imageColorSpaceExportMode, imageCompression, interpolateImages, openHyperlinksInNewWindow, outlineOptions, pageMode, preblendImages, preserveFormFields, textCompression, useBookFoldPrintingSettings, useCoreFonts, zoomBehavior, zoomFactor, super.hashCode());\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class PdfSaveOptionsData {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -700,16 +808,18 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n     sb.append(\"    zoomFactor: \").append(toIndentedString(zoomFactor)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 275
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/194/PdfSaveOptionsData.java\nindex e239ec60c4..2156be8feb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/194/PdfSaveOptionsData.java\n@@ -633,7 +633,7 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n+    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData) o;\n     return\n         Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n         Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/194/PdfSaveOptionsData.java\nindex e239ec60c4..0e0c08cd20 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/194/PdfSaveOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/194/PdfSaveOptionsData.java\n@@ -633,7 +633,8 @@ public class PdfSaveOptionsData extends FixedPageSaveOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData)o;\n+    PdfSaveOptionsData pdfSaveOptionsData = (PdfSaveOptionsData\n+) o;\n     return\n         Objects.equals(this.compliance, pdfSaveOptionsData.compliance) &&\n         Objects.equals(this.createNoteHyperlinks, pdfSaveOptionsData.createNoteHyperlinks) &&\n",
            "diff_size": 2
        }
    ]
}