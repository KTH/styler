{
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": " * The base class for objects that can print trace information about themselves.\n */\npublic class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n\n    /**\n     * The trace type id  for callable statements.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/43/TraceObject.java\nindex f1b2a2f305..58c2f4e1d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/43/TraceObject.java\n@@ -13,9 +13,9 @@ import org.h2.util.StringUtils;\n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n-public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n+public class TraceObject{//jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n \n-    /**\n+/**\n      * The trace type id  for callable statements.\n      */\n     protected static final int CALLABLE_STATEMENT = 0;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/43/TraceObject.java\nindex f1b2a2f305..e1332abd12 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/43/TraceObject.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.message;\n \n import java.math.BigDecimal;\n@@ -92,9 +93,9 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n \n     private static final int LAST = ARRAY + 1;\n     private static final int[] ID = new int[LAST];\n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n-            \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\" };\n+    private static final String[] PREFIX = {\"call\", \"conn\", \"dbMeta\", \"prep\",\n+        \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n+        \"xads\", \"xares\", \"xid\", \"ar\"};\n \n     /**\n      * The trace module used by this object.\n@@ -108,8 +109,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * Set the options to use when writing trace message.\n      *\n      * @param trace the trace object\n-     * @param type the trace object type\n-     * @param id the trace object id\n+     * @param type  the trace object type\n+     * @param id    the trace object id\n      */\n     protected void setTrace(Trace trace, int type, int id) {\n         this.trace = trace;\n@@ -164,15 +165,15 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * className prefixId = objectName.value.\n      *\n      * @param className the class name of the result\n-     * @param newType the prefix type\n-     * @param newId the trace object id of the created object\n-     * @param value the value to assign this new object to\n+     * @param newType   the prefix type\n+     * @param newId     the trace object id of the created object\n+     * @param value     the value to assign this new object to\n      */\n     protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n+                                   String value) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(className + \" \" + PREFIX[newType] +\n-                    newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n+                newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n         }\n     }\n \n@@ -194,12 +195,12 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * value.\n      *\n      * @param methodName the method name\n-     * @param param one single long parameter\n+     * @param param      one single long parameter\n      */\n     protected void debugCodeCall(String methodName, long param) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + param + \");\");\n+                methodName + \"(\" + param + \");\");\n         }\n     }\n \n@@ -209,12 +210,12 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * string.\n      *\n      * @param methodName the method name\n-     * @param param one single string parameter\n+     * @param param      one single string parameter\n      */\n     protected void debugCodeCall(String methodName, String param) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + quote(param) + \");\");\n+                methodName + \"(\" + quote(param) + \");\");\n         }\n     }\n \n@@ -302,7 +303,7 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n             return \"null\";\n         }\n         return \"org.h2.util.StringUtils.convertHexToBytes(\\\"\" +\n-                StringUtils.convertBytesToHex(x) + \"\\\")\";\n+            StringUtils.convertBytesToHex(x) + \"\\\")\";\n     }\n \n     /**\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/43/TraceObject.java\nindex f1b2a2f305..1708fda9c5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/43/TraceObject.java\n@@ -13,7 +13,8 @@ import org.h2.util.StringUtils;\n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n-public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n+public class TraceObject {\n+    //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n \n     /**\n      * The trace type id  for callable statements.\n@@ -377,4 +378,4 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/43/TraceObject.java\nindex f1b2a2f305..7951f234c4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/43/TraceObject.java\n@@ -13,94 +13,142 @@ import org.h2.util.StringUtils;\n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n+\n+\n public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n \n     /**\n      * The trace type id  for callable statements.\n      */\n+\n+\n     protected static final int CALLABLE_STATEMENT = 0;\n \n     /**\n      * The trace type id  for connections.\n      */\n+\n+\n     protected static final int CONNECTION = 1;\n \n     /**\n      * The trace type id  for database meta data objects.\n      */\n+\n+\n     protected static final int DATABASE_META_DATA = 2;\n \n     /**\n      * The trace type id  for prepared statements.\n      */\n+\n+\n     protected static final int PREPARED_STATEMENT = 3;\n \n     /**\n      * The trace type id  for result sets.\n      */\n+\n+\n     protected static final int RESULT_SET = 4;\n \n     /**\n      * The trace type id  for result set meta data objects.\n      */\n+\n+\n     protected static final int RESULT_SET_META_DATA = 5;\n \n     /**\n      * The trace type id  for savepoint objects.\n      */\n+\n+\n     protected static final int SAVEPOINT = 6;\n \n     /**\n      * The trace type id  for statements.\n      */\n+\n+\n     protected static final int STATEMENT = 8;\n \n     /**\n      * The trace type id  for blobs.\n      */\n+\n+\n     protected static final int BLOB = 9;\n \n     /**\n      * The trace type id  for clobs.\n      */\n+\n+\n     protected static final int CLOB = 10;\n \n     /**\n      * The trace type id  for parameter meta data objects.\n      */\n+\n+\n     protected static final int PARAMETER_META_DATA = 11;\n \n     /**\n      * The trace type id  for data sources.\n      */\n+\n+\n     protected static final int DATA_SOURCE = 12;\n \n     /**\n      * The trace type id  for XA data sources.\n      */\n+\n+\n     protected static final int XA_DATA_SOURCE = 13;\n \n     /**\n      * The trace type id  for transaction ids.\n      */\n+\n+\n     protected static final int XID = 15;\n \n     /**\n      * The trace type id  for array objects.\n      */\n-    protected static final int ARRAY = 16;\n \n+\n+    protected static final int ARRAY = 16;\n     private static final int LAST = ARRAY + 1;\n     private static final int[] ID = new int[LAST];\n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n-            \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\" };\n+    private static final String[] PREFIX = {\n+        \"call\",\n+        \"conn\",\n+        \"dbMeta\",\n+        \"prep\",\n+        \"rs\",\n+        \"rsMeta\",\n+        \"sp\",\n+        \"ex\",\n+        \"stat\",\n+        \"blob\",\n+        \"clob\",\n+        \"pMeta\",\n+        \"ds\",\n+        \"xads\",\n+        \"xares\",\n+        \"xid\",\n+        \"ar\"\n+    };\n \n     /**\n      * The trace module used by this object.\n      */\n-    protected Trace trace;\n \n+\n+    protected Trace trace;\n     private int traceType;\n     private int id;\n \n@@ -111,6 +159,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param type the trace object type\n      * @param id the trace object id\n      */\n+\n+\n     protected void setTrace(Trace trace, int type, int id) {\n         this.trace = trace;\n         this.traceType = type;\n@@ -120,6 +170,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n     /**\n      * INTERNAL\n      */\n+\n+\n     public int getTraceId() {\n         return id;\n     }\n@@ -127,6 +179,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n     /**\n      * INTERNAL\n      */\n+\n+\n     public String getTraceObjectName() {\n         return PREFIX[traceType] + id;\n     }\n@@ -137,6 +191,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param type the object type\n      * @return the new trace object id\n      */\n+\n+\n     protected static int getNextId(int type) {\n         return ID[type]++;\n     }\n@@ -146,6 +202,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isDebugEnabled() {\n         return trace.isDebugEnabled();\n     }\n@@ -155,6 +213,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isInfoEnabled() {\n         return trace.isInfoEnabled();\n     }\n@@ -168,11 +228,14 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param newId the trace object id of the created object\n      * @param value the value to assign this new object to\n      */\n-    protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n+\n+\n+    protected void debugCodeAssign(String className, int newType, int newId, String value) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(className + \" \" + PREFIX[newType] +\n-                    newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n+            trace.debugCode(className + \" \"\n+            + PREFIX[newType] + newId + \" = \"\n+            + getTraceObjectName() + \".\"\n+            + value + \";\");\n         }\n     }\n \n@@ -182,9 +245,12 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      *\n      * @param methodName the method name\n      */\n+\n+\n     protected void debugCodeCall(String methodName) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" + methodName + \"();\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"();\");\n         }\n     }\n \n@@ -196,10 +262,13 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param methodName the method name\n      * @param param one single long parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, long param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + param + \");\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"(\"\n+            + param + \");\");\n         }\n     }\n \n@@ -211,10 +280,13 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param methodName the method name\n      * @param param one single string parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, String param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + quote(param) + \");\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"(\"\n+            + quote(param) + \");\");\n         }\n     }\n \n@@ -223,6 +295,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      *\n      * @param text the trace text\n      */\n+\n+\n     protected void debugCode(String text) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + \".\" + text);\n@@ -235,6 +309,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param s the string to convert\n      * @return the Java string literal\n      */\n+\n+\n     protected static String quote(String s) {\n         return StringUtils.quoteJavaString(s);\n     }\n@@ -245,6 +321,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param x the time to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTime(java.sql.Time x) {\n         if (x == null) {\n             return \"null\";\n@@ -258,6 +336,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param x the timestamp to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTimestamp(java.sql.Timestamp x) {\n         if (x == null) {\n             return \"null\";\n@@ -271,6 +351,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param x the date to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteDate(java.sql.Date x) {\n         if (x == null) {\n             return \"null\";\n@@ -284,6 +366,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param x the big decimal to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBigDecimal(BigDecimal x) {\n         if (x == null) {\n             return \"null\";\n@@ -297,12 +381,13 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param x the byte array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBytes(byte[] x) {\n         if (x == null) {\n             return \"null\";\n         }\n-        return \"org.h2.util.StringUtils.convertHexToBytes(\\\"\" +\n-                StringUtils.convertBytesToHex(x) + \"\\\")\";\n+        return \"org.h2.util.StringUtils.convertHexToBytes(\\\"\" + StringUtils.convertBytesToHex(x) + \"\\\")\";\n     }\n \n     /**\n@@ -312,6 +397,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param s the string array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteArray(String[] s) {\n         return StringUtils.quoteJavaStringArray(s);\n     }\n@@ -322,6 +409,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param s the int array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteIntArray(int[] s) {\n         return StringUtils.quoteJavaIntArray(s);\n     }\n@@ -332,6 +421,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param map the map to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteMap(Map<String, Class<?>> map) {\n         if (map == null) {\n             return \"null\";\n@@ -348,6 +439,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param ex the exception\n      * @return the SQL exception object\n      */\n+\n+\n     protected SQLException logAndConvert(Exception ex) {\n         SQLException e = DbException.toSQLException(ex);\n         if (trace == null) {\n@@ -369,6 +462,8 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n      * @param message the message\n      * @return the SQL exception\n      */\n+\n+\n     protected SQLException unsupported(String message) {\n         try {\n             throw DbException.getUnsupportedException(message);\n@@ -377,4 +472,4 @@ public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 115
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/43/TraceObject.java\nindex f1b2a2f305..58c2f4e1d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/43/TraceObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/43/TraceObject.java\n@@ -13,9 +13,9 @@ import org.h2.util.StringUtils;\n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n-public class TraceObject { //jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n+public class TraceObject{//jdbc\u548cjdbcx\u4e2d\u7684\u7c7b\u7ee7\u627f\u4e86\u5b83\uff0c\u4e0b\u976216\u4e2a\u5e38\u91cf\u5c31\u662f\u4ee3\u8868\u5176\u4e2d\u7684\u7c7b\n \n-    /**\n+/**\n      * The trace type id  for callable statements.\n      */\n     protected static final int CALLABLE_STATEMENT = 0;\n",
            "diff_size": 2
        }
    ]
}