{
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "183",
                "column": "13",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            right = right.optimize(session);\n            if (right instanceof ExpressionColumn) {\n            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                if (left.isConstant() || left instanceof Parameter) {\n                    Expression temp = left;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "195",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/52/Comparison.java\nindex 3f238aa352..856963d0fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/52/Comparison.java\n@@ -180,8 +180,7 @@ public class Comparison extends Condition {\n         if (right != null) {\n             right = right.optimize(session);\n             if (right instanceof ExpressionColumn) {\n-            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n-            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n+            //\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name //\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                 if (left.isConstant() || left instanceof Parameter) {\n                     Expression temp = left;\n                     left = right;\n@@ -193,7 +192,7 @@ public class Comparison extends Condition {\n                 if (right.isConstant()) {\n                     Value r = right.getValue(session);\n                     if (r == ValueNull.INSTANCE) {\n-                    \t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n                         if ((compareType & NULL_SAFE) == 0) {\n                             return ValueExpression.getNull();\n                         }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/52/Comparison.java\nindex 3f238aa352..d22d634ce0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/52/Comparison.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import java.util.Arrays;\n@@ -116,7 +117,7 @@ public class Comparison extends Condition {\n     private Expression right;\n \n     public Comparison(Session session, int compareType, Expression left,\n-            Expression right) {\n+                      Expression right) {\n         this.database = session.getDatabase();\n         this.left = left;\n         this.right = right;\n@@ -127,17 +128,17 @@ public class Comparison extends Condition {\n     public String getSQL() {\n         String sql;\n         switch (compareType) {\n-        case IS_NULL:\n-            sql = left.getSQL() + \" IS NULL\";\n-            break;\n-        case IS_NOT_NULL:\n-            sql = left.getSQL() + \" IS NOT NULL\";\n-            break;\n-        case SPATIAL_INTERSECTS:\n-            sql = \"INTERSECTS(\" + left.getSQL() + \", \" + right.getSQL() + \")\";\n-            break;\n-        default:\n-            sql = left.getSQL() + \" \" + getCompareOperator(compareType) +\n+            case IS_NULL:\n+                sql = left.getSQL() + \" IS NULL\";\n+                break;\n+            case IS_NOT_NULL:\n+                sql = left.getSQL() + \" IS NOT NULL\";\n+                break;\n+            case SPATIAL_INTERSECTS:\n+                sql = \"INTERSECTS(\" + left.getSQL() + \", \" + right.getSQL() + \")\";\n+                break;\n+            default:\n+                sql = left.getSQL() + \" \" + getCompareOperator(compareType) +\n                     \" \" + right.getSQL();\n         }\n         return \"(\" + sql + \")\";\n@@ -151,26 +152,26 @@ public class Comparison extends Condition {\n      */\n     static String getCompareOperator(int compareType) {\n         switch (compareType) {\n-        case EQUAL:\n-            return \"=\";\n-        case EQUAL_NULL_SAFE:\n-            return \"IS\";\n-        case BIGGER_EQUAL:\n-            return \">=\";\n-        case BIGGER:\n-            return \">\";\n-        case SMALLER_EQUAL:\n-            return \"<=\";\n-        case SMALLER:\n-            return \"<\";\n-        case NOT_EQUAL:\n-            return \"<>\";\n-        case NOT_EQUAL_NULL_SAFE:\n-            return \"IS NOT\";\n-        case SPATIAL_INTERSECTS:\n-            return \"&&\";\n-        default:\n-            throw DbException.throwInternalError(\"compareType=\" + compareType);\n+            case EQUAL:\n+                return \"=\";\n+            case EQUAL_NULL_SAFE:\n+                return \"IS\";\n+            case BIGGER_EQUAL:\n+                return \">=\";\n+            case BIGGER:\n+                return \">\";\n+            case SMALLER_EQUAL:\n+                return \"<=\";\n+            case SMALLER:\n+                return \"<\";\n+            case NOT_EQUAL:\n+                return \"<>\";\n+            case NOT_EQUAL_NULL_SAFE:\n+                return \"IS NOT\";\n+            case SPATIAL_INTERSECTS:\n+                return \"&&\";\n+            default:\n+                throw DbException.throwInternalError(\"compareType=\" + compareType);\n         }\n     }\n \n@@ -180,8 +181,8 @@ public class Comparison extends Condition {\n         if (right != null) {\n             right = right.optimize(session);\n             if (right instanceof ExpressionColumn) {\n-            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n-            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n+                //\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n+                //\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                 if (left.isConstant() || left instanceof Parameter) {\n                     Expression temp = left;\n                     left = right;\n@@ -193,7 +194,7 @@ public class Comparison extends Condition {\n                 if (right.isConstant()) {\n                     Value r = right.getValue(session);\n                     if (r == ValueNull.INSTANCE) {\n-                    \t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n+                        //\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n                         if ((compareType & NULL_SAFE) == 0) {\n                             return ValueExpression.getNull();\n                         }\n@@ -206,12 +207,12 @@ public class Comparison extends Condition {\n                     // once.\n                     if (constType != resType) {\n                         right = ValueExpression.get(r.convertTo(resType,\n-                                MathUtils.convertLongToInt(left.getPrecision()),\n-                                session.getDatabase().getMode(), ((ExpressionColumn) left).getColumn()));\n+                            MathUtils.convertLongToInt(left.getPrecision()),\n+                            session.getDatabase().getMode(), ((ExpressionColumn) left).getColumn()));\n                     }\n                 } else if (right instanceof Parameter) {\n                     ((Parameter) right).setColumn(\n-                            ((ExpressionColumn) left).getColumn());\n+                        ((ExpressionColumn) left).getColumn());\n                 }\n             }\n         }\n@@ -224,7 +225,7 @@ public class Comparison extends Condition {\n                 DbException.throwInternalError(left + \" \" + right);\n             }\n             if (left == ValueExpression.getNull() ||\n-                    right == ValueExpression.getNull()) {\n+                right == ValueExpression.getNull()) {\n                 // TODO NULL handling: maybe issue a warning when comparing with\n                 // a NULL constants\n                 if ((compareType & NULL_SAFE) == 0) {\n@@ -244,14 +245,14 @@ public class Comparison extends Condition {\n         if (right == null) {\n             boolean result;\n             switch (compareType) {\n-            case IS_NULL:\n-                result = l == ValueNull.INSTANCE;\n-                break;\n-            case IS_NOT_NULL:\n-                result = !(l == ValueNull.INSTANCE);\n-                break;\n-            default:\n-                throw DbException.throwInternalError(\"type=\" + compareType);\n+                case IS_NULL:\n+                    result = l == ValueNull.INSTANCE;\n+                    break;\n+                case IS_NOT_NULL:\n+                    result = !(l == ValueNull.INSTANCE);\n+                    break;\n+                default:\n+                    throw DbException.throwInternalError(\"type=\" + compareType);\n             }\n             return ValueBoolean.get(result);\n         }\n@@ -276,67 +277,67 @@ public class Comparison extends Condition {\n     /**\n      * Compare two values, given the values are not NULL.\n      *\n-     * @param database the database\n-     * @param l the first value\n-     * @param r the second value\n+     * @param database    the database\n+     * @param l           the first value\n+     * @param r           the second value\n      * @param compareType the compare type\n      * @return true if the comparison indicated by the comparison type evaluates\n-     *         to true\n+     * to true\n      */\n     static boolean compareNotNull(Database database, Value l, Value r,\n-            int compareType) {\n+                                  int compareType) {\n         boolean result;\n         switch (compareType) {\n-        case EQUAL:\n-        case EQUAL_NULL_SAFE:\n-            result = database.areEqual(l, r);\n-            break;\n-        case NOT_EQUAL:\n-        case NOT_EQUAL_NULL_SAFE:\n-            result = !database.areEqual(l, r);\n-            break;\n-        case BIGGER_EQUAL:\n-            result = database.compare(l, r) >= 0;\n-            break;\n-        case BIGGER:\n-            result = database.compare(l, r) > 0;\n-            break;\n-        case SMALLER_EQUAL:\n-            result = database.compare(l, r) <= 0;\n-            break;\n-        case SMALLER:\n-            result = database.compare(l, r) < 0;\n-            break;\n-        case SPATIAL_INTERSECTS: {\n-            ValueGeometry lg = (ValueGeometry) l.convertTo(Value.GEOMETRY);\n-            ValueGeometry rg = (ValueGeometry) r.convertTo(Value.GEOMETRY);\n-            result = lg.intersectsBoundingBox(rg);\n-            break;\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+            case EQUAL:\n+            case EQUAL_NULL_SAFE:\n+                result = database.areEqual(l, r);\n+                break;\n+            case NOT_EQUAL:\n+            case NOT_EQUAL_NULL_SAFE:\n+                result = !database.areEqual(l, r);\n+                break;\n+            case BIGGER_EQUAL:\n+                result = database.compare(l, r) >= 0;\n+                break;\n+            case BIGGER:\n+                result = database.compare(l, r) > 0;\n+                break;\n+            case SMALLER_EQUAL:\n+                result = database.compare(l, r) <= 0;\n+                break;\n+            case SMALLER:\n+                result = database.compare(l, r) < 0;\n+                break;\n+            case SPATIAL_INTERSECTS: {\n+                ValueGeometry lg = (ValueGeometry) l.convertTo(Value.GEOMETRY);\n+                ValueGeometry rg = (ValueGeometry) r.convertTo(Value.GEOMETRY);\n+                result = lg.intersectsBoundingBox(rg);\n+                break;\n+            }\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n         return result;\n     }\n \n     private int getReversedCompareType(int type) {\n         switch (compareType) {\n-        case EQUAL:\n-        case EQUAL_NULL_SAFE:\n-        case NOT_EQUAL:\n-        case NOT_EQUAL_NULL_SAFE:\n-        case SPATIAL_INTERSECTS:\n-            return type;\n-        case BIGGER_EQUAL:\n-            return SMALLER_EQUAL;\n-        case BIGGER:\n-            return SMALLER;\n-        case SMALLER_EQUAL:\n-            return BIGGER_EQUAL;\n-        case SMALLER:\n-            return BIGGER;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+            case EQUAL:\n+            case EQUAL_NULL_SAFE:\n+            case NOT_EQUAL:\n+            case NOT_EQUAL_NULL_SAFE:\n+            case SPATIAL_INTERSECTS:\n+                return type;\n+            case BIGGER_EQUAL:\n+                return SMALLER_EQUAL;\n+            case BIGGER:\n+                return SMALLER;\n+            case SMALLER_EQUAL:\n+                return BIGGER_EQUAL;\n+            case SMALLER:\n+                return BIGGER;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n     }\n \n@@ -351,28 +352,28 @@ public class Comparison extends Condition {\n \n     private int getNotCompareType() {\n         switch (compareType) {\n-        case EQUAL:\n-            return NOT_EQUAL;\n-        case EQUAL_NULL_SAFE:\n-            return NOT_EQUAL_NULL_SAFE;\n-        case NOT_EQUAL:\n-            return EQUAL;\n-        case NOT_EQUAL_NULL_SAFE:\n-            return EQUAL_NULL_SAFE;\n-        case BIGGER_EQUAL:\n-            return SMALLER;\n-        case BIGGER:\n-            return SMALLER_EQUAL;\n-        case SMALLER_EQUAL:\n-            return BIGGER;\n-        case SMALLER:\n-            return BIGGER_EQUAL;\n-        case IS_NULL:\n-            return IS_NOT_NULL;\n-        case IS_NOT_NULL:\n-            return IS_NULL;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+            case EQUAL:\n+                return NOT_EQUAL;\n+            case EQUAL_NULL_SAFE:\n+                return NOT_EQUAL_NULL_SAFE;\n+            case NOT_EQUAL:\n+                return EQUAL;\n+            case NOT_EQUAL_NULL_SAFE:\n+                return EQUAL_NULL_SAFE;\n+            case BIGGER_EQUAL:\n+                return SMALLER;\n+            case BIGGER:\n+                return SMALLER_EQUAL;\n+            case SMALLER_EQUAL:\n+                return BIGGER;\n+            case SMALLER:\n+                return BIGGER_EQUAL;\n+            case IS_NULL:\n+                return IS_NOT_NULL;\n+            case IS_NOT_NULL:\n+                return IS_NULL;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n     }\n \n@@ -391,13 +392,13 @@ public class Comparison extends Condition {\n         if (right == null) {\n             if (l != null) {\n                 switch (compareType) {\n-                case IS_NULL:\n-                    if (session.getDatabase().getSettings().optimizeIsNull) {\n-                        filter.addIndexCondition(\n+                    case IS_NULL:\n+                        if (session.getDatabase().getSettings().optimizeIsNull) {\n+                            filter.addIndexCondition(\n                                 IndexCondition.get(\n-                                        Comparison.EQUAL_NULL_SAFE, l,\n-                                        ValueExpression.getNull()));\n-                    }\n+                                    Comparison.EQUAL_NULL_SAFE, l,\n+                                    ValueExpression.getNull()));\n+                        }\n                 }\n             }\n             return;\n@@ -418,13 +419,13 @@ public class Comparison extends Condition {\n         }\n         if (l == null) {\n             ExpressionVisitor visitor =\n-                    ExpressionVisitor.getNotFromResolverVisitor(filter);\n+                ExpressionVisitor.getNotFromResolverVisitor(filter);\n             if (!left.isEverything(visitor)) {\n                 return;\n             }\n         } else if (r == null) {\n             ExpressionVisitor visitor =\n-                    ExpressionVisitor.getNotFromResolverVisitor(filter);\n+                ExpressionVisitor.getNotFromResolverVisitor(filter);\n             if (!right.isEverything(visitor)) {\n                 return;\n             }\n@@ -435,30 +436,30 @@ public class Comparison extends Condition {\n         }\n         boolean addIndex;\n         switch (compareType) {\n-        case NOT_EQUAL:\n-        case NOT_EQUAL_NULL_SAFE:\n-            addIndex = false;\n-            break;\n-        case EQUAL:\n-        case EQUAL_NULL_SAFE:\n-        case BIGGER:\n-        case BIGGER_EQUAL:\n-        case SMALLER_EQUAL:\n-        case SMALLER:\n-        case SPATIAL_INTERSECTS:\n-            addIndex = true;\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+            case NOT_EQUAL:\n+            case NOT_EQUAL_NULL_SAFE:\n+                addIndex = false;\n+                break;\n+            case EQUAL:\n+            case EQUAL_NULL_SAFE:\n+            case BIGGER:\n+            case BIGGER_EQUAL:\n+            case SMALLER_EQUAL:\n+            case SMALLER:\n+            case SPATIAL_INTERSECTS:\n+                addIndex = true;\n+                break;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n         if (addIndex) {\n             if (l != null) {\n                 filter.addIndexCondition(\n-                        IndexCondition.get(compareType, l, right));\n+                    IndexCondition.get(compareType, l, right));\n             } else if (r != null) {\n                 int compareRev = getReversedCompareType(compareType);\n                 filter.addIndexCondition(\n-                        IndexCondition.get(compareRev, r, left));\n+                    IndexCondition.get(compareRev, r, left));\n             }\n         }\n     }\n@@ -504,7 +505,7 @@ public class Comparison extends Condition {\n     @Override\n     public boolean isEverything(ExpressionVisitor visitor) {\n         return left.isEverything(visitor) &&\n-                (right == null || right.isEverything(visitor));\n+            (right == null || right.isEverything(visitor));\n     }\n \n     @Override\n@@ -537,8 +538,8 @@ public class Comparison extends Condition {\n      * A=1 OR A=2, the new condition A IN(1, 2) is returned.\n      *\n      * @param session the session\n-     * @param other the second condition\n-     * @param and true for AND, false for OR\n+     * @param other   the second condition\n+     * @param and     true for AND, false for OR\n      * @return null or the third condition\n      */\n     Expression getAdditional(Session session, Comparison other, boolean and) {\n@@ -568,16 +569,16 @@ public class Comparison extends Condition {\n                 Database db = session.getDatabase();\n                 if (rc && r2c && l.equals(l2)) {\n                     return new ConditionIn(db, left,\n-                            New.arrayList(Arrays.asList(right, other.right)));\n+                        New.arrayList(Arrays.asList(right, other.right)));\n                 } else if (rc && l2c && l.equals(r2)) {\n                     return new ConditionIn(db, left,\n-                            New.arrayList(Arrays.asList(right, other.left)));\n+                        New.arrayList(Arrays.asList(right, other.left)));\n                 } else if (lc && r2c && r.equals(l2)) {\n                     return new ConditionIn(db, right,\n-                            New.arrayList(Arrays.asList(left, other.right)));\n+                        New.arrayList(Arrays.asList(left, other.right)));\n                 } else if (lc && l2c && r.equals(r2)) {\n                     return new ConditionIn(db, right,\n-                            New.arrayList(Arrays.asList(left, other.left)));\n+                        New.arrayList(Arrays.asList(left, other.left)));\n                 }\n             }\n         }\n@@ -588,7 +589,7 @@ public class Comparison extends Condition {\n      * Get the left or the right sub-expression of this condition.\n      *\n      * @param getLeft true to get the left sub-expression, false to get the\n-     *            right sub-expression.\n+     *                right sub-expression.\n      * @return the sub-expression\n      */\n     public Expression getExpression(boolean getLeft) {\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/52/Comparison.java\nindex 3f238aa352..b03d448efe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/52/Comparison.java\n@@ -27,6 +27,8 @@ import org.h2.value.ValueNull;\n  * @author Noel Grandin\n  * @author Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888\n  */\n+\n+\n public class Comparison extends Condition {\n \n     /**\n@@ -34,89 +36,119 @@ public class Comparison extends Condition {\n      * NULL even if one operand is NULL). Only EQUAL and NOT_EQUAL are supported\n      * currently.\n      */\n+\n+\n     public static final int NULL_SAFE = 16;\n \n     /**\n      * The comparison type meaning = as in ID=1.\n      */\n+\n+\n     public static final int EQUAL = 0;\n \n     /**\n      * The comparison type meaning ID IS 1 (ID IS NOT DISTINCT FROM 1).\n      */\n+\n+\n     public static final int EQUAL_NULL_SAFE = EQUAL | NULL_SAFE;\n \n     /**\n      * The comparison type meaning &gt;= as in ID&gt;=1.\n      */\n+\n+\n     public static final int BIGGER_EQUAL = 1;\n \n     /**\n      * The comparison type meaning &gt; as in ID&gt;1.\n      */\n+\n+\n     public static final int BIGGER = 2;\n \n     /**\n      * The comparison type meaning &lt;= as in ID&lt;=1.\n      */\n+\n+\n     public static final int SMALLER_EQUAL = 3;\n \n     /**\n      * The comparison type meaning &lt; as in ID&lt;1.\n      */\n+\n+\n     public static final int SMALLER = 4;\n \n     /**\n      * The comparison type meaning &lt;&gt; as in ID&lt;&gt;1.\n      */\n+\n+\n     public static final int NOT_EQUAL = 5;\n \n     /**\n      * The comparison type meaning ID IS NOT 1 (ID IS DISTINCT FROM 1).\n      */\n+\n+\n     public static final int NOT_EQUAL_NULL_SAFE = NOT_EQUAL | NULL_SAFE;\n \n     /**\n      * The comparison type meaning IS NULL as in NAME IS NULL.\n      */\n+\n+\n     public static final int IS_NULL = 6;\n \n     /**\n      * The comparison type meaning IS NOT NULL as in NAME IS NOT NULL.\n      */\n+\n+\n     public static final int IS_NOT_NULL = 7;\n \n     /**\n      * This is a pseudo comparison type that is only used for index conditions.\n      * It means the comparison will always yield FALSE. Example: 1=0.\n      */\n+\n+\n     public static final int FALSE = 8;\n \n     /**\n      * This is a pseudo comparison type that is only used for index conditions.\n      * It means equals any value of a list. Example: IN(1, 2, 3).\n      */\n+\n+\n     public static final int IN_LIST = 9;\n \n     /**\n      * This is a pseudo comparison type that is only used for index conditions.\n      * It means equals any value of a list. Example: IN(SELECT ...).\n      */\n+\n+\n     public static final int IN_QUERY = 10;\n \n     /**\n      * This is a comparison type that is only used for spatial index\n      * conditions (operator \"&&\").\n      */\n-    public static final int SPATIAL_INTERSECTS = 11;\n \n+\n+    public static final int SPATIAL_INTERSECTS = 11;\n     private final Database database;\n     private int compareType;\n     private Expression left;\n     private Expression right;\n \n-    public Comparison(Session session, int compareType, Expression left,\n-            Expression right) {\n+    public Comparison(Session session,\n+        int compareType,\n+            Expression left, Expression right) {\n         this.database = session.getDatabase();\n         this.left = left;\n         this.right = right;\n@@ -134,11 +166,12 @@ public class Comparison extends Condition {\n             sql = left.getSQL() + \" IS NOT NULL\";\n             break;\n         case SPATIAL_INTERSECTS:\n-            sql = \"INTERSECTS(\" + left.getSQL() + \", \" + right.getSQL() + \")\";\n+            sql = \"INTERSECTS(\" + left.getSQL() + \", \"\n+            + right.getSQL() + \")\";\n             break;\n         default:\n-            sql = left.getSQL() + \" \" + getCompareOperator(compareType) +\n-                    \" \" + right.getSQL();\n+            sql = left.getSQL() + \" \"\n+            + getCompareOperator(compareType) + \" \" + right.getSQL();\n         }\n         return \"(\" + sql + \")\";\n     }\n@@ -149,6 +182,8 @@ public class Comparison extends Condition {\n      * @param compareType the compare type\n      * @return the string\n      */\n+\n+\n     static String getCompareOperator(int compareType) {\n         switch (compareType) {\n         case EQUAL:\n@@ -180,8 +215,8 @@ public class Comparison extends Condition {\n         if (right != null) {\n             right = right.optimize(session);\n             if (right instanceof ExpressionColumn) {\n-            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n-            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n+                //\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n+                //\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                 if (left.isConstant() || left instanceof Parameter) {\n                     Expression temp = left;\n                     left = right;\n@@ -193,7 +228,7 @@ public class Comparison extends Condition {\n                 if (right.isConstant()) {\n                     Value r = right.getValue(session);\n                     if (r == ValueNull.INSTANCE) {\n-                    \t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n+                        //\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n                         if ((compareType & NULL_SAFE) == 0) {\n                             return ValueExpression.getNull();\n                         }\n@@ -205,13 +240,10 @@ public class Comparison extends Condition {\n                     // to constant type, but vise versa, then let's do this here\n                     // once.\n                     if (constType != resType) {\n-                        right = ValueExpression.get(r.convertTo(resType,\n-                                MathUtils.convertLongToInt(left.getPrecision()),\n-                                session.getDatabase().getMode(), ((ExpressionColumn) left).getColumn()));\n+                        right = ValueExpression.get(r.convertTo(resType, MathUtils.convertLongToInt(left.getPrecision()), session.getDatabase().getMode(), ((ExpressionColumn) left).getColumn()));\n                     }\n                 } else if (right instanceof Parameter) {\n-                    ((Parameter) right).setColumn(\n-                            ((ExpressionColumn) left).getColumn());\n+                    ((Parameter) right).setColumn(((ExpressionColumn) left).getColumn());\n                 }\n             }\n         }\n@@ -223,8 +255,7 @@ public class Comparison extends Condition {\n             if (SysProperties.CHECK && (left == null || right == null)) {\n                 DbException.throwInternalError(left + \" \" + right);\n             }\n-            if (left == ValueExpression.getNull() ||\n-                    right == ValueExpression.getNull()) {\n+            if (left == ValueExpression.getNull() || right == ValueExpression.getNull()) {\n                 // TODO NULL handling: maybe issue a warning when comparing with\n                 // a NULL constants\n                 if ((compareType & NULL_SAFE) == 0) {\n@@ -283,8 +314,9 @@ public class Comparison extends Condition {\n      * @return true if the comparison indicated by the comparison type evaluates\n      *         to true\n      */\n-    static boolean compareNotNull(Database database, Value l, Value r,\n-            int compareType) {\n+\n+\n+    static boolean compareNotNull(Database database, Value l, Value r, int compareType) {\n         boolean result;\n         switch (compareType) {\n         case EQUAL:\n@@ -393,10 +425,9 @@ public class Comparison extends Condition {\n                 switch (compareType) {\n                 case IS_NULL:\n                     if (session.getDatabase().getSettings().optimizeIsNull) {\n-                        filter.addIndexCondition(\n-                                IndexCondition.get(\n-                                        Comparison.EQUAL_NULL_SAFE, l,\n-                                        ValueExpression.getNull()));\n+                        filter.addIndexCondition(IndexCondition.get(Comparison.EQUAL_NULL_SAFE,\n+                                                                    l,\n+                                                                    ValueExpression.getNull()));\n                     }\n                 }\n             }\n@@ -417,14 +448,12 @@ public class Comparison extends Condition {\n             return;\n         }\n         if (l == null) {\n-            ExpressionVisitor visitor =\n-                    ExpressionVisitor.getNotFromResolverVisitor(filter);\n+            ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n             if (!left.isEverything(visitor)) {\n                 return;\n             }\n         } else if (r == null) {\n-            ExpressionVisitor visitor =\n-                    ExpressionVisitor.getNotFromResolverVisitor(filter);\n+            ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n             if (!right.isEverything(visitor)) {\n                 return;\n             }\n@@ -453,12 +482,10 @@ public class Comparison extends Condition {\n         }\n         if (addIndex) {\n             if (l != null) {\n-                filter.addIndexCondition(\n-                        IndexCondition.get(compareType, l, right));\n+                filter.addIndexCondition(IndexCondition.get(compareType, l, right));\n             } else if (r != null) {\n                 int compareRev = getReversedCompareType(compareType);\n-                filter.addIndexCondition(\n-                        IndexCondition.get(compareRev, r, left));\n+                filter.addIndexCondition(IndexCondition.get(compareRev, r, left));\n             }\n         }\n     }\n@@ -503,8 +530,7 @@ public class Comparison extends Condition {\n \n     @Override\n     public boolean isEverything(ExpressionVisitor visitor) {\n-        return left.isEverything(visitor) &&\n-                (right == null || right.isEverything(visitor));\n+        return left.isEverything(visitor) && (right == null || right.isEverything(visitor));\n     }\n \n     @Override\n@@ -519,6 +545,8 @@ public class Comparison extends Condition {\n      * @param match the expression that should match\n      * @return null if no match, the other expression if there is a match\n      */\n+\n+\n     Expression getIfEquals(Expression match) {\n         if (compareType == EQUAL) {\n             String sql = match.getSQL();\n@@ -541,6 +569,8 @@ public class Comparison extends Condition {\n      * @param and true for AND, false for OR\n      * @return null or the third condition\n      */\n+\n+\n     Expression getAdditional(Session session, Comparison other, boolean and) {\n         if (compareType == other.compareType && compareType == EQUAL) {\n             boolean lc = left.isConstant();\n@@ -557,28 +587,32 @@ public class Comparison extends Condition {\n                 if (!(rc && r2c) && l.equals(l2)) {\n                     return new Comparison(session, EQUAL, right, other.right);\n                 } else if (!(rc && l2c) && l.equals(r2)) {\n-                    return new Comparison(session, EQUAL, right, other.left);\n+                         return new Comparison(session, EQUAL, right, other.left);\n                 } else if (!(lc && r2c) && r.equals(l2)) {\n-                    return new Comparison(session, EQUAL, left, other.right);\n-                } else if (!(lc && l2c) && r.equals(r2)) {\n-                    return new Comparison(session, EQUAL, left, other.left);\n-                }\n+                         return new Comparison(session, EQUAL, left, other.right);\n+                       } else if (!(lc && l2c) && r.equals(r2)) {\n+                           return new Comparison(session, EQUAL, left, other.left);\n+                       }\n             } else {\n                 // a=b OR a=c\n                 Database db = session.getDatabase();\n                 if (rc && r2c && l.equals(l2)) {\n-                    return new ConditionIn(db, left,\n+                    return new ConditionIn(db,\n+                        left,\n                             New.arrayList(Arrays.asList(right, other.right)));\n                 } else if (rc && l2c && l.equals(r2)) {\n-                    return new ConditionIn(db, left,\n-                            New.arrayList(Arrays.asList(right, other.left)));\n+                       return new ConditionIn(db,\n+                           left,\n+                               New.arrayList(Arrays.asList(right, other.left)));\n                 } else if (lc && r2c && r.equals(l2)) {\n-                    return new ConditionIn(db, right,\n-                            New.arrayList(Arrays.asList(left, other.right)));\n-                } else if (lc && l2c && r.equals(r2)) {\n-                    return new ConditionIn(db, right,\n-                            New.arrayList(Arrays.asList(left, other.left)));\n-                }\n+                       return new ConditionIn(db,\n+                           right,\n+                               New.arrayList(Arrays.asList(left, other.right)));\n+                       } else if (lc && l2c && r.equals(r2)) {\n+                           return new ConditionIn(db,\n+                               right,\n+                                   New.arrayList(Arrays.asList(left, other.left)));\n+                       }\n             }\n         }\n         return null;\n@@ -591,8 +625,10 @@ public class Comparison extends Condition {\n      *            right sub-expression.\n      * @return the sub-expression\n      */\n+\n+\n     public Expression getExpression(boolean getLeft) {\n         return getLeft ? this.left : right;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 94
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "195",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/52/Comparison.java\nindex 3f238aa352..856963d0fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/52/Comparison.java\n@@ -180,8 +180,7 @@ public class Comparison extends Condition {\n         if (right != null) {\n             right = right.optimize(session);\n             if (right instanceof ExpressionColumn) {\n-            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n-            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n+            //\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name //\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                 if (left.isConstant() || left instanceof Parameter) {\n                     Expression temp = left;\n                     left = right;\n@@ -193,7 +192,7 @@ public class Comparison extends Condition {\n                 if (right.isConstant()) {\n                     Value r = right.getValue(session);\n                     if (r == ValueNull.INSTANCE) {\n-                    \t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n                         if ((compareType & NULL_SAFE) == 0) {\n                             return ValueExpression.getNull();\n                         }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "196",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/52/Comparison.java\nindex 3f238aa352..c209c0822a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/52/Comparison.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/52/Comparison.java\n@@ -180,8 +180,8 @@ public class Comparison extends Condition {\n         if (right != null) {\n             right = right.optimize(session);\n             if (right instanceof ExpressionColumn) {\n-            \t//\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n-            \t//\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n+                //\u4f8b\u5982delete top 3 from DeleteTest where 'a1'> name\n+             //\u8f6c\u6210delete top 3 from DeleteTest where name < 'a1'\n                 if (left.isConstant() || left instanceof Parameter) {\n                     Expression temp = left;\n                     left = right;\n@@ -193,7 +193,7 @@ public class Comparison extends Condition {\n                 if (right.isConstant()) {\n                     Value r = right.getValue(session);\n                     if (r == ValueNull.INSTANCE) {\n-                    \t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u4f8b\u5982: \"delete top 3 from DeleteTest where name = null\n                         if ((compareType & NULL_SAFE) == 0) {\n                             return ValueExpression.getNull();\n                         }\n",
            "diff_size": 3
        }
    ]
}