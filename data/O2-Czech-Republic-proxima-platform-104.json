{
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 99).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertEquals(json, serializer.fromJsonValue(json));\n    assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n    assertEquals(\"{}\", serializer.getDefault());\n    assertTrue(serializer.isUsable());\n    assertTrue(serializer.isValid(new byte[] {}));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/104/JsonSerializerTest.java\nindex 2707c141fa..5ba052e798 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/104/JsonSerializerTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.scheme;\n \n import static org.junit.Assert.*;\n@@ -35,7 +36,8 @@ public class JsonSerializerTest {\n     assertEquals(json, serializer.asJsonValue(json));\n     assertEquals(json, serializer.fromJsonValue(json));\n     assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n-    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n+    assertEquals(json,\n+        serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n     assertEquals(\"{}\", serializer.getDefault());\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/104/JsonSerializerTest.java\nindex 2707c141fa..9058c9f1af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/104/JsonSerializerTest.java\n@@ -40,4 +40,4 @@ public class JsonSerializerTest {\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/104/JsonSerializerTest.java\nindex 2707c141fa..7759476bc8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/104/JsonSerializerTest.java\n@@ -16,18 +16,19 @@\n package cz.o2.proxima.scheme;\n \n import static org.junit.Assert.*;\n-\n import java.net.URI;\n import java.nio.charset.StandardCharsets;\n import org.junit.Test;\n \n /** Test {@link JsonSerializer}. */\n+\n+\n public class JsonSerializerTest {\n \n-  private final JsonSerializer serializer = new JsonSerializer();\n+    private final JsonSerializer serializer = new JsonSerializer();\n \n-  @Test\n-  public void testJsonSerializer() {\n+    @Test\n+    public void testJsonSerializer() {\n     assertEquals(\"json\", serializer.getAcceptableScheme());\n     assertEquals(String.class.getName(), serializer.getClassName(URI.create(\"json:///\")));\n     ValueSerializer<String> serializer = this.serializer.getValueSerializer(null);\n@@ -39,5 +40,5 @@ public class JsonSerializerTest {\n     assertEquals(\"{}\", serializer.getDefault());\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "column": "143",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/104/JsonSerializerTest.java\nindex 2707c141fa..22877e9f07 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/104/JsonSerializerTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/104/JsonSerializerTest.java\n@@ -35,8 +35,7 @@ public class JsonSerializerTest {\n     assertEquals(json, serializer.asJsonValue(json));\n     assertEquals(json, serializer.fromJsonValue(json));\n     assertArrayEquals(json.getBytes(StandardCharsets.UTF_8), serializer.serialize(json));\n-    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));\n-    assertEquals(\"{}\", serializer.getDefault());\n+    assertEquals(json, serializer.deserialize(json.getBytes(StandardCharsets.UTF_8)).orElse(null));assertEquals(\"{}\", serializer.getDefault());\n     assertTrue(serializer.isUsable());\n     assertTrue(serializer.isValid(new byte[] {}));\n   }\n",
            "diff_size": 2
        }
    ]
}