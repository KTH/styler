{
    "error_id": "579",
    "information": {
        "errors": [
            {
                "line": "471",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            ResultSet rs = null;\n            try {\n\t\t if (sql.startsWith(\"@\")) {\n\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n\t\t     int rowCount = printResult(rs, listMode);\n\t\t } else if (stat.execute(sql)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/579/Shell.java\nindex cf501c66c9..30135ee4ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/579/Shell.java\n@@ -39,7 +39,7 @@ public class Shell extends Tool implements Runnable {\n \n     private static final int MAX_ROW_BUFFER = 5000;\n     private static final int HISTORY_COUNT = 20;\n-    // Windows: '\\u00b3';\n+    // Windows: '\u00b3';\n     private static final char BOX_VERTICAL = '|';\n \n     private PrintStream err = System.err;\n@@ -468,10 +468,10 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+       rs = JdbcUtils.getMetaResultSet(conn, sql);\n+       int rowCount = printResult(rs, listMode);\n+   } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "377",
                    "column": "14",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/579/Shell.java\nindex cf501c66c9..66e8b077ca 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/579/Shell.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.tools;\n \n import java.io.BufferedReader;\n@@ -33,596 +34,602 @@ import org.h2.util.Utils;\n \n /**\n  * Interactive command line tool to access a database using JDBC.\n+ *\n  * @h2.resource\n  */\n public class Shell extends Tool implements Runnable {\n \n-    private static final int MAX_ROW_BUFFER = 5000;\n-    private static final int HISTORY_COUNT = 20;\n-    // Windows: '\\u00b3';\n-    private static final char BOX_VERTICAL = '|';\n+  private static final int MAX_ROW_BUFFER = 5000;\n+  private static final int HISTORY_COUNT = 20;\n+  // Windows: '\\u00b3';\n+  private static final char BOX_VERTICAL = '|';\n \n-    private PrintStream err = System.err;\n-    private InputStream in = System.in;\n-    private BufferedReader reader;\n-    private Connection conn;\n-    private Statement stat;\n-    private boolean listMode;\n-    private int maxColumnSize = 100;\n-    private final ArrayList<String> history = new ArrayList<>();\n-    private boolean stopHide;\n-    private String serverPropertiesDir = Constants.SERVER_PROPERTIES_DIR;\n+  private PrintStream err = System.err;\n+  private InputStream in = System.in;\n+  private BufferedReader reader;\n+  private Connection conn;\n+  private Statement stat;\n+  private boolean listMode;\n+  private int maxColumnSize = 100;\n+  private final ArrayList<String> history = new ArrayList<>();\n+  private boolean stopHide;\n+  private String serverPropertiesDir = Constants.SERVER_PROPERTIES_DIR;\n \n-    /**\n-     * Options are case sensitive. Supported options are:\n-     * <table>\n-     * <tr><td>[-help] or [-?]</td>\n-     * <td>Print the list of options</td></tr>\n-     * <tr><td>[-url \"&lt;url&gt;\"]</td>\n-     * <td>The database URL (jdbc:h2:...)</td></tr>\n-     * <tr><td>[-user &lt;user&gt;]</td>\n-     * <td>The user name</td></tr>\n-     * <tr><td>[-password &lt;pwd&gt;]</td>\n-     * <td>The password</td></tr>\n-     * <tr><td>[-driver &lt;class&gt;]</td>\n-     * <td>The JDBC driver class to use (not required in most cases)</td></tr>\n-     * <tr><td>[-sql \"&lt;statements&gt;\"]</td>\n-     * <td>Execute the SQL statements and exit</td></tr>\n-     * <tr><td>[-properties \"&lt;dir&gt;\"]</td>\n-     * <td>Load the server properties from this directory</td></tr>\n-     * </table>\n-     * If special characters don't work as expected, you may need to use\n-     * -Dfile.encoding=UTF-8 (Mac OS X) or CP850 (Windows).\n-     * @h2.resource\n-     *\n-     * @param args the command line arguments\n-     */\n-    public static void main(String... args) throws SQLException {\n-        new Shell().runTool(args);\n-    }\n+  /**\n+   * Options are case sensitive. Supported options are:\n+   * <table>\n+   * <tr><td>[-help] or [-?]</td>\n+   * <td>Print the list of options</td></tr>\n+   * <tr><td>[-url \"&lt;url&gt;\"]</td>\n+   * <td>The database URL (jdbc:h2:...)</td></tr>\n+   * <tr><td>[-user &lt;user&gt;]</td>\n+   * <td>The user name</td></tr>\n+   * <tr><td>[-password &lt;pwd&gt;]</td>\n+   * <td>The password</td></tr>\n+   * <tr><td>[-driver &lt;class&gt;]</td>\n+   * <td>The JDBC driver class to use (not required in most cases)</td></tr>\n+   * <tr><td>[-sql \"&lt;statements&gt;\"]</td>\n+   * <td>Execute the SQL statements and exit</td></tr>\n+   * <tr><td>[-properties \"&lt;dir&gt;\"]</td>\n+   * <td>Load the server properties from this directory</td></tr>\n+   * </table>\n+   * If special characters don't work as expected, you may need to use\n+   * -Dfile.encoding=UTF-8 (Mac OS X) or CP850 (Windows).\n+   *\n+   * @param args the command line arguments\n+   * @h2.resource\n+   */\n+  public static void main(String... args) throws SQLException {\n+    new Shell().runTool(args);\n+  }\n \n-    /**\n-     * Sets the standard error stream.\n-     *\n-     * @param err the new standard error stream\n-     */\n-    public void setErr(PrintStream err) {\n-        this.err = err;\n-    }\n+  /**\n+   * Sets the standard error stream.\n+   *\n+   * @param err the new standard error stream\n+   */\n+  public void setErr(PrintStream err) {\n+    this.err = err;\n+  }\n \n-    /**\n-     * Redirects the standard input. By default, System.in is used.\n-     *\n-     * @param in the input stream to use\n-     */\n-    public void setIn(InputStream in) {\n-        this.in = in;\n-    }\n+  /**\n+   * Redirects the standard input. By default, System.in is used.\n+   *\n+   * @param in the input stream to use\n+   */\n+  public void setIn(InputStream in) {\n+    this.in = in;\n+  }\n \n-    /**\n-     * Redirects the standard input. By default, System.in is used.\n-     *\n-     * @param reader the input stream reader to use\n-     */\n-    public void setInReader(BufferedReader reader) {\n-        this.reader = reader;\n-    }\n+  /**\n+   * Redirects the standard input. By default, System.in is used.\n+   *\n+   * @param reader the input stream reader to use\n+   */\n+  public void setInReader(BufferedReader reader) {\n+    this.reader = reader;\n+  }\n \n-    /**\n-     * Run the shell tool with the given command line settings.\n-     *\n-     * @param args the command line settings\n-     */\n-    @Override\n-    public void runTool(String... args) throws SQLException {\n-        String url = null;\n-        String user = \"\";\n-        String password = \"\";\n-        String sql = null;\n-        for (int i = 0; args != null && i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.equals(\"-url\")) {\n-                url = args[++i];\n-            } else if (arg.equals(\"-user\")) {\n-                user = args[++i];\n-            } else if (arg.equals(\"-password\")) {\n-                password = args[++i];\n-            } else if (arg.equals(\"-driver\")) {\n-                String driver = args[++i];\n-                JdbcUtils.loadUserClass(driver);\n-            } else if (arg.equals(\"-sql\")) {\n-                sql = args[++i];\n-            } else if (arg.equals(\"-properties\")) {\n-                serverPropertiesDir = args[++i];\n-            } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n-                showUsage();\n-                return;\n-            } else if (arg.equals(\"-list\")) {\n-                listMode = true;\n-            } else {\n-                showUsageAndThrowUnsupportedOption(arg);\n-            }\n-        }\n-        if (url != null) {\n-            conn = DriverManager.getConnection(url, user, password);\n-            stat = conn.createStatement();\n-        }\n-        if (sql == null) {\n-            promptLoop();\n-        } else {\n-            ScriptReader r = new ScriptReader(new StringReader(sql));\n-            while (true) {\n-                String s = r.readStatement();\n-                if (s == null) {\n-                    break;\n-                }\n-                execute(s);\n-            }\n-            if (conn != null) {\n-                conn.close();\n-            }\n+  /**\n+   * Run the shell tool with the given command line settings.\n+   *\n+   * @param args the command line settings\n+   */\n+  @Override\n+  public void runTool(String... args) throws SQLException {\n+    String url = null;\n+    String user = \"\";\n+    String password = \"\";\n+    String sql = null;\n+    for (int i = 0; args != null && i < args.length; i++) {\n+      String arg = args[i];\n+      if (arg.equals(\"-url\")) {\n+        url = args[++i];\n+      } else if (arg.equals(\"-user\")) {\n+        user = args[++i];\n+      } else if (arg.equals(\"-password\")) {\n+        password = args[++i];\n+      } else if (arg.equals(\"-driver\")) {\n+        String driver = args[++i];\n+        JdbcUtils.loadUserClass(driver);\n+      } else if (arg.equals(\"-sql\")) {\n+        sql = args[++i];\n+      } else if (arg.equals(\"-properties\")) {\n+        serverPropertiesDir = args[++i];\n+      } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n+        showUsage();\n+        return;\n+      } else if (arg.equals(\"-list\")) {\n+        listMode = true;\n+      } else {\n+        showUsageAndThrowUnsupportedOption(arg);\n+      }\n+    }\n+    if (url != null) {\n+      conn = DriverManager.getConnection(url, user, password);\n+      stat = conn.createStatement();\n+    }\n+    if (sql == null) {\n+      promptLoop();\n+    } else {\n+      ScriptReader r = new ScriptReader(new StringReader(sql));\n+      while (true) {\n+        String s = r.readStatement();\n+        if (s == null) {\n+          break;\n         }\n+        execute(s);\n+      }\n+      if (conn != null) {\n+        conn.close();\n+      }\n     }\n+  }\n \n-    /**\n-     * Run the shell tool with the given connection and command line settings.\n-     * The connection will be closed when the shell exits.\n-     * This is primary used to integrate the Shell into another application.\n-     * <p>\n-     * Note: using the \"-url\" option in {@code args} doesn't make much sense\n-     * since it will override the {@code conn} parameter.\n-     * </p>\n-     *\n-     * @param conn the connection\n-     * @param args the command line settings\n-     */\n-    public void runTool(Connection conn, String... args) throws SQLException {\n-        this.conn = conn;\n-        this.stat = conn.createStatement();\n-        runTool(args);\n-    }\n+  /**\n+   * Run the shell tool with the given connection and command line settings.\n+   * The connection will be closed when the shell exits.\n+   * This is primary used to integrate the Shell into another application.\n+   * <p>\n+   * Note: using the \"-url\" option in {@code args} doesn't make much sense\n+   * since it will override the {@code conn} parameter.\n+   * </p>\n+   *\n+   * @param conn the connection\n+   * @param args the command line settings\n+   */\n+  public void runTool(Connection conn, String... args) throws SQLException {\n+    this.conn = conn;\n+    this.stat = conn.createStatement();\n+    runTool(args);\n+  }\n \n-    private void showHelp() {\n-        println(\"Commands are case insensitive; SQL statements end with ';'\");\n-        println(\"help or ?      Display this help\");\n-        println(\"list           Toggle result list / stack trace mode\");\n-        println(\"maxwidth       Set maximum column width (default is 100)\");\n-        println(\"autocommit     Enable or disable autocommit\");\n-        println(\"history        Show the last 20 statements\");\n-        println(\"quit or exit   Close the connection and exit\");\n-        println(\"\");\n-    }\n+  private void showHelp() {\n+    println(\"Commands are case insensitive; SQL statements end with ';'\");\n+    println(\"help or ?      Display this help\");\n+    println(\"list           Toggle result list / stack trace mode\");\n+    println(\"maxwidth       Set maximum column width (default is 100)\");\n+    println(\"autocommit     Enable or disable autocommit\");\n+    println(\"history        Show the last 20 statements\");\n+    println(\"quit or exit   Close the connection and exit\");\n+    println(\"\");\n+  }\n \n-    private void promptLoop() {\n-        println(\"\");\n-        println(\"Welcome to H2 Shell \" + Constants.FULL_VERSION);\n-        println(\"Exit with Ctrl+C\");\n-        if (conn != null) {\n-            showHelp();\n+  private void promptLoop() {\n+    println(\"\");\n+    println(\"Welcome to H2 Shell \" + Constants.FULL_VERSION);\n+    println(\"Exit with Ctrl+C\");\n+    if (conn != null) {\n+      showHelp();\n+    }\n+    String statement = null;\n+    if (reader == null) {\n+      reader = new BufferedReader(new InputStreamReader(in));\n+    }\n+    while (true) {\n+      try {\n+        if (conn == null) {\n+          connect();\n+          showHelp();\n         }\n-        String statement = null;\n-        if (reader == null) {\n-            reader = new BufferedReader(new InputStreamReader(in));\n+        if (statement == null) {\n+          print(\"sql> \");\n+        } else {\n+          print(\"...> \");\n         }\n-        while (true) {\n-            try {\n-                if (conn == null) {\n-                    connect();\n-                    showHelp();\n-                }\n-                if (statement == null) {\n-                    print(\"sql> \");\n-                } else {\n-                    print(\"...> \");\n-                }\n-                String line = readLine();\n-                if (line == null) {\n-                    break;\n-                }\n-                String trimmed = line.trim();\n-                if (trimmed.isEmpty()) {\n-                    continue;\n-                }\n-                boolean end = trimmed.endsWith(\";\");\n-                if (end) {\n-                    line = line.substring(0, line.lastIndexOf(';'));\n-                    trimmed = trimmed.substring(0, trimmed.length() - 1);\n-                }\n-                String lower = StringUtils.toLowerEnglish(trimmed);\n-                if (\"exit\".equals(lower) || \"quit\".equals(lower)) {\n-                    break;\n-                } else if (\"help\".equals(lower) || \"?\".equals(lower)) {\n-                    showHelp();\n-                } else if (\"list\".equals(lower)) {\n-                    listMode = !listMode;\n-                    println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n-                } else if (\"history\".equals(lower)) {\n-                    for (int i = 0, size = history.size(); i < size; i++) {\n-                        String s = history.get(i);\n-                        s = s.replace('\\n', ' ').replace('\\r', ' ');\n-                        println(\"#\" + (1 + i) + \": \" + s);\n-                    }\n-                    if (!history.isEmpty()) {\n-                        println(\"To re-run a statement, type the number and press and enter\");\n-                    } else {\n-                        println(\"No history\");\n-                    }\n-                } else if (lower.startsWith(\"autocommit\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n-                    if (\"true\".equals(lower)) {\n-                        conn.setAutoCommit(true);\n-                    } else if (\"false\".equals(lower)) {\n-                        conn.setAutoCommit(false);\n-                    } else {\n-                        println(\"Usage: autocommit [true|false]\");\n-                    }\n-                    println(\"Autocommit is now \" + conn.getAutoCommit());\n-                } else if (lower.startsWith(\"maxwidth\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n-                    try {\n-                        maxColumnSize = Integer.parseInt(lower);\n-                    } catch (NumberFormatException e) {\n-                        println(\"Usage: maxwidth <integer value>\");\n-                    }\n-                    println(\"Maximum column width is now \" + maxColumnSize);\n-                } else {\n-                    boolean addToHistory = true;\n-                    if (statement == null) {\n-                        if (StringUtils.isNumber(line)) {\n-                            int pos = Integer.parseInt(line);\n-                            if (pos == 0 || pos > history.size()) {\n-                                println(\"Not found\");\n-                            } else {\n-                                statement = history.get(pos - 1);\n-                                addToHistory = false;\n-                                println(statement);\n-                                end = true;\n-                            }\n-                        } else {\n-                            statement = line;\n-                        }\n-                    } else {\n-                        statement += \"\\n\" + line;\n-                    }\n-                    if (end) {\n-                        if (addToHistory) {\n-                            history.add(0, statement);\n-                            if (history.size() > HISTORY_COUNT) {\n-                                history.remove(HISTORY_COUNT);\n-                            }\n-                        }\n-                        execute(statement);\n-                        statement = null;\n-                    }\n-                }\n-            } catch (SQLException e) {\n-                println(\"SQL Exception: \" + e.getMessage());\n-                statement = null;\n-            } catch (IOException e) {\n-                println(e.getMessage());\n-                break;\n-            } catch (Exception e) {\n-                println(\"Exception: \" + e.toString());\n-                e.printStackTrace(err);\n-                break;\n-            }\n+        String line = readLine();\n+        if (line == null) {\n+          break;\n         }\n-        if (conn != null) {\n-            try {\n-                conn.close();\n-                println(\"Connection closed\");\n-            } catch (SQLException e) {\n-                println(\"SQL Exception: \" + e.getMessage());\n-                e.printStackTrace(err);\n-            }\n+        String trimmed = line.trim();\n+        if (trimmed.isEmpty()) {\n+          continue;\n         }\n-    }\n-\n-    private void connect() throws IOException, SQLException {\n-        String url = \"jdbc:h2:~/test\";\n-        String user = \"\";\n-        String driver = null;\n-        try {\n-            Properties prop;\n-            if (\"null\".equals(serverPropertiesDir)) {\n-                prop = new Properties();\n+        boolean end = trimmed.endsWith(\";\");\n+        if (end) {\n+          line = line.substring(0, line.lastIndexOf(';'));\n+          trimmed = trimmed.substring(0, trimmed.length() - 1);\n+        }\n+        String lower = StringUtils.toLowerEnglish(trimmed);\n+        if (\"exit\".equals(lower) || \"quit\".equals(lower)) {\n+          break;\n+        } else if (\"help\".equals(lower) || \"?\".equals(lower)) {\n+          showHelp();\n+        } else if (\"list\".equals(lower)) {\n+          listMode = !listMode;\n+          println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n+        } else if (\"history\".equals(lower)) {\n+          for (int i = 0, size = history.size(); i < size; i++) {\n+            String s = history.get(i);\n+            s = s.replace('\\n', ' ').replace('\\r', ' ');\n+            println(\"#\" + (1 + i) + \": \" + s);\n+          }\n+          if (!history.isEmpty()) {\n+            println(\n+                \"To re-run a statement, type the number and press and enter\");\n+          } else {\n+            println(\"No history\");\n+          }\n+        } else if (lower.startsWith(\"autocommit\")) {\n+          lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n+          if (\"true\".equals(lower)) {\n+            conn.setAutoCommit(true);\n+          } else if (\"false\".equals(lower)) {\n+            conn.setAutoCommit(false);\n+          } else {\n+            println(\"Usage: autocommit [true|false]\");\n+          }\n+          println(\"Autocommit is now \" + conn.getAutoCommit());\n+        } else if (lower.startsWith(\"maxwidth\")) {\n+          lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n+          try {\n+            maxColumnSize = Integer.parseInt(lower);\n+          } catch (NumberFormatException e) {\n+            println(\"Usage: maxwidth <integer value>\");\n+          }\n+          println(\"Maximum column width is now \" + maxColumnSize);\n+        } else {\n+          boolean addToHistory = true;\n+          if (statement == null) {\n+            if (StringUtils.isNumber(line)) {\n+              int pos = Integer.parseInt(line);\n+              if (pos == 0 || pos > history.size()) {\n+                println(\"Not found\");\n+              } else {\n+                statement = history.get(pos - 1);\n+                addToHistory = false;\n+                println(statement);\n+                end = true;\n+              }\n             } else {\n-                prop = SortedProperties.loadProperties(\n-                        serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n-            }\n-            String data = null;\n-            boolean found = false;\n-            for (int i = 0;; i++) {\n-                String d = prop.getProperty(Integer.toString(i));\n-                if (d == null) {\n-                    break;\n-                }\n-                found = true;\n-                data = d;\n+              statement = line;\n             }\n-            if (found) {\n-                ConnectionInfo info = new ConnectionInfo(data);\n-                url = info.url;\n-                user = info.user;\n-                driver = info.driver;\n+          } else {\n+            statement += \"\\n\" + line;\n+          }\n+          if (end) {\n+            if (addToHistory) {\n+              history.add(0, statement);\n+              if (history.size() > HISTORY_COUNT) {\n+                history.remove(HISTORY_COUNT);\n+              }\n             }\n-        } catch (IOException e) {\n-            // ignore\n-        }\n-        println(\"[Enter]   \" + url);\n-        print(\"URL       \");\n-        url = readLine(url).trim();\n-        if (driver == null) {\n-            driver = JdbcUtils.getDriver(url);\n+            execute(statement);\n+            statement = null;\n+          }\n         }\n-        if (driver != null) {\n-            println(\"[Enter]   \" + driver);\n-        }\n-        print(\"Driver    \");\n-        driver = readLine(driver).trim();\n-        println(\"[Enter]   \" + user);\n-        print(\"User      \");\n-        user = readLine(user);\n-        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user)\n-                : JdbcUtils.getConnection(driver, url, user, readPassword());\n-        stat = conn.createStatement();\n-        println(\"Connected\");\n+      } catch (SQLException e) {\n+        println(\"SQL Exception: \" + e.getMessage());\n+        statement = null;\n+      } catch (IOException e) {\n+        println(e.getMessage());\n+        break;\n+      } catch (Exception e) {\n+        println(\"Exception: \" + e.toString());\n+        e.printStackTrace(err);\n+        break;\n+      }\n+    }\n+    if (conn != null) {\n+      try {\n+        conn.close();\n+        println(\"Connection closed\");\n+      } catch (SQLException e) {\n+        println(\"SQL Exception: \" + e.getMessage());\n+        e.printStackTrace(err);\n+      }\n     }\n+  }\n \n-    private Connection connectH2(String driver, String url, String user) throws IOException, SQLException {\n-        for (;;) {\n-            String password = readPassword();\n-            try {\n-                return JdbcUtils.getConnection(driver, url + \";IFEXISTS=TRUE\", user, password);\n-            } catch (SQLException ex) {\n-                if (ex.getErrorCode() == ErrorCode.DATABASE_NOT_FOUND_WITH_IF_EXISTS_1) {\n-                    println(\"Type the same password again to confirm database creation.\");\n-                    String password2 = readPassword();\n-                    if (password.equals(password2)) {\n-                        return JdbcUtils.getConnection(driver, url, user, password);\n-                    } else {\n-                        println(\"Passwords don't match. Try again.\");\n-                    }\n-                } else {\n-                    throw ex;\n-                }\n-            }\n+  private void connect() throws IOException, SQLException {\n+    String url = \"jdbc:h2:~/test\";\n+    String user = \"\";\n+    String driver = null;\n+    try {\n+      Properties prop;\n+      if (\"null\".equals(serverPropertiesDir)) {\n+        prop = new Properties();\n+      } else {\n+        prop = SortedProperties.loadProperties(\n+            serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n+      }\n+      String data = null;\n+      boolean found = false;\n+      for (int i = 0; ; i++) {\n+        String d = prop.getProperty(Integer.toString(i));\n+        if (d == null) {\n+          break;\n         }\n+        found = true;\n+        data = d;\n+      }\n+      if (found) {\n+        ConnectionInfo info = new ConnectionInfo(data);\n+        url = info.url;\n+        user = info.user;\n+        driver = info.driver;\n+      }\n+    } catch (IOException e) {\n+      // ignore\n     }\n-\n-    /**\n-     * Print the string without newline, and flush.\n-     *\n-     * @param s the string to print\n-     */\n-    protected void print(String s) {\n-        out.print(s);\n-        out.flush();\n+    println(\"[Enter]   \" + url);\n+    print(\"URL       \");\n+    url = readLine(url).trim();\n+    if (driver == null) {\n+      driver = JdbcUtils.getDriver(url);\n     }\n-\n-    private void println(String s) {\n-        out.println(s);\n-        out.flush();\n+    if (driver != null) {\n+      println(\"[Enter]   \" + driver);\n     }\n+    print(\"Driver    \");\n+    driver = readLine(driver).trim();\n+    println(\"[Enter]   \" + user);\n+    print(\"User      \");\n+    user = readLine(user);\n+    conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user)\n+        : JdbcUtils.getConnection(driver, url, user, readPassword());\n+    stat = conn.createStatement();\n+    println(\"Connected\");\n+  }\n \n-    private String readPassword() throws IOException {\n-        try {\n-            Object console = Utils.callStaticMethod(\"java.lang.System.console\");\n-            print(\"Password  \");\n-            char[] password = (char[]) Utils.callMethod(console, \"readPassword\");\n-            return password == null ? null : new String(password);\n-        } catch (Exception e) {\n-            // ignore, use the default solution\n-        }\n-        Thread passwordHider = new Thread(this, \"Password hider\");\n-        stopHide = false;\n-        passwordHider.start();\n-        print(\"Password  > \");\n-        String p = readLine();\n-        stopHide = true;\n-        try {\n-            passwordHider.join();\n-        } catch (InterruptedException e) {\n-            // ignore\n+  private Connection connectH2(String driver, String url, String user)\n+      throws IOException, SQLException {\n+    for (; ; ) {\n+      String password = readPassword();\n+      try {\n+        return JdbcUtils\n+            .getConnection(driver, url + \";IFEXISTS=TRUE\", user, password);\n+      } catch (SQLException ex) {\n+        if (ex.getErrorCode() ==\n+            ErrorCode.DATABASE_NOT_FOUND_WITH_IF_EXISTS_1) {\n+          println(\"Type the same password again to confirm database creation.\");\n+          String password2 = readPassword();\n+          if (password.equals(password2)) {\n+            return JdbcUtils.getConnection(driver, url, user, password);\n+          } else {\n+            println(\"Passwords don't match. Try again.\");\n+          }\n+        } else {\n+          throw ex;\n         }\n-        print(\"\\b\\b\");\n-        return p;\n+      }\n     }\n+  }\n \n-    /**\n-     * INTERNAL.\n-     * Hides the password by repeatedly printing\n-     * backspace, backspace, &gt;, &lt;.\n-     */\n-    @Override\n-    public void run() {\n-        while (!stopHide) {\n-            print(\"\\b\\b><\");\n-            try {\n-                Thread.sleep(10);\n-            } catch (InterruptedException e) {\n-                // ignore\n-            }\n-        }\n-    }\n+  /**\n+   * Print the string without newline, and flush.\n+   *\n+   * @param s the string to print\n+   */\n+  protected void print(String s) {\n+    out.print(s);\n+    out.flush();\n+  }\n \n+  private void println(String s) {\n+    out.println(s);\n+    out.flush();\n+  }\n \n-    private String readLine(String defaultValue) throws IOException {\n-        String s = readLine();\n-        return s.isEmpty() ? defaultValue : s;\n+  private String readPassword() throws IOException {\n+    try {\n+      Object console = Utils.callStaticMethod(\"java.lang.System.console\");\n+      print(\"Password  \");\n+      char[] password = (char[]) Utils.callMethod(console, \"readPassword\");\n+      return password == null ? null : new String(password);\n+    } catch (Exception e) {\n+      // ignore, use the default solution\n+    }\n+    Thread passwordHider = new Thread(this, \"Password hider\");\n+    stopHide = false;\n+    passwordHider.start();\n+    print(\"Password  > \");\n+    String p = readLine();\n+    stopHide = true;\n+    try {\n+      passwordHider.join();\n+    } catch (InterruptedException e) {\n+      // ignore\n     }\n+    print(\"\\b\\b\");\n+    return p;\n+  }\n \n-    private String readLine() throws IOException {\n-        String line = reader.readLine();\n-        if (line == null) {\n-            throw new IOException(\"Aborted\");\n-        }\n-        return line;\n+  /**\n+   * INTERNAL.\n+   * Hides the password by repeatedly printing\n+   * backspace, backspace, &gt;, &lt;.\n+   */\n+  @Override\n+  public void run() {\n+    while (!stopHide) {\n+      print(\"\\b\\b><\");\n+      try {\n+        Thread.sleep(10);\n+      } catch (InterruptedException e) {\n+        // ignore\n+      }\n     }\n+  }\n \n-    private void execute(String sql) {\n-        if (StringUtils.isWhitespaceOrEmpty(sql)) {\n-            return;\n-        }\n-        long time = System.nanoTime();\n-        try {\n-            ResultSet rs = null;\n-            try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n-                    rs = stat.getResultSet();\n-                    int rowCount = printResult(rs, listMode);\n-                    time = System.nanoTime() - time;\n-                    println(\"(\" + rowCount + (rowCount == 1 ?\n-                            \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n-                } else {\n-                    int updateCount = stat.getUpdateCount();\n-                    time = System.nanoTime() - time;\n-                    println(\"(Update count: \" + updateCount + \", \" +\n-                            TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n-                }\n-            } finally {\n-                JdbcUtils.closeSilently(rs);\n-            }\n-        } catch (SQLException e) {\n-            println(\"Error: \" + e.toString());\n-            if (listMode) {\n-                e.printStackTrace(err);\n-            }\n-        }\n+\n+  private String readLine(String defaultValue) throws IOException {\n+    String s = readLine();\n+    return s.isEmpty() ? defaultValue : s;\n+  }\n+\n+  private String readLine() throws IOException {\n+    String line = reader.readLine();\n+    if (line == null) {\n+      throw new IOException(\"Aborted\");\n     }\n+    return line;\n+  }\n \n-    private int printResult(ResultSet rs, boolean asList) throws SQLException {\n-        if (asList) {\n-            return printResultAsList(rs);\n+  private void execute(String sql) {\n+    if (StringUtils.isWhitespaceOrEmpty(sql)) {\n+      return;\n+    }\n+    long time = System.nanoTime();\n+    try {\n+      ResultSet rs = null;\n+      try {\n+        if (sql.startsWith(\"@\")) {\n+          rs = JdbcUtils.getMetaResultSet(conn, sql);\n+          int rowCount = printResult(rs, listMode);\n+        } else if (stat.execute(sql)) {\n+          rs = stat.getResultSet();\n+          int rowCount = printResult(rs, listMode);\n+          time = System.nanoTime() - time;\n+          println(\"(\" + rowCount + (rowCount == 1 ?\n+              \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) +\n+              \" ms)\");\n+        } else {\n+          int updateCount = stat.getUpdateCount();\n+          time = System.nanoTime() - time;\n+          println(\"(Update count: \" + updateCount + \", \" +\n+              TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n         }\n-        return printResultAsTable(rs);\n+      } finally {\n+        JdbcUtils.closeSilently(rs);\n+      }\n+    } catch (SQLException e) {\n+      println(\"Error: \" + e.toString());\n+      if (listMode) {\n+        e.printStackTrace(err);\n+      }\n     }\n+  }\n \n-    private int printResultAsTable(ResultSet rs) throws SQLException {\n-        ResultSetMetaData meta = rs.getMetaData();\n-        int len = meta.getColumnCount();\n-        boolean truncated = false;\n-        ArrayList<String[]> rows = new ArrayList<>();\n-        // buffer the header\n-        String[] columns = new String[len];\n-        for (int i = 0; i < len; i++) {\n-            String s = meta.getColumnLabel(i + 1);\n-            columns[i] = s == null ? \"\" : s;\n-        }\n-        rows.add(columns);\n-        int rowCount = 0;\n-        while (rs.next()) {\n-            rowCount++;\n-            truncated |= loadRow(rs, len, rows);\n-            if (rowCount > MAX_ROW_BUFFER) {\n-                printRows(rows, len);\n-                rows.clear();\n-            }\n-        }\n+  private int printResult(ResultSet rs, boolean asList) throws SQLException {\n+    if (asList) {\n+      return printResultAsList(rs);\n+    }\n+    return printResultAsTable(rs);\n+  }\n+\n+  private int printResultAsTable(ResultSet rs) throws SQLException {\n+    ResultSetMetaData meta = rs.getMetaData();\n+    int len = meta.getColumnCount();\n+    boolean truncated = false;\n+    ArrayList<String[]> rows = new ArrayList<>();\n+    // buffer the header\n+    String[] columns = new String[len];\n+    for (int i = 0; i < len; i++) {\n+      String s = meta.getColumnLabel(i + 1);\n+      columns[i] = s == null ? \"\" : s;\n+    }\n+    rows.add(columns);\n+    int rowCount = 0;\n+    while (rs.next()) {\n+      rowCount++;\n+      truncated |= loadRow(rs, len, rows);\n+      if (rowCount > MAX_ROW_BUFFER) {\n         printRows(rows, len);\n         rows.clear();\n-        if (truncated) {\n-            println(\"(data is partially truncated)\");\n-        }\n-        return rowCount;\n+      }\n+    }\n+    printRows(rows, len);\n+    rows.clear();\n+    if (truncated) {\n+      println(\"(data is partially truncated)\");\n     }\n+    return rowCount;\n+  }\n \n-    private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows)\n-            throws SQLException {\n-        boolean truncated = false;\n-        String[] row = new String[len];\n-        for (int i = 0; i < len; i++) {\n-            String s = rs.getString(i + 1);\n-            if (s == null) {\n-                s = \"null\";\n-            }\n-            // only truncate if more than one column\n-            if (len > 1 && s.length() > maxColumnSize) {\n-                s = s.substring(0, maxColumnSize);\n-                truncated = true;\n-            }\n-            row[i] = s;\n-        }\n-        rows.add(row);\n-        return truncated;\n+  private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows)\n+      throws SQLException {\n+    boolean truncated = false;\n+    String[] row = new String[len];\n+    for (int i = 0; i < len; i++) {\n+      String s = rs.getString(i + 1);\n+      if (s == null) {\n+        s = \"null\";\n+      }\n+      // only truncate if more than one column\n+      if (len > 1 && s.length() > maxColumnSize) {\n+        s = s.substring(0, maxColumnSize);\n+        truncated = true;\n+      }\n+      row[i] = s;\n     }\n+    rows.add(row);\n+    return truncated;\n+  }\n \n-    private int[] printRows(ArrayList<String[]> rows, int len) {\n-        int[] columnSizes = new int[len];\n-        for (int i = 0; i < len; i++) {\n-            int max = 0;\n-            for (String[] row : rows) {\n-                max = Math.max(max, row[i].length());\n-            }\n-            if (len > 1) {\n-                max = Math.min(maxColumnSize, max);\n-            }\n-            columnSizes[i] = max;\n+  private int[] printRows(ArrayList<String[]> rows, int len) {\n+    int[] columnSizes = new int[len];\n+    for (int i = 0; i < len; i++) {\n+      int max = 0;\n+      for (String[] row : rows) {\n+        max = Math.max(max, row[i].length());\n+      }\n+      if (len > 1) {\n+        max = Math.min(maxColumnSize, max);\n+      }\n+      columnSizes[i] = max;\n+    }\n+    for (String[] row : rows) {\n+      StringBuilder buff = new StringBuilder();\n+      for (int i = 0; i < len; i++) {\n+        if (i > 0) {\n+          buff.append(' ').append(BOX_VERTICAL).append(' ');\n         }\n-        for (String[] row : rows) {\n-            StringBuilder buff = new StringBuilder();\n-            for (int i = 0; i < len; i++) {\n-                if (i > 0) {\n-                    buff.append(' ').append(BOX_VERTICAL).append(' ');\n-                }\n-                String s = row[i];\n-                buff.append(s);\n-                if (i < len - 1) {\n-                    for (int j = s.length(); j < columnSizes[i]; j++) {\n-                        buff.append(' ');\n-                    }\n-                }\n-            }\n-            println(buff.toString());\n+        String s = row[i];\n+        buff.append(s);\n+        if (i < len - 1) {\n+          for (int j = s.length(); j < columnSizes[i]; j++) {\n+            buff.append(' ');\n+          }\n         }\n-        return columnSizes;\n+      }\n+      println(buff.toString());\n     }\n+    return columnSizes;\n+  }\n \n-    private int printResultAsList(ResultSet rs) throws SQLException {\n-        ResultSetMetaData meta = rs.getMetaData();\n-        int longestLabel = 0;\n-        int len = meta.getColumnCount();\n-        String[] columns = new String[len];\n-        for (int i = 0; i < len; i++) {\n-            String s = meta.getColumnLabel(i + 1);\n-            columns[i] = s;\n-            longestLabel = Math.max(longestLabel, s.length());\n+  private int printResultAsList(ResultSet rs) throws SQLException {\n+    ResultSetMetaData meta = rs.getMetaData();\n+    int longestLabel = 0;\n+    int len = meta.getColumnCount();\n+    String[] columns = new String[len];\n+    for (int i = 0; i < len; i++) {\n+      String s = meta.getColumnLabel(i + 1);\n+      columns[i] = s;\n+      longestLabel = Math.max(longestLabel, s.length());\n+    }\n+    StringBuilder buff = new StringBuilder();\n+    int rowCount = 0;\n+    while (rs.next()) {\n+      rowCount++;\n+      buff.setLength(0);\n+      if (rowCount > 1) {\n+        println(\"\");\n+      }\n+      for (int i = 0; i < len; i++) {\n+        if (i > 0) {\n+          buff.append('\\n');\n         }\n-        StringBuilder buff = new StringBuilder();\n-        int rowCount = 0;\n-        while (rs.next()) {\n-            rowCount++;\n-            buff.setLength(0);\n-            if (rowCount > 1) {\n-                println(\"\");\n-            }\n-            for (int i = 0; i < len; i++) {\n-                if (i > 0) {\n-                    buff.append('\\n');\n-                }\n-                String label = columns[i];\n-                buff.append(label);\n-                for (int j = label.length(); j < longestLabel; j++) {\n-                    buff.append(' ');\n-                }\n-                buff.append(\": \").append(rs.getString(i + 1));\n-            }\n-            println(buff.toString());\n+        String label = columns[i];\n+        buff.append(label);\n+        for (int j = label.length(); j < longestLabel; j++) {\n+          buff.append(' ');\n         }\n-        if (rowCount == 0) {\n-            for (int i = 0; i < len; i++) {\n-                if (i > 0) {\n-                    buff.append('\\n');\n-                }\n-                String label = columns[i];\n-                buff.append(label);\n-            }\n-            println(buff.toString());\n+        buff.append(\": \").append(rs.getString(i + 1));\n+      }\n+      println(buff.toString());\n+    }\n+    if (rowCount == 0) {\n+      for (int i = 0; i < len; i++) {\n+        if (i > 0) {\n+          buff.append('\\n');\n         }\n-        return rowCount;\n+        String label = columns[i];\n+        buff.append(label);\n+      }\n+      println(buff.toString());\n     }\n+    return rowCount;\n+  }\n \n }\n",
            "diff_size": 731
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "472",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/579/Shell.java\nindex cf501c66c9..dae57a3793 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/579/Shell.java\n@@ -468,11 +468,11 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n+    if (sql.startsWith(\"@\")) {\n \t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n \t\t     int rowCount = printResult(rs, listMode);\n \t\t } else if (stat.execute(sql)) {\n-                    rs = stat.getResultSet();\n+    rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n                     println(\"(\" + rowCount + (rowCount == 1 ?\n@@ -625,4 +625,4 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/579/Shell.java\nindex cf501c66c9..96384b6280 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/579/Shell.java\n@@ -20,7 +20,6 @@ import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.Properties;\n import java.util.concurrent.TimeUnit;\n-\n import org.h2.api.ErrorCode;\n import org.h2.engine.Constants;\n import org.h2.server.web.ConnectionInfo;\n@@ -35,13 +34,14 @@ import org.h2.util.Utils;\n  * Interactive command line tool to access a database using JDBC.\n  * @h2.resource\n  */\n+\n+\n public class Shell extends Tool implements Runnable {\n \n     private static final int MAX_ROW_BUFFER = 5000;\n     private static final int HISTORY_COUNT = 20;\n     // Windows: '\\u00b3';\n     private static final char BOX_VERTICAL = '|';\n-\n     private PrintStream err = System.err;\n     private InputStream in = System.in;\n     private BufferedReader reader;\n@@ -49,7 +49,7 @@ public class Shell extends Tool implements Runnable {\n     private Statement stat;\n     private boolean listMode;\n     private int maxColumnSize = 100;\n-    private final ArrayList<String> history = new ArrayList<>();\n+    private final ArrayList<String> history = new ArrayList< >();\n     private boolean stopHide;\n     private String serverPropertiesDir = Constants.SERVER_PROPERTIES_DIR;\n \n@@ -77,6 +77,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param args the command line arguments\n      */\n+\n+\n     public static void main(String... args) throws SQLException {\n         new Shell().runTool(args);\n     }\n@@ -86,6 +88,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param err the new standard error stream\n      */\n+\n+\n     public void setErr(PrintStream err) {\n         this.err = err;\n     }\n@@ -95,6 +99,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param in the input stream to use\n      */\n+\n+\n     public void setIn(InputStream in) {\n         this.in = in;\n     }\n@@ -104,6 +110,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param reader the input stream reader to use\n      */\n+\n+\n     public void setInReader(BufferedReader reader) {\n         this.reader = reader;\n     }\n@@ -113,6 +121,7 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param args the command line settings\n      */\n+\n     @Override\n     public void runTool(String... args) throws SQLException {\n         String url = null;\n@@ -126,22 +135,22 @@ public class Shell extends Tool implements Runnable {\n             } else if (arg.equals(\"-user\")) {\n                 user = args[++i];\n             } else if (arg.equals(\"-password\")) {\n-                password = args[++i];\n-            } else if (arg.equals(\"-driver\")) {\n-                String driver = args[++i];\n-                JdbcUtils.loadUserClass(driver);\n-            } else if (arg.equals(\"-sql\")) {\n-                sql = args[++i];\n-            } else if (arg.equals(\"-properties\")) {\n-                serverPropertiesDir = args[++i];\n-            } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n-                showUsage();\n-                return;\n-            } else if (arg.equals(\"-list\")) {\n-                listMode = true;\n-            } else {\n-                showUsageAndThrowUnsupportedOption(arg);\n-            }\n+                       password = args[++i];\n+                   } else if (arg.equals(\"-driver\")) {\n+                       String driver = args[++i];\n+                       JdbcUtils.loadUserClass(driver);\n+                   } else if (arg.equals(\"-sql\")) {\n+                              sql = args[++i];\n+                          } else if (arg.equals(\"-properties\")) {\n+                              serverPropertiesDir = args[++i];\n+                          } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n+                                     showUsage();\n+                                     return;\n+                                 } else if (arg.equals(\"-list\")) {\n+                                     listMode = true;\n+                                 } else {\n+                                     showUsageAndThrowUnsupportedOption(arg);\n+                                 }\n         }\n         if (url != null) {\n             conn = DriverManager.getConnection(url, user, password);\n@@ -176,6 +185,8 @@ public class Shell extends Tool implements Runnable {\n      * @param conn the connection\n      * @param args the command line settings\n      */\n+\n+\n     public void runTool(Connection conn, String... args) throws SQLException {\n         this.conn = conn;\n         this.stat = conn.createStatement();\n@@ -234,67 +245,67 @@ public class Shell extends Tool implements Runnable {\n                 } else if (\"help\".equals(lower) || \"?\".equals(lower)) {\n                     showHelp();\n                 } else if (\"list\".equals(lower)) {\n-                    listMode = !listMode;\n-                    println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n-                } else if (\"history\".equals(lower)) {\n-                    for (int i = 0, size = history.size(); i < size; i++) {\n-                        String s = history.get(i);\n-                        s = s.replace('\\n', ' ').replace('\\r', ' ');\n-                        println(\"#\" + (1 + i) + \": \" + s);\n-                    }\n-                    if (!history.isEmpty()) {\n-                        println(\"To re-run a statement, type the number and press and enter\");\n-                    } else {\n-                        println(\"No history\");\n-                    }\n-                } else if (lower.startsWith(\"autocommit\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n-                    if (\"true\".equals(lower)) {\n-                        conn.setAutoCommit(true);\n-                    } else if (\"false\".equals(lower)) {\n-                        conn.setAutoCommit(false);\n-                    } else {\n-                        println(\"Usage: autocommit [true|false]\");\n-                    }\n-                    println(\"Autocommit is now \" + conn.getAutoCommit());\n-                } else if (lower.startsWith(\"maxwidth\")) {\n-                    lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n-                    try {\n-                        maxColumnSize = Integer.parseInt(lower);\n-                    } catch (NumberFormatException e) {\n-                        println(\"Usage: maxwidth <integer value>\");\n-                    }\n-                    println(\"Maximum column width is now \" + maxColumnSize);\n-                } else {\n-                    boolean addToHistory = true;\n-                    if (statement == null) {\n-                        if (StringUtils.isNumber(line)) {\n-                            int pos = Integer.parseInt(line);\n-                            if (pos == 0 || pos > history.size()) {\n-                                println(\"Not found\");\n-                            } else {\n-                                statement = history.get(pos - 1);\n-                                addToHistory = false;\n-                                println(statement);\n-                                end = true;\n-                            }\n-                        } else {\n-                            statement = line;\n-                        }\n-                    } else {\n-                        statement += \"\\n\" + line;\n-                    }\n-                    if (end) {\n-                        if (addToHistory) {\n-                            history.add(0, statement);\n-                            if (history.size() > HISTORY_COUNT) {\n-                                history.remove(HISTORY_COUNT);\n-                            }\n-                        }\n-                        execute(statement);\n-                        statement = null;\n-                    }\n-                }\n+                           listMode = !listMode;\n+                           println(\"Result list mode is now \" + (listMode ? \"on\" : \"off\"));\n+                       } else if (\"history\".equals(lower)) {\n+                           for (int i = 0, size = history.size(); i < size; i++) {\n+                               String s = history.get(i);\n+                               s = s.replace('\\n', ' ').replace('\\r', ' ');\n+                               println(\"#\" + (1 + i) + \": \" + s);\n+                           }\n+                           if (!history.isEmpty()) {\n+                               println(\"To re-run a statement, type the number and press and enter\");\n+                           } else {\n+                               println(\"No history\");\n+                           }\n+                       } else if (lower.startsWith(\"autocommit\")) {\n+                                  lower = StringUtils.trimSubstring(lower, \"autocommit\".length());\n+                                  if (\"true\".equals(lower)) {\n+                                      conn.setAutoCommit(true);\n+                                  } else if (\"false\".equals(lower)) {\n+                                      conn.setAutoCommit(false);\n+                                  } else {\n+                                      println(\"Usage: autocommit [true|false]\");\n+                                  }\n+                                  println(\"Autocommit is now \" + conn.getAutoCommit());\n+                              } else if (lower.startsWith(\"maxwidth\")) {\n+                                  lower = StringUtils.trimSubstring(lower, \"maxwidth\".length());\n+                                  try {\n+                                      maxColumnSize = Integer.parseInt(lower);\n+                                  } catch (NumberFormatException e) {\n+                                      println(\"Usage: maxwidth <integer value>\");\n+                                  }\n+                                  println(\"Maximum column width is now \" + maxColumnSize);\n+                              } else {\n+                                  boolean addToHistory = true;\n+                                  if (statement == null) {\n+                                      if (StringUtils.isNumber(line)) {\n+                                          int pos = Integer.parseInt(line);\n+                                          if (pos == 0 || pos > history.size()) {\n+                                              println(\"Not found\");\n+                                          } else {\n+                                              statement = history.get(pos - 1);\n+                                              addToHistory = false;\n+                                              println(statement);\n+                                              end = true;\n+                                          }\n+                                      } else {\n+                                          statement = line;\n+                                      }\n+                                  } else {\n+                                      statement += \"\\n\" + line;\n+                                  }\n+                                  if (end) {\n+                                      if (addToHistory) {\n+                                          history.add(0, statement);\n+                                          if (history.size() > HISTORY_COUNT) {\n+                                              history.remove(HISTORY_COUNT);\n+                                          }\n+                                      }\n+                                      execute(statement);\n+                                      statement = null;\n+                                  }\n+                              }\n             } catch (SQLException e) {\n                 println(\"SQL Exception: \" + e.getMessage());\n                 statement = null;\n@@ -327,8 +338,7 @@ public class Shell extends Tool implements Runnable {\n             if (\"null\".equals(serverPropertiesDir)) {\n                 prop = new Properties();\n             } else {\n-                prop = SortedProperties.loadProperties(\n-                        serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n+                prop = SortedProperties.loadProperties(serverPropertiesDir + \"/\" + Constants.SERVER_PROPERTIES_NAME);\n             }\n             String data = null;\n             boolean found = false;\n@@ -348,6 +358,7 @@ public class Shell extends Tool implements Runnable {\n             }\n         } catch (IOException e) {\n             // ignore\n+\n         }\n         println(\"[Enter]   \" + url);\n         print(\"URL       \");\n@@ -363,8 +374,7 @@ public class Shell extends Tool implements Runnable {\n         println(\"[Enter]   \" + user);\n         print(\"User      \");\n         user = readLine(user);\n-        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user)\n-                : JdbcUtils.getConnection(driver, url, user, readPassword());\n+        conn = url.startsWith(Constants.START_URL) ? connectH2(driver, url, user) : JdbcUtils.getConnection(driver, url, user, readPassword());\n         stat = conn.createStatement();\n         println(\"Connected\");\n     }\n@@ -395,6 +405,8 @@ public class Shell extends Tool implements Runnable {\n      *\n      * @param s the string to print\n      */\n+\n+\n     protected void print(String s) {\n         out.print(s);\n         out.flush();\n@@ -413,6 +425,7 @@ public class Shell extends Tool implements Runnable {\n             return password == null ? null : new String(password);\n         } catch (Exception e) {\n             // ignore, use the default solution\n+\n         }\n         Thread passwordHider = new Thread(this, \"Password hider\");\n         stopHide = false;\n@@ -424,6 +437,7 @@ public class Shell extends Tool implements Runnable {\n             passwordHider.join();\n         } catch (InterruptedException e) {\n             // ignore\n+\n         }\n         print(\"\\b\\b\");\n         return p;\n@@ -434,6 +448,7 @@ public class Shell extends Tool implements Runnable {\n      * Hides the password by repeatedly printing\n      * backspace, backspace, &gt;, &lt;.\n      */\n+\n     @Override\n     public void run() {\n         while (!stopHide) {\n@@ -442,11 +457,11 @@ public class Shell extends Tool implements Runnable {\n                 Thread.sleep(10);\n             } catch (InterruptedException e) {\n                 // ignore\n+\n             }\n         }\n     }\n \n-\n     private String readLine(String defaultValue) throws IOException {\n         String s = readLine();\n         return s.isEmpty() ? defaultValue : s;\n@@ -468,20 +483,19 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+                    rs = JdbcUtils.getMetaResultSet(conn, sql);\n+                    int rowCount = printResult(rs, listMode);\n+                } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n-                    println(\"(\" + rowCount + (rowCount == 1 ?\n-                            \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n+                    println(\"(\" + rowCount + (rowCount == 1 ? \" row, \" : \" rows, \") + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n                 } else {\n                     int updateCount = stat.getUpdateCount();\n                     time = System.nanoTime() - time;\n-                    println(\"(Update count: \" + updateCount + \", \" +\n-                            TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n+                    println(\"(Update count: \" + updateCount + \", \"\n+                    + TimeUnit.NANOSECONDS.toMillis(time) + \" ms)\");\n                 }\n             } finally {\n                 JdbcUtils.closeSilently(rs);\n@@ -505,7 +519,7 @@ public class Shell extends Tool implements Runnable {\n         ResultSetMetaData meta = rs.getMetaData();\n         int len = meta.getColumnCount();\n         boolean truncated = false;\n-        ArrayList<String[]> rows = new ArrayList<>();\n+        ArrayList<String[]> rows = new ArrayList< >();\n         // buffer the header\n         String[] columns = new String[len];\n         for (int i = 0; i < len; i++) {\n@@ -530,8 +544,7 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-    private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows)\n-            throws SQLException {\n+    private boolean loadRow(ResultSet rs, int len, ArrayList<String[]> rows) throws SQLException {\n         boolean truncated = false;\n         String[] row = new String[len];\n         for (int i = 0; i < len; i++) {\n@@ -625,4 +638,4 @@ public class Shell extends Tool implements Runnable {\n         return rowCount;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/579/Shell.java\nindex cf501c66c9..30135ee4ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/579/Shell.java\n@@ -39,7 +39,7 @@ public class Shell extends Tool implements Runnable {\n \n     private static final int MAX_ROW_BUFFER = 5000;\n     private static final int HISTORY_COUNT = 20;\n-    // Windows: '\\u00b3';\n+    // Windows: '\u00b3';\n     private static final char BOX_VERTICAL = '|';\n \n     private PrintStream err = System.err;\n@@ -468,10 +468,10 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+       rs = JdbcUtils.getMetaResultSet(conn, sql);\n+       int rowCount = printResult(rs, listMode);\n+   } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/579/Shell.java\nindex cf501c66c9..30135ee4ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/579/Shell.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/579/Shell.java\n@@ -39,7 +39,7 @@ public class Shell extends Tool implements Runnable {\n \n     private static final int MAX_ROW_BUFFER = 5000;\n     private static final int HISTORY_COUNT = 20;\n-    // Windows: '\\u00b3';\n+    // Windows: '\u00b3';\n     private static final char BOX_VERTICAL = '|';\n \n     private PrintStream err = System.err;\n@@ -468,10 +468,10 @@ public class Shell extends Tool implements Runnable {\n         try {\n             ResultSet rs = null;\n             try {\n-\t\t if (sql.startsWith(\"@\")) {\n-\t\t     rs = JdbcUtils.getMetaResultSet(conn, sql);\n-\t\t     int rowCount = printResult(rs, listMode);\n-\t\t } else if (stat.execute(sql)) {\n+                if (sql.startsWith(\"@\")) {\n+       rs = JdbcUtils.getMetaResultSet(conn, sql);\n+       int rowCount = printResult(rs, listMode);\n+   } else if (stat.execute(sql)) {\n                     rs = stat.getResultSet();\n                     int rowCount = printResult(rs, listMode);\n                     time = System.nanoTime() - time;\n",
            "diff_size": 5
        }
    ]
}