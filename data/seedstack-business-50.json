{
    "error_id": "50",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.specification;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/50/SpecificationBuilderContext.java\nindex 60409edfe9..f1bfb410e0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/50/SpecificationBuilderContext.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.specification;\n+\n+package org .seedstack.business.internal.specification;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/50/SpecificationBuilderContext.java\nindex 60409edfe9..6e55682e3a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/50/SpecificationBuilderContext.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import static com.google.common.base.Preconditions.checkArgument;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/50/SpecificationBuilderContext.java\nindex 60409edfe9..4c57b13762 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/50/SpecificationBuilderContext.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.specification;\n \n import static com.google.common.base.Preconditions.checkArgument;\n@@ -63,8 +64,7 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n     String pickProperty() {\n         if (this.path == null) {\n             throw new IllegalStateException(\"No property has been set\");\n-        }\n-        String ret = this.path;\n+        } String ret = this.path;\n         this.path = null;\n         return ret;\n     }\n@@ -119,8 +119,7 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n \n         private final Class<C> targetClass;\n         private final Specification<C> delegate;\n-\n-        private ClassSpecification(Class<C> targetClass, Specification<C> delegate) {\n+private ClassSpecification(Class<C> targetClass, Specification<C> delegate) {\n             this.targetClass = targetClass;\n             this.delegate = delegate;\n         }\n@@ -135,4 +134,4 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n             return targetClass.getSimpleName() + \"[\" + String.valueOf(delegate) + \"]\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "24",
                    "column": "35",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 3, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "warning",
                    "message": "WhitespaceAround: '-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "49",
                    "column": "16",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "137",
                    "column": "46",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'CLASS_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "154",
                    "column": "47",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "79",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/50/SpecificationBuilderContext.java\nindex 60409edfe9..c259fcbe0b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/50/SpecificationBuilderContext.java\n@@ -8,9 +8,10 @@\n package org.seedstack.business.internal.specification;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n \n+import static com.google.common.base.Preconditions.checkState;\n import java.util.ArrayList;\n import java.util.List;\n import org.seedstack.business.specification.AndSpecification;\n@@ -19,7 +20,8 @@ import org.seedstack.business.specification.Specification;\n import org.seedstack.business.specification.SubstitutableSpecification;\n import org.seedstack.business.specification.dsl.BaseSelector;\n \n-class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n+\n+class SpecificationBuilderContext <T, S extends BaseSelector<T, S>> {\n \n     private final Class<T> targetClass;\n     private final List<List<Specification<T>>> disjunction = new ArrayList<>();\n@@ -27,6 +29,7 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n     private Mode mode = Mode.DISJUNCTION;\n     private String path;\n \n+\n     SpecificationBuilderContext(Class<T> targetClass) {\n         this.targetClass = targetClass;\n     }\n@@ -34,71 +37,91 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n     void addSpecification(Specification<T> specification) {\n         checkNotNull(specification, \"Specification cannot be null\");\n         if (mode == Mode.CONJUNCTION) {\n-            checkArgument(!disjunction.isEmpty(), \"Cannot add a conjunction without an existing disjunction\");\n-            List<Specification<T>> lastConjunction = this.disjunction.get(this.disjunction.size() - 1);\n+            checkArgument(! disjunction.isEmpty(),\n+\"Cannot add a conjunction without an existing disjunction\");\n+            List<Specification<T>> lastConjunction = this\n+                .disjunction\n+.get(this\n+   .disjunction\n+.size()- 1);\n             lastConjunction.add(specification);\n             mode = Mode.NONE;\n-        } else if (mode == Mode.DISJUNCTION) {\n-            List<Specification<T>> newConjunction = new ArrayList<>();\n-            newConjunction.add(specification);\n-            disjunction.add(newConjunction);\n-            mode = Mode.NONE;\n-        } else {\n-            throw new IllegalStateException(\"Cannot add specification, invalid mode \" + mode);\n-        }\n+        } else if(mode == Mode.DISJUNCTION) {\n+                   List<Specification<T>> newConjunction = new ArrayList<>();\n+                   newConjunction.add(specification);\n+                   disjunction.add(newConjunction);\n+                   mode = Mode.NONE;\n+               } else {\n+                   throw new IllegalStateException(\"Cannot add specification, invalid mode \" + mode);\n+               }\n     }\n \n+\n     void setProperty(String path) {\n         checkNotNull(path, \"Property cannot be null\");\n-        if (this.path != null) {\n+        if (this\n+            .path != null) {\n             throw new IllegalStateException(\"A property is already set\");\n         }\n         this.path = path;\n     }\n \n+\n     boolean hasProperty() {\n-        return this.path != null;\n+        return this\n+            .path != null;\n     }\n \n+\n     String pickProperty() {\n-        if (this.path == null) {\n+        if (this\n+            .path == null) {\n             throw new IllegalStateException(\"No property has been set\");\n         }\n-        String ret = this.path;\n+        String ret = this\n+            .path;\n         this.path = null;\n         return ret;\n     }\n \n+\n     void setMode(Mode mode) {\n-        checkState(this.mode == Mode.NONE, \"Cannot change specification mode, it is already set\");\n+        checkState(this\n+            .mode == Mode.NONE, \"Cannot change specification mode, it is already set\");\n         this.mode = mode;\n     }\n \n+\n     public S getSelector() {\n         return selector;\n     }\n \n+\n     public void setSelector(S selector) {\n         this.selector = selector;\n     }\n \n+\n     Specification<T> build() {\n         return new ClassSpecification<>(targetClass, buildOrSpecification());\n     }\n \n+\n     private Specification<T> buildOrSpecification() {\n-        checkState(!disjunction.isEmpty(), \"Illegal empty specification\");\n+        checkState(! disjunction.isEmpty(), \"Illegal empty specification\");\n         if (disjunction.size() == 1) {\n             return buildAndSpecification(disjunction.get(0));\n         } else {\n-            return new OrSpecification<>(disjunction.stream()\n-                    .map(this::buildAndSpecification)\n-                    .toArray(this::createSpecificationArray));\n+            return new OrSpecification<>(disjunction.stream().map(this\n+                ::buildAndSpecification)\n+.toArray(this\n+   ::createSpecificationArray));\n         }\n     }\n \n+\n     private Specification<T> buildAndSpecification(List<Specification<T>> conjunction) {\n-        checkState(!conjunction.isEmpty(), \"Illegal empty conjunction\");\n+        checkState(! conjunction.isEmpty(), \"Illegal empty conjunction\");\n         if (conjunction.size() == 1) {\n             return conjunction.get(0);\n         } else {\n@@ -106,20 +129,16 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    Specification<T>[] createSpecificationArray(int size) {\n-        return new Specification[size];\n+    @SuppressWarnings(\"unchecked\") Specification<T>[] createSpecificationArray(int size) {\n+        return new Specification [ size];\n     }\n \n-    enum Mode {\n-        DISJUNCTION, CONJUNCTION, NONE\n-    }\n \n+    enum Mode {DISJUNCTION, CONJUNCTION, NONE}\n     private static class ClassSpecification<C> implements SubstitutableSpecification<C> {\n \n         private final Class<C> targetClass;\n         private final Specification<C> delegate;\n-\n         private ClassSpecification(Class<C> targetClass, Specification<C> delegate) {\n             this.targetClass = targetClass;\n             this.delegate = delegate;\n@@ -132,7 +151,7 @@ class SpecificationBuilderContext<T, S extends BaseSelector<T, S>> {\n \n         @Override\n         public String toString() {\n-            return targetClass.getSimpleName() + \"[\" + String.valueOf(delegate) + \"]\";\n+            return targetClass.getSimpleName()+ \"[\" + String.valueOf(delegate)+ \"]\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/50/SpecificationBuilderContext.java\nindex 60409edfe9..f1bfb410e0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/50/SpecificationBuilderContext.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/50/SpecificationBuilderContext.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.specification;\n+\n+package org .seedstack.business.internal.specification;\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}