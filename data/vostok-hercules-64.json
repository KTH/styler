{
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "87",
                "column": "48",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                        for (ConsumerRecord<UUID, Event> record : records) {\n                            Event event = record.value();\n                            if (event == null) {// Received non-deserializable data, should be ignored\n                                droppedEvents++;\n                                continue;\n                            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/64/SimpleSink.java\nindex 997d0e7b8a..d355574cb7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/64/SimpleSink.java\n@@ -84,7 +84,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 continue;\n                             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "87",
                    "column": "48",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/64/SimpleSink.java\nindex 997d0e7b8a..45655f43c8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/64/SimpleSink.java\n@@ -35,11 +35,11 @@ public class SimpleSink extends Sink {\n     private final long senderTimeoutMs;\n \n     public SimpleSink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n+        ExecutorService executor,\n+        String applicationId,\n+        Properties properties,\n \n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+        Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n         super(executor, applicationId, properties);\n \n         this.sender = sender;\n@@ -118,6 +118,6 @@ public class SimpleSink extends Sink {\n \n     private static class Props {\n         static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n-                PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n+            PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n     }\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/64/SimpleSink.java\nindex 997d0e7b8a..cf513c4f9e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/64/SimpleSink.java\n@@ -37,10 +37,8 @@ public class SimpleSink extends Sink {\n     public SimpleSink(\n             ExecutorService executor,\n             String applicationId,\n-            Properties properties,\n-\n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n-        super(executor, applicationId, properties);\n+            Properties properties, Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+    super(executor, applicationId, properties);\n \n         this.sender = sender;\n \n@@ -84,7 +82,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 continue;\n                             }\n@@ -120,4 +118,4 @@ public class SimpleSink extends Sink {\n         static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n                 PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "90",
                    "column": "48",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/64/SimpleSink.java\nindex 997d0e7b8a..47a2d8c57c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/64/SimpleSink.java\n@@ -11,7 +11,6 @@ import org.slf4j.LoggerFactory;\n import ru.kontur.vostok.hercules.protocol.Event;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescription;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescriptions;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n@@ -22,33 +21,38 @@ import java.util.concurrent.ExecutorService;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class SimpleSink extends Sink {\n     private static final Logger LOGGER = LoggerFactory.getLogger(SimpleSink.class);\n \n     private final Sender sender;\n \n     private final Meter droppedEventsMeter;\n+\n     private final Meter processedEventsMeter;\n+\n     private final Meter rejectedEventsMeter;\n+\n     private final Meter totalEventsMeter;\n \n     private final long senderTimeoutMs;\n \n     public SimpleSink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n-\n-            Sender sender, Meter droppedEventsMeter, Meter processedEventsMeter, Meter rejectedEventsMeter, Meter totalEventsMeter) {\n+        ExecutorService executor,\n+        String applicationId,\n+        Properties properties,\n+        Sender sender,\n+        Meter droppedEventsMeter,\n+        Meter processedEventsMeter,\n+        Meter rejectedEventsMeter, Meter totalEventsMeter\n+    ) {\n         super(executor, applicationId, properties);\n-\n         this.sender = sender;\n-\n         this.droppedEventsMeter = droppedEventsMeter;\n         this.processedEventsMeter = processedEventsMeter;\n         this.rejectedEventsMeter = rejectedEventsMeter;\n         this.totalEventsMeter = totalEventsMeter;\n-\n         this.senderTimeoutMs = Props.SENDER_TIMEOUT_MS.extract(properties);\n     }\n \n@@ -59,6 +63,7 @@ public class SimpleSink extends Sink {\n                 if (!sender.isAvailable()) {\n                     return;\n                 }\n+\n                 subscribe();\n \n                 while (sender.isAvailable()) {\n@@ -77,9 +82,7 @@ public class SimpleSink extends Sink {\n                     // ConsumerRecords::count works for O(n), where n is partition count\n                     int eventCount = pollResult.count();\n                     List<Event> events = new ArrayList<>(eventCount);\n-\n                     int droppedEvents = 0;\n-\n                     for (TopicPartition partition : partitions) {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n@@ -88,6 +91,7 @@ public class SimpleSink extends Sink {\n                                 droppedEvents++;\n                                 continue;\n                             }\n+\n                             events.add(event);\n                         }\n                     }\n@@ -117,7 +121,8 @@ public class SimpleSink extends Sink {\n     }\n \n     private static class Props {\n-        static final PropertyDescription<Long> SENDER_TIMEOUT_MS =\n-                PropertyDescriptions.longProperty(\"senderTimeoutMs\").withDefaultValue(2_000L).build();\n+        static final PropertyDescription<Long> SENDER_TIMEOUT_MS = PropertyDescriptions.longProperty(\"senderTimeoutMs\")\n+        .withDefaultValue(2_000L)\n+        .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/64/SimpleSink.java\nindex 997d0e7b8a..d355574cb7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/64/SimpleSink.java\n@@ -84,7 +84,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 continue;\n                             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/64/SimpleSink.java\nindex 997d0e7b8a..d355574cb7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/64/SimpleSink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/64/SimpleSink.java\n@@ -84,7 +84,7 @@ public class SimpleSink extends Sink {\n                         List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                         for (ConsumerRecord<UUID, Event> record : records) {\n                             Event event = record.value();\n-                            if (event == null) {// Received non-deserializable data, should be ignored\n+                            if (event == null) { // Received non-deserializable data, should be ignored\n                                 droppedEvents++;\n                                 continue;\n                             }\n",
            "diff_size": 1
        }
    ]
}