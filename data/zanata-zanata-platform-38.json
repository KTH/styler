{
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "157",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        identity.checkPermission(getSecuredIteration(), \"import-template\");\n        HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n        ResourceUtils.validateExtensions(extensions); // gettext, comment\n        String resourceName = resource.getName();\n        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                resourceName)) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/38/SourceDocResourceService.java\nindex 055f9969cb..fa406fc157 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/38/SourceDocResourceService.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.rest.service;\n \n import java.net.URI;\n@@ -68,7 +69,7 @@ import org.zanata.util.UrlUtil;\n \n /**\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n @RequestScoped\n @Named(\"sourceDocResourceService\")\n@@ -76,7 +77,7 @@ import org.zanata.util.UrlUtil;\n @Transactional\n public class SourceDocResourceService implements SourceDocResource {\n     private static final Logger log =\n-            LoggerFactory.getLogger(SourceDocResourceService.class);\n+        LoggerFactory.getLogger(SourceDocResourceService.class);\n \n     @Context\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n@@ -118,7 +119,7 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response head() {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+            projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -130,7 +131,7 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response get(Set<String> extensions) {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+            projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -145,46 +146,47 @@ public class SourceDocResourceService implements SourceDocResource {\n             }\n         }\n         Object entity =\n-                new GenericEntity<List<ResourceMeta>>(resources){};\n+            new GenericEntity<List<ResourceMeta>>(resources) {\n+            };\n         return Response.ok(entity).tag(etag).build();\n     }\n \n     @Override\n     public Response post(Resource resource, Set<String> extensions,\n-            boolean copytrans) {\n+                         boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions); // gettext, comment\n         String resourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n-                resourceName)) {\n+            resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n             throw new WebApplicationException(Response\n-                    .status(Response.Status.BAD_REQUEST)\n-                    .entity(\"not a legal resource name: \" + resourceName)\n-                    .build());\n+                .status(Response.Status.BAD_REQUEST)\n+                .entity(\"not a legal resource name: \" + resourceName)\n+                .build());\n         }\n         HDocument document = documentDAO\n-                .getByDocIdAndIteration(hProjectIteration, resourceName);\n+            .getByDocIdAndIteration(hProjectIteration, resourceName);\n         // already existing non-obsolete document.\n         if (document != null) {\n             if (!document.isObsolete()) {\n                 // updates must happen through PUT on the actual resource\n                 return Response.status(Response.Status.CONFLICT)\n-                        .entity(\"A document with name \" + resourceName\n-                                + \" already exists.\")\n-                        .build();\n+                    .entity(\"A document with name \" + resourceName\n+                        + \" already exists.\")\n+                    .build();\n             }\n         }\n         // TODO No need for docId param since it's resource.getName()\n         document = this.documentServiceImpl.saveDocument(this.projectSlug,\n-                this.iterationSlug, resource, extensions, copytrans);\n+            this.iterationSlug, resource, extensions, copytrans);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n+            document.getDocId(), extensions);\n         return Response\n-                .created(URI.create(\n-                        \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n-                .tag(etag).build();\n+            .created(URI.create(\n+                \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n+            .tag(etag).build();\n     }\n \n     @Deprecated\n@@ -199,78 +201,78 @@ public class SourceDocResourceService implements SourceDocResource {\n         log.debug(\"start get resource\");\n         if (StringUtils.isBlank(docId)) {\n             return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+                .entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         ResourceUtils.validateExtensions(extensions);\n         final Set<String> extSet = new HashSet<>(extensions);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extSet);\n+            docId, extSet);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n         HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+            documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null || doc.isObsolete()) {\n             // TODO: return Problem DTO, https://tools.ietf.org/html/rfc7807\n             return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+                .entity(\"document not found\").build();\n         }\n         Resource entity = new Resource(doc.getDocId());\n         log.debug(\"get resource details {}\", entity.toString());\n         resourceUtils.transferToResource(doc, entity);\n         for (HTextFlow htf : doc.getTextFlows()) {\n             TextFlow tf =\n-                    new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n+                new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n             resourceUtils.transferToTextFlow(htf, tf);\n             resourceUtils.transferToTextFlowExtensions(htf,\n-                    tf.getExtensions(true), extensions);\n+                tf.getExtensions(true), extensions);\n             entity.getTextFlows().add(tf);\n         }\n         // handle extensions\n         resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+            entity.getExtensions(true), extensions);\n         log.debug(\"Get resource :{}\", entity.toString());\n         return Response.ok().entity(entity).tag(etag)\n-                .lastModified(doc.getLastChanged()).build();\n+            .lastModified(doc.getLastChanged()).build();\n     }\n \n     @Deprecated\n     @Override\n     public Response putResource(String idNoSlash, Resource resource,\n-            Set<String> extensions, boolean copytrans) {\n+                                Set<String> extensions, boolean copytrans) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n         return putResourceWithDocId(resource, id, extensions, copytrans);\n     }\n \n     @Override\n     public Response putResourceWithDocId(Resource resource, String docId,\n-            Set<String> extensions, boolean copytrans) {\n+                                         Set<String> extensions, boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         log.debug(\"start put resource\");\n         if (StringUtils.isBlank(docId)) {\n             return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing docId\").build();\n+                .entity(\"missing docId\").build();\n         }\n         Response.ResponseBuilder response;\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions);\n         HDocument document =\n-                this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n-                        docId);\n+            this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n+                docId);\n         if (document == null || document.isObsolete()) {\n             response = Response.created(\n-                    UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n-                            .queryParam(\"docId\", docId).build());\n+                UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n+                    .queryParam(\"docId\", docId).build());\n         } else {\n             response = Response.ok();\n         }\n         resource.setName(docId);\n         document = this.documentServiceImpl.saveDocument(projectSlug,\n-                iterationSlug, resource, extensions, copytrans);\n+            iterationSlug, resource, extensions, copytrans);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n+            document.getDocId(), extensions);\n         log.debug(\"put resource successfully\");\n         return response.tag(etag).build();\n     }\n@@ -287,17 +289,17 @@ public class SourceDocResourceService implements SourceDocResource {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n             return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+                .entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, new HashSet<String>());\n+            docId, new HashSet<String>());\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n         HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+            documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         documentServiceImpl.makeObsolete(document);\n         return Response.ok().build();\n     }\n@@ -311,30 +313,30 @@ public class SourceDocResourceService implements SourceDocResource {\n \n     @Override\n     public Response getResourceMetaWithDocId(String docId,\n-            Set<String> extensions) {\n+                                             Set<String> extensions) {\n         log.debug(\"start to get resource meta\");\n         if (StringUtils.isBlank(docId)) {\n             return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+                .entity(\"missing id\").build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+            docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n         HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+            documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null) {\n             return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+                .entity(\"document not found\").build();\n         }\n         ResourceMeta entity = new ResourceMeta(doc.getDocId());\n         resourceUtils.transferToAbstractResourceMeta(doc, entity);\n         // transfer extensions\n         resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+            entity.getExtensions(true), extensions);\n         log.debug(\"successfuly get resource meta: {}\", entity);\n         return Response.ok().entity(entity).tag(etag).build();\n     }\n@@ -342,23 +344,23 @@ public class SourceDocResourceService implements SourceDocResource {\n     @Deprecated\n     @Override\n     public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n-            Set<String> extensions) {\n+                                    Set<String> extensions) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceMetaWithDocId(messageBody, id , extensions);\n+        return putResourceMetaWithDocId(messageBody, id, extensions);\n     }\n \n     @Override\n     public Response putResourceMetaWithDocId(ResourceMeta messageBody,\n-            String docId, Set<String> extensions) {\n+                                             String docId, Set<String> extensions) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n             return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+                .entity(\"missing id\").build();\n         }\n         log.debug(\"start to put resource meta\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+            docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -366,7 +368,7 @@ public class SourceDocResourceService implements SourceDocResource {\n         log.debug(\"pass evaluation\");\n         log.debug(\"put resource meta: {}\", messageBody);\n         HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+            documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (document == null) {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n@@ -374,41 +376,41 @@ public class SourceDocResourceService implements SourceDocResource {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n         HLocale hLocale = validateTargetLocale(messageBody.getLang(),\n-                projectSlug, iterationSlug);\n+            projectSlug, iterationSlug);\n         boolean changed = resourceUtils.transferFromResourceMetadata(\n-                messageBody, document, extensions, hLocale,\n-                document.getRevision() + 1);\n+            messageBody, document, extensions, hLocale,\n+            document.getRevision() + 1);\n         if (changed) {\n             documentDAO.flush();\n             etag = eTagUtils.generateETagForDocument(hProjectIteration, docId,\n-                    extensions);\n+                extensions);\n         }\n         log.debug(\"put resource meta successfully\");\n         return Response.ok().tag(etag).lastModified(document.getLastChanged())\n-                .build();\n+            .build();\n     }\n \n     private HProjectIteration\n-            retrieveAndCheckIteration(boolean writeOperation) {\n+    retrieveAndCheckIteration(boolean writeOperation) {\n         HProjectIteration hProjectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n+            projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n         HProject hProject = hProjectIteration == null ? null\n-                : hProjectIteration.getProject();\n+            : hProjectIteration.getProject();\n         if (hProjectIteration == null) {\n             throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug\n-                    + \":\" + iterationSlug + \"\\' not found.\");\n+                + \":\" + iterationSlug + \"\\' not found.\");\n         } else if (!haveReadAccess(hProjectIteration) ||\n-                hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n-                || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n+            hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n+            || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n             throw new NoSuchEntityException(\n-                    \"Project Iteration \\'\" + projectSlug\n-                            + \":\" + iterationSlug + \"\\' not found.\");\n+                \"Project Iteration \\'\" + projectSlug\n+                    + \":\" + iterationSlug + \"\\' not found.\");\n         } else if (writeOperation) {\n             if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n-                    || hProject.getStatus().equals(EntityStatus.READONLY)) {\n+                || hProject.getStatus().equals(EntityStatus.READONLY)) {\n                 throw new ReadOnlyEntityException(\n-                        \"Project Iteration \\'\" + projectSlug + \":\"\n-                                + iterationSlug + \"\\' is read-only.\");\n+                    \"Project Iteration \\'\" + projectSlug + \":\"\n+                        + iterationSlug + \"\\' is read-only.\");\n             } else {\n                 return hProjectIteration;\n             }\n@@ -418,18 +420,18 @@ public class SourceDocResourceService implements SourceDocResource {\n     }\n \n     private HLocale validateTargetLocale(LocaleId locale, String projectSlug,\n-            String iterationSlug) {\n+                                         String iterationSlug) {\n         HLocale hLocale;\n         try {\n             hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale,\n-                    projectSlug, iterationSlug);\n+                projectSlug, iterationSlug);\n             return hLocale;\n         } catch (ZanataServiceException e) {\n             log.warn(\"Exception validating target locale {} in proj {} iter {}\",\n-                    locale, projectSlug, iterationSlug, e);\n+                locale, projectSlug, iterationSlug, e);\n             throw new WebApplicationException(\n-                    Response.status(Response.Status.FORBIDDEN)\n-                            .entity(e.getMessage()).build());\n+                Response.status(Response.Status.FORBIDDEN)\n+                    .entity(e.getMessage()).build());\n         }\n     }\n \n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/38/SourceDocResourceService.java\nindex 055f9969cb..36841f72c7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/38/SourceDocResourceService.java\n@@ -154,7 +154,8 @@ public class SourceDocResourceService implements SourceDocResource {\n             boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n+        ResourceUtils.validateExtensions(extensions);\n+// gettext, comment\n         String resourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                 resourceName)) {\n@@ -344,7 +345,7 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n             Set<String> extensions) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceMetaWithDocId(messageBody, id , extensions);\n+        return putResourceMetaWithDocId(messageBody, id, extensions);\n     }\n \n     @Override\n@@ -444,4 +445,4 @@ public class SourceDocResourceService implements SourceDocResource {\n     public boolean haveReadAccess(HProjectIteration version) {\n         return identity.hasPermission(version, \"read\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/38/SourceDocResourceService.java\nindex 055f9969cb..341207ac51 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/38/SourceDocResourceService.java\n@@ -39,7 +39,6 @@ import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n@@ -70,17 +69,19 @@ import org.zanata.util.UrlUtil;\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n+\n+\n @RequestScoped\n @Named(\"sourceDocResourceService\")\n @Path(SourceDocResource.SERVICE_PATH)\n @Transactional\n public class SourceDocResourceService implements SourceDocResource {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(SourceDocResourceService.class);\n+    private static final Logger log = LoggerFactory.getLogger(SourceDocResourceService.class);\n \n     @Context\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     private Request request;\n+\n     @Context\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     private UriInfo uri;\n@@ -88,26 +89,35 @@ public class SourceDocResourceService implements SourceDocResource {\n     /**\n      * Project Identifier.\n      */\n+\n     @PathParam(\"projectSlug\")\n     private String projectSlug;\n \n     /**\n      * Project Iteration identifier.\n      */\n+\n     @PathParam(\"iterationSlug\")\n     private String iterationSlug;\n+\n     @Inject\n     private ProjectIterationDAO projectIterationDAO;\n+\n     @Inject\n     private DocumentDAO documentDAO;\n+\n     @Inject\n     private LocaleService localeServiceImpl;\n+\n     @Inject\n     private DocumentService documentServiceImpl;\n+\n     @Inject\n     private ResourceUtils resourceUtils;\n+\n     @Inject\n     private ETagUtils eTagUtils;\n+\n     @Inject\n     private ZanataIdentity identity;\n \n@@ -117,20 +127,19 @@ public class SourceDocResourceService implements SourceDocResource {\n     @Override\n     public Response head() {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+        EntityTag etag = projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        return Response.ok().tag(etag).build();\n+        return Response.ok().tag(etag)\n+                            .build();\n     }\n \n     @Override\n     public Response get(Set<String> extensions) {\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag =\n-                projectIterationDAO.getResourcesETag(hProjectIteration);\n+        EntityTag etag = projectIterationDAO.getResourcesETag(hProjectIteration);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n@@ -144,47 +153,42 @@ public class SourceDocResourceService implements SourceDocResource {\n                 resources.add(resource);\n             }\n         }\n-        Object entity =\n-                new GenericEntity<List<ResourceMeta>>(resources){};\n-        return Response.ok(entity).tag(etag).build();\n+        Object entity = new GenericEntity<List<ResourceMeta>>(resources) {};\n+        return Response.ok(entity).tag(etag)\n+                                  .build();\n     }\n \n     @Override\n     public Response post(Resource resource, Set<String> extensions,\n-            boolean copytrans) {\n+        boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions); // gettext, comment\n         String resourceName = resource.getName();\n-        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n-                resourceName)) {\n+        if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX, resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n-            throw new WebApplicationException(Response\n-                    .status(Response.Status.BAD_REQUEST)\n-                    .entity(\"not a legal resource name: \" + resourceName)\n-                    .build());\n+            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).entity(\"not a legal resource name: \" + resourceName)\n+                                                                                          .build());\n         }\n-        HDocument document = documentDAO\n-                .getByDocIdAndIteration(hProjectIteration, resourceName);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, resourceName);\n         // already existing non-obsolete document.\n         if (document != null) {\n             if (!document.isObsolete()) {\n                 // updates must happen through PUT on the actual resource\n-                return Response.status(Response.Status.CONFLICT)\n-                        .entity(\"A document with name \" + resourceName\n-                                + \" already exists.\")\n-                        .build();\n+                return Response.status(Response.Status.CONFLICT).entity(\"A document with name \" + resourceName + \" already exists.\")\n+                                                                .build();\n             }\n         }\n         // TODO No need for docId param since it's resource.getName()\n-        document = this.documentServiceImpl.saveDocument(this.projectSlug,\n-                this.iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n-        return Response\n-                .created(URI.create(\n-                        \"r/\" + resourceUtils.encodeDocId(document.getDocId())))\n-                .tag(etag).build();\n+        document =\n+            this.documentServiceImpl.saveDocument(this.projectSlug,\n+                this.iterationSlug,\n+                resource,\n+                extensions,\n+                copytrans);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, document.getDocId(), extensions);\n+        return Response.created(URI.create(\"r/\" + resourceUtils.encodeDocId(document.getDocId()))).tag(etag)\n+                                                                                                  .build();\n     }\n \n     @Deprecated\n@@ -198,79 +202,72 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response getResourceWithDocId(String docId, Set<String> extensions) {\n         log.debug(\"start get resource\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\")\n+                                                               .build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n         ResourceUtils.validateExtensions(extensions);\n         final Set<String> extSet = new HashSet<>(extensions);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extSet);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extSet);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument doc = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null || doc.isObsolete()) {\n             // TODO: return Problem DTO, https://tools.ietf.org/html/rfc7807\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+            return Response.status(Response.Status.NOT_FOUND).entity(\"document not found\")\n+                                                             .build();\n         }\n         Resource entity = new Resource(doc.getDocId());\n         log.debug(\"get resource details {}\", entity.toString());\n         resourceUtils.transferToResource(doc, entity);\n         for (HTextFlow htf : doc.getTextFlows()) {\n-            TextFlow tf =\n-                    new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n+            TextFlow tf = new TextFlow(htf.getResId(), doc.getLocale().getLocaleId());\n             resourceUtils.transferToTextFlow(htf, tf);\n-            resourceUtils.transferToTextFlowExtensions(htf,\n-                    tf.getExtensions(true), extensions);\n+            resourceUtils.transferToTextFlowExtensions(htf, tf.getExtensions(true), extensions);\n             entity.getTextFlows().add(tf);\n         }\n         // handle extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+        resourceUtils.transferToResourceExtensions(doc, entity.getExtensions(true), extensions);\n         log.debug(\"Get resource :{}\", entity.toString());\n-        return Response.ok().entity(entity).tag(etag)\n-                .lastModified(doc.getLastChanged()).build();\n+        return Response.ok().entity(entity)\n+                            .tag(etag)\n+                            .lastModified(doc.getLastChanged())\n+                            .build();\n     }\n \n     @Deprecated\n     @Override\n-    public Response putResource(String idNoSlash, Resource resource,\n-            Set<String> extensions, boolean copytrans) {\n+    public Response putResource(String idNoSlash, Resource resource, Set<String> extensions,\n+        boolean copytrans) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n         return putResourceWithDocId(resource, id, extensions, copytrans);\n     }\n \n     @Override\n-    public Response putResourceWithDocId(Resource resource, String docId,\n-            Set<String> extensions, boolean copytrans) {\n+    public Response putResourceWithDocId(Resource resource, String docId, Set<String> extensions,\n+        boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         log.debug(\"start put resource\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing docId\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing docId\")\n+                                                               .build();\n         }\n         Response.ResponseBuilder response;\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n         ResourceUtils.validateExtensions(extensions);\n-        HDocument document =\n-                this.documentDAO.getByDocIdAndIteration(hProjectIteration,\n-                        docId);\n+        HDocument document = this.documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (document == null || document.isObsolete()) {\n-            response = Response.created(\n-                    UriBuilder.fromUri(urlUtil.restPath(uri.getPath()))\n-                            .queryParam(\"docId\", docId).build());\n+            response = Response.created(UriBuilder.fromUri(urlUtil.restPath(uri.getPath())).queryParam(\"docId\", docId)\n+                                                                                           .build());\n         } else {\n             response = Response.ok();\n         }\n         resource.setName(docId);\n-        document = this.documentServiceImpl.saveDocument(projectSlug,\n-                iterationSlug, resource, extensions, copytrans);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                document.getDocId(), extensions);\n+        document =\n+            this.documentServiceImpl.saveDocument(projectSlug, iterationSlug, resource, extensions, copytrans);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, document.getDocId(), extensions);\n         log.debug(\"put resource successfully\");\n         return response.tag(etag).build();\n     }\n@@ -286,18 +283,16 @@ public class SourceDocResourceService implements SourceDocResource {\n     public Response deleteResourceWithDocId(String docId) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\")\n+                                                               .build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, new HashSet<String>());\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, new HashSet<String>());\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         documentServiceImpl.makeObsolete(document);\n         return Response.ok().build();\n     }\n@@ -310,126 +305,117 @@ public class SourceDocResourceService implements SourceDocResource {\n     }\n \n     @Override\n-    public Response getResourceMetaWithDocId(String docId,\n-            Set<String> extensions) {\n+    public Response getResourceMetaWithDocId(String docId, Set<String> extensions) {\n         log.debug(\"start to get resource meta\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\")\n+                                                               .build();\n         }\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(false);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n-        HDocument doc =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument doc = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (doc == null) {\n-            return Response.status(Response.Status.NOT_FOUND)\n-                    .entity(\"document not found\").build();\n+            return Response.status(Response.Status.NOT_FOUND).entity(\"document not found\")\n+                                                             .build();\n         }\n         ResourceMeta entity = new ResourceMeta(doc.getDocId());\n         resourceUtils.transferToAbstractResourceMeta(doc, entity);\n         // transfer extensions\n-        resourceUtils.transferToResourceExtensions(doc,\n-                entity.getExtensions(true), extensions);\n+        resourceUtils.transferToResourceExtensions(doc, entity.getExtensions(true), extensions);\n         log.debug(\"successfuly get resource meta: {}\", entity);\n-        return Response.ok().entity(entity).tag(etag).build();\n+        return Response.ok().entity(entity)\n+                            .tag(etag)\n+                            .build();\n     }\n \n     @Deprecated\n     @Override\n-    public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody,\n-            Set<String> extensions) {\n+    public Response putResourceMeta(String idNoSlash, ResourceMeta messageBody, Set<String> extensions) {\n         String id = RestUtil.convertFromDocumentURIId(idNoSlash);\n-        return putResourceMetaWithDocId(messageBody, id , extensions);\n+        return putResourceMetaWithDocId(messageBody, id, extensions);\n     }\n \n     @Override\n-    public Response putResourceMetaWithDocId(ResourceMeta messageBody,\n-            String docId, Set<String> extensions) {\n+    public Response putResourceMetaWithDocId(ResourceMeta messageBody, String docId, Set<String> extensions) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         if (StringUtils.isBlank(docId)) {\n-            return Response.status(Response.Status.BAD_REQUEST)\n-                    .entity(\"missing id\").build();\n+            return Response.status(Response.Status.BAD_REQUEST).entity(\"missing id\")\n+                                                               .build();\n         }\n         log.debug(\"start to put resource meta\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration,\n-                docId, extensions);\n+        EntityTag etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         Response.ResponseBuilder response = request.evaluatePreconditions(etag);\n         if (response != null) {\n             return response.build();\n         }\n         log.debug(\"pass evaluation\");\n         log.debug(\"put resource meta: {}\", messageBody);\n-        HDocument document =\n-                documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n+        HDocument document = documentDAO.getByDocIdAndIteration(hProjectIteration, docId);\n         if (document == null) {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n         if (document.isObsolete()) {\n             return Response.status(Response.Status.NOT_FOUND).build();\n         }\n-        HLocale hLocale = validateTargetLocale(messageBody.getLang(),\n-                projectSlug, iterationSlug);\n-        boolean changed = resourceUtils.transferFromResourceMetadata(\n-                messageBody, document, extensions, hLocale,\n-                document.getRevision() + 1);\n+        HLocale hLocale = validateTargetLocale(messageBody.getLang(), projectSlug, iterationSlug);\n+        boolean changed = resourceUtils.transferFromResourceMetadata(messageBody,\n+                                                                     document,\n+                                                                     extensions,\n+                                                                     hLocale,\n+                                                                     document.getRevision() + 1);\n         if (changed) {\n             documentDAO.flush();\n-            etag = eTagUtils.generateETagForDocument(hProjectIteration, docId,\n-                    extensions);\n+            etag = eTagUtils.generateETagForDocument(hProjectIteration, docId, extensions);\n         }\n         log.debug(\"put resource meta successfully\");\n-        return Response.ok().tag(etag).lastModified(document.getLastChanged())\n-                .build();\n+        return Response.ok().tag(etag)\n+                            .lastModified(document.getLastChanged())\n+                            .build();\n     }\n \n-    private HProjectIteration\n-            retrieveAndCheckIteration(boolean writeOperation) {\n-        HProjectIteration hProjectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n+    private HProjectIteration retrieveAndCheckIteration(boolean writeOperation) {\n+        HProjectIteration hProjectIteration = projectIterationDAO.getBySlug(projectSlug, iterationSlug);\n         HProject hProject = hProjectIteration == null ? null\n-                : hProjectIteration.getProject();\n+            : hProjectIteration.getProject();\n         if (hProjectIteration == null) {\n-            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug\n-                    + \":\" + iterationSlug + \"\\' not found.\");\n-        } else if (!haveReadAccess(hProjectIteration) ||\n-                hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n-                || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n-            throw new NoSuchEntityException(\n-                    \"Project Iteration \\'\" + projectSlug\n-                            + \":\" + iterationSlug + \"\\' not found.\");\n+            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug + \":\"\n+            + iterationSlug + \"\\' not found.\");\n+        } else if (!haveReadAccess(hProjectIteration)\n+                       || hProjectIteration.getStatus().equals(EntityStatus.OBSOLETE)\n+                       || hProject.getStatus().equals(EntityStatus.OBSOLETE)) {\n+            throw new NoSuchEntityException(\"Project Iteration \\'\" + projectSlug + \":\"\n+            + iterationSlug + \"\\' not found.\");\n         } else if (writeOperation) {\n-            if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n-                    || hProject.getStatus().equals(EntityStatus.READONLY)) {\n-                throw new ReadOnlyEntityException(\n-                        \"Project Iteration \\'\" + projectSlug + \":\"\n-                                + iterationSlug + \"\\' is read-only.\");\n-            } else {\n-                return hProjectIteration;\n-            }\n-        } else {\n-            return hProjectIteration;\n-        }\n+                   if (hProjectIteration.getStatus().equals(EntityStatus.READONLY)\n+                           || hProject.getStatus().equals(EntityStatus.READONLY)) {\n+                       throw new ReadOnlyEntityException(\"Project Iteration \\'\" + projectSlug + \":\"\n+                       + iterationSlug + \"\\' is read-only.\");\n+                   } else {\n+                       return hProjectIteration;\n+                   }\n+               } else {\n+                   return hProjectIteration;\n+               }\n     }\n \n-    private HLocale validateTargetLocale(LocaleId locale, String projectSlug,\n-            String iterationSlug) {\n+    private HLocale validateTargetLocale(LocaleId locale, String projectSlug, String iterationSlug) {\n         HLocale hLocale;\n         try {\n-            hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale,\n-                    projectSlug, iterationSlug);\n+            hLocale = localeServiceImpl.validateLocaleByProjectIteration(locale, projectSlug, iterationSlug);\n             return hLocale;\n         } catch (ZanataServiceException e) {\n             log.warn(\"Exception validating target locale {} in proj {} iter {}\",\n-                    locale, projectSlug, iterationSlug, e);\n-            throw new WebApplicationException(\n-                    Response.status(Response.Status.FORBIDDEN)\n-                            .entity(e.getMessage()).build());\n+locale,\n+projectSlug,\n+iterationSlug,\n+e);\n+            throw new WebApplicationException(Response.status(Response.Status.FORBIDDEN).entity(e.getMessage())\n+                                                                                        .build());\n         }\n     }\n \n@@ -441,7 +427,8 @@ public class SourceDocResourceService implements SourceDocResource {\n      * Check if current user have read access to the project\n      * (checking for private project)\n      */\n+\n     public boolean haveReadAccess(HProjectIteration version) {\n         return identity.hasPermission(version, \"read\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 159
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "157",
                    "column": "53",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/38/SourceDocResourceService.java\nindex 055f9969cb..a406440d35 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/38/SourceDocResourceService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/38/SourceDocResourceService.java\n@@ -154,8 +154,7 @@ public class SourceDocResourceService implements SourceDocResource {\n             boolean copytrans) {\n         identity.checkPermission(getSecuredIteration(), \"import-template\");\n         HProjectIteration hProjectIteration = retrieveAndCheckIteration(true);\n-        ResourceUtils.validateExtensions(extensions); // gettext, comment\n-        String resourceName = resource.getName();\n+        ResourceUtils.validateExtensions(extensions);// gettext, comment StringresourceName = resource.getName();\n         if (!Pattern.matches(SourceDocResource.RESOURCE_NAME_REGEX,\n                 resourceName)) {\n             log.warn(\"bad resource name in post(): {}\", resourceName);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}