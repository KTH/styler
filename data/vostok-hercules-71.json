{
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "225",
                "column": "17",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            do {\n                // Add cursor info to support pagination\n                if(nextCursor.isPresent()) {\n                    RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                    requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                    request = requestBuilder.build();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/71/SentryApiClient.java\nindex 823aa79607..9924b0b31a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/71/SentryApiClient.java\n@@ -222,7 +222,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/71/SentryApiClient.java\nindex 823aa79607..20f506b7d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/71/SentryApiClient.java\n@@ -68,15 +68,16 @@ public class SentryApiClient {\n         this.objectMapper = new ObjectMapper();\n         this.sentryHost = HttpHost.create(sentryUrl);\n         this.httpClient = HttpClients.custom()\n-                .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n-                .setRetryHandler(new StandardHttpRequestRetryHandler())\n-                .build();\n+            .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n+            .setRetryHandler(new StandardHttpRequestRetryHandler())\n+            .build();\n     }\n \n     public Result<Void, ErrorInfo> ping() {\n         return request(\n-                new HttpHead(API_URL),\n-                new TypeReference<Void>() {});\n+            new HttpHead(API_URL),\n+            new TypeReference<Void>() {\n+            });\n     }\n \n     /**\n@@ -86,8 +87,9 @@ public class SentryApiClient {\n      */\n     public Result<List<OrganizationInfo>, ErrorInfo> getOrganizations() {\n         return pagedRequest(\n-                new HttpGet(ORGANIZATIONS_URL),\n-                new TypeReference<List<OrganizationInfo>>() {});\n+            new HttpGet(ORGANIZATIONS_URL),\n+            new TypeReference<List<OrganizationInfo>>() {\n+            });\n     }\n \n     /**\n@@ -98,21 +100,23 @@ public class SentryApiClient {\n      */\n     public Result<List<ProjectInfo>, ErrorInfo> getProjects(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n-                new TypeReference<List<ProjectInfo>>() {});\n+            new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n+            new TypeReference<List<ProjectInfo>>() {\n+            });\n     }\n \n     /**\n      * Get a list of public DSN which match the project\n      *\n      * @param organization the organization of the project\n-     * @param project the project for which a list of public DSN is requested\n+     * @param project      the project for which a list of public DSN is requested\n      * @return the {@link Result} object with a list of public DSN\n      */\n     public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n+            new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n+            new TypeReference<List<KeyInfo>>() {\n+            });\n     }\n \n     /**\n@@ -123,8 +127,9 @@ public class SentryApiClient {\n      */\n     public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+            new HttpGet(String.format(GET_TEAMS_URL, organization)),\n+            new TypeReference<List<TeamInfo>>() {\n+            });\n     }\n \n     /**\n@@ -147,14 +152,15 @@ public class SentryApiClient {\n         HttpPost post = new HttpPost(ORGANIZATIONS_URL);\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new organization '%s' in Sentry\", organization));\n-        return request(post, new TypeReference<OrganizationInfo>() {});\n+        return request(post, new TypeReference<OrganizationInfo>() {\n+        });\n     }\n \n     /**\n      * Create new team in the Sentry\n      *\n      * @param organization the organization where need to create a team\n-     * @param team the team name\n+     * @param team         the team name\n      * @return the {@link Result} object with created team or error\n      */\n     public Result<TeamInfo, ErrorInfo> createTeam(String organization, String team) {\n@@ -171,15 +177,16 @@ public class SentryApiClient {\n         HttpPost post = new HttpPost(String.format(CREATE_TEAM_URL, organization));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new team '%s' in Sentry\", team));\n-        return request(post, new TypeReference<TeamInfo>() {});\n+        return request(post, new TypeReference<TeamInfo>() {\n+        });\n     }\n \n     /**\n      * Create new project in the Sentry\n      *\n      * @param organization the organization where need to create a project\n-     * @param team the team where need to create a project\n-     * @param project the project name\n+     * @param team         the team where need to create a project\n+     * @param project      the project name\n      * @return the {@link Result} object with created project or error\n      */\n     public Result<ProjectInfo, ErrorInfo> createProject(String organization, String team, String project) {\n@@ -196,7 +203,8 @@ public class SentryApiClient {\n         HttpPost post = new HttpPost(String.format(CREATE_PROJECT_URL, organization, team));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new project '%s' in Sentry\", project));\n-        return request(post, new TypeReference<ProjectInfo>() {});\n+        return request(post, new TypeReference<ProjectInfo>() {\n+        });\n     }\n \n     private <T> Result<T, ErrorInfo> request(HttpUriRequest request, TypeReference<T> typeReference) {\n@@ -222,7 +230,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n@@ -257,7 +265,7 @@ public class SentryApiClient {\n     private static Optional<String> getCursorValue(Header linkHeader) {\n         for (HeaderElement element : linkHeader.getElements()) {\n             Map<String, String> params = Arrays.stream(element.getParameters())\n-                    .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n+                .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n \n             if (!\"next\".equals(params.get(\"rel\"))) {\n                 continue;\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/71/SentryApiClient.java\nindex 823aa79607..a8b4fadd9c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/71/SentryApiClient.java\n@@ -112,7 +112,7 @@ public class SentryApiClient {\n     public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n         return pagedRequest(\n                 new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n+                new TypeReference<List<KeyInfo>>() {});\n     }\n \n     /**\n@@ -124,7 +124,7 @@ public class SentryApiClient {\n     public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n         return pagedRequest(\n                 new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+                new TypeReference<List<TeamInfo>>() {});\n     }\n \n     /**\n@@ -222,7 +222,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n@@ -269,4 +269,4 @@ public class SentryApiClient {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/71/SentryApiClient.java\nindex 823aa79607..e0dff01e6d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/71/SentryApiClient.java\n@@ -31,7 +31,6 @@ import ru.kontur.vostok.hercules.sentry.api.model.Team;\n import ru.kontur.vostok.hercules.sentry.api.model.TeamInfo;\n import ru.kontur.vostok.hercules.sentry.sink.ErrorInfo;\n import ru.kontur.vostok.hercules.util.functional.Result;\n-\n import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n@@ -44,39 +43,46 @@ import java.util.stream.Collectors;\n  *\n  * @author Kirill Sulim\n  */\n-public class SentryApiClient {\n \n+\n+public class SentryApiClient {\n     private static final Logger LOGGER = LoggerFactory.getLogger(SentryApiClient.class);\n \n     private static final String API_URL = \"/api/0/\";\n \n     private static final String ORGANIZATIONS_URL = API_URL + \"organizations/\";\n+\n     private static final String PROJECTS_URL = API_URL + \"projects/\";\n+\n     private static final String TEAMS_URL = API_URL + \"teams/\";\n \n     private static final String GET_PROJECTS_URL = ORGANIZATIONS_URL + \"%s/projects/\";\n+\n     private static final String GET_PUBLIC_DSN_URL = PROJECTS_URL + \"%s/%s/keys/\";\n+\n     private static final String GET_TEAMS_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n+\n     private static final String CREATE_TEAM_URL = ORGANIZATIONS_URL + \"%s/teams/\";\n+\n     private static final String CREATE_PROJECT_URL = TEAMS_URL + \"%s/%s/projects/\";\n \n     private final ObjectMapper objectMapper;\n+\n     private final HttpHost sentryHost;\n+\n     private final CloseableHttpClient httpClient;\n \n     public SentryApiClient(String sentryUrl, String token) {\n         this.objectMapper = new ObjectMapper();\n         this.sentryHost = HttpHost.create(sentryUrl);\n         this.httpClient = HttpClients.custom()\n-                .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n-                .setRetryHandler(new StandardHttpRequestRetryHandler())\n-                .build();\n+        .addInterceptorFirst(new BearerAuthHttpInterceptor(token))\n+        .setRetryHandler(new StandardHttpRequestRetryHandler())\n+        .build();\n     }\n \n     public Result<Void, ErrorInfo> ping() {\n-        return request(\n-                new HttpHead(API_URL),\n-                new TypeReference<Void>() {});\n+        return request(new HttpHead(API_URL), new TypeReference<Void>() {});\n     }\n \n     /**\n@@ -84,10 +90,12 @@ public class SentryApiClient {\n      *\n      * @return the {@link Result} object with a list of organizations\n      */\n+\n     public Result<List<OrganizationInfo>, ErrorInfo> getOrganizations() {\n         return pagedRequest(\n-                new HttpGet(ORGANIZATIONS_URL),\n-                new TypeReference<List<OrganizationInfo>>() {});\n+            new HttpGet(ORGANIZATIONS_URL),\n+            new TypeReference<List<OrganizationInfo>>() {}\n+        );\n     }\n \n     /**\n@@ -96,10 +104,12 @@ public class SentryApiClient {\n      * @param organization the organization\n      * @return the {@link Result} object with a list of projects\n      */\n+\n     public Result<List<ProjectInfo>, ErrorInfo> getProjects(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n-                new TypeReference<List<ProjectInfo>>() {});\n+            new HttpGet(String.format(GET_PROJECTS_URL, organization)),\n+            new TypeReference<List<ProjectInfo>>() {}\n+        );\n     }\n \n     /**\n@@ -109,10 +119,9 @@ public class SentryApiClient {\n      * @param project the project for which a list of public DSN is requested\n      * @return the {@link Result} object with a list of public DSN\n      */\n+\n     public Result<List<KeyInfo>, ErrorInfo> getPublicDsn(String organization, String project) {\n-        return pagedRequest(\n-                new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)),\n-                new TypeReference<List<KeyInfo>>() {} );\n+        return pagedRequest(new HttpGet(String.format(GET_PUBLIC_DSN_URL, organization, project)), new TypeReference<List<KeyInfo>>() {});\n     }\n \n     /**\n@@ -121,10 +130,12 @@ public class SentryApiClient {\n      * @param organization the organization\n      * @return the {@link Result} object with a list of teams\n      */\n+\n     public Result<List<TeamInfo>, ErrorInfo> getTeams(String organization) {\n         return pagedRequest(\n-                new HttpGet(String.format(GET_TEAMS_URL, organization)),\n-                new TypeReference<List<TeamInfo>>() {} );\n+            new HttpGet(String.format(GET_TEAMS_URL, organization)),\n+            new TypeReference<List<TeamInfo>>() {}\n+        );\n     }\n \n     /**\n@@ -133,6 +144,7 @@ public class SentryApiClient {\n      * @param organization the name of an organization\n      * @return the {@link Result} object with created organization or error\n      */\n+\n     public Result<OrganizationInfo, ErrorInfo> createOrganization(String organization) {\n         Organization organizationModel = new Organization(organization);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -140,10 +152,13 @@ public class SentryApiClient {\n         try {\n             body = objectMapper.writeValueAsBytes(organizationModel);\n         } catch (JsonProcessingException e) {\n-            String message = String.format(\"Cannot create JSON from model for organization creation: %s\", e.getMessage());\n+            String message = String.format(\"Cannot create JSON from model for organization creation: %s\",\n+                                           e.getMessage()\n+            );\n             LOGGER.error(message);\n             return Result.error(new ErrorInfo(message, false));\n         }\n+\n         HttpPost post = new HttpPost(ORGANIZATIONS_URL);\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new organization '%s' in Sentry\", organization));\n@@ -157,6 +172,7 @@ public class SentryApiClient {\n      * @param team the team name\n      * @return the {@link Result} object with created team or error\n      */\n+\n     public Result<TeamInfo, ErrorInfo> createTeam(String organization, String team) {\n         Team teamModel = new Team(team);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -168,6 +184,7 @@ public class SentryApiClient {\n             LOGGER.error(message);\n             return Result.error(new ErrorInfo(message, false));\n         }\n+\n         HttpPost post = new HttpPost(String.format(CREATE_TEAM_URL, organization));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new team '%s' in Sentry\", team));\n@@ -182,6 +199,7 @@ public class SentryApiClient {\n      * @param project the project name\n      * @return the {@link Result} object with created project or error\n      */\n+\n     public Result<ProjectInfo, ErrorInfo> createProject(String organization, String team, String project) {\n         Project projectModel = new Project(project);\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -193,6 +211,7 @@ public class SentryApiClient {\n             LOGGER.error(message);\n             return Result.error(new ErrorInfo(message, false));\n         }\n+\n         HttpPost post = new HttpPost(String.format(CREATE_PROJECT_URL, organization, team));\n         post.setEntity(new ByteArrayEntity(body, ContentType.APPLICATION_JSON));\n         LOGGER.info(String.format(\"Creating of new project '%s' in Sentry\", project));\n@@ -204,10 +223,12 @@ public class SentryApiClient {\n             if (isErrorResponse(response)) {\n                 return Result.error(new ErrorInfo(extractErrorMessage(response), extractStatusCode(response)));\n             }\n+\n             T value = null;\n             Optional<HttpEntity> entity = Optional.ofNullable(response.getEntity());\n             if (entity.isPresent()) {\n-                value = objectMapper.readValue(entity.get().getContent(), typeReference);\n+                value = objectMapper.readValue(entity.get()\n+                .getContent(), typeReference);\n             }\n             return Result.ok(value);\n         } catch (Exception e) {\n@@ -222,16 +243,19 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n                 }\n+\n                 try (CloseableHttpResponse response = httpClient.execute(sentryHost, request)) {\n                     if (isErrorResponse(response)) {\n                         return Result.error(new ErrorInfo(extractErrorMessage(response), extractStatusCode(response)));\n                     }\n-                    resultList.addAll(objectMapper.readValue(response.getEntity().getContent(), listTypeReference));\n+\n+                    resultList.addAll(objectMapper.readValue(response.getEntity()\n+                    .getContent(), listTypeReference));\n                     nextCursor = getCursorValue(response.getFirstHeader(\"Link\"));\n                 }\n             } while (nextCursor.isPresent());\n@@ -247,21 +271,23 @@ public class SentryApiClient {\n     }\n \n     private static String extractErrorMessage(CloseableHttpResponse response) {\n-        return response.getStatusLine().getReasonPhrase();\n+        return response.getStatusLine()\n+        .getReasonPhrase();\n     }\n \n     private static int extractStatusCode(CloseableHttpResponse response) {\n-        return response.getStatusLine().getStatusCode();\n+        return response.getStatusLine()\n+        .getStatusCode();\n     }\n \n     private static Optional<String> getCursorValue(Header linkHeader) {\n         for (HeaderElement element : linkHeader.getElements()) {\n             Map<String, String> params = Arrays.stream(element.getParameters())\n-                    .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n-\n+            .collect(Collectors.toMap(NameValuePair::getName, NameValuePair::getValue));\n             if (!\"next\".equals(params.get(\"rel\"))) {\n                 continue;\n             }\n+\n             if (\"false\".equals(params.get(\"results\"))) {\n                 return Optional.empty();\n             }\n@@ -269,4 +295,4 @@ public class SentryApiClient {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/71/SentryApiClient.java\nindex 823aa79607..9924b0b31a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/71/SentryApiClient.java\n@@ -222,7 +222,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/71/SentryApiClient.java\nindex 823aa79607..9924b0b31a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/71/SentryApiClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/71/SentryApiClient.java\n@@ -222,7 +222,7 @@ public class SentryApiClient {\n         try {\n             do {\n                 // Add cursor info to support pagination\n-                if(nextCursor.isPresent()) {\n+                if (nextCursor.isPresent()) {\n                     RequestBuilder requestBuilder = RequestBuilder.copy(request);\n                     requestBuilder.addParameter(\"cursor\", nextCursor.get());\n                     request = requestBuilder.build();\n",
            "diff_size": 1
        }
    ]
}