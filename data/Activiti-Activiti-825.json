{
    "error_id": "825",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.Collections;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/825/Message.java\nindex 6e2a41792a..abb8ab6d95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/825/Message.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.Collections;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/825/Message.java\nindex 6e2a41792a..c91ae3ac6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/825/Message.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.Collections;\n@@ -18,136 +19,138 @@ import java.util.Map;\n \n public class Message extends BaseElement {\n \n-  protected String name;\n-  protected String itemRef;\n-\n-  private Message(Builder builder) {\n-    this.id = builder.id;\n-    this.xmlRowNumber = builder.xmlRowNumber;\n-    this.xmlColumnNumber = builder.xmlColumnNumber;\n-    this.extensionElements = builder.extensionElements;\n-    this.attributes = builder.attributes;\n-    this.name = builder.name;\n-    this.itemRef = builder.itemRef;\n-  }\n-\n-  public Message() {\n-  }\n-\n-  public Message(String id, String name, String itemRef) {\n-    this.id = id;\n-    this.name = name;\n-    this.itemRef = itemRef;\n-  }\n-\n-  public String getName() {\n-    return name;\n-  }\n-\n-  public void setName(String name) {\n-    this.name = name;\n-  }\n-\n-  public String getItemRef() {\n-    return itemRef;\n-  }\n-\n-  public void setItemRef(String itemRef) {\n-    this.itemRef = itemRef;\n-  }\n-\n-  public Message clone() {\n-    Message clone = new Message();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(Message otherElement) {\n-    super.setValues(otherElement);\n-    setName(otherElement.getName());\n-    setItemRef(otherElement.getItemRef());\n-  }\n-\n-  /**\n-   * Creates builder to build {@link Message}.\n-   * @return created builder\n-   */\n-  public static Builder builder() {\n-    return new Builder();\n-  }\n-\n-  /**\n-   * Creates a builder to build {@link Message} and initialize it with the given object.\n-   * @param message to initialize the builder with\n-   * @return created builder\n-   */\n-  public static Builder builderFrom(Message message) {\n-    return new Builder(message);\n-  }\n-\n-  /**\n-   * Builder to build {@link Message}.\n-   */\n-  public static final class Builder {\n-\n-    private String id;\n-    private int xmlRowNumber;\n-    private int xmlColumnNumber;\n-    private Map<String, List<ExtensionElement>> extensionElements = Collections.emptyMap();\n-    private Map<String, List<ExtensionAttribute>> attributes = Collections.emptyMap();\n-    private String name;\n-    private String itemRef;\n-\n-    private Builder() {\n+    protected String name;\n+    protected String itemRef;\n+\n+    private Message(Builder builder) {\n+        this.id = builder.id;\n+        this.xmlRowNumber = builder.xmlRowNumber;\n+        this.xmlColumnNumber = builder.xmlColumnNumber;\n+        this.extensionElements = builder.extensionElements;\n+        this.attributes = builder.attributes;\n+        this.name = builder.name;\n+        this.itemRef = builder.itemRef;\n     }\n \n-    private Builder(Message message) {\n-        this.id = message.id;\n-        this.xmlRowNumber = message.xmlRowNumber;\n-        this.xmlColumnNumber = message.xmlColumnNumber;\n-        this.extensionElements = message.extensionElements;\n-        this.attributes = message.attributes;\n-        this.name = message.name;\n-        this.itemRef = message.itemRef;\n+    public Message() {\n     }\n \n-    public Builder id(String id) {\n+    public Message(String id, String name, String itemRef) {\n         this.id = id;\n-        return this;\n+        this.name = name;\n+        this.itemRef = itemRef;\n     }\n \n-    public Builder xmlRowNumber(int xmlRowNumber) {\n-        this.xmlRowNumber = xmlRowNumber;\n-        return this;\n+    public String getName() {\n+        return name;\n     }\n \n-    public Builder xmlColumnNumber(int xmlColumnNumber) {\n-        this.xmlColumnNumber = xmlColumnNumber;\n-        return this;\n+    public void setName(String name) {\n+        this.name = name;\n     }\n \n-    public Builder extensionElements(Map<String, List<ExtensionElement>> extensionElements) {\n-        this.extensionElements = extensionElements;\n-        return this;\n+    public String getItemRef() {\n+        return itemRef;\n     }\n \n-    public Builder attributes(Map<String, List<ExtensionAttribute>> attributes) {\n-        this.attributes = attributes;\n-        return this;\n+    public void setItemRef(String itemRef) {\n+        this.itemRef = itemRef;\n     }\n \n-    public Builder name(String name) {\n-        this.name = name;\n-        return this;\n+    public Message clone() {\n+        Message clone = new Message();\n+        clone.setValues(this);\n+        return clone;\n     }\n \n-    public Builder itemRef(String itemRef) {\n-        this.itemRef = itemRef;\n-        return this;\n+    public void setValues(Message otherElement) {\n+        super.setValues(otherElement);\n+        setName(otherElement.getName());\n+        setItemRef(otherElement.getItemRef());\n+    }\n+\n+    /**\n+     * Creates builder to build {@link Message}.\n+     *\n+     * @return created builder\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a builder to build {@link Message} and initialize it with the given object.\n+     *\n+     * @param message to initialize the builder with\n+     * @return created builder\n+     */\n+    public static Builder builderFrom(Message message) {\n+        return new Builder(message);\n     }\n \n-    public Message build() {\n-        return new Message(this);\n+    /**\n+     * Builder to build {@link Message}.\n+     */\n+    public static final class Builder {\n+\n+        private String id;\n+        private int xmlRowNumber;\n+        private int xmlColumnNumber;\n+        private Map<String, List<ExtensionElement>> extensionElements = Collections.emptyMap();\n+        private Map<String, List<ExtensionAttribute>> attributes = Collections.emptyMap();\n+        private String name;\n+        private String itemRef;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder(Message message) {\n+            this.id = message.id;\n+            this.xmlRowNumber = message.xmlRowNumber;\n+            this.xmlColumnNumber = message.xmlColumnNumber;\n+            this.extensionElements = message.extensionElements;\n+            this.attributes = message.attributes;\n+            this.name = message.name;\n+            this.itemRef = message.itemRef;\n+        }\n+\n+        public Builder id(String id) {\n+            this.id = id;\n+            return this;\n+        }\n+\n+        public Builder xmlRowNumber(int xmlRowNumber) {\n+            this.xmlRowNumber = xmlRowNumber;\n+            return this;\n+        }\n+\n+        public Builder xmlColumnNumber(int xmlColumnNumber) {\n+            this.xmlColumnNumber = xmlColumnNumber;\n+            return this;\n+        }\n+\n+        public Builder extensionElements(Map<String, List<ExtensionElement>> extensionElements) {\n+            this.extensionElements = extensionElements;\n+            return this;\n+        }\n+\n+        public Builder attributes(Map<String, List<ExtensionAttribute>> attributes) {\n+            this.attributes = attributes;\n+            return this;\n+        }\n+\n+        public Builder name(String name) {\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder itemRef(String itemRef) {\n+            this.itemRef = itemRef;\n+            return this;\n+        }\n+\n+        public Message build() {\n+            return new Message(this);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 199
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 77.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 87.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 95.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/825/Message.java\nindex 6e2a41792a..8ebd3c08fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/825/Message.java\n@@ -16,12 +16,13 @@ import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n+\n public class Message extends BaseElement {\n \n-  protected String name;\n-  protected String itemRef;\n+    protected String name;\n+    protected String itemRef;\n \n-  private Message(Builder builder) {\n+    private Message(Builder builder) {\n     this.id = builder.id;\n     this.xmlRowNumber = builder.xmlRowNumber;\n     this.xmlColumnNumber = builder.xmlColumnNumber;\n@@ -29,73 +30,82 @@ public class Message extends BaseElement {\n     this.attributes = builder.attributes;\n     this.name = builder.name;\n     this.itemRef = builder.itemRef;\n-  }\n+    }\n \n-  public Message() {\n-  }\n+    public Message() {\n+    }\n \n-  public Message(String id, String name, String itemRef) {\n+    public Message(String id, String name, String itemRef) {\n     this.id = id;\n     this.name = name;\n     this.itemRef = itemRef;\n-  }\n+    }\n \n-  public String getName() {\n+    public String getName() {\n     return name;\n-  }\n+    }\n \n-  public void setName(String name) {\n+    public void setName(String name) {\n     this.name = name;\n-  }\n+    }\n \n-  public String getItemRef() {\n+    public String getItemRef() {\n     return itemRef;\n-  }\n+    }\n \n-  public void setItemRef(String itemRef) {\n+    public void setItemRef(String itemRef) {\n     this.itemRef = itemRef;\n-  }\n+    }\n \n-  public Message clone() {\n+    public Message clone() {\n     Message clone = new Message();\n     clone.setValues(this);\n     return clone;\n-  }\n+    }\n \n-  public void setValues(Message otherElement) {\n+    public void setValues(Message otherElement) {\n     super.setValues(otherElement);\n     setName(otherElement.getName());\n     setItemRef(otherElement.getItemRef());\n-  }\n+    }\n \n   /**\n    * Creates builder to build {@link Message}.\n    * @return created builder\n    */\n-  public static Builder builder() {\n-    return new Builder();\n-  }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n \n   /**\n    * Creates a builder to build {@link Message} and initialize it with the given object.\n    * @param message to initialize the builder with\n    * @return created builder\n    */\n-  public static Builder builderFrom(Message message) {\n-    return new Builder(message);\n-  }\n+\n+    public static Builder builderFrom(Message message) {\n+        return new Builder(message);\n+    }\n \n   /**\n    * Builder to build {@link Message}.\n    */\n-  public static final class Builder {\n+\n+    public static final class Builder {\n \n     private String id;\n+\n     private int xmlRowNumber;\n+\n     private int xmlColumnNumber;\n+\n     private Map<String, List<ExtensionElement>> extensionElements = Collections.emptyMap();\n+\n     private Map<String, List<ExtensionAttribute>> attributes = Collections.emptyMap();\n+\n     private String name;\n+\n     private String itemRef;\n \n     private Builder() {\n@@ -149,5 +159,5 @@ public class Message extends BaseElement {\n     public Message build() {\n         return new Message(this);\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/825/Message.java\nindex 6e2a41792a..abb8ab6d95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/825/Message.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.Collections;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/825/Message.java\nindex 6e2a41792a..abb8ab6d95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/825/Message.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/825/Message.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.Collections;\n",
            "diff_size": 1
        }
    ]
}