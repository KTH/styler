{
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    public void shouldQueryNonExistentView() {\n        ViewQueryResponse single = cluster()\n            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n            .toBlocking()\n            .single();\n        assertEquals(ResponseStatus.NOT_EXISTS, single.status());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/6/ViewMessageTest.java\nindex 5270e3156c..2f7ec7747a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/6/ViewMessageTest.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.cluster;\n \n import com.couchbase.client.core.message.ResponseStatus;\n@@ -40,7 +41,8 @@ public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n         ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n+            .<ViewQueryResponse>send(\n+                new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n             .toBlocking()\n             .single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/6/ViewMessageTest.java\nindex 5270e3156c..cab55da8ad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/6/ViewMessageTest.java\n@@ -46,4 +46,4 @@ public class ViewMessageTest extends ClusterDependentTest {\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/6/ViewMessageTest.java\nindex 5270e3156c..5283ae2da9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/6/ViewMessageTest.java\n@@ -26,7 +26,6 @@ import com.couchbase.client.core.message.view.ViewQueryRequest;\n import com.couchbase.client.core.message.view.ViewQueryResponse;\n import com.couchbase.client.core.util.ClusterDependentTest;\n import org.junit.Test;\n-\n import static org.junit.Assert.assertEquals;\n \n /**\n@@ -35,15 +34,12 @@ import static org.junit.Assert.assertEquals;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class ViewMessageTest extends ClusterDependentTest {\n \n+\n+public class ViewMessageTest extends ClusterDependentTest {\n     @Test\n     public void shouldQueryNonExistentView() {\n-        ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n-            .toBlocking()\n-            .single();\n+        ViewQueryResponse single = cluster().<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password())).toBlocking().single();\n         assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/6/ViewMessageTest.java\nindex 5270e3156c..ce71251a8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/6/ViewMessageTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/6/ViewMessageTest.java\n@@ -39,11 +39,10 @@ public class ViewMessageTest extends ClusterDependentTest {\n \n     @Test\n     public void shouldQueryNonExistentView() {\n-        ViewQueryResponse single = cluster()\n-            .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n-            .toBlocking()\n-            .single();\n-        assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n-    }\n+        ViewQueryResponse single = cluster() .<ViewQueryResponse>send(new ViewQueryRequest(\"designdoc\", \"foobar\", false, \"debug=true\", bucket(), password()))\n+        .toBlocking()\n+        .single();\n+    assertEquals(ResponseStatus.NOT_EXISTS, single.status());\n+}\n \n }\n",
            "diff_size": 6
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}