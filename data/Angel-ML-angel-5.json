{
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/5/SketchUtils.java\nindex d2ab07c6a6..c0b2a91710 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/5/SketchUtils.java\n@@ -22,164 +22,166 @@ import java.util.Random;\n \n public class SketchUtils {\n \n-  private static final Random rand = new Random();\n-\n-  public static void checkK(int k) {\n-    if (k < 1) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should be positive\");\n-    } else if (k >= 65535) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should not be larger than 65536\");\n-    } else if (!isPowerOf2(k)) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n+    private static final Random rand = new Random();\n+\n+    public static void checkK(int k) {\n+        if (k < 1) {\n+            throw new QuantileSketchException(\"Invalid value of k: k should be positive\");\n+        } else if (k >= 65535) {\n+            throw new QuantileSketchException(\n+                    \"Invalid value of k: k should not be larger than 65536\");\n+        } else if (!isPowerOf2(k)) {\n+            throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n+        }\n     }\n-  }\n \n \n-  public static boolean isPowerOf2(int k) {\n-    for (int i = 1; i < 65536; i <<= 1) {\n-      if (k == i) {\n-        return true;\n-      }\n+    public static boolean isPowerOf2(int k) {\n+        for (int i = 1; i < 65536; i <<= 1) {\n+            if (k == i) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n \n-  public static int needBufferCapacity(int k, long estimateN) {\n-    int numLevels = 1 + (63 - Long.numberOfLeadingZeros(estimateN / (k * 2)));\n-    return k * (numLevels + 2);\n-  }\n-\n-  protected static void checkBitPattern(long bitPattern, long n, int k) {\n-    if (bitPattern != n / (k * 2)) {\n-      throw new QuantileSketchException(\"Bit Pattern not match\");\n+    public static int needBufferCapacity(int k, long estimateN) {\n+        int numLevels = 1 + (63 - Long.numberOfLeadingZeros(estimateN / (k * 2)));\n+        return k * (numLevels + 2);\n     }\n-  }\n \n-  protected static void checkFraction(float fraction) {\n-    if (fraction < 0.0 || fraction > 1.0) {\n-      throw new QuantileSketchException(\"Fraction should be in range [0.0, 1.0]\");\n+    protected static void checkBitPattern(long bitPattern, long n, int k) {\n+        if (bitPattern != n / (k * 2)) {\n+            throw new QuantileSketchException(\"Bit Pattern not match\");\n+        }\n     }\n-  }\n \n-  protected static void checkFractions(float[] fractions) {\n-    for (float f : fractions) {\n-      checkFraction(f);\n+    protected static void checkFraction(float fraction) {\n+        if (fraction < 0.0 || fraction > 1.0) {\n+            throw new QuantileSketchException(\"Fraction should be in range [0.0, 1.0]\");\n+        }\n     }\n-  }\n \n-  protected static void checkEvenPartiotion(int evenPartition) {\n-    if (evenPartition <= 0) {\n-      throw new QuantileSketchException(\"Invalid partition number: \" + evenPartition);\n-    }\n-  }\n-\n-  protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n-    int offset = rand.nextBoolean() ? 1 : 0;\n-    int bound = dstOffset + dstSize;\n-    for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n-      dstBuf[j] = srcBuf[i];\n+    protected static void checkFractions(float[] fractions) {\n+        for (float f : fractions) {\n+            checkFraction(f);\n+        }\n     }\n-  }\n-\n-  protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n-    int bound1 = srcOffset1 + size;\n-    int bound2 = srcOffset2 + size;\n-    int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n-    while (i1 < bound1 && i2 < bound2) {\n-      if (src1[i1] < src2[i2]) {\n-        dst[i3++] = src1[i1++];\n-      } else {\n-        dst[i3++] = src2[i2++];\n-      }\n-    }\n-    if (i1 < bound1) {\n-      System.arraycopy(src1, i1, dst, i3, bound1 - i1);\n-    } else {\n-      System.arraycopy(src2, i2, dst, i3, bound2 - i2);\n+\n+    protected static void checkEvenPartiotion(int evenPartition) {\n+        if (evenPartition <= 0) {\n+            throw new QuantileSketchException(\"Invalid partition number: \" + evenPartition);\n+        }\n     }\n-  }\n-\n-  protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n-    for (int level = beginLevel; level < endLevel; level++) {\n-      if ((bitPattern & (1L << level)) == 0) {\n-        throw new QuantileSketchException(\"Encounter empty level: \" + level);\n-      }\n-      SketchUtils.mergeArrays(levelsArr, k * (level + 2),\n-          levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n-      SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n+\n+    protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n+                                        final float[] dstBuf, int dstOffset, int dstSize) {\n+        int offset = rand.nextBoolean() ? 1 : 0;\n+        int bound = dstOffset + dstSize;\n+        for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n+            dstBuf[j] = srcBuf[i];\n+        }\n     }\n-  }\n \n-  protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n-    if (blkSize <= 0 || length <= blkSize) {\n-      return;\n+    protected static void mergeArrays(final float[] src1, int srcOffset1,\n+                                      final float[] src2, int srcOffset2,\n+                                      final float[] dst, int dstOffset, int size) {\n+        int bound1 = srcOffset1 + size;\n+        int bound2 = srcOffset2 + size;\n+        int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n+        while (i1 < bound1 && i2 < bound2) {\n+            if (src1[i1] < src2[i2]) {\n+                dst[i3++] = src1[i1++];\n+            } else {\n+                dst[i3++] = src2[i2++];\n+            }\n+        }\n+        if (i1 < bound1) {\n+            System.arraycopy(src1, i1, dst, i3, bound1 - i1);\n+        } else {\n+            System.arraycopy(src2, i2, dst, i3, bound2 - i2);\n+        }\n     }\n-    int numBlks = (length + (blkSize - 1)) / blkSize;\n-    final float[] tmpKeys = Arrays.copyOf(keys, length);\n-    final long[] tmpValues = Arrays.copyOf(values, length);\n-    recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n-  }\n-\n-  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n-      int blkStart, int blkLen, int blkSize, int arrLimit) {\n-    if (blkLen == 1) {\n-      return;\n+\n+    protected static void levelwisePropagation(long bitPattern, int k,\n+                                               int beginLevel, int endLevel,\n+                                               final float[] buf, int bufBeginPos,\n+                                               final float[] levelsArr) {\n+        for (int level = beginLevel; level < endLevel; level++) {\n+            if ((bitPattern & (1L << level)) == 0) {\n+                throw new QuantileSketchException(\"Encounter empty level: \" + level);\n+            }\n+            SketchUtils.mergeArrays(levelsArr, k * (level + 2),\n+                    levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n+            SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n+        }\n     }\n-    int blkLen1 = blkLen >> 1;\n-    int blkLen2 = blkLen - blkLen1;\n-    int blkStart1 = blkStart;\n-    int blkStart2 = blkStart + blkLen1;\n-\n-    recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart1, blkLen1, blkSize, arrLimit);\n-    recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart2, blkLen2, blkSize, arrLimit);\n-\n-    int arrStart1 = blkStart1 * blkSize;\n-    int arrStart2 = blkStart2 * blkSize;\n-    int arrLen1 = blkLen1 * blkSize;\n-    int arrLen2 = blkLen2 * blkSize;\n-    if (arrStart2 + arrLen2 > arrLimit) {\n-      arrLen2 = arrLimit - arrStart2;\n+\n+    protected static void blockyMergeSort(final float[] keys, final long[] values,\n+                                          int length, int blkSize) {\n+        if (blkSize <= 0 || length <= blkSize) {\n+            return;\n+        }\n+        int numBlks = (length + (blkSize - 1)) / blkSize;\n+        final float[] tmpKeys = Arrays.copyOf(keys, length);\n+        final long[] tmpValues = Arrays.copyOf(values, length);\n+        recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n     }\n \n-    blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n-  }\n-\n-  protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n-    int arrEnd1 = arrStart1 + arrLen1;\n-    int arrEnd2 = arrStart2 + arrLen2;\n-    int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n-    while (i1 < arrEnd1 && i2 < arrEnd2) {\n-      if (kSrc[i1] <= kSrc[i2]) {\n-        kDst[i3] = kSrc[i1];\n-        vDst[i3] = vSrc[i1];\n-        ++i1;\n-        ++i3;\n-      } else {\n-        kDst[i3] = kSrc[i2];\n-        vDst[i3] = vSrc[i2];\n-        ++i2;\n-        ++i3;\n-      }\n+    protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n+                                                   final float[] kDst, final long[] vDst,\n+                                                   int blkStart, int blkLen, int blkSize,\n+                                                   int arrLimit) {\n+        if (blkLen == 1) {\n+            return;\n+        }\n+        int blkLen1 = blkLen >> 1;\n+        int blkLen2 = blkLen - blkLen1;\n+        int blkStart1 = blkStart;\n+        int blkStart2 = blkStart + blkLen1;\n+\n+        recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart1, blkLen1, blkSize, arrLimit);\n+        recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart2, blkLen2, blkSize, arrLimit);\n+\n+        int arrStart1 = blkStart1 * blkSize;\n+        int arrStart2 = blkStart2 * blkSize;\n+        int arrLen1 = blkLen1 * blkSize;\n+        int arrLen2 = blkLen2 * blkSize;\n+        if (arrStart2 + arrLen2 > arrLimit) {\n+            arrLen2 = arrLimit - arrStart2;\n+        }\n+\n+        blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n     }\n \n-    if (i1 < arrEnd1) {\n-      System.arraycopy(kSrc, i1, kDst, i3, arrEnd1 - i1);\n-      System.arraycopy(vSrc, i1, vDst, i3, arrEnd1 - i1);\n-    } else {\n-      System.arraycopy(kSrc, i2, kDst, i3, arrEnd2 - i2);\n-      System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n+    protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n+                                      int arrStart1, int arrLen1,\n+                                      int arrStart2, int arrLen2,\n+                                      final float[] kDst, final long[] vDst, int arrStart3) {\n+        int arrEnd1 = arrStart1 + arrLen1;\n+        int arrEnd2 = arrStart2 + arrLen2;\n+        int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n+        while (i1 < arrEnd1 && i2 < arrEnd2) {\n+            if (kSrc[i1] <= kSrc[i2]) {\n+                kDst[i3] = kSrc[i1];\n+                vDst[i3] = vSrc[i1];\n+                ++i1;\n+                ++i3;\n+            } else {\n+                kDst[i3] = kSrc[i2];\n+                vDst[i3] = vSrc[i2];\n+                ++i2;\n+                ++i3;\n+            }\n+        }\n+\n+        if (i1 < arrEnd1) {\n+            System.arraycopy(kSrc, i1, kDst, i3, arrEnd1 - i1);\n+            System.arraycopy(vSrc, i1, vDst, i3, arrEnd1 - i1);\n+        } else {\n+            System.arraycopy(kSrc, i2, kDst, i3, arrEnd2 - i2);\n+            System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n+        }\n     }\n-  }\n }\n \n",
            "diff_size": 183
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/5/SketchUtils.java\nindex d2ab07c6a6..9bcfad0975 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/5/SketchUtils.java\n@@ -73,19 +73,16 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n-    int offset = rand.nextBoolean() ? 1 : 0;\n+  protected static void compactBuffer(final float[] srcBuf, int srcOffset, final float[] dstBuf, int dstOffset, int dstSize) {\n+  int offset = rand.nextBoolean() ? 1 : 0;\n     int bound = dstOffset + dstSize;\n     for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n       dstBuf[j] = srcBuf[i];\n     }\n   }\n \n-  protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n-    int bound1 = srcOffset1 + size;\n+  protected static void mergeArrays(final float[] src1, int srcOffset1, final float[] src2, int srcOffset2, final float[] dst, int dstOffset, int size) {\n+  int bound1 = srcOffset1 + size;\n     int bound2 = srcOffset2 + size;\n     int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n     while (i1 < bound1 && i2 < bound2) {\n@@ -102,23 +99,18 @@ public class SketchUtils {\n     }\n   }\n \n-  protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n+  protected static void levelwisePropagation(long bitPattern, int k, int beginLevel, int endLevel, final float[] buf, int bufBeginPos, final float[] levelsArr) {\n     for (int level = beginLevel; level < endLevel; level++) {\n       if ((bitPattern & (1L << level)) == 0) {\n         throw new QuantileSketchException(\"Encounter empty level: \" + level);\n       }\n-      SketchUtils.mergeArrays(levelsArr, k * (level + 2),\n-          levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n+      SketchUtils.mergeArrays(levelsArr, k * (level + 2), levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n       SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n     }\n   }\n \n-  protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n-    if (blkSize <= 0 || length <= blkSize) {\n+  protected static void blockyMergeSort(final float[] keys, final long[] values, int length, int blkSize) {\n+  if (blkSize <= 0 || length <= blkSize) {\n       return;\n     }\n     int numBlks = (length + (blkSize - 1)) / blkSize;\n@@ -127,10 +119,9 @@ public class SketchUtils {\n     recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n   }\n \n-  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n+  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc, final float[] kDst, final long[] vDst,\n       int blkStart, int blkLen, int blkSize, int arrLimit) {\n-    if (blkLen == 1) {\n+  if (blkLen == 1) {\n       return;\n     }\n     int blkLen1 = blkLen >> 1;\n@@ -152,11 +143,9 @@ public class SketchUtils {\n     blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n   }\n \n-  protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n-    int arrEnd1 = arrStart1 + arrLen1;\n+  protected static void blockyMerge(final float[] kSrc, final long[] vSrc, int arrStart1, int arrLen1,\n+      int arrStart2, int arrLen2, final float[] kDst, final long[] vDst, int arrStart3) {\n+  int arrEnd1 = arrStart1 + arrLen1;\n     int arrEnd2 = arrStart2 + arrLen2;\n     int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n     while (i1 < arrEnd1 && i2 < arrEnd2) {\n@@ -181,5 +170,4 @@ public class SketchUtils {\n       System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n     }\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/5/SketchUtils.java\nindex d2ab07c6a6..a725b74067 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/5/SketchUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/5/SketchUtils.java\n@@ -21,123 +21,124 @@ import java.util.Arrays;\n import java.util.Random;\n \n public class SketchUtils {\n+    private static final Random rand = new Random();\n \n-  private static final Random rand = new Random();\n-\n-  public static void checkK(int k) {\n+    public static void checkK(int k) {\n     if (k < 1) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should be positive\");\n+        throw new QuantileSketchException(\"Invalid value of k: k should be positive\");\n     } else if (k >= 65535) {\n       throw new QuantileSketchException(\"Invalid value of k: k should not be larger than 65536\");\n     } else if (!isPowerOf2(k)) {\n-      throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n+        throw new QuantileSketchException(\"Invalid value of k: k should be power of 2\");\n+           }\n     }\n-  }\n-\n \n-  public static boolean isPowerOf2(int k) {\n+    public static boolean isPowerOf2(int k) {\n     for (int i = 1; i < 65536; i <<= 1) {\n-      if (k == i) {\n+        if (k == i) {\n         return true;\n-      }\n+        }\n     }\n     return false;\n-  }\n+    }\n \n-  public static int needBufferCapacity(int k, long estimateN) {\n+    public static int needBufferCapacity(int k, long estimateN) {\n     int numLevels = 1 + (63 - Long.numberOfLeadingZeros(estimateN / (k * 2)));\n     return k * (numLevels + 2);\n-  }\n+    }\n \n-  protected static void checkBitPattern(long bitPattern, long n, int k) {\n+    protected static void checkBitPattern(long bitPattern, long n, int k) {\n     if (bitPattern != n / (k * 2)) {\n-      throw new QuantileSketchException(\"Bit Pattern not match\");\n+        throw new QuantileSketchException(\"Bit Pattern not match\");\n+    }\n     }\n-  }\n \n-  protected static void checkFraction(float fraction) {\n+    protected static void checkFraction(float fraction) {\n     if (fraction < 0.0 || fraction > 1.0) {\n-      throw new QuantileSketchException(\"Fraction should be in range [0.0, 1.0]\");\n+        throw new QuantileSketchException(\"Fraction should be in range [0.0, 1.0]\");\n+    }\n     }\n-  }\n \n-  protected static void checkFractions(float[] fractions) {\n+    protected static void checkFractions(float[] fractions) {\n     for (float f : fractions) {\n-      checkFraction(f);\n+        checkFraction(f);\n+    }\n     }\n-  }\n \n-  protected static void checkEvenPartiotion(int evenPartition) {\n+    protected static void checkEvenPartiotion(int evenPartition) {\n     if (evenPartition <= 0) {\n-      throw new QuantileSketchException(\"Invalid partition number: \" + evenPartition);\n+        throw new QuantileSketchException(\"Invalid partition number: \" + evenPartition);\n+    }\n     }\n-  }\n \n-  protected static void compactBuffer(final float[] srcBuf, int srcOffset,\n-      final float[] dstBuf, int dstOffset, int dstSize) {\n+    protected static void compactBuffer(final float[] srcBuf, int srcOffset, final float[] dstBuf, int dstOffset, int dstSize) {\n     int offset = rand.nextBoolean() ? 1 : 0;\n     int bound = dstOffset + dstSize;\n     for (int i = srcOffset + offset, j = dstOffset; j < bound; i += 2, j++) {\n-      dstBuf[j] = srcBuf[i];\n+        dstBuf[j] = srcBuf[i];\n+    }\n     }\n-  }\n \n-  protected static void mergeArrays(final float[] src1, int srcOffset1,\n-      final float[] src2, int srcOffset2,\n-      final float[] dst, int dstOffset, int size) {\n+    protected static void mergeArrays(final float[] src1,\n+                                      int srcOffset1,\n+                                      final float[] src2,\n+                                      int srcOffset2,\n+                                      final float[] dst,\n+                                      int dstOffset, int size) {\n     int bound1 = srcOffset1 + size;\n     int bound2 = srcOffset2 + size;\n     int i1 = srcOffset1, i2 = srcOffset2, i3 = dstOffset;\n     while (i1 < bound1 && i2 < bound2) {\n-      if (src1[i1] < src2[i2]) {\n+        if (src1[i1] < src2[i2]) {\n         dst[i3++] = src1[i1++];\n-      } else {\n-        dst[i3++] = src2[i2++];\n-      }\n+        } else {\n+          dst[i3++] = src2[i2++];\n+        }\n     }\n+\n     if (i1 < bound1) {\n-      System.arraycopy(src1, i1, dst, i3, bound1 - i1);\n+        System.arraycopy(src1, i1, dst, i3, bound1 - i1);\n     } else {\n       System.arraycopy(src2, i2, dst, i3, bound2 - i2);\n     }\n-  }\n+    }\n \n-  protected static void levelwisePropagation(long bitPattern, int k,\n-      int beginLevel, int endLevel,\n-      final float[] buf, int bufBeginPos,\n-      final float[] levelsArr) {\n+    protected static void levelwisePropagation(long bitPattern, int k, int beginLevel, int endLevel, final float[] buf, int bufBeginPos, final float[] levelsArr) {\n     for (int level = beginLevel; level < endLevel; level++) {\n-      if ((bitPattern & (1L << level)) == 0) {\n+        if ((bitPattern & (1L << level)) == 0) {\n         throw new QuantileSketchException(\"Encounter empty level: \" + level);\n-      }\n-      SketchUtils.mergeArrays(levelsArr, k * (level + 2),\n-          levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n-      SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n+        }\n+        SketchUtils.mergeArrays(levelsArr, k * (level + 2), levelsArr, k * (endLevel + 2), buf, bufBeginPos, k);\n+        SketchUtils.compactBuffer(buf, bufBeginPos, levelsArr, k * (endLevel + 2), k);\n+    }\n     }\n-  }\n \n-  protected static void blockyMergeSort(final float[] keys, final long[] values,\n-      int length, int blkSize) {\n+    protected static void blockyMergeSort(final float[] keys, final long[] values, int length, int blkSize) {\n     if (blkSize <= 0 || length <= blkSize) {\n-      return;\n+        return;\n     }\n+\n     int numBlks = (length + (blkSize - 1)) / blkSize;\n     final float[] tmpKeys = Arrays.copyOf(keys, length);\n     final long[] tmpValues = Arrays.copyOf(values, length);\n     recursiveBlockyMergeSort(tmpKeys, tmpValues, keys, values, 0, numBlks, blkSize, length);\n-  }\n+    }\n \n-  protected static void recursiveBlockyMergeSort(final float[] kSrc, final long[] vSrc,\n-      final float[] kDst, final long[] vDst,\n-      int blkStart, int blkLen, int blkSize, int arrLimit) {\n+    protected static void recursiveBlockyMergeSort(final float[] kSrc,\n+                                                   final long[] vSrc,\n+                                                   final float[] kDst,\n+                                                   final long[] vDst,\n+                                                   int blkStart,\n+                                                   int blkLen,\n+                                                   int blkSize, int arrLimit) {\n     if (blkLen == 1) {\n-      return;\n+        return;\n     }\n+\n     int blkLen1 = blkLen >> 1;\n     int blkLen2 = blkLen - blkLen1;\n     int blkStart1 = blkStart;\n     int blkStart2 = blkStart + blkLen1;\n-\n     recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart1, blkLen1, blkSize, arrLimit);\n     recursiveBlockyMergeSort(kDst, vDst, kSrc, vSrc, blkStart2, blkLen2, blkSize, arrLimit);\n \n@@ -146,40 +147,35 @@ public class SketchUtils {\n     int arrLen1 = blkLen1 * blkSize;\n     int arrLen2 = blkLen2 * blkSize;\n     if (arrStart2 + arrLen2 > arrLimit) {\n-      arrLen2 = arrLimit - arrStart2;\n+        arrLen2 = arrLimit - arrStart2;\n     }\n-\n     blockyMerge(kSrc, vSrc, arrStart1, arrLen1, arrStart2, arrLen2, kDst, vDst, arrStart1);\n-  }\n+    }\n \n-  protected static void blockyMerge(final float[] kSrc, final long[] vSrc,\n-      int arrStart1, int arrLen1,\n-      int arrStart2, int arrLen2,\n-      final float[] kDst, final long[] vDst, int arrStart3) {\n+    protected static void blockyMerge(final float[] kSrc, final long[] vSrc, int arrStart1, int arrLen1, int arrStart2, int arrLen2, final float[] kDst, final long[] vDst, int arrStart3) {\n     int arrEnd1 = arrStart1 + arrLen1;\n     int arrEnd2 = arrStart2 + arrLen2;\n     int i1 = arrStart1, i2 = arrStart2, i3 = arrStart3;\n     while (i1 < arrEnd1 && i2 < arrEnd2) {\n-      if (kSrc[i1] <= kSrc[i2]) {\n+        if (kSrc[i1] <= kSrc[i2]) {\n         kDst[i3] = kSrc[i1];\n         vDst[i3] = vSrc[i1];\n         ++i1;\n         ++i3;\n-      } else {\n-        kDst[i3] = kSrc[i2];\n-        vDst[i3] = vSrc[i2];\n-        ++i2;\n-        ++i3;\n-      }\n+        } else {\n+          kDst[i3] = kSrc[i2];\n+          vDst[i3] = vSrc[i2];\n+          ++i2;\n+          ++i3;\n+        }\n     }\n \n     if (i1 < arrEnd1) {\n-      System.arraycopy(kSrc, i1, kDst, i3, arrEnd1 - i1);\n-      System.arraycopy(vSrc, i1, vDst, i3, arrEnd1 - i1);\n+        System.arraycopy(kSrc, i1, kDst, i3, arrEnd1 - i1);\n+        System.arraycopy(vSrc, i1, vDst, i3, arrEnd1 - i1);\n     } else {\n       System.arraycopy(kSrc, i2, kDst, i3, arrEnd2 - i2);\n       System.arraycopy(vSrc, i2, vDst, i3, arrEnd2 - i2);\n     }\n-  }\n-}\n-\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}