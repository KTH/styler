{
    "error_id": "358",
    "information": {
        "errors": [
            {
                "line": "59",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 120).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n\n        double [] delta = new double[10000000];",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/358/PSFTestTask.java\nindex 0c83a55a16..563b887c87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/358/PSFTestTask.java\n@@ -55,43 +55,42 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n-          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n+        + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n \n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n-\n-        double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta1[i] = 2.0;\n-        }\n-        DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n-        deltaV1.setMatrixId(client.getMatrixId());\n-        deltaV1.setRowId(1);\n+      double [] delta = new double[10000000];\n+      for(int i = 0; i < 10000000; i++) {\n+        delta[i] = 1.0;\n+      }\n+      DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n+      deltaV.setMatrixId(client.getMatrixId());\n+      deltaV.setRowId(0);\n \n-        client.increment(deltaV);\n-        client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n+      double [] delta1 = new double[10000000];\n+      for(int i = 0; i < 10000000; i++) {\n+        delta1[i] = 2.0;\n       }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n-    }\n-  }\n+      DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n+      deltaV1.setMatrixId(client.getMatrixId());\n+      deltaV1.setRowId(1);\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+      client.increment(deltaV);\n+      client.increment(deltaV1);\n+      client.clock().get();\n+      taskContext.incEpoch();\n     }\n+  } catch (Throwable x) {\n+    throw new AngelException(\"run task failed \", x);\n+  }\n+}\n \n-    return ret;\n+private double sum(DenseDoubleVector row) {\n+  double [] data = row.getValues();\n+  double ret = 0.0;\n+  for(int i = 0; i < data.length; i++) {\n+    ret += data[i];\n   }\n+\n+  return ret;\n+}\n }\n",
            "diff_size": 43
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/358/PSFTestTask.java\nindex 0c83a55a16..1343995b69 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/358/PSFTestTask.java\n@@ -32,66 +32,72 @@ import org.apache.commons.logging.LogFactory;\n  * Created by payniexiao on 2017/7/18.\n  */\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n-    super(taskContext);\n-  }\n+    public PSFTestTask(TaskContext taskContext) {\n+        super(taskContext);\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n-    return null;\n-  }\n+    @Override\n+    public Long parse(Long key, Long value) {\n+        return null;\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {\n+    }\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n-      Pull func1 = new Pull(client.getMatrixId(), 1);\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+        try {\n+            MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+            Pull func = new Pull(client.getMatrixId(), 0);\n+            Pull func1 = new Pull(client.getMatrixId(), 1);\n \n-      while (taskContext.getEpoch() < 100) {\n-        taskContext.globalSync(client.getMatrixId());\n-        long startTs = System.currentTimeMillis();\n-        TVector row = ((GetRowResult) client.get(func)).getRow();\n-        TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n-          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n+            while (taskContext.getEpoch() < 100) {\n+                taskContext.globalSync(client.getMatrixId());\n+                long startTs = System.currentTimeMillis();\n+                TVector row = ((GetRowResult) client.get(func)).getRow();\n+                TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" pull use time=\" + (System.currentTimeMillis() - startTs) +\n+                        \", sum of row 0=\" + sum((DenseDoubleVector) row)\n+                        + \" sum of row 1=\" + sum((DenseDoubleVector) row1));\n \n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+                double[] delta = new double[10000000];\n+                for (int i = 0; i < 10000000; i++) {\n+                    delta[i] = 1.0;\n+                }\n+                DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n+                deltaV.setMatrixId(client.getMatrixId());\n+                deltaV.setRowId(0);\n \n-        double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta1[i] = 2.0;\n-        }\n-        DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n-        deltaV1.setMatrixId(client.getMatrixId());\n-        deltaV1.setRowId(1);\n+                double[] delta1 = new double[10000000];\n+                for (int i = 0; i < 10000000; i++) {\n+                    delta1[i] = 2.0;\n+                }\n+                DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n+                deltaV1.setMatrixId(client.getMatrixId());\n+                deltaV1.setRowId(1);\n \n-        client.increment(deltaV);\n-        client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+                client.increment(deltaV);\n+                client.increment(deltaV1);\n+                client.clock().get();\n+                taskContext.incEpoch();\n+            }\n+        } catch (Throwable x) {\n+            throw new AngelException(\"run task failed \", x);\n+        }\n     }\n-  }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+    private double sum(DenseDoubleVector row) {\n+        double[] data = row.getValues();\n+        double ret = 0.0;\n+        for (int i = 0; i < data.length; i++) {\n+            ret += data[i];\n+        }\n \n-    return ret;\n-  }\n+        return ret;\n+    }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/358/PSFTestTask.java\nindex 0c83a55a16..f92f3a90eb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/358/PSFTestTask.java\n@@ -38,14 +38,17 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n     super(taskContext);\n   }\n \n-  @Override public Long parse(Long key, Long value) {\n+  @Override\n+public Long parse(Long key, Long value) {\n     return null;\n   }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+  @Override\n+public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n+  @Override\n+public void run(TaskContext taskContext) throws AngelException {\n+    try {\n       MatrixClient client = taskContext.getMatrix(\"psf_test\");\n       Pull func = new Pull(client.getMatrixId(), 0);\n       Pull func1 = new Pull(client.getMatrixId(), 1);\n@@ -55,12 +58,10 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n           + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n-\n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n+double [] delta = new double[10000000];\n+        for (int i = 0; i < 10000000; i++) {\n           delta[i] = 1.0;\n         }\n         DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n@@ -68,7 +69,7 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         deltaV.setRowId(0);\n \n         double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n+        for (int i = 0; i < 10000000; i++) {\n           delta1[i] = 2.0;\n         }\n         DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n@@ -88,10 +89,10 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n   private double sum(DenseDoubleVector row) {\n     double [] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n+    for (int i = 0; i < data.length; i++) {\n       ret += data[i];\n     }\n \n     return ret;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 259).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/358/PSFTestTask.java\nindex 0c83a55a16..d4ec2f9a85 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/358/PSFTestTask.java\n@@ -31,67 +31,67 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * Created by payniexiao on 2017/7/18.\n  */\n+\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n+    public PSFTestTask(TaskContext taskContext) {\n     super(taskContext);\n-  }\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n+    @Override\n+    public Long parse(Long key, Long value) {\n     return null;\n-  }\n-\n-  @Override public void preProcess(TaskContext taskContext) { }\n+    }\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n-      Pull func1 = new Pull(client.getMatrixId(), 1);\n+    @Override\n+    public void preProcess(TaskContext taskContext) {}\n \n-      while (taskContext.getEpoch() < 100) {\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+    try {\n+        MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+        Pull func = new Pull(client.getMatrixId(), 0);\n+        Pull func1 = new Pull(client.getMatrixId(), 1);\n+        while (taskContext.getEpoch() < 100) {\n         taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n-          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n-\n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta[i] = 1.0;\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector) row) + \" sum of row 1=\" + sum((DenseDoubleVector) row1));\n+        double[] delta = new double[10000000];\n+        for (int i = 0; i < 10000000; i++) {\n+                                                 delta[i] = 1.0;\n         }\n+\n         DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n-\n-        double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta1[i] = 2.0;\n+        double[] delta1 = new double[10000000];\n+        for (int i = 0; i < 10000000; i++) {\n+                                                 delta1[i] = 2.0;\n         }\n+\n         DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n         deltaV1.setMatrixId(client.getMatrixId());\n         deltaV1.setRowId(1);\n-\n         client.increment(deltaV);\n         client.increment(deltaV1);\n         client.clock().get();\n         taskContext.incEpoch();\n-      }\n+        }\n     } catch (Throwable x) {\n       throw new AngelException(\"run task failed \", x);\n     }\n-  }\n+    }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n+    private double sum(DenseDoubleVector row) {\n+    double[] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+    for (int i = 0; i < data.length; i++) {\n+        ret += data[i];\n     }\n-\n     return ret;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/358/PSFTestTask.java\nindex 0c83a55a16..8462290871 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/358/PSFTestTask.java\n@@ -56,42 +56,44 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n-          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n+          + \" pull use time=\" + (System.currentTimeMillis( )- startTs\n+            ) + \", sum of row 0=\" +sum((DenseDoubleVector)row)+\n+          \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n \n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+         double [] delta = new double[10000000];\n+         for(int i = 0; i < 10000000; i++) {\n+           delta[i] = 1.0;\n+         }\n+         DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n+         deltaV.setMatrixId(client.getMatrixId());\n+         deltaV.setRowId(0);\n \n-        double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta1[i] = 2.0;\n-        }\n-        DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n-        deltaV1.setMatrixId(client.getMatrixId());\n-        deltaV1.setRowId(1);\n+         double [] delta1 = new double[10000000];\n+         for(int i = 0; i < 10000000; i++) {\n+           delta1[i] = 2.0;\n+         }\n+         DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n+         deltaV1.setMatrixId(client.getMatrixId());\n+         deltaV1.setRowId(1);\n \n-        client.increment(deltaV);\n-        client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n-    }\n-  }\n+         client.increment(deltaV);\n+         client.increment(deltaV1);\n+         client.clock().get();\n+         taskContext.incEpoch();\n+       }\n+     } catch (Throwable x) {\n+       throw new AngelException(\"run task failed \", x);\n+     }\n+   }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+   private double sum(DenseDoubleVector row) {\n+     double [] data = row.getValues();\n+     double ret = 0.0;\n+     for(int i = 0; i < data.length; i++) {\n+       ret += data[i];\n+     }\n \n-    return ret;\n-  }\n-}\n+     return ret;\n+   }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/358/PSFTestTask.java\nindex 0c83a55a16..563b887c87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/358/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/358/PSFTestTask.java\n@@ -55,43 +55,42 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         TVector row1 = ((GetRowResult) client.get(func1)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n-          + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum of row 0=\" + sum((DenseDoubleVector)row)\n+        + \" sum of row 1=\" + sum((DenseDoubleVector)row1));\n \n-        double [] delta = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta[i] = 1.0;\n-        }\n-        DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n-\n-        double [] delta1 = new double[10000000];\n-        for(int i = 0; i < 10000000; i++) {\n-          delta1[i] = 2.0;\n-        }\n-        DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n-        deltaV1.setMatrixId(client.getMatrixId());\n-        deltaV1.setRowId(1);\n+      double [] delta = new double[10000000];\n+      for(int i = 0; i < 10000000; i++) {\n+        delta[i] = 1.0;\n+      }\n+      DenseDoubleVector deltaV = new DenseDoubleVector(10000000, delta);\n+      deltaV.setMatrixId(client.getMatrixId());\n+      deltaV.setRowId(0);\n \n-        client.increment(deltaV);\n-        client.increment(deltaV1);\n-        client.clock().get();\n-        taskContext.incEpoch();\n+      double [] delta1 = new double[10000000];\n+      for(int i = 0; i < 10000000; i++) {\n+        delta1[i] = 2.0;\n       }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n-    }\n-  }\n+      DenseDoubleVector deltaV1 = new DenseDoubleVector(10000000, delta1);\n+      deltaV1.setMatrixId(client.getMatrixId());\n+      deltaV1.setRowId(1);\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+      client.increment(deltaV);\n+      client.increment(deltaV1);\n+      client.clock().get();\n+      taskContext.incEpoch();\n     }\n+  } catch (Throwable x) {\n+    throw new AngelException(\"run task failed \", x);\n+  }\n+}\n \n-    return ret;\n+private double sum(DenseDoubleVector row) {\n+  double [] data = row.getValues();\n+  double ret = 0.0;\n+  for(int i = 0; i < data.length; i++) {\n+    ret += data[i];\n   }\n+\n+  return ret;\n+}\n }\n",
            "diff_size": 43
        }
    ]
}