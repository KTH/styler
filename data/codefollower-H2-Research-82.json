{
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "144",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n    @Override\n    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n        if (session.getDatabase().isStarting()) {\n            // don't check at startup\n            return;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/82/ConstraintCheck.java\nindex 4db44206d8..7c48345102 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/82/ConstraintCheck.java\n@@ -86,7 +86,7 @@ public class ConstraintCheck extends Constraint {\n         table = null;\n         invalidate();\n     }\n-    \n+\n     //\u53ea\u7528\u4e8einsert\u548cupdate\n     @Override\n     public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n@@ -140,8 +140,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n-    @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n+    @Overridepublicvoid checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n         if (session.getDatabase().isStarting()) {\n             // don't check at startup\n             return;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/82/ConstraintCheck.java\nindex 4db44206d8..ff38513217 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/82/ConstraintCheck.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.constraint;\n \n import java.util.HashSet;\n@@ -59,7 +60,7 @@ public class ConstraintCheck extends Constraint {\n             buff.append(\" COMMENT \").append(StringUtils.quoteStringSQL(comment));\n         }\n         buff.append(\" CHECK\").append(StringUtils.enclose(expr.getSQL()))\n-                .append(\" NOCHECK\");\n+            .append(\" NOCHECK\");\n         return buff.toString();\n     }\n \n@@ -68,7 +69,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     @Override\n-    public String  getCreateSQLWithoutIndexes() {\n+    public String getCreateSQLWithoutIndexes() {\n         return getCreateSQL();\n     }\n \n@@ -86,7 +87,7 @@ public class ConstraintCheck extends Constraint {\n         table = null;\n         invalidate();\n     }\n-    \n+\n     //\u53ea\u7528\u4e8einsert\u548cupdate\n     @Override\n     public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n@@ -105,11 +106,11 @@ public class ConstraintCheck extends Constraint {\n             b = v == ValueNull.INSTANCE || v.getBoolean();\n         } catch (DbException ex) {\n             throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex,\n-                    getShortDescription());\n+                getShortDescription());\n         }\n         if (!b) {\n             throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,\n-                    getShortDescription());\n+                getShortDescription());\n         }\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/82/ConstraintCheck.java\nindex 4db44206d8..a55abfa6f3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/82/ConstraintCheck.java\n@@ -25,6 +25,8 @@ import org.h2.value.ValueNull;\n /**\n  * A check constraint.\n  */\n+\n+\n public class ConstraintCheck extends Constraint {\n \n     private TableFilter filter;\n@@ -39,10 +41,12 @@ public class ConstraintCheck extends Constraint {\n         return Constraint.Type.CHECK;\n     }\n \n+\n     public void setTableFilter(TableFilter filter) {\n         this.filter = filter;\n     }\n \n+\n     public void setExpression(Expression expr) {\n         this.expr = expr;\n     }\n@@ -58,8 +62,7 @@ public class ConstraintCheck extends Constraint {\n         if (comment != null) {\n             buff.append(\" COMMENT \").append(StringUtils.quoteStringSQL(comment));\n         }\n-        buff.append(\" CHECK\").append(StringUtils.enclose(expr.getSQL()))\n-                .append(\" NOCHECK\");\n+        buff.append(\" CHECK\").append(StringUtils.enclose(expr.getSQL())).append(\" NOCHECK\");\n         return buff.toString();\n     }\n \n@@ -68,7 +71,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     @Override\n-    public String  getCreateSQLWithoutIndexes() {\n+    public String getCreateSQLWithoutIndexes() {\n         return getCreateSQL();\n     }\n \n@@ -88,6 +91,7 @@ public class ConstraintCheck extends Constraint {\n     }\n     \n     //\u53ea\u7528\u4e8einsert\u548cupdate\n+\n     @Override\n     public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n         if (newRow == null) {\n@@ -104,12 +108,13 @@ public class ConstraintCheck extends Constraint {\n             // Both TRUE and NULL are ok\n             b = v == ValueNull.INSTANCE || v.getBoolean();\n         } catch (DbException ex) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex,\n-                    getShortDescription());\n+            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID,\n+                                  ex,\n+                                  getShortDescription());\n         }\n         if (!b) {\n             throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,\n-                    getShortDescription());\n+                                  getShortDescription());\n         }\n     }\n \n@@ -125,11 +130,12 @@ public class ConstraintCheck extends Constraint {\n \n     @Override\n     public HashSet<Column> getReferencedColumns(Table table) {\n-        HashSet<Column> columns = new HashSet<>();\n+        HashSet<Column> columns = new HashSet< >();\n         expr.isEverything(ExpressionVisitor.getColumnsVisitor(columns, table));\n         return columns;\n     }\n \n+\n     public Expression getExpression() {\n         return expr;\n     }\n@@ -140,6 +146,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n+\n     @Override\n     public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n         if (session.getDatabase().isStarting()) {\n@@ -149,7 +156,8 @@ public class ConstraintCheck extends Constraint {\n         //\u7528NOT\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\u5c31\u4e0e\u7ea6\u675f\u51b2\u7a81\u4e86\n         //\u6bd4\u5982\uff0c\u5982\u679c\u662fCHECK f1 not null\uff0c\n         //\u5982\u679c\u6b64\u65f6\u8868\u4e2d\u7684f1\u5b57\u6bb5\u5b58\u5728null\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ea6\u675f\u5c31\u521b\u5efa\u5931\u8d25\n-        String sql = \"SELECT 1 FROM \" + filter.getTable().getSQL() + \" WHERE NOT(\" + expr.getSQL() + \")\";\n+        String sql = \"SELECT 1 FROM \" + filter.getTable().getSQL() + \" WHERE NOT(\"\n+        + expr.getSQL() + \")\";\n         ResultInterface r = session.prepare(sql).query(1);\n         if (r.next()) {\n             throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1, getName());\n@@ -164,6 +172,7 @@ public class ConstraintCheck extends Constraint {\n     @Override\n     public void rebuild() {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -171,4 +180,4 @@ public class ConstraintCheck extends Constraint {\n         return expr.isEverything(visitor);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/82/ConstraintCheck.java\nindex 4db44206d8..7c48345102 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/82/ConstraintCheck.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/82/ConstraintCheck.java\n@@ -86,7 +86,7 @@ public class ConstraintCheck extends Constraint {\n         table = null;\n         invalidate();\n     }\n-    \n+\n     //\u53ea\u7528\u4e8einsert\u548cupdate\n     @Override\n     public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n@@ -140,8 +140,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n-    @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n+    @Overridepublicvoid checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n         if (session.getDatabase().isStarting()) {\n             // don't check at startup\n             return;\n",
            "diff_size": 3
        }
    ]
}