{
    "error_id": "444",
    "information": {
        "errors": [
            {
                "line": "43",
                "column": "6",
                "severity": "warning",
                "message": "',' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\n  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE\n      , DEFAULT_BEAN_NORMAL_RESOURCE};\n\n  public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/444/BeanUtils.java\nindex 0a454527ad..35d67b2257 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/444/BeanUtils.java\n@@ -39,115 +39,115 @@ public final class BeanUtils {\n \n   public static final String DEFAULT_BEAN_NORMAL_RESOURCE = \"classpath*:META-INF/spring/*.bean.xml\";\n \n-  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE\n-      , DEFAULT_BEAN_NORMAL_RESOURCE};\n+  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE,\n+      DEFAULT_BEAN_NORMAL_RESOURCE};\n \n-  public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n+public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n \n-  private static final String SCB_PACKAGE = \"org.apache.servicecomb\";\n+private static final String SCB_PACKAGE = \"org.apache.servicecomb\";\n \n-  private static ApplicationContext context;\n+private static ApplicationContext context;\n \n-  private BeanUtils() {\n-  }\n+private BeanUtils() {\n+}\n \n-  public static void init() {\n-    init(DEFAULT_BEAN_RESOURCE);\n-  }\n+public static void init() {\n+  init(DEFAULT_BEAN_RESOURCE);\n+}\n \n-  public static void init(String... configLocations) {\n-    prepareServiceCombScanPackage();\n+public static void init(String... configLocations) {\n+  prepareServiceCombScanPackage();\n+\n+  Set<String> locationSet = new LinkedHashSet<>();\n+  addBeanLocation(locationSet, DEFAULT_BEAN_RESOURCE);\n+  addBeanLocation(locationSet, configLocations);\n+  context = new ClassPathXmlApplicationContext(locationSet.toArray(new String[locationSet.size()]));\n+}\n+\n+public static void addBeanLocation(Set<String> locationSet, String... location) {\n+  Arrays.stream(location).forEach(loc -> addBeanLocation(locationSet, loc));\n+}\n \n-    Set<String> locationSet = new LinkedHashSet<>();\n-    addBeanLocation(locationSet, DEFAULT_BEAN_RESOURCE);\n-    addBeanLocation(locationSet, configLocations);\n-    context = new ClassPathXmlApplicationContext(locationSet.toArray(new String[locationSet.size()]));\n+public static void addBeanLocation(Set<String> locationSet, String location) {\n+  if (location == null) {\n+    return;\n   }\n \n-  public static void addBeanLocation(Set<String> locationSet, String... location) {\n-    Arrays.stream(location).forEach(loc -> addBeanLocation(locationSet, loc));\n+  location = location.trim();\n+  if (StringUtils.isNotEmpty(location)) {\n+    locationSet.add(location);\n   }\n+}\n \n-  public static void addBeanLocation(Set<String> locationSet, String location) {\n-    if (location == null) {\n+private static void addItem(Set<String> set, String item) {\n+  for (String it : set) {\n+    if (item.startsWith(it)) {\n       return;\n     }\n-\n-    location = location.trim();\n-    if (StringUtils.isNotEmpty(location)) {\n-      locationSet.add(location);\n-    }\n   }\n+  set.add(item);\n+}\n \n-  private static void addItem(Set<String> set, String item) {\n-    for (String it : set) {\n-      if (item.startsWith(it)) {\n-        return;\n+public static void prepareServiceCombScanPackage() {\n+  Set<String> scanPackags = new LinkedHashSet<>();\n+  // add exists settings\n+  String exists = System.getProperty(SCB_SCAN_PACKAGE);\n+  if (exists != null) {\n+    for (String exist : exists.trim().split(\",\")) {\n+      if (!exist.isEmpty()) {\n+        addItem(scanPackags, exist.trim());\n       }\n     }\n-    set.add(item);\n   }\n \n-  public static void prepareServiceCombScanPackage() {\n-    Set<String> scanPackags = new LinkedHashSet<>();\n-    // add exists settings\n-    String exists = System.getProperty(SCB_SCAN_PACKAGE);\n-    if (exists != null) {\n-      for (String exist : exists.trim().split(\",\")) {\n-        if (!exist.isEmpty()) {\n-          addItem(scanPackags, exist.trim());\n-        }\n-      }\n-    }\n-\n-    // ensure servicecomb package exist\n-    addItem(scanPackags, SCB_PACKAGE);\n+  // ensure servicecomb package exist\n+  addItem(scanPackags, SCB_PACKAGE);\n \n-    // add main class package\n-    for (Class<?> mainClass : new Class<?>[] {JvmUtils.findMainClass(), JvmUtils.findMainClassByStackTrace()}) {\n-      if (mainClass != null) {\n-        String pkg = mainClass.getPackage().getName();\n-        addItem(scanPackags, pkg);\n-      }\n+  // add main class package\n+  for (Class<?> mainClass : new Class<?>[] {JvmUtils.findMainClass(), JvmUtils.findMainClassByStackTrace()}) {\n+    if (mainClass != null) {\n+      String pkg = mainClass.getPackage().getName();\n+      addItem(scanPackags, pkg);\n     }\n-\n-    // finish\n-    String scbScanPackages = StringUtils.join(scanPackags, \",\");\n-    System.setProperty(SCB_SCAN_PACKAGE, scbScanPackages);\n-    LOGGER.info(\"Scb scan package list: \" + scbScanPackages);\n   }\n \n-  public static ApplicationContext getContext() {\n-    return context;\n-  }\n+  // finish\n+  String scbScanPackages = StringUtils.join(scanPackags, \",\");\n+  System.setProperty(SCB_SCAN_PACKAGE, scbScanPackages);\n+  LOGGER.info(\"Scb scan package list: \" + scbScanPackages);\n+}\n \n-  public static void setContext(ApplicationContext applicationContext) {\n-    context = applicationContext;\n-  }\n+public static ApplicationContext getContext() {\n+  return context;\n+}\n+\n+public static void setContext(ApplicationContext applicationContext) {\n+  context = applicationContext;\n+}\n \n-  /**\n+/**\n    * \u4e0d\u5e94\u8be5\u5728\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u9891\u7e41\u8c03\u7528\uff0c\u56e0\u4e3a\u5185\u90e8\u5fc5\u7136\u4f1a\u52a0\u4e00\u4e2a\u9501\u505a\u4e92\u65a5\uff0c\u4f1a\u5f71\u54cd\u5e76\u53d1\u5ea6\n    */\n-  @SuppressWarnings(\"unchecked\")\n-  public static <T> T getBean(String name) {\n-    return (T) context.getBean(name);\n-  }\n+@SuppressWarnings(\"unchecked\")\n+public static <T> T getBean(String name) {\n+  return (T) context.getBean(name);\n+}\n \n-  public static <T> Map<String, T> getBeansOfType(Class<T> type) {\n-    if (context == null) {\n-      // for some test case\n-      return Collections.emptyMap();\n-    }\n-    return context.getBeansOfType(type);\n+public static <T> Map<String, T> getBeansOfType(Class<T> type) {\n+  if (context == null) {\n+    // for some test case\n+    return Collections.emptyMap();\n   }\n+  return context.getBeansOfType(type);\n+}\n \n-  /**\n+/**\n    * Get the implemented class of the given instance\n    * @param bean the instance to get implemented class from\n    * @return the implemented class (if the checked class is proxied, return the ultimate target class)\n    * @see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass\n    */\n-  public static Class<?> getImplClassFromBean(Object bean) {\n-    return AopProxyUtils.ultimateTargetClass(bean);\n-  }\n+public static Class<?> getImplClassFromBean(Object bean) {\n+  return AopProxyUtils.ultimateTargetClass(bean);\n+}\n }\n",
            "diff_size": 103
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "43",
                    "column": "6",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/444/BeanUtils.java\nindex 0a454527ad..82f0676c50 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/444/BeanUtils.java\n@@ -143,6 +143,7 @@ public final class BeanUtils {\n \n   /**\n    * Get the implemented class of the given instance\n+   *\n    * @param bean the instance to get implemented class from\n    * @return the implemented class (if the checked class is proxied, return the ultimate target class)\n    * @see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/444/BeanUtils.java\nindex 0a454527ad..67a4d517bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/444/BeanUtils.java\n@@ -30,7 +30,6 @@ import org.springframework.aop.framework.AopProxyUtils;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.ClassPathXmlApplicationContext;\n \n-\n public final class BeanUtils {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(BeanUtils.class);\n@@ -39,8 +38,7 @@ public final class BeanUtils {\n \n   public static final String DEFAULT_BEAN_NORMAL_RESOURCE = \"classpath*:META-INF/spring/*.bean.xml\";\n \n-  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE\n-      , DEFAULT_BEAN_NORMAL_RESOURCE};\n+  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE, DEFAULT_BEAN_NORMAL_RESOURCE};\n \n   public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n \n@@ -150,4 +148,4 @@ public final class BeanUtils {\n   public static Class<?> getImplClassFromBean(Object bean) {\n     return AopProxyUtils.ultimateTargetClass(bean);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/444/BeanUtils.java\nindex 0a454527ad..35d67b2257 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/444/BeanUtils.java\n@@ -39,115 +39,115 @@ public final class BeanUtils {\n \n   public static final String DEFAULT_BEAN_NORMAL_RESOURCE = \"classpath*:META-INF/spring/*.bean.xml\";\n \n-  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE\n-      , DEFAULT_BEAN_NORMAL_RESOURCE};\n+  public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE,\n+      DEFAULT_BEAN_NORMAL_RESOURCE};\n \n-  public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n+public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n \n-  private static final String SCB_PACKAGE = \"org.apache.servicecomb\";\n+private static final String SCB_PACKAGE = \"org.apache.servicecomb\";\n \n-  private static ApplicationContext context;\n+private static ApplicationContext context;\n \n-  private BeanUtils() {\n-  }\n+private BeanUtils() {\n+}\n \n-  public static void init() {\n-    init(DEFAULT_BEAN_RESOURCE);\n-  }\n+public static void init() {\n+  init(DEFAULT_BEAN_RESOURCE);\n+}\n \n-  public static void init(String... configLocations) {\n-    prepareServiceCombScanPackage();\n+public static void init(String... configLocations) {\n+  prepareServiceCombScanPackage();\n+\n+  Set<String> locationSet = new LinkedHashSet<>();\n+  addBeanLocation(locationSet, DEFAULT_BEAN_RESOURCE);\n+  addBeanLocation(locationSet, configLocations);\n+  context = new ClassPathXmlApplicationContext(locationSet.toArray(new String[locationSet.size()]));\n+}\n+\n+public static void addBeanLocation(Set<String> locationSet, String... location) {\n+  Arrays.stream(location).forEach(loc -> addBeanLocation(locationSet, loc));\n+}\n \n-    Set<String> locationSet = new LinkedHashSet<>();\n-    addBeanLocation(locationSet, DEFAULT_BEAN_RESOURCE);\n-    addBeanLocation(locationSet, configLocations);\n-    context = new ClassPathXmlApplicationContext(locationSet.toArray(new String[locationSet.size()]));\n+public static void addBeanLocation(Set<String> locationSet, String location) {\n+  if (location == null) {\n+    return;\n   }\n \n-  public static void addBeanLocation(Set<String> locationSet, String... location) {\n-    Arrays.stream(location).forEach(loc -> addBeanLocation(locationSet, loc));\n+  location = location.trim();\n+  if (StringUtils.isNotEmpty(location)) {\n+    locationSet.add(location);\n   }\n+}\n \n-  public static void addBeanLocation(Set<String> locationSet, String location) {\n-    if (location == null) {\n+private static void addItem(Set<String> set, String item) {\n+  for (String it : set) {\n+    if (item.startsWith(it)) {\n       return;\n     }\n-\n-    location = location.trim();\n-    if (StringUtils.isNotEmpty(location)) {\n-      locationSet.add(location);\n-    }\n   }\n+  set.add(item);\n+}\n \n-  private static void addItem(Set<String> set, String item) {\n-    for (String it : set) {\n-      if (item.startsWith(it)) {\n-        return;\n+public static void prepareServiceCombScanPackage() {\n+  Set<String> scanPackags = new LinkedHashSet<>();\n+  // add exists settings\n+  String exists = System.getProperty(SCB_SCAN_PACKAGE);\n+  if (exists != null) {\n+    for (String exist : exists.trim().split(\",\")) {\n+      if (!exist.isEmpty()) {\n+        addItem(scanPackags, exist.trim());\n       }\n     }\n-    set.add(item);\n   }\n \n-  public static void prepareServiceCombScanPackage() {\n-    Set<String> scanPackags = new LinkedHashSet<>();\n-    // add exists settings\n-    String exists = System.getProperty(SCB_SCAN_PACKAGE);\n-    if (exists != null) {\n-      for (String exist : exists.trim().split(\",\")) {\n-        if (!exist.isEmpty()) {\n-          addItem(scanPackags, exist.trim());\n-        }\n-      }\n-    }\n-\n-    // ensure servicecomb package exist\n-    addItem(scanPackags, SCB_PACKAGE);\n+  // ensure servicecomb package exist\n+  addItem(scanPackags, SCB_PACKAGE);\n \n-    // add main class package\n-    for (Class<?> mainClass : new Class<?>[] {JvmUtils.findMainClass(), JvmUtils.findMainClassByStackTrace()}) {\n-      if (mainClass != null) {\n-        String pkg = mainClass.getPackage().getName();\n-        addItem(scanPackags, pkg);\n-      }\n+  // add main class package\n+  for (Class<?> mainClass : new Class<?>[] {JvmUtils.findMainClass(), JvmUtils.findMainClassByStackTrace()}) {\n+    if (mainClass != null) {\n+      String pkg = mainClass.getPackage().getName();\n+      addItem(scanPackags, pkg);\n     }\n-\n-    // finish\n-    String scbScanPackages = StringUtils.join(scanPackags, \",\");\n-    System.setProperty(SCB_SCAN_PACKAGE, scbScanPackages);\n-    LOGGER.info(\"Scb scan package list: \" + scbScanPackages);\n   }\n \n-  public static ApplicationContext getContext() {\n-    return context;\n-  }\n+  // finish\n+  String scbScanPackages = StringUtils.join(scanPackags, \",\");\n+  System.setProperty(SCB_SCAN_PACKAGE, scbScanPackages);\n+  LOGGER.info(\"Scb scan package list: \" + scbScanPackages);\n+}\n \n-  public static void setContext(ApplicationContext applicationContext) {\n-    context = applicationContext;\n-  }\n+public static ApplicationContext getContext() {\n+  return context;\n+}\n+\n+public static void setContext(ApplicationContext applicationContext) {\n+  context = applicationContext;\n+}\n \n-  /**\n+/**\n    * \u4e0d\u5e94\u8be5\u5728\u4e1a\u52a1\u6d41\u7a0b\u4e2d\u9891\u7e41\u8c03\u7528\uff0c\u56e0\u4e3a\u5185\u90e8\u5fc5\u7136\u4f1a\u52a0\u4e00\u4e2a\u9501\u505a\u4e92\u65a5\uff0c\u4f1a\u5f71\u54cd\u5e76\u53d1\u5ea6\n    */\n-  @SuppressWarnings(\"unchecked\")\n-  public static <T> T getBean(String name) {\n-    return (T) context.getBean(name);\n-  }\n+@SuppressWarnings(\"unchecked\")\n+public static <T> T getBean(String name) {\n+  return (T) context.getBean(name);\n+}\n \n-  public static <T> Map<String, T> getBeansOfType(Class<T> type) {\n-    if (context == null) {\n-      // for some test case\n-      return Collections.emptyMap();\n-    }\n-    return context.getBeansOfType(type);\n+public static <T> Map<String, T> getBeansOfType(Class<T> type) {\n+  if (context == null) {\n+    // for some test case\n+    return Collections.emptyMap();\n   }\n+  return context.getBeansOfType(type);\n+}\n \n-  /**\n+/**\n    * Get the implemented class of the given instance\n    * @param bean the instance to get implemented class from\n    * @return the implemented class (if the checked class is proxied, return the ultimate target class)\n    * @see org.springframework.aop.framework.AopProxyUtils#ultimateTargetClass\n    */\n-  public static Class<?> getImplClassFromBean(Object bean) {\n-    return AopProxyUtils.ultimateTargetClass(bean);\n-  }\n+public static Class<?> getImplClassFromBean(Object bean) {\n+  return AopProxyUtils.ultimateTargetClass(bean);\n+}\n }\n",
            "diff_size": 103
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "2",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/444/BeanUtils.java\nindex 0a454527ad..fbd0f7adb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/444/BeanUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/444/BeanUtils.java\n@@ -40,7 +40,7 @@ public final class BeanUtils {\n   public static final String DEFAULT_BEAN_NORMAL_RESOURCE = \"classpath*:META-INF/spring/*.bean.xml\";\n \n   public static final String[] DEFAULT_BEAN_RESOURCE = new String[] {DEFAULT_BEAN_CORE_RESOURCE\n-      , DEFAULT_BEAN_NORMAL_RESOURCE};\n+  , DEFAULT_BEAN_NORMAL_RESOURCE};\n \n   public static final String SCB_SCAN_PACKAGE = \"scb-scan-package\";\n \n",
            "diff_size": 1
        }
    ]
}