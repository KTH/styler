{
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "327",
                "severity": "warning",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\t * @param value the next value\n\t */\n\tpublic default void _setAllowedDischargePower(int value) {\n\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "327",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/82/ManagedSymmetricEss.java\nindex 23e77658d5..e81aec2410 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/82/ManagedSymmetricEss.java\n@@ -279,7 +279,7 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \tpublic default void _setAllowedChargePower(Integer value) {\n \t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n \t}\n-\t\n+\n \t/**\n \t * Internal method to set the 'nextValue' on\n \t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/82/ManagedSymmetricEss.java\nindex 23e77658d5..dd4a6a9607 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/82/ManagedSymmetricEss.java\n@@ -27,570 +27,571 @@ import io.openems.edge.ess.power.api.Relationship;\n @ProviderType\n public interface ManagedSymmetricEss extends SymmetricEss {\n \n-\tpublic enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n-\t\t/**\n-\t\t * Holds the currently maximum allowed charge power. This value is commonly\n-\t\t * defined by current battery limitations.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: zero or negative value\n-\t\t * </ul>\n-\t\t */\n-\t\tALLOWED_CHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Holds the currently maximum allowed discharge power. This value is commonly\n-\t\t * defined by current battery limitations.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: zero or positive value\n-\t\t * </ul>\n-\t\t */\n-\t\tALLOWED_DISCHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Sets a fixed Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS))), //\n-\t\t/**\n-\t\t * Applies the PID filter and then sets a fixed Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_EQUALS_WITH_PID(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerEqualsWithPid\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS) {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void accept(Channel<Integer> channel) {\n-\t\t\t\t\t\t((IntegerWriteChannel) channel).onSetNextWrite(value -> {\n-\t\t\t\t\t\t\tif (value != null) {\n-\t\t\t\t\t\t\t\tManagedSymmetricEss ess = (ManagedSymmetricEss) channel.getComponent();\n-\t\t\t\t\t\t\t\tPower power = ess.getPower();\n-\t\t\t\t\t\t\t\tPidFilter pidFilter = power.getPidFilter();\n-\n-\t\t\t\t\t\t\t\t// configure PID filter\n-\t\t\t\t\t\t\t\tint minPower = power.getMinPower(ess, Phase.ALL, Pwr.ACTIVE);\n-\t\t\t\t\t\t\t\tint maxPower = power.getMaxPower(ess, Phase.ALL, Pwr.ACTIVE);\n-\t\t\t\t\t\t\t\tpidFilter.setLimits(minPower, maxPower);\n-\n-\t\t\t\t\t\t\t\tint currentActivePower = ess.getActivePower().orElse(0);\n-\t\t\t\t\t\t\t\tint pidOutput = pidFilter.applyPidFilter(currentActivePower, value);\n-\n-\t\t\t\t\t\t\t\tess.setActivePowerEquals(pidOutput);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t});\n-\t\t\t\t\t}\n-\t\t\t\t})), //\n-\t\t/**\n-\t\t * Sets a fixed Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE_REACTIVE) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed maximum Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerLessOrEquals\", Phase.ALL, Pwr.ACTIVE,\n-\t\t\t\t\t\tRelationship.LESS_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed minimum Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerGreaterOrEquals\", Phase.ALL, Pwr.ACTIVE,\n-\t\t\t\t\t\tRelationship.GREATER_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed maximum Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerLessOrEquals\", Phase.ALL, Pwr.REACTIVE,\n-\t\t\t\t\t\tRelationship.LESS_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed minimum Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerGreaterOrEquals\", Phase.ALL, Pwr.REACTIVE,\n-\t\t\t\t\t\tRelationship.GREATER_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Holds settings of Active Power for debugging.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * <li>Implementation Note: value is automatically written by {@link Power} just\n-\t\t * before it calls the onWriteListener (which writes the value to the Ess)\n-\t\t * </ul>\n-\t\t */\n-\t\tDEBUG_SET_ACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Holds settings of Reactive Power for debugging.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * <li>Implementation Note: value is automatically written by {@link Power} just\n-\t\t * just before it calls the onWriteListener (which writes the value to the Ess)\n-\t\t * </ul>\n-\t\t */\n-\t\tDEBUG_SET_REACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE_REACTIVE)), //\n-\t\t/**\n-\t\t * StateChannel is set when calling applyPower() failed.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: StateChannel\n-\t\t * <li>Implementation Note: value is automatically written by\n-\t\t * {@link Power}-Solver if {@link ManagedAsymmetricEss#applyPower(int, int)}\n-\t\t * failed.\n-\t\t * </ul>\n-\t\t */\n-\t\tAPPLY_POWER_FAILED(Doc.of(Level.FAULT) //\n-\t\t\t\t.text(\"Applying the Active/Reactive Power failed\"));\n-\n-\t\tprivate final Doc doc;\n-\n-\t\tprivate ChannelId(Doc doc) {\n-\t\t\tthis.doc = doc;\n-\t\t}\n-\n-\t\tpublic Doc doc() {\n-\t\t\treturn this.doc;\n-\t\t}\n-\t}\n-\n-\tpublic static ModbusSlaveNatureTable getModbusSlaveNatureTable(AccessMode accessMode) {\n-\t\treturn ModbusSlaveNatureTable.of(ManagedSymmetricEss.class, accessMode, 100) //\n-\t\t\t\t.channel(0, ChannelId.ALLOWED_CHARGE_POWER, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(2, ChannelId.ALLOWED_DISCHARGE_POWER, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(4, ChannelId.SET_ACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(6, ChannelId.SET_REACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(8, ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(10, ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(12, ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(14, ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.build();\n-\t}\n-\n-\t/**\n-\t * Gets an instance of the 'Power' class, which allows to set limitations to\n-\t * Active and Reactive Power.\n-\t * \n-\t * @return the Power instance\n-\t */\n-\tpublic Power getPower();\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#ALLOWED_CHARGE_POWER}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerReadChannel getAllowedChargePowerChannel() {\n-\t\treturn this.channel(ChannelId.ALLOWED_CHARGE_POWER);\n-\t}\n-\n-\t/**\n-\t * Gets the Allowed Charge Power in [W], range \"&lt;= 0\". See\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Integer> getAllowedChargePower() {\n-\t\treturn this.getAllowedChargePowerChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedChargePower(Integer value) {\n-\t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n-\t}\n-\t\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedChargePower(int value) {\n-\t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerReadChannel getAllowedDischargePowerChannel() {\n-\t\treturn this.channel(ChannelId.ALLOWED_DISCHARGE_POWER);\n-\t}\n-\n-\t/**\n-\t * Gets the Allowed Discharge Power in [W], range \"&lt;= 0\". See\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Integer> getAllowedDischargePower() {\n-\t\treturn this.getAllowedDischargePowerChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedDischargePower(Integer value) {\n-\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n-\t}\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedDischargePower(int value) {\n-\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Equals setpoint in [W]. Negative values for Charge;\n-\t * positive for Discharge. See {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerEqualsWithPidChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS_WITH_PID);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Equals setpoint in [W] with applied PID filter. Negative\n-\t * values for Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerEqualsWithPid(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerEqualsWithPidChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerLessOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Less Or Equals setpoint in [W]. Negative values for\n-\t * Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerLessOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerGreaterOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Greater Or Equals setpoint in [W]. Negative values for\n-\t * Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerLessOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Less Or Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerLessOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerGreaterOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Greater Or Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#APPLY_POWER_FAILED}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default StateChannel getApplyPowerFailedChannel() {\n-\t\treturn this.channel(ChannelId.APPLY_POWER_FAILED);\n-\t}\n-\n-\t/**\n-\t * Gets the Apply Power Failed State. See {@link ChannelId#APPLY_POWER_FAILED}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Boolean> getApplyPowerFailed() {\n-\t\treturn this.getApplyPowerFailedChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#APPLY_POWER_FAILED} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setApplyPowerFailed(boolean value) {\n-\t\tthis.getApplyPowerFailedChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Apply the calculated Power.\n-\t * \n-\t * <p>\n-\t * Careful: do not adjust activePower and reactivePower in this method, e.g.\n-\t * setting it to zero on error. The purpose of this method is solely to apply\n-\t * the calculated power to the ESS. If you need to constrain the allowed power,\n-\t * add Constraints using the {@link #getStaticConstraints()} method.\n-\t * \n-\t * @param activePower   the active power in [W]\n-\t * @param reactivePower the reactive power in [var]\n-\t * @throws OpenemsNamedException on error; causes activation of\n-\t *                               APPLY_POWER_FAILED StateChannel\n-\t */\n-\tpublic void applyPower(int activePower, int reactivePower) throws OpenemsNamedException;\n-\n-\t/**\n-\t * Gets the smallest positive power that can be set (in W, VA or var). Example:\n-\t * <ul>\n-\t * <li>FENECON Commercial 40 allows setting of power in 100 W steps. It should\n-\t * return 100.\n-\t * <li>KACO blueplanet gridsave 50 allows setting of power in 0.1 % of 52 VA. It\n-\t * should return 52 (= 52000 * 0.001)\n-\t * </ul>\n-\t * \n-\t * @return the power precision\n-\t */\n-\tpublic int getPowerPrecision();\n-\n-\t/**\n-\t * Gets static Constraints for this Ess. Override this method to provide\n-\t * specific Constraints for this Ess on every Cycle.\n-\t * \n-\t * @return the Constraints\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint[] getStaticConstraints() throws OpenemsNamedException {\n-\t\treturn Power.NO_CONSTRAINTS;\n-\t}\n-\n-\t/**\n-\t * Creates a Power Constraint.\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint createPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n-\t\t\tdouble value) throws OpenemsException {\n-\t\treturn this.getPower().createSimpleConstraint(description, this, phase, pwr, relationship, value);\n-\t}\n-\n-\t/**\n-\t * Adds a Power Constraint for the current Cycle.\n-\t * \n-\t * <p>\n-\t * To add a Constraint on every Cycle, use getStaticConstraints()\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint addPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n-\t\t\tdouble value) throws OpenemsException {\n-\t\treturn this.getPower().addConstraint(this.createPowerConstraint(description, phase, pwr, relationship, value));\n-\t}\n-\n-\t/**\n-\t * Adds a Power Constraint for the current Cycle.\n-\t * \n-\t * <p>\n-\t * To add a Constraint on every Cycle, use getStaticConstraints()\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint addPowerConstraintAndValidate(String description, Phase phase, Pwr pwr,\n-\t\t\tRelationship relationship, double value) throws OpenemsException {\n-\t\treturn this.getPower()\n-\t\t\t\t.addConstraintAndValidate(this.createPowerConstraint(description, phase, pwr, relationship, value));\n-\t}\n+  public enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n+    /**\n+     * Holds the currently maximum allowed charge power. This value is commonly\n+     * defined by current battery limitations.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: zero or negative value\n+     * </ul>\n+     */\n+    ALLOWED_CHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n+        .unit(Unit.WATT)), //\n+    /**\n+     * Holds the currently maximum allowed discharge power. This value is commonly\n+     * defined by current battery limitations.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: zero or positive value\n+     * </ul>\n+     */\n+    ALLOWED_DISCHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n+        .unit(Unit.WATT)), //\n+    /**\n+     * Sets a fixed Active Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_ACTIVE_POWER_EQUALS(new IntegerDoc() //\n+        .unit(Unit.WATT) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetActivePowerEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS))), //\n+    /**\n+     * Applies the PID filter and then sets a fixed Active Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_ACTIVE_POWER_EQUALS_WITH_PID(new IntegerDoc() //\n+        .unit(Unit.WATT) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetActivePowerEqualsWithPid\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS) {\n+          @Override\n+          public void accept(Channel<Integer> channel) {\n+            ((IntegerWriteChannel) channel).onSetNextWrite(value -> {\n+              if (value != null) {\n+                ManagedSymmetricEss ess = (ManagedSymmetricEss) channel.getComponent();\n+                Power power = ess.getPower();\n+                PidFilter pidFilter = power.getPidFilter();\n+\n+                // configure PID filter\n+                int minPower = power.getMinPower(ess, Phase.ALL, Pwr.ACTIVE);\n+                int maxPower = power.getMaxPower(ess, Phase.ALL, Pwr.ACTIVE);\n+                pidFilter.setLimits(minPower, maxPower);\n+\n+                int currentActivePower = ess.getActivePower().orElse(0);\n+                int pidOutput = pidFilter.applyPidFilter(currentActivePower, value);\n+\n+                ess.setActivePowerEquals(pidOutput);\n+              }\n+            });\n+          }\n+        })), //\n+    /**\n+     * Sets a fixed Reactive Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: var\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_REACTIVE_POWER_EQUALS(new IntegerDoc() //\n+        .unit(Unit.VOLT_AMPERE_REACTIVE) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetReactivePowerEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS))), //\n+    /**\n+     * Sets a fixed maximum Active Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_ACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n+        .unit(Unit.WATT) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetActivePowerLessOrEquals\", Phase.ALL, Pwr.ACTIVE,\n+            Relationship.LESS_OR_EQUALS))), //\n+    /**\n+     * Sets a fixed minimum Active Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_ACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n+        .unit(Unit.WATT) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetActivePowerGreaterOrEquals\", Phase.ALL, Pwr.ACTIVE,\n+            Relationship.GREATER_OR_EQUALS))), //\n+    /**\n+     * Sets a fixed maximum Reactive Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: var\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_REACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n+        .unit(Unit.VOLT_AMPERE) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetReactivePowerLessOrEquals\", Phase.ALL, Pwr.REACTIVE,\n+            Relationship.LESS_OR_EQUALS))), //\n+    /**\n+     * Sets a fixed minimum Reactive Power.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: var\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * </ul>\n+     */\n+    SET_REACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n+        .unit(Unit.WATT) //\n+        .accessMode(AccessMode.WRITE_ONLY) //\n+        .onInit(new PowerConstraint(\"SetReactivePowerGreaterOrEquals\", Phase.ALL, Pwr.REACTIVE,\n+            Relationship.GREATER_OR_EQUALS))), //\n+    /**\n+     * Holds settings of Active Power for debugging.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: W\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * <li>Implementation Note: value is automatically written by {@link Power} just\n+     * before it calls the onWriteListener (which writes the value to the Ess)\n+     * </ul>\n+     */\n+    DEBUG_SET_ACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n+        .unit(Unit.WATT)), //\n+    /**\n+     * Holds settings of Reactive Power for debugging.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: Integer\n+     * <li>Unit: var\n+     * <li>Range: negative values for Charge; positive for Discharge\n+     * <li>Implementation Note: value is automatically written by {@link Power} just\n+     * just before it calls the onWriteListener (which writes the value to the Ess)\n+     * </ul>\n+     */\n+    DEBUG_SET_REACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n+        .unit(Unit.VOLT_AMPERE_REACTIVE)), //\n+    /**\n+     * StateChannel is set when calling applyPower() failed.\n+     *\n+     * <ul>\n+     * <li>Interface: Managed Symmetric Ess\n+     * <li>Type: StateChannel\n+     * <li>Implementation Note: value is automatically written by\n+     * {@link Power}-Solver if {@link ManagedAsymmetricEss#applyPower(int, int)}\n+     * failed.\n+     * </ul>\n+     */\n+    APPLY_POWER_FAILED(Doc.of(Level.FAULT) //\n+        .text(\"Applying the Active/Reactive Power failed\"));\n+\n+    private final Doc doc;\n+\n+    private ChannelId(Doc doc) {\n+      this.doc = doc;\n+    }\n+\n+    public Doc doc() {\n+      return this.doc;\n+    }\n+  }\n+\n+  public static ModbusSlaveNatureTable getModbusSlaveNatureTable(AccessMode accessMode) {\n+    return ModbusSlaveNatureTable.of(ManagedSymmetricEss.class, accessMode, 100) //\n+        .channel(0, ChannelId.ALLOWED_CHARGE_POWER, ModbusType.FLOAT32) //\n+        .channel(2, ChannelId.ALLOWED_DISCHARGE_POWER, ModbusType.FLOAT32) //\n+        .channel(4, ChannelId.SET_ACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n+        .channel(6, ChannelId.SET_REACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n+        .channel(8, ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n+        .channel(10, ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n+        .channel(12, ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n+        .channel(14, ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n+        .build();\n+  }\n+\n+  /**\n+   * Gets an instance of the 'Power' class, which allows to set limitations to\n+   * Active and Reactive Power.\n+   *\n+   * @return the Power instance\n+   */\n+  public Power getPower();\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#ALLOWED_CHARGE_POWER}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerReadChannel getAllowedChargePowerChannel() {\n+    return this.channel(ChannelId.ALLOWED_CHARGE_POWER);\n+  }\n+\n+  /**\n+   * Gets the Allowed Charge Power in [W], range \"&lt;= 0\". See\n+   * {@link ChannelId#ALLOWED_CHARGE_POWER}.\n+   *\n+   * @return the Channel {@link Value}\n+   */\n+  public default Value<Integer> getAllowedChargePower() {\n+    return this.getAllowedChargePowerChannel().value();\n+  }\n+\n+  /**\n+   * Internal method to set the 'nextValue' on\n+   * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n+   *\n+   * @param value the next value\n+   */\n+  public default void _setAllowedChargePower(Integer value) {\n+    this.getAllowedChargePowerChannel().setNextValue(value);\n+  }\n+\n+  /**\n+   * Internal method to set the 'nextValue' on\n+   * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n+   *\n+   * @param value the next value\n+   */\n+  public default void _setAllowedChargePower(int value) {\n+    this.getAllowedChargePowerChannel().setNextValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerReadChannel getAllowedDischargePowerChannel() {\n+    return this.channel(ChannelId.ALLOWED_DISCHARGE_POWER);\n+  }\n+\n+  /**\n+   * Gets the Allowed Discharge Power in [W], range \"&lt;= 0\". See\n+   * {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n+   *\n+   * @return the Channel {@link Value}\n+   */\n+  public default Value<Integer> getAllowedDischargePower() {\n+    return this.getAllowedDischargePowerChannel().value();\n+  }\n+\n+  /**\n+   * Internal method to set the 'nextValue' on\n+   * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n+   *\n+   * @param value the next value\n+   */\n+  public default void _setAllowedDischargePower(Integer value) {\n+    this.getAllowedDischargePowerChannel().setNextValue(value);\n+  }\n+\n+  /**\n+   * Internal method to set the 'nextValue' on\n+   * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n+   *\n+   * @param value the next value\n+   */\n+  public default void _setAllowedDischargePower(int value) {\n+    this.getAllowedDischargePowerChannel().setNextValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetActivePowerEqualsChannel() {\n+    return this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS);\n+  }\n+\n+  /**\n+   * Sets an Active Power Equals setpoint in [W]. Negative values for Charge;\n+   * positive for Discharge. See {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setActivePowerEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetActivePowerEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetActivePowerEqualsWithPidChannel() {\n+    return this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS_WITH_PID);\n+  }\n+\n+  /**\n+   * Sets an Active Power Equals setpoint in [W] with applied PID filter. Negative\n+   * values for Charge; positive for Discharge. See\n+   * {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setActivePowerEqualsWithPid(Integer value) throws OpenemsNamedException {\n+    this.getSetActivePowerEqualsWithPidChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetReactivePowerEqualsChannel() {\n+    return this.channel(ChannelId.SET_REACTIVE_POWER_EQUALS);\n+  }\n+\n+  /**\n+   * Sets a Reactive Power Equals setpoint in [var]. See\n+   * {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setReactivePowerEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetReactivePowerEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetActivePowerLessOrEqualsChannel() {\n+    return this.channel(ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS);\n+  }\n+\n+  /**\n+   * Sets an Active Power Less Or Equals setpoint in [W]. Negative values for\n+   * Charge; positive for Discharge. See\n+   * {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setActivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetActivePowerLessOrEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetActivePowerGreaterOrEqualsChannel() {\n+    return this.channel(ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS);\n+  }\n+\n+  /**\n+   * Sets an Active Power Greater Or Equals setpoint in [W]. Negative values for\n+   * Charge; positive for Discharge. See\n+   * {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setActivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetActivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetReactivePowerLessOrEqualsChannel() {\n+    return this.channel(ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS);\n+  }\n+\n+  /**\n+   * Sets a Reactive Power Less Or Equals setpoint in [var]. See\n+   * {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setReactivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetReactivePowerLessOrEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n+   *\n+   * @return the Channel\n+   */\n+  public default IntegerWriteChannel getSetReactivePowerGreaterOrEqualsChannel() {\n+    return this.channel(ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS);\n+  }\n+\n+  /**\n+   * Sets a Reactive Power Greater Or Equals setpoint in [var]. See\n+   * {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n+   *\n+   * @param value the next write value\n+   * @throws OpenemsNamedException on error\n+   */\n+  public default void setReactivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n+    this.getSetReactivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n+  }\n+\n+  /**\n+   * Gets the Channel for {@link ChannelId#APPLY_POWER_FAILED}.\n+   *\n+   * @return the Channel\n+   */\n+  public default StateChannel getApplyPowerFailedChannel() {\n+    return this.channel(ChannelId.APPLY_POWER_FAILED);\n+  }\n+\n+  /**\n+   * Gets the Apply Power Failed State. See {@link ChannelId#APPLY_POWER_FAILED}.\n+   *\n+   * @return the Channel {@link Value}\n+   */\n+  public default Value<Boolean> getApplyPowerFailed() {\n+    return this.getApplyPowerFailedChannel().value();\n+  }\n+\n+  /**\n+   * Internal method to set the 'nextValue' on\n+   * {@link ChannelId#APPLY_POWER_FAILED} Channel.\n+   *\n+   * @param value the next value\n+   */\n+  public default void _setApplyPowerFailed(boolean value) {\n+    this.getApplyPowerFailedChannel().setNextValue(value);\n+  }\n+\n+  /**\n+   * Apply the calculated Power.\n+   *\n+   * <p>\n+   * Careful: do not adjust activePower and reactivePower in this method, e.g.\n+   * setting it to zero on error. The purpose of this method is solely to apply\n+   * the calculated power to the ESS. If you need to constrain the allowed power,\n+   * add Constraints using the {@link #getStaticConstraints()} method.\n+   *\n+   * @param activePower   the active power in [W]\n+   * @param reactivePower the reactive power in [var]\n+   * @throws OpenemsNamedException on error; causes activation of\n+   *                               APPLY_POWER_FAILED StateChannel\n+   */\n+  public void applyPower(int activePower, int reactivePower) throws OpenemsNamedException;\n+\n+  /**\n+   * Gets the smallest positive power that can be set (in W, VA or var). Example:\n+   * <ul>\n+   * <li>FENECON Commercial 40 allows setting of power in 100 W steps. It should\n+   * return 100.\n+   * <li>KACO blueplanet gridsave 50 allows setting of power in 0.1 % of 52 VA. It\n+   * should return 52 (= 52000 * 0.001)\n+   * </ul>\n+   *\n+   * @return the power precision\n+   */\n+  public int getPowerPrecision();\n+\n+  /**\n+   * Gets static Constraints for this Ess. Override this method to provide\n+   * specific Constraints for this Ess on every Cycle.\n+   *\n+   * @return the Constraints\n+   * @throws OpenemsException on error\n+   */\n+  public default Constraint[] getStaticConstraints() throws OpenemsNamedException {\n+    return Power.NO_CONSTRAINTS;\n+  }\n+\n+  /**\n+   * Creates a Power Constraint.\n+   *\n+   * @param description  a description for the Constraint\n+   * @param phase        the affected power phase\n+   * @param pwr          Active or Reactive power\n+   * @param relationship equals, less-than or greater-than\n+   * @param value        the function value\n+   * @return the Constraint\n+   * @throws OpenemsException on error\n+   */\n+  public default Constraint createPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n+                                                  double value) throws OpenemsException {\n+    return this.getPower().createSimpleConstraint(description, this, phase, pwr, relationship, value);\n+  }\n+\n+  /**\n+   * Adds a Power Constraint for the current Cycle.\n+   *\n+   * <p>\n+   * To add a Constraint on every Cycle, use getStaticConstraints()\n+   *\n+   * @param description  a description for the Constraint\n+   * @param phase        the affected power phase\n+   * @param pwr          Active or Reactive power\n+   * @param relationship equals, less-than or greater-than\n+   * @param value        the function value\n+   * @return the Constraint\n+   * @throws OpenemsException on error\n+   */\n+  public default Constraint addPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n+                                               double value) throws OpenemsException {\n+    return this.getPower().addConstraint(this.createPowerConstraint(description, phase, pwr, relationship, value));\n+  }\n+\n+  /**\n+   * Adds a Power Constraint for the current Cycle.\n+   *\n+   * <p>\n+   * To add a Constraint on every Cycle, use getStaticConstraints()\n+   *\n+   * @param description  a description for the Constraint\n+   * @param phase        the affected power phase\n+   * @param pwr          Active or Reactive power\n+   * @param relationship equals, less-than or greater-than\n+   * @param value        the function value\n+   * @return the Constraint\n+   * @throws OpenemsException on error\n+   */\n+  public default Constraint addPowerConstraintAndValidate(String description, Phase phase, Pwr pwr,\n+                                                          Relationship relationship, double value) throws OpenemsException {\n+    return this.getPower()\n+        .addConstraintAndValidate(this.createPowerConstraint(description, phase, pwr, relationship, value));\n+  }\n }\n",
            "diff_size": 567
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "322",
                    "column": "1",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 1, indentation should be the same level as line 328.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/82/ManagedSymmetricEss.java\nindex 23e77658d5..9517428b45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/82/ManagedSymmetricEss.java\n@@ -318,7 +318,8 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \tpublic default void _setAllowedDischargePower(Integer value) {\n \t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n \t}\n-\t/**\n+\n+/**\n \t * Internal method to set the 'nextValue' on\n \t * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n \t *\n@@ -593,4 +594,4 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \t\treturn this.getPower()\n \t\t\t\t.addConstraintAndValidate(this.createPowerConstraint(description, phase, pwr, relationship, value));\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "95",
                    "column": "33",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 32, expected is 57, indentation should be the same level as line 96.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/codebuff/82/ManagedSymmetricEss.java\nindex 23e77658d5..4a0446c839 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/codebuff/82/ManagedSymmetricEss.java\n@@ -1,7 +1,6 @@\n package io.openems.edge.ess.api;\n \n import org.osgi.annotation.versioning.ProviderType;\n-\n import io.openems.common.channel.AccessMode;\n import io.openems.common.channel.Level;\n import io.openems.common.channel.Unit;\n@@ -27,570 +26,616 @@ import io.openems.edge.ess.power.api.Relationship;\n @ProviderType\n public interface ManagedSymmetricEss extends SymmetricEss {\n \n-\tpublic enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n-\t\t/**\n-\t\t * Holds the currently maximum allowed charge power. This value is commonly\n-\t\t * defined by current battery limitations.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: zero or negative value\n-\t\t * </ul>\n-\t\t */\n-\t\tALLOWED_CHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Holds the currently maximum allowed discharge power. This value is commonly\n-\t\t * defined by current battery limitations.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: zero or positive value\n-\t\t * </ul>\n-\t\t */\n-\t\tALLOWED_DISCHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Sets a fixed Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS))), //\n-\t\t/**\n-\t\t * Applies the PID filter and then sets a fixed Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_EQUALS_WITH_PID(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerEqualsWithPid\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS) {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void accept(Channel<Integer> channel) {\n-\t\t\t\t\t\t((IntegerWriteChannel) channel).onSetNextWrite(value -> {\n-\t\t\t\t\t\t\tif (value != null) {\n-\t\t\t\t\t\t\t\tManagedSymmetricEss ess = (ManagedSymmetricEss) channel.getComponent();\n-\t\t\t\t\t\t\t\tPower power = ess.getPower();\n-\t\t\t\t\t\t\t\tPidFilter pidFilter = power.getPidFilter();\n-\n-\t\t\t\t\t\t\t\t// configure PID filter\n-\t\t\t\t\t\t\t\tint minPower = power.getMinPower(ess, Phase.ALL, Pwr.ACTIVE);\n-\t\t\t\t\t\t\t\tint maxPower = power.getMaxPower(ess, Phase.ALL, Pwr.ACTIVE);\n-\t\t\t\t\t\t\t\tpidFilter.setLimits(minPower, maxPower);\n-\n-\t\t\t\t\t\t\t\tint currentActivePower = ess.getActivePower().orElse(0);\n-\t\t\t\t\t\t\t\tint pidOutput = pidFilter.applyPidFilter(currentActivePower, value);\n-\n-\t\t\t\t\t\t\t\tess.setActivePowerEquals(pidOutput);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t});\n-\t\t\t\t\t}\n-\t\t\t\t})), //\n-\t\t/**\n-\t\t * Sets a fixed Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE_REACTIVE) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed maximum Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerLessOrEquals\", Phase.ALL, Pwr.ACTIVE,\n-\t\t\t\t\t\tRelationship.LESS_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed minimum Active Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_ACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetActivePowerGreaterOrEquals\", Phase.ALL, Pwr.ACTIVE,\n-\t\t\t\t\t\tRelationship.GREATER_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed maximum Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerLessOrEquals\", Phase.ALL, Pwr.REACTIVE,\n-\t\t\t\t\t\tRelationship.LESS_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Sets a fixed minimum Reactive Power.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * </ul>\n-\t\t */\n-\t\tSET_REACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n-\t\t\t\t.unit(Unit.WATT) //\n-\t\t\t\t.accessMode(AccessMode.WRITE_ONLY) //\n-\t\t\t\t.onInit(new PowerConstraint(\"SetReactivePowerGreaterOrEquals\", Phase.ALL, Pwr.REACTIVE,\n-\t\t\t\t\t\tRelationship.GREATER_OR_EQUALS))), //\n-\t\t/**\n-\t\t * Holds settings of Active Power for debugging.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: W\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * <li>Implementation Note: value is automatically written by {@link Power} just\n-\t\t * before it calls the onWriteListener (which writes the value to the Ess)\n-\t\t * </ul>\n-\t\t */\n-\t\tDEBUG_SET_ACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.WATT)), //\n-\t\t/**\n-\t\t * Holds settings of Reactive Power for debugging.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: Integer\n-\t\t * <li>Unit: var\n-\t\t * <li>Range: negative values for Charge; positive for Discharge\n-\t\t * <li>Implementation Note: value is automatically written by {@link Power} just\n-\t\t * just before it calls the onWriteListener (which writes the value to the Ess)\n-\t\t * </ul>\n-\t\t */\n-\t\tDEBUG_SET_REACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n-\t\t\t\t.unit(Unit.VOLT_AMPERE_REACTIVE)), //\n-\t\t/**\n-\t\t * StateChannel is set when calling applyPower() failed.\n-\t\t * \n-\t\t * <ul>\n-\t\t * <li>Interface: Managed Symmetric Ess\n-\t\t * <li>Type: StateChannel\n-\t\t * <li>Implementation Note: value is automatically written by\n-\t\t * {@link Power}-Solver if {@link ManagedAsymmetricEss#applyPower(int, int)}\n-\t\t * failed.\n-\t\t * </ul>\n-\t\t */\n-\t\tAPPLY_POWER_FAILED(Doc.of(Level.FAULT) //\n-\t\t\t\t.text(\"Applying the Active/Reactive Power failed\"));\n-\n-\t\tprivate final Doc doc;\n-\n-\t\tprivate ChannelId(Doc doc) {\n-\t\t\tthis.doc = doc;\n-\t\t}\n-\n-\t\tpublic Doc doc() {\n-\t\t\treturn this.doc;\n-\t\t}\n-\t}\n-\n-\tpublic static ModbusSlaveNatureTable getModbusSlaveNatureTable(AccessMode accessMode) {\n-\t\treturn ModbusSlaveNatureTable.of(ManagedSymmetricEss.class, accessMode, 100) //\n-\t\t\t\t.channel(0, ChannelId.ALLOWED_CHARGE_POWER, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(2, ChannelId.ALLOWED_DISCHARGE_POWER, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(4, ChannelId.SET_ACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(6, ChannelId.SET_REACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(8, ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(10, ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(12, ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.channel(14, ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n-\t\t\t\t.build();\n-\t}\n-\n-\t/**\n-\t * Gets an instance of the 'Power' class, which allows to set limitations to\n-\t * Active and Reactive Power.\n-\t * \n-\t * @return the Power instance\n-\t */\n-\tpublic Power getPower();\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#ALLOWED_CHARGE_POWER}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerReadChannel getAllowedChargePowerChannel() {\n-\t\treturn this.channel(ChannelId.ALLOWED_CHARGE_POWER);\n-\t}\n-\n-\t/**\n-\t * Gets the Allowed Charge Power in [W], range \"&lt;= 0\". See\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Integer> getAllowedChargePower() {\n-\t\treturn this.getAllowedChargePowerChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedChargePower(Integer value) {\n-\t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n-\t}\n-\t\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedChargePower(int value) {\n-\t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerReadChannel getAllowedDischargePowerChannel() {\n-\t\treturn this.channel(ChannelId.ALLOWED_DISCHARGE_POWER);\n-\t}\n-\n-\t/**\n-\t * Gets the Allowed Discharge Power in [W], range \"&lt;= 0\". See\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Integer> getAllowedDischargePower() {\n-\t\treturn this.getAllowedDischargePowerChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedDischargePower(Integer value) {\n-\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n-\t}\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setAllowedDischargePower(int value) {\n-\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Equals setpoint in [W]. Negative values for Charge;\n-\t * positive for Discharge. See {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerEqualsWithPidChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS_WITH_PID);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Equals setpoint in [W] with applied PID filter. Negative\n-\t * values for Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerEqualsWithPid(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerEqualsWithPidChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerLessOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Less Or Equals setpoint in [W]. Negative values for\n-\t * Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerLessOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetActivePowerGreaterOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets an Active Power Greater Or Equals setpoint in [W]. Negative values for\n-\t * Charge; positive for Discharge. See\n-\t * {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setActivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetActivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerLessOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Less Or Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerLessOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default IntegerWriteChannel getSetReactivePowerGreaterOrEqualsChannel() {\n-\t\treturn this.channel(ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS);\n-\t}\n-\n-\t/**\n-\t * Sets a Reactive Power Greater Or Equals setpoint in [var]. See\n-\t * {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n-\t * \n-\t * @param value the next write value\n-\t * @throws OpenemsNamedException on error\n-\t */\n-\tpublic default void setReactivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n-\t\tthis.getSetReactivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n-\t}\n-\n-\t/**\n-\t * Gets the Channel for {@link ChannelId#APPLY_POWER_FAILED}.\n-\t *\n-\t * @return the Channel\n-\t */\n-\tpublic default StateChannel getApplyPowerFailedChannel() {\n-\t\treturn this.channel(ChannelId.APPLY_POWER_FAILED);\n-\t}\n-\n-\t/**\n-\t * Gets the Apply Power Failed State. See {@link ChannelId#APPLY_POWER_FAILED}.\n-\t *\n-\t * @return the Channel {@link Value}\n-\t */\n-\tpublic default Value<Boolean> getApplyPowerFailed() {\n-\t\treturn this.getApplyPowerFailedChannel().value();\n-\t}\n-\n-\t/**\n-\t * Internal method to set the 'nextValue' on\n-\t * {@link ChannelId#APPLY_POWER_FAILED} Channel.\n-\t *\n-\t * @param value the next value\n-\t */\n-\tpublic default void _setApplyPowerFailed(boolean value) {\n-\t\tthis.getApplyPowerFailedChannel().setNextValue(value);\n-\t}\n-\n-\t/**\n-\t * Apply the calculated Power.\n-\t * \n-\t * <p>\n-\t * Careful: do not adjust activePower and reactivePower in this method, e.g.\n-\t * setting it to zero on error. The purpose of this method is solely to apply\n-\t * the calculated power to the ESS. If you need to constrain the allowed power,\n-\t * add Constraints using the {@link #getStaticConstraints()} method.\n-\t * \n-\t * @param activePower   the active power in [W]\n-\t * @param reactivePower the reactive power in [var]\n-\t * @throws OpenemsNamedException on error; causes activation of\n-\t *                               APPLY_POWER_FAILED StateChannel\n-\t */\n-\tpublic void applyPower(int activePower, int reactivePower) throws OpenemsNamedException;\n-\n-\t/**\n-\t * Gets the smallest positive power that can be set (in W, VA or var). Example:\n-\t * <ul>\n-\t * <li>FENECON Commercial 40 allows setting of power in 100 W steps. It should\n-\t * return 100.\n-\t * <li>KACO blueplanet gridsave 50 allows setting of power in 0.1 % of 52 VA. It\n-\t * should return 52 (= 52000 * 0.001)\n-\t * </ul>\n-\t * \n-\t * @return the power precision\n-\t */\n-\tpublic int getPowerPrecision();\n-\n-\t/**\n-\t * Gets static Constraints for this Ess. Override this method to provide\n-\t * specific Constraints for this Ess on every Cycle.\n-\t * \n-\t * @return the Constraints\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint[] getStaticConstraints() throws OpenemsNamedException {\n-\t\treturn Power.NO_CONSTRAINTS;\n-\t}\n-\n-\t/**\n-\t * Creates a Power Constraint.\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint createPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n-\t\t\tdouble value) throws OpenemsException {\n-\t\treturn this.getPower().createSimpleConstraint(description, this, phase, pwr, relationship, value);\n-\t}\n-\n-\t/**\n-\t * Adds a Power Constraint for the current Cycle.\n-\t * \n-\t * <p>\n-\t * To add a Constraint on every Cycle, use getStaticConstraints()\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint addPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship,\n-\t\t\tdouble value) throws OpenemsException {\n-\t\treturn this.getPower().addConstraint(this.createPowerConstraint(description, phase, pwr, relationship, value));\n-\t}\n-\n-\t/**\n-\t * Adds a Power Constraint for the current Cycle.\n-\t * \n-\t * <p>\n-\t * To add a Constraint on every Cycle, use getStaticConstraints()\n-\t * \n-\t * @param description  a description for the Constraint\n-\t * @param phase        the affected power phase\n-\t * @param pwr          Active or Reactive power\n-\t * @param relationship equals, less-than or greater-than\n-\t * @param value        the function value\n-\t * @return the Constraint\n-\t * @throws OpenemsException on error\n-\t */\n-\tpublic default Constraint addPowerConstraintAndValidate(String description, Phase phase, Pwr pwr,\n-\t\t\tRelationship relationship, double value) throws OpenemsException {\n-\t\treturn this.getPower()\n-\t\t\t\t.addConstraintAndValidate(this.createPowerConstraint(description, phase, pwr, relationship, value));\n-\t}\n-}\n+    public enum ChannelId implements io.openems.edge.common.channel.ChannelId {\n+        /**\n+         * Holds the currently maximum allowed charge power. This value is commonly\n+         * defined by current battery limitations.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: zero or negative value\n+         * </ul>\n+         */\n+        ALLOWED_CHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n+                .unit(Unit.WATT)), //\n+        /**\n+         * Holds the currently maximum allowed discharge power. This value is commonly\n+         * defined by current battery limitations.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: zero or positive value\n+         * </ul>\n+         */\n+        ALLOWED_DISCHARGE_POWER(Doc.of(OpenemsType.INTEGER) //\n+                .unit(Unit.WATT)), //\n+        /**\n+         * Sets a fixed Active Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_ACTIVE_POWER_EQUALS(new IntegerDoc() //\n+                .unit(Unit.WATT) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetActivePowerEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS))), //\n+        /**\n+         * Applies the PID filter and then sets a fixed Active Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_ACTIVE_POWER_EQUALS_WITH_PID(new IntegerDoc() //\n+                .unit(Unit.WATT) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetActivePowerEqualsWithPid\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS) {\n+\n+                                             @Override\n+                                             public void accept(Channel<Integer> channel) {\n+                                                 ((IntegerWriteChannel) channel).onSetNextWrite(value -> {\n+                                                     if (value != null) {\n+                                                         ManagedSymmetricEss ess = (ManagedSymmetricEss) channel.getComponent();\n+                                                         Power power = ess.getPower();\n+                                                         PidFilter pidFilter = power.getPidFilter();\n+\n+                                // configure PID filter\n+                                                         int minPower = power.getMinPower(ess, Phase.ALL, Pwr.ACTIVE);\n+                                                         int maxPower = power.getMaxPower(ess, Phase.ALL, Pwr.ACTIVE);\n+\n+                                                         pidFilter.setLimits(minPower, maxPower);\n+\n+\n+                                                         int currentActivePower = ess.getActivePower()\n+.orElse(0);\n+                                                         int pidOutput = pidFilter.applyPidFilter(currentActivePower, value);\n+\n+                                                         ess.setActivePowerEquals(pidOutput);\n+                                                     }\n+                                                 });\n+                                             }\n+\n+                                         })), //\n+        /**\n+         * Sets a fixed Reactive Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: var\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_REACTIVE_POWER_EQUALS(new IntegerDoc() //\n+                .unit(Unit.VOLT_AMPERE_REACTIVE) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetReactivePowerEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS))), //\n+        /**\n+         * Sets a fixed maximum Active Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_ACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n+                .unit(Unit.WATT) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetActivePowerLessOrEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.LESS_OR_EQUALS))), //\n+        /**\n+         * Sets a fixed minimum Active Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_ACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n+                .unit(Unit.WATT) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetActivePowerGreaterOrEquals\", Phase.ALL, Pwr.ACTIVE, Relationship.GREATER_OR_EQUALS))), //\n+        /**\n+         * Sets a fixed maximum Reactive Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: var\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_REACTIVE_POWER_LESS_OR_EQUALS(new IntegerDoc() //\n+                .unit(Unit.VOLT_AMPERE) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetReactivePowerLessOrEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.LESS_OR_EQUALS))), //\n+        /**\n+         * Sets a fixed minimum Reactive Power.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: var\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * </ul>\n+         */\n+        SET_REACTIVE_POWER_GREATER_OR_EQUALS(new IntegerDoc() //\n+                .unit(Unit.WATT) //\n+                .accessMode(AccessMode.WRITE_ONLY) //\n+                .onInit(new PowerConstraint(\n+\"SetReactivePowerGreaterOrEquals\", Phase.ALL, Pwr.REACTIVE, Relationship.GREATER_OR_EQUALS))), //\n+        /**\n+         * Holds settings of Active Power for debugging.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: W\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * <li>Implementation Note: value is automatically written by {@link Power} just\n+         * before it calls the onWriteListener (which writes the value to the Ess)\n+         * </ul>\n+         */\n+        DEBUG_SET_ACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n+                .unit(Unit.WATT)), //\n+        /**\n+         * Holds settings of Reactive Power for debugging.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: Integer\n+         * <li>Unit: var\n+         * <li>Range: negative values for Charge; positive for Discharge\n+         * <li>Implementation Note: value is automatically written by {@link Power} just\n+         * just before it calls the onWriteListener (which writes the value to the Ess)\n+         * </ul>\n+         */\n+        DEBUG_SET_REACTIVE_POWER(Doc.of(OpenemsType.INTEGER) //\n+                .unit(Unit.VOLT_AMPERE_REACTIVE)), //\n+        /**\n+         * StateChannel is set when calling applyPower() failed.\n+         * \n+         * <ul>\n+         * <li>Interface: Managed Symmetric Ess\n+         * <li>Type: StateChannel\n+         * <li>Implementation Note: value is automatically written by\n+         * {@link Power}-Solver if {@link ManagedAsymmetricEss#applyPower(int, int)}\n+         * failed.\n+         * </ul>\n+         */\n+        APPLY_POWER_FAILED(Doc.of(Level.FAULT) //\n+                .text(\"Applying the Active/Reactive Power failed\"));\n+\n+        private final Doc doc;\n+\n+        private ChannelId(Doc doc) {\n+            this.doc = doc;\n+        }\n+\n+        public Doc doc() {\n+            return this.doc;\n+        }\n+    }\n+\n+\n+    public static ModbusSlaveNatureTable getModbusSlaveNatureTable(AccessMode accessMode) {\n+        return ModbusSlaveNatureTable.of(ManagedSymmetricEss.class, accessMode, 100) //\n+.channel(0, ChannelId.ALLOWED_CHARGE_POWER, ModbusType.FLOAT32) //\n+.channel(2, ChannelId.ALLOWED_DISCHARGE_POWER, ModbusType.FLOAT32) //\n+.channel(4, ChannelId.SET_ACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n+.channel(6, ChannelId.SET_REACTIVE_POWER_EQUALS, ModbusType.FLOAT32) //\n+.channel(8, ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n+.channel(10, ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS, ModbusType.FLOAT32) //\n+.channel(12, ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n+.channel(14, ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS, ModbusType.FLOAT32) //\n+.build();\n+    }\n+\n+    /**\n+     * Gets an instance of the 'Power' class, which allows to set limitations to\n+     * Active and Reactive Power.\n+     * \n+     * @return the Power instance\n+     */\n+\n+    public Power getPower();\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#ALLOWED_CHARGE_POWER}.\n+     *\n+     * @return the Channel\n+     */\n+\n+\n+    public default IntegerReadChannel getAllowedChargePowerChannel() {\n+        return this.channel(ChannelId.ALLOWED_CHARGE_POWER);\n+    }\n+\n+    /**\n+     * Gets the Allowed Charge Power in [W], range \"&lt;= 0\". See\n+     * {@link ChannelId#ALLOWED_CHARGE_POWER}.\n+     *\n+     * @return the Channel {@link Value}\n+     */\n+\n+    public default Value<Integer> getAllowedChargePower() {\n+        return this.getAllowedChargePowerChannel()\n+                   .value();\n+    }\n+\n+    /**\n+     * Internal method to set the 'nextValue' on\n+     * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n+     *\n+     * @param value the next value\n+     */\n+\n+    public default void _setAllowedChargePower(Integer value) {\n+        this.getAllowedChargePowerChannel().setNextValue(value);\n+    }\n+    \n+    /**\n+     * Internal method to set the 'nextValue' on\n+     * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n+     *\n+     * @param value the next value\n+     */\n+\n+    public default void _setAllowedChargePower(int value) {\n+        this.getAllowedChargePowerChannel().setNextValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerReadChannel getAllowedDischargePowerChannel() {\n+        return this.channel(ChannelId.ALLOWED_DISCHARGE_POWER);\n+    }\n+\n+    /**\n+     * Gets the Allowed Discharge Power in [W], range \"&lt;= 0\". See\n+     * {@link ChannelId#ALLOWED_DISCHARGE_POWER}.\n+     *\n+     * @return the Channel {@link Value}\n+     */\n+\n+    public default Value<Integer> getAllowedDischargePower() {\n+        return this.getAllowedDischargePowerChannel()\n+                   .value();\n+    }\n+\n+    /**\n+     * Internal method to set the 'nextValue' on\n+     * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n+     *\n+     * @param value the next value\n+     */\n+\n+    public default void _setAllowedDischargePower(Integer value) {\n+        this.getAllowedDischargePowerChannel().setNextValue(value);\n+    }\n+    /**\n+     * Internal method to set the 'nextValue' on\n+     * {@link ChannelId#ALLOWED_DISCHARGE_POWER} Channel.\n+     *\n+     * @param value the next value\n+     */\n+\n+    public default void _setAllowedDischargePower(int value) {\n+        this.getAllowedDischargePowerChannel().setNextValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetActivePowerEqualsChannel() {\n+        return this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS);\n+    }\n+\n+    /**\n+     * Sets an Active Power Equals setpoint in [W]. Negative values for Charge;\n+     * positive for Discharge. See {@link ChannelId#SET_ACTIVE_POWER_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setActivePowerEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetActivePowerEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetActivePowerEqualsWithPidChannel() {\n+        return this.channel(ChannelId.SET_ACTIVE_POWER_EQUALS_WITH_PID);\n+    }\n+\n+    /**\n+     * Sets an Active Power Equals setpoint in [W] with applied PID filter. Negative\n+     * values for Charge; positive for Discharge. See\n+     * {@link ChannelId#SET_ACTIVE_POWER_EQUALS_WITH_PID}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setActivePowerEqualsWithPid(Integer value) throws OpenemsNamedException {\n+        this.getSetActivePowerEqualsWithPidChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetReactivePowerEqualsChannel() {\n+        return this.channel(ChannelId.SET_REACTIVE_POWER_EQUALS);\n+    }\n+\n+    /**\n+     * Sets a Reactive Power Equals setpoint in [var]. See\n+     * {@link ChannelId#SET_REACTIVE_POWER_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setReactivePowerEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetReactivePowerEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetActivePowerLessOrEqualsChannel() {\n+        return this.channel(ChannelId.SET_ACTIVE_POWER_LESS_OR_EQUALS);\n+    }\n+\n+    /**\n+     * Sets an Active Power Less Or Equals setpoint in [W]. Negative values for\n+     * Charge; positive for Discharge. See\n+     * {@link ChannelId#SET_ACTIVE_POWER_LESS_OR_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setActivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetActivePowerLessOrEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetActivePowerGreaterOrEqualsChannel() {\n+        return this.channel(ChannelId.SET_ACTIVE_POWER_GREATER_OR_EQUALS);\n+    }\n+\n+    /**\n+     * Sets an Active Power Greater Or Equals setpoint in [W]. Negative values for\n+     * Charge; positive for Discharge. See\n+     * {@link ChannelId#SET_ACTIVE_POWER_GREATER_OR_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setActivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetActivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetReactivePowerLessOrEqualsChannel() {\n+        return this.channel(ChannelId.SET_REACTIVE_POWER_LESS_OR_EQUALS);\n+    }\n+\n+    /**\n+     * Sets a Reactive Power Less Or Equals setpoint in [var]. See\n+     * {@link ChannelId#SET_REACTIVE_POWER_LESS_OR_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setReactivePowerLessOrEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetReactivePowerLessOrEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default IntegerWriteChannel getSetReactivePowerGreaterOrEqualsChannel() {\n+        return this.channel(ChannelId.SET_REACTIVE_POWER_GREATER_OR_EQUALS);\n+    }\n+\n+    /**\n+     * Sets a Reactive Power Greater Or Equals setpoint in [var]. See\n+     * {@link ChannelId#SET_REACTIVE_POWER_GREATER_OR_EQUALS}.\n+     * \n+     * @param value the next write value\n+     * @throws OpenemsNamedException on error\n+     */\n+\n+    public default void setReactivePowerGreaterOrEquals(Integer value) throws OpenemsNamedException {\n+        this.getSetReactivePowerGreaterOrEqualsChannel().setNextWriteValue(value);\n+    }\n+\n+    /**\n+     * Gets the Channel for {@link ChannelId#APPLY_POWER_FAILED}.\n+     *\n+     * @return the Channel\n+     */\n+\n+    public default StateChannel getApplyPowerFailedChannel() {\n+        return this.channel(ChannelId.APPLY_POWER_FAILED);\n+    }\n+\n+    /**\n+     * Gets the Apply Power Failed State. See {@link ChannelId#APPLY_POWER_FAILED}.\n+     *\n+     * @return the Channel {@link Value}\n+     */\n+\n+    public default Value<Boolean> getApplyPowerFailed() {\n+        return this.getApplyPowerFailedChannel()\n+                   .value();\n+    }\n+\n+    /**\n+     * Internal method to set the 'nextValue' on\n+     * {@link ChannelId#APPLY_POWER_FAILED} Channel.\n+     *\n+     * @param value the next value\n+     */\n+\n+    public default void _setApplyPowerFailed(boolean value) {\n+        this.getApplyPowerFailedChannel().setNextValue(value);\n+    }\n+\n+    /**\n+     * Apply the calculated Power.\n+     * \n+     * <p>\n+     * Careful: do not adjust activePower and reactivePower in this method, e.g.\n+     * setting it to zero on error. The purpose of this method is solely to apply\n+     * the calculated power to the ESS. If you need to constrain the allowed power,\n+     * add Constraints using the {@link #getStaticConstraints()} method.\n+     * \n+     * @param activePower   the active power in [W]\n+     * @param reactivePower the reactive power in [var]\n+     * @throws OpenemsNamedException on error; causes activation of\n+     *                               APPLY_POWER_FAILED StateChannel\n+     */\n+\n+    public void applyPower(int activePower, int reactivePower) throws OpenemsNamedException;\n+\n+    /**\n+     * Gets the smallest positive power that can be set (in W, VA or var). Example:\n+     * <ul>\n+     * <li>FENECON Commercial 40 allows setting of power in 100 W steps. It should\n+     * return 100.\n+     * <li>KACO blueplanet gridsave 50 allows setting of power in 0.1 % of 52 VA. It\n+     * should return 52 (= 52000 * 0.001)\n+     * </ul>\n+     * \n+     * @return the power precision\n+     */\n+\n+\n+    public int getPowerPrecision();\n+\n+    /**\n+     * Gets static Constraints for this Ess. Override this method to provide\n+     * specific Constraints for this Ess on every Cycle.\n+     * \n+     * @return the Constraints\n+     * @throws OpenemsException on error\n+     */\n+\n+\n+    public default Constraint[] getStaticConstraints() throws OpenemsNamedException {\n+        return Power.NO_CONSTRAINTS;\n+    }\n+\n+    /**\n+     * Creates a Power Constraint.\n+     * \n+     * @param description  a description for the Constraint\n+     * @param phase        the affected power phase\n+     * @param pwr          Active or Reactive power\n+     * @param relationship equals, less-than or greater-than\n+     * @param value        the function value\n+     * @return the Constraint\n+     * @throws OpenemsException on error\n+     */\n+\n+    public default Constraint createPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship, double value) throws OpenemsException {\n+        return this.getPower()\n+                   .createSimpleConstraint(description, this, phase, pwr, relationship, value);\n+    }\n+\n+    /**\n+     * Adds a Power Constraint for the current Cycle.\n+     * \n+     * <p>\n+     * To add a Constraint on every Cycle, use getStaticConstraints()\n+     * \n+     * @param description  a description for the Constraint\n+     * @param phase        the affected power phase\n+     * @param pwr          Active or Reactive power\n+     * @param relationship equals, less-than or greater-than\n+     * @param value        the function value\n+     * @return the Constraint\n+     * @throws OpenemsException on error\n+     */\n+\n+    public default Constraint addPowerConstraint(String description, Phase phase, Pwr pwr, Relationship relationship, double value) throws OpenemsException {\n+        return this.getPower()\n+                   .addConstraint(this.createPowerConstraint(description, phase, pwr, relationship, value));\n+    }\n+\n+    /**\n+     * Adds a Power Constraint for the current Cycle.\n+     * \n+     * <p>\n+     * To add a Constraint on every Cycle, use getStaticConstraints()\n+     * \n+     * @param description  a description for the Constraint\n+     * @param phase        the affected power phase\n+     * @param pwr          Active or Reactive power\n+     * @param relationship equals, less-than or greater-than\n+     * @param value        the function value\n+     * @return the Constraint\n+     * @throws OpenemsException on error\n+     */\n+\n+    public default Constraint addPowerConstraintAndValidate(String description, Phase phase, Pwr pwr, Relationship relationship, double value) throws OpenemsException {\n+        return this.getPower()\n+                   .addConstraintAndValidate(this.createPowerConstraint(description, phase, pwr, relationship, value));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 614
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "327",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "328",
                    "column": "22",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/82/ManagedSymmetricEss.java\nindex 23e77658d5..e7e6b7421f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/82/ManagedSymmetricEss.java\n@@ -279,7 +279,7 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \tpublic default void _setAllowedChargePower(Integer value) {\n \t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n \t}\n-\t\n+\n \t/**\n \t * Internal method to set the 'nextValue' on\n \t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n@@ -325,7 +325,7 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \t * @param value the next value\n \t */\n \tpublic default void _setAllowedDischargePower(int value) {\n-\t\tthis.getAllowedDischargePowerChannel().setNextValue(value);\n+\t\tthis .getAllowedDischargePowerChannel().setNextValue(value);\n \t}\n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "327",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/82/ManagedSymmetricEss.java\nindex 23e77658d5..e81aec2410 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/82/ManagedSymmetricEss.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/82/ManagedSymmetricEss.java\n@@ -279,7 +279,7 @@ public interface ManagedSymmetricEss extends SymmetricEss {\n \tpublic default void _setAllowedChargePower(Integer value) {\n \t\tthis.getAllowedChargePowerChannel().setNextValue(value);\n \t}\n-\t\n+\n \t/**\n \t * Internal method to set the 'nextValue' on\n \t * {@link ChannelId#ALLOWED_CHARGE_POWER} Channel.\n",
            "diff_size": 1
        }
    ]
}