{
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "185",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    public int hashCode() {\n        assert false : \"hashCode not designed\";\n        return 42; // any arbitrary constant will do\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/65/AbstractStatistic.java\nindex 00425f8e08..95596b851a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/65/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n+\n         return 42; // any arbitrary constant will do\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/65/AbstractStatistic.java\nindex 00425f8e08..87dbe1b984 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/65/AbstractStatistic.java\n@@ -21,7 +21,7 @@ public abstract class AbstractStatistic implements Serializable {\n     }\n \n     protected AbstractStatistic(int approved, int needReview, int untranslated,\n-            int translated, int rejected) {\n+                                int translated, int rejected) {\n         this.approved = approved;\n         this.needReview = needReview;\n         this.untranslated = untranslated;\n@@ -39,41 +39,41 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public synchronized void set(ContentState state, int value) {\n         switch (state) {\n-        case Translated:\n-            translated = value;\n-            break;\n-        case NeedReview:\n-            needReview = value;\n-            break;\n-        case New:\n-            untranslated = value;\n-            break;\n-        case Approved:\n-            approved = value;\n-            break;\n-        case Rejected:\n-            rejected = value;\n-            break;\n-        default:\n-            throw new RuntimeException(\"not implemented for state \"\n+            case Translated:\n+                translated = value;\n+                break;\n+            case NeedReview:\n+                needReview = value;\n+                break;\n+            case New:\n+                untranslated = value;\n+                break;\n+            case Approved:\n+                approved = value;\n+                break;\n+            case Rejected:\n+                rejected = value;\n+                break;\n+            default:\n+                throw new RuntimeException(\"not implemented for state \"\n                     + state.name());\n         }\n     }\n \n     public synchronized int get(ContentState state) {\n         switch (state) {\n-        case Translated:\n-            return translated;\n-        case NeedReview:\n-            return needReview;\n-        case New:\n-            return untranslated;\n-        case Approved:\n-            return approved;\n-        case Rejected:\n-            return rejected;\n-        default:\n-            throw new RuntimeException(\"not implemented for state \"\n+            case Translated:\n+                return translated;\n+            case NeedReview:\n+                return needReview;\n+            case New:\n+                return untranslated;\n+            case Approved:\n+                return approved;\n+            case Rejected:\n+                return rejected;\n+            default:\n+                throw new RuntimeException(\"not implemented for state \"\n                     + state.name());\n         }\n     }\n@@ -167,15 +167,17 @@ public abstract class AbstractStatistic implements Serializable {\n \n     @Override\n     public synchronized boolean equals(Object obj) {\n-        if (obj == this)\n+        if (obj == this) {\n             return true;\n-        if (obj == null)\n+        }\n+        if (obj == null) {\n             return false;\n+        }\n         if (obj instanceof AbstractStatistic) {\n             AbstractStatistic o = (AbstractStatistic) obj;\n             return (approved == o.getApproved() && needReview == o.getNeedReview()\n-                    && untranslated == o.getUntranslated()\n-                    && translated == o.getTranslated() && rejected == o.getRejected());\n+                && untranslated == o.getUntranslated()\n+                && translated == o.getTranslated() && rejected == o.getRejected());\n         }\n         return false;\n     }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/65/AbstractStatistic.java\nindex 00425f8e08..d2bedb2548 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/65/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n+        return 42;\n+// any arbitrary constant will do\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/65/AbstractStatistic.java\nindex 00425f8e08..06912fd344 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/65/AbstractStatistic.java\n@@ -1,16 +1,15 @@\n package org.zanata.ui.model.statistic;\n \n import java.io.Serializable;\n-\n import org.zanata.common.ContentState;\n \n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n-public abstract class AbstractStatistic implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n \n+public abstract class AbstractStatistic implements Serializable {\n+    private static final long serialVersionUID = 1L;\n     private int approved;\n     private int needReview;\n     private int untranslated;\n@@ -20,8 +19,7 @@ public abstract class AbstractStatistic implements Serializable {\n     protected AbstractStatistic() {\n     }\n \n-    protected AbstractStatistic(int approved, int needReview, int untranslated,\n-            int translated, int rejected) {\n+    protected AbstractStatistic(int approved, int needReview, int untranslated, int translated, int rejected) {\n         this.approved = approved;\n         this.needReview = needReview;\n         this.untranslated = untranslated;\n@@ -55,8 +53,7 @@ public abstract class AbstractStatistic implements Serializable {\n             rejected = value;\n             break;\n         default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n+            throw new RuntimeException(\"not implemented for state \" + state.name());\n         }\n     }\n \n@@ -73,8 +70,7 @@ public abstract class AbstractStatistic implements Serializable {\n         case Rejected:\n             return rejected;\n         default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n+            throw new RuntimeException(\"not implemented for state \" + state.name());\n         }\n     }\n \n@@ -120,19 +116,18 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public synchronized double getPercentage(ContentState contentState) {\n         switch (contentState) {\n-            case Translated:\n-                return getPercentTranslated();\n-            case NeedReview:\n-                return getPercentFuzzy();\n-            case New:\n-                return getPercentUntranslated();\n-            case Approved:\n-                return getPercentApproved();\n-            case Rejected:\n-                return getPercentRejected();\n-            default:\n-                throw new RuntimeException(\"not implemented for state \"\n-                    + contentState.name());\n+        case Translated:\n+            return getPercentTranslated();\n+        case NeedReview:\n+            return getPercentFuzzy();\n+        case New:\n+            return getPercentUntranslated();\n+        case Approved:\n+            return getPercentApproved();\n+        case Rejected:\n+            return getPercentRejected();\n+        default:\n+            throw new RuntimeException(\"not implemented for state \" + contentState.name());\n         }\n     }\n \n@@ -173,9 +168,8 @@ public abstract class AbstractStatistic implements Serializable {\n             return false;\n         if (obj instanceof AbstractStatistic) {\n             AbstractStatistic o = (AbstractStatistic) obj;\n-            return (approved == o.getApproved() && needReview == o.getNeedReview()\n-                    && untranslated == o.getUntranslated()\n-                    && translated == o.getTranslated() && rejected == o.getRejected());\n+            return (approved == o.getApproved() && needReview == o.getNeedReview() && untranslated == o.getUntranslated() && translated == o.getTranslated()\n+            && rejected == o.getRejected());\n         }\n         return false;\n     }\n@@ -184,4 +178,4 @@ public abstract class AbstractStatistic implements Serializable {\n         assert false : \"hashCode not designed\";\n         return 42; // any arbitrary constant will do\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/65/AbstractStatistic.java\nindex 00425f8e08..9eb343bf85 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/65/AbstractStatistic.java\n@@ -182,6 +182,9 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n-    }\n-}\n+        return 42;\n+        // any arbitrary constant will do\n+        }\n+ }\n+\n+    \n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/65/AbstractStatistic.java\nindex 00425f8e08..95596b851a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/65/AbstractStatistic.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/65/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n+\n         return 42; // any arbitrary constant will do\n     }\n }\n",
            "diff_size": 1
        }
    ]
}