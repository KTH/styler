{
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "5",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    /**\n     * Check if a user is authenticated.\n     *\n     * @return true if the user is authenticated, false otherwise.",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "column": "3",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/intellij/16/SecurityUtils.java\nindex 916d860e5f..d76843ddbf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/intellij/16/SecurityUtils.java\n@@ -17,77 +17,77 @@ import org.springframework.security.oauth2.provider.authentication.OAuth2Authent\n  */\n public final class SecurityUtils {\n \n-    private SecurityUtils() {\n-    }\n+  private SecurityUtils() {\n+  }\n \n-    /**\n-     * Get the login of the current user.\n-     *\n-     * @return the login of the current user.\n-     */\n-    public static Optional<String> getCurrentUserLogin() {\n-        SecurityContext securityContext = SecurityContextHolder.getContext();\n-        return Optional.ofNullable(extractPrincipal(securityContext.getAuthentication()));\n-    }\n+  /**\n+   * Get the login of the current user.\n+   *\n+   * @return the login of the current user.\n+   */\n+  public static Optional<String> getCurrentUserLogin() {\n+    SecurityContext securityContext = SecurityContextHolder.getContext();\n+    return Optional.ofNullable(extractPrincipal(securityContext.getAuthentication()));\n+  }\n \n-    /**\n-     * Get the id of the current user.\n-     *\n-     * @return the id of the current user.\n-     */\n-    public static UUID getCurrentUserId() {\n-        SecurityContext securityContext = SecurityContextHolder.getContext();\n-        Object details = securityContext.getAuthentication().getDetails();\n-        if (details instanceof OAuth2AuthenticationDetails) {\n-            Object decodedDetails = ((OAuth2AuthenticationDetails) details).getDecodedDetails();\n-            if (decodedDetails instanceof Map) {\n-                return UUID.fromString(((Map) decodedDetails).get(\"user_id\").toString());\n-            }\n-        }\n-        return null;\n+  /**\n+   * Get the id of the current user.\n+   *\n+   * @return the id of the current user.\n+   */\n+  public static UUID getCurrentUserId() {\n+    SecurityContext securityContext = SecurityContextHolder.getContext();\n+    Object details = securityContext.getAuthentication().getDetails();\n+    if (details instanceof OAuth2AuthenticationDetails) {\n+      Object decodedDetails = ((OAuth2AuthenticationDetails) details).getDecodedDetails();\n+      if (decodedDetails instanceof Map) {\n+        return UUID.fromString(((Map) decodedDetails).get(\"user_id\").toString());\n+      }\n     }\n+    return null;\n+  }\n \n-    private static String extractPrincipal(Authentication authentication) {\n-        if (authentication == null) {\n-            return null;\n-        } else if (authentication.getPrincipal() instanceof UserDetails) {\n-            UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();\n-            return springSecurityUser.getUsername();\n-        } else if (authentication.getPrincipal() instanceof String) {\n-            return (String) authentication.getPrincipal();\n-        }\n-        return null;\n+  private static String extractPrincipal(Authentication authentication) {\n+    if (authentication == null) {\n+      return null;\n+    } else if (authentication.getPrincipal() instanceof UserDetails) {\n+      UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();\n+      return springSecurityUser.getUsername();\n+    } else if (authentication.getPrincipal() instanceof String) {\n+      return (String) authentication.getPrincipal();\n     }\n+    return null;\n+  }\n \n \n-    /**\n-     * Check if a user is authenticated.\n-     *\n-     * @return true if the user is authenticated, false otherwise.\n-     */\n-    public static boolean isAuthenticated() {\n-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-        return authentication != null &&\n-            getAuthorities(authentication).noneMatch(AuthoritiesConstants.ANONYMOUS::equals);\n-    }\n+  /**\n+   * Check if a user is authenticated.\n+   *\n+   * @return true if the user is authenticated, false otherwise.\n+   */\n+  public static boolean isAuthenticated() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    return authentication != null &&\n+        getAuthorities(authentication).noneMatch(AuthoritiesConstants.ANONYMOUS::equals);\n+  }\n \n-    /**\n-     * If the current user has a specific authority (security role).\n-     * <p>\n-     * The name of this method comes from the {@code isUserInRole()} method in the Servlet API.\n-     *\n-     * @param authority the authority to check.\n-     * @return true if the current user has the authority, false otherwise.\n-     */\n-    public static boolean isCurrentUserInRole(String authority) {\n-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-        return authentication != null &&\n-            getAuthorities(authentication).anyMatch(authority::equals);\n-    }\n+  /**\n+   * If the current user has a specific authority (security role).\n+   * <p>\n+   * The name of this method comes from the {@code isUserInRole()} method in the Servlet API.\n+   *\n+   * @param authority the authority to check.\n+   * @return true if the current user has the authority, false otherwise.\n+   */\n+  public static boolean isCurrentUserInRole(String authority) {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    return authentication != null &&\n+        getAuthorities(authentication).anyMatch(authority::equals);\n+  }\n \n-    private static Stream<String> getAuthorities(Authentication authentication) {\n-        return authentication.getAuthorities().stream()\n-            .map(GrantedAuthority::getAuthority);\n-    }\n+  private static Stream<String> getAuthorities(Authentication authentication) {\n+    return authentication.getAuthorities().stream()\n+        .map(GrantedAuthority::getAuthority);\n+  }\n \n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "column": "5",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/16/SecurityUtils.java\nindex 916d860e5f..89a595d301 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/16/SecurityUtils.java\n@@ -89,5 +89,4 @@ public final class SecurityUtils {\n         return authentication.getAuthorities().stream()\n             .map(GrantedAuthority::getAuthority);\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "64",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/16/SecurityUtils.java\nindex 916d860e5f..c6d8be6b20 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/16/SecurityUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/16/SecurityUtils.java\n@@ -57,15 +57,11 @@ public final class SecurityUtils {\n             return (String) authentication.getPrincipal();\n         }\n         return null;\n-    }\n-\n-\n-    /**\n+    } /**\n      * Check if a user is authenticated.\n      *\n      * @return true if the user is authenticated, false otherwise.\n-     */\n-    public static boolean isAuthenticated() {\n+     */public static boolean isAuthenticated() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         return authentication != null &&\n             getAuthorities(authentication).noneMatch(AuthoritiesConstants.ANONYMOUS::equals);\n",
            "diff_size": 6
        }
    ]
}