{
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "96",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     */\n    public void sendAnonymous() {\n        String ipAddress = getClientIp(); // client ip address\n        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n        try {\n            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/44/ContactAdminAction.java\nindex 6fa8a5fee1..30bdb81c4b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/44/ContactAdminAction.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import java.io.Serializable;\n@@ -54,7 +55,7 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n @Transactional\n public class ContactAdminAction implements Serializable {\n     private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n+        org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n     private static final long serialVersionUID = -5891506955608084664L;\n \n     @Inject\n@@ -81,9 +82,9 @@ public class ContactAdminAction implements Serializable {\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n             VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(\n-                    fromLoginName, fromName, replyEmail, subject, message);\n+                fromLoginName, fromName, replyEmail, subject, message);\n             facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+                .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, fromLoginName);\n         }\n@@ -97,9 +98,9 @@ public class ContactAdminAction implements Serializable {\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n             VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n-                    ipAddress, subject, message);\n+                ipAddress, subject, message);\n             facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+                .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, ipAddress);\n         }\n@@ -108,16 +109,16 @@ public class ContactAdminAction implements Serializable {\n     @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n     private void sendEmailFailedNotification(Exception e, String fromName) {\n         StringBuilder sb = new StringBuilder()\n-                .append(\"Failed to send email with subject \\'\").append(subject)\n-                .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n-                .append(fromName).append(\"\\'\");\n+            .append(\"Failed to send email with subject \\'\").append(subject)\n+            .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n+            .append(fromName).append(\"\\'\");\n         log.error(sb.toString(), e);\n         facesMessages.addGlobal(sb.toString());\n     }\n \n     private String getClientIp() {\n         HttpServletRequest request = (HttpServletRequest) FacesContext\n-                .getCurrentInstance().getExternalContext().getRequest();\n+            .getCurrentInstance().getExternalContext().getRequest();\n         return HttpUtil.getClientIp(request);\n     }\n \n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/44/ContactAdminAction.java\nindex 6fa8a5fee1..bdb2ada028 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/44/ContactAdminAction.java\n@@ -39,7 +39,6 @@ import org.zanata.util.HttpUtil;\n import javax.faces.context.FacesContext;\n import javax.servlet.http.HttpServletRequest;\n import javax.validation.constraints.Size;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n /**\n@@ -48,24 +47,29 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n  *\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"contactAdminAction\")\n @ViewScoped\n @Model\n @Transactional\n public class ContactAdminAction implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n     private static final long serialVersionUID = -5891506955608084664L;\n \n     @Inject\n     @Authenticated\n     private HAccount authenticatedAccount;\n+\n     @Inject\n     private EmailService emailServiceImpl;\n+\n     @Inject\n     private Messages msgs;\n+\n     @Inject\n     private FacesMessages facesMessages;\n+\n     @Size(max = 300)\n     private String message;\n     private String subject;\n@@ -73,6 +77,7 @@ public class ContactAdminAction implements Serializable {\n     /**\n      * Send email to admin by registered user.\n      */\n+\n     @CheckLoggedIn\n     public void send() {\n         String fromName = authenticatedAccount.getPerson().getName();\n@@ -80,10 +85,8 @@ public class ContactAdminAction implements Serializable {\n         String replyEmail = authenticatedAccount.getPerson().getEmail();\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n-            VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(\n-                    fromLoginName, fromName, replyEmail, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+            VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(fromLoginName, fromName, replyEmail, subject, message);\n+            facesMessages.addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, fromLoginName);\n         }\n@@ -92,32 +95,34 @@ public class ContactAdminAction implements Serializable {\n     /**\n      * Send email to admin by anonymous user.\n      */\n+\n     public void sendAnonymous() {\n         String ipAddress = getClientIp(); // client ip address\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n-            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n-                    ipAddress, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(ipAddress, subject, message);\n+            facesMessages.addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, ipAddress);\n         }\n     }\n \n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+    @SuppressFBWarnings({ \"SLF4J_FORMAT_SHOULD_BE_CONST\" })\n     private void sendEmailFailedNotification(Exception e, String fromName) {\n-        StringBuilder sb = new StringBuilder()\n-                .append(\"Failed to send email with subject \\'\").append(subject)\n-                .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n-                .append(fromName).append(\"\\'\");\n+        StringBuilder sb = new StringBuilder().append(\"Failed to send email with subject \\'\")\n+                                              .append(subject)\n+                                              .append(\"\\' , message \\'\")\n+                                              .append(message)\n+                                              .append(\"\\', from \\'\")\n+                                              .append(fromName)\n+                                              .append(\"\\'\");\n         log.error(sb.toString(), e);\n         facesMessages.addGlobal(sb.toString());\n     }\n \n     private String getClientIp() {\n-        HttpServletRequest request = (HttpServletRequest) FacesContext\n-                .getCurrentInstance().getExternalContext().getRequest();\n+        HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext()\n+                                                                                           .getRequest();\n         return HttpUtil.getClientIp(request);\n     }\n \n@@ -136,4 +141,4 @@ public class ContactAdminAction implements Serializable {\n     public void setSubject(final String subject) {\n         this.subject = subject;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/44/ContactAdminAction.java\nindex 6fa8a5fee1..23ac1420a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/44/ContactAdminAction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/44/ContactAdminAction.java\n@@ -93,47 +93,50 @@ public class ContactAdminAction implements Serializable {\n      * Send email to admin by anonymous user.\n      */\n     public void sendAnonymous() {\n-        String ipAddress = getClientIp(); // client ip address\n-        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n-        try {\n-            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n-                    ipAddress, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n-        } catch (Exception e) {\n-            sendEmailFailedNotification(e, ipAddress);\n-        }\n-    }\n \n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n-    private void sendEmailFailedNotification(Exception e, String fromName) {\n-        StringBuilder sb = new StringBuilder()\n-                .append(\"Failed to send email with subject \\'\").append(subject)\n-                .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n-                .append(fromName).append(\"\\'\");\n-        log.error(sb.toString(), e);\n-        facesMessages.addGlobal(sb.toString());\n-    }\n+    String\n+    ipAddress = getClientIp(); // client ip address\n+         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n+         try {\n+             VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n+                     ipAddress, subject, message);\n+             facesMessages\n+                     .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+         } catch (Exception e) {\n+             sendEmailFailedNotification(e, ipAddress);\n+         }\n+     }\n \n-    private String getClientIp() {\n-        HttpServletRequest request = (HttpServletRequest) FacesContext\n-                .getCurrentInstance().getExternalContext().getRequest();\n-        return HttpUtil.getClientIp(request);\n-    }\n+     @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+     private void sendEmailFailedNotification(Exception e, String fromName) {\n+         StringBuilder sb = new StringBuilder()\n+                 .append(\"Failed to send email with subject \\'\").append(subject)\n+                 .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n+                 .append(fromName).append(\"\\'\");\n+         log.error(sb.toString(), e);\n+         facesMessages.addGlobal(sb.toString());\n+     }\n \n-    public String getMessage() {\n-        return this.message;\n-    }\n+     private String getClientIp() {\n+         HttpServletRequest request = (HttpServletRequest) FacesContext\n+                 .getCurrentInstance().getExternalContext().getRequest();\n+         return HttpUtil.getClientIp(request);\n+     }\n \n-    public void setMessage(final String message) {\n-        this.message = message;\n-    }\n+     public String getMessage() {\n+         return this.message;\n+     }\n \n-    public String getSubject() {\n-        return this.subject;\n-    }\n+     public void setMessage(final String message) {\n+         this.message = message;\n+     }\n \n-    public void setSubject(final String subject) {\n-        this.subject = subject;\n-    }\n-}\n+     public String getSubject() {\n+         return this.subject;\n+     }\n+\n+     public void setSubject(final String subject) {\n+         this.subject = subject;\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 52
        }
    ]
}