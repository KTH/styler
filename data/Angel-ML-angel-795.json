{
    "error_id": "795",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/795/PartitionIndex.java\nindex 640f539a0a..044a15b0a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/795/PartitionIndex.java\n@@ -20,25 +20,25 @@ import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n \n public class PartitionIndex {\n-  private final ConcurrentHashMap<Integer, ColumnIndex> rowIndexes;\n+    private final ConcurrentHashMap<Integer, ColumnIndex> rowIndexes;\n \n-  public PartitionIndex() {\n-    this.rowIndexes = new ConcurrentHashMap<Integer, ColumnIndex>();\n-  }\n+    public PartitionIndex() {\n+        this.rowIndexes = new ConcurrentHashMap<Integer, ColumnIndex>();\n+    }\n \n-  public void addColumnIndex(int rowIndex, ColumnIndex index) {\n-    ColumnIndex oldIndex = rowIndexes.get(rowIndex);\n-    if (oldIndex == null) {\n-      oldIndex = rowIndexes.putIfAbsent(rowIndex, index);\n-      if (oldIndex != null) {\n-        index.merge(oldIndex);\n-      }\n+    public void addColumnIndex(int rowIndex, ColumnIndex index) {\n+        ColumnIndex oldIndex = rowIndexes.get(rowIndex);\n+        if (oldIndex == null) {\n+            oldIndex = rowIndexes.putIfAbsent(rowIndex, index);\n+            if (oldIndex != null) {\n+                index.merge(oldIndex);\n+            }\n+        }\n     }\n-  }\n \n-  public void merge(PartitionIndex index) {\n-    for (Entry<Integer, ColumnIndex> rowIndex : index.rowIndexes.entrySet()) {\n-      addColumnIndex(rowIndex.getKey(), rowIndex.getValue());\n+    public void merge(PartitionIndex index) {\n+        for (Entry<Integer, ColumnIndex> rowIndex : index.rowIndexes.entrySet()) {\n+            addColumnIndex(rowIndex.getKey(), rowIndex.getValue());\n+        }\n     }\n-  }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/795/PartitionIndex.java\nindex 640f539a0a..0d96187d00 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/795/PartitionIndex.java\n@@ -41,4 +41,4 @@ public class PartitionIndex {\n       addColumnIndex(rowIndex.getKey(), rowIndex.getValue());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/795/PartitionIndex.java\nindex 640f539a0a..5a773767e0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/795/PartitionIndex.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/795/PartitionIndex.java\n@@ -20,25 +20,26 @@ import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n \n public class PartitionIndex {\n-  private final ConcurrentHashMap<Integer, ColumnIndex> rowIndexes;\n+    private final ConcurrentHashMap<Integer, ColumnIndex> rowIndexes;\n \n-  public PartitionIndex() {\n+    public PartitionIndex() {\n     this.rowIndexes = new ConcurrentHashMap<Integer, ColumnIndex>();\n-  }\n+    }\n \n-  public void addColumnIndex(int rowIndex, ColumnIndex index) {\n+    public void addColumnIndex(int rowIndex, ColumnIndex index) {\n     ColumnIndex oldIndex = rowIndexes.get(rowIndex);\n     if (oldIndex == null) {\n-      oldIndex = rowIndexes.putIfAbsent(rowIndex, index);\n-      if (oldIndex != null) {\n+        oldIndex = rowIndexes.putIfAbsent(rowIndex, index);\n+        if (oldIndex != null) {\n         index.merge(oldIndex);\n-      }\n+        }\n+    }\n     }\n-  }\n \n-  public void merge(PartitionIndex index) {\n+    public void merge(PartitionIndex index) {\n     for (Entry<Integer, ColumnIndex> rowIndex : index.rowIndexes.entrySet()) {\n-      addColumnIndex(rowIndex.getKey(), rowIndex.getValue());\n+        addColumnIndex(rowIndex.getKey(), rowIndex.getValue());\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}