{
    "error_id": "61",
    "information": {
        "errors": [
            {
                "line": "206",
                "column": "34",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  }\n\n  public TslLoader getTslLoader(){\n    return tslLoader;\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/61/LazyTslCertificateSource.java\nindex 87584cc487..5961097e80 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/61/LazyTslCertificateSource.java\n@@ -203,7 +203,7 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     this.cacheExpirationTime = cacheExpirationTime;\n   }\n \n-  public TslLoader getTslLoader(){\n+  public TslLoader getTslLoader() {\n     return tslLoader;\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/61/LazyTslCertificateSource.java\nindex 87584cc487..32ecbdf873 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/61/LazyTslCertificateSource.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.tsl;\n \n@@ -32,12 +32,12 @@ import eu.europa.esig.dss.x509.CertificateToken;\n /**\n  * Lazily initialized certificate source. It allows to initialize objects and populate parameters\n  * where a certificate source is necessary, but is not yet accessed.\n- *\n+ * <p>\n  * The goal is to postpone initialization and downloading of TSL until it is really needed to speed up processes.\n  * For example, it is not necessary to download TSL to open container and see signature parameters, but DSS library\n  * requires the presence of certificate source. TSL should be downloaded for validation and other functionality where\n  * it is really necessary to check the certificates.\n- *\n+ * <p>\n  * To achieve that, a lazily initialized certificate source is used.\n  */\n public class LazyTslCertificateSource extends TrustedListsCertificateSource implements TSLCertificateSource {\n@@ -203,7 +203,7 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     this.cacheExpirationTime = cacheExpirationTime;\n   }\n \n-  public TslLoader getTslLoader(){\n+  public TslLoader getTslLoader() {\n     return tslLoader;\n   }\n \n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "183",
                    "column": "23",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/61/LazyTslCertificateSource.java\nindex 87584cc487..9e62f51650 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/61/LazyTslCertificateSource.java\n@@ -180,7 +180,7 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     }\n     long currentTime = new Date().getTime();\n     long timeToReload = this.lastCacheReloadingTime + this.cacheExpirationTime;\n-    return currentTime > timeToReload;\n+    return currentTime> timeToReload;\n   }\n \n   private String getNextCacheExpirationDate() {\n@@ -203,8 +203,8 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     this.cacheExpirationTime = cacheExpirationTime;\n   }\n \n-  public TslLoader getTslLoader(){\n+  public TslLoader getTslLoader() {\n     return tslLoader;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/61/LazyTslCertificateSource.java\nindex 87584cc487..244878f5d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/61/LazyTslCertificateSource.java\n@@ -12,9 +12,7 @@ package org.digidoc4j.impl.asic.tsl;\n \n import java.security.cert.X509Certificate;\n import java.util.*;\n-\n import javax.security.auth.x500.X500Principal;\n-\n import eu.europa.esig.dss.tsl.TLInfo;\n import eu.europa.esig.dss.tsl.TrustedListsCertificateSource;\n import eu.europa.esig.dss.x509.CertificateSourceType;\n@@ -22,7 +20,6 @@ import org.digidoc4j.TSLCertificateSource;\n import org.digidoc4j.exceptions.TslCertificateSourceInitializationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.DSSException;\n import eu.europa.esig.dss.tsl.ServiceInfo;\n import eu.europa.esig.dss.tsl.service.TSLValidationJob;\n@@ -40,171 +37,180 @@ import eu.europa.esig.dss.x509.CertificateToken;\n  *\n  * To achieve that, a lazily initialized certificate source is used.\n  */\n+\n+\n public class LazyTslCertificateSource extends TrustedListsCertificateSource implements TSLCertificateSource {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(LazyTslCertificateSource.class);\n-  private transient TSLValidationJob tslValidationJob;\n-  private TSLCertificateSource certificateSource;\n-  private Long lastCacheReloadingTime;\n-  private Long cacheExpirationTime;\n-  private TslLoader tslLoader;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LazyTslCertificateSource.class);\n+    private transient TSLValidationJob tslValidationJob;\n+    private TSLCertificateSource certificateSource;\n+    private Long lastCacheReloadingTime;\n+    private Long cacheExpirationTime;\n+    private TslLoader tslLoader;\n \n   /**\n    * @param tslLoader TSL loader\n    */\n-  public LazyTslCertificateSource(TslLoader tslLoader) {\n+\n+\n+    public LazyTslCertificateSource(TslLoader tslLoader) {\n     LOGGER.debug(\"Initializing lazy TSL certificate source\");\n     this.tslLoader = tslLoader;\n-  }\n+    }\n \n-  @Override\n-  public TLInfo getTlInfo(String countryCode) {\n+    @Override\n+    public TLInfo getTlInfo(String countryCode) {\n     return this.getCertificateSource().getTlInfo(countryCode);\n-  }\n+    }\n \n-  @Override\n-  public TLInfo getLotlInfo() {\n+    @Override\n+    public TLInfo getLotlInfo() {\n     return this.getCertificateSource().getLotlInfo();\n-  }\n+    }\n \n-  @Override\n-  public Map<String, TLInfo> getSummary() {\n+    @Override\n+    public Map<String, TLInfo> getSummary() {\n     return this.getSummary();\n-  }\n+    }\n \n-  @Override\n-  public CertificatePool getCertificatePool() {\n+    @Override\n+    public CertificatePool getCertificatePool() {\n     return this.getCertificateSource().getCertificatePool();\n-  }\n+    }\n \n-  @Override\n-  public int getNumberOfCertificates() {\n+    @Override\n+    public int getNumberOfCertificates() {\n     return this.getCertificateSource().getNumberOfCertificates();\n-  }\n+    }\n \n-  @Override\n-  public CertificateToken addCertificate(CertificateToken certificate) {\n+    @Override\n+    public CertificateToken addCertificate(CertificateToken certificate) {\n     return this.getCertificateSource().addCertificate(certificate);\n-  }\n+    }\n \n-  @Override\n-  public List<CertificateToken> get(X500Principal x500Principal) {\n+    @Override\n+    public List<CertificateToken> get(X500Principal x500Principal) {\n     return this.getCertificateSource().get(x500Principal);\n-  }\n+    }\n \n-  @Override\n-  public Set<ServiceInfo> getTrustServices(CertificateToken token) {\n+    @Override\n+    public Set<ServiceInfo> getTrustServices(CertificateToken token) {\n     return this.getCertificateSource().getTrustServices(token);\n-  }\n+    }\n \n-  @Override\n-  public CertificateSourceType getCertificateSourceType() {\n+    @Override\n+    public CertificateSourceType getCertificateSourceType() {\n     return CertificateSourceType.TRUSTED_LIST;\n-  }\n+    }\n \n-  @Override\n-  public void addTSLCertificate(X509Certificate certificate) {\n+    @Override\n+    public void addTSLCertificate(X509Certificate certificate) {\n     this.getCertificateSource().addTSLCertificate(certificate);\n-  }\n+    }\n \n-  @Override\n-  public void addCertificate(CertificateToken certificate, List<ServiceInfo> serviceInfos) {\n+    @Override\n+    public void addCertificate(CertificateToken certificate, List<ServiceInfo> serviceInfos) {\n     this.getCertificateSource().addCertificate(certificate, serviceInfos);\n-  }\n+    }\n \n-  @Override\n-  public List<CertificateToken> getCertificates() {\n+    @Override\n+    public List<CertificateToken> getCertificates() {\n     return this.getCertificateSource().getCertificates();\n-  }\n+    }\n \n-  @Override\n-  public void invalidateCache() {\n+    @Override\n+    public void invalidateCache() {\n     LOGGER.debug(\"Invalidating TSL cache\");\n     TslLoader.invalidateCache();\n-  }\n+    }\n \n-  @Override\n-  public void refresh() {\n+    @Override\n+    public void refresh() {\n     this.refreshTsl();\n-  }\n+    }\n \n   /*\n    * RESTRICTED METHODS\n    */\n \n-  protected void refreshIfCacheExpired() {\n+    protected void refreshIfCacheExpired() {\n     if (this.isCacheExpired()) {\n-      this.initTsl();\n+        this.initTsl();\n+    }\n     }\n-  }\n \n-  private TSLCertificateSource getCertificateSource() {\n+    private TSLCertificateSource getCertificateSource() {\n     LOGGER.debug(\"Accessing TSL\");\n     this.refreshIfCacheExpired();\n     return this.certificateSource;\n-  }\n+    }\n \n-  private synchronized void initTsl() {\n+    private synchronized void initTsl() {\n     //Using double-checked locking to avoid other threads to start loading TSL\n     if (this.isCacheExpired()) {\n-      LOGGER.debug(\"Initializing TSL\");\n-      this.refreshTsl();\n+        LOGGER.debug(\"Initializing TSL\");\n+        this.refreshTsl();\n+    }\n     }\n-  }\n \n-  private synchronized void refreshTsl() {\n+    private synchronized void refreshTsl() {\n     try {\n-      this.populateTsl();\n-      LOGGER.debug(\"Refreshing TSL\");\n-      this.tslValidationJob.refresh();\n-      this.lastCacheReloadingTime = new Date().getTime();\n-      if (LOGGER.isDebugEnabled()) {\n-        LOGGER.debug(\"Finished refreshing TSL, cache expires at {}\", this.getNextCacheExpirationDate());\n-      }\n+        this.populateTsl();\n+        LOGGER.debug(\"Refreshing TSL\");\n+        this.tslValidationJob.refresh();\n+        this.lastCacheReloadingTime = new Date().getTime();\n+        if (LOGGER.isDebugEnabled()) {\n+        LOGGER.debug(\"Finished refreshing TSL, cache expires at {}\",\n+            this.getNextCacheExpirationDate());\n+        }\n     } catch (DSSException e) {\n       throw new TslCertificateSourceInitializationException(\"Unable to load TSL\", e);\n     }\n-  }\n+    }\n \n-  private void populateTsl() {\n+    private void populateTsl() {\n     if (this.tslValidationJob == null || this.certificateSource == null) {\n-      this.tslLoader.prepareTsl();\n-      this.tslValidationJob = this.tslLoader.getTslValidationJob();\n-      this.certificateSource = this.tslLoader.getTslCertificateSource();\n+        this.tslLoader.prepareTsl();\n+        this.tslValidationJob = this.tslLoader.getTslValidationJob();\n+        this.certificateSource = this.tslLoader.getTslCertificateSource();\n+    }\n     }\n-  }\n \n-  private boolean isCacheExpired() {\n+    private boolean isCacheExpired() {\n     if (this.lastCacheReloadingTime == null) {\n-      return true;\n+        return true;\n     }\n     long currentTime = new Date().getTime();\n     long timeToReload = this.lastCacheReloadingTime + this.cacheExpirationTime;\n     return currentTime > timeToReload;\n-  }\n+    }\n \n-  private String getNextCacheExpirationDate() {\n+    private String getNextCacheExpirationDate() {\n     return new Date(this.lastCacheReloadingTime + this.cacheExpirationTime).toString();\n-  }\n+    }\n \n   /*\n    * ACCESSORS\n    */\n \n-  public Long getLastCacheReloadingTime() {\n+\n+    public Long getLastCacheReloadingTime() {\n     return lastCacheReloadingTime;\n-  }\n+    }\n \n-  public Long getCacheExpirationTime() {\n+\n+    public Long getCacheExpirationTime() {\n     return cacheExpirationTime;\n-  }\n+    }\n \n-  public void setCacheExpirationTime(Long cacheExpirationTime) {\n+\n+    public void setCacheExpirationTime(Long cacheExpirationTime) {\n     this.cacheExpirationTime = cacheExpirationTime;\n-  }\n+    }\n \n-  public TslLoader getTslLoader(){\n+\n+    public TslLoader getTslLoader() {\n     return tslLoader;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/61/LazyTslCertificateSource.java\nindex 87584cc487..5961097e80 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/61/LazyTslCertificateSource.java\n@@ -203,7 +203,7 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     this.cacheExpirationTime = cacheExpirationTime;\n   }\n \n-  public TslLoader getTslLoader(){\n+  public TslLoader getTslLoader() {\n     return tslLoader;\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "206",
                    "column": "35",
                    "severity": "error",
                    "message": "'{' at column 35 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "35",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "206",
                    "column": "36",
                    "severity": "error",
                    "message": "'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/61/LazyTslCertificateSource.java\nindex 87584cc487..ccdf841047 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/61/LazyTslCertificateSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/61/LazyTslCertificateSource.java\n@@ -203,8 +203,7 @@ public class LazyTslCertificateSource extends TrustedListsCertificateSource impl\n     this.cacheExpirationTime = cacheExpirationTime;\n   }\n \n-  public TslLoader getTslLoader(){\n-    return tslLoader;\n-  }\n+  public TslLoader getTslLoader() {return tslLoader;\n+}\n \n }\n",
            "diff_size": 3
        }
    ]
}