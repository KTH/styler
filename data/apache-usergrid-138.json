{
    "error_id": "138",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * Utilities to deal with query extraction and generation\n *\n * @author zznate\n */\npublic class QueryUtils {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/138/QueryUtils.java\nindex b2397c8e8d..f683432039 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/138/QueryUtils.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence;\n \n \n@@ -37,62 +38,61 @@ import static org.apache.usergrid.utils.ClassUtils.cast;\n  */\n public class QueryUtils {\n \n-    public static final String PARAM_QL = \"ql\";\n-    public static final String PARAM_Q = \"q\";\n-    public static final String PARAM_QUERY = \"query\";\n+  public static final String PARAM_QL = \"ql\";\n+  public static final String PARAM_Q = \"q\";\n+  public static final String PARAM_QUERY = \"query\";\n \n \n-    public static String queryStrFrom( Map<String, List<String>> params ) {\n-        if ( params.containsKey( PARAM_QL ) ) {\n-            return ListUtils.first( params.get( PARAM_QL ) );\n-        }\n-        else if ( params.containsKey( PARAM_Q ) ) {\n-            return ListUtils.first( params.get( PARAM_Q ) );\n-        }\n-        else if ( params.containsKey( PARAM_QUERY ) ) {\n-            return ListUtils.first( params.get( PARAM_QUERY ) );\n-        }\n-        return null;\n+  public static String queryStrFrom(Map<String, List<String>> params) {\n+    if (params.containsKey(PARAM_QL)) {\n+      return ListUtils.first(params.get(PARAM_QL));\n+    } else if (params.containsKey(PARAM_Q)) {\n+      return ListUtils.first(params.get(PARAM_Q));\n+    } else if (params.containsKey(PARAM_QUERY)) {\n+      return ListUtils.first(params.get(PARAM_QUERY));\n+    }\n+    return null;\n+  }\n+\n+\n+  /**\n+   * When a query has select fields, parse the results into a result set by the field mappings\n+   *\n+   * @param q\n+   * @param rs\n+   * @return\n+   */\n+  public static List<Object> getSelectionResults(Query q, Results rs) {\n+\n+    List<Entity> entities = rs.getEntities();\n+    if (entities == null) {\n+      return null;\n     }\n \n+    if (!q.hasSelectSubjects()) {\n+      return cast(entities);\n+    }\n \n-    /**\n-     * When a query has select fields, parse the results into a result set by the field mappings\n-     * @param q\n-     * @param rs\n-     * @return\n-     */\n-    public static List<Object> getSelectionResults( Query q, Results rs ) {\n-\n-        List<Entity> entities = rs.getEntities();\n-        if ( entities == null ) {\n-            return null;\n-        }\n-\n-        if ( !q.hasSelectSubjects() ) {\n-            return cast( entities );\n-        }\n-\n-        List<Object> results = new ArrayList<Object>();\n+    List<Object> results = new ArrayList<Object>();\n \n-        for ( Entity entity : entities ) {\n+    for (Entity entity : entities) {\n \n \n-            Collection<SelectFieldMapping> selects = q.getSelectAssignments();\n-            for ( SelectFieldMapping select : selects ) {\n-                Object obj = JsonUtils.select( entity, select.getSourceFieldName(), false );\n-                if ( obj != null ) {\n-                    Map<String, Object> result = new LinkedHashMap<String, Object>();\n-                    result.put( select.getTargetFieldName(), obj );\n-                    results.add( result );\n-                }\n-            }\n-        }\n-\n-        if ( results.size() == 0 ) {\n-            return null;\n+      Collection<SelectFieldMapping> selects = q.getSelectAssignments();\n+      for (SelectFieldMapping select : selects) {\n+        Object obj = JsonUtils.select(entity, select.getSourceFieldName(), false);\n+        if (obj != null) {\n+          Map<String, Object> result = new LinkedHashMap<String, Object>();\n+          result.put(select.getTargetFieldName(), obj);\n+          results.add(result);\n         }\n+      }\n+    }\n \n-        return results;\n+    if (results.size() == 0) {\n+      return null;\n     }\n+\n+    return results;\n+  }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/138/QueryUtils.java\nindex b2397c8e8d..0a72c9896f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/138/QueryUtils.java\n@@ -76,9 +76,7 @@ public class QueryUtils {\n         List<Object> results = new ArrayList<Object>();\n \n         for ( Entity entity : entities ) {\n-\n-\n-            Collection<SelectFieldMapping> selects = q.getSelectAssignments();\n+    Collection<SelectFieldMapping> selects = q.getSelectAssignments();\n             for ( SelectFieldMapping select : selects ) {\n                 Object obj = JsonUtils.select( entity, select.getSourceFieldName(), false );\n                 if ( obj != null ) {\n@@ -95,4 +93,4 @@ public class QueryUtils {\n \n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/138/QueryUtils.java\nindex b2397c8e8d..69a757f08a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/138/QueryUtils.java\n@@ -22,7 +22,6 @@ import java.util.Collection;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.usergrid.persistence.index.SelectFieldMapping;\n import org.apache.usergrid.utils.JsonUtils;\n import org.apache.usergrid.utils.ListUtils;\n@@ -35,13 +34,13 @@ import static org.apache.usergrid.utils.ClassUtils.cast;\n  *\n  * @author zznate\n  */\n+\n+\n public class QueryUtils {\n \n     public static final String PARAM_QL = \"ql\";\n     public static final String PARAM_Q = \"q\";\n     public static final String PARAM_QUERY = \"query\";\n-\n-\n     public static String queryStrFrom( Map<String, List<String>> params ) {\n         if ( params.containsKey( PARAM_QL ) ) {\n             return ListUtils.first( params.get( PARAM_QL ) );\n@@ -50,8 +49,8 @@ public class QueryUtils {\n             return ListUtils.first( params.get( PARAM_Q ) );\n         }\n         else if ( params.containsKey( PARAM_QUERY ) ) {\n-            return ListUtils.first( params.get( PARAM_QUERY ) );\n-        }\n+                 return ListUtils.first( params.get( PARAM_QUERY ) );\n+             }\n         return null;\n     }\n \n@@ -62,22 +61,18 @@ public class QueryUtils {\n      * @param rs\n      * @return\n      */\n-    public static List<Object> getSelectionResults( Query q, Results rs ) {\n \n+\n+    public static List<Object> getSelectionResults( Query q, Results rs ) {\n         List<Entity> entities = rs.getEntities();\n         if ( entities == null ) {\n             return null;\n         }\n-\n         if ( !q.hasSelectSubjects() ) {\n             return cast( entities );\n         }\n-\n         List<Object> results = new ArrayList<Object>();\n-\n         for ( Entity entity : entities ) {\n-\n-\n             Collection<SelectFieldMapping> selects = q.getSelectAssignments();\n             for ( SelectFieldMapping select : selects ) {\n                 Object obj = JsonUtils.select( entity, select.getSourceFieldName(), false );\n@@ -88,11 +83,9 @@ public class QueryUtils {\n                 }\n             }\n         }\n-\n         if ( results.size() == 0 ) {\n             return null;\n         }\n-\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/138/QueryUtils.java\nindex b2397c8e8d..c0ba841d6e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/138/QueryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/138/QueryUtils.java\n@@ -29,7 +29,6 @@ import org.apache.usergrid.utils.ListUtils;\n \n import static org.apache.usergrid.utils.ClassUtils.cast;\n \n-\n /**\n  * Utilities to deal with query extraction and generation\n  *\n",
            "diff_size": 1
        }
    ]
}