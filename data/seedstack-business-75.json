{
    "error_id": "75",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.utils;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/75/BusinessUtils.java\nindex 9a7462b6d9..eda1c696c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/75/BusinessUtils.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.utils;\n+\n+package org .seedstack.business.internal.utils;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/75/BusinessUtils.java\nindex 9a7462b6d9..b54184d2b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/75/BusinessUtils.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.utils;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -83,7 +84,7 @@ public final class BusinessUtils {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Stream<Class<? extends T>> streamClasses(Collection<Class<?>> classes,\n-            Class<? extends T> baseClass) {\n+                                                               Class<? extends T> baseClass) {\n         return classes\n                 .stream()\n                 .filter(ClassPredicates.classIsDescendantOf(baseClass))\n@@ -111,8 +112,9 @@ public final class BusinessUtils {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Optional<Key<T>> resolveDefaultQualifier(Map<Key<?>, Class<?>> bindings,\n-            ClassConfiguration<?> classConfiguration, String property, Class<?> qualifiedClass,\n-            TypeLiteral<T> genericInterface) {\n+                                                               ClassConfiguration<?> classConfiguration,\n+                                                               String property, Class<?> qualifiedClass,\n+                                                               TypeLiteral<T> genericInterface) {\n         Key<T> key = null;\n \n         if (classConfiguration != null && !classConfiguration.isEmpty()) {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/75/BusinessUtils.java\nindex 9a7462b6d9..29f75326aa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/75/BusinessUtils.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.utils;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -82,10 +83,8 @@ public final class BusinessUtils {\n      * typed stream of it.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Stream<Class<? extends T>> streamClasses(Collection<Class<?>> classes,\n-            Class<? extends T> baseClass) {\n-        return classes\n-                .stream()\n+    public static <T> Stream<Class<? extends T>> streamClasses(Collection<Class<?>> classes, Class<? extends T> baseClass) {\n+    return classes.stream()\n                 .filter(ClassPredicates.classIsDescendantOf(baseClass))\n                 .map(c -> (Class<T>) c);\n     }\n@@ -110,12 +109,9 @@ public final class BusinessUtils {\n      * Returns the Guice key qualified with the default qualifier configured for the specified class.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Optional<Key<T>> resolveDefaultQualifier(Map<Key<?>, Class<?>> bindings,\n-            ClassConfiguration<?> classConfiguration, String property, Class<?> qualifiedClass,\n-            TypeLiteral<T> genericInterface) {\n-        Key<T> key = null;\n-\n-        if (classConfiguration != null && !classConfiguration.isEmpty()) {\n+    public static <T> Optional<Key<T>> resolveDefaultQualifier(Map<Key<?>, Class<?>> bindings, ClassConfiguration<?> classConfiguration, String property, Class<?> qualifiedClass, TypeLiteral<T> genericInterface) {\n+    Key<T> key = null;\n+if (classConfiguration != null && !classConfiguration.isEmpty()) {\n             String qualifierName = classConfiguration.get(property);\n             if (qualifierName != null && !\"\".equals(qualifierName)) {\n                 try {\n@@ -133,8 +129,7 @@ public final class BusinessUtils {\n                 }\n             }\n         }\n-\n-        if (key == null || bindings.containsKey(Key.get(key.getTypeLiteral()))) {\n+if (key == null || bindings.containsKey(Key.get(key.getTypeLiteral()))) {\n             return Optional.empty();\n         } else {\n             return Optional.of(key);\n@@ -146,15 +141,13 @@ public final class BusinessUtils {\n      * the mix.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static Set<Class<? extends AggregateRoot<?>>> includeSuperClasses(\n-            Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n-        Set<Class<? extends AggregateRoot<?>>> results = new HashSet<>();\n+    public static Set<Class<? extends AggregateRoot<?>>> includeSuperClasses(Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n+    Set<Class<? extends AggregateRoot<?>>> results = new HashSet<>();\n         for (Class<?> aggregateClass : aggregateClasses) {\n             Class<?> classToAdd = aggregateClass;\n             while (classToAdd != null) {\n-                if (AggregateRoot.class.isAssignableFrom(classToAdd) && !classToAdd.equals(\n-                        BaseAggregateRoot.class) && !classToAdd.equals(AggregateRoot.class)) {\n-                    results.add((Class<? extends AggregateRoot<?>>) classToAdd);\n+                if (AggregateRoot.class.isAssignableFrom(classToAdd) && !classToAdd.equals(BaseAggregateRoot.class) && !classToAdd.equals(AggregateRoot.class)) {\n+    results.add((Class<? extends AggregateRoot<?>>) classToAdd);\n                     classToAdd = classToAdd.getSuperclass();\n                 } else {\n                     break;\n@@ -163,4 +156,4 @@ public final class BusinessUtils {\n         }\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "25",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "column": "7",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 24, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 20, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "column": "21",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "143",
                    "column": "24",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/75/BusinessUtils.java\nindex 9a7462b6d9..c7008b7297 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/75/BusinessUtils.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.internal.utils;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n import com.google.inject.Key;\n import com.google.inject.TypeLiteral;\n import com.google.inject.name.Names;\n@@ -33,6 +32,7 @@ import org.seedstack.shed.reflect.AnnotationPredicates;\n import org.seedstack.shed.reflect.Annotations;\n import org.seedstack.shed.reflect.ClassPredicates;\n \n+\n public final class BusinessUtils {\n \n     private BusinessUtils() {\n@@ -47,17 +47,20 @@ public final class BusinessUtils {\n      * @param <T>       the type of the superclass.\n      * @return the resolved types.\n      */\n+\n+\n     public static <T> Class<?>[] resolveGenerics(Class<T> superType, Class<? extends T> subType) {\n         checkNotNull(superType, \"superType should not be null\");\n         checkNotNull(subType, \"subType should not be null\");\n         Class<?> subTypeWithoutProxy = ProxyUtils.cleanProxy(subType);\n         return TypeResolver.resolveRawArguments(TypeResolver.resolveGenericType(superType, subTypeWithoutProxy),\n-                subTypeWithoutProxy);\n+            subTypeWithoutProxy);\n     }\n \n     /**\n      * Returns the identifier class for an aggregate root class.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     public static <A extends AggregateRoot<I>, I> Class<I> resolveAggregateIdClass(Class<A> aggregateRootClass) {\n         checkNotNull(aggregateRootClass, \"aggregateRootClass should not be null\");\n@@ -68,11 +71,14 @@ public final class BusinessUtils {\n      * Returns an arrays of all identifier class corresponding the the given array of aggregate root\n      * classes.\n      */\n+\n+\n     public static Class<?>[] getAggregateIdClasses(Class<? extends AggregateRoot<?>>[] aggregateRootClasses) {\n         checkNotNull(aggregateRootClasses, \"aggregateRootClasses should not be null\");\n-        Class<?>[] result = new Class<?>[aggregateRootClasses.length];\n-        for (int i = 0; i < aggregateRootClasses.length; i++) {\n-            result[i] = resolveGenerics(AggregateRoot.class, aggregateRootClasses[i])[0];\n+        Class<?>[] result = new Class<?> [ aggregateRootClasses.length];\n+        for(int i = 0;i <aggregateRootClasses.length;\n+i++) {\n+            result[ i] = resolveGenerics(AggregateRoot.class, aggregateRootClasses[i])[0];\n         }\n         return result;\n     }\n@@ -81,18 +87,18 @@ public final class BusinessUtils {\n      * Checks that classes satisfying a specification are assignable to a base class and return a\n      * typed stream of it.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Stream<Class<? extends T>> streamClasses(Collection<Class<?>> classes,\n-            Class<? extends T> baseClass) {\n-        return classes\n-                .stream()\n-                .filter(ClassPredicates.classIsDescendantOf(baseClass))\n-                .map(c -> (Class<T>) c);\n+    public static <T> Stream<Class<? extends T>> streamClasses(Collection<Class<?>> classes, Class<? extends T> baseClass) {\n+        return classes.stream().filter(ClassPredicates.classIsDescendantOf(baseClass))\n+.map(c-> (Class<T>) c);\n     }\n \n     /**\n      * Optionally returns the qualifier annotation of a class.\n      */\n+\n+\n     public static Optional<Annotation> getQualifier(AnnotatedElement annotatedElement) {\n         AnnotatedElement cleanedAnnotatedElement;\n         if (annotatedElement instanceof Class<?>) {\n@@ -100,41 +106,41 @@ public final class BusinessUtils {\n         } else {\n             cleanedAnnotatedElement = annotatedElement;\n         }\n-        return Annotations.on(cleanedAnnotatedElement)\n-                .findAll()\n-                .filter(AnnotationPredicates.annotationAnnotatedWith(Qualifier.class, false))\n-                .findFirst();\n+        return Annotations.on(cleanedAnnotatedElement).findAll()\n+.filter(AnnotationPredicates.annotationAnnotatedWith(Qualifier.class, false))\n+.findFirst();\n     }\n \n     /**\n      * Returns the Guice key qualified with the default qualifier configured for the specified class.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> Optional<Key<T>> resolveDefaultQualifier(Map<Key<?>, Class<?>> bindings,\n-            ClassConfiguration<?> classConfiguration, String property, Class<?> qualifiedClass,\n-            TypeLiteral<T> genericInterface) {\n+    public static <T> Optional<Key<T>> resolveDefaultQualifier(Map<Key<?>, Class<?>> bindings, ClassConfiguration<?> classConfiguration, String property, Class<?> qualifiedClass, TypeLiteral<T> genericInterface) {\n         Key<T> key = null;\n-\n-        if (classConfiguration != null && !classConfiguration.isEmpty()) {\n+        if (classConfiguration != null && ! classConfiguration.isEmpty()) {\n             String qualifierName = classConfiguration.get(property);\n-            if (qualifierName != null && !\"\".equals(qualifierName)) {\n+            if (qualifierName != null && ! \"\"\n+                .equals(qualifierName)) {\n                 try {\n                     ClassLoader classLoader = ClassLoaders.findMostCompleteClassLoader(BusinessUtils.class);\n+\n                     Class<?> qualifierClass = classLoader.loadClass(qualifierName);\n-                    if (Annotation.class.isAssignableFrom(qualifierClass)) {\n+                    if (Annotation.class\n+                        .isAssignableFrom(qualifierClass)) {\n                         key = Key.get(genericInterface, (Class<? extends Annotation>) qualifierClass);\n                     } else {\n-                        throw BusinessException.createNew(BusinessErrorCode.CLASS_IS_NOT_AN_ANNOTATION)\n-                                .put(\"class\", qualifiedClass)\n-                                .put(\"qualifier\", qualifierName);\n+                        throw BusinessException.createNew(BusinessErrorCode.CLASS_IS_NOT_AN_ANNOTATION).put(\"class\", qualifiedClass)\n+.put(\"qualifier\", qualifierName);\n                     }\n-                } catch (ClassNotFoundException e) {\n+                }\n+\n+                    catch(ClassNotFoundException e) {\n                     key = Key.get(genericInterface, Names.named(qualifierName));\n                 }\n             }\n         }\n-\n-        if (key == null || bindings.containsKey(Key.get(key.getTypeLiteral()))) {\n+        if (key == null|| bindings.containsKey(Key.get(key.getTypeLiteral()))) {\n             return Optional.empty();\n         } else {\n             return Optional.of(key);\n@@ -145,15 +151,15 @@ public final class BusinessUtils {\n      * Walks the class hierarchy of each class in the given collection and adds its superclasses to\n      * the mix.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static Set<Class<? extends AggregateRoot<?>>> includeSuperClasses(\n-            Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n+    public static Set<Class<? extends AggregateRoot<?>>> includeSuperClasses(Collection<Class<? extends AggregateRoot>> aggregateClasses) {\n         Set<Class<? extends AggregateRoot<?>>> results = new HashSet<>();\n-        for (Class<?> aggregateClass : aggregateClasses) {\n+        for(Class<?> aggregateClass : aggregateClasses) {\n             Class<?> classToAdd = aggregateClass;\n-            while (classToAdd != null) {\n-                if (AggregateRoot.class.isAssignableFrom(classToAdd) && !classToAdd.equals(\n-                        BaseAggregateRoot.class) && !classToAdd.equals(AggregateRoot.class)) {\n+            while(classToAdd != null) {\n+                if (AggregateRoot.class\n+                    .isAssignableFrom(classToAdd) && ! classToAdd.equals(BaseAggregateRoot.class) && ! classToAdd.equals(AggregateRoot.class)) {\n                     results.add((Class<? extends AggregateRoot<?>>) classToAdd);\n                     classToAdd = classToAdd.getSuperclass();\n                 } else {\n@@ -163,4 +169,4 @@ public final class BusinessUtils {\n         }\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/75/BusinessUtils.java\nindex 9a7462b6d9..eda1c696c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/75/BusinessUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/75/BusinessUtils.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.utils;\n+\n+package org .seedstack.business.internal.utils;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}