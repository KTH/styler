{
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "25",
                "column": "68",
                "severity": "error",
                "message": "'}' at column 68 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidQuestionType constraintAnnotation) { }\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "25",
                    "column": "68",
                    "severity": "error",
                    "message": "'}' at column 68 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/104/ValidQuestionTypeValidator.java\nindex e13766050c..407bfd517d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/104/ValidQuestionTypeValidator.java\n@@ -14,7 +14,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n  * @author Daniel Katzberg\n  *\n  */\n-public class ValidQuestionTypeValidator implements \n+public class ValidQuestionTypeValidator implements\n     ConstraintValidator<ValidQuestionType, I18nString> {\n \n   /*\n@@ -31,12 +31,12 @@ public class ValidQuestionTypeValidator implements\n    */\n   @Override\n   public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n+\n     if (questionType == null) {\n       return true;\n     }\n \n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n+    if (Strings.isNullOrEmpty(questionType.getDe())\n         && Strings.isNullOrEmpty(questionType.getEn())) {\n       return true;\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/104/ValidQuestionTypeValidator.java\nindex e13766050c..14f40bc6db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/104/ValidQuestionTypeValidator.java\n@@ -10,11 +10,10 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n \n /**\n  * Validator of the question type. Only values from the class {@link QuestionTypes} are allowed.\n- * \n- * @author Daniel Katzberg\n  *\n+ * @author Daniel Katzberg\n  */\n-public class ValidQuestionTypeValidator implements \n+public class ValidQuestionTypeValidator implements\n     ConstraintValidator<ValidQuestionType, I18nString> {\n \n   /*\n@@ -22,21 +21,22 @@ public class ValidQuestionTypeValidator implements\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidQuestionType constraintAnnotation) { }\n+  public void initialize(ValidQuestionType constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n+   * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n   public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n+\n     if (questionType == null) {\n       return true;\n     }\n \n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n+    if (Strings.isNullOrEmpty(questionType.getDe())\n         && Strings.isNullOrEmpty(questionType.getEn())) {\n       return true;\n     }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/104/ValidQuestionTypeValidator.java\nindex e13766050c..26d84d9655 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/104/ValidQuestionTypeValidator.java\n@@ -16,13 +16,13 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n  */\n public class ValidQuestionTypeValidator implements \n     ConstraintValidator<ValidQuestionType, I18nString> {\n-\n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidQuestionType constraintAnnotation) { }\n+  public void initialize(ValidQuestionType constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -31,13 +31,11 @@ public class ValidQuestionTypeValidator implements\n    */\n   @Override\n   public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n-    if (questionType == null) {\n+  if (questionType == null) {\n       return true;\n     }\n \n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n-        && Strings.isNullOrEmpty(questionType.getEn())) {\n+    if (Strings.isNullOrEmpty(questionType.getDe()) && Strings.isNullOrEmpty(questionType.getEn())) {\n       return true;\n     }\n \n@@ -45,4 +43,4 @@ public class ValidQuestionTypeValidator implements\n     return QuestionTypes.ALL.contains(questionType);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/104/ValidQuestionTypeValidator.java\nindex e13766050c..10e3a83ff3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/104/ValidQuestionTypeValidator.java\n@@ -2,9 +2,7 @@ package eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import com.google.common.base.Strings;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n \n@@ -14,35 +12,39 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n  * @author Daniel Katzberg\n  *\n  */\n-public class ValidQuestionTypeValidator implements \n-    ConstraintValidator<ValidQuestionType, I18nString> {\n+\n+\n+public class ValidQuestionTypeValidator implements ConstraintValidator<ValidQuestionType, I18nString> {\n \n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n-  @Override\n-  public void initialize(ValidQuestionType constraintAnnotation) { }\n+\n+    @Override\n+    public void initialize(ValidQuestionType constraintAnnotation) {\n+\n+    }\n \n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n+\n+\n+    @Override\n+    public boolean isValid(I18nString questionType,\n+        ConstraintValidatorContext context) {\n     if (questionType == null) {\n-      return true;\n+        return true;\n     }\n-\n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n-        && Strings.isNullOrEmpty(questionType.getEn())) {\n-      return true;\n+    if (Strings.isNullOrEmpty(questionType.getDe()) && Strings.isNullOrEmpty(questionType.getEn())) {\n+        return true;\n     }\n \n     // check for scale levels\n-    return QuestionTypes.ALL.contains(questionType);\n-  }\n \n-}\n+    return QuestionTypes.ALL.contains(questionType);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "25",
                    "column": "68",
                    "severity": "error",
                    "message": "'}' at column 68 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/104/ValidQuestionTypeValidator.java\nindex e13766050c..407bfd517d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/104/ValidQuestionTypeValidator.java\n@@ -14,7 +14,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n  * @author Daniel Katzberg\n  *\n  */\n-public class ValidQuestionTypeValidator implements \n+public class ValidQuestionTypeValidator implements\n     ConstraintValidator<ValidQuestionType, I18nString> {\n \n   /*\n@@ -31,12 +31,12 @@ public class ValidQuestionTypeValidator implements\n    */\n   @Override\n   public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n+\n     if (questionType == null) {\n       return true;\n     }\n \n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n+    if (Strings.isNullOrEmpty(questionType.getDe())\n         && Strings.isNullOrEmpty(questionType.getEn())) {\n       return true;\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "25",
                    "column": "68",
                    "severity": "error",
                    "message": "'}' at column 68 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/104/ValidQuestionTypeValidator.java\nindex e13766050c..26548fdfdc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/104/ValidQuestionTypeValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/104/ValidQuestionTypeValidator.java\n@@ -14,7 +14,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.QuestionTypes;\n  * @author Daniel Katzberg\n  *\n  */\n-public class ValidQuestionTypeValidator implements \n+public class ValidQuestionTypeValidator implements\n     ConstraintValidator<ValidQuestionType, I18nString> {\n \n   /*\n@@ -23,20 +23,19 @@ public class ValidQuestionTypeValidator implements\n    */\n   @Override\n   public void initialize(ValidQuestionType constraintAnnotation) { }\n-\n-  /*\n+/*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n   public boolean isValid(I18nString questionType, ConstraintValidatorContext context) {\n-    \n+\n     if (questionType == null) {\n       return true;\n     }\n \n-    if (Strings.isNullOrEmpty(questionType.getDe()) \n+    if (Strings.isNullOrEmpty(questionType.getDe())\n         && Strings.isNullOrEmpty(questionType.getEn())) {\n       return true;\n     }\n",
            "diff_size": 5
        }
    ]
}