{
    "error_id": "350",
    "information": {
        "errors": [
            {
                "line": "180",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 116).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      float[] floats = Utils.floatListToArray(floatArray);\n      double[] doubles = Utils.doubleListToArray(doubleArray);\n      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n      partParams.add(partParam);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "181",
                    "column": "7",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                },
                {
                    "line": "181",
                    "column": "58",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/350/CommonParam.java\nindex 87b3f78817..9a1d336741 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/350/CommonParam.java\n@@ -177,8 +177,8 @@ public class CommonParam extends UpdateParam {\n       long[] longs = Utils.longListToArray(longArray);\n       float[] floats = Utils.floatListToArray(floatArray);\n       double[] doubles = Utils.doubleListToArray(doubleArray);\n-      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n-      partParams.add(partParam);\n+      PSFPartitionUpdateParam partParam = newPSFPartitionUpdateParam(matrixId,part,ints\n+      , longs, floats ,doubles);partParams.add(partParam);\n     }\n \n     return partParams;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/350/CommonParam.java\nindex 87b3f78817..4d322c06df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/350/CommonParam.java\n@@ -28,159 +28,160 @@ import java.util.List;\n \n public class CommonParam extends UpdateParam {\n \n-  public static class PSFPartitionUpdateParam extends PartitionUpdateParam {\n-    private int[] intArray;\n-    private long[] longArray;\n-    private float[] floatArray;\n-    private double[] doubleArray;\n-\n-    public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey,\n-                                   int[] ints, long[] longs, float[] floats, double[] doubles) {\n-      super(matrixId, partKey, false);\n-      intArray = ints;\n-      longArray = longs;\n-      floatArray = floats;\n-      doubleArray = doubles;\n+    public static class PSFPartitionUpdateParam extends PartitionUpdateParam {\n+        private int[] intArray;\n+        private long[] longArray;\n+        private float[] floatArray;\n+        private double[] doubleArray;\n+\n+        public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey,\n+                                       int[] ints, long[] longs, float[] floats, double[] doubles) {\n+            super(matrixId, partKey, false);\n+            intArray = ints;\n+            longArray = longs;\n+            floatArray = floats;\n+            doubleArray = doubles;\n+        }\n+\n+        public int[] getInts() {\n+            return intArray;\n+        }\n+\n+        public long[] getLongs() {\n+            return longArray;\n+        }\n+\n+        public float[] getFloats() {\n+            return floatArray;\n+        }\n+\n+        public double[] getDoubles() {\n+            return doubleArray;\n+        }\n+\n+        public PSFPartitionUpdateParam() {\n+            super();\n+        }\n+\n+        @Override\n+        public void serialize(ByteBuf buf) {\n+            super.serialize(buf);\n+            buf.writeInt(intArray.length);\n+            for (int value : intArray) {\n+                buf.writeInt(value);\n+            }\n+            buf.writeInt(longArray.length);\n+            for (long value : longArray) {\n+                buf.writeLong(value);\n+            }\n+            buf.writeInt(floatArray.length);\n+            for (float value : floatArray) {\n+                buf.writeFloat(value);\n+            }\n+            buf.writeInt(doubleArray.length);\n+            for (double value : doubleArray) {\n+                buf.writeDouble(value);\n+            }\n+        }\n+\n+        @Override\n+        public void deserialize(ByteBuf buf) {\n+            super.deserialize(buf);\n+            int size = buf.readInt();\n+            int[] ints = new int[size];\n+            for (int i = 0; i < size; i++) {\n+                ints[i] = buf.readInt();\n+            }\n+            this.intArray = ints;\n+\n+            size = buf.readInt();\n+            long[] longs = new long[size];\n+            for (int i = 0; i < size; i++) {\n+                longs[i] = buf.readLong();\n+            }\n+            this.longArray = longs;\n+\n+            size = buf.readInt();\n+            float[] floats = new float[size];\n+            for (int i = 0; i < size; i++) {\n+                floats[i] = buf.readFloat();\n+            }\n+            this.floatArray = floats;\n+\n+            size = buf.readInt();\n+            double[] doubles = new double[size];\n+            for (int i = 0; i < size; i++) {\n+                doubles[i] = buf.readDouble();\n+            }\n+            this.doubleArray = doubles;\n+        }\n+\n     }\n \n-    public int[] getInts() {\n-      return intArray;\n+\n+    private ArrayList<Integer> intArray = new ArrayList<>();\n+    private ArrayList<Long> longArray = new ArrayList<>();\n+    private ArrayList<Float> floatArray = new ArrayList<>();\n+    private ArrayList<Double> doubleArray = new ArrayList<>();\n+\n+    public CommonParam(int matrixId) {\n+        super(matrixId, false);\n     }\n \n-    public long[] getLongs() {\n-      return longArray;\n+    public CommonParam(int matrixId, int[] ints) {\n+        this(matrixId, ints, new long[] {}, new double[] {});\n     }\n \n-    public float[] getFloats() {\n-      return floatArray;\n+    public CommonParam(int matrixId, int[] ints, double[] doubles) {\n+        this(matrixId, ints, new long[] {}, doubles);\n     }\n \n-    public double[] getDoubles() {\n-      return doubleArray;\n+    public CommonParam(int matrixId, long[] longs, double[] doubles) {\n+        this(matrixId, new int[] {}, longs, doubles);\n     }\n \n-    public PSFPartitionUpdateParam() {\n-      super();\n+    public CommonParam(int matrixId, int[] ints, long[] longs, double[] doubles) {\n+        super(matrixId, false);\n+        for (int i : ints) setInt(i);\n+        for (long l : longs) setLong(l);\n+        for (double d : doubles) setDouble(d);\n     }\n \n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(intArray.length);\n-      for (int value: intArray) {\n-        buf.writeInt(value);\n-      }\n-      buf.writeInt(longArray.length);\n-      for (long value: longArray) {\n-        buf.writeLong(value);\n-      }\n-      buf.writeInt(floatArray.length);\n-      for (float value: floatArray) {\n-        buf.writeFloat(value);\n-      }\n-      buf.writeInt(doubleArray.length);\n-      for (double value: doubleArray) {\n-        buf.writeDouble(value);\n-      }\n+    public void setInt(int i) {\n+        intArray.add(i);\n     }\n \n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int size = buf.readInt();\n-      int[] ints = new int[size];\n-      for (int i = 0; i < size; i++) {\n-        ints[i] = buf.readInt();\n-      }\n-      this.intArray = ints;\n-\n-      size = buf.readInt();\n-      long[] longs = new long[size];\n-      for (int i = 0; i < size; i++) {\n-        longs[i] = buf.readLong();\n-      }\n-      this.longArray = longs;\n-\n-      size = buf.readInt();\n-      float[] floats = new float[size];\n-      for (int i = 0; i < size; i++) {\n-        floats[i] = buf.readFloat();\n-      }\n-      this.floatArray = floats;\n-\n-      size = buf.readInt();\n-      double[] doubles = new double[size];\n-      for (int i = 0; i < size; i++) {\n-        doubles[i] = buf.readDouble();\n-      }\n-      this.doubleArray = doubles;\n+    public void setLong(long l) {\n+        longArray.add(l);\n     }\n \n-  }\n-\n-\n-  private ArrayList<Integer> intArray = new ArrayList<>();\n-  private ArrayList<Long> longArray = new ArrayList<>();\n-  private ArrayList<Float> floatArray = new ArrayList<>();\n-  private ArrayList<Double> doubleArray = new ArrayList<>();\n-\n-  public CommonParam(int matrixId) {\n-    super(matrixId, false);\n-  }\n-\n-  public CommonParam(int matrixId, int[] ints) {\n-    this(matrixId, ints, new long[]{}, new double[]{});\n-  }\n-\n-  public CommonParam(int matrixId, int[] ints, double[] doubles) {\n-    this(matrixId, ints, new long[]{}, doubles);\n-  }\n-\n-  public CommonParam(int matrixId, long[] longs, double[] doubles) {\n-    this(matrixId, new int[]{}, longs, doubles);\n-  }\n-\n-  public CommonParam(int matrixId, int[] ints, long[] longs, double[] doubles) {\n-    super(matrixId, false);\n-    for (int i : ints) setInt(i);\n-    for (long l : longs) setLong(l);\n-    for (double d : doubles) setDouble(d);\n-  }\n-\n-  public void setInt(int i) {\n-    intArray.add(i);\n-  }\n-\n-  public void setLong(long l) {\n-    longArray.add(l);\n-  }\n-\n-  public void setFloat(float f) {\n-    floatArray.add(f);\n-  }\n-\n-  public void setDouble(Double d) {\n-    doubleArray.add(d);\n-  }\n-\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> parts = PSAgentContext.get()\n-        .getMatrixPartitionRouter()\n-        .getPartitionKeyList(matrixId);\n-\n-    int size = parts.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : parts) {\n-      int[] ints = Utils.intListToArray(intArray);\n-      long[] longs = Utils.longListToArray(longArray);\n-      float[] floats = Utils.floatListToArray(floatArray);\n-      double[] doubles = Utils.doubleListToArray(doubleArray);\n-      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n-      partParams.add(partParam);\n+    public void setFloat(float f) {\n+        floatArray.add(f);\n     }\n \n-    return partParams;\n-  }\n+    public void setDouble(Double d) {\n+        doubleArray.add(d);\n+    }\n+\n+\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        List<PartitionKey> parts = PSAgentContext.get()\n+                .getMatrixPartitionRouter()\n+                .getPartitionKeyList(matrixId);\n+\n+        int size = parts.size();\n+        List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+        for (PartitionKey part : parts) {\n+            int[] ints = Utils.intListToArray(intArray);\n+            long[] longs = Utils.longListToArray(longArray);\n+            float[] floats = Utils.floatListToArray(floatArray);\n+            double[] doubles = Utils.doubleListToArray(doubleArray);\n+            PSFPartitionUpdateParam partParam =\n+                    new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n+            partParams.add(partParam);\n+        }\n+\n+        return partParams;\n+    }\n }\n",
            "diff_size": 244
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/350/CommonParam.java\nindex 87b3f78817..0ed834837e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/350/CommonParam.java\n@@ -34,9 +34,8 @@ public class CommonParam extends UpdateParam {\n     private float[] floatArray;\n     private double[] doubleArray;\n \n-    public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey,\n-                                   int[] ints, long[] longs, float[] floats, double[] doubles) {\n-      super(matrixId, partKey, false);\n+    public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] ints, long[] longs, float[] floats, double[] doubles) {\n+  super(matrixId, partKey, false);\n       intArray = ints;\n       longArray = longs;\n       floatArray = floats;\n@@ -115,11 +114,9 @@ public class CommonParam extends UpdateParam {\n       }\n       this.doubleArray = doubles;\n     }\n-\n   }\n \n-\n-  private ArrayList<Integer> intArray = new ArrayList<>();\n+private ArrayList<Integer> intArray = new ArrayList<>();\n   private ArrayList<Long> longArray = new ArrayList<>();\n   private ArrayList<Float> floatArray = new ArrayList<>();\n   private ArrayList<Double> doubleArray = new ArrayList<>();\n@@ -163,8 +160,7 @@ public class CommonParam extends UpdateParam {\n     doubleArray.add(d);\n   }\n \n-\n-  @Override\n+@Override\n   public List<PartitionUpdateParam> split() {\n     List<PartitionKey> parts = PSAgentContext.get()\n         .getMatrixPartitionRouter()\n@@ -183,4 +179,4 @@ public class CommonParam extends UpdateParam {\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/350/CommonParam.java\nindex 87b3f78817..6fa8981e1f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/350/CommonParam.java\n@@ -16,171 +16,175 @@\n \n package com.tencent.angel.ml.matrix.psf.common;\n \n-\n import com.tencent.angel.PartitionKey;\n import com.tencent.angel.ml.matrix.psf.update.enhance.PartitionUpdateParam;\n import com.tencent.angel.ml.matrix.psf.update.enhance.UpdateParam;\n import com.tencent.angel.psagent.PSAgentContext;\n import io.netty.buffer.ByteBuf;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n public class CommonParam extends UpdateParam {\n \n-  public static class PSFPartitionUpdateParam extends PartitionUpdateParam {\n+    public static class PSFPartitionUpdateParam extends PartitionUpdateParam {\n     private int[] intArray;\n     private long[] longArray;\n     private float[] floatArray;\n     private double[] doubleArray;\n \n-    public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey,\n-                                   int[] ints, long[] longs, float[] floats, double[] doubles) {\n-      super(matrixId, partKey, false);\n-      intArray = ints;\n-      longArray = longs;\n-      floatArray = floats;\n-      doubleArray = doubles;\n+    public PSFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] ints, long[] longs, float[] floats, double[] doubles) {\n+        super(matrixId, partKey, false);\n+        intArray = ints;\n+        longArray = longs;\n+        floatArray = floats;\n+        doubleArray = doubles;\n     }\n \n     public int[] getInts() {\n-      return intArray;\n+        return intArray;\n     }\n \n     public long[] getLongs() {\n-      return longArray;\n+        return longArray;\n     }\n \n     public float[] getFloats() {\n-      return floatArray;\n+        return floatArray;\n     }\n \n     public double[] getDoubles() {\n-      return doubleArray;\n+        return doubleArray;\n     }\n \n     public PSFPartitionUpdateParam() {\n-      super();\n+        super();\n     }\n \n     @Override\n     public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(intArray.length);\n-      for (int value: intArray) {\n+        super.serialize(buf);\n+        buf.writeInt(intArray.length);\n+        for (int value : intArray) {\n         buf.writeInt(value);\n-      }\n-      buf.writeInt(longArray.length);\n-      for (long value: longArray) {\n+        }\n+        buf.writeInt(longArray.length);\n+        for (long value : longArray) {\n         buf.writeLong(value);\n-      }\n-      buf.writeInt(floatArray.length);\n-      for (float value: floatArray) {\n+        }\n+        buf.writeInt(floatArray.length);\n+        for (float value : floatArray) {\n         buf.writeFloat(value);\n-      }\n-      buf.writeInt(doubleArray.length);\n-      for (double value: doubleArray) {\n+        }\n+        buf.writeInt(doubleArray.length);\n+        for (double value : doubleArray) {\n         buf.writeDouble(value);\n-      }\n+        }\n     }\n \n     @Override\n     public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int size = buf.readInt();\n-      int[] ints = new int[size];\n-      for (int i = 0; i < size; i++) {\n+        super.deserialize(buf);\n+\n+        int size = buf.readInt();\n+        int[] ints = new int[size];\n+        for (int i = 0; i < size; i++) {\n         ints[i] = buf.readInt();\n-      }\n-      this.intArray = ints;\n+        }\n+\n \n-      size = buf.readInt();\n-      long[] longs = new long[size];\n-      for (int i = 0; i < size; i++) {\n+\n+        this.intArray = ints;\n+        size = buf.readInt();\n+        long[] longs = new long[size];\n+        for (int i = 0; i < size; i++) {\n         longs[i] = buf.readLong();\n-      }\n-      this.longArray = longs;\n+        }\n+\n+\n \n-      size = buf.readInt();\n-      float[] floats = new float[size];\n-      for (int i = 0; i < size; i++) {\n+        this.longArray = longs;\n+        size = buf.readInt();\n+        float[] floats = new float[size];\n+        for (int i = 0; i < size; i++) {\n         floats[i] = buf.readFloat();\n-      }\n-      this.floatArray = floats;\n+        }\n \n-      size = buf.readInt();\n-      double[] doubles = new double[size];\n-      for (int i = 0; i < size; i++) {\n+\n+\n+        this.floatArray = floats;\n+        size = buf.readInt();\n+        double[] doubles = new double[size];\n+        for (int i = 0; i < size; i++) {\n         doubles[i] = buf.readDouble();\n-      }\n-      this.doubleArray = doubles;\n-    }\n+        }\n \n-  }\n \n \n-  private ArrayList<Integer> intArray = new ArrayList<>();\n-  private ArrayList<Long> longArray = new ArrayList<>();\n-  private ArrayList<Float> floatArray = new ArrayList<>();\n-  private ArrayList<Double> doubleArray = new ArrayList<>();\n+        this.doubleArray = doubles;\n+    }\n+    }\n+\n+    private ArrayList<Integer> intArray = new ArrayList<>();\n+    private ArrayList<Long> longArray = new ArrayList<>();\n+    private ArrayList<Float> floatArray = new ArrayList<>();\n+    private ArrayList<Double> doubleArray = new ArrayList<>();\n \n-  public CommonParam(int matrixId) {\n+    public CommonParam(int matrixId) {\n     super(matrixId, false);\n-  }\n+    }\n \n-  public CommonParam(int matrixId, int[] ints) {\n+    public CommonParam(int matrixId, int[] ints) {\n     this(matrixId, ints, new long[]{}, new double[]{});\n-  }\n+    }\n \n-  public CommonParam(int matrixId, int[] ints, double[] doubles) {\n+    public CommonParam(int matrixId, int[] ints, double[] doubles) {\n     this(matrixId, ints, new long[]{}, doubles);\n-  }\n+    }\n \n-  public CommonParam(int matrixId, long[] longs, double[] doubles) {\n+    public CommonParam(int matrixId, long[] longs, double[] doubles) {\n     this(matrixId, new int[]{}, longs, doubles);\n-  }\n+    }\n \n-  public CommonParam(int matrixId, int[] ints, long[] longs, double[] doubles) {\n+    public CommonParam(int matrixId, int[] ints, long[] longs, double[] doubles) {\n     super(matrixId, false);\n-    for (int i : ints) setInt(i);\n-    for (long l : longs) setLong(l);\n-    for (double d : doubles) setDouble(d);\n-  }\n+    for (int i : ints)\n+        setInt(i);\n+    for (long l : longs)\n+                                                 setLong(l);\n+    for (double d : doubles)\n+                                                 setDouble(d);\n+    }\n \n-  public void setInt(int i) {\n+    public void setInt(int i) {\n     intArray.add(i);\n-  }\n+    }\n \n-  public void setLong(long l) {\n+    public void setLong(long l) {\n     longArray.add(l);\n-  }\n+    }\n \n-  public void setFloat(float f) {\n+    public void setFloat(float f) {\n     floatArray.add(f);\n-  }\n+    }\n \n-  public void setDouble(Double d) {\n+    public void setDouble(Double d) {\n     doubleArray.add(d);\n-  }\n-\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> parts = PSAgentContext.get()\n-        .getMatrixPartitionRouter()\n-        .getPartitionKeyList(matrixId);\n+    }\n \n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n     int size = parts.size();\n     List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n     for (PartitionKey part : parts) {\n-      int[] ints = Utils.intListToArray(intArray);\n-      long[] longs = Utils.longListToArray(longArray);\n-      float[] floats = Utils.floatListToArray(floatArray);\n-      double[] doubles = Utils.doubleListToArray(doubleArray);\n-      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n-      partParams.add(partParam);\n+        int[] ints = Utils.intListToArray(intArray);\n+        long[] longs = Utils.longListToArray(longArray);\n+        float[] floats = Utils.floatListToArray(floatArray);\n+        double[] doubles = Utils.doubleListToArray(doubleArray);\n+        PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n+        partParams.add(partParam);\n     }\n-\n     return partParams;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 111
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "181",
                    "column": "7",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                },
                {
                    "line": "181",
                    "column": "58",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/350/CommonParam.java\nindex 87b3f78817..9a1d336741 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/350/CommonParam.java\n@@ -177,8 +177,8 @@ public class CommonParam extends UpdateParam {\n       long[] longs = Utils.longListToArray(longArray);\n       float[] floats = Utils.floatListToArray(floatArray);\n       double[] doubles = Utils.doubleListToArray(doubleArray);\n-      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n-      partParams.add(partParam);\n+      PSFPartitionUpdateParam partParam = newPSFPartitionUpdateParam(matrixId,part,ints\n+      , longs, floats ,doubles);partParams.add(partParam);\n     }\n \n     return partParams;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "column": "173",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/350/CommonParam.java\nindex 87b3f78817..227ef0d8ce 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/350/CommonParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/350/CommonParam.java\n@@ -176,8 +176,7 @@ public class CommonParam extends UpdateParam {\n       int[] ints = Utils.intListToArray(intArray);\n       long[] longs = Utils.longListToArray(longArray);\n       float[] floats = Utils.floatListToArray(floatArray);\n-      double[] doubles = Utils.doubleListToArray(doubleArray);\n-      PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n+      double[] doubles = Utils.doubleListToArray(doubleArray); PSFPartitionUpdateParam partParam = new PSFPartitionUpdateParam(matrixId, part, ints, longs, floats, doubles);\n       partParams.add(partParam);\n     }\n \n",
            "diff_size": 2
        }
    ]
}