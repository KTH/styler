{
    "error_id": "490",
    "information": {
        "errors": [
            {
                "line": "282",
                "column": "56",
                "severity": "warning",
                "message": "',' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "                        rl = new RuleList(rl, columnRule, false);\n                    }\n                    rl = new RuleList(rl, closeBracket , false);\n                }\n                rl.autoComplete(sentence);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/490/DbContextRule.java\nindex a48c0495c0..01f7ce813a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/490/DbContextRule.java\n@@ -279,7 +279,7 @@ public class DbContextRule implements Rule {\n                         columnRule.setColumnType(parameterType);\n                         rl = new RuleList(rl, columnRule, false);\n                     }\n-                    rl = new RuleList(rl, closeBracket , false);\n+                    rl = new RuleList(rl, closeBracket, false);\n                 }\n                 rl.autoComplete(sentence);\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/490/DbContextRule.java\nindex a48c0495c0..7f442891e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/490/DbContextRule.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.bnf.context;\n \n import java.util.HashMap;\n@@ -25,325 +26,327 @@ import org.h2.util.StringUtils;\n  */\n public class DbContextRule implements Rule {\n \n-    public static final int COLUMN = 0, TABLE = 1, TABLE_ALIAS = 2;\n-    public static final int NEW_TABLE_ALIAS = 3;\n-    public static final int COLUMN_ALIAS = 4, SCHEMA = 5, PROCEDURE = 6;\n+  public static final int COLUMN = 0, TABLE = 1, TABLE_ALIAS = 2;\n+  public static final int NEW_TABLE_ALIAS = 3;\n+  public static final int COLUMN_ALIAS = 4, SCHEMA = 5, PROCEDURE = 6;\n \n-    private final DbContents contents;\n-    private final int type;\n+  private final DbContents contents;\n+  private final int type;\n \n-    private String columnType;\n+  private String columnType;\n \n-    /**\n-     * BNF terminal rule Constructor\n-     * @param contents Extract rule from this component\n-     * @param type Rule type, one of\n-     * {@link DbContextRule#COLUMN},\n-     * {@link DbContextRule#TABLE},\n-     * {@link DbContextRule#TABLE_ALIAS},\n-     * {@link DbContextRule#NEW_TABLE_ALIAS},\n-     * {@link DbContextRule#COLUMN_ALIAS},\n-     * {@link DbContextRule#SCHEMA}\n-     */\n-    public DbContextRule(DbContents contents, int type) {\n-        this.contents = contents;\n-        this.type = type;\n-    }\n+  /**\n+   * BNF terminal rule Constructor\n+   *\n+   * @param contents Extract rule from this component\n+   * @param type     Rule type, one of\n+   *                 {@link DbContextRule#COLUMN},\n+   *                 {@link DbContextRule#TABLE},\n+   *                 {@link DbContextRule#TABLE_ALIAS},\n+   *                 {@link DbContextRule#NEW_TABLE_ALIAS},\n+   *                 {@link DbContextRule#COLUMN_ALIAS},\n+   *                 {@link DbContextRule#SCHEMA}\n+   */\n+  public DbContextRule(DbContents contents, int type) {\n+    this.contents = contents;\n+    this.type = type;\n+  }\n \n-    /**\n-     * @param columnType COLUMN Auto completion can be filtered by column type\n-     */\n-    public void setColumnType(String columnType) {\n-        this.columnType = columnType;\n-    }\n+  /**\n+   * @param columnType COLUMN Auto completion can be filtered by column type\n+   */\n+  public void setColumnType(String columnType) {\n+    this.columnType = columnType;\n+  }\n \n-    @Override\n-    public void setLinks(HashMap<String, RuleHead> ruleMap) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void setLinks(HashMap<String, RuleHead> ruleMap) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public void accept(BnfVisitor visitor) {\n-        // nothing to do\n-    }\n+  @Override\n+  public void accept(BnfVisitor visitor) {\n+    // nothing to do\n+  }\n \n-    @Override\n-    public boolean autoComplete(Sentence sentence) {\n-        String query = sentence.getQuery(), s = query;\n-        String up = sentence.getQueryUpper();\n-        switch (type) {\n-        case SCHEMA: {\n-            DbSchema[] schemas = contents.getSchemas();\n-            String best = null;\n-            DbSchema bestSchema = null;\n-            for (DbSchema schema: schemas) {\n-                String name = StringUtils.toUpperEnglish(schema.name);\n-                if (up.startsWith(name)) {\n-                    if (best == null || name.length() > best.length()) {\n-                        best = name;\n-                        bestSchema = schema;\n-                    }\n-                } else if (s.length() == 0 || name.startsWith(up)) {\n-                    if (s.length() < name.length()) {\n-                        sentence.add(name, name.substring(s.length()), type);\n-                        sentence.add(schema.quotedName + \".\",\n-                                schema.quotedName.substring(s.length()) + \".\",\n-                                Sentence.CONTEXT);\n-                    }\n-                }\n+  @Override\n+  public boolean autoComplete(Sentence sentence) {\n+    String query = sentence.getQuery(), s = query;\n+    String up = sentence.getQueryUpper();\n+    switch (type) {\n+      case SCHEMA: {\n+        DbSchema[] schemas = contents.getSchemas();\n+        String best = null;\n+        DbSchema bestSchema = null;\n+        for (DbSchema schema : schemas) {\n+          String name = StringUtils.toUpperEnglish(schema.name);\n+          if (up.startsWith(name)) {\n+            if (best == null || name.length() > best.length()) {\n+              best = name;\n+              bestSchema = schema;\n             }\n-            if (best != null) {\n-                sentence.setLastMatchedSchema(bestSchema);\n-                s = s.substring(best.length());\n+          } else if (s.length() == 0 || name.startsWith(up)) {\n+            if (s.length() < name.length()) {\n+              sentence.add(name, name.substring(s.length()), type);\n+              sentence.add(schema.quotedName + \".\",\n+                  schema.quotedName.substring(s.length()) + \".\",\n+                  Sentence.CONTEXT);\n             }\n-            break;\n+          }\n         }\n-        case TABLE: {\n-            DbSchema schema = sentence.getLastMatchedSchema();\n-            if (schema == null) {\n-                schema = contents.getDefaultSchema();\n-            }\n-            DbTableOrView[] tables = schema.getTables();\n-            String best = null;\n-            DbTableOrView bestTable = null;\n-            for (DbTableOrView table : tables) {\n-                String compare = up;\n-                String name = StringUtils.toUpperEnglish(table.getName());\n-                if (table.getQuotedName().length() > name.length()) {\n-                    name = table.getQuotedName();\n-                    compare = query;\n-                }\n-                if (compare.startsWith(name)) {\n-                    if (best == null || name.length() > best.length()) {\n-                        best = name;\n-                        bestTable = table;\n-                    }\n-                } else if (s.length() == 0 || name.startsWith(compare)) {\n-                    if (s.length() < name.length()) {\n-                        sentence.add(table.getQuotedName(),\n-                                table.getQuotedName().substring(s.length()),\n-                                Sentence.CONTEXT);\n-                    }\n-                }\n+        if (best != null) {\n+          sentence.setLastMatchedSchema(bestSchema);\n+          s = s.substring(best.length());\n+        }\n+        break;\n+      }\n+      case TABLE: {\n+        DbSchema schema = sentence.getLastMatchedSchema();\n+        if (schema == null) {\n+          schema = contents.getDefaultSchema();\n+        }\n+        DbTableOrView[] tables = schema.getTables();\n+        String best = null;\n+        DbTableOrView bestTable = null;\n+        for (DbTableOrView table : tables) {\n+          String compare = up;\n+          String name = StringUtils.toUpperEnglish(table.getName());\n+          if (table.getQuotedName().length() > name.length()) {\n+            name = table.getQuotedName();\n+            compare = query;\n+          }\n+          if (compare.startsWith(name)) {\n+            if (best == null || name.length() > best.length()) {\n+              best = name;\n+              bestTable = table;\n             }\n-            if (best != null) {\n-                sentence.setLastMatchedTable(bestTable);\n-                sentence.addTable(bestTable);\n-                s = s.substring(best.length());\n+          } else if (s.length() == 0 || name.startsWith(compare)) {\n+            if (s.length() < name.length()) {\n+              sentence.add(table.getQuotedName(),\n+                  table.getQuotedName().substring(s.length()),\n+                  Sentence.CONTEXT);\n             }\n-            break;\n+          }\n         }\n-        case NEW_TABLE_ALIAS:\n-            s = autoCompleteTableAlias(sentence, true);\n-            break;\n-        case TABLE_ALIAS:\n-            s = autoCompleteTableAlias(sentence, false);\n+        if (best != null) {\n+          sentence.setLastMatchedTable(bestTable);\n+          sentence.addTable(bestTable);\n+          s = s.substring(best.length());\n+        }\n+        break;\n+      }\n+      case NEW_TABLE_ALIAS:\n+        s = autoCompleteTableAlias(sentence, true);\n+        break;\n+      case TABLE_ALIAS:\n+        s = autoCompleteTableAlias(sentence, false);\n+        break;\n+      case COLUMN_ALIAS: {\n+        int i = 0;\n+        if (query.indexOf(' ') < 0) {\n+          break;\n+        }\n+        for (; i < up.length(); i++) {\n+          char ch = up.charAt(i);\n+          if (ch != '_' && !Character.isLetterOrDigit(ch)) {\n             break;\n-        case COLUMN_ALIAS: {\n-            int i = 0;\n-            if (query.indexOf(' ') < 0) {\n-                break;\n+          }\n+        }\n+        if (i == 0) {\n+          break;\n+        }\n+        String alias = up.substring(0, i);\n+        if (Parser.isKeyword(alias, true)) {\n+          break;\n+        }\n+        s = s.substring(alias.length());\n+        break;\n+      }\n+      case COLUMN: {\n+        HashSet<DbTableOrView> set = sentence.getTables();\n+        String best = null;\n+        DbTableOrView last = sentence.getLastMatchedTable();\n+        if (last != null && last.getColumns() != null) {\n+          for (DbColumn column : last.getColumns()) {\n+            String compare = up;\n+            String name = StringUtils.toUpperEnglish(column.getName());\n+            if (column.getQuotedName().length() > name.length()) {\n+              name = column.getQuotedName();\n+              compare = query;\n             }\n-            for (; i < up.length(); i++) {\n-                char ch = up.charAt(i);\n-                if (ch != '_' && !Character.isLetterOrDigit(ch)) {\n-                    break;\n+            if (compare.startsWith(name) &&\n+                (columnType == null ||\n+                    column.getDataType().contains(columnType))) {\n+              String b = s.substring(name.length());\n+              if (best == null || b.length() < best.length()) {\n+                best = b;\n+              } else if (s.length() == 0 || name.startsWith(compare)) {\n+                if (s.length() < name.length()) {\n+                  sentence.add(column.getName(),\n+                      column.getName().substring(s.length()),\n+                      Sentence.CONTEXT);\n                 }\n+              }\n             }\n-            if (i == 0) {\n-                break;\n-            }\n-            String alias = up.substring(0, i);\n-            if (Parser.isKeyword(alias, true)) {\n-                break;\n-            }\n-            s = s.substring(alias.length());\n-            break;\n+          }\n         }\n-        case COLUMN: {\n-            HashSet<DbTableOrView> set = sentence.getTables();\n-            String best = null;\n-            DbTableOrView last = sentence.getLastMatchedTable();\n-            if (last != null && last.getColumns() != null) {\n-                for (DbColumn column : last.getColumns()) {\n-                    String compare = up;\n-                    String name = StringUtils.toUpperEnglish(column.getName());\n-                    if (column.getQuotedName().length() > name.length()) {\n-                        name = column.getQuotedName();\n-                        compare = query;\n-                    }\n-                    if (compare.startsWith(name) &&\n-                            (columnType == null ||\n-                            column.getDataType().contains(columnType))) {\n-                        String b = s.substring(name.length());\n-                        if (best == null || b.length() < best.length()) {\n-                            best = b;\n-                        } else if (s.length() == 0 || name.startsWith(compare)) {\n-                            if (s.length() < name.length()) {\n-                                sentence.add(column.getName(),\n-                                        column.getName().substring(s.length()),\n-                                        Sentence.CONTEXT);\n-                            }\n-                        }\n-                    }\n-                }\n+        for (DbSchema schema : contents.getSchemas()) {\n+          for (DbTableOrView table : schema.getTables()) {\n+            if (table != last && set != null && !set.contains(table)) {\n+              continue;\n             }\n-            for (DbSchema schema : contents.getSchemas()) {\n-                for (DbTableOrView table : schema.getTables()) {\n-                    if (table != last && set != null && !set.contains(table)) {\n-                        continue;\n-                    }\n-                    if (table == null || table.getColumns() == null) {\n-                        continue;\n-                    }\n-                    for (DbColumn column : table.getColumns()) {\n-                        String name = StringUtils.toUpperEnglish(column\n-                                .getName());\n-                        if (columnType == null\n-                                || column.getDataType().contains(columnType)) {\n-                            if (up.startsWith(name)) {\n-                                String b = s.substring(name.length());\n-                                if (best == null || b.length() < best.length()) {\n-                                    best = b;\n-                                }\n-                            } else if (s.length() == 0 || name.startsWith(up)) {\n-                                if (s.length() < name.length()) {\n-                                    sentence.add(column.getName(),\n-                                            column.getName().substring(s.length()),\n-                                            Sentence.CONTEXT);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n+            if (table == null || table.getColumns() == null) {\n+              continue;\n             }\n-            if (best != null) {\n-                s = best;\n+            for (DbColumn column : table.getColumns()) {\n+              String name = StringUtils.toUpperEnglish(column\n+                  .getName());\n+              if (columnType == null\n+                  || column.getDataType().contains(columnType)) {\n+                if (up.startsWith(name)) {\n+                  String b = s.substring(name.length());\n+                  if (best == null || b.length() < best.length()) {\n+                    best = b;\n+                  }\n+                } else if (s.length() == 0 || name.startsWith(up)) {\n+                  if (s.length() < name.length()) {\n+                    sentence.add(column.getName(),\n+                        column.getName().substring(s.length()),\n+                        Sentence.CONTEXT);\n+                  }\n+                }\n+              }\n             }\n-            break;\n+          }\n         }\n-        case PROCEDURE:\n-            autoCompleteProcedure(sentence);\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n-        }\n-        if (!s.equals(query)) {\n-            while (Bnf.startWithSpace(s)) {\n-                s = s.substring(1);\n-            }\n-            sentence.setQuery(s);\n-            return true;\n+        if (best != null) {\n+          s = best;\n         }\n-        return false;\n+        break;\n+      }\n+      case PROCEDURE:\n+        autoCompleteProcedure(sentence);\n+        break;\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + type);\n     }\n-    private void autoCompleteProcedure(Sentence sentence) {\n-        DbSchema schema = sentence.getLastMatchedSchema();\n-        if (schema == null) {\n-            schema = contents.getDefaultSchema();\n-        }\n-        String incompleteSentence = sentence.getQueryUpper();\n-        String incompleteFunctionName = incompleteSentence;\n-        if (incompleteSentence.contains(\"(\")) {\n-            incompleteFunctionName = incompleteSentence.substring(0,\n-                    incompleteSentence.indexOf('(')).trim();\n-        }\n+    if (!s.equals(query)) {\n+      while (Bnf.startWithSpace(s)) {\n+        s = s.substring(1);\n+      }\n+      sentence.setQuery(s);\n+      return true;\n+    }\n+    return false;\n+  }\n \n-        // Common elements\n-        RuleElement openBracket = new RuleElement(\"(\", \"Function\");\n-        RuleElement closeBracket = new RuleElement(\")\", \"Function\");\n-        RuleElement comma = new RuleElement(\",\", \"Function\");\n+  private void autoCompleteProcedure(Sentence sentence) {\n+    DbSchema schema = sentence.getLastMatchedSchema();\n+    if (schema == null) {\n+      schema = contents.getDefaultSchema();\n+    }\n+    String incompleteSentence = sentence.getQueryUpper();\n+    String incompleteFunctionName = incompleteSentence;\n+    if (incompleteSentence.contains(\"(\")) {\n+      incompleteFunctionName = incompleteSentence.substring(0,\n+          incompleteSentence.indexOf('(')).trim();\n+    }\n \n-        // Fetch all elements\n-        for (DbProcedure procedure : schema.getProcedures()) {\n-            final String procName = procedure.getName();\n-            if (procName.startsWith(incompleteFunctionName)) {\n-                // That's it, build a RuleList from this function\n-                RuleElement procedureElement = new RuleElement(procName,\n-                        \"Function\");\n-                RuleList rl = new RuleList(procedureElement, openBracket, false);\n-                // Go further only if the user use open bracket\n-                if (incompleteSentence.contains(\"(\")) {\n-                    for (DbColumn parameter : procedure.getParameters()) {\n-                        if (parameter.getPosition() > 1) {\n-                            rl = new RuleList(rl, comma, false);\n-                        }\n-                        DbContextRule columnRule = new DbContextRule(contents,\n-                                COLUMN);\n-                        String parameterType = parameter.getDataType();\n-                        // Remove precision\n-                        if (parameterType.contains(\"(\")) {\n-                            parameterType = parameterType.substring(0,\n-                                    parameterType.indexOf('('));\n-                        }\n-                        columnRule.setColumnType(parameterType);\n-                        rl = new RuleList(rl, columnRule, false);\n-                    }\n-                    rl = new RuleList(rl, closeBracket , false);\n-                }\n-                rl.autoComplete(sentence);\n+    // Common elements\n+    RuleElement openBracket = new RuleElement(\"(\", \"Function\");\n+    RuleElement closeBracket = new RuleElement(\")\", \"Function\");\n+    RuleElement comma = new RuleElement(\",\", \"Function\");\n+\n+    // Fetch all elements\n+    for (DbProcedure procedure : schema.getProcedures()) {\n+      final String procName = procedure.getName();\n+      if (procName.startsWith(incompleteFunctionName)) {\n+        // That's it, build a RuleList from this function\n+        RuleElement procedureElement = new RuleElement(procName,\n+            \"Function\");\n+        RuleList rl = new RuleList(procedureElement, openBracket, false);\n+        // Go further only if the user use open bracket\n+        if (incompleteSentence.contains(\"(\")) {\n+          for (DbColumn parameter : procedure.getParameters()) {\n+            if (parameter.getPosition() > 1) {\n+              rl = new RuleList(rl, comma, false);\n             }\n+            DbContextRule columnRule = new DbContextRule(contents,\n+                COLUMN);\n+            String parameterType = parameter.getDataType();\n+            // Remove precision\n+            if (parameterType.contains(\"(\")) {\n+              parameterType = parameterType.substring(0,\n+                  parameterType.indexOf('('));\n+            }\n+            columnRule.setColumnType(parameterType);\n+            rl = new RuleList(rl, columnRule, false);\n+          }\n+          rl = new RuleList(rl, closeBracket, false);\n         }\n+        rl.autoComplete(sentence);\n+      }\n     }\n+  }\n \n-    private static String autoCompleteTableAlias(Sentence sentence,\n-            boolean newAlias) {\n-        String s = sentence.getQuery();\n-        String up = sentence.getQueryUpper();\n-        int i = 0;\n-        for (; i < up.length(); i++) {\n-            char ch = up.charAt(i);\n-            if (ch != '_' && !Character.isLetterOrDigit(ch)) {\n-                break;\n-            }\n-        }\n-        if (i == 0) {\n-            return s;\n-        }\n-        String alias = up.substring(0, i);\n-        if (\"SET\".equals(alias) || Parser.isKeyword(alias, true)) {\n-            return s;\n-        }\n-        if (newAlias) {\n-            sentence.addAlias(alias, sentence.getLastTable());\n-        }\n-        HashMap<String, DbTableOrView> map = sentence.getAliases();\n-        if ((map != null && map.containsKey(alias)) ||\n-                (sentence.getLastTable() == null)) {\n-            if (newAlias && s.length() == alias.length()) {\n-                return s;\n-            }\n-            s = s.substring(alias.length());\n-            if (s.length() == 0) {\n-                sentence.add(alias + \".\", \".\", Sentence.CONTEXT);\n-            }\n-            return s;\n+  private static String autoCompleteTableAlias(Sentence sentence,\n+                                               boolean newAlias) {\n+    String s = sentence.getQuery();\n+    String up = sentence.getQueryUpper();\n+    int i = 0;\n+    for (; i < up.length(); i++) {\n+      char ch = up.charAt(i);\n+      if (ch != '_' && !Character.isLetterOrDigit(ch)) {\n+        break;\n+      }\n+    }\n+    if (i == 0) {\n+      return s;\n+    }\n+    String alias = up.substring(0, i);\n+    if (\"SET\".equals(alias) || Parser.isKeyword(alias, true)) {\n+      return s;\n+    }\n+    if (newAlias) {\n+      sentence.addAlias(alias, sentence.getLastTable());\n+    }\n+    HashMap<String, DbTableOrView> map = sentence.getAliases();\n+    if ((map != null && map.containsKey(alias)) ||\n+        (sentence.getLastTable() == null)) {\n+      if (newAlias && s.length() == alias.length()) {\n+        return s;\n+      }\n+      s = s.substring(alias.length());\n+      if (s.length() == 0) {\n+        sentence.add(alias + \".\", \".\", Sentence.CONTEXT);\n+      }\n+      return s;\n+    }\n+    HashSet<DbTableOrView> tables = sentence.getTables();\n+    if (tables != null) {\n+      String best = null;\n+      for (DbTableOrView table : tables) {\n+        String tableName =\n+            StringUtils.toUpperEnglish(table.getName());\n+        if (alias.startsWith(tableName) &&\n+            (best == null || tableName.length() > best.length())) {\n+          sentence.setLastMatchedTable(table);\n+          best = tableName;\n+        } else if (s.length() == 0 || tableName.startsWith(alias)) {\n+          sentence.add(tableName + \".\",\n+              tableName.substring(s.length()) + \".\",\n+              Sentence.CONTEXT);\n         }\n-        HashSet<DbTableOrView> tables = sentence.getTables();\n-        if (tables != null) {\n-            String best = null;\n-            for (DbTableOrView table : tables) {\n-                String tableName =\n-                        StringUtils.toUpperEnglish(table.getName());\n-                if (alias.startsWith(tableName) &&\n-                        (best == null || tableName.length() > best.length())) {\n-                    sentence.setLastMatchedTable(table);\n-                    best = tableName;\n-                } else if (s.length() == 0 || tableName.startsWith(alias)) {\n-                    sentence.add(tableName + \".\",\n-                            tableName.substring(s.length()) + \".\",\n-                            Sentence.CONTEXT);\n-                }\n-            }\n-            if (best != null) {\n-                s = s.substring(best.length());\n-                if (s.length() == 0) {\n-                    sentence.add(alias + \".\", \".\", Sentence.CONTEXT);\n-                }\n-                return s;\n-            }\n+      }\n+      if (best != null) {\n+        s = s.substring(best.length());\n+        if (s.length() == 0) {\n+          sentence.add(alias + \".\", \".\", Sentence.CONTEXT);\n         }\n         return s;\n+      }\n     }\n+    return s;\n+  }\n \n }\n",
            "diff_size": 397
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/490/DbContextRule.java\nindex a48c0495c0..c5481ebd62 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/490/DbContextRule.java\n@@ -76,7 +76,7 @@ public class DbContextRule implements Rule {\n             DbSchema[] schemas = contents.getSchemas();\n             String best = null;\n             DbSchema bestSchema = null;\n-            for (DbSchema schema: schemas) {\n+            for (DbSchema schema : schemas) {\n                 String name = StringUtils.toUpperEnglish(schema.name);\n                 if (up.startsWith(name)) {\n                     if (best == null || name.length() > best.length()) {\n@@ -199,8 +199,7 @@ public class DbContextRule implements Rule {\n                     for (DbColumn column : table.getColumns()) {\n                         String name = StringUtils.toUpperEnglish(column\n                                 .getName());\n-                        if (columnType == null\n-                                || column.getDataType().contains(columnType)) {\n+                        if (columnType == null || column.getDataType().contains(columnType)) {\n                             if (up.startsWith(name)) {\n                                 String b = s.substring(name.length());\n                                 if (best == null || b.length() < best.length()) {\n@@ -237,7 +236,8 @@ public class DbContextRule implements Rule {\n         }\n         return false;\n     }\n-    private void autoCompleteProcedure(Sentence sentence) {\n+\n+private void autoCompleteProcedure(Sentence sentence) {\n         DbSchema schema = sentence.getLastMatchedSchema();\n         if (schema == null) {\n             schema = contents.getDefaultSchema();\n@@ -279,7 +279,7 @@ public class DbContextRule implements Rule {\n                         columnRule.setColumnType(parameterType);\n                         rl = new RuleList(rl, columnRule, false);\n                     }\n-                    rl = new RuleList(rl, closeBracket , false);\n+                    rl = new RuleList(rl, closeBracket, false);\n                 }\n                 rl.autoComplete(sentence);\n             }\n@@ -346,4 +346,4 @@ public class DbContextRule implements Rule {\n         return s;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/490/DbContextRule.java\nindex a48c0495c0..00bc2f3e8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/490/DbContextRule.java\n@@ -7,7 +7,6 @@ package org.h2.bnf.context;\n \n import java.util.HashMap;\n import java.util.HashSet;\n-\n import org.h2.bnf.Bnf;\n import org.h2.bnf.BnfVisitor;\n import org.h2.bnf.Rule;\n@@ -23,15 +22,20 @@ import org.h2.util.StringUtils;\n  * A BNF terminal rule that is linked to the database context information.\n  * This class is used by the H2 Console, to support auto-complete.\n  */\n+\n+\n public class DbContextRule implements Rule {\n \n+\n     public static final int COLUMN = 0, TABLE = 1, TABLE_ALIAS = 2;\n+\n+\n     public static final int NEW_TABLE_ALIAS = 3;\n-    public static final int COLUMN_ALIAS = 4, SCHEMA = 5, PROCEDURE = 6;\n \n+\n+    public static final int COLUMN_ALIAS = 4, SCHEMA = 5, PROCEDURE = 6;\n     private final DbContents contents;\n     private final int type;\n-\n     private String columnType;\n \n     /**\n@@ -45,6 +49,7 @@ public class DbContextRule implements Rule {\n      * {@link DbContextRule#COLUMN_ALIAS},\n      * {@link DbContextRule#SCHEMA}\n      */\n+\n     public DbContextRule(DbContents contents, int type) {\n         this.contents = contents;\n         this.type = type;\n@@ -53,6 +58,8 @@ public class DbContextRule implements Rule {\n     /**\n      * @param columnType COLUMN Auto completion can be filtered by column type\n      */\n+\n+\n     public void setColumnType(String columnType) {\n         this.columnType = columnType;\n     }\n@@ -60,11 +67,13 @@ public class DbContextRule implements Rule {\n     @Override\n     public void setLinks(HashMap<String, RuleHead> ruleMap) {\n         // nothing to do\n+\n     }\n \n     @Override\n     public void accept(BnfVisitor visitor) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -76,7 +85,7 @@ public class DbContextRule implements Rule {\n             DbSchema[] schemas = contents.getSchemas();\n             String best = null;\n             DbSchema bestSchema = null;\n-            for (DbSchema schema: schemas) {\n+            for (DbSchema schema : schemas) {\n                 String name = StringUtils.toUpperEnglish(schema.name);\n                 if (up.startsWith(name)) {\n                     if (best == null || name.length() > best.length()) {\n@@ -86,9 +95,7 @@ public class DbContextRule implements Rule {\n                 } else if (s.length() == 0 || name.startsWith(up)) {\n                     if (s.length() < name.length()) {\n                         sentence.add(name, name.substring(s.length()), type);\n-                        sentence.add(schema.quotedName + \".\",\n-                                schema.quotedName.substring(s.length()) + \".\",\n-                                Sentence.CONTEXT);\n+                        sentence.add(schema.quotedName + \".\", schema.quotedName.substring(s.length()) + \".\", Sentence.CONTEXT);\n                     }\n                 }\n             }\n@@ -120,9 +127,7 @@ public class DbContextRule implements Rule {\n                     }\n                 } else if (s.length() == 0 || name.startsWith(compare)) {\n                     if (s.length() < name.length()) {\n-                        sentence.add(table.getQuotedName(),\n-                                table.getQuotedName().substring(s.length()),\n-                                Sentence.CONTEXT);\n+                        sentence.add(table.getQuotedName(), table.getQuotedName().substring(s.length()), Sentence.CONTEXT);\n                     }\n                 }\n             }\n@@ -172,17 +177,15 @@ public class DbContextRule implements Rule {\n                         name = column.getQuotedName();\n                         compare = query;\n                     }\n-                    if (compare.startsWith(name) &&\n-                            (columnType == null ||\n-                            column.getDataType().contains(columnType))) {\n+                    if (compare.startsWith(name) && (columnType == null || column.getDataType().contains(columnType))) {\n                         String b = s.substring(name.length());\n                         if (best == null || b.length() < best.length()) {\n                             best = b;\n                         } else if (s.length() == 0 || name.startsWith(compare)) {\n                             if (s.length() < name.length()) {\n                                 sentence.add(column.getName(),\n-                                        column.getName().substring(s.length()),\n-                                        Sentence.CONTEXT);\n+column.getName().substring(s.length()),\n+Sentence.CONTEXT);\n                             }\n                         }\n                     }\n@@ -197,10 +200,8 @@ public class DbContextRule implements Rule {\n                         continue;\n                     }\n                     for (DbColumn column : table.getColumns()) {\n-                        String name = StringUtils.toUpperEnglish(column\n-                                .getName());\n-                        if (columnType == null\n-                                || column.getDataType().contains(columnType)) {\n+                        String name = StringUtils.toUpperEnglish(column.getName());\n+                        if (columnType == null || column.getDataType().contains(columnType)) {\n                             if (up.startsWith(name)) {\n                                 String b = s.substring(name.length());\n                                 if (best == null || b.length() < best.length()) {\n@@ -209,8 +210,8 @@ public class DbContextRule implements Rule {\n                             } else if (s.length() == 0 || name.startsWith(up)) {\n                                 if (s.length() < name.length()) {\n                                     sentence.add(column.getName(),\n-                                            column.getName().substring(s.length()),\n-                                            Sentence.CONTEXT);\n+column.getName().substring(s.length()),\n+Sentence.CONTEXT);\n                                 }\n                             }\n                         }\n@@ -237,6 +238,7 @@ public class DbContextRule implements Rule {\n         }\n         return false;\n     }\n+\n     private void autoCompleteProcedure(Sentence sentence) {\n         DbSchema schema = sentence.getLastMatchedSchema();\n         if (schema == null) {\n@@ -245,8 +247,7 @@ public class DbContextRule implements Rule {\n         String incompleteSentence = sentence.getQueryUpper();\n         String incompleteFunctionName = incompleteSentence;\n         if (incompleteSentence.contains(\"(\")) {\n-            incompleteFunctionName = incompleteSentence.substring(0,\n-                    incompleteSentence.indexOf('(')).trim();\n+            incompleteFunctionName = incompleteSentence.substring(0, incompleteSentence.indexOf('(')).trim();\n         }\n \n         // Common elements\n@@ -259,8 +260,7 @@ public class DbContextRule implements Rule {\n             final String procName = procedure.getName();\n             if (procName.startsWith(incompleteFunctionName)) {\n                 // That's it, build a RuleList from this function\n-                RuleElement procedureElement = new RuleElement(procName,\n-                        \"Function\");\n+                RuleElement procedureElement = new RuleElement(procName, \"Function\");\n                 RuleList rl = new RuleList(procedureElement, openBracket, false);\n                 // Go further only if the user use open bracket\n                 if (incompleteSentence.contains(\"(\")) {\n@@ -268,26 +268,23 @@ public class DbContextRule implements Rule {\n                         if (parameter.getPosition() > 1) {\n                             rl = new RuleList(rl, comma, false);\n                         }\n-                        DbContextRule columnRule = new DbContextRule(contents,\n-                                COLUMN);\n+                        DbContextRule columnRule = new DbContextRule(contents, COLUMN);\n                         String parameterType = parameter.getDataType();\n                         // Remove precision\n                         if (parameterType.contains(\"(\")) {\n-                            parameterType = parameterType.substring(0,\n-                                    parameterType.indexOf('('));\n+                            parameterType = parameterType.substring(0, parameterType.indexOf('('));\n                         }\n                         columnRule.setColumnType(parameterType);\n                         rl = new RuleList(rl, columnRule, false);\n                     }\n-                    rl = new RuleList(rl, closeBracket , false);\n+                    rl = new RuleList(rl, closeBracket, false);\n                 }\n                 rl.autoComplete(sentence);\n             }\n         }\n     }\n \n-    private static String autoCompleteTableAlias(Sentence sentence,\n-            boolean newAlias) {\n+    private static String autoCompleteTableAlias(Sentence sentence, boolean newAlias) {\n         String s = sentence.getQuery();\n         String up = sentence.getQueryUpper();\n         int i = 0;\n@@ -323,16 +320,14 @@ public class DbContextRule implements Rule {\n         if (tables != null) {\n             String best = null;\n             for (DbTableOrView table : tables) {\n-                String tableName =\n-                        StringUtils.toUpperEnglish(table.getName());\n-                if (alias.startsWith(tableName) &&\n-                        (best == null || tableName.length() > best.length())) {\n+                String tableName = StringUtils.toUpperEnglish(table.getName());\n+                if (alias.startsWith(tableName) && (best == null || tableName.length() > best.length())) {\n                     sentence.setLastMatchedTable(table);\n                     best = tableName;\n                 } else if (s.length() == 0 || tableName.startsWith(alias)) {\n                     sentence.add(tableName + \".\",\n-                            tableName.substring(s.length()) + \".\",\n-                            Sentence.CONTEXT);\n+tableName.substring(s.length()) + \".\",\n+Sentence.CONTEXT);\n                 }\n             }\n             if (best != null) {\n@@ -346,4 +341,4 @@ public class DbContextRule implements Rule {\n         return s;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/490/DbContextRule.java\nindex a48c0495c0..01f7ce813a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/490/DbContextRule.java\n@@ -279,7 +279,7 @@ public class DbContextRule implements Rule {\n                         columnRule.setColumnType(parameterType);\n                         rl = new RuleList(rl, columnRule, false);\n                     }\n-                    rl = new RuleList(rl, closeBracket , false);\n+                    rl = new RuleList(rl, closeBracket, false);\n                 }\n                 rl.autoComplete(sentence);\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/490/DbContextRule.java\nindex a48c0495c0..01f7ce813a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/490/DbContextRule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/490/DbContextRule.java\n@@ -279,7 +279,7 @@ public class DbContextRule implements Rule {\n                         columnRule.setColumnType(parameterType);\n                         rl = new RuleList(rl, columnRule, false);\n                     }\n-                    rl = new RuleList(rl, closeBracket , false);\n+                    rl = new RuleList(rl, closeBracket, false);\n                 }\n                 rl.autoComplete(sentence);\n             }\n",
            "diff_size": 1
        }
    ]
}