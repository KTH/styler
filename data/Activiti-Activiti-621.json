{
    "error_id": "621",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.persistence;\n\nimport org.activiti.engine.impl.cfg.IdGenerator;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/621/StrongUuidGenerator.java\nindex a1e2d2b4d1..8cbd3c3246 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/621/StrongUuidGenerator.java\n@@ -1,52 +1,53 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.persistence;\r\n-\r\n-import org.activiti.engine.impl.cfg.IdGenerator;\r\n-\r\n-import com.fasterxml.uuid.EthernetAddress;\r\n-import com.fasterxml.uuid.Generators;\r\n-import com.fasterxml.uuid.impl.TimeBasedGenerator;\r\n-\r\n-/**\r\n- * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\r\n- * \r\n-\r\n- */\r\n-public class StrongUuidGenerator implements IdGenerator {\r\n-\r\n-  // different ProcessEngines on the same classloader share one generator.\r\n-  protected static TimeBasedGenerator timeBasedGenerator;\r\n-\r\n-  public StrongUuidGenerator() {\r\n-    ensureGeneratorInitialized();\r\n-  }\r\n-\r\n-  protected void ensureGeneratorInitialized() {\r\n-    if (timeBasedGenerator == null) {\r\n-      synchronized (StrongUuidGenerator.class) {\r\n-        if (timeBasedGenerator == null) {\r\n-          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public String getNextId() {\r\n-    return timeBasedGenerator.generate().toString();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.persistence;\n+\n+import org.activiti.engine.impl.cfg.IdGenerator;\n+\n+import com.fasterxml.uuid.EthernetAddress;\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.TimeBasedGenerator;\n+\n+/**\n+ * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\n+ * \n+\n+ */\n+public class StrongUuidGenerator implements IdGenerator {\n+\n+  // different ProcessEngines on the same classloader share one generator.\n+  protected static TimeBasedGenerator timeBasedGenerator;\n+\n+  public StrongUuidGenerator() {\n+    ensureGeneratorInitialized();\n+  }\n+\n+  protected void ensureGeneratorInitialized() {\n+    if (timeBasedGenerator == null) {\n+      synchronized (StrongUuidGenerator.class) {\n+        if (timeBasedGenerator == null) {\n+          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\n+        }\n+      }\n+    }\n+  }\n+\n+  public String getNextId() {\n+    return timeBasedGenerator.generate().toString();\n+  }\n+\n+}\n",
            "diff_size": 53
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/621/StrongUuidGenerator.java\nindex a1e2d2b4d1..b1096359c8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/621/StrongUuidGenerator.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.persistence;\r\n \r\n import org.activiti.engine.impl.cfg.IdGenerator;\r\n@@ -23,30 +24,28 @@ import com.fasterxml.uuid.impl.TimeBasedGenerator;\n \r\n /**\r\n  * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\r\n- * \r\n-\r\n  */\r\n public class StrongUuidGenerator implements IdGenerator {\r\n \r\n-  // different ProcessEngines on the same classloader share one generator.\r\n-  protected static TimeBasedGenerator timeBasedGenerator;\r\n+    // different ProcessEngines on the same classloader share one generator.\r\n+    protected static TimeBasedGenerator timeBasedGenerator;\r\n \r\n-  public StrongUuidGenerator() {\r\n-    ensureGeneratorInitialized();\r\n-  }\r\n+    public StrongUuidGenerator() {\r\n+        ensureGeneratorInitialized();\r\n+    }\r\n \r\n-  protected void ensureGeneratorInitialized() {\r\n-    if (timeBasedGenerator == null) {\r\n-      synchronized (StrongUuidGenerator.class) {\r\n+    protected void ensureGeneratorInitialized() {\r\n         if (timeBasedGenerator == null) {\r\n-          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n+            synchronized (StrongUuidGenerator.class) {\r\n+                if (timeBasedGenerator == null) {\r\n+                    timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n+                }\r\n+            }\r\n         }\r\n-      }\r\n     }\r\n-  }\r\n \r\n-  public String getNextId() {\r\n-    return timeBasedGenerator.generate().toString();\r\n-  }\r\n+    public String getNextId() {\r\n+        return timeBasedGenerator.generate().toString();\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 34.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/621/StrongUuidGenerator.java\nindex a1e2d2b4d1..9aefb969cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/621/StrongUuidGenerator.java\n@@ -13,40 +13,41 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.activiti.engine.impl.persistence;\r\n-\r\n-import org.activiti.engine.impl.cfg.IdGenerator;\r\n-\r\n-import com.fasterxml.uuid.EthernetAddress;\r\n-import com.fasterxml.uuid.Generators;\r\n+package org.activiti.engine.impl.persistence;\n+\n+import org.activiti.engine.impl.cfg.IdGenerator;\n+import com.fasterxml.uuid.EthernetAddress;\n+import com.fasterxml.uuid.Generators;\n import com.fasterxml.uuid.impl.TimeBasedGenerator;\r\n \r\n /**\r\n  * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\r\n  * \r\n \r\n- */\r\n+ */\n+\n+\n public class StrongUuidGenerator implements IdGenerator {\r\n \r\n-  // different ProcessEngines on the same classloader share one generator.\r\n-  protected static TimeBasedGenerator timeBasedGenerator;\r\n-\r\n-  public StrongUuidGenerator() {\r\n-    ensureGeneratorInitialized();\r\n-  }\r\n-\r\n-  protected void ensureGeneratorInitialized() {\r\n-    if (timeBasedGenerator == null) {\r\n-      synchronized (StrongUuidGenerator.class) {\r\n-        if (timeBasedGenerator == null) {\r\n-          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public String getNextId() {\r\n-    return timeBasedGenerator.generate().toString();\r\n-  }\r\n-\r\n-}\r\n+  // different ProcessEngines on the same classloader share one generator.\n+\n+    protected static TimeBasedGenerator timeBasedGenerator;\n+\n+    public StrongUuidGenerator() {\n+    ensureGeneratorInitialized();\n+    }\n+\n+    protected void ensureGeneratorInitialized() {\n+    if (timeBasedGenerator == null) {\n+        synchronized (StrongUuidGenerator.class) {\n+        if (timeBasedGenerator == null) {\n+            timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\n+        }\n+        }\n+    }\n+    }\n+\n+    public String getNextId() {\n+    return timeBasedGenerator.generate().toString();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/621/StrongUuidGenerator.java\nindex a1e2d2b4d1..8cbd3c3246 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/621/StrongUuidGenerator.java\n@@ -1,52 +1,53 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.persistence;\r\n-\r\n-import org.activiti.engine.impl.cfg.IdGenerator;\r\n-\r\n-import com.fasterxml.uuid.EthernetAddress;\r\n-import com.fasterxml.uuid.Generators;\r\n-import com.fasterxml.uuid.impl.TimeBasedGenerator;\r\n-\r\n-/**\r\n- * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\r\n- * \r\n-\r\n- */\r\n-public class StrongUuidGenerator implements IdGenerator {\r\n-\r\n-  // different ProcessEngines on the same classloader share one generator.\r\n-  protected static TimeBasedGenerator timeBasedGenerator;\r\n-\r\n-  public StrongUuidGenerator() {\r\n-    ensureGeneratorInitialized();\r\n-  }\r\n-\r\n-  protected void ensureGeneratorInitialized() {\r\n-    if (timeBasedGenerator == null) {\r\n-      synchronized (StrongUuidGenerator.class) {\r\n-        if (timeBasedGenerator == null) {\r\n-          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public String getNextId() {\r\n-    return timeBasedGenerator.generate().toString();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.persistence;\n+\n+import org.activiti.engine.impl.cfg.IdGenerator;\n+\n+import com.fasterxml.uuid.EthernetAddress;\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.TimeBasedGenerator;\n+\n+/**\n+ * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\n+ * \n+\n+ */\n+public class StrongUuidGenerator implements IdGenerator {\n+\n+  // different ProcessEngines on the same classloader share one generator.\n+  protected static TimeBasedGenerator timeBasedGenerator;\n+\n+  public StrongUuidGenerator() {\n+    ensureGeneratorInitialized();\n+  }\n+\n+  protected void ensureGeneratorInitialized() {\n+    if (timeBasedGenerator == null) {\n+      synchronized (StrongUuidGenerator.class) {\n+        if (timeBasedGenerator == null) {\n+          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\n+        }\n+      }\n+    }\n+  }\n+\n+  public String getNextId() {\n+    return timeBasedGenerator.generate().toString();\n+  }\n+\n+}\n",
            "diff_size": 53
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/621/StrongUuidGenerator.java\nindex a1e2d2b4d1..8cbd3c3246 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/621/StrongUuidGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/621/StrongUuidGenerator.java\n@@ -1,52 +1,53 @@\n-/*\r\n- * Copyright 2010-2020 Alfresco Software, Ltd.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.persistence;\r\n-\r\n-import org.activiti.engine.impl.cfg.IdGenerator;\r\n-\r\n-import com.fasterxml.uuid.EthernetAddress;\r\n-import com.fasterxml.uuid.Generators;\r\n-import com.fasterxml.uuid.impl.TimeBasedGenerator;\r\n-\r\n-/**\r\n- * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\r\n- * \r\n-\r\n- */\r\n-public class StrongUuidGenerator implements IdGenerator {\r\n-\r\n-  // different ProcessEngines on the same classloader share one generator.\r\n-  protected static TimeBasedGenerator timeBasedGenerator;\r\n-\r\n-  public StrongUuidGenerator() {\r\n-    ensureGeneratorInitialized();\r\n-  }\r\n-\r\n-  protected void ensureGeneratorInitialized() {\r\n-    if (timeBasedGenerator == null) {\r\n-      synchronized (StrongUuidGenerator.class) {\r\n-        if (timeBasedGenerator == null) {\r\n-          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\r\n-        }\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  public String getNextId() {\r\n-    return timeBasedGenerator.generate().toString();\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Copyright 2010-2020 Alfresco Software, Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.persistence;\n+\n+import org.activiti.engine.impl.cfg.IdGenerator;\n+\n+import com.fasterxml.uuid.EthernetAddress;\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.TimeBasedGenerator;\n+\n+/**\n+ * {@link IdGenerator} implementation based on the current time and the ethernet address of the machine it is running on.\n+ * \n+\n+ */\n+public class StrongUuidGenerator implements IdGenerator {\n+\n+  // different ProcessEngines on the same classloader share one generator.\n+  protected static TimeBasedGenerator timeBasedGenerator;\n+\n+  public StrongUuidGenerator() {\n+    ensureGeneratorInitialized();\n+  }\n+\n+  protected void ensureGeneratorInitialized() {\n+    if (timeBasedGenerator == null) {\n+      synchronized (StrongUuidGenerator.class) {\n+        if (timeBasedGenerator == null) {\n+          timeBasedGenerator = Generators.timeBasedGenerator(EthernetAddress.fromInterface());\n+        }\n+      }\n+    }\n+  }\n+\n+  public String getNextId() {\n+    return timeBasedGenerator.generate().toString();\n+  }\n+\n+}\n",
            "diff_size": 53
        }
    ]
}