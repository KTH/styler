{
    "error_id": "136",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "92",
                "severity": "error",
                "message": "'}' at column 92 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "column": "92",
                    "severity": "error",
                    "message": "'}' at column 92 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\nindex a7e08dd288..f348ed75c9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n@@ -33,24 +33,24 @@ public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n    */\n   @Override\n   public boolean isValid(GenerationDetails generationDetails, ConstraintValidatorContext context) {\n-    \n+\n     //check for generation details\n     if (generationDetails == null) {\n       return true;\n     }\n-    \n+\n     //checks for description\n     if (generationDetails.getDescription() != null\n         && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n             || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n       return true;\n     }\n-    \n+\n     // checks for rule\n     if (!Strings.isNullOrEmpty(generationDetails.getRule())) {\n       return true;\n     }\n-      \n+\n     // Case both are okay: No special check is needed.\n \n     // Non of them is set ->\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\nindex a7e08dd288..e2fdcb39ed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n@@ -10,47 +10,47 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.GenerationDetail\n /**\n  * Validates the rule or description field of the generation details. Checks for the not emptyness\n  * of these fields. One of the fields have to be set. Both is acceptable too.\n- * \n- * @author Daniel Katzberg\n  *\n+ * @author Daniel Katzberg\n  */\n public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n     implements ConstraintValidator<NotEmptyGenerationDetailsDescriptionOrRule, GenerationDetails> {\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {}\n+  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n   public boolean isValid(GenerationDetails generationDetails, ConstraintValidatorContext context) {\n-    \n+\n     //check for generation details\n     if (generationDetails == null) {\n       return true;\n     }\n-    \n+\n     //checks for description\n     if (generationDetails.getDescription() != null\n         && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n-            || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n+        || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n       return true;\n     }\n-    \n+\n     // checks for rule\n     if (!Strings.isNullOrEmpty(generationDetails.getRule())) {\n       return true;\n     }\n-      \n+\n     // Case both are okay: No special check is needed.\n \n     // Non of them is set ->\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'GenerationDetails' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\nindex a7e08dd288..a30f799ae4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n@@ -2,9 +2,7 @@ package eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import com.google.common.base.Strings;\n-\n import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.GenerationDetails;\n \n /**\n@@ -14,16 +12,21 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.GenerationDetail\n  * @author Daniel Katzberg\n  *\n  */\n-public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n-    implements ConstraintValidator<NotEmptyGenerationDetailsDescriptionOrRule, GenerationDetails> {\n+\n+\n+public class NotEmptyGenerationDetailsDescriptionOrRuleValidator implements ConstraintValidator<NotEmptyGenerationDetailsDescriptionOrRule,\n+GenerationDetails> {\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n-  @Override\n-  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {}\n+\n+    @Override\n+    public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {\n+\n+    }\n \n   /*\n    * (non-Javadoc)\n@@ -31,29 +34,32 @@ public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(GenerationDetails generationDetails, ConstraintValidatorContext context) {\n+\n+\n+    @Override\n+    public boolean isValid(GenerationDetails generationDetails,\n+        ConstraintValidatorContext context) {\n     \n     //check for generation details\n     if (generationDetails == null) {\n-      return true;\n+        return true;\n     }\n     \n     //checks for description\n-    if (generationDetails.getDescription() != null\n-        && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n-            || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n-      return true;\n+    if (generationDetails.getDescription() != null && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n+                                                       || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n+        return true;\n     }\n     \n     // checks for rule\n     if (!Strings.isNullOrEmpty(generationDetails.getRule())) {\n-      return true;\n+        return true;\n     }\n       \n     // Case both are okay: No special check is needed.\n \n     // Non of them is set ->\n+\n     return false;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "column": "92",
                    "severity": "error",
                    "message": "'}' at column 92 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\nindex a7e08dd288..f348ed75c9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n@@ -33,24 +33,24 @@ public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n    */\n   @Override\n   public boolean isValid(GenerationDetails generationDetails, ConstraintValidatorContext context) {\n-    \n+\n     //check for generation details\n     if (generationDetails == null) {\n       return true;\n     }\n-    \n+\n     //checks for description\n     if (generationDetails.getDescription() != null\n         && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n             || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n       return true;\n     }\n-    \n+\n     // checks for rule\n     if (!Strings.isNullOrEmpty(generationDetails.getRule())) {\n       return true;\n     }\n-      \n+\n     // Case both are okay: No special check is needed.\n \n     // Non of them is set ->\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\nindex a7e08dd288..0cdee3e01a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/136/NotEmptyGenerationDetailsDescriptionOrRuleValidator.java\n@@ -23,9 +23,8 @@ public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {}\n-\n-  /*\n+  public void initialize(NotEmptyGenerationDetailsDescriptionOrRule constraintAnnotation) {\n+  }/*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n@@ -33,24 +32,24 @@ public class NotEmptyGenerationDetailsDescriptionOrRuleValidator\n    */\n   @Override\n   public boolean isValid(GenerationDetails generationDetails, ConstraintValidatorContext context) {\n-    \n+\n     //check for generation details\n     if (generationDetails == null) {\n       return true;\n     }\n-    \n+\n     //checks for description\n     if (generationDetails.getDescription() != null\n         && (!Strings.isNullOrEmpty(generationDetails.getDescription().getDe())\n             || !Strings.isNullOrEmpty(generationDetails.getDescription().getEn()))) {\n       return true;\n     }\n-    \n+\n     // checks for rule\n     if (!Strings.isNullOrEmpty(generationDetails.getRule())) {\n       return true;\n     }\n-      \n+\n     // Case both are okay: No special check is needed.\n \n     // Non of them is set ->\n",
            "diff_size": 7
        }
    ]
}