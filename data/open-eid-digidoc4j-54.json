{
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "195",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 141).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n      if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n        fileNameErrors.add(error);\n      }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "116",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "140",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/54/AsicEContainerValidator.java\nindex 2e08bd45df..0e5ec7ce66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/54/AsicEContainerValidator.java\n@@ -192,8 +192,7 @@ public class AsicEContainerValidator implements Serializable {\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n       if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n-        fileNameErrors.add(error);\n+        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \"+ signatureDocumentName);fileNameErrors.add(error);\n       }\n     }\n     return fileNameErrors;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/54/AsicEContainerValidator.java\nindex 2e08bd45df..04caf46c11 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/54/AsicEContainerValidator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.asice;\n \n@@ -192,7 +192,8 @@ public class AsicEContainerValidator implements Serializable {\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n       if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n+        DuplicateSignatureFilesException error =\n+            new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n         fileNameErrors.add(error);\n       }\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/54/AsicEContainerValidator.java\nindex 2e08bd45df..af4bb283ef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/54/AsicEContainerValidator.java\n@@ -78,9 +78,8 @@ public class AsicEContainerValidator implements Serializable {\n    * @param configuration        configuration context\n    * @param validateManifest     validate manifest\n    */\n-  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration,\n-                                 boolean validateManifest) {\n-    this.containerParseResult = containerParseResult;\n+  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration, boolean validateManifest) {\n+  this.containerParseResult = containerParseResult;\n     this.threadPoolManager = new ThreadPoolManager(configuration);\n     this.validateManifest = validateManifest;\n   }\n@@ -198,4 +197,4 @@ public class AsicEContainerValidator implements Serializable {\n     }\n     return fileNameErrors;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/54/AsicEContainerValidator.java\nindex 2e08bd45df..a37fc3a91f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/54/AsicEContainerValidator.java\n@@ -33,7 +33,6 @@ import org.digidoc4j.impl.asic.xades.validation.SignatureValidationTask;\n import org.digidoc4j.impl.asic.xades.validation.ThreadPoolManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -44,158 +43,162 @@ import java.util.concurrent.Future;\n /**\n  * ASIC-E container validator\n  */\n-public class AsicEContainerValidator implements Serializable {\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicEContainerValidator.class);\n \n-  protected List<DigiDoc4JException> errors = new ArrayList<>();\n-  protected List<DigiDoc4JException> warnings = new ArrayList<>();\n+public class AsicEContainerValidator implements Serializable {\n \n-  private AsicParseResult containerParseResult;\n-  private boolean validateManifest;\n-  private List<SignatureValidationData> signatureValidationData = new ArrayList<>();\n-  private List<DigiDoc4JException> manifestErrors;\n-  private ThreadPoolManager threadPoolManager;\n+    private static final Logger logger = LoggerFactory.getLogger(AsicEContainerValidator.class);\n+    protected List<DigiDoc4JException> errors = new ArrayList<>();\n+    protected List<DigiDoc4JException> warnings = new ArrayList<>();\n+    private AsicParseResult containerParseResult;\n+    private boolean validateManifest;\n+    private List<SignatureValidationData> signatureValidationData = new ArrayList<>();\n+    private List<DigiDoc4JException> manifestErrors;\n+    private ThreadPoolManager threadPoolManager;\n \n   /**\n    * @param configuration configuration\n    */\n-  public AsicEContainerValidator(Configuration configuration) {\n+\n+\n+    public AsicEContainerValidator(Configuration configuration) {\n     threadPoolManager = new ThreadPoolManager(configuration);\n     validateManifest = false;\n-  }\n+    }\n \n   /**\n    * @param containerParseResult parse result\n    * @param configuration        configuration\n    */\n-  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration) {\n+\n+\n+    public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration) {\n     this(containerParseResult, configuration, true);\n-  }\n+    }\n \n   /**\n    * @param containerParseResult parse result\n    * @param configuration        configuration context\n    * @param validateManifest     validate manifest\n    */\n-  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration,\n-                                 boolean validateManifest) {\n+\n+\n+    public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration, boolean validateManifest) {\n     this.containerParseResult = containerParseResult;\n     this.threadPoolManager = new ThreadPoolManager(configuration);\n     this.validateManifest = validateManifest;\n-  }\n+    }\n \n   /**\n    * @param signatures list of signatures\n    * @return validation result\n    */\n-  public ContainerValidationResult validate(List<Signature> signatures) {\n+\n+\n+    public ContainerValidationResult validate(List<Signature> signatures) {\n     logger.debug(\"Validating container\");\n     validateSignatures(signatures);\n     extractManifestErrors(signatures);\n     AsicContainerValidationResult result = createValidationResult();\n     logger.info(\"Is container valid: \" + result.isValid());\n     return result;\n-  }\n+    }\n \n-  protected void validateSignatures(List<Signature> signatures) {\n+    protected void validateSignatures(List<Signature> signatures) {\n     List<Future<SignatureValidationData>> validationData = startSignatureValidationInParallel(signatures);\n     extractValidatedSignatureErrors(validationData);\n-  }\n+    }\n \n-  protected List<Future<SignatureValidationData>> startSignatureValidationInParallel(List<Signature> signatures) {\n+    protected List<Future<SignatureValidationData>> startSignatureValidationInParallel(List<Signature> signatures) {\n     List<Future<SignatureValidationData>> futures = new ArrayList<>();\n     for (Signature signature : signatures) {\n-      SignatureValidationTask validationExecutor = new SignatureValidationTask(signature);\n-      Future<SignatureValidationData> validationDataFuture = threadPoolManager.submit(validationExecutor);\n-      futures.add(validationDataFuture);\n+        SignatureValidationTask validationExecutor = new SignatureValidationTask(signature);\n+        Future<SignatureValidationData> validationDataFuture = threadPoolManager.submit(validationExecutor);\n+        futures.add(validationDataFuture);\n     }\n     return futures;\n-  }\n+    }\n \n-  protected void extractValidatedSignatureErrors(List<Future<SignatureValidationData>> validationFutures) {\n+    protected void extractValidatedSignatureErrors(List<Future<SignatureValidationData>> validationFutures) {\n     logger.debug(\"Extracting errors from the signatures\");\n     for (Future<SignatureValidationData> validationFuture : validationFutures) {\n-      try {\n-        SignatureValidationData validationData = validationFuture.get();\n-        extractSignatureErrors(validationData);\n-      } catch (InterruptedException | ExecutionException e) {\n-        logger.error(\"Error validating signatures on multiple threads: \" + e.getMessage());\n-        throw new TechnicalException(\"Error validating signatures on multiple threads: \" + e.getMessage(), e);\n-      }\n+        try {\n+                                                                                   SignatureValidationData validationData = validationFuture.get();\n+                                                                                   extractSignatureErrors(validationData);\n+        } catch (InterruptedException | ExecutionException e) {\n+          logger.error(\"Error validating signatures on multiple threads: \" + e.getMessage());\n+          throw new TechnicalException(\"Error validating signatures on multiple threads: \" + e.getMessage(), e);\n+        }\n+    }\n     }\n-  }\n \n   /**\n    * @param validateManifest validate manifest flag\n    */\n-  public void setValidateManifest(boolean validateManifest) {\n+\n+\n+    public void setValidateManifest(boolean validateManifest) {\n     this.validateManifest = validateManifest;\n-  }\n+    }\n \n-  protected void extractSignatureErrors(SignatureValidationData validationData) {\n+    protected void extractSignatureErrors(SignatureValidationData validationData) {\n     logger.debug(\"Extracting signature errors for signature \" + validationData.getSignatureId());\n     signatureValidationData.add(validationData);\n     ValidationResult validationResult = validationData.getValidationResult();\n     errors.addAll(validationResult.getErrors());\n     warnings.addAll(validationResult.getWarnings());\n-  }\n+    }\n \n-  protected void extractManifestErrors(List<Signature> signatures) {\n+    protected void extractManifestErrors(List<Signature> signatures) {\n     logger.debug(\"Extracting manifest errors\");\n     manifestErrors = findManifestErrors(signatures);\n     errors.addAll(manifestErrors);\n-  }\n+    }\n \n-  protected AsicContainerValidationResult createValidationResult() {\n-    AsicValidationReportBuilder reportBuilder = new AsicValidationReportBuilder(signatureValidationData,\n-        manifestErrors);\n+    protected AsicContainerValidationResult createValidationResult() {\n+    AsicValidationReportBuilder reportBuilder = new AsicValidationReportBuilder(signatureValidationData, manifestErrors);\n     AsicContainerValidationResult result = new AsicContainerValidationResult();\n     result.setErrors(errors);\n     result.setWarnings(warnings);\n     result.setContainerErrors(manifestErrors);\n     result.generate(reportBuilder);\n     return result;\n-  }\n+    }\n \n-  protected List<DigiDoc4JException> findManifestErrors(List<Signature> signatures) {\n+    protected List<DigiDoc4JException> findManifestErrors(List<Signature> signatures) {\n     if (!validateManifest || containerParseResult == null) {\n-      return Collections.emptyList();\n+        return Collections.emptyList();\n     }\n-\n     List<DigiDoc4JException> manifestExceptions = new ArrayList<>();\n     ManifestParser manifestParser = containerParseResult.getManifestParser();\n     if (manifestParser == null || !manifestParser.containsManifestFile()) {\n-      logger.error(\"Container is missing manifest.xml\");\n-      manifestExceptions.add(new UnsupportedFormatException(\"Container does not contain a manifest file\"));\n-      return manifestExceptions;\n+        logger.error(\"Container is missing manifest.xml\");\n+        manifestExceptions.add(new UnsupportedFormatException(\"Container does not contain a manifest file\"));\n+        return manifestExceptions;\n     }\n-\n     List<DSSDocument> detachedContents = containerParseResult.getDetachedContents();\n-    List<ManifestErrorMessage> manifestErrorMessageList = new ManifestValidator(manifestParser, detachedContents,\n-        signatures).validateDocument();\n+    List<ManifestErrorMessage> manifestErrorMessageList = new ManifestValidator(manifestParser, detachedContents, signatures).validateDocument();\n     for (ManifestErrorMessage manifestErrorMessage : manifestErrorMessageList) {\n-      manifestExceptions.add(\n-          new DigiDoc4JException(manifestErrorMessage.getErrorMessage(), manifestErrorMessage.getSignatureId()));\n+        manifestExceptions.add(new DigiDoc4JException(manifestErrorMessage.getErrorMessage(),\n+            manifestErrorMessage.getSignatureId()));\n     }\n     manifestExceptions.addAll(assertNoDuplicateSignatures(signatures));\n     return manifestExceptions;\n-  }\n+    }\n \n-  private List<DigiDoc4JException> assertNoDuplicateSignatures(List<Signature> signatures) {\n+    private List<DigiDoc4JException> assertNoDuplicateSignatures(List<Signature> signatures) {\n     MultiValuedMap<String, DSSDocument> signatureDocumentNames = new ArrayListValuedHashMap<>();\n     for (Signature signature : signatures) {\n-      DSSDocument signatureDocument = ((AsicSignature) signature).getSignatureDocument();\n-      signatureDocumentNames.put(signatureDocument.getName(), signatureDocument);\n+        DSSDocument signatureDocument = ((AsicSignature) signature).getSignatureDocument();\n+        signatureDocumentNames.put(signatureDocument.getName(), signatureDocument);\n     }\n-\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n-      if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n-        fileNameErrors.add(error);\n-      }\n+        if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n+                                                                             DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n+                                                                             fileNameErrors.add(error);\n+        }\n     }\n     return fileNameErrors;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "116",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "140",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/54/AsicEContainerValidator.java\nindex 2e08bd45df..0e5ec7ce66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/54/AsicEContainerValidator.java\n@@ -192,8 +192,7 @@ public class AsicEContainerValidator implements Serializable {\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n       if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n-        fileNameErrors.add(error);\n+        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \"+ signatureDocumentName);fileNameErrors.add(error);\n       }\n     }\n     return fileNameErrors;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "column": "73",
                    "severity": "error",
                    "message": "'{' at column 73 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "194",
                    "column": "112",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "194",
                    "column": "112",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/54/AsicEContainerValidator.java\nindex 2e08bd45df..9b376cde7f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/54/AsicEContainerValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/54/AsicEContainerValidator.java\n@@ -191,11 +191,12 @@ public class AsicEContainerValidator implements Serializable {\n \n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n-      if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n-        fileNameErrors.add(error);\n-      }\n+      if (signatureDocumentNames.get(signatureDocumentName).size() > 1) { DuplicateSignatureFilesExceptionerror=newDuplicateSignatureFilesException(\n+\n+      \"Duplicate signature files: \" + signatureDocumentName);\n+      fileNameErrors.add(error);\n     }\n-    return fileNameErrors;\n   }\n+  return fileNameErrors;\n+}\n }\n",
            "diff_size": 7
        }
    ]
}