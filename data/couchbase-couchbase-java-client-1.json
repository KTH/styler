{
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "119",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link ByteArrayDocument}.\n     */\n    public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n        return new ByteArrayDocument(id, expiry, content, cas, mutationToken);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/1/ByteArrayDocument.java\nindex b50bca7de6..fcf78f501a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/1/ByteArrayDocument.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.annotations.InterfaceAudience;\n@@ -26,7 +27,7 @@ import java.io.Serializable;\n \n /**\n  * Handles a byte array as the document value.\n- *\n+ * <p>\n  * This document differs from {@link BinaryDocument} in that there is no manual refcounting needed on the\n  * underlying buffers. As a result, it is much safer to work with than the traditional {@link BinaryDocument}\n  * and should be preferred as a result. Note that the cost is a single byte array copy from the buffer, so if this\n@@ -54,7 +55,7 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     /**\n      * Creates a {@link ByteArrayDocument} which the document id and content.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n@@ -65,9 +66,9 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     /**\n      * Creates a {@link ByteArrayDocument} which the document id, content and the CAS value.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link ByteArrayDocument}.\n      */\n     public static ByteArrayDocument create(String id, byte[] content, long cas) {\n@@ -77,9 +78,9 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     /**\n      * Creates a {@link ByteArrayDocument} which the document id, content and the expiration time.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param expiry the expiration time of the document.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n     public static ByteArrayDocument create(String id, int expiry, byte[] content) {\n@@ -88,15 +89,15 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n \n     /**\n      * Creates a {@link ByteArrayDocument} which the document id, content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n     public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas) {\n@@ -105,26 +106,27 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n \n     /**\n      * Creates a {@link ByteArrayDocument} which the document id, content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n-    public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n+    public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas,\n+                                           MutationToken mutationToken) {\n         return new ByteArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n \n     /**\n      * Creates a copy from a different {@link ByteArrayDocument}, but changes the document ID and content.\n      *\n-     * @param doc the original {@link ByteArrayDocument} to copy.\n-     * @param id the per-bucket unique document id.\n+     * @param doc     the original {@link ByteArrayDocument} to copy.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a copied {@link ByteArrayDocument} with the changed properties.\n      */\n@@ -146,10 +148,10 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     /**\n      * Private constructor which is called by the static factory methods eventually.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      */\n     private ByteArrayDocument(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/1/ByteArrayDocument.java\nindex b50bca7de6..96d8f94fc3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/1/ByteArrayDocument.java\n@@ -162,4 +162,4 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/1/ByteArrayDocument.java\nindex b50bca7de6..6011bb87e1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/1/ByteArrayDocument.java\n@@ -18,7 +18,6 @@ package com.couchbase.client.java.document;\n import com.couchbase.client.core.annotations.InterfaceAudience;\n import com.couchbase.client.core.annotations.InterfaceStability;\n import com.couchbase.client.core.message.kv.MutationToken;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -35,11 +34,13 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.5.2\n  */\n+\n+\n @InterfaceStability.Uncommitted\n @InterfaceAudience.Public\n public class ByteArrayDocument extends AbstractDocument<byte[]> implements Serializable {\n \n-    private static final long serialVersionUID = -8616443474645912439L;\n+    private static final long serialVersionUID = - 8616443474645912439L;\n \n     /**\n      * Creates a {@link ByteArrayDocument} which the document id.\n@@ -58,6 +59,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param content the content of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n+\n+\n     public static ByteArrayDocument create(String id, byte[] content) {\n         return new ByteArrayDocument(id, 0, content, 0, null);\n     }\n@@ -70,6 +73,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link ByteArrayDocument}.\n      */\n+\n+\n     public static ByteArrayDocument create(String id, byte[] content, long cas) {\n         return new ByteArrayDocument(id, 0, content, cas, null);\n     }\n@@ -82,6 +87,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param expiry the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n+\n+\n     public static ByteArrayDocument create(String id, int expiry, byte[] content) {\n         return new ByteArrayDocument(id, expiry, content, 0, null);\n     }\n@@ -99,6 +106,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param expiry the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n+\n+\n     public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas) {\n         return new ByteArrayDocument(id, expiry, content, cas, null);\n     }\n@@ -116,6 +125,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param expiry the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n      */\n+\n+\n     public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         return new ByteArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n@@ -128,6 +139,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param content the content of the document.\n      * @return a copied {@link ByteArrayDocument} with the changed properties.\n      */\n+\n+\n     public static ByteArrayDocument from(ByteArrayDocument doc, String id, byte[] content) {\n         return ByteArrayDocument.create(id, doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -139,6 +152,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link ByteArrayDocument} with the changed properties.\n      */\n+\n+\n     public static ByteArrayDocument from(ByteArrayDocument doc, long cas) {\n         return ByteArrayDocument.create(doc.id(), doc.expiry(), doc.content(), cas, doc.mutationToken());\n     }\n@@ -151,6 +166,8 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @param expiry the expiration time of the document.\n      */\n+\n+\n     private ByteArrayDocument(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n     }\n@@ -162,4 +179,4 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/1/ByteArrayDocument.java\nindex b50bca7de6..11dbf1a498 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/1/ByteArrayDocument.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/1/ByteArrayDocument.java\n@@ -115,8 +115,7 @@ public class ByteArrayDocument extends AbstractDocument<byte[]> implements Seria\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @param expiry the expiration time of the document.\n      * @return a {@link ByteArrayDocument}.\n-     */\n-    public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n+     */ public static ByteArrayDocument create(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         return new ByteArrayDocument(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 2
        }
    ]
}