{
    "error_id": "37",
    "information": {
        "errors": [
            {
                "line": "136",
                "column": "44",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\t@Override\n\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n\t\treturn new ModbusSlaveTable( //\n\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n\t\t\t\tModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n\t\t\t\t\t\t.channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/37/KmtronicRelayOutput.java\nindex 6d3afe0d7f..1555ab21c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler/37/KmtronicRelayOutput.java\n@@ -130,10 +130,10 @@ public class KmtronicRelayOutput extends AbstractOpenemsModbusComponent implemen\n \t\t}\n \t\treturn b.toString();\n \t}\n-\t\n+\n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n \t\t\t\t\t\t.channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "136",
                    "column": "32",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/37/KmtronicRelayOutput.java\nindex 6d3afe0d7f..f3ebfa6d4d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/37/KmtronicRelayOutput.java\n@@ -35,117 +35,117 @@ import io.openems.edge.io.api.DigitalOutput;\n @Component(name = \"IO.KMtronic\", immediate = true, configurationPolicy = ConfigurationPolicy.REQUIRE)\n public class KmtronicRelayOutput extends AbstractOpenemsModbusComponent implements DigitalOutput, OpenemsComponent, ModbusSlave {\n \n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus);\n-\t}\n-\n-\tprivate final BooleanWriteChannel[] digitalOutputChannels;\n-\n-\tpublic KmtronicRelayOutput() {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tDigitalOutput.ChannelId.values(), //\n-\t\t\t\tThisChannelId.values() //\n-\t\t);\n-\t\tthis.digitalOutputChannels = new BooleanWriteChannel[] { //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_1), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_2), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_3), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_4), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_5), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_6), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_7), //\n-\t\t\t\tthis.channel(ThisChannelId.RELAY_8), //\n-\t\t};\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) {\n-\t\tsuper.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm, \"Modbus\",\n-\t\t\t\tconfig.modbus_id());\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\t@Override\n-\tprotected ModbusProtocol defineModbusProtocol() {\n-\t\treturn new ModbusProtocol(this, //\n-\t\t\t\t/*\n-\t\t\t\t * For Read: Read Coils\n-\t\t\t\t */\n-\t\t\t\tnew FC1ReadCoilsTask(0, Priority.LOW, //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_1, new CoilElement(0)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_2, new CoilElement(1)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_3, new CoilElement(2)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_4, new CoilElement(3)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_5, new CoilElement(4)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_6, new CoilElement(5)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_7, new CoilElement(6)), //\n-\t\t\t\t\t\tm(ThisChannelId.RELAY_8, new CoilElement(7)) //\n-\t\t\t\t),\n-\t\t\t\t/*\n-\t\t\t\t * For Write: Write Single Coil\n-\t\t\t\t */\n-\t\t\t\tnew FC5WriteCoilTask(0, m(ThisChannelId.RELAY_1, new CoilElement(0))), //\n-\t\t\t\tnew FC5WriteCoilTask(1, m(ThisChannelId.RELAY_2, new CoilElement(1))), //\n-\t\t\t\tnew FC5WriteCoilTask(2, m(ThisChannelId.RELAY_3, new CoilElement(2))), //\n-\t\t\t\tnew FC5WriteCoilTask(3, m(ThisChannelId.RELAY_4, new CoilElement(3))), //\n-\t\t\t\tnew FC5WriteCoilTask(4, m(ThisChannelId.RELAY_5, new CoilElement(4))), //\n-\t\t\t\tnew FC5WriteCoilTask(5, m(ThisChannelId.RELAY_6, new CoilElement(5))), //\n-\t\t\t\tnew FC5WriteCoilTask(6, m(ThisChannelId.RELAY_7, new CoilElement(6))), //\n-\t\t\t\tnew FC5WriteCoilTask(7, m(ThisChannelId.RELAY_8, new CoilElement(7))) //\n-\t\t);\n-\t}\n-\n-\t@Override\n-\tpublic BooleanWriteChannel[] digitalOutputChannels() {\n-\t\treturn this.digitalOutputChannels;\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\tStringBuilder b = new StringBuilder();\n-\t\tint i = 1;\n-\t\tfor (WriteChannel<Boolean> channel : this.digitalOutputChannels) {\n-\t\t\tString valueText;\n-\t\t\tOptional<Boolean> valueOpt = channel.value().asOptional();\n-\t\t\tif (valueOpt.isPresent()) {\n-\t\t\t\tvalueText = valueOpt.get() ? \"x\" : \"-\";\n-\t\t\t} else {\n-\t\t\t\tvalueText = \"?\";\n-\t\t\t}\n-\t\t\tb.append(i + valueText);\n-\n-\t\t\t// add space for all but the last\n-\t\t\tif (++i <= this.digitalOutputChannels.length) {\n-\t\t\t\tb.append(\" \");\n-\t\t\t}\n-\t\t}\n-\t\treturn b.toString();\n-\t}\n-\t\n-\t@Override\n-\tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n-\t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n-\t\t\t\tModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n-\t\t\t\t\t\t.channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(1, ThisChannelId.RELAY_2, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(2, ThisChannelId.RELAY_3, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(3, ThisChannelId.RELAY_4, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(4, ThisChannelId.RELAY_5, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(5, ThisChannelId.RELAY_6, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(6, ThisChannelId.RELAY_7, ModbusType.UINT16) //\n-\t\t\t\t\t\t.channel(7, ThisChannelId.RELAY_8, ModbusType.UINT16) //\n-\t\t\t\t\t\t.build()//\n-\t\t);\n-\t}\n+  @Reference\n+  protected ConfigurationAdmin cm;\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus);\n+  }\n+\n+  private final BooleanWriteChannel[] digitalOutputChannels;\n+\n+  public KmtronicRelayOutput() {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        DigitalOutput.ChannelId.values(), //\n+        ThisChannelId.values() //\n+    );\n+    this.digitalOutputChannels = new BooleanWriteChannel[] { //\n+        this.channel(ThisChannelId.RELAY_1), //\n+        this.channel(ThisChannelId.RELAY_2), //\n+        this.channel(ThisChannelId.RELAY_3), //\n+        this.channel(ThisChannelId.RELAY_4), //\n+        this.channel(ThisChannelId.RELAY_5), //\n+        this.channel(ThisChannelId.RELAY_6), //\n+        this.channel(ThisChannelId.RELAY_7), //\n+        this.channel(ThisChannelId.RELAY_8), //\n+    };\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) {\n+    super.activate(context, config.id(), config.alias(), config.enabled(), config.modbusUnitId(), this.cm, \"Modbus\",\n+        config.modbus_id());\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  @Override\n+  protected ModbusProtocol defineModbusProtocol() {\n+    return new ModbusProtocol(this, //\n+        /*\n+         * For Read: Read Coils\n+         */\n+        new FC1ReadCoilsTask(0, Priority.LOW, //\n+            m(ThisChannelId.RELAY_1, new CoilElement(0)), //\n+            m(ThisChannelId.RELAY_2, new CoilElement(1)), //\n+            m(ThisChannelId.RELAY_3, new CoilElement(2)), //\n+            m(ThisChannelId.RELAY_4, new CoilElement(3)), //\n+            m(ThisChannelId.RELAY_5, new CoilElement(4)), //\n+            m(ThisChannelId.RELAY_6, new CoilElement(5)), //\n+            m(ThisChannelId.RELAY_7, new CoilElement(6)), //\n+            m(ThisChannelId.RELAY_8, new CoilElement(7)) //\n+        ),\n+        /*\n+         * For Write: Write Single Coil\n+         */\n+        new FC5WriteCoilTask(0, m(ThisChannelId.RELAY_1, new CoilElement(0))), //\n+        new FC5WriteCoilTask(1, m(ThisChannelId.RELAY_2, new CoilElement(1))), //\n+        new FC5WriteCoilTask(2, m(ThisChannelId.RELAY_3, new CoilElement(2))), //\n+        new FC5WriteCoilTask(3, m(ThisChannelId.RELAY_4, new CoilElement(3))), //\n+        new FC5WriteCoilTask(4, m(ThisChannelId.RELAY_5, new CoilElement(4))), //\n+        new FC5WriteCoilTask(5, m(ThisChannelId.RELAY_6, new CoilElement(5))), //\n+        new FC5WriteCoilTask(6, m(ThisChannelId.RELAY_7, new CoilElement(6))), //\n+        new FC5WriteCoilTask(7, m(ThisChannelId.RELAY_8, new CoilElement(7))) //\n+    );\n+  }\n+\n+  @Override\n+  public BooleanWriteChannel[] digitalOutputChannels() {\n+    return this.digitalOutputChannels;\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    StringBuilder b = new StringBuilder();\n+    int i = 1;\n+    for (WriteChannel<Boolean> channel : this.digitalOutputChannels) {\n+      String valueText;\n+      Optional<Boolean> valueOpt = channel.value().asOptional();\n+      if (valueOpt.isPresent()) {\n+        valueText = valueOpt.get() ? \"x\" : \"-\";\n+      } else {\n+        valueText = \"?\";\n+      }\n+      b.append(i + valueText);\n+\n+      // add space for all but the last\n+      if (++i <= this.digitalOutputChannels.length) {\n+        b.append(\" \");\n+      }\n+    }\n+    return b.toString();\n+  }\n+\n+  @Override\n+  public ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n+    return new ModbusSlaveTable( //\n+        OpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n+        ModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n+            .channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //\n+            .channel(1, ThisChannelId.RELAY_2, ModbusType.UINT16) //\n+            .channel(2, ThisChannelId.RELAY_3, ModbusType.UINT16) //\n+            .channel(3, ThisChannelId.RELAY_4, ModbusType.UINT16) //\n+            .channel(4, ThisChannelId.RELAY_5, ModbusType.UINT16) //\n+            .channel(5, ThisChannelId.RELAY_6, ModbusType.UINT16) //\n+            .channel(6, ThisChannelId.RELAY_7, ModbusType.UINT16) //\n+            .channel(7, ThisChannelId.RELAY_8, ModbusType.UINT16) //\n+            .build()//\n+    );\n+  }\n \n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/37/KmtronicRelayOutput.java\nindex 6d3afe0d7f..1555ab21c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_random/37/KmtronicRelayOutput.java\n@@ -130,10 +130,10 @@ public class KmtronicRelayOutput extends AbstractOpenemsModbusComponent implemen\n \t\t}\n \t\treturn b.toString();\n \t}\n-\t\n+\n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n \t\t\t\t\t\t.channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/37/KmtronicRelayOutput.java\nindex 6d3afe0d7f..1555ab21c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/37/KmtronicRelayOutput.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/styler_three_grams/37/KmtronicRelayOutput.java\n@@ -130,10 +130,10 @@ public class KmtronicRelayOutput extends AbstractOpenemsModbusComponent implemen\n \t\t}\n \t\treturn b.toString();\n \t}\n-\t\n+\n \t@Override\n \tpublic ModbusSlaveTable getModbusSlaveTable(AccessMode accessMode) {\n-\t\treturn new ModbusSlaveTable( //\n+\t\treturn new ModbusSlaveTable(//\n \t\t\t\tOpenemsComponent.getModbusSlaveNatureTable(accessMode), //\n \t\t\t\tModbusSlaveNatureTable.of(KmtronicRelayOutput.class, accessMode, 100)//\n \t\t\t\t\t\t.channel(0, ThisChannelId.RELAY_1, ModbusType.UINT16) //\n",
            "diff_size": 2
        }
    ]
}