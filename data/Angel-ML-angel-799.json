{
    "error_id": "799",
    "information": {
        "errors": [
            {
                "line": "22",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 111).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private int sp;\n\n  public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n    super(matrixId);\n    this.updates = updates;\n    this.p = p;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/799/UpdateHyperLogLogParam.java\nindex 35dc9fb663..010c48549e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/799/UpdateHyperLogLogParam.java\n@@ -17,9 +17,7 @@ public class UpdateHyperLogLogParam extends UpdateParam {\n \n   private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n   private int p;\n-  private int sp;\n-\n-  public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n+  private int sp; public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n     super(matrixId);\n     this.updates = updates;\n     this.p = p;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/799/UpdateHyperLogLogParam.java\nindex 35dc9fb663..2805f88c75 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/799/UpdateHyperLogLogParam.java\n@@ -15,48 +15,50 @@ import java.util.List;\n \n public class UpdateHyperLogLogParam extends UpdateParam {\n \n-  private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n-  private int p;\n-  private int sp;\n-\n-  public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n-    super(matrixId);\n-    this.updates = updates;\n-    this.p = p;\n-    this.sp = sp;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    long[] nodes = updates.keySet().toLongArray();\n-    Arrays.sort(nodes);\n-\n-    List<PartitionUpdateParam> params = new ArrayList<>();\n-    List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n-    if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n+    private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n+    private int p;\n+    private int sp;\n+\n+    public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n+                                  int p, int sp) {\n+        super(matrixId);\n+        this.updates = updates;\n+        this.p = p;\n+        this.sp = sp;\n     }\n \n-    int nodeIndex = 0;\n-    int partIndex = 0;\n-    while (nodeIndex < nodes.length || partIndex < parts.size()) {\n-      int length = 0;\n-      long endOffset = parts.get(partIndex).getEndCol();\n-      while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n-\n-      if (length > 0) {\n-        params.add(new UpdateHyperLogLogPartParam(matrixId,\n-          parts.get(partIndex), updates, p, sp, nodes, nodeIndex - length,\n-          nodeIndex));\n-      }\n-      partIndex++;\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        long[] nodes = updates.keySet().toLongArray();\n+        Arrays.sort(nodes);\n+\n+        List<PartitionUpdateParam> params = new ArrayList<>();\n+        List<PartitionKey> parts =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+\n+        if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n+            throw new AngelException(\n+                    \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n+                            .get(parts.size() - 1).getEndCol());\n+        }\n+\n+        int nodeIndex = 0;\n+        int partIndex = 0;\n+        while (nodeIndex < nodes.length || partIndex < parts.size()) {\n+            int length = 0;\n+            long endOffset = parts.get(partIndex).getEndCol();\n+            while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n+                nodeIndex++;\n+                length++;\n+            }\n+\n+            if (length > 0) {\n+                params.add(new UpdateHyperLogLogPartParam(matrixId,\n+                        parts.get(partIndex), updates, p, sp, nodes, nodeIndex - length,\n+                        nodeIndex));\n+            }\n+            partIndex++;\n+        }\n+        return params;\n     }\n-    return params;\n-  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/799/UpdateHyperLogLogParam.java\nindex 35dc9fb663..dc884a9846 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/799/UpdateHyperLogLogParam.java\n@@ -35,10 +35,8 @@ public class UpdateHyperLogLogParam extends UpdateParam {\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n-    }\n+      throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts.get(parts.size() - 1).getEndCol());\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -54,9 +52,9 @@ public class UpdateHyperLogLogParam extends UpdateParam {\n         params.add(new UpdateHyperLogLogPartParam(matrixId,\n           parts.get(partIndex), updates, p, sp, nodes, nodeIndex - length,\n           nodeIndex));\n-      }\n+  }\n       partIndex++;\n     }\n     return params;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/799/UpdateHyperLogLogParam.java\nindex 35dc9fb663..bf99dce1c9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/799/UpdateHyperLogLogParam.java\n@@ -8,55 +8,48 @@ import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;\n import com.tencent.angel.psagent.PSAgentContext;\n import com.tencent.angel.psagent.matrix.oplog.cache.RowUpdateSplitUtils;\n import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n public class UpdateHyperLogLogParam extends UpdateParam {\n+    private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n+    private int p;\n+    private int sp;\n \n-  private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n-  private int p;\n-  private int sp;\n-\n-  public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n+    public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n     super(matrixId);\n     this.updates = updates;\n     this.p = p;\n     this.sp = sp;\n-  }\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n     long[] nodes = updates.keySet().toLongArray();\n     Arrays.sort(nodes);\n-\n     List<PartitionUpdateParam> params = new ArrayList<>();\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n     if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n+        throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts.get(parts.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n     while (nodeIndex < nodes.length || partIndex < parts.size()) {\n-      int length = 0;\n-      long endOffset = parts.get(partIndex).getEndCol();\n-      while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n-\n-      if (length > 0) {\n-        params.add(new UpdateHyperLogLogPartParam(matrixId,\n-          parts.get(partIndex), updates, p, sp, nodes, nodeIndex - length,\n-          nodeIndex));\n-      }\n-      partIndex++;\n+        int length = 0;\n+        long endOffset = parts.get(partIndex).getEndCol();\n+        while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n+                                                                     nodeIndex++;\n+                                                                     length++;\n+        }\n+\n+        if (length > 0) {\n+        params.add(new UpdateHyperLogLogPartParam(matrixId, parts.get(partIndex), updates, p, sp, nodes, nodeIndex - length, nodeIndex));\n+        }\n+        partIndex++;\n     }\n     return params;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/799/UpdateHyperLogLogParam.java\nindex 35dc9fb663..010c48549e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/799/UpdateHyperLogLogParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/799/UpdateHyperLogLogParam.java\n@@ -17,9 +17,7 @@ public class UpdateHyperLogLogParam extends UpdateParam {\n \n   private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n   private int p;\n-  private int sp;\n-\n-  public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n+  private int sp; public UpdateHyperLogLogParam(int matrixId, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp) {\n     super(matrixId);\n     this.updates = updates;\n     this.p = p;\n",
            "diff_size": 3
        }
    ]
}