{
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "50",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 97).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *             if locale is not available or style is invalid\n     */\n    public abstract String getDisplayName(String id, boolean daylight, int style, Locale locale);\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler/88/TimeZoneNameProvider.java\nindex 533d14edc8..974fec3de3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler/88/TimeZoneNameProvider.java\n@@ -1,51 +1,51 @@\n-/*\r\n- *  Licensed to the Apache Software Foundation (ASF) under one or more\r\n- *  contributor license agreements.  See the NOTICE file distributed with\r\n- *  this work for additional information regarding copyright ownership.\r\n- *  The ASF licenses this file to You under the Apache License, Version 2.0\r\n- *  (the \"License\"); you may not use this file except in compliance with\r\n- *  the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- *  Unless required by applicable law or agreed to in writing, software\r\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- *  See the License for the specific language governing permissions and\r\n- *  limitations under the License.\r\n- */\r\n-\r\n-package java.util.spi;\r\n-\r\n-import java.util.Locale;\r\n-\r\n-/**\r\n- * This abstract class should be extended by service providers that provide\r\n- * localized time zone names.\r\n- * <p>Note that Android does not support user-supplied locale service providers.\r\n- * @since 1.6\r\n- * @hide\r\n- */\r\n-public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\r\n-    /**\r\n-     * Default constructor, for use by subclasses.\r\n-     */\r\n-    protected TimeZoneNameProvider() {\r\n-        // do nothing\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the localized name for the given time zone in the given locale.\r\n-     *\r\n-     * @param id the time zone id\r\n-     * @param daylight true to return the name for daylight saving time.\r\n-     * @param style TimeZone.LONG or TimeZone.SHORT\r\n-     * @param locale the locale\r\n-     * @return the readable time zone name, or null if it is unavailable\r\n-     * @throws NullPointerException\r\n-     *             if {@code id == null || locale == null}\r\n-     * @throws IllegalArgumentException\r\n-     *             if locale is not available or style is invalid\r\n-     */\r\n-    public abstract String getDisplayName(String id, boolean daylight, int style, Locale locale);\r\n-}\r\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package java.util.spi;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This abstract class should be extended by service providers that provide\n+ * localized time zone names.\n+ * <p>Note that Android does not support user-supplied locale service providers.\n+ * @since 1.6\n+ * @hide\n+ */\n+public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\n+    /**\n+     * Default constructor, for use by subclasses.\n+     */\n+    protected TimeZoneNameProvider() {\n+        // do nothing\n+    }\n+\n+    /**\n+     * Returns the localized name for the given time zone in the given locale.\n+     *\n+     * @param id the time zone id\n+     * @param daylight true to return the name for daylight saving time.\n+     * @param style TimeZone.LONG or TimeZone.SHORT\n+     * @param locale the locale\n+     * @return the readable time zone name, or null if it is unavailable\n+     * @throws NullPointerException\n+     *             if {@code id == null || locale == null}\n+     * @throws IllegalArgumentException\n+     *             if locale is not available or style is invalid\n+     */\n+    public abstractString getDisplayName(String id, boolean daylight, int style, Locale locale);\n+}\n",
            "diff_size": 51
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/intellij/88/TimeZoneNameProvider.java\nindex 533d14edc8..19534af0e1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/intellij/88/TimeZoneNameProvider.java\n@@ -23,29 +23,29 @@ import java.util.Locale;\n  * This abstract class should be extended by service providers that provide\r\n  * localized time zone names.\r\n  * <p>Note that Android does not support user-supplied locale service providers.\r\n- * @since 1.6\r\n+ *\r\n  * @hide\r\n+ * @since 1.6\r\n  */\r\n public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\r\n-    /**\r\n-     * Default constructor, for use by subclasses.\r\n-     */\r\n-    protected TimeZoneNameProvider() {\r\n-        // do nothing\r\n-    }\r\n+  /**\r\n+   * Default constructor, for use by subclasses.\r\n+   */\r\n+  protected TimeZoneNameProvider() {\r\n+    // do nothing\r\n+  }\r\n \r\n-    /**\r\n-     * Returns the localized name for the given time zone in the given locale.\r\n-     *\r\n-     * @param id the time zone id\r\n-     * @param daylight true to return the name for daylight saving time.\r\n-     * @param style TimeZone.LONG or TimeZone.SHORT\r\n-     * @param locale the locale\r\n-     * @return the readable time zone name, or null if it is unavailable\r\n-     * @throws NullPointerException\r\n-     *             if {@code id == null || locale == null}\r\n-     * @throws IllegalArgumentException\r\n-     *             if locale is not available or style is invalid\r\n-     */\r\n-    public abstract String getDisplayName(String id, boolean daylight, int style, Locale locale);\r\n+  /**\r\n+   * Returns the localized name for the given time zone in the given locale.\r\n+   *\r\n+   * @param id       the time zone id\r\n+   * @param daylight true to return the name for daylight saving time.\r\n+   * @param style    TimeZone.LONG or TimeZone.SHORT\r\n+   * @param locale   the locale\r\n+   * @return the readable time zone name, or null if it is unavailable\r\n+   * @throws NullPointerException     if {@code id == null || locale == null}\r\n+   * @throws IllegalArgumentException if locale is not available or style is invalid\r\n+   */\r\n+  public abstract String getDisplayName(String id, boolean daylight, int style,\r\n+                                        Locale locale);\r\n }\r\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/naturalize/88/TimeZoneNameProvider.java\nindex 533d14edc8..7510b4bce6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/naturalize/88/TimeZoneNameProvider.java\n@@ -48,4 +48,4 @@ public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\n      *             if locale is not available or style is invalid\r\n      */\r\n     public abstract String getDisplayName(String id, boolean daylight, int style, Locale locale);\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler_three_grams/88/TimeZoneNameProvider.java\nindex 533d14edc8..974fec3de3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/88/TimeZoneNameProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler_three_grams/88/TimeZoneNameProvider.java\n@@ -1,51 +1,51 @@\n-/*\r\n- *  Licensed to the Apache Software Foundation (ASF) under one or more\r\n- *  contributor license agreements.  See the NOTICE file distributed with\r\n- *  this work for additional information regarding copyright ownership.\r\n- *  The ASF licenses this file to You under the Apache License, Version 2.0\r\n- *  (the \"License\"); you may not use this file except in compliance with\r\n- *  the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- *  Unless required by applicable law or agreed to in writing, software\r\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- *  See the License for the specific language governing permissions and\r\n- *  limitations under the License.\r\n- */\r\n-\r\n-package java.util.spi;\r\n-\r\n-import java.util.Locale;\r\n-\r\n-/**\r\n- * This abstract class should be extended by service providers that provide\r\n- * localized time zone names.\r\n- * <p>Note that Android does not support user-supplied locale service providers.\r\n- * @since 1.6\r\n- * @hide\r\n- */\r\n-public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\r\n-    /**\r\n-     * Default constructor, for use by subclasses.\r\n-     */\r\n-    protected TimeZoneNameProvider() {\r\n-        // do nothing\r\n-    }\r\n-\r\n-    /**\r\n-     * Returns the localized name for the given time zone in the given locale.\r\n-     *\r\n-     * @param id the time zone id\r\n-     * @param daylight true to return the name for daylight saving time.\r\n-     * @param style TimeZone.LONG or TimeZone.SHORT\r\n-     * @param locale the locale\r\n-     * @return the readable time zone name, or null if it is unavailable\r\n-     * @throws NullPointerException\r\n-     *             if {@code id == null || locale == null}\r\n-     * @throws IllegalArgumentException\r\n-     *             if locale is not available or style is invalid\r\n-     */\r\n-    public abstract String getDisplayName(String id, boolean daylight, int style, Locale locale);\r\n-}\r\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package java.util.spi;\n+\n+import java.util.Locale;\n+\n+/**\n+ * This abstract class should be extended by service providers that provide\n+ * localized time zone names.\n+ * <p>Note that Android does not support user-supplied locale service providers.\n+ * @since 1.6\n+ * @hide\n+ */\n+public abstract class TimeZoneNameProvider extends LocaleServiceProvider {\n+    /**\n+     * Default constructor, for use by subclasses.\n+     */\n+    protected TimeZoneNameProvider() {\n+        // do nothing\n+    }\n+\n+    /**\n+     * Returns the localized name for the given time zone in the given locale.\n+     *\n+     * @param id the time zone id\n+     * @param daylight true to return the name for daylight saving time.\n+     * @param style TimeZone.LONG or TimeZone.SHORT\n+     * @param locale the locale\n+     * @return the readable time zone name, or null if it is unavailable\n+     * @throws NullPointerException\n+     *             if {@code id == null || locale == null}\n+     * @throws IllegalArgumentException\n+     *             if locale is not available or style is invalid\n+     */\n+    public abstractString getDisplayName(String id, boolean daylight, int style, Locale locale);\n+}\n",
            "diff_size": 51
        }
    ]
}