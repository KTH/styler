{
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.assembler.dsl;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "12",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "13",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'class def ident' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/19/Context.java\nindex 19203d0b9a..9a37a255fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/19/Context.java\n@@ -5,110 +5,111 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.assembler.dsl;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-import java.lang.annotation.Annotation;\n-import java.util.Set;\n-import org.javatuples.Tuple;\n-import org.seedstack.business.assembler.Assembler;\n-import org.seedstack.business.assembler.AssemblerRegistry;\n-import org.seedstack.business.domain.AggregateRoot;\n-import org.seedstack.business.domain.DomainRegistry;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.business.internal.utils.BusinessUtils;\n-import org.seedstack.business.spi.DtoInfoResolver;\n-\n-/**\n+\n+package org .seedstack.business.internal.assembler.dsl;import\n+static com.google.common.base.Preconditions.checkNotNull;\n+\n+ import java.lang.annotation.Annotation;\n+ import java.util.Set;\n+ import org.javatuples.Tuple;\n+ import org.seedstack.business.assembler.Assembler;\n+ import org.seedstack.business.assembler.AssemblerRegistry;\n+ import org.seedstack.business.domain.AggregateRoot;\n+ import org.seedstack.business.domain.DomainRegistry;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.business.internal.utils.BusinessUtils;\n+ import org.seedstack.business.spi.DtoInfoResolver;\n+\n+ /**\n  * Context used by the DSL to carry the internal registry and the qualifier it uses.\n  */\n-class Context {\n-    private final DomainRegistry domainRegistry;\n-    private final AssemblerRegistry assemblerRegistry;\n-    private final Set<DtoInfoResolver> dtoInfoResolvers;\n-    private Annotation assemblerQualifier;\n-    private Class<? extends Annotation> assemblerQualifierClass;\n-\n-    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n-            Set<DtoInfoResolver> dtoInfoResolvers) {\n-        this.domainRegistry = domainRegistry;\n-        this.assemblerRegistry = assemblerRegistry;\n-        this.dtoInfoResolvers = dtoInfoResolvers;\n-    }\n-\n-    void setAssemblerQualifier(Annotation assemblerQualifier) {\n-        this.assemblerQualifier = assemblerQualifier;\n-    }\n-\n-    void setAssemblerQualifierClass(Class<? extends Annotation> assemblerQualifierClass) {\n-        this.assemblerQualifierClass = assemblerQualifierClass;\n-    }\n-\n-    <A extends AggregateRoot<I>, I, D> Assembler<A, D> assemblerOf(Class<A> aggregateRoot, Class<D> dto) {\n-        if (assemblerQualifierClass != null) {\n-            return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifierClass);\n-        } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n-        }\n-        return assemblerRegistry.getAssembler(aggregateRoot, dto);\n-    }\n-\n-    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n-            Class<D> dto) {\n-        if (assemblerQualifierClass != null) {\n-            return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n-        } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n-        }\n-        return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto);\n-    }\n-\n-    <D, A extends AggregateRoot<I>, I> A create(D dto, Class<A> aggregateClass) {\n-        return findResolverFor(dto).resolveAggregate(dto, aggregateClass);\n-    }\n-\n-    <D, A extends AggregateRoot<?>> A create(D dto, Class<A> aggregateClass, int indexInTuple) {\n-        return findResolverFor(dto).resolveAggregate(dto, aggregateClass, indexInTuple);\n-    }\n-\n-    <A extends AggregateRoot<I>, I> A load(I id, Class<A> aggregateClass) {\n-        return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass))\n-                .get(id)\n-                .orElse(null);\n-    }\n-\n-    <D, I> I resolveId(D dto, Class<I> aggregateIdClass) {\n-        return findResolverFor(dto).resolveId(dto, aggregateIdClass);\n-    }\n-\n-    <D, I> I resolveId(D dto, Class<I> aggregateIdClass, int position) {\n-        return findResolverFor(dto).resolveId(dto, aggregateIdClass, position);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n-        checkNotNull(dto);\n-        checkNotNull(aggregateRoot);\n-        Assembler<A, D> assembler = assemblerOf((Class<A>) aggregateRoot.getClass(), (Class<D>) dto.getClass());\n-        assembler.mergeDtoIntoAggregate(dto, aggregateRoot);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n-        Assembler<Tuple, D> tupleAssembler = tupleAssemblerOf(aggregateClasses, (Class<D>) dto.getClass());\n-        tupleAssembler.mergeDtoIntoAggregate(dto, tuple);\n-    }\n-\n-    private <D> DtoInfoResolver findResolverFor(D dto) {\n-        for (DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n-            if (dtoInfoResolver.supports(dto)) {\n-                return dtoInfoResolver;\n-            }\n-        }\n-        throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER)\n-                .put(\"dtoClass\", dto.getClass()\n-                        .getName());\n-    }\n-}\n+ class Context {\n+     private final DomainRegistry domainRegistry;\n+     private final AssemblerRegistry assemblerRegistry;\n+     private final Set<DtoInfoResolver> dtoInfoResolvers;\n+     private Annotation assemblerQualifier;\n+     private Class<? extends Annotation> assemblerQualifierClass;\n+\n+     public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n+             Set<DtoInfoResolver> dtoInfoResolvers) {\n+         this.domainRegistry = domainRegistry;\n+         this.assemblerRegistry = assemblerRegistry;\n+         this.dtoInfoResolvers = dtoInfoResolvers;\n+     }\n+\n+     void setAssemblerQualifier(Annotation assemblerQualifier) {\n+         this.assemblerQualifier = assemblerQualifier;\n+     }\n+\n+     void setAssemblerQualifierClass(Class<? extends Annotation> assemblerQualifierClass) {\n+         this.assemblerQualifierClass = assemblerQualifierClass;\n+     }\n+\n+     <A extends AggregateRoot<I>, I, D> Assembler<A, D> assemblerOf(Class<A> aggregateRoot, Class<D> dto) {\n+         if (assemblerQualifierClass != null) {\n+             return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifierClass);\n+         } else if (assemblerQualifier != null) {\n+             return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n+         }\n+         return assemblerRegistry.getAssembler(aggregateRoot, dto);\n+     }\n+\n+     <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n+             Class<D> dto) {\n+         if (assemblerQualifierClass != null) {\n+             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n+         } else if (assemblerQualifier != null) {\n+             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n+         }\n+         return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto);\n+     }\n+\n+     <D, A extends AggregateRoot<I>, I> A create(D dto, Class<A> aggregateClass) {\n+         return findResolverFor(dto).resolveAggregate(dto, aggregateClass);\n+     }\n+\n+     <D, A extends AggregateRoot<?>> A create(D dto, Class<A> aggregateClass, int indexInTuple) {\n+         return findResolverFor(dto).resolveAggregate(dto, aggregateClass, indexInTuple);\n+     }\n+\n+     <A extends AggregateRoot<I>, I> A load(I id, Class<A> aggregateClass) {\n+         return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass))\n+                 .get(id)\n+                 .orElse(null);\n+     }\n+\n+     <D, I> I resolveId(D dto, Class<I> aggregateIdClass) {\n+         return findResolverFor(dto).resolveId(dto, aggregateIdClass);\n+     }\n+\n+     <D, I> I resolveId(D dto, Class<I> aggregateIdClass, int position) {\n+         return findResolverFor(dto).resolveId(dto, aggregateIdClass, position);\n+     }\n+\n+     @SuppressWarnings(\"unchecked\")\n+     <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n+         checkNotNull(dto);\n+         checkNotNull(aggregateRoot);\n+         Assembler<A, D> assembler = assemblerOf((Class<A>) aggregateRoot.getClass(), (Class<D>) dto.getClass());\n+         assembler.mergeDtoIntoAggregate(dto, aggregateRoot);\n+     }\n+\n+     @SuppressWarnings(\"unchecked\")\n+     <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n+         Assembler<Tuple, D> tupleAssembler = tupleAssemblerOf(aggregateClasses, (Class<D>) dto.getClass());\n+         tupleAssembler.mergeDtoIntoAggregate(dto, tuple);\n+     }\n+\n+     private <D> DtoInfoResolver findResolverFor(D dto) {\n+         for (DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n+             if (dtoInfoResolver.supports(dto)) {\n+                 return dtoInfoResolver;\n+             }\n+         }\n+         throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER)\n+                 .put(\"dtoClass\", dto.getClass()\n+                         .getName());\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/19/Context.java\nindex 19203d0b9a..38ef3d40a0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/19/Context.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -32,7 +33,7 @@ class Context {\n     private Class<? extends Annotation> assemblerQualifierClass;\n \n     public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n-            Set<DtoInfoResolver> dtoInfoResolvers) {\n+                   Set<DtoInfoResolver> dtoInfoResolvers) {\n         this.domainRegistry = domainRegistry;\n         this.assemblerRegistry = assemblerRegistry;\n         this.dtoInfoResolvers = dtoInfoResolvers;\n@@ -56,7 +57,7 @@ class Context {\n     }\n \n     <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n-            Class<D> dto) {\n+                                                          Class<D> dto) {\n         if (assemblerQualifierClass != null) {\n             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n         } else if (assemblerQualifier != null) {\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/19/Context.java\nindex 19203d0b9a..14e5223fdc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/19/Context.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -31,9 +32,8 @@ class Context {\n     private Annotation assemblerQualifier;\n     private Class<? extends Annotation> assemblerQualifierClass;\n \n-    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n-            Set<DtoInfoResolver> dtoInfoResolvers) {\n-        this.domainRegistry = domainRegistry;\n+    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry, Set<DtoInfoResolver> dtoInfoResolvers) {\n+    this.domainRegistry = domainRegistry;\n         this.assemblerRegistry = assemblerRegistry;\n         this.dtoInfoResolvers = dtoInfoResolvers;\n     }\n@@ -55,9 +55,8 @@ class Context {\n         return assemblerRegistry.getAssembler(aggregateRoot, dto);\n     }\n \n-    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n-            Class<D> dto) {\n-        if (assemblerQualifierClass != null) {\n+    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple, Class<D> dto) {\n+    if (assemblerQualifierClass != null) {\n             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n         } else if (assemblerQualifier != null) {\n             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n@@ -111,4 +110,4 @@ class Context {\n                 .put(\"dtoClass\", dto.getClass()\n                         .getName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/19/Context.java\nindex 19203d0b9a..d9c7eb699c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/19/Context.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n import java.lang.annotation.Annotation;\n import java.util.Set;\n import org.javatuples.Tuple;\n@@ -24,15 +23,18 @@ import org.seedstack.business.spi.DtoInfoResolver;\n /**\n  * Context used by the DSL to carry the internal registry and the qualifier it uses.\n  */\n+\n+\n class Context {\n+\n     private final DomainRegistry domainRegistry;\n     private final AssemblerRegistry assemblerRegistry;\n     private final Set<DtoInfoResolver> dtoInfoResolvers;\n     private Annotation assemblerQualifier;\n     private Class<? extends Annotation> assemblerQualifierClass;\n \n-    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n-            Set<DtoInfoResolver> dtoInfoResolvers) {\n+\n+    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry, Set<DtoInfoResolver> dtoInfoResolvers) {\n         this.domainRegistry = domainRegistry;\n         this.assemblerRegistry = assemblerRegistry;\n         this.dtoInfoResolvers = dtoInfoResolvers;\n@@ -42,73 +44,76 @@ class Context {\n         this.assemblerQualifier = assemblerQualifier;\n     }\n \n+\n     void setAssemblerQualifierClass(Class<? extends Annotation> assemblerQualifierClass) {\n         this.assemblerQualifierClass = assemblerQualifierClass;\n     }\n \n+\n     <A extends AggregateRoot<I>, I, D> Assembler<A, D> assemblerOf(Class<A> aggregateRoot, Class<D> dto) {\n         if (assemblerQualifierClass != null) {\n             return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifierClass);\n         } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n-        }\n+                   return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n+               }\n         return assemblerRegistry.getAssembler(aggregateRoot, dto);\n     }\n \n-    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n-            Class<D> dto) {\n+\n+    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple, Class<D> dto) {\n         if (assemblerQualifierClass != null) {\n             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n         } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n-        }\n+                   return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n+               }\n         return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto);\n     }\n \n+\n     <D, A extends AggregateRoot<I>, I> A create(D dto, Class<A> aggregateClass) {\n         return findResolverFor(dto).resolveAggregate(dto, aggregateClass);\n     }\n \n+\n     <D, A extends AggregateRoot<?>> A create(D dto, Class<A> aggregateClass, int indexInTuple) {\n         return findResolverFor(dto).resolveAggregate(dto, aggregateClass, indexInTuple);\n     }\n \n+\n     <A extends AggregateRoot<I>, I> A load(I id, Class<A> aggregateClass) {\n-        return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass))\n-                .get(id)\n-                .orElse(null);\n+        return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass)).get(id)\n+.orElse(null);\n     }\n \n+\n     <D, I> I resolveId(D dto, Class<I> aggregateIdClass) {\n         return findResolverFor(dto).resolveId(dto, aggregateIdClass);\n     }\n \n+\n     <D, I> I resolveId(D dto, Class<I> aggregateIdClass, int position) {\n         return findResolverFor(dto).resolveId(dto, aggregateIdClass, position);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n+    @SuppressWarnings(\"unchecked\") <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n         checkNotNull(dto);\n         checkNotNull(aggregateRoot);\n         Assembler<A, D> assembler = assemblerOf((Class<A>) aggregateRoot.getClass(), (Class<D>) dto.getClass());\n         assembler.mergeDtoIntoAggregate(dto, aggregateRoot);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n+    @SuppressWarnings(\"unchecked\") <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n         Assembler<Tuple, D> tupleAssembler = tupleAssemblerOf(aggregateClasses, (Class<D>) dto.getClass());\n         tupleAssembler.mergeDtoIntoAggregate(dto, tuple);\n     }\n \n+\n     private <D> DtoInfoResolver findResolverFor(D dto) {\n-        for (DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n+        for(DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n             if (dtoInfoResolver.supports(dto)) {\n                 return dtoInfoResolver;\n             }\n         }\n-        throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER)\n-                .put(\"dtoClass\", dto.getClass()\n-                        .getName());\n+        throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER).put(\"dtoClass\", dto.getClass().getName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "12",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "13",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'class def ident' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/19/Context.java\nindex 19203d0b9a..9a37a255fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/19/Context.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/19/Context.java\n@@ -5,110 +5,111 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.assembler.dsl;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-import java.lang.annotation.Annotation;\n-import java.util.Set;\n-import org.javatuples.Tuple;\n-import org.seedstack.business.assembler.Assembler;\n-import org.seedstack.business.assembler.AssemblerRegistry;\n-import org.seedstack.business.domain.AggregateRoot;\n-import org.seedstack.business.domain.DomainRegistry;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.business.internal.utils.BusinessUtils;\n-import org.seedstack.business.spi.DtoInfoResolver;\n-\n-/**\n+\n+package org .seedstack.business.internal.assembler.dsl;import\n+static com.google.common.base.Preconditions.checkNotNull;\n+\n+ import java.lang.annotation.Annotation;\n+ import java.util.Set;\n+ import org.javatuples.Tuple;\n+ import org.seedstack.business.assembler.Assembler;\n+ import org.seedstack.business.assembler.AssemblerRegistry;\n+ import org.seedstack.business.domain.AggregateRoot;\n+ import org.seedstack.business.domain.DomainRegistry;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.business.internal.utils.BusinessUtils;\n+ import org.seedstack.business.spi.DtoInfoResolver;\n+\n+ /**\n  * Context used by the DSL to carry the internal registry and the qualifier it uses.\n  */\n-class Context {\n-    private final DomainRegistry domainRegistry;\n-    private final AssemblerRegistry assemblerRegistry;\n-    private final Set<DtoInfoResolver> dtoInfoResolvers;\n-    private Annotation assemblerQualifier;\n-    private Class<? extends Annotation> assemblerQualifierClass;\n-\n-    public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n-            Set<DtoInfoResolver> dtoInfoResolvers) {\n-        this.domainRegistry = domainRegistry;\n-        this.assemblerRegistry = assemblerRegistry;\n-        this.dtoInfoResolvers = dtoInfoResolvers;\n-    }\n-\n-    void setAssemblerQualifier(Annotation assemblerQualifier) {\n-        this.assemblerQualifier = assemblerQualifier;\n-    }\n-\n-    void setAssemblerQualifierClass(Class<? extends Annotation> assemblerQualifierClass) {\n-        this.assemblerQualifierClass = assemblerQualifierClass;\n-    }\n-\n-    <A extends AggregateRoot<I>, I, D> Assembler<A, D> assemblerOf(Class<A> aggregateRoot, Class<D> dto) {\n-        if (assemblerQualifierClass != null) {\n-            return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifierClass);\n-        } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n-        }\n-        return assemblerRegistry.getAssembler(aggregateRoot, dto);\n-    }\n-\n-    <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n-            Class<D> dto) {\n-        if (assemblerQualifierClass != null) {\n-            return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n-        } else if (assemblerQualifier != null) {\n-            return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n-        }\n-        return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto);\n-    }\n-\n-    <D, A extends AggregateRoot<I>, I> A create(D dto, Class<A> aggregateClass) {\n-        return findResolverFor(dto).resolveAggregate(dto, aggregateClass);\n-    }\n-\n-    <D, A extends AggregateRoot<?>> A create(D dto, Class<A> aggregateClass, int indexInTuple) {\n-        return findResolverFor(dto).resolveAggregate(dto, aggregateClass, indexInTuple);\n-    }\n-\n-    <A extends AggregateRoot<I>, I> A load(I id, Class<A> aggregateClass) {\n-        return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass))\n-                .get(id)\n-                .orElse(null);\n-    }\n-\n-    <D, I> I resolveId(D dto, Class<I> aggregateIdClass) {\n-        return findResolverFor(dto).resolveId(dto, aggregateIdClass);\n-    }\n-\n-    <D, I> I resolveId(D dto, Class<I> aggregateIdClass, int position) {\n-        return findResolverFor(dto).resolveId(dto, aggregateIdClass, position);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n-        checkNotNull(dto);\n-        checkNotNull(aggregateRoot);\n-        Assembler<A, D> assembler = assemblerOf((Class<A>) aggregateRoot.getClass(), (Class<D>) dto.getClass());\n-        assembler.mergeDtoIntoAggregate(dto, aggregateRoot);\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n-        Assembler<Tuple, D> tupleAssembler = tupleAssemblerOf(aggregateClasses, (Class<D>) dto.getClass());\n-        tupleAssembler.mergeDtoIntoAggregate(dto, tuple);\n-    }\n-\n-    private <D> DtoInfoResolver findResolverFor(D dto) {\n-        for (DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n-            if (dtoInfoResolver.supports(dto)) {\n-                return dtoInfoResolver;\n-            }\n-        }\n-        throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER)\n-                .put(\"dtoClass\", dto.getClass()\n-                        .getName());\n-    }\n-}\n+ class Context {\n+     private final DomainRegistry domainRegistry;\n+     private final AssemblerRegistry assemblerRegistry;\n+     private final Set<DtoInfoResolver> dtoInfoResolvers;\n+     private Annotation assemblerQualifier;\n+     private Class<? extends Annotation> assemblerQualifierClass;\n+\n+     public Context(DomainRegistry domainRegistry, AssemblerRegistry assemblerRegistry,\n+             Set<DtoInfoResolver> dtoInfoResolvers) {\n+         this.domainRegistry = domainRegistry;\n+         this.assemblerRegistry = assemblerRegistry;\n+         this.dtoInfoResolvers = dtoInfoResolvers;\n+     }\n+\n+     void setAssemblerQualifier(Annotation assemblerQualifier) {\n+         this.assemblerQualifier = assemblerQualifier;\n+     }\n+\n+     void setAssemblerQualifierClass(Class<? extends Annotation> assemblerQualifierClass) {\n+         this.assemblerQualifierClass = assemblerQualifierClass;\n+     }\n+\n+     <A extends AggregateRoot<I>, I, D> Assembler<A, D> assemblerOf(Class<A> aggregateRoot, Class<D> dto) {\n+         if (assemblerQualifierClass != null) {\n+             return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifierClass);\n+         } else if (assemblerQualifier != null) {\n+             return assemblerRegistry.getAssembler(aggregateRoot, dto, assemblerQualifier);\n+         }\n+         return assemblerRegistry.getAssembler(aggregateRoot, dto);\n+     }\n+\n+     <T extends Tuple, D> Assembler<T, D> tupleAssemblerOf(Class<? extends AggregateRoot<?>>[] aggregateRootTuple,\n+             Class<D> dto) {\n+         if (assemblerQualifierClass != null) {\n+             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifierClass);\n+         } else if (assemblerQualifier != null) {\n+             return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto, assemblerQualifier);\n+         }\n+         return assemblerRegistry.getTupleAssembler(aggregateRootTuple, dto);\n+     }\n+\n+     <D, A extends AggregateRoot<I>, I> A create(D dto, Class<A> aggregateClass) {\n+         return findResolverFor(dto).resolveAggregate(dto, aggregateClass);\n+     }\n+\n+     <D, A extends AggregateRoot<?>> A create(D dto, Class<A> aggregateClass, int indexInTuple) {\n+         return findResolverFor(dto).resolveAggregate(dto, aggregateClass, indexInTuple);\n+     }\n+\n+     <A extends AggregateRoot<I>, I> A load(I id, Class<A> aggregateClass) {\n+         return domainRegistry.getRepository(aggregateClass, BusinessUtils.resolveAggregateIdClass(aggregateClass))\n+                 .get(id)\n+                 .orElse(null);\n+     }\n+\n+     <D, I> I resolveId(D dto, Class<I> aggregateIdClass) {\n+         return findResolverFor(dto).resolveId(dto, aggregateIdClass);\n+     }\n+\n+     <D, I> I resolveId(D dto, Class<I> aggregateIdClass, int position) {\n+         return findResolverFor(dto).resolveId(dto, aggregateIdClass, position);\n+     }\n+\n+     @SuppressWarnings(\"unchecked\")\n+     <A extends AggregateRoot<I>, I, D> void mergeDtoIntoAggregate(D dto, A aggregateRoot) {\n+         checkNotNull(dto);\n+         checkNotNull(aggregateRoot);\n+         Assembler<A, D> assembler = assemblerOf((Class<A>) aggregateRoot.getClass(), (Class<D>) dto.getClass());\n+         assembler.mergeDtoIntoAggregate(dto, aggregateRoot);\n+     }\n+\n+     @SuppressWarnings(\"unchecked\")\n+     <D, T extends Tuple> void mergeDtoIntoTuple(D dto, T tuple, Class<? extends AggregateRoot<?>>[] aggregateClasses) {\n+         Assembler<Tuple, D> tupleAssembler = tupleAssemblerOf(aggregateClasses, (Class<D>) dto.getClass());\n+         tupleAssembler.mergeDtoIntoAggregate(dto, tuple);\n+     }\n+\n+     private <D> DtoInfoResolver findResolverFor(D dto) {\n+         for (DtoInfoResolver dtoInfoResolver : dtoInfoResolvers) {\n+             if (dtoInfoResolver.supports(dto)) {\n+                 return dtoInfoResolver;\n+             }\n+         }\n+         throw BusinessException.createNew(BusinessErrorCode.UNABLE_TO_FIND_SUITABLE_DTO_INFO_RESOLVER)\n+                 .put(\"dtoClass\", dto.getClass()\n+                         .getName());\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}