{
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "186",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        final List<HDocument> allIterationDocs = documentDAO\n                .getAllByProjectIteration(projectSlug, iterationSlug);\n        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n        // the zanata.xml\n        // file\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/51/TranslationArchiveServiceImpl.java\nindex fe8fec170b..d2e83ec4d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/51/TranslationArchiveServiceImpl.java\n@@ -183,7 +183,7 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+                handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n         // the zanata.xml\n         // file\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/51/TranslationArchiveServiceImpl.java\nindex fe8fec170b..45cbf0e647 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/51/TranslationArchiveServiceImpl.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.service.impl;\n \n import com.google.common.base.Optional;\n@@ -60,15 +61,15 @@ import static org.zanata.common.ProjectType.*;\n \n /**\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n @Named(\"translationArchiveServiceImpl\")\n @RequestScoped\n @Transactional\n public class TranslationArchiveServiceImpl\n-        implements TranslationArchiveService {\n+    implements TranslationArchiveService {\n     private static final org.slf4j.Logger log = org.slf4j.LoggerFactory\n-            .getLogger(TranslationArchiveServiceImpl.class);\n+        .getLogger(TranslationArchiveServiceImpl.class);\n     private static final long serialVersionUID = 1929063191914482238L;\n \n     @Inject\n@@ -88,52 +89,52 @@ public class TranslationArchiveServiceImpl\n \n     @Override\n     public String buildTranslationFileArchive(String projectSlug,\n-            String iterationSlug, String localeId, String userName,\n-            AsyncTaskHandle<String> handle) throws Exception {\n+                                              String iterationSlug, String localeId, String userName,\n+                                              AsyncTaskHandle<String> handle) throws Exception {\n         Optional<AsyncTaskHandle<String>> handleOpt =\n-                Optional.fromNullable(handle);\n+            Optional.fromNullable(handle);\n         if (handleOpt.isPresent()) {\n             prepareHandle(handleOpt.get(), projectSlug, iterationSlug);\n         }\n         boolean isPoProject = isPoProject(projectSlug, iterationSlug);\n         final String projectDirectory = projectSlug + \"-\" + iterationSlug + \"/\";\n         final HLocale hLocale =\n-                localeDAO.findByLocaleId(new LocaleId(localeId));\n+            localeDAO.findByLocaleId(new LocaleId(localeId));\n         if (hLocale == null) {\n             throw new EntityNotFoundException(\"Locale not support \" + localeId);\n         }\n         final String mappedLocale = hLocale.getLocaleId().getId();\n         final String localeDirectory = projectDirectory + mappedLocale + \"/\";\n         final File downloadFile =\n-                fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n+            fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n         final FileOutputStream output = new FileOutputStream(downloadFile);\n         final ZipOutputStream zipOutput = new ZipOutputStream(output);\n         zipOutput.setMethod(ZipOutputStream.DEFLATED);\n         // TODO should we have an option for approvedOnly?\n         final PoWriter2 poWriter =\n-                new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n-                        .create();\n+            new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n+                .create();\n         final Set<String> extensions = new HashSet<String>();\n         extensions.add(\"gettext\");\n         extensions.add(\"comment\");\n         // Generate the download descriptor file\n         String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(\n-                downloadFile,\n-                projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n-                userName);\n+            downloadFile,\n+            projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n+            userName);\n         // Add the config file at the root of the project directory\n         String configFilename = projectDirectory\n-                + configurationServiceImpl.getConfigurationFileName();\n+            + configurationServiceImpl.getConfigurationFileName();\n         zipOutput.putNextEntry(new ZipEntry(configFilename));\n         zipOutput\n-                .write(configurationServiceImpl\n-                        .getConfigForOfflineTranslation(projectSlug,\n-                                iterationSlug, hLocale)\n-                        .getBytes(StandardCharsets.UTF_8));\n+            .write(configurationServiceImpl\n+                .getConfigForOfflineTranslation(projectSlug,\n+                    iterationSlug, hLocale)\n+                .getBytes(StandardCharsets.UTF_8));\n         zipOutput.closeEntry();\n         handle.increaseProgress(1);\n         final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+            .getAllByProjectIteration(projectSlug, iterationSlug);\n         for (HDocument document : allIterationDocs) {\n             // Stop the process if signaled to do so\n             if (handleOpt.isPresent() && handleOpt.get().isCancelled()) {\n@@ -148,12 +149,12 @@ public class TranslationArchiveServiceImpl\n                 return null;\n             }\n             TranslationsResource translationResource =\n-                    new TranslationsResource();\n+                new TranslationsResource();\n             List<HTextFlowTarget> hTargets =\n-                    textFlowTargetDAO.findTranslations(document, hLocale);\n+                textFlowTargetDAO.findTranslations(document, hLocale);\n             resourceUtils.transferToTranslationsResource(translationResource,\n-                    document, hLocale, extensions, hTargets,\n-                    true);\n+                document, hLocale, extensions, hTargets,\n+                true);\n             Resource res = resourceUtils.buildResource(document);\n             String filename = localeDirectory + document.getDocId() + \".po\";\n             zipOutput.putNextEntry(new ZipEntry(filename));\n@@ -171,18 +172,18 @@ public class TranslationArchiveServiceImpl\n     @Override\n     @Async\n     public Future<String> startBuildingTranslationFileArchive(\n-            String projectSlug, String iterationSlug, String localeId,\n-            String userName, AsyncTaskHandle<String> handle) throws Exception {\n+        String projectSlug, String iterationSlug, String localeId,\n+        String userName, AsyncTaskHandle<String> handle) throws Exception {\n         String archiveId = buildTranslationFileArchive(projectSlug,\n-                iterationSlug, localeId, userName, handle);\n+            iterationSlug, localeId, userName, handle);\n         return AsyncTaskResult.completed(archiveId);\n     }\n \n     private void prepareHandle(AsyncTaskHandle<String> handle,\n-            String projectSlug, String iterationSlug) {\n+                               String projectSlug, String iterationSlug) {\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+            .getAllByProjectIteration(projectSlug, iterationSlug);\n         handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n         // the zanata.xml\n         // file\n@@ -190,7 +191,7 @@ public class TranslationArchiveServiceImpl\n \n     private boolean isPoProject(String projectSlug, String versionSlug) {\n         HProjectIteration projectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, versionSlug);\n+            projectIterationDAO.getBySlug(projectSlug, versionSlug);\n         ProjectType type = projectIteration.getProjectType();\n         if (type == null) {\n             type = projectIteration.getProject().getDefaultProjectType();\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/51/TranslationArchiveServiceImpl.java\nindex fe8fec170b..2dd5d9aa21 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/51/TranslationArchiveServiceImpl.java\n@@ -25,7 +25,6 @@ import javax.enterprise.context.RequestScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n import javax.persistence.EntityNotFoundException;\n-\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n import org.zanata.adapter.po.PoWriter2;\n import org.zanata.async.Async;\n@@ -56,84 +55,84 @@ import java.util.Set;\n import java.util.concurrent.Future;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n+\n import static org.zanata.common.ProjectType.*;\n \n /**\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n+\n+\n @Named(\"translationArchiveServiceImpl\")\n @RequestScoped\n @Transactional\n-public class TranslationArchiveServiceImpl\n-        implements TranslationArchiveService {\n-    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory\n-            .getLogger(TranslationArchiveServiceImpl.class);\n+public class TranslationArchiveServiceImpl implements TranslationArchiveService {\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(TranslationArchiveServiceImpl.class);\n     private static final long serialVersionUID = 1929063191914482238L;\n \n     @Inject\n     private DocumentDAO documentDAO;\n+\n     @Inject\n     private LocaleDAO localeDAO;\n+\n     @Inject\n     private ProjectIterationDAO projectIterationDAO;\n+\n     @Inject\n     private ResourceUtils resourceUtils;\n+\n     @Inject\n     private TextFlowTargetDAO textFlowTargetDAO;\n+\n     @Inject\n     private FileSystemService fileSystemServiceImpl;\n+\n     @Inject\n     private ConfigurationService configurationServiceImpl;\n \n     @Override\n     public String buildTranslationFileArchive(String projectSlug,\n-            String iterationSlug, String localeId, String userName,\n-            AsyncTaskHandle<String> handle) throws Exception {\n-        Optional<AsyncTaskHandle<String>> handleOpt =\n-                Optional.fromNullable(handle);\n+        String iterationSlug,\n+            String localeId,\n+                String userName, AsyncTaskHandle<String> handle) throws Exception {\n+        Optional<AsyncTaskHandle<String>> handleOpt = Optional.fromNullable(handle);\n         if (handleOpt.isPresent()) {\n             prepareHandle(handleOpt.get(), projectSlug, iterationSlug);\n         }\n         boolean isPoProject = isPoProject(projectSlug, iterationSlug);\n-        final String projectDirectory = projectSlug + \"-\" + iterationSlug + \"/\";\n-        final HLocale hLocale =\n-                localeDAO.findByLocaleId(new LocaleId(localeId));\n+        final String projectDirectory = projectSlug + \"-\"\n+        + iterationSlug + \"/\";\n+        final HLocale hLocale = localeDAO.findByLocaleId(new LocaleId(localeId));\n         if (hLocale == null) {\n             throw new EntityNotFoundException(\"Locale not support \" + localeId);\n         }\n         final String mappedLocale = hLocale.getLocaleId().getId();\n         final String localeDirectory = projectDirectory + mappedLocale + \"/\";\n-        final File downloadFile =\n-                fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n+        final File downloadFile = fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n         final FileOutputStream output = new FileOutputStream(downloadFile);\n         final ZipOutputStream zipOutput = new ZipOutputStream(output);\n         zipOutput.setMethod(ZipOutputStream.DEFLATED);\n         // TODO should we have an option for approvedOnly?\n-        final PoWriter2 poWriter =\n-                new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n-                        .create();\n+        final PoWriter2 poWriter = new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n+                                                          .create();\n         final Set<String> extensions = new HashSet<String>();\n         extensions.add(\"gettext\");\n         extensions.add(\"comment\");\n         // Generate the download descriptor file\n-        String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(\n-                downloadFile,\n-                projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n-                userName);\n+        String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(downloadFile,\n+                                                                               projectSlug + \"_\"\n+                                                                               + iterationSlug + \"_\"\n+                                                                               + localeId + \".zip\",\n+                                                                               userName);\n         // Add the config file at the root of the project directory\n-        String configFilename = projectDirectory\n-                + configurationServiceImpl.getConfigurationFileName();\n+        String configFilename = projectDirectory + configurationServiceImpl.getConfigurationFileName();\n         zipOutput.putNextEntry(new ZipEntry(configFilename));\n-        zipOutput\n-                .write(configurationServiceImpl\n-                        .getConfigForOfflineTranslation(projectSlug,\n-                                iterationSlug, hLocale)\n-                        .getBytes(StandardCharsets.UTF_8));\n+        zipOutput.write(configurationServiceImpl.getConfigForOfflineTranslation(projectSlug, iterationSlug, hLocale).getBytes(StandardCharsets.UTF_8));\n         zipOutput.closeEntry();\n         handle.increaseProgress(1);\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+        final List<HDocument> allIterationDocs = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n         for (HDocument document : allIterationDocs) {\n             // Stop the process if signaled to do so\n             if (handleOpt.isPresent() && handleOpt.get().isCancelled()) {\n@@ -147,13 +146,13 @@ public class TranslationArchiveServiceImpl\n                 fileSystemServiceImpl.deleteDownloadDescriptorFile(downloadId);\n                 return null;\n             }\n-            TranslationsResource translationResource =\n-                    new TranslationsResource();\n-            List<HTextFlowTarget> hTargets =\n-                    textFlowTargetDAO.findTranslations(document, hLocale);\n+            TranslationsResource translationResource = new TranslationsResource();\n+            List<HTextFlowTarget> hTargets = textFlowTargetDAO.findTranslations(document, hLocale);\n             resourceUtils.transferToTranslationsResource(translationResource,\n-                    document, hLocale, extensions, hTargets,\n-                    true);\n+document,\n+hLocale,\n+extensions,\n+hTargets, true);\n             Resource res = resourceUtils.buildResource(document);\n             String filename = localeDirectory + document.getDocId() + \".po\";\n             zipOutput.putNextEntry(new ZipEntry(filename));\n@@ -170,31 +169,28 @@ public class TranslationArchiveServiceImpl\n \n     @Override\n     @Async\n-    public Future<String> startBuildingTranslationFileArchive(\n-            String projectSlug, String iterationSlug, String localeId,\n-            String userName, AsyncTaskHandle<String> handle) throws Exception {\n-        String archiveId = buildTranslationFileArchive(projectSlug,\n-                iterationSlug, localeId, userName, handle);\n+    public Future<String> startBuildingTranslationFileArchive(String projectSlug,\n+String iterationSlug,\n+String localeId,\n+String userName, AsyncTaskHandle<String> handle) throws Exception {\n+        String archiveId = buildTranslationFileArchive(projectSlug, iterationSlug, localeId, userName, handle);\n         return AsyncTaskResult.completed(archiveId);\n     }\n \n-    private void prepareHandle(AsyncTaskHandle<String> handle,\n-            String projectSlug, String iterationSlug) {\n+    private void prepareHandle(AsyncTaskHandle<String> handle, String projectSlug, String iterationSlug) {\n         // Max documents to process\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+        final List<HDocument> allIterationDocs = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n         handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n         // the zanata.xml\n         // file\n     }\n \n     private boolean isPoProject(String projectSlug, String versionSlug) {\n-        HProjectIteration projectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, versionSlug);\n+        HProjectIteration projectIteration = projectIterationDAO.getBySlug(projectSlug, versionSlug);\n         ProjectType type = projectIteration.getProjectType();\n         if (type == null) {\n             type = projectIteration.getProject().getDefaultProjectType();\n         }\n         return type == Gettext || type == Podir;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "188",
                    "column": "10",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "188",
                    "column": "10",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/51/TranslationArchiveServiceImpl.java\nindex fe8fec170b..3d54b6641c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/51/TranslationArchiveServiceImpl.java\n@@ -183,7 +183,9 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+        handle.setMaxProgress(allIterationDocs.size\n+        (\n+        )+1); // all files plus\n         // the zanata.xml\n         // file\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/51/TranslationArchiveServiceImpl.java\nindex fe8fec170b..d2e83ec4d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/51/TranslationArchiveServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/51/TranslationArchiveServiceImpl.java\n@@ -183,7 +183,7 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+                handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n         // the zanata.xml\n         // file\n     }\n",
            "diff_size": 1
        }
    ]
}