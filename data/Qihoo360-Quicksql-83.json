{
    "error_id": "83",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.apache.calcite.adapter.enumerable;\n\n/**\n * Describes when a function/operator will return null.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/83/NullPolicy.java\nindex e85343203a..43c34311ac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/83/NullPolicy.java\n@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.adapter.enumerable;\r\n-\r\n-/**\r\n- * Describes when a function/operator will return null.\r\n- *\r\n- * <p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return\r\n- * null if a0 and a1 are not null. This means that we can check whether f\r\n- * returns null just by checking its arguments. Use STRICT in preference to\r\n- * ANY whenever possible.</p>\r\n- */\r\n-public enum NullPolicy {\r\n-  /** Returns null if and only if one of the arguments are null. */\r\n-  STRICT,\r\n-  /** Returns null if one of the arguments is null, and possibly other times. */\r\n-  SEMI_STRICT,\r\n-  /** If any of the arguments are null, return null. */\r\n-  ANY,\r\n-  /** If any of the arguments are false, result is false; else if any\r\n-   * arguments are null, result is null; else true. */\r\n-  AND,\r\n-  /** If any of the arguments are true, result is true; else if any\r\n-   * arguments are null, result is null; else false. */\r\n-  OR,\r\n-  /** If any argument is true, result is false; else if any argument is null,\r\n-   * result is null; else true. */\r\n-  NOT,\r\n-  NONE\r\n-}\r\n-\r\n-// End NullPolicy.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+/**\n+ * Describes when a function/operator will return null.\n+ *\n+ * <p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return\n+ * null if a0 and a1 are not null. This means that we can check whether f\n+ * returns null just by checking its arguments. Use STRICT in preference to\n+ * ANY whenever possible.</p>\n+ */\n+public enum NullPolicy {\n+  /** Returns null if and only if one of the arguments are null. */\n+  STRICT,\n+  /** Returns null if one of the arguments is null, and possibly other times. */\n+  SEMI_STRICT,\n+  /** If any of the arguments are null, return null. */\n+  ANY,\n+  /** If any of the arguments are false, result is false; else if any\n+   * arguments are null, result is null; else true. */\n+  AND,\n+  /** If any of the arguments are true, result is true; else if any\n+   * arguments are null, result is null; else false. */\n+  OR,\n+  /** If any argument is true, result is false; else if any argument is null,\n+   * result is null; else true. */\n+  NOT,\n+  NONE\n+}\n+\n+// End NullPolicy.java\n",
            "diff_size": 46
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/83/NullPolicy.java\nindex e85343203a..a5e8953f6d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/83/NullPolicy.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.apache.calcite.adapter.enumerable;\r\n \r\n /**\r\n@@ -25,22 +26,34 @@ package org.apache.calcite.adapter.enumerable;\n  * ANY whenever possible.</p>\r\n  */\r\n public enum NullPolicy {\r\n-  /** Returns null if and only if one of the arguments are null. */\r\n-  STRICT,\r\n-  /** Returns null if one of the arguments is null, and possibly other times. */\r\n-  SEMI_STRICT,\r\n-  /** If any of the arguments are null, return null. */\r\n-  ANY,\r\n-  /** If any of the arguments are false, result is false; else if any\r\n-   * arguments are null, result is null; else true. */\r\n-  AND,\r\n-  /** If any of the arguments are true, result is true; else if any\r\n-   * arguments are null, result is null; else false. */\r\n-  OR,\r\n-  /** If any argument is true, result is false; else if any argument is null,\r\n-   * result is null; else true. */\r\n-  NOT,\r\n-  NONE\r\n+    /**\r\n+     * Returns null if and only if one of the arguments are null.\r\n+     */\r\n+    STRICT,\r\n+    /**\r\n+     * Returns null if one of the arguments is null, and possibly other times.\r\n+     */\r\n+    SEMI_STRICT,\r\n+    /**\r\n+     * If any of the arguments are null, return null.\r\n+     */\r\n+    ANY,\r\n+    /**\r\n+     * If any of the arguments are false, result is false; else if any\r\n+     * arguments are null, result is null; else true.\r\n+     */\r\n+    AND,\r\n+    /**\r\n+     * If any of the arguments are true, result is true; else if any\r\n+     * arguments are null, result is null; else false.\r\n+     */\r\n+    OR,\r\n+    /**\r\n+     * If any argument is true, result is false; else if any argument is null,\r\n+     * result is null; else true.\r\n+     */\r\n+    NOT,\r\n+    NONE\r\n }\r\n \r\n // End NullPolicy.java\r\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 31.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 55, indentation should be the same level as line 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 56, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 35, indentation should be the same level as line 39.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/83/NullPolicy.java\nindex e85343203a..78ba244455 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/83/NullPolicy.java\n@@ -23,24 +23,18 @@ package org.apache.calcite.adapter.enumerable;\n  * null if a0 and a1 are not null. This means that we can check whether f\r\n  * returns null just by checking its arguments. Use STRICT in preference to\r\n  * ANY whenever possible.</p>\r\n- */\r\n+ */\n+\n+\n public enum NullPolicy {\r\n-  /** Returns null if and only if one of the arguments are null. */\r\n-  STRICT,\r\n-  /** Returns null if one of the arguments is null, and possibly other times. */\r\n-  SEMI_STRICT,\r\n-  /** If any of the arguments are null, return null. */\r\n-  ANY,\r\n+  /** Returns null if and only if one of the arguments are null. */\n+    STRICT,\r\n+  /** Returns null if one of the arguments is null, and possibly other times. */ SEMI_STRICT,\r\n+  /** If any of the arguments are null, return null. */ ANY,\r\n   /** If any of the arguments are false, result is false; else if any\r\n-   * arguments are null, result is null; else true. */\r\n-  AND,\r\n+   * arguments are null, result is null; else true. */ AND,\r\n   /** If any of the arguments are true, result is true; else if any\r\n-   * arguments are null, result is null; else false. */\r\n-  OR,\r\n+   * arguments are null, result is null; else false. */ OR,\r\n   /** If any argument is true, result is false; else if any argument is null,\r\n-   * result is null; else true. */\r\n-  NOT,\r\n-  NONE\r\n-}\r\n-\r\n-// End NullPolicy.java\r\n+   * result is null; else true. */ NOT, NONE\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/83/NullPolicy.java\nindex e85343203a..43c34311ac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/83/NullPolicy.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/83/NullPolicy.java\n@@ -1,46 +1,46 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.adapter.enumerable;\r\n-\r\n-/**\r\n- * Describes when a function/operator will return null.\r\n- *\r\n- * <p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return\r\n- * null if a0 and a1 are not null. This means that we can check whether f\r\n- * returns null just by checking its arguments. Use STRICT in preference to\r\n- * ANY whenever possible.</p>\r\n- */\r\n-public enum NullPolicy {\r\n-  /** Returns null if and only if one of the arguments are null. */\r\n-  STRICT,\r\n-  /** Returns null if one of the arguments is null, and possibly other times. */\r\n-  SEMI_STRICT,\r\n-  /** If any of the arguments are null, return null. */\r\n-  ANY,\r\n-  /** If any of the arguments are false, result is false; else if any\r\n-   * arguments are null, result is null; else true. */\r\n-  AND,\r\n-  /** If any of the arguments are true, result is true; else if any\r\n-   * arguments are null, result is null; else false. */\r\n-  OR,\r\n-  /** If any argument is true, result is false; else if any argument is null,\r\n-   * result is null; else true. */\r\n-  NOT,\r\n-  NONE\r\n-}\r\n-\r\n-// End NullPolicy.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.calcite.adapter.enumerable;\n+\n+/**\n+ * Describes when a function/operator will return null.\n+ *\n+ * <p>STRICT and ANY are similar. STRICT says f(a0, a1) will NEVER return\n+ * null if a0 and a1 are not null. This means that we can check whether f\n+ * returns null just by checking its arguments. Use STRICT in preference to\n+ * ANY whenever possible.</p>\n+ */\n+public enum NullPolicy {\n+  /** Returns null if and only if one of the arguments are null. */\n+  STRICT,\n+  /** Returns null if one of the arguments is null, and possibly other times. */\n+  SEMI_STRICT,\n+  /** If any of the arguments are null, return null. */\n+  ANY,\n+  /** If any of the arguments are false, result is false; else if any\n+   * arguments are null, result is null; else true. */\n+  AND,\n+  /** If any of the arguments are true, result is true; else if any\n+   * arguments are null, result is null; else false. */\n+  OR,\n+  /** If any argument is true, result is false; else if any argument is null,\n+   * result is null; else true. */\n+  NOT,\n+  NONE\n+}\n+\n+// End NullPolicy.java\n",
            "diff_size": 46
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}