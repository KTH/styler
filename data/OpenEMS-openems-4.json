{
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "490",
                "column": "103",
                "severity": "warning",
                "message": "')' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\t\t\tthis.getAllowedCharge().setNextValue(0);\n\t\t} else {\n\t\t\tthis.getAllowedCharge().setNextValue(TypeUtils.multiply(maxApparentPower, -1) );\n\t\t}\n\t\tif (soc == null || soc <= 0) {\n\t\t\tthis.getAllowedDischarge().setNextValue(0);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "490",
                    "column": "103",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/4/GoodWeEtBatteryInverterImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/4/GoodWeEtBatteryInverterImpl.java\nindex 7637825ba4..969882a8ac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/4/GoodWeEtBatteryInverterImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/intellij/4/GoodWeEtBatteryInverterImpl.java\n@@ -51,470 +51,470 @@ import io.openems.edge.goodwe.et.charger.AbstractGoodWeEtCharger;\n \n @Designate(ocd = Config.class, factory = true)\n @Component(//\n-\t\tname = \"GoodWe.ET.Battery-Inverter\", //\n-\t\timmediate = true, //\n-\t\tconfigurationPolicy = ConfigurationPolicy.REQUIRE, //\n-\t\tproperty = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE //\n+    name = \"GoodWe.ET.Battery-Inverter\", //\n+    immediate = true, //\n+    configurationPolicy = ConfigurationPolicy.REQUIRE, //\n+    property = EventConstants.EVENT_TOPIC + \"=\" + EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE //\n ) //\n public class GoodWeEtBatteryInverterImpl extends AbstractOpenemsModbusComponent\n-\t\timplements GoodWeEtBatteryInverter, ManagedSymmetricEss, SymmetricEss, OpenemsComponent, EventHandler {\n-\n-\tprotected EnumWriteChannel setEmsPowerMode;\n-\n-\tprivate Config config;\n-\n-\t@Reference\n-\tprotected ConfigurationAdmin cm;\n-\n-\t@Reference\n-\tprivate Power power;\n-\n-\tprivate final Set<AbstractGoodWeEtCharger> chargers = new HashSet<>();\n-\n-\t@Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n-\tprotected void setModbus(BridgeModbus modbus) {\n-\t\tsuper.setModbus(modbus); // Bridge Modbus\n-\t}\n-\n-\t@Activate\n-\tvoid activate(ComponentContext context, Config config) throws OpenemsNamedException {\n-\t\tsuper.activate(context, config.id(), config.alias(), config.enabled(), config.unit_id(), this.cm, \"Modbus\",\n-\t\t\t\tconfig.modbus_id());\n-\t\tthis.config = config;\n-\t\tthis.channel(SymmetricEss.ChannelId.CAPACITY).setNextValue(this.config.capacity());\n-\t}\n-\n-\t@Deactivate\n-\tprotected void deactivate() {\n-\t\tsuper.deactivate();\n-\t}\n-\n-\tpublic GoodWeEtBatteryInverterImpl() throws OpenemsNamedException {\n-\t\tsuper(//\n-\t\t\t\tOpenemsComponent.ChannelId.values(), //\n-\t\t\t\tSymmetricEss.ChannelId.values(), //\n-\t\t\t\tManagedSymmetricEss.ChannelId.values(), //\n-\t\t\t\tEssChannelId.values() //\n-\t\t);\n-\t}\n-\n-\tpublic String getModbusBridgeId() {\n-\t\treturn this.config.modbus_id();\n-\t}\n-\n-\t@Override\n-\tprotected ModbusProtocol defineModbusProtocol() {\n-\t\treturn new ModbusProtocol(this, //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(35001, Priority.ONCE, //\n-\t\t\t\t\t\tm(SymmetricEss.ChannelId.MAX_APPARENT_POWER, new UnsignedWordElement(35001))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(35111, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.V_PV3, new UnsignedWordElement(35111),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.I_PV3, new UnsignedWordElement(35112),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35113, 35114), //\n-\t\t\t\t\t\tm(EssChannelId.V_PV4, new UnsignedWordElement(35115),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.I_PV4, new UnsignedWordElement(35116),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35117, 35118), //\n-\t\t\t\t\t\tm(EssChannelId.PV_MODE, new UnsignedDoublewordElement(35119))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(35136, Priority.HIGH, //\n-\t\t\t\t\t\tm(SymmetricEss.ChannelId.GRID_MODE, new UnsignedWordElement(35136), //\n-\t\t\t\t\t\t\t\tnew ElementToChannelConverter((value) -> {\n-\t\t\t\t\t\t\t\t\tInteger intValue = TypeUtils.<Integer>getAsType(OpenemsType.INTEGER, value);\n-\t\t\t\t\t\t\t\t\tif (intValue != null) {\n-\t\t\t\t\t\t\t\t\t\tswitch (intValue) {\n-\t\t\t\t\t\t\t\t\t\tcase 0:\n-\t\t\t\t\t\t\t\t\t\t\treturn GridMode.OFF_GRID;\n-\t\t\t\t\t\t\t\t\t\tcase 1:\n-\t\t\t\t\t\t\t\t\t\t\treturn GridMode.ON_GRID;\n-\t\t\t\t\t\t\t\t\t\tcase 2:\n-\t\t\t\t\t\t\t\t\t\t\treturn GridMode.UNDEFINED;\n-\t\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\treturn GridMode.UNDEFINED;\n-\t\t\t\t\t\t\t\t}))), //\n-\t\t\t\tnew FC3ReadRegistersTask(35138, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.TOTAL_INV_POWER, new SignedWordElement(35138)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35139), //\n-\t\t\t\t\t\tm(EssChannelId.AC_ACTIVE_POWER, new SignedWordElement(35140), //\n-\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35141), //\n-\t\t\t\t\t\tm(EssChannelId.AC_REACTIVE_POWER, new SignedWordElement(35142), //\n-\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35143), //\n-\t\t\t\t\t\tm(EssChannelId.AC_APPARENT_POWER, new SignedWordElement(35144), //\n-\t\t\t\t\t\t\t\tElementToChannelConverter.INVERT), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_V_LOAD_R, new UnsignedWordElement(35145), //\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_I_LOAD_R, new UnsignedWordElement(35146),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_F_LOAD_R, new UnsignedWordElement(35147),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(EssChannelId.LOAD_MODE_R, new UnsignedWordElement(35148)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35149), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_P_LOAD_R, new SignedWordElement(35150)), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_V_LOAD_S, new UnsignedWordElement(35151),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_I_LOAD_S, new UnsignedWordElement(35152),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_F_LOAD_S, new UnsignedWordElement(35153),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(EssChannelId.LOAD_MODE_S, new UnsignedWordElement(35154)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35155), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_P_LOAD_S, new SignedWordElement(35156)), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_V_LOAD_T, new UnsignedWordElement(35157),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_I_LOAD_T, new UnsignedWordElement(35158),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_F_LOAD_T, new UnsignedWordElement(35159),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n-\t\t\t\t\t\tm(EssChannelId.LOAD_MODE_T, new UnsignedWordElement(35160)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35161), //\n-\t\t\t\t\t\tm(EssChannelId.BACK_UP_P_LOAD_T, new SignedWordElement(35162)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35163), //\n-\t\t\t\t\t\tm(EssChannelId.P_LOAD_R, new SignedWordElement(35164)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35165), //\n-\t\t\t\t\t\tm(EssChannelId.P_LOAD_S, new SignedWordElement(35166)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35167), //\n-\t\t\t\t\t\tm(EssChannelId.P_LOAD_T, new SignedWordElement(35168)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35169), //\n-\t\t\t\t\t\tm(EssChannelId.TOTAL_BACK_UP_LOAD, new SignedWordElement(35170)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35171), //\n-\t\t\t\t\t\tm(EssChannelId.TOTAL_LOAD_POWER, new SignedWordElement(35172)), //\n-\t\t\t\t\t\tm(EssChannelId.UPS_LOAD_PERCENT, new UnsignedWordElement(35173),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_2)), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(35180, Priority.HIGH, //\n-\t\t\t\t\t\tm(EssChannelId.V_BATTERY1, new UnsignedWordElement(35180),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.I_BATTERY1, new SignedWordElement(35181),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35182), //\n-\t\t\t\t\t\tm(EssChannelId.P_BATTERY1, new SignedWordElement(35183)), //\n-\t\t\t\t\t\tm(EssChannelId.BATTERY_MODE, new UnsignedWordElement(35184))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(35185, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.WARNING_CODE, new UnsignedWordElement(35185)), //\n-\t\t\t\t\t\tm(EssChannelId.SAFETY_COUNTRY, new UnsignedWordElement(35186)), //\n-\t\t\t\t\t\tm(EssChannelId.WORK_MODE, new UnsignedWordElement(35187)), //\n-\t\t\t\t\t\tm(EssChannelId.OPERATION_MODE, new UnsignedDoublewordElement(35188))), //\n-\n-\t\t\t\t// Ess Active charge energy\n-\t\t\t\tnew FC3ReadRegistersTask(35206, Priority.LOW, //\n-\t\t\t\t\t\tm(SymmetricEss.ChannelId.ACTIVE_CHARGE_ENERGY, new UnsignedDoublewordElement(35206), //\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_2), //\n-\t\t\t\t\t\tnew DummyRegisterElement(35208), //\n-\t\t\t\t\t\t// Ess Active Discharge energy\n-\t\t\t\t\t\tm(SymmetricEss.ChannelId.ACTIVE_DISCHARGE_ENERGY, new UnsignedDoublewordElement(35209),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_2)), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(36003, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.B_METER_COMMUNICATE_STATUS, new UnsignedWordElement(36003)), //\n-\t\t\t\t\t\tm(EssChannelId.METER_COMMUNICATE_STATUS, new UnsignedWordElement(36004))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(37001, Priority.LOW,\n-\t\t\t\t\t\tm(EssChannelId.BATTERY_TYPE_INDEX, new UnsignedWordElement(37001)), //\n-\t\t\t\t\t\tm(EssChannelId.BMS_STATUS, new UnsignedWordElement(37002)), //\n-\t\t\t\t\t\tm(EssChannelId.BMS_PACK_TEMPERATURE, new UnsignedWordElement(37003),\n-\t\t\t\t\t\t\t\tElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n-\t\t\t\t\t\tm(EssChannelId.BMS_CHARGE_IMAX, new UnsignedWordElement(37004)), //\n-\t\t\t\t\t\tm(EssChannelId.BMS_DISCHARGE_IMAX, new UnsignedWordElement(37005))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(37007, Priority.HIGH, //\n-\t\t\t\t\t\tm(SymmetricEss.ChannelId.SOC, new UnsignedWordElement(37007), new ElementToChannelConverter(\n-\t\t\t\t\t\t\t\t// element -> channel\n-\t\t\t\t\t\t\t\tvalue -> {\n-\t\t\t\t\t\t\t\t\t// Set SoC to undefined if there is No Battery\n-\t\t\t\t\t\t\t\t\tEnumReadChannel batteryModeChannel = this.channel(EssChannelId.BATTERY_MODE);\n-\t\t\t\t\t\t\t\t\tBatteryMode batteryMode = batteryModeChannel.value().asEnum();\n-\t\t\t\t\t\t\t\t\tif (batteryMode == BatteryMode.NO_BATTERY || batteryMode == BatteryMode.UNDEFINED) {\n-\t\t\t\t\t\t\t\t\t\treturn null;\n-\t\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\t\treturn value;\n-\t\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t},\n-\t\t\t\t\t\t\t\t// channel -> element\n-\t\t\t\t\t\t\t\tvalue -> value))), //\n-\t\t\t\tnew FC3ReadRegistersTask(37008, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.BMS_SOH, new UnsignedWordElement(37008)), //\n-\t\t\t\t\t\tm(EssChannelId.BMS_BATTERY_STRINGS, new UnsignedWordElement(37009))), //\n-\n-\t\t\t\tnew FC16WriteRegistersTask(47000, //\n-\t\t\t\t\t\tm(EssChannelId.APP_MODE_INDEX, new UnsignedWordElement(47000)), //\n-\t\t\t\t\t\tm(EssChannelId.METER_CHECK_VALUE, new UnsignedWordElement(47001)), //\n-\t\t\t\t\t\tm(EssChannelId.WMETER_CONNECT_CHECK_FLAG, new UnsignedWordElement(47002))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(47000, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.APP_MODE_INDEX, new UnsignedWordElement(47000)), //\n-\t\t\t\t\t\tm(EssChannelId.METER_CHECK_VALUE, new UnsignedWordElement(47001)), //\n-\t\t\t\t\t\tm(EssChannelId.WMETER_CONNECT_CHECK_FLAG, new UnsignedWordElement(47002))), //\n-\n-\t\t\t\tnew FC16WriteRegistersTask(47500, //\n-\t\t\t\t\t\tm(EssChannelId.STOP_SOC_PROTECT, new UnsignedWordElement(47500)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47501, 47508), //\n-\t\t\t\t\t\tm(EssChannelId.FEED_POWER_ENABLE, new UnsignedWordElement(47509)), //\n-\t\t\t\t\t\tm(EssChannelId.FEED_POWER_PARA, new UnsignedWordElement(47510)), //\n-\t\t\t\t\t\tm(EssChannelId.EMS_POWER_MODE, new UnsignedWordElement(47511)), //\n-\t\t\t\t\t\tm(EssChannelId.EMS_POWER_SET, new UnsignedWordElement(47512))), //\n-\n-\t\t\t\tnew FC16WriteRegistersTask(47531, //\n-\t\t\t\t\t\tm(EssChannelId.SOC_START_TO_FORCE_CHARGE, new UnsignedWordElement(47531)), //\n-\t\t\t\t\t\tm(EssChannelId.SOC_STOP_TO_FORCE_CHARGE, new UnsignedWordElement(47532)), //\n-\t\t\t\t\t\tm(EssChannelId.CLEAR_ALL_ECONOMIC_MODE, new UnsignedWordElement(47533))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(47500, Priority.LOW,\n-\t\t\t\t\t\tm(EssChannelId.STOP_SOC_PROTECT, new UnsignedWordElement(47500)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47501, 47508), //\n-\t\t\t\t\t\tm(EssChannelId.FEED_POWER_ENABLE, new UnsignedWordElement(47509)), //\n-\t\t\t\t\t\tm(EssChannelId.FEED_POWER_PARA, new UnsignedWordElement(47510))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(47511, Priority.HIGH,\n-\t\t\t\t\t\tm(EssChannelId.EMS_POWER_MODE, new UnsignedWordElement(47511)), //\n-\t\t\t\t\t\tm(EssChannelId.EMS_POWER_SET, new UnsignedWordElement(47512))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(47531, Priority.LOW,\n-\t\t\t\t\t\tm(EssChannelId.SOC_START_TO_FORCE_CHARGE, new UnsignedWordElement(47531)), //\n-\t\t\t\t\t\tm(EssChannelId.SOC_STOP_TO_FORCE_CHARGE, new UnsignedWordElement(47532))), //\n-\n-\t\t\t\tnew FC16WriteRegistersTask(47900, //\n-\t\t\t\t\t\tm(EssChannelId.BMS_VERSION, new UnsignedWordElement(47900)), //\n-\t\t\t\t\t\tm(EssChannelId.BATT_STRINGS_RS485, new UnsignedWordElement(47901)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CHARGE_VMAX, new UnsignedWordElement(47902)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CHARGE_IMAX, new UnsignedWordElement(47903)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_DISCHARGE_VMIN, new UnsignedWordElement(47904)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_DISCHARGE_IMAX, new UnsignedWordElement(47905)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_VOLTAGE, new UnsignedWordElement(47906)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CURRENT, new UnsignedWordElement(47907)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_SOC, new UnsignedWordElement(47908)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_SOH, new UnsignedWordElement(47909)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_TEMPERATURE, new UnsignedWordElement(47910)), //\n-\t\t\t\t\t\tm(new BitsWordElement(47911, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_58) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_59) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_60) //\n-\t\t\t\t\t\t\t\t.bit(3, EssChannelId.STATE_61) //\n-\t\t\t\t\t\t\t\t.bit(4, EssChannelId.STATE_62) //\n-\t\t\t\t\t\t\t\t.bit(5, EssChannelId.STATE_63) //\n-\t\t\t\t\t\t\t\t.bit(6, EssChannelId.STATE_64) //\n-\t\t\t\t\t\t\t\t.bit(7, EssChannelId.STATE_65) //\n-\t\t\t\t\t\t\t\t.bit(8, EssChannelId.STATE_66) //\n-\t\t\t\t\t\t\t\t.bit(9, EssChannelId.STATE_67) //\n-\t\t\t\t\t\t\t\t.bit(10, EssChannelId.STATE_68) //\n-\t\t\t\t\t\t\t\t.bit(11, EssChannelId.STATE_69)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47912), //\n-\t\t\t\t\t\tm(new BitsWordElement(47913, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_42) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_43) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_44) //\n-\t\t\t\t\t\t\t\t.bit(3, EssChannelId.STATE_45) //\n-\t\t\t\t\t\t\t\t.bit(4, EssChannelId.STATE_46) //\n-\t\t\t\t\t\t\t\t.bit(5, EssChannelId.STATE_47) //\n-\t\t\t\t\t\t\t\t.bit(6, EssChannelId.STATE_48) //\n-\t\t\t\t\t\t\t\t.bit(7, EssChannelId.STATE_49) //\n-\t\t\t\t\t\t\t\t.bit(8, EssChannelId.STATE_50) //\n-\t\t\t\t\t\t\t\t.bit(9, EssChannelId.STATE_51) //\n-\t\t\t\t\t\t\t\t.bit(10, EssChannelId.STATE_52) //\n-\t\t\t\t\t\t\t\t.bit(11, EssChannelId.STATE_53) //\n-\t\t\t\t\t\t\t\t.bit(12, EssChannelId.STATE_54) //\n-\t\t\t\t\t\t\t\t.bit(13, EssChannelId.STATE_55) //\n-\t\t\t\t\t\t\t\t.bit(14, EssChannelId.STATE_56) //\n-\t\t\t\t\t\t\t\t.bit(15, EssChannelId.STATE_57)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47914), //\n-\t\t\t\t\t\tm(new BitsWordElement(47915, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_79) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_80) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_81))), //\n-\n-\t\t\t\tnew FC3ReadRegistersTask(47902, Priority.LOW, //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CHARGE_VMAX, new UnsignedWordElement(47902)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CHARGE_IMAX, new UnsignedWordElement(47903)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_DISCHARGE_VMIN, new UnsignedWordElement(47904)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_DISCHARGE_IMAX, new UnsignedWordElement(47905)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_VOLTAGE, new UnsignedWordElement(47906)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_CURRENT, new UnsignedWordElement(47907)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_SOC, new UnsignedWordElement(47908)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_SOH, new UnsignedWordElement(47909)), //\n-\t\t\t\t\t\tm(EssChannelId.WBMS_BAT_TEMPERATURE, new UnsignedWordElement(47910)), //\n-\t\t\t\t\t\tm(new BitsWordElement(47911, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_58) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_59) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_60) //\n-\t\t\t\t\t\t\t\t.bit(3, EssChannelId.STATE_61) //\n-\t\t\t\t\t\t\t\t.bit(4, EssChannelId.STATE_62) //\n-\t\t\t\t\t\t\t\t.bit(5, EssChannelId.STATE_63) //\n-\t\t\t\t\t\t\t\t.bit(6, EssChannelId.STATE_64) //\n-\t\t\t\t\t\t\t\t.bit(7, EssChannelId.STATE_65) //\n-\t\t\t\t\t\t\t\t.bit(8, EssChannelId.STATE_66) //\n-\t\t\t\t\t\t\t\t.bit(9, EssChannelId.STATE_67) //\n-\t\t\t\t\t\t\t\t.bit(10, EssChannelId.STATE_68) //\n-\t\t\t\t\t\t\t\t.bit(11, EssChannelId.STATE_69)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47912), //\n-\t\t\t\t\t\tm(new BitsWordElement(47913, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_42) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_43) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_44) //\n-\t\t\t\t\t\t\t\t.bit(3, EssChannelId.STATE_45) //\n-\t\t\t\t\t\t\t\t.bit(4, EssChannelId.STATE_46) //\n-\t\t\t\t\t\t\t\t.bit(5, EssChannelId.STATE_47) //\n-\t\t\t\t\t\t\t\t.bit(6, EssChannelId.STATE_48) //\n-\t\t\t\t\t\t\t\t.bit(7, EssChannelId.STATE_49) //\n-\t\t\t\t\t\t\t\t.bit(8, EssChannelId.STATE_50) //\n-\t\t\t\t\t\t\t\t.bit(9, EssChannelId.STATE_51) //\n-\t\t\t\t\t\t\t\t.bit(10, EssChannelId.STATE_52) //\n-\t\t\t\t\t\t\t\t.bit(11, EssChannelId.STATE_53) //\n-\t\t\t\t\t\t\t\t.bit(12, EssChannelId.STATE_54) //\n-\t\t\t\t\t\t\t\t.bit(13, EssChannelId.STATE_55) //\n-\t\t\t\t\t\t\t\t.bit(14, EssChannelId.STATE_56) //\n-\t\t\t\t\t\t\t\t.bit(15, EssChannelId.STATE_57)), //\n-\t\t\t\t\t\tnew DummyRegisterElement(47914), //\n-\t\t\t\t\t\tm(new BitsWordElement(47915, this) //\n-\t\t\t\t\t\t\t\t.bit(0, EssChannelId.STATE_79) //\n-\t\t\t\t\t\t\t\t.bit(1, EssChannelId.STATE_80) //\n-\t\t\t\t\t\t\t\t.bit(2, EssChannelId.STATE_81))));\n-\t}\n-\n-\t@Override\n-\tpublic void applyPower(int activePower, int reactivePower) throws OpenemsNamedException {\n-\t\tfinal PowerModeEms nextPowerMode;\n-\n-\t\tif (this.config.readOnlyMode()) {\n-\t\t\t// Read-Only-Mode: fall-back to internal self-consumption optimization\n-\t\t\tnextPowerMode = PowerModeEms.AUTO;\n-\t\t\tactivePower = 0;\n-\t\t} else {\n-\t\t\tif (activePower <= 0) {\n-\t\t\t\t// ActivePower is negative or zero -> CHARGE\n-\t\t\t\tnextPowerMode = PowerModeEms.CHARGE_BAT;\n-\n-\t\t\t} else {\n-\t\t\t\t// ActivePower is positive -> DISCHARGE\n-\n-\t\t\t\t/*\n-\t\t\t\t * Check if PV is available. Discharge mode changes according to availability of\n-\t\t\t\t * PV\n-\t\t\t\t * \n-\t\t\t\t * TODO PV mode is not working, need an update from GoodWe for this.\n-\t\t\t\t */\n-\t\t\t\tInteger productionPower = null;\n-\t\t\t\tfor (AbstractGoodWeEtCharger charger : this.chargers) {\n-\t\t\t\t\tproductionPower = TypeUtils.sum(productionPower, charger.getActualPower().value().get());\n-\t\t\t\t}\n-\t\t\t\tif (productionPower == null) {\n-\t\t\t\t\t// No PV-Power -> required to put on SELL_POWER\n-\t\t\t\t\tnextPowerMode = PowerModeEms.SELL_POWER;\n-\t\t\t\t} else {\n-\t\t\t\t\t// PV-Power exists -> set DISCHARGE_BAT\n-\t\t\t\t\tnextPowerMode = PowerModeEms.DISCHARGE_BAT;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Set the PowerMode and PowerSet\n-\t\tIntegerWriteChannel emsPowerSetChannel = this.channel(EssChannelId.EMS_POWER_SET);\n-\n-\t\tInteger essPowerSet = emsPowerSetChannel.value().get();\n-\t\tif (essPowerSet == null || activePower != essPowerSet) {\n-\t\t\t// Set to new power mode only if the previous activePower is different or\n-\t\t\t// undefined\n-\t\t\temsPowerSetChannel.setNextWriteValue(Math.abs(activePower));\n-\t\t}\n-\n-\t\tEnumWriteChannel emsPowerModeChannel = this.channel(EssChannelId.EMS_POWER_MODE);\n-\t\tPowerModeEms emsPowerMode = emsPowerModeChannel.value().asEnum();\n-\t\tif (emsPowerMode != nextPowerMode) {\n-\t\t\t// Set to new power mode only if the previous mode is different\n-\t\t\temsPowerModeChannel.setNextWriteValue(nextPowerMode);\n-\t\t}\n-\t\t// TODO : Add Reactive Power Register\n-\t}\n-\n-\t@Override\n-\tpublic String debugLog() {\n-\t\treturn \"SoC:\" + this.getSoc().value().asString() //\n-\t\t\t\t+ \"|L:\" + this.getActivePower().value().asString() //\n-\t\t\t\t+ \"|\" + this.getGridMode().value().asOptionString()//\n-\t\t\t\t+ \"|Allowed:\" + this.getAllowedCharge().value().asStringWithoutUnit() + \";\"\n-\t\t\t\t+ this.getAllowedDischarge().value().asString();\n-\t}\n-\n-\t@Override\n-\tpublic void addCharger(AbstractGoodWeEtCharger charger) {\n-\t\tthis.chargers.add(charger);\n-\t}\n-\n-\t@Override\n-\tpublic void removeCharger(AbstractGoodWeEtCharger charger) {\n-\t\tthis.chargers.remove(charger);\n-\t}\n-\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\t\tif (!this.isEnabled()) {\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tswitch (event.getTopic()) {\n-\t\tcase EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n-\t\t\tthis.updatechannels();\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tprivate void updatechannels() {\n-\n-\t\t/*\n-\t\t * Update ActivePower from P_BATTERY1 and chargers ACTUAL_POWER\n-\t\t */\n-\t\tfinal Channel<Integer> batteryPower = this.channel(EssChannelId.P_BATTERY1);\n-\t\tInteger activePower = batteryPower.getNextValue().get();\n-\t\tfor (AbstractGoodWeEtCharger charger : this.chargers) {\n-\t\t\tactivePower = TypeUtils.sum(activePower, charger.getActualPower().getNextValue().get());\n-\t\t}\n-\t\tthis.getActivePower().setNextValue(activePower);\n-\n-\t\t/*\n-\t\t * Update Allowed charge and Allowed discharge\n-\t\t */\n-\n-\t\tInteger soc = this.getSoc().value().get();\n-\t\tInteger maxApparentPower = this.getMaxApparentPower().value().get();\n-\n-\t\tif (soc == null || soc >= 99) {\n-\t\t\tthis.getAllowedCharge().setNextValue(0);\n-\t\t} else {\n-\t\t\tthis.getAllowedCharge().setNextValue(TypeUtils.multiply(maxApparentPower, -1) );\n-\t\t}\n-\t\tif (soc == null || soc <= 0) {\n-\t\t\tthis.getAllowedDischarge().setNextValue(0);\n-\t\t} else {\n-\t\t\tthis.getAllowedDischarge().setNextValue(maxApparentPower);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Power getPower() {\n-\t\treturn this.power;\n-\t}\n-\n-\t@Override\n-\tpublic int getPowerPrecision() {\n-\t\treturn 1;\n-\t}\n-\n-\t@Override\n-\tpublic Constraint[] getStaticConstraints() throws OpenemsNamedException {\n-\t\t// Handle Read-Only mode -> no charge/discharge\n-\t\tif (this.config.readOnlyMode()) {\n-\t\t\treturn new Constraint[] { //\n-\t\t\t\t\tthis.createPowerConstraint(\"Read-Only-Mode\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS, 0), //\n-\t\t\t\t\tthis.createPowerConstraint(\"Read-Only-Mode\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS, 0) //\n-\t\t\t};\n-\t\t}\n-\t\treturn Power.NO_CONSTRAINTS;\n-\t}\n+    implements GoodWeEtBatteryInverter, ManagedSymmetricEss, SymmetricEss, OpenemsComponent, EventHandler {\n+\n+  protected EnumWriteChannel setEmsPowerMode;\n+\n+  private Config config;\n+\n+  @Reference\n+  protected ConfigurationAdmin cm;\n+\n+  @Reference\n+  private Power power;\n+\n+  private final Set<AbstractGoodWeEtCharger> chargers = new HashSet<>();\n+\n+  @Reference(policy = ReferencePolicy.STATIC, policyOption = ReferencePolicyOption.GREEDY, cardinality = ReferenceCardinality.MANDATORY)\n+  protected void setModbus(BridgeModbus modbus) {\n+    super.setModbus(modbus); // Bridge Modbus\n+  }\n+\n+  @Activate\n+  void activate(ComponentContext context, Config config) throws OpenemsNamedException {\n+    super.activate(context, config.id(), config.alias(), config.enabled(), config.unit_id(), this.cm, \"Modbus\",\n+        config.modbus_id());\n+    this.config = config;\n+    this.channel(SymmetricEss.ChannelId.CAPACITY).setNextValue(this.config.capacity());\n+  }\n+\n+  @Deactivate\n+  protected void deactivate() {\n+    super.deactivate();\n+  }\n+\n+  public GoodWeEtBatteryInverterImpl() throws OpenemsNamedException {\n+    super(//\n+        OpenemsComponent.ChannelId.values(), //\n+        SymmetricEss.ChannelId.values(), //\n+        ManagedSymmetricEss.ChannelId.values(), //\n+        EssChannelId.values() //\n+    );\n+  }\n+\n+  public String getModbusBridgeId() {\n+    return this.config.modbus_id();\n+  }\n+\n+  @Override\n+  protected ModbusProtocol defineModbusProtocol() {\n+    return new ModbusProtocol(this, //\n+\n+        new FC3ReadRegistersTask(35001, Priority.ONCE, //\n+            m(SymmetricEss.ChannelId.MAX_APPARENT_POWER, new UnsignedWordElement(35001))), //\n+\n+        new FC3ReadRegistersTask(35111, Priority.LOW, //\n+            m(EssChannelId.V_PV3, new UnsignedWordElement(35111),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.I_PV3, new UnsignedWordElement(35112),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            new DummyRegisterElement(35113, 35114), //\n+            m(EssChannelId.V_PV4, new UnsignedWordElement(35115),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.I_PV4, new UnsignedWordElement(35116),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            new DummyRegisterElement(35117, 35118), //\n+            m(EssChannelId.PV_MODE, new UnsignedDoublewordElement(35119))), //\n+\n+        new FC3ReadRegistersTask(35136, Priority.HIGH, //\n+            m(SymmetricEss.ChannelId.GRID_MODE, new UnsignedWordElement(35136), //\n+                new ElementToChannelConverter((value) -> {\n+                  Integer intValue = TypeUtils.<Integer>getAsType(OpenemsType.INTEGER, value);\n+                  if (intValue != null) {\n+                    switch (intValue) {\n+                      case 0:\n+                        return GridMode.OFF_GRID;\n+                      case 1:\n+                        return GridMode.ON_GRID;\n+                      case 2:\n+                        return GridMode.UNDEFINED;\n+                    }\n+                  }\n+                  return GridMode.UNDEFINED;\n+                }))), //\n+        new FC3ReadRegistersTask(35138, Priority.LOW, //\n+            m(EssChannelId.TOTAL_INV_POWER, new SignedWordElement(35138)), //\n+            new DummyRegisterElement(35139), //\n+            m(EssChannelId.AC_ACTIVE_POWER, new SignedWordElement(35140), //\n+                ElementToChannelConverter.INVERT), //\n+            new DummyRegisterElement(35141), //\n+            m(EssChannelId.AC_REACTIVE_POWER, new SignedWordElement(35142), //\n+                ElementToChannelConverter.INVERT), //\n+            new DummyRegisterElement(35143), //\n+            m(EssChannelId.AC_APPARENT_POWER, new SignedWordElement(35144), //\n+                ElementToChannelConverter.INVERT), //\n+            m(EssChannelId.BACK_UP_V_LOAD_R, new UnsignedWordElement(35145), //\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_I_LOAD_R, new UnsignedWordElement(35146),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_F_LOAD_R, new UnsignedWordElement(35147),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(EssChannelId.LOAD_MODE_R, new UnsignedWordElement(35148)), //\n+            new DummyRegisterElement(35149), //\n+            m(EssChannelId.BACK_UP_P_LOAD_R, new SignedWordElement(35150)), //\n+            m(EssChannelId.BACK_UP_V_LOAD_S, new UnsignedWordElement(35151),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_I_LOAD_S, new UnsignedWordElement(35152),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_F_LOAD_S, new UnsignedWordElement(35153),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(EssChannelId.LOAD_MODE_S, new UnsignedWordElement(35154)), //\n+            new DummyRegisterElement(35155), //\n+            m(EssChannelId.BACK_UP_P_LOAD_S, new SignedWordElement(35156)), //\n+            m(EssChannelId.BACK_UP_V_LOAD_T, new UnsignedWordElement(35157),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_I_LOAD_T, new UnsignedWordElement(35158),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BACK_UP_F_LOAD_T, new UnsignedWordElement(35159),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2), //\n+            m(EssChannelId.LOAD_MODE_T, new UnsignedWordElement(35160)), //\n+            new DummyRegisterElement(35161), //\n+            m(EssChannelId.BACK_UP_P_LOAD_T, new SignedWordElement(35162)), //\n+            new DummyRegisterElement(35163), //\n+            m(EssChannelId.P_LOAD_R, new SignedWordElement(35164)), //\n+            new DummyRegisterElement(35165), //\n+            m(EssChannelId.P_LOAD_S, new SignedWordElement(35166)), //\n+            new DummyRegisterElement(35167), //\n+            m(EssChannelId.P_LOAD_T, new SignedWordElement(35168)), //\n+            new DummyRegisterElement(35169), //\n+            m(EssChannelId.TOTAL_BACK_UP_LOAD, new SignedWordElement(35170)), //\n+            new DummyRegisterElement(35171), //\n+            m(EssChannelId.TOTAL_LOAD_POWER, new SignedWordElement(35172)), //\n+            m(EssChannelId.UPS_LOAD_PERCENT, new UnsignedWordElement(35173),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_2)), //\n+\n+        new FC3ReadRegistersTask(35180, Priority.HIGH, //\n+            m(EssChannelId.V_BATTERY1, new UnsignedWordElement(35180),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.I_BATTERY1, new SignedWordElement(35181),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            new DummyRegisterElement(35182), //\n+            m(EssChannelId.P_BATTERY1, new SignedWordElement(35183)), //\n+            m(EssChannelId.BATTERY_MODE, new UnsignedWordElement(35184))), //\n+\n+        new FC3ReadRegistersTask(35185, Priority.LOW, //\n+            m(EssChannelId.WARNING_CODE, new UnsignedWordElement(35185)), //\n+            m(EssChannelId.SAFETY_COUNTRY, new UnsignedWordElement(35186)), //\n+            m(EssChannelId.WORK_MODE, new UnsignedWordElement(35187)), //\n+            m(EssChannelId.OPERATION_MODE, new UnsignedDoublewordElement(35188))), //\n+\n+        // Ess Active charge energy\n+        new FC3ReadRegistersTask(35206, Priority.LOW, //\n+            m(SymmetricEss.ChannelId.ACTIVE_CHARGE_ENERGY, new UnsignedDoublewordElement(35206), //\n+                ElementToChannelConverter.SCALE_FACTOR_2), //\n+            new DummyRegisterElement(35208), //\n+            // Ess Active Discharge energy\n+            m(SymmetricEss.ChannelId.ACTIVE_DISCHARGE_ENERGY, new UnsignedDoublewordElement(35209),\n+                ElementToChannelConverter.SCALE_FACTOR_2)), //\n+\n+        new FC3ReadRegistersTask(36003, Priority.LOW, //\n+            m(EssChannelId.B_METER_COMMUNICATE_STATUS, new UnsignedWordElement(36003)), //\n+            m(EssChannelId.METER_COMMUNICATE_STATUS, new UnsignedWordElement(36004))), //\n+\n+        new FC3ReadRegistersTask(37001, Priority.LOW,\n+            m(EssChannelId.BATTERY_TYPE_INDEX, new UnsignedWordElement(37001)), //\n+            m(EssChannelId.BMS_STATUS, new UnsignedWordElement(37002)), //\n+            m(EssChannelId.BMS_PACK_TEMPERATURE, new UnsignedWordElement(37003),\n+                ElementToChannelConverter.SCALE_FACTOR_MINUS_1), //\n+            m(EssChannelId.BMS_CHARGE_IMAX, new UnsignedWordElement(37004)), //\n+            m(EssChannelId.BMS_DISCHARGE_IMAX, new UnsignedWordElement(37005))), //\n+\n+        new FC3ReadRegistersTask(37007, Priority.HIGH, //\n+            m(SymmetricEss.ChannelId.SOC, new UnsignedWordElement(37007), new ElementToChannelConverter(\n+                // element -> channel\n+                value -> {\n+                  // Set SoC to undefined if there is No Battery\n+                  EnumReadChannel batteryModeChannel = this.channel(EssChannelId.BATTERY_MODE);\n+                  BatteryMode batteryMode = batteryModeChannel.value().asEnum();\n+                  if (batteryMode == BatteryMode.NO_BATTERY || batteryMode == BatteryMode.UNDEFINED) {\n+                    return null;\n+                  } else {\n+                    return value;\n+                  }\n+                },\n+                // channel -> element\n+                value -> value))), //\n+        new FC3ReadRegistersTask(37008, Priority.LOW, //\n+            m(EssChannelId.BMS_SOH, new UnsignedWordElement(37008)), //\n+            m(EssChannelId.BMS_BATTERY_STRINGS, new UnsignedWordElement(37009))), //\n+\n+        new FC16WriteRegistersTask(47000, //\n+            m(EssChannelId.APP_MODE_INDEX, new UnsignedWordElement(47000)), //\n+            m(EssChannelId.METER_CHECK_VALUE, new UnsignedWordElement(47001)), //\n+            m(EssChannelId.WMETER_CONNECT_CHECK_FLAG, new UnsignedWordElement(47002))), //\n+\n+        new FC3ReadRegistersTask(47000, Priority.LOW, //\n+            m(EssChannelId.APP_MODE_INDEX, new UnsignedWordElement(47000)), //\n+            m(EssChannelId.METER_CHECK_VALUE, new UnsignedWordElement(47001)), //\n+            m(EssChannelId.WMETER_CONNECT_CHECK_FLAG, new UnsignedWordElement(47002))), //\n+\n+        new FC16WriteRegistersTask(47500, //\n+            m(EssChannelId.STOP_SOC_PROTECT, new UnsignedWordElement(47500)), //\n+            new DummyRegisterElement(47501, 47508), //\n+            m(EssChannelId.FEED_POWER_ENABLE, new UnsignedWordElement(47509)), //\n+            m(EssChannelId.FEED_POWER_PARA, new UnsignedWordElement(47510)), //\n+            m(EssChannelId.EMS_POWER_MODE, new UnsignedWordElement(47511)), //\n+            m(EssChannelId.EMS_POWER_SET, new UnsignedWordElement(47512))), //\n+\n+        new FC16WriteRegistersTask(47531, //\n+            m(EssChannelId.SOC_START_TO_FORCE_CHARGE, new UnsignedWordElement(47531)), //\n+            m(EssChannelId.SOC_STOP_TO_FORCE_CHARGE, new UnsignedWordElement(47532)), //\n+            m(EssChannelId.CLEAR_ALL_ECONOMIC_MODE, new UnsignedWordElement(47533))), //\n+\n+        new FC3ReadRegistersTask(47500, Priority.LOW,\n+            m(EssChannelId.STOP_SOC_PROTECT, new UnsignedWordElement(47500)), //\n+            new DummyRegisterElement(47501, 47508), //\n+            m(EssChannelId.FEED_POWER_ENABLE, new UnsignedWordElement(47509)), //\n+            m(EssChannelId.FEED_POWER_PARA, new UnsignedWordElement(47510))), //\n+\n+        new FC3ReadRegistersTask(47511, Priority.HIGH,\n+            m(EssChannelId.EMS_POWER_MODE, new UnsignedWordElement(47511)), //\n+            m(EssChannelId.EMS_POWER_SET, new UnsignedWordElement(47512))), //\n+\n+        new FC3ReadRegistersTask(47531, Priority.LOW,\n+            m(EssChannelId.SOC_START_TO_FORCE_CHARGE, new UnsignedWordElement(47531)), //\n+            m(EssChannelId.SOC_STOP_TO_FORCE_CHARGE, new UnsignedWordElement(47532))), //\n+\n+        new FC16WriteRegistersTask(47900, //\n+            m(EssChannelId.BMS_VERSION, new UnsignedWordElement(47900)), //\n+            m(EssChannelId.BATT_STRINGS_RS485, new UnsignedWordElement(47901)), //\n+            m(EssChannelId.WBMS_BAT_CHARGE_VMAX, new UnsignedWordElement(47902)), //\n+            m(EssChannelId.WBMS_BAT_CHARGE_IMAX, new UnsignedWordElement(47903)), //\n+            m(EssChannelId.WBMS_BAT_DISCHARGE_VMIN, new UnsignedWordElement(47904)), //\n+            m(EssChannelId.WBMS_BAT_DISCHARGE_IMAX, new UnsignedWordElement(47905)), //\n+            m(EssChannelId.WBMS_BAT_VOLTAGE, new UnsignedWordElement(47906)), //\n+            m(EssChannelId.WBMS_BAT_CURRENT, new UnsignedWordElement(47907)), //\n+            m(EssChannelId.WBMS_BAT_SOC, new UnsignedWordElement(47908)), //\n+            m(EssChannelId.WBMS_BAT_SOH, new UnsignedWordElement(47909)), //\n+            m(EssChannelId.WBMS_BAT_TEMPERATURE, new UnsignedWordElement(47910)), //\n+            m(new BitsWordElement(47911, this) //\n+                .bit(0, EssChannelId.STATE_58) //\n+                .bit(1, EssChannelId.STATE_59) //\n+                .bit(2, EssChannelId.STATE_60) //\n+                .bit(3, EssChannelId.STATE_61) //\n+                .bit(4, EssChannelId.STATE_62) //\n+                .bit(5, EssChannelId.STATE_63) //\n+                .bit(6, EssChannelId.STATE_64) //\n+                .bit(7, EssChannelId.STATE_65) //\n+                .bit(8, EssChannelId.STATE_66) //\n+                .bit(9, EssChannelId.STATE_67) //\n+                .bit(10, EssChannelId.STATE_68) //\n+                .bit(11, EssChannelId.STATE_69)), //\n+            new DummyRegisterElement(47912), //\n+            m(new BitsWordElement(47913, this) //\n+                .bit(0, EssChannelId.STATE_42) //\n+                .bit(1, EssChannelId.STATE_43) //\n+                .bit(2, EssChannelId.STATE_44) //\n+                .bit(3, EssChannelId.STATE_45) //\n+                .bit(4, EssChannelId.STATE_46) //\n+                .bit(5, EssChannelId.STATE_47) //\n+                .bit(6, EssChannelId.STATE_48) //\n+                .bit(7, EssChannelId.STATE_49) //\n+                .bit(8, EssChannelId.STATE_50) //\n+                .bit(9, EssChannelId.STATE_51) //\n+                .bit(10, EssChannelId.STATE_52) //\n+                .bit(11, EssChannelId.STATE_53) //\n+                .bit(12, EssChannelId.STATE_54) //\n+                .bit(13, EssChannelId.STATE_55) //\n+                .bit(14, EssChannelId.STATE_56) //\n+                .bit(15, EssChannelId.STATE_57)), //\n+            new DummyRegisterElement(47914), //\n+            m(new BitsWordElement(47915, this) //\n+                .bit(0, EssChannelId.STATE_79) //\n+                .bit(1, EssChannelId.STATE_80) //\n+                .bit(2, EssChannelId.STATE_81))), //\n+\n+        new FC3ReadRegistersTask(47902, Priority.LOW, //\n+            m(EssChannelId.WBMS_BAT_CHARGE_VMAX, new UnsignedWordElement(47902)), //\n+            m(EssChannelId.WBMS_BAT_CHARGE_IMAX, new UnsignedWordElement(47903)), //\n+            m(EssChannelId.WBMS_BAT_DISCHARGE_VMIN, new UnsignedWordElement(47904)), //\n+            m(EssChannelId.WBMS_BAT_DISCHARGE_IMAX, new UnsignedWordElement(47905)), //\n+            m(EssChannelId.WBMS_BAT_VOLTAGE, new UnsignedWordElement(47906)), //\n+            m(EssChannelId.WBMS_BAT_CURRENT, new UnsignedWordElement(47907)), //\n+            m(EssChannelId.WBMS_BAT_SOC, new UnsignedWordElement(47908)), //\n+            m(EssChannelId.WBMS_BAT_SOH, new UnsignedWordElement(47909)), //\n+            m(EssChannelId.WBMS_BAT_TEMPERATURE, new UnsignedWordElement(47910)), //\n+            m(new BitsWordElement(47911, this) //\n+                .bit(0, EssChannelId.STATE_58) //\n+                .bit(1, EssChannelId.STATE_59) //\n+                .bit(2, EssChannelId.STATE_60) //\n+                .bit(3, EssChannelId.STATE_61) //\n+                .bit(4, EssChannelId.STATE_62) //\n+                .bit(5, EssChannelId.STATE_63) //\n+                .bit(6, EssChannelId.STATE_64) //\n+                .bit(7, EssChannelId.STATE_65) //\n+                .bit(8, EssChannelId.STATE_66) //\n+                .bit(9, EssChannelId.STATE_67) //\n+                .bit(10, EssChannelId.STATE_68) //\n+                .bit(11, EssChannelId.STATE_69)), //\n+            new DummyRegisterElement(47912), //\n+            m(new BitsWordElement(47913, this) //\n+                .bit(0, EssChannelId.STATE_42) //\n+                .bit(1, EssChannelId.STATE_43) //\n+                .bit(2, EssChannelId.STATE_44) //\n+                .bit(3, EssChannelId.STATE_45) //\n+                .bit(4, EssChannelId.STATE_46) //\n+                .bit(5, EssChannelId.STATE_47) //\n+                .bit(6, EssChannelId.STATE_48) //\n+                .bit(7, EssChannelId.STATE_49) //\n+                .bit(8, EssChannelId.STATE_50) //\n+                .bit(9, EssChannelId.STATE_51) //\n+                .bit(10, EssChannelId.STATE_52) //\n+                .bit(11, EssChannelId.STATE_53) //\n+                .bit(12, EssChannelId.STATE_54) //\n+                .bit(13, EssChannelId.STATE_55) //\n+                .bit(14, EssChannelId.STATE_56) //\n+                .bit(15, EssChannelId.STATE_57)), //\n+            new DummyRegisterElement(47914), //\n+            m(new BitsWordElement(47915, this) //\n+                .bit(0, EssChannelId.STATE_79) //\n+                .bit(1, EssChannelId.STATE_80) //\n+                .bit(2, EssChannelId.STATE_81))));\n+  }\n+\n+  @Override\n+  public void applyPower(int activePower, int reactivePower) throws OpenemsNamedException {\n+    final PowerModeEms nextPowerMode;\n+\n+    if (this.config.readOnlyMode()) {\n+      // Read-Only-Mode: fall-back to internal self-consumption optimization\n+      nextPowerMode = PowerModeEms.AUTO;\n+      activePower = 0;\n+    } else {\n+      if (activePower <= 0) {\n+        // ActivePower is negative or zero -> CHARGE\n+        nextPowerMode = PowerModeEms.CHARGE_BAT;\n+\n+      } else {\n+        // ActivePower is positive -> DISCHARGE\n+\n+        /*\n+         * Check if PV is available. Discharge mode changes according to availability of\n+         * PV\n+         *\n+         * TODO PV mode is not working, need an update from GoodWe for this.\n+         */\n+        Integer productionPower = null;\n+        for (AbstractGoodWeEtCharger charger : this.chargers) {\n+          productionPower = TypeUtils.sum(productionPower, charger.getActualPower().value().get());\n+        }\n+        if (productionPower == null) {\n+          // No PV-Power -> required to put on SELL_POWER\n+          nextPowerMode = PowerModeEms.SELL_POWER;\n+        } else {\n+          // PV-Power exists -> set DISCHARGE_BAT\n+          nextPowerMode = PowerModeEms.DISCHARGE_BAT;\n+        }\n+      }\n+    }\n+\n+    // Set the PowerMode and PowerSet\n+    IntegerWriteChannel emsPowerSetChannel = this.channel(EssChannelId.EMS_POWER_SET);\n+\n+    Integer essPowerSet = emsPowerSetChannel.value().get();\n+    if (essPowerSet == null || activePower != essPowerSet) {\n+      // Set to new power mode only if the previous activePower is different or\n+      // undefined\n+      emsPowerSetChannel.setNextWriteValue(Math.abs(activePower));\n+    }\n+\n+    EnumWriteChannel emsPowerModeChannel = this.channel(EssChannelId.EMS_POWER_MODE);\n+    PowerModeEms emsPowerMode = emsPowerModeChannel.value().asEnum();\n+    if (emsPowerMode != nextPowerMode) {\n+      // Set to new power mode only if the previous mode is different\n+      emsPowerModeChannel.setNextWriteValue(nextPowerMode);\n+    }\n+    // TODO : Add Reactive Power Register\n+  }\n+\n+  @Override\n+  public String debugLog() {\n+    return \"SoC:\" + this.getSoc().value().asString() //\n+        + \"|L:\" + this.getActivePower().value().asString() //\n+        + \"|\" + this.getGridMode().value().asOptionString()//\n+        + \"|Allowed:\" + this.getAllowedCharge().value().asStringWithoutUnit() + \";\"\n+        + this.getAllowedDischarge().value().asString();\n+  }\n+\n+  @Override\n+  public void addCharger(AbstractGoodWeEtCharger charger) {\n+    this.chargers.add(charger);\n+  }\n+\n+  @Override\n+  public void removeCharger(AbstractGoodWeEtCharger charger) {\n+    this.chargers.remove(charger);\n+  }\n+\n+  @Override\n+  public void handleEvent(Event event) {\n+    if (!this.isEnabled()) {\n+      return;\n+    }\n+\n+    switch (event.getTopic()) {\n+      case EdgeEventConstants.TOPIC_CYCLE_BEFORE_PROCESS_IMAGE:\n+        this.updatechannels();\n+        break;\n+    }\n+  }\n+\n+  private void updatechannels() {\n+\n+    /*\n+     * Update ActivePower from P_BATTERY1 and chargers ACTUAL_POWER\n+     */\n+    final Channel<Integer> batteryPower = this.channel(EssChannelId.P_BATTERY1);\n+    Integer activePower = batteryPower.getNextValue().get();\n+    for (AbstractGoodWeEtCharger charger : this.chargers) {\n+      activePower = TypeUtils.sum(activePower, charger.getActualPower().getNextValue().get());\n+    }\n+    this.getActivePower().setNextValue(activePower);\n+\n+    /*\n+     * Update Allowed charge and Allowed discharge\n+     */\n+\n+    Integer soc = this.getSoc().value().get();\n+    Integer maxApparentPower = this.getMaxApparentPower().value().get();\n+\n+    if (soc == null || soc >= 99) {\n+      this.getAllowedCharge().setNextValue(0);\n+    } else {\n+      this.getAllowedCharge().setNextValue(TypeUtils.multiply(maxApparentPower, -1));\n+    }\n+    if (soc == null || soc <= 0) {\n+      this.getAllowedDischarge().setNextValue(0);\n+    } else {\n+      this.getAllowedDischarge().setNextValue(maxApparentPower);\n+    }\n+  }\n+\n+  @Override\n+  public Power getPower() {\n+    return this.power;\n+  }\n+\n+  @Override\n+  public int getPowerPrecision() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public Constraint[] getStaticConstraints() throws OpenemsNamedException {\n+    // Handle Read-Only mode -> no charge/discharge\n+    if (this.config.readOnlyMode()) {\n+      return new Constraint[] { //\n+          this.createPowerConstraint(\"Read-Only-Mode\", Phase.ALL, Pwr.ACTIVE, Relationship.EQUALS, 0), //\n+          this.createPowerConstraint(\"Read-Only-Mode\", Phase.ALL, Pwr.REACTIVE, Relationship.EQUALS, 0) //\n+      };\n+    }\n+    return Power.NO_CONSTRAINTS;\n+  }\n }\n",
            "diff_size": 464
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/4/GoodWeEtBatteryInverterImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/4/GoodWeEtBatteryInverterImpl.java\nindex 7637825ba4..4e6b2ff4fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/errored/1/4/GoodWeEtBatteryInverterImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/OpenEMS-openems/naturalize/4/GoodWeEtBatteryInverterImpl.java\n@@ -487,7 +487,7 @@ public class GoodWeEtBatteryInverterImpl extends AbstractOpenemsModbusComponent\n \t\tif (soc == null || soc >= 99) {\n \t\t\tthis.getAllowedCharge().setNextValue(0);\n \t\t} else {\n-\t\t\tthis.getAllowedCharge().setNextValue(TypeUtils.multiply(maxApparentPower, -1) );\n+\t\t\tthis.getAllowedCharge().setNextValue(TypeUtils.multiply(maxApparentPower, -1));\n \t\t}\n \t\tif (soc == null || soc <= 0) {\n \t\t\tthis.getAllowedDischarge().setNextValue(0);\n@@ -517,4 +517,4 @@ public class GoodWeEtBatteryInverterImpl extends AbstractOpenemsModbusComponent\n \t\t}\n \t\treturn Power.NO_CONSTRAINTS;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "490",
                    "column": "103",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "490",
                    "column": "103",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}