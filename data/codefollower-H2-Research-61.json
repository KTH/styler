{
    "error_id": "61",
    "information": {
        "errors": [
            {
                "line": "251",
                "column": "17",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "                    // select * from (select * from test)\n                    // where a=1 and b in(10, 20);\n                \t\n                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "252",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/61/IndexCondition.java\nindex b10a25999e..1f2be34fdc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/61/IndexCondition.java\n@@ -248,10 +248,10 @@ public class IndexCondition {\n                     // insert into test values(1, 10), (2, 20);\n                     // select * from (select * from test)\n                     // where a=1 and b in(10, 20);\n-                \t\n-                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n-                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n-                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n                     return 0;\n                 }\n             }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/61/IndexCondition.java\nindex b10a25999e..d1ecade433 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/61/IndexCondition.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.ArrayList;\n@@ -75,10 +76,10 @@ public class IndexCondition {\n \n     /**\n      * @param compareType the comparison type, see constants in\n-     *            {@link Comparison}\n+     *                    {@link Comparison}\n      */\n     private IndexCondition(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+                           Expression expression) {\n         this.compareType = compareType;\n         this.column = column == null ? null : column.getColumn();\n         this.expression = expression;\n@@ -88,13 +89,13 @@ public class IndexCondition {\n      * Create an index condition with the given parameters.\n      *\n      * @param compareType the comparison type, see constants in\n-     *            {@link Comparison}\n-     * @param column the column\n-     * @param expression the expression\n+     *                    {@link Comparison}\n+     * @param column      the column\n+     * @param expression  the expression\n      * @return the index condition\n      */\n     public static IndexCondition get(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+                                     Expression expression) {\n         return new IndexCondition(compareType, column, expression);\n     }\n \n@@ -103,13 +104,13 @@ public class IndexCondition {\n      * given parameters.\n      *\n      * @param column the column\n-     * @param list the expression list\n+     * @param list   the expression list\n      * @return the index condition\n      */\n     public static IndexCondition getInList(ExpressionColumn column,\n-            List<Expression> list) {\n+                                           List<Expression> list) {\n         IndexCondition cond = new IndexCondition(Comparison.IN_LIST, column,\n-                null);\n+            null);\n         cond.expressionList = list;\n         return cond;\n     }\n@@ -119,12 +120,12 @@ public class IndexCondition {\n      * given parameters.\n      *\n      * @param column the column\n-     * @param query the select statement\n+     * @param query  the select statement\n      * @return the index condition\n      */\n     public static IndexCondition getInQuery(ExpressionColumn column, Query query) {\n         IndexCondition cond = new IndexCondition(Comparison.IN_QUERY, column,\n-                null);\n+            null);\n         cond.expressionQuery = query;\n         return cond;\n     }\n@@ -180,42 +181,42 @@ public class IndexCondition {\n         StatementBuilder buff = new StatementBuilder();\n         buff.append(column.getSQL());\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-            buff.append(\" = \");\n-            break;\n-        case Comparison.EQUAL_NULL_SAFE:\n-            buff.append(\" IS \");\n-            break;\n-        case Comparison.BIGGER_EQUAL:\n-            buff.append(\" >= \");\n-            break;\n-        case Comparison.BIGGER:\n-            buff.append(\" > \");\n-            break;\n-        case Comparison.SMALLER_EQUAL:\n-            buff.append(\" <= \");\n-            break;\n-        case Comparison.SMALLER:\n-            buff.append(\" < \");\n-            break;\n-        case Comparison.IN_LIST:\n-            buff.append(\" IN(\");\n-            for (Expression e : expressionList) {\n-                buff.appendExceptFirst(\", \");\n-                buff.append(e.getSQL());\n-            }\n-            buff.append(')');\n-            break;\n-        case Comparison.IN_QUERY:\n-            buff.append(\" IN(\");\n-            buff.append(expressionQuery.getPlanSQL());\n-            buff.append(')');\n-            break;\n-        case Comparison.SPATIAL_INTERSECTS:\n-            buff.append(\" && \");\n-            break;\n-        default:\n-            DbException.throwInternalError(\"type=\" + compareType);\n+            case Comparison.EQUAL:\n+                buff.append(\" = \");\n+                break;\n+            case Comparison.EQUAL_NULL_SAFE:\n+                buff.append(\" IS \");\n+                break;\n+            case Comparison.BIGGER_EQUAL:\n+                buff.append(\" >= \");\n+                break;\n+            case Comparison.BIGGER:\n+                buff.append(\" > \");\n+                break;\n+            case Comparison.SMALLER_EQUAL:\n+                buff.append(\" <= \");\n+                break;\n+            case Comparison.SMALLER:\n+                buff.append(\" < \");\n+                break;\n+            case Comparison.IN_LIST:\n+                buff.append(\" IN(\");\n+                for (Expression e : expressionList) {\n+                    buff.appendExceptFirst(\", \");\n+                    buff.append(e.getSQL());\n+                }\n+                buff.append(')');\n+                break;\n+            case Comparison.IN_QUERY:\n+                buff.append(\" IN(\");\n+                buff.append(expressionQuery.getPlanSQL());\n+                buff.append(')');\n+                break;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                buff.append(\" && \");\n+                break;\n+            default:\n+                DbException.throwInternalError(\"type=\" + compareType);\n         }\n         if (expression != null) {\n             buff.append(expression.getSQL());\n@@ -231,41 +232,41 @@ public class IndexCondition {\n      */\n     public int getMask(ArrayList<IndexCondition> indexConditions) {\n         switch (compareType) {\n-        case Comparison.FALSE:\n-            return ALWAYS_FALSE;\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-            return EQUALITY;\n-        case Comparison.IN_LIST:\n-        case Comparison.IN_QUERY:\n-            if (indexConditions.size() > 1) {\n-                if (TableType.TABLE != column.getTable().getTableType()) {\n-                    // if combined with other conditions,\n-                    // IN(..) can only be used for regular tables\n-                    // test case:\n-                    // create table test(a int, b int, primary key(id, name));\n-                    // create unique index c on test(b, a);\n-                    // insert into test values(1, 10), (2, 20);\n-                    // select * from (select * from test)\n-                    // where a=1 and b in(10, 20);\n-                \t\n-                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n-                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n-                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n-                    return 0;\n+            case Comparison.FALSE:\n+                return ALWAYS_FALSE;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+                return EQUALITY;\n+            case Comparison.IN_LIST:\n+            case Comparison.IN_QUERY:\n+                if (indexConditions.size() > 1) {\n+                    if (TableType.TABLE != column.getTable().getTableType()) {\n+                        // if combined with other conditions,\n+                        // IN(..) can only be used for regular tables\n+                        // test case:\n+                        // create table test(a int, b int, primary key(id, name));\n+                        // create unique index c on test(b, a);\n+                        // insert into test values(1, 10), (2, 20);\n+                        // select * from (select * from test)\n+                        // where a=1 and b in(10, 20);\n+\n+                        //\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n+                        //\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n+                        //\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n+                        return 0;\n+                    }\n                 }\n-            }\n-            return EQUALITY;\n-        case Comparison.BIGGER_EQUAL:\n-        case Comparison.BIGGER:\n-            return START;\n-        case Comparison.SMALLER_EQUAL:\n-        case Comparison.SMALLER:\n-            return END;\n-        case Comparison.SPATIAL_INTERSECTS:\n-            return SPATIAL_INTERSECTS;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + compareType);\n+                return EQUALITY;\n+            case Comparison.BIGGER_EQUAL:\n+            case Comparison.BIGGER:\n+                return START;\n+            case Comparison.SMALLER_EQUAL:\n+            case Comparison.SMALLER:\n+                return END;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                return SPATIAL_INTERSECTS;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + compareType);\n         }\n     }\n \n@@ -286,13 +287,13 @@ public class IndexCondition {\n      */\n     public boolean isStart() {\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-        case Comparison.BIGGER_EQUAL:\n-        case Comparison.BIGGER:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+            case Comparison.BIGGER_EQUAL:\n+            case Comparison.BIGGER:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -304,13 +305,13 @@ public class IndexCondition {\n      */\n     public boolean isEnd() {\n         switch (compareType) {\n-        case Comparison.EQUAL:\n-        case Comparison.EQUAL_NULL_SAFE:\n-        case Comparison.SMALLER_EQUAL:\n-        case Comparison.SMALLER:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.EQUAL:\n+            case Comparison.EQUAL_NULL_SAFE:\n+            case Comparison.SMALLER_EQUAL:\n+            case Comparison.SMALLER:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -322,10 +323,10 @@ public class IndexCondition {\n      */\n     public boolean isSpatialIntersects() {\n         switch (compareType) {\n-        case Comparison.SPATIAL_INTERSECTS:\n-            return true;\n-        default:\n-            return false;\n+            case Comparison.SPATIAL_INTERSECTS:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -377,7 +378,7 @@ public class IndexCondition {\n     public boolean isEvaluatable() {\n         if (expression != null) {\n             return expression\n-                    .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n+                .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n         }\n         if (expressionList != null) {\n             for (Expression e : expressionList) {\n@@ -388,16 +389,16 @@ public class IndexCondition {\n             return true;\n         }\n         return expressionQuery\n-                .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n+            .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n     }\n \n     @Override\n     public String toString() {\n         return \"column=\" + column +\n-                \", compareType=\" + compareTypeToString(compareType) +\n-                \", expression=\" + expression +\n-                \", expressionList=\" + expressionList +\n-                \", expressionQuery=\" + expressionQuery;\n+            \", compareType=\" + compareTypeToString(compareType) +\n+            \", expression=\" + expression +\n+            \", expressionList=\" + expressionList +\n+            \", expressionQuery=\" + expressionQuery;\n     }\n \n     private static String compareTypeToString(int i) {\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/61/IndexCondition.java\nindex b10a25999e..dffd8d0c14 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/61/IndexCondition.java\n@@ -31,44 +31,56 @@ import org.h2.value.Value;\n  * @author Noel Grandin\n  * @author Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888\n  */\n+\n+\n public class IndexCondition {\n \n     /**\n      * A bit of a search mask meaning 'equal'.\n      */\n+\n+\n     public static final int EQUALITY = 1;\n \n     /**\n      * A bit of a search mask meaning 'larger or equal'.\n      */\n+\n+\n     public static final int START = 2;\n \n     /**\n      * A bit of a search mask meaning 'smaller or equal'.\n      */\n+\n+\n     public static final int END = 4;\n \n     /**\n      * A search mask meaning 'between'.\n      */\n+\n+\n     public static final int RANGE = START | END;\n \n     /**\n      * A bit of a search mask meaning 'the condition is always false'.\n      */\n+\n+\n     public static final int ALWAYS_FALSE = 8;\n \n     /**\n      * A bit of a search mask meaning 'spatial intersection'.\n      */\n-    public static final int SPATIAL_INTERSECTS = 16;\n \n+\n+    public static final int SPATIAL_INTERSECTS = 16;\n     private final Column column;\n     /**\n      * see constants in {@link Comparison}\n      */\n     private final int compareType;\n-\n     private final Expression expression;\n     private List<Expression> expressionList;\n     private Query expressionQuery;\n@@ -77,8 +89,8 @@ public class IndexCondition {\n      * @param compareType the comparison type, see constants in\n      *            {@link Comparison}\n      */\n-    private IndexCondition(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+\n+    private IndexCondition(int compareType, ExpressionColumn column, Expression expression) {\n         this.compareType = compareType;\n         this.column = column == null ? null : column.getColumn();\n         this.expression = expression;\n@@ -93,8 +105,9 @@ public class IndexCondition {\n      * @param expression the expression\n      * @return the index condition\n      */\n-    public static IndexCondition get(int compareType, ExpressionColumn column,\n-            Expression expression) {\n+\n+\n+    public static IndexCondition get(int compareType, ExpressionColumn column, Expression expression) {\n         return new IndexCondition(compareType, column, expression);\n     }\n \n@@ -106,10 +119,10 @@ public class IndexCondition {\n      * @param list the expression list\n      * @return the index condition\n      */\n-    public static IndexCondition getInList(ExpressionColumn column,\n-            List<Expression> list) {\n-        IndexCondition cond = new IndexCondition(Comparison.IN_LIST, column,\n-                null);\n+\n+\n+    public static IndexCondition getInList(ExpressionColumn column, List<Expression> list) {\n+        IndexCondition cond = new IndexCondition(Comparison.IN_LIST, column, null);\n         cond.expressionList = list;\n         return cond;\n     }\n@@ -122,9 +135,10 @@ public class IndexCondition {\n      * @param query the select statement\n      * @return the index condition\n      */\n+\n+\n     public static IndexCondition getInQuery(ExpressionColumn column, Query query) {\n-        IndexCondition cond = new IndexCondition(Comparison.IN_QUERY, column,\n-                null);\n+        IndexCondition cond = new IndexCondition(Comparison.IN_QUERY, column, null);\n         cond.expressionQuery = query;\n         return cond;\n     }\n@@ -135,6 +149,8 @@ public class IndexCondition {\n      * @param session the session\n      * @return the value\n      */\n+\n+\n     public Value getCurrentValue(Session session) {\n         return expression.getValue(session);\n     }\n@@ -146,8 +162,10 @@ public class IndexCondition {\n      * @param session the session\n      * @return the value list\n      */\n+\n+\n     public Value[] getCurrentValueList(Session session) {\n-        HashSet<Value> valueSet = new HashSet<>();\n+        HashSet<Value> valueSet = new HashSet< >();\n         for (Expression e : expressionList) {\n             Value v = e.getValue(session);\n             v = column.convert(v);\n@@ -164,6 +182,8 @@ public class IndexCondition {\n      *\n      * @return the result\n      */\n+\n+\n     public ResultInterface getCurrentResult() {\n         return expressionQuery.query(0);\n     }\n@@ -173,6 +193,8 @@ public class IndexCondition {\n      *\n      * @return the SQL snippet\n      */\n+\n+\n     public String getSQL() {\n         if (compareType == Comparison.FALSE) {\n             return \"FALSE\";\n@@ -229,6 +251,8 @@ public class IndexCondition {\n      * @param indexConditions all index conditions\n      * @return the mask\n      */\n+\n+\n     public int getMask(ArrayList<IndexCondition> indexConditions) {\n         switch (compareType) {\n         case Comparison.FALSE:\n@@ -248,10 +272,10 @@ public class IndexCondition {\n                     // insert into test values(1, 10), (2, 20);\n                     // select * from (select * from test)\n                     // where a=1 and b in(10, 20);\n-                \t\n-                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n-                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n-                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n+                    \n+                    //\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n+                    //\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n+                    //\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n                     return 0;\n                 }\n             }\n@@ -274,6 +298,8 @@ public class IndexCondition {\n      *\n      * @return true if the result will always be false\n      */\n+\n+\n     public boolean isAlwaysFalse() {\n         return compareType == Comparison.FALSE;\n     }\n@@ -284,6 +310,8 @@ public class IndexCondition {\n      *\n      * @return true if this is a start condition\n      */\n+\n+\n     public boolean isStart() {\n         switch (compareType) {\n         case Comparison.EQUAL:\n@@ -302,6 +330,8 @@ public class IndexCondition {\n      *\n      * @return true if this is a end condition\n      */\n+\n+\n     public boolean isEnd() {\n         switch (compareType) {\n         case Comparison.EQUAL:\n@@ -320,6 +350,8 @@ public class IndexCondition {\n      *\n      * @return true if this is a spatial intersects condition\n      */\n+\n+\n     public boolean isSpatialIntersects() {\n         switch (compareType) {\n         case Comparison.SPATIAL_INTERSECTS:\n@@ -329,6 +361,7 @@ public class IndexCondition {\n         }\n     }\n \n+\n     public int getCompareType() {\n         return compareType;\n     }\n@@ -338,6 +371,8 @@ public class IndexCondition {\n      *\n      * @return the column\n      */\n+\n+\n     public Column getColumn() {\n         return column;\n     }\n@@ -347,6 +382,8 @@ public class IndexCondition {\n      *\n      * @return Expression.\n      */\n+\n+\n     public Expression getExpression() {\n         return expression;\n     }\n@@ -356,6 +393,8 @@ public class IndexCondition {\n      *\n      * @return Expression list.\n      */\n+\n+\n     public List<Expression> getExpressionList() {\n         return expressionList;\n     }\n@@ -365,6 +404,8 @@ public class IndexCondition {\n      *\n      * @return Expression query.\n      */\n+\n+\n     public Query getExpressionQuery() {\n         return expressionQuery;\n     }\n@@ -374,10 +415,11 @@ public class IndexCondition {\n      *\n      * @return true if it can be evaluated\n      */\n+\n+\n     public boolean isEvaluatable() {\n         if (expression != null) {\n-            return expression\n-                    .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n+            return expression.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n         }\n         if (expressionList != null) {\n             for (Expression e : expressionList) {\n@@ -387,17 +429,15 @@ public class IndexCondition {\n             }\n             return true;\n         }\n-        return expressionQuery\n-                .isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n+        return expressionQuery.isEverything(ExpressionVisitor.EVALUATABLE_VISITOR);\n     }\n \n     @Override\n     public String toString() {\n-        return \"column=\" + column +\n-                \", compareType=\" + compareTypeToString(compareType) +\n-                \", expression=\" + expression +\n-                \", expressionList=\" + expressionList +\n-                \", expressionQuery=\" + expressionQuery;\n+        return \"column=\" + column + \", compareType=\"\n+        + compareTypeToString(compareType) + \", expression=\"\n+        + expression + \", expressionList=\"\n+        + expressionList + \", expressionQuery=\" + expressionQuery;\n     }\n \n     private static String compareTypeToString(int i) {\n@@ -425,4 +465,4 @@ public class IndexCondition {\n         return s.toString();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "252",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/61/IndexCondition.java\nindex b10a25999e..1f2be34fdc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/61/IndexCondition.java\n@@ -248,10 +248,10 @@ public class IndexCondition {\n                     // insert into test values(1, 10), (2, 20);\n                     // select * from (select * from test)\n                     // where a=1 and b in(10, 20);\n-                \t\n-                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n-                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n-                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n                     return 0;\n                 }\n             }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "252",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/61/IndexCondition.java\nindex b10a25999e..1f2be34fdc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/61/IndexCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/61/IndexCondition.java\n@@ -248,10 +248,10 @@ public class IndexCondition {\n                     // insert into test values(1, 10), (2, 20);\n                     // select * from (select * from test)\n                     // where a=1 and b in(10, 20);\n-                \t\n-                \t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n-                \t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n-                \t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n+\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u8fd9\u91cc(select * from test)\u88ab\u5f53\u6210\u4e00\u4e2a\u89c6\u56fe\u4e86\uff0cb\u5b57\u6bb5\u662f\u5c5e\u4e8e(select * from test)\u7684\uff0c\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u56e0\u4e3a(select * from test)\u662f\u5c5e\u4e8e\u7b2c\u4e00\u4e2aselect\u7684from\u5b50\u53e5\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//\u540c\u6837a\u5b57\u6bb5\u4e5f\u662f\u5c5e\u4e8e\u89c6\u56fe\u4e2d\u7684\u5217\n                     return 0;\n                 }\n             }\n",
            "diff_size": 4
        }
    ]
}