{
    "error_id": "611",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/611/RowPartitionMeta.java\nindex bdbecde723..50da660e34 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/611/RowPartitionMeta.java\n@@ -28,129 +28,141 @@ import java.io.IOException;\n  * The meta data for row split\n  */\n public class RowPartitionMeta {\n-  /**\n-   * Row id\n-   */\n-  private int rowId;\n-\n-  /**\n-   * The offset for data file for this row split\n-   */\n-  private long offset;\n-\n-  /**\n-   * The element number for this row split\n-   */\n-  private int elementNum;\n-\n-  /**\n-   * Create meta for row split\n-   * @param rowId row split\n-   * @param offset data offset in the saved file\n-   * @param elementNum save element number\n-   */\n-  public RowPartitionMeta(int rowId, long offset, int elementNum) {\n-    this.rowId = rowId;\n-    this.offset = offset;\n-    this.elementNum = elementNum;\n-  }\n-\n-  /**\n-   * Write row split meta to output stream use binary format\n-   * @param output output stream\n-   * @throws IOException\n-   */\n-  public void write(DataOutputStream output) throws IOException {\n-    output.writeInt(rowId);\n-    output.writeLong(offset);\n-    output.writeInt(elementNum);\n-  }\n-\n-  /**\n-   * Read row split meta from input stream use binary format\n-   * @param input input stream\n-   * @throws IOException\n-   */\n-  public void read(DataInputStream input) throws IOException {\n-    rowId = input.readInt();\n-    offset = input.readLong();\n-    elementNum = input.readInt();\n-  }\n-\n-  /**\n-   * Write row split meta to a Json object\n-   * @return json object\n-   * @throws IOException\n-   * @throws JSONException\n-   */\n-  public void write(JSONObject rowJsonObject) throws IOException, JSONException {\n-    rowJsonObject.put(\"rowId\", rowId);\n-    rowJsonObject.put(\"offset\", offset);\n-    rowJsonObject.put(\"elementNum\", elementNum);\n-  }\n-\n-  /**\n-   * Read row split meta from a Json object\n-   * @param jsonObject json object\n-   * @throws IOException\n-   * @throws JSONException\n-   */\n-  public void read(JSONObject jsonObject) throws IOException, JSONException {\n-    rowId = jsonObject.getInt(\"rowId\");\n-    offset = jsonObject.getInt(\"offset\");\n-    elementNum = jsonObject.getInt(\"elementNum\");\n-  }\n-\n-  /**\n-   * Get the row id for the row split\n-   * @return row id\n-   */\n-  public int getRowId() {\n-    return rowId;\n-  }\n-\n-  /**\n-   * Set the row id for the row split\n-   * @param  rowId row id\n-   */\n-  public void setRowId(int rowId) {\n-    this.rowId = rowId;\n-  }\n-\n-  /**\n-   * Get the data offset in the saved file for this row split\n-   * @return the data offset in the saved file for this row split\n-   */\n-  public long getOffset() {\n-    return offset;\n-  }\n-\n-  /**\n-   * Set the data offset in the saved file for this row split\n-   * @param offset the data offset in the saved file for this row split\n-   */\n-  public void setOffset(long offset) {\n-    this.offset = offset;\n-  }\n-\n-  /**\n-   * Get save element number\n-   * @return save element number\n-   */\n-  public int getElementNum() {\n-    return elementNum;\n-  }\n-\n-  /**\n-   * Set save element number\n-   * @param elementNum save element number\n-   */\n-  public void setElementNum(int elementNum) {\n-    this.elementNum = elementNum;\n-  }\n-\n-  @Override public String toString() {\n-    return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\"\n-      + elementNum + '}';\n-  }\n+    /**\n+     * Row id\n+     */\n+    private int rowId;\n+\n+    /**\n+     * The offset for data file for this row split\n+     */\n+    private long offset;\n+\n+    /**\n+     * The element number for this row split\n+     */\n+    private int elementNum;\n+\n+    /**\n+     * Create meta for row split\n+     *\n+     * @param rowId      row split\n+     * @param offset     data offset in the saved file\n+     * @param elementNum save element number\n+     */\n+    public RowPartitionMeta(int rowId, long offset, int elementNum) {\n+        this.rowId = rowId;\n+        this.offset = offset;\n+        this.elementNum = elementNum;\n+    }\n+\n+    /**\n+     * Write row split meta to output stream use binary format\n+     *\n+     * @param output output stream\n+     * @throws IOException\n+     */\n+    public void write(DataOutputStream output) throws IOException {\n+        output.writeInt(rowId);\n+        output.writeLong(offset);\n+        output.writeInt(elementNum);\n+    }\n+\n+    /**\n+     * Read row split meta from input stream use binary format\n+     *\n+     * @param input input stream\n+     * @throws IOException\n+     */\n+    public void read(DataInputStream input) throws IOException {\n+        rowId = input.readInt();\n+        offset = input.readLong();\n+        elementNum = input.readInt();\n+    }\n+\n+    /**\n+     * Write row split meta to a Json object\n+     *\n+     * @return json object\n+     * @throws IOException\n+     * @throws JSONException\n+     */\n+    public void write(JSONObject rowJsonObject) throws IOException, JSONException {\n+        rowJsonObject.put(\"rowId\", rowId);\n+        rowJsonObject.put(\"offset\", offset);\n+        rowJsonObject.put(\"elementNum\", elementNum);\n+    }\n+\n+    /**\n+     * Read row split meta from a Json object\n+     *\n+     * @param jsonObject json object\n+     * @throws IOException\n+     * @throws JSONException\n+     */\n+    public void read(JSONObject jsonObject) throws IOException, JSONException {\n+        rowId = jsonObject.getInt(\"rowId\");\n+        offset = jsonObject.getInt(\"offset\");\n+        elementNum = jsonObject.getInt(\"elementNum\");\n+    }\n+\n+    /**\n+     * Get the row id for the row split\n+     *\n+     * @return row id\n+     */\n+    public int getRowId() {\n+        return rowId;\n+    }\n+\n+    /**\n+     * Set the row id for the row split\n+     *\n+     * @param rowId row id\n+     */\n+    public void setRowId(int rowId) {\n+        this.rowId = rowId;\n+    }\n+\n+    /**\n+     * Get the data offset in the saved file for this row split\n+     *\n+     * @return the data offset in the saved file for this row split\n+     */\n+    public long getOffset() {\n+        return offset;\n+    }\n+\n+    /**\n+     * Set the data offset in the saved file for this row split\n+     *\n+     * @param offset the data offset in the saved file for this row split\n+     */\n+    public void setOffset(long offset) {\n+        this.offset = offset;\n+    }\n+\n+    /**\n+     * Get save element number\n+     *\n+     * @return save element number\n+     */\n+    public int getElementNum() {\n+        return elementNum;\n+    }\n+\n+    /**\n+     * Set save element number\n+     *\n+     * @param elementNum save element number\n+     */\n+    public void setElementNum(int elementNum) {\n+        this.elementNum = elementNum;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\"\n+                + elementNum + '}';\n+    }\n }\n",
            "diff_size": 137
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/611/RowPartitionMeta.java\nindex bdbecde723..8f85247b95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/611/RowPartitionMeta.java\n@@ -149,8 +149,8 @@ public class RowPartitionMeta {\n     this.elementNum = elementNum;\n   }\n \n-  @Override public String toString() {\n-    return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\"\n-      + elementNum + '}';\n+  @Override\n+public String toString() {\n+    return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\" + elementNum + '}';\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 34.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 39.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 53.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 65.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 77.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 103.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 114.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 123.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 132.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 141.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 150.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 159.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/611/RowPartitionMeta.java\nindex bdbecde723..ff2188b754 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/611/RowPartitionMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/611/RowPartitionMeta.java\n@@ -19,7 +19,6 @@ package com.tencent.angel.model.output.format;\n \n import org.codehaus.jettison.json.JSONException;\n import org.codehaus.jettison.json.JSONObject;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -27,21 +26,22 @@ import java.io.IOException;\n /**\n  * The meta data for row split\n  */\n+\n public class RowPartitionMeta {\n   /**\n    * Row id\n    */\n-  private int rowId;\n+    private int rowId;\n \n   /**\n    * The offset for data file for this row split\n    */\n-  private long offset;\n+    private long offset;\n \n   /**\n    * The element number for this row split\n    */\n-  private int elementNum;\n+    private int elementNum;\n \n   /**\n    * Create meta for row split\n@@ -49,33 +49,36 @@ public class RowPartitionMeta {\n    * @param offset data offset in the saved file\n    * @param elementNum save element number\n    */\n-  public RowPartitionMeta(int rowId, long offset, int elementNum) {\n+\n+    public RowPartitionMeta(int rowId, long offset, int elementNum) {\n     this.rowId = rowId;\n     this.offset = offset;\n     this.elementNum = elementNum;\n-  }\n+    }\n \n   /**\n    * Write row split meta to output stream use binary format\n    * @param output output stream\n    * @throws IOException\n    */\n-  public void write(DataOutputStream output) throws IOException {\n+\n+    public void write(DataOutputStream output) throws IOException {\n     output.writeInt(rowId);\n     output.writeLong(offset);\n     output.writeInt(elementNum);\n-  }\n+    }\n \n   /**\n    * Read row split meta from input stream use binary format\n    * @param input input stream\n    * @throws IOException\n    */\n-  public void read(DataInputStream input) throws IOException {\n+\n+    public void read(DataInputStream input) throws IOException {\n     rowId = input.readInt();\n     offset = input.readLong();\n     elementNum = input.readInt();\n-  }\n+    }\n \n   /**\n    * Write row split meta to a Json object\n@@ -83,11 +86,12 @@ public class RowPartitionMeta {\n    * @throws IOException\n    * @throws JSONException\n    */\n-  public void write(JSONObject rowJsonObject) throws IOException, JSONException {\n+\n+    public void write(JSONObject rowJsonObject) throws IOException, JSONException {\n     rowJsonObject.put(\"rowId\", rowId);\n     rowJsonObject.put(\"offset\", offset);\n     rowJsonObject.put(\"elementNum\", elementNum);\n-  }\n+    }\n \n   /**\n    * Read row split meta from a Json object\n@@ -95,62 +99,70 @@ public class RowPartitionMeta {\n    * @throws IOException\n    * @throws JSONException\n    */\n-  public void read(JSONObject jsonObject) throws IOException, JSONException {\n+\n+    public void read(JSONObject jsonObject) throws IOException, JSONException {\n     rowId = jsonObject.getInt(\"rowId\");\n     offset = jsonObject.getInt(\"offset\");\n     elementNum = jsonObject.getInt(\"elementNum\");\n-  }\n+    }\n \n   /**\n    * Get the row id for the row split\n    * @return row id\n    */\n-  public int getRowId() {\n+\n+    public int getRowId() {\n     return rowId;\n-  }\n+    }\n \n   /**\n    * Set the row id for the row split\n    * @param  rowId row id\n    */\n-  public void setRowId(int rowId) {\n+\n+    public void setRowId(int rowId) {\n     this.rowId = rowId;\n-  }\n+    }\n \n   /**\n    * Get the data offset in the saved file for this row split\n    * @return the data offset in the saved file for this row split\n    */\n-  public long getOffset() {\n+\n+    public long getOffset() {\n     return offset;\n-  }\n+    }\n \n   /**\n    * Set the data offset in the saved file for this row split\n    * @param offset the data offset in the saved file for this row split\n    */\n-  public void setOffset(long offset) {\n+\n+    public void setOffset(long offset) {\n     this.offset = offset;\n-  }\n+    }\n \n   /**\n    * Get save element number\n    * @return save element number\n    */\n-  public int getElementNum() {\n+\n+    public int getElementNum() {\n     return elementNum;\n-  }\n+    }\n \n   /**\n    * Set save element number\n    * @param elementNum save element number\n    */\n-  public void setElementNum(int elementNum) {\n+\n+    public void setElementNum(int elementNum) {\n     this.elementNum = elementNum;\n-  }\n+    }\n+\n+    @Override\n+    public String toString() {\n+    return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\" + elementNum + '}';\n+    }\n \n-  @Override public String toString() {\n-    return \"RowPartitionMeta{\" + \"rowId=\" + rowId + \", offset=\" + offset + \", elementNum=\"\n-      + elementNum + '}';\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}