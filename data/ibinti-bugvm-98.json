{
    "error_id": "98",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 87).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * <p>\n     * If the <i>ACL</i> already has an {@code AclEntry} of the same type (<i>\n     * positive</i> or <i>negative</i>) and principal, then the new entry is not added.\n     *\n     * @param caller\n     *            the invoking {@code Principal}.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/intellij/98/Acl.java\nindex 146e6bf965..c8212c2cd0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/intellij/98/Acl.java\n@@ -50,118 +50,106 @@ import java.util.Enumeration;\n  */\n public interface Acl extends Owner {\n \n-    /**\n-     * Sets the name of this <i>ACL</i> instance.\n-     *\n-     * @param caller\n-     *            the invoking {@code Principal}.\n-     * @param name\n-     *            the name to be set.\n-     * @throws NotOwnerException\n-     *             if the invoking {@code Principal} is not an owner of this\n-     *             <i>ACL</i>.\n-     */\n-    void setName(Principal caller, String name) throws NotOwnerException;\n+  /**\n+   * Sets the name of this <i>ACL</i> instance.\n+   *\n+   * @param caller the invoking {@code Principal}.\n+   * @param name   the name to be set.\n+   * @throws NotOwnerException if the invoking {@code Principal} is not an owner of this\n+   *                           <i>ACL</i>.\n+   */\n+  void setName(Principal caller, String name) throws NotOwnerException;\n \n-    /**\n-     * Returns the name of this <i>ACL</i> instance.\n-     *\n-     * @return the name of this <i>ACL</i> instance.\n-     */\n-    String getName();\n+  /**\n+   * Returns the name of this <i>ACL</i> instance.\n+   *\n+   * @return the name of this <i>ACL</i> instance.\n+   */\n+  String getName();\n \n-    /**\n-     * Adds an {@code AclEntry} to this <i>ACL</i> instance.\n-     * <p>\n-     * If the <i>ACL</i> already has an {@code AclEntry} of the same type (<i>\n-     * positive</i> or <i>negative</i>) and principal, then the new entry is not added.\n-     *\n-     * @param caller\n-     *            the invoking {@code Principal}.\n-     * @param entry\n-     *            the ACL entry to add.\n-     * @return {@code true} if the entry is added, {@code false} if there is\n-     *             already an entry of the same type for the same principal\n-     * @throws NotOwnerException\n-     *             if the invoking {@code Principal} is not an owner of this\n-     *             <i>ACL</i>.\n-     */\n-    boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n+  /**\n+   * Adds an {@code AclEntry} to this <i>ACL</i> instance.\n+   * <p>\n+   * If the <i>ACL</i> already has an {@code AclEntry} of the same type (<i>\n+   * positive</i> or <i>negative</i>) and principal, then the new entry is not added.\n+   *\n+   * @param caller the invoking {@code Principal}.\n+   * @param entry  the ACL entry to add.\n+   * @return {@code true} if the entry is added, {@code false} if there is\n+   * already an entry of the same type for the same principal\n+   * @throws NotOwnerException if the invoking {@code Principal} is not an owner of this\n+   *                           <i>ACL</i>.\n+   */\n+  boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n \n-    /**\n-     * Removes an {@code AclEntry} from this <i>ACL</i> instance.\n-     *\n-     * @param caller\n-     *            the invoking {@code Principal}.\n-     * @param entry\n-     *            the ACL entry to remove.\n-     * @return {@code true} if the entry is removed, {@code false} if the entry\n-     *            is not in this <i>ACL</i>.\n-     * @throws NotOwnerException\n-     *             if the invoking {@code Principal} is not an owner of this\n-     *             <i>ACL</i>.\n-     */\n-    boolean removeEntry(Principal caller, AclEntry entry)\n-                throws NotOwnerException;\n+  /**\n+   * Removes an {@code AclEntry} from this <i>ACL</i> instance.\n+   *\n+   * @param caller the invoking {@code Principal}.\n+   * @param entry  the ACL entry to remove.\n+   * @return {@code true} if the entry is removed, {@code false} if the entry\n+   * is not in this <i>ACL</i>.\n+   * @throws NotOwnerException if the invoking {@code Principal} is not an owner of this\n+   *                           <i>ACL</i>.\n+   */\n+  boolean removeEntry(Principal caller, AclEntry entry)\n+    throws NotOwnerException;\n \n-    /**\n-     * Returns the set of allowed permissions for the specified {@code\n-     * Principal}.\n-     * <p>\n-     * If the specified principal has no entry in this ACL, an empty set is\n-     * returned.\n-     * <p>\n-     * The allowed permissions are collected according to the following rules:\n-     * <ul>\n-     * <li>The two permission lists (<i>positive</i> and <i>negative</i>) of the\n-     * principal's groups ({@link Group}) are collected. The positive (granted)\n-     * permissions are the union of all group's positive permissions that the\n-     * principal belongs to, the negative (denied) permissions are the union of\n-     * all group's negative permissions that the principal belongs to. If a\n-     * specific permission is in both the positive and the negative list, it is\n-     * removed from both lists.</li>\n-     * <li>The individual permissions (<i>positive</i> and <i>negative</i>) of\n-     * the principal override the group permissions. The positive individual\n-     * permissions override the group's negative permissions and the negative\n-     * individual permissions override the grpup's positive permissions.</li>\n-     * </ul>\n-     *\n-     * @param user\n-     *            the principal to get the allowed permissions for.\n-     * @return the set of allowed permissions for the specified principal.\n-     */\n-    Enumeration<Permission> getPermissions(Principal user);\n+  /**\n+   * Returns the set of allowed permissions for the specified {@code\n+   * Principal}.\n+   * <p>\n+   * If the specified principal has no entry in this ACL, an empty set is\n+   * returned.\n+   * <p>\n+   * The allowed permissions are collected according to the following rules:\n+   * <ul>\n+   * <li>The two permission lists (<i>positive</i> and <i>negative</i>) of the\n+   * principal's groups ({@link Group}) are collected. The positive (granted)\n+   * permissions are the union of all group's positive permissions that the\n+   * principal belongs to, the negative (denied) permissions are the union of\n+   * all group's negative permissions that the principal belongs to. If a\n+   * specific permission is in both the positive and the negative list, it is\n+   * removed from both lists.</li>\n+   * <li>The individual permissions (<i>positive</i> and <i>negative</i>) of\n+   * the principal override the group permissions. The positive individual\n+   * permissions override the group's negative permissions and the negative\n+   * individual permissions override the grpup's positive permissions.</li>\n+   * </ul>\n+   *\n+   * @param user the principal to get the allowed permissions for.\n+   * @return the set of allowed permissions for the specified principal.\n+   */\n+  Enumeration<Permission> getPermissions(Principal user);\n \n-    /**\n-     * Returns an {@code Enumeration} of the {@code AclEntry} of this\n-     * <i>ACL</i>.\n-     *\n-     * @return an {@code Enumeration} of the {@code AclEntry} of this\n-     *         <i>ACL</i>.\n-     */\n-    Enumeration<AclEntry> entries();\n+  /**\n+   * Returns an {@code Enumeration} of the {@code AclEntry} of this\n+   * <i>ACL</i>.\n+   *\n+   * @return an {@code Enumeration} of the {@code AclEntry} of this\n+   * <i>ACL</i>.\n+   */\n+  Enumeration<AclEntry> entries();\n \n-    /**\n-     * Checks whether the specified principal is granted the specified\n-     * permission.\n-     * <p>\n-     * The list of granted permissions is determined according to the rules\n-     * specified by {@code getPermissions}.\n-     *\n-     * @param principal\n-     *            the principal the check the permissions for.\n-     * @param permission\n-     *            the permission to check for the principal.\n-     * @return {@code true} if the principal is granted the permission,\n-     *            otherwise {@code false}.\n-     * @see #getPermissions(Principal)\n-     */\n-    boolean checkPermission(Principal principal, Permission permission);\n+  /**\n+   * Checks whether the specified principal is granted the specified\n+   * permission.\n+   * <p>\n+   * The list of granted permissions is determined according to the rules\n+   * specified by {@code getPermissions}.\n+   *\n+   * @param principal  the principal the check the permissions for.\n+   * @param permission the permission to check for the principal.\n+   * @return {@code true} if the principal is granted the permission,\n+   * otherwise {@code false}.\n+   * @see #getPermissions(Principal)\n+   */\n+  boolean checkPermission(Principal principal, Permission permission);\n \n-    /**\n-     * Returns the string representation of this ACL.\n-     *\n-     * @return the string representation of this ACL.\n-     */\n-    String toString();\n+  /**\n+   * Returns the string representation of this ACL.\n+   *\n+   * @return the string representation of this ACL.\n+   */\n+  String toString();\n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/naturalize/98/Acl.java\nindex 146e6bf965..0941fdfdee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/naturalize/98/Acl.java\n@@ -101,10 +101,9 @@ public interface Acl extends Owner {\n      *             if the invoking {@code Principal} is not an owner of this\n      *             <i>ACL</i>.\n      */\n-    boolean removeEntry(Principal caller, AclEntry entry)\n-                throws NotOwnerException;\n+    boolean removeEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n \n-    /**\n+/**\n      * Returns the set of allowed permissions for the specified {@code\n      * Principal}.\n      * <p>\n@@ -164,4 +163,4 @@ public interface Acl extends Owner {\n      * @return the string representation of this ACL.\n      */\n     String toString();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/codebuff/98/Acl.java\nindex 146e6bf965..2e9c252d38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/codebuff/98/Acl.java\n@@ -48,6 +48,8 @@ import java.util.Enumeration;\n  * Principal}, then it is interpreted as an empty list of permissions.</li>\n  * </ul>\n  */\n+\n+\n public interface Acl extends Owner {\n \n     /**\n@@ -61,6 +63,8 @@ public interface Acl extends Owner {\n      *             if the invoking {@code Principal} is not an owner of this\n      *             <i>ACL</i>.\n      */\n+\n+\n     void setName(Principal caller, String name) throws NotOwnerException;\n \n     /**\n@@ -68,6 +72,8 @@ public interface Acl extends Owner {\n      *\n      * @return the name of this <i>ACL</i> instance.\n      */\n+\n+\n     String getName();\n \n     /**\n@@ -86,6 +92,8 @@ public interface Acl extends Owner {\n      *             if the invoking {@code Principal} is not an owner of this\n      *             <i>ACL</i>.\n      */\n+\n+\n     boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n \n     /**\n@@ -101,8 +109,9 @@ public interface Acl extends Owner {\n      *             if the invoking {@code Principal} is not an owner of this\n      *             <i>ACL</i>.\n      */\n-    boolean removeEntry(Principal caller, AclEntry entry)\n-                throws NotOwnerException;\n+\n+\n+    boolean removeEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n \n     /**\n      * Returns the set of allowed permissions for the specified {@code\n@@ -130,6 +139,8 @@ public interface Acl extends Owner {\n      *            the principal to get the allowed permissions for.\n      * @return the set of allowed permissions for the specified principal.\n      */\n+\n+\n     Enumeration<Permission> getPermissions(Principal user);\n \n     /**\n@@ -139,6 +150,8 @@ public interface Acl extends Owner {\n      * @return an {@code Enumeration} of the {@code AclEntry} of this\n      *         <i>ACL</i>.\n      */\n+\n+\n     Enumeration<AclEntry> entries();\n \n     /**\n@@ -156,6 +169,8 @@ public interface Acl extends Owner {\n      *            otherwise {@code false}.\n      * @see #getPermissions(Principal)\n      */\n+\n+\n     boolean checkPermission(Principal principal, Permission permission);\n \n     /**\n@@ -163,5 +178,8 @@ public interface Acl extends Owner {\n      *\n      * @return the string representation of this ACL.\n      */\n+\n+\n     String toString();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler_three_grams/98/Acl.java\nindex 146e6bf965..6f9e878c89 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/errored/1/98/Acl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/ibinti-bugvm/styler_three_grams/98/Acl.java\n@@ -85,8 +85,7 @@ public interface Acl extends Owner {\n      * @throws NotOwnerException\n      *             if the invoking {@code Principal} is not an owner of this\n      *             <i>ACL</i>.\n-     */\n-    boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n+     */ boolean addEntry(Principal caller, AclEntry entry) throws NotOwnerException;\n \n     /**\n      * Removes an {@code AclEntry} from this <i>ACL</i> instance.\n",
            "diff_size": 2
        }
    ]
}