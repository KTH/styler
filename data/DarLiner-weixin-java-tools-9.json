{
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "25",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 151).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Created by ecoolper on 2017/5/5.\n */\npublic class JoddMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<HttpConnectionProvider, ProxyInfo> {\n  public JoddMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n    super(requestHttp, tmpDirFile);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\nindex ca43a1455d..147bb6435f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -22,7 +22,8 @@ import java.nio.charset.StandardCharsets;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class JoddMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<HttpConnectionProvider, ProxyInfo> {\n+public class JoddMaterialVoiceAndImageDownloadRequestExecutor\n+    extends MaterialVoiceAndImageDownloadRequestExecutor<HttpConnectionProvider, ProxyInfo> {\n   public JoddMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\nindex ca43a1455d..78c5bcac36 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -55,4 +55,4 @@ public class JoddMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVo\n       return new ByteArrayInputStream(responseContent);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\nindex ca43a1455d..df97932326 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/9/JoddMaterialVoiceAndImageDownloadRequestExecutor.java\n@@ -5,14 +5,12 @@ import jodd.http.HttpRequest;\n import jodd.http.HttpResponse;\n import jodd.http.ProxyInfo;\n import jodd.util.StringPool;\n-\n import me.chanjar.weixin.common.bean.result.WxError;\n import me.chanjar.weixin.common.exception.WxErrorException;\n import me.chanjar.weixin.common.util.http.RequestHttp;\n import me.chanjar.weixin.common.util.json.WxGsonBuilder;\n import me.chanjar.weixin.mp.util.http.MaterialVoiceAndImageDownloadRequestExecutor;\n import org.apache.commons.io.IOUtils;\n-\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.IOException;\n@@ -22,37 +20,39 @@ import java.nio.charset.StandardCharsets;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n+\n+\n public class JoddMaterialVoiceAndImageDownloadRequestExecutor extends MaterialVoiceAndImageDownloadRequestExecutor<HttpConnectionProvider, ProxyInfo> {\n-  public JoddMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n+\n+    public JoddMaterialVoiceAndImageDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n-  }\n+    }\n \n-  @Override\n-  public InputStream execute(String uri, String materialId) throws WxErrorException, IOException {\n+    @Override\n+    public InputStream execute(String uri, String materialId) throws WxErrorException, IOException {\n     HttpRequest request = HttpRequest.post(uri);\n     if (requestHttp.getRequestHttpProxy() != null) {\n-      requestHttp.getRequestHttpClient().useProxy(requestHttp.getRequestHttpProxy());\n+        requestHttp.getRequestHttpClient().useProxy(requestHttp.getRequestHttpProxy());\n     }\n     request.withConnectionProvider(requestHttp.getRequestHttpClient());\n-\n     request.query(\"media_id\", materialId);\n     HttpResponse response = request.send();\n     response.charset(StringPool.UTF_8);\n     try (InputStream inputStream = new ByteArrayInputStream(response.bodyBytes())) {\n       // \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n-      byte[] responseContent = IOUtils.toByteArray(inputStream);\n-      String responseContentString = new String(responseContent, StandardCharsets.UTF_8);\n-      if (responseContentString.length() < 100) {\n+        byte[] responseContent = IOUtils.toByteArray(inputStream);\n+        String responseContentString = new String(responseContent, StandardCharsets.UTF_8);\n+        if (responseContentString.length() < 100) {\n         try {\n-          WxError wxError = WxGsonBuilder.create().fromJson(responseContentString, WxError.class);\n-          if (wxError.getErrorCode() != 0) {\n+                                                      WxError wxError = WxGsonBuilder.create().fromJson(responseContentString, WxError.class);\n+                                                      if (wxError.getErrorCode() != 0) {\n             throw new WxErrorException(wxError);\n-          }\n+                                                      }\n         } catch (com.google.gson.JsonSyntaxException ex) {\n           return new ByteArrayInputStream(responseContent);\n         }\n-      }\n-      return new ByteArrayInputStream(responseContent);\n+        }\n+        return new ByteArrayInputStream(responseContent);\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}