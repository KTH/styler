{
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "120",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 151).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            AttributeData objectClassAttributeData = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase());\n            if (objectClassAttributeData == null) {\n                throw new UnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n            }\n\n            String[] objectClassesFromDb = objectClassAttributeData.getValues();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/126/CouchbaseEntryManager.java\nindex 8d3034546c..75a1504f38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/126/CouchbaseEntryManager.java\n@@ -117,7 +117,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n             AttributeData objectClassAttributeData = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase());\n             if (objectClassAttributeData == null) {\n-                throw new UnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n+            throw newUnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n             }\n \n             String[] objectClassesFromDb = objectClassAttributeData.getValues();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/126/CouchbaseEntryManager.java\nindex 8d3034546c..40f7e52e7d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/126/CouchbaseEntryManager.java\n@@ -111,20 +111,21 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     @Override\n     protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+                                          List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (!isSchemaUpdate) {\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n             AttributeData objectClassAttributeData = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase());\n             if (objectClassAttributeData == null) {\n-                throw new UnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n+                throw new UnsupportedOperationException(\n+                    String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n             }\n \n             String[] objectClassesFromDb = objectClassAttributeData.getValues();\n \n             if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n                 attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n+                    new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n             }\n         }\n     }\n@@ -276,13 +277,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     @Override\n     public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n+                                   BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n         PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation,\n-                false, start, count, chunkSize);\n+            false, start, count, chunkSize);\n         if (searchResult.getEntriesCount() == 0) {\n             return new ArrayList<T>(0);\n         }\n@@ -294,13 +295,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     @Override\n     public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n-            SortOrder sortOrder, int start, int count, int chunkSize) {\n+                                               SortOrder sortOrder, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n         PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, SearchScope.SUB, ldapReturnAttributes, sortBy, sortOrder,\n-                null, true, start, count, chunkSize);\n+            null, true, start, count, chunkSize);\n \n         PagedResult<T> result = new PagedResult<T>();\n         result.setEntriesCount(searchResult.getEntriesCount());\n@@ -319,8 +320,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope,\n-            String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start,\n-            int count, int chunkSize) {\n+                                                          String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder,\n+                                                          BatchOperation<T> batchOperation, boolean returnCount, int start,\n+                                                          int count, int chunkSize) {\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n@@ -345,9 +347,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             Sort requestedSort = buildSort(sortBy, sortOrder);\n \n             if (ArrayHelper.isEmpty(defaultSort)) {\n-                defaultSort = new Sort[] { requestedSort };\n+                defaultSort = new Sort[] {requestedSort};\n             } else {\n-                defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n+                defaultSort = ArrayHelper.arrayMerge(new Sort[] {requestedSort}, defaultSort);\n             }\n         }\n \n@@ -359,7 +361,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             }\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, currentLdapReturnAttributes,\n-                    defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n+                defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -389,7 +391,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null,\n-                    null, false, 1, 1, 0);\n+                null, false, 1, 1, 0);\n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n@@ -404,13 +406,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n         List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n+            searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n \n         return entries;\n     }\n \n     protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n-            JsonObject... searchResultEntries) {\n+                                         JsonObject... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n \n@@ -457,7 +459,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             if (attributeObject instanceof JsonArray) {\n                 attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n             } else {\n-                attributeValueStrings = new String[] { attributeObject.toString() };\n+                attributeValueStrings = new String[] {attributeObject.toString()};\n             }\n \n             AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n@@ -472,7 +474,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n             PagedResult<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n-                    SearchScope.SUB, null, null, null, false, 0, 1, 1);\n+                SearchScope.SUB, null, null, null, false, 0, 1, 1);\n             if ((searchResult == null) || (searchResult.getEntriesCount() != 1)) {\n                 return false;\n             }\n@@ -510,7 +512,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n-        String[] ldapReturnAttributes = new String[] { CouchbaseOperationService.DN }; // Don't load attributes\n+        String[] ldapReturnAttributes = new String[] {CouchbaseOperationService.DN}; // Don't load attributes\n \n         // Find entries\n         Filter searchFilter;\n@@ -525,10 +527,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n             operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), scope, ldapReturnAttributes, null,\n-                    batchOperationWraper, false, 0, 0, 100);\n+                batchOperationWraper, false, 0, 0, 100);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+                String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "389",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/126/CouchbaseEntryManager.java\nindex 8d3034546c..cba012b971 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/126/CouchbaseEntryManager.java\n@@ -281,8 +281,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n-        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation,\n-                false, start, count, chunkSize);\n+        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation, false, start, count, chunkSize);\n         if (searchResult.getEntriesCount() == 0) {\n             return new ArrayList<T>(0);\n         }\n@@ -319,8 +318,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope,\n-            String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start,\n-            int count, int chunkSize) {\n+            String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start, int count, int chunkSize) {\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n@@ -388,8 +386,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         PagedResult<JsonObject> searchResult = null;\n         try {\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null,\n-                    null, false, 1, 1, 0);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null, null, false, 1, 1, 0);\n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n@@ -648,4 +645,4 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         return decodedDate;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 288).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "368",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "399",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "415",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "420",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "539",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/126/CouchbaseEntryManager.java\nindex 8d3034546c..387f4f9187 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/126/CouchbaseEntryManager.java\n@@ -18,7 +18,6 @@ import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.gluu.persist.couchbase.model.ParsedKey;\n import org.gluu.persist.couchbase.operation.CouchbaseOperationService;\n import org.gluu.persist.couchbase.operation.impl.CouchbaseConnectionProvider;\n@@ -43,7 +42,6 @@ import org.gluu.util.ArrayHelper;\n import org.gluu.util.StringHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.couchbase.client.core.message.kv.subdoc.multi.Mutation;\n import com.couchbase.client.java.document.json.JsonArray;\n import com.couchbase.client.java.document.json.JsonObject;\n@@ -56,17 +54,15 @@ import com.couchbase.client.java.subdoc.MutationSpec;\n  *\n  * @author Yuriy Movchan Date: 05/14/2018\n  */\n+\n+\n public class CouchbaseEntryManager extends BaseEntryManager implements Serializable {\n \n     private static final long serialVersionUID = 2127241817126412574L;\n-\n     private static final Logger LOG = LoggerFactory.getLogger(CouchbaseConnectionProvider.class);\n-\n     private static final CouchbaseFilterConverter FILTER_CONVERTER = new CouchbaseFilterConverter();\n     private static final CouchbaseKeyConverter KEY_CONVERTER = new CouchbaseKeyConverter();\n-\n     private SimpleDateFormat jsonDateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n-\n     private CouchbaseOperationsServiceImpl operationService;\n     private List<DeleteNotifier> subscribers;\n \n@@ -102,6 +98,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public <T> T merge(T entry) {\n         Class<?> entryClass = entry.getClass();\n         checkEntryClass(entryClass, true);\n+\n         if (isLdapSchemaEntry(entryClass)) {\n             throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n         } else {\n@@ -110,8 +107,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     @Override\n-    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap, List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (!isSchemaUpdate) {\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n@@ -121,10 +117,8 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             }\n \n             String[] objectClassesFromDb = objectClassAttributeData.getValues();\n-\n             if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n-                attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n+                attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE, new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n             }\n         }\n     }\n@@ -133,14 +127,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public void remove(Object entry) {\n         Class<?> entryClass = entry.getClass();\n         checkEntryClass(entryClass, true);\n+\n         if (isLdapSchemaEntry(entryClass)) {\n             throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n         }\n \n         Object dnValue = getDNValue(entry, entryClass);\n-\n         LOG.debug(\"LDAP entry to remove: '{}'\", dnValue.toString());\n-\n         remove(dnValue.toString());\n     }\n \n@@ -150,12 +143,12 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         for (AttributeData attribute : attributes) {\n             String attributeName = attribute.getName();\n             String[] attributeValues = attribute.getValues();\n-\n             if (ArrayHelper.isNotEmpty(attributeValues) && StringHelper.isNotEmpty(attributeValues[0])) {\n                 String[] realValues = attributeValues;\n                 if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, attributeName)) {\n                     realValues = operationService.createStoragePassword(attributeValues);\n                 }\n+\n                 if (realValues.length > 1) {\n                     jsonObject.put(attributeName, JsonArray.from(realValues));\n                 } else {\n@@ -184,7 +177,6 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (AttributeDataModification attributeDataModification : attributeDataModifications) {\n                 AttributeData attribute = attributeDataModification.getAttribute();\n                 AttributeData oldAttribute = attributeDataModification.getOldAttribute();\n-\n                 String attributeName = null;\n                 String[] attributeValues = null;\n                 if (attribute != null) {\n@@ -275,14 +267,23 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     @Override\n-    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n+    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes, BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n-        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation,\n-                false, start, count, chunkSize);\n+        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN,\n+            entryClass,\n+                filter,\n+                    scope,\n+                        ldapReturnAttributes,\n+                            null,\n+                                null,\n+                                    batchOperation,\n+                                        false,\n+                                            start,\n+                                                count,\n+                                                    chunkSize);\n         if (searchResult.getEntriesCount() == 0) {\n             return new ArrayList<T>(0);\n         }\n@@ -293,15 +294,23 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     @Override\n-    public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n-            SortOrder sortOrder, int start, int count, int chunkSize) {\n+    public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, int start, int count, int chunkSize) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n \n-        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, SearchScope.SUB, ldapReturnAttributes, sortBy, sortOrder,\n-                null, true, start, count, chunkSize);\n-\n+        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN,\n+            entryClass,\n+                filter,\n+                    SearchScope.SUB,\n+                        ldapReturnAttributes,\n+                            sortBy,\n+                                sortOrder,\n+                                    null,\n+                                        true,\n+                                            start,\n+                                                count,\n+                                                    chunkSize);\n         PagedResult<T> result = new PagedResult<T>();\n         result.setEntriesCount(searchResult.getEntriesCount());\n         result.setStart(searchResult.getStart());\n@@ -314,13 +323,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n         List<T> entries = createEntities(baseDN, entryClass, searchResult);\n         result.setEntries(entries);\n-\n         return result;\n     }\n \n-    protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope,\n-            String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start,\n-            int count, int chunkSize) {\n+    protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start, int count, int chunkSize) {\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n@@ -331,6 +337,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -339,15 +346,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Prepare default sort\n-        Sort[] defaultSort = getDefaultSort(entryClass);\n \n+        Sort[] defaultSort = getDefaultSort(entryClass);\n         if (StringHelper.isNotEmpty(sortBy)) {\n             Sort requestedSort = buildSort(sortBy, sortOrder);\n-\n             if (ArrayHelper.isEmpty(defaultSort)) {\n-                defaultSort = new Sort[] { requestedSort };\n+                defaultSort = new Sort[] {requestedSort};\n             } else {\n-                defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n+                defaultSort = ArrayHelper.arrayMerge(new Sort[] {requestedSort}, defaultSort);\n             }\n         }\n \n@@ -357,9 +363,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             if (batchOperation != null) {\n                 batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass, propertiesAnnotations);\n             }\n+\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, currentLdapReturnAttributes,\n-                    defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, currentLdapReturnAttributes, defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -367,7 +373,8 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n             return searchResult;\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n     }\n \n@@ -378,6 +385,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Create filter\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -388,13 +396,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         PagedResult<JsonObject> searchResult = null;\n         try {\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null,\n-                    null, false, 1, 1, 0);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null, null, false, 1, 1, 0);\n+\n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         return (searchResult != null) && (searchResult.getEntriesCount() > 0);\n@@ -403,17 +412,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     protected <T> List<T> createEntities(String baseDN, Class<T> entryClass, PagedResult<JsonObject> searchResult) {\n         ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n-        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n+        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum, searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n \n         return entries;\n     }\n \n-    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n-            JsonObject... searchResultEntries) {\n+    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn, JsonObject... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n-\n         int count = 0;\n         for (int i = 0; i < searchResultEntries.length; i++) {\n             count++;\n@@ -426,10 +432,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             searchResultEntries[i] = null;\n \n             // Allow java to clean up temporary objects\n+\n             if (count >= 100) {\n                 List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n                 result.addAll(currentResult);\n-\n                 entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n                 count = 0;\n             }\n@@ -437,7 +443,6 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n         List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n         result.addAll(currentResult);\n-\n         return result;\n     }\n \n@@ -449,15 +454,15 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         List<AttributeData> result = new ArrayList<AttributeData>();\n         for (String attributeName : entry.getNames()) {\n             Object attributeObject = entry.get(attributeName);\n-\n             String[] attributeValueStrings;\n             if (attributeObject == null) {\n                 attributeValueStrings = NO_STRINGS;\n             }\n+\n             if (attributeObject instanceof JsonArray) {\n                 attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n             } else {\n-                attributeValueStrings = new String[] { attributeObject.toString() };\n+                attributeValueStrings = new String[] {attributeObject.toString()};\n             }\n \n             AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n@@ -471,8 +476,16 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public boolean authenticate(String baseDN, String userName, String password) {\n         try {\n             Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n-            PagedResult<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n-                    SearchScope.SUB, null, null, null, false, 0, 1, 1);\n+            PagedResult<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(),\n+                toCouchbaseFilter(filter),\n+                    SearchScope.SUB,\n+                        null,\n+                            null,\n+                                null,\n+                                    false,\n+                                        0,\n+                                            1,\n+                                                1);\n             if ((searchResult == null) || (searchResult.getEntriesCount() != 1)) {\n                 return false;\n             }\n@@ -510,7 +523,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n-        String[] ldapReturnAttributes = new String[] { CouchbaseOperationService.DN }; // Don't load attributes\n+        String[] ldapReturnAttributes = new String[] {CouchbaseOperationService.DN}; // Don't load attributes\n \n         // Find entries\n         Filter searchFilter;\n@@ -521,14 +534,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         CountBatchOperation<T> batchOperation = new CountBatchOperation<T>();\n-\n         try {\n             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n-            operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), scope, ldapReturnAttributes, null,\n-                    batchOperationWraper, false, 0, 0, 100);\n+            operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), scope, ldapReturnAttributes, null, batchOperationWraper, false, 0, 0, 100);\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\",\n+                baseDN,\n+                    searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n@@ -536,7 +548,6 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     private MutationSpec createModification(final Mutation type, final String attributeName, final String... attributeValues) {\n         String realAttributeName = attributeName;\n-\n         String[] realValues = attributeValues;\n         if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, realAttributeName)) {\n             realValues = operationService.createStoragePassword(attributeValues);\n@@ -555,15 +566,15 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             requestedSort = Sort.desc(Expression.path(sortBy));\n         } else if (SortOrder.ASCENDING == sortOrder) {\n             requestedSort = Sort.asc(Expression.path(sortBy));\n-        } else {\n+} else {\n             requestedSort = Sort.def(Expression.path(sortBy));\n         }\n+\n         return requestedSort;\n     }\n \n     protected <T> Sort[] getDefaultSort(Class<T> entryClass) {\n         String[] sortByProperties = getEntrySortBy(entryClass);\n-\n         if (ArrayHelper.isEmpty(sortByProperties)) {\n             return null;\n         }\n@@ -619,6 +630,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         public int getCountEntries() {\n             return countEntries;\n         }\n+\n     }\n \n     @Override\n@@ -641,11 +653,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             decodedDate = jsonDateFormat.parse(date);\n         } catch (ParseException ex) {\n             LOG.error(\"Failed to decode generalized time '{}'\", date, ex);\n-\n             return null;\n         }\n \n         return decodedDate;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "392",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "653",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/126/CouchbaseEntryManager.java\nindex 8d3034546c..5d831bc1d7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/126/CouchbaseEntryManager.java\n@@ -117,535 +117,537 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n             AttributeData objectClassAttributeData = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase());\n             if (objectClassAttributeData == null) {\n-                throw new UnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n-            }\n-\n-            String[] objectClassesFromDb = objectClassAttributeData.getValues();\n-\n-            if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n-                attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void remove(Object entry) {\n-        Class<?> entryClass = entry.getClass();\n-        checkEntryClass(entryClass, true);\n-        if (isLdapSchemaEntry(entryClass)) {\n-            throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n-        }\n-\n-        Object dnValue = getDNValue(entry, entryClass);\n-\n-        LOG.debug(\"LDAP entry to remove: '{}'\", dnValue.toString());\n-\n-        remove(dnValue.toString());\n-    }\n-\n-    @Override\n-    protected void persist(String dn, List<AttributeData> attributes) {\n-        JsonObject jsonObject = JsonObject.create();\n-        for (AttributeData attribute : attributes) {\n-            String attributeName = attribute.getName();\n-            String[] attributeValues = attribute.getValues();\n-\n-            if (ArrayHelper.isNotEmpty(attributeValues) && StringHelper.isNotEmpty(attributeValues[0])) {\n-                String[] realValues = attributeValues;\n-                if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, attributeName)) {\n-                    realValues = operationService.createStoragePassword(attributeValues);\n-                }\n-                if (realValues.length > 1) {\n-                    jsonObject.put(attributeName, JsonArray.from(realValues));\n-                } else {\n-                    jsonObject.put(attributeName, realValues[0]);\n-                }\n-            }\n-        }\n-        jsonObject.put(CouchbaseOperationService.DN, dn);\n-\n-        // Persist entry\n-        try {\n-            boolean result = operationService.addEntry(toCouchbaseKey(dn).getKey(), jsonObject);\n-            if (!result) {\n-                throw new EntryPersistenceException(String.format(\"Failed to persist entry: %s\", dn));\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to persist entry: %s\", dn), ex);\n-        }\n-    }\n-\n-    @Override\n-    public void merge(String dn, List<AttributeDataModification> attributeDataModifications) {\n-        // Update entry\n-        try {\n-            List<MutationSpec> modifications = new ArrayList<MutationSpec>(attributeDataModifications.size());\n-            for (AttributeDataModification attributeDataModification : attributeDataModifications) {\n-                AttributeData attribute = attributeDataModification.getAttribute();\n-                AttributeData oldAttribute = attributeDataModification.getOldAttribute();\n-\n-                String attributeName = null;\n-                String[] attributeValues = null;\n-                if (attribute != null) {\n-                    attributeName = attribute.getName();\n-                    attributeValues = attribute.getValues();\n-                }\n-\n-                String oldAttributeName = null;\n-                String[] oldAttributeValues = null;\n-                if (oldAttribute != null) {\n-                    oldAttributeName = oldAttribute.getName();\n-                    oldAttributeValues = oldAttribute.getValues();\n-                }\n-\n-                MutationSpec modification = null;\n-                if (AttributeModificationType.ADD.equals(attributeDataModification.getModificationType())) {\n-                    modification = createModification(Mutation.DICT_ADD, attributeName, attributeValues);\n-                } else {\n-                    if (AttributeModificationType.REMOVE.equals(attributeDataModification.getModificationType())) {\n-                        modification = createModification(Mutation.DELETE, oldAttributeName, oldAttributeValues);\n-                    } else if (AttributeModificationType.REPLACE.equals(attributeDataModification.getModificationType())) {\n-                        modification = createModification(Mutation.REPLACE, attributeName, attributeValues);\n-                    }\n-                }\n-\n-                if (modification != null) {\n-                    modifications.add(modification);\n-                }\n-            }\n-\n-            if (modifications.size() > 0) {\n-                boolean result = operationService.updateEntry(toCouchbaseKey(dn).getKey(), modifications);\n-                if (!result) {\n-                    throw new EntryPersistenceException(String.format(\"Failed to update entry: %s\", dn));\n-                }\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to update entry: %s\", dn), ex);\n-        }\n-    }\n-\n-    @Override\n-    protected void remove(String dn) {\n-        // Remove entry\n-        try {\n-            for (DeleteNotifier subscriber : subscribers) {\n-                subscriber.onBeforeRemove(dn);\n-            }\n-            operationService.delete(toCouchbaseKey(dn).getKey());\n-            for (DeleteNotifier subscriber : subscribers) {\n-                subscriber.onAfterRemove(dn);\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to remove entry: %s\", dn), ex);\n-        }\n-    }\n-\n-    @Override\n-    public void removeRecursively(String dn) {\n-        try {\n-            for (DeleteNotifier subscriber : subscribers) {\n-                subscriber.onBeforeRemove(dn);\n-            }\n-            operationService.deleteRecursively(toCouchbaseKey(dn).getKey());\n-            for (DeleteNotifier subscriber : subscribers) {\n-                subscriber.onAfterRemove(dn);\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to remove entry: %s\", dn), ex);\n-        }\n-    }\n-\n-    @Override\n-    protected List<AttributeData> find(String dn, String... ldapReturnAttributes) {\n-        try {\n-            // Load entry\n-            ParsedKey keyWithInum = toCouchbaseKey(dn);\n-            JsonObject entry = operationService.lookup(keyWithInum.getKey(), ldapReturnAttributes);\n-            List<AttributeData> result = getAttributeDataList(entry);\n-            if (result != null) {\n-                return result;\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n-        }\n-\n-        throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn));\n-    }\n-\n-    @Override\n-    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n-        if (StringHelper.isEmptyString(baseDN)) {\n-            throw new MappingException(\"Base DN to find entries is null\");\n-        }\n-\n-        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation,\n-                false, start, count, chunkSize);\n-        if (searchResult.getEntriesCount() == 0) {\n-            return new ArrayList<T>(0);\n-        }\n-\n-        List<T> entries = createEntities(baseDN, entryClass, searchResult);\n-\n-        return entries;\n-    }\n-\n-    @Override\n-    public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n-            SortOrder sortOrder, int start, int count, int chunkSize) {\n-        if (StringHelper.isEmptyString(baseDN)) {\n-            throw new MappingException(\"Base DN to find entries is null\");\n-        }\n-\n-        PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, SearchScope.SUB, ldapReturnAttributes, sortBy, sortOrder,\n-                null, true, start, count, chunkSize);\n-\n-        PagedResult<T> result = new PagedResult<T>();\n-        result.setEntriesCount(searchResult.getEntriesCount());\n-        result.setStart(searchResult.getStart());\n-        result.setTotalEntriesCount(searchResult.getTotalEntriesCount());\n-\n-        if (searchResult.getEntriesCount() == 0) {\n-            result.setEntries(new ArrayList<T>(0));\n-            return result;\n-        }\n-\n-        List<T> entries = createEntities(baseDN, entryClass, searchResult);\n-        result.setEntries(entries);\n-\n-        return result;\n-    }\n-\n-    protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope,\n-            String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start,\n-            int count, int chunkSize) {\n-        // Check entry class\n-        checkEntryClass(entryClass, false);\n-        String[] objectClasses = getTypeObjectClasses(entryClass);\n-        List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n-        String[] currentLdapReturnAttributes = ldapReturnAttributes;\n-        if (ArrayHelper.isEmpty(currentLdapReturnAttributes)) {\n-            currentLdapReturnAttributes = getLdapAttributes(null, propertiesAnnotations, false);\n-        }\n-\n-        // Find entries\n-        Filter searchFilter;\n-        if (objectClasses.length > 0) {\n-            searchFilter = addObjectClassFilter(filter, objectClasses);\n-        } else {\n-            searchFilter = filter;\n-        }\n-\n-        // Prepare default sort\n-        Sort[] defaultSort = getDefaultSort(entryClass);\n-\n-        if (StringHelper.isNotEmpty(sortBy)) {\n-            Sort requestedSort = buildSort(sortBy, sortOrder);\n-\n-            if (ArrayHelper.isEmpty(defaultSort)) {\n-                defaultSort = new Sort[] { requestedSort };\n-            } else {\n-                defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n-            }\n-        }\n-\n-        PagedResult<JsonObject> searchResult = null;\n-        try {\n-            CouchbaseBatchOperationWraper<T> batchOperationWraper = null;\n-            if (batchOperation != null) {\n-                batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass, propertiesAnnotations);\n-            }\n-            ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, currentLdapReturnAttributes,\n-                    defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n-\n-            if (searchResult == null) {\n-                throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n-            }\n-\n-            return searchResult;\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n-        }\n-    }\n-\n-    @Override\n-    protected boolean contains(String baseDN, Filter filter, String[] objectClasses, String[] ldapReturnAttributes) {\n-        if (StringHelper.isEmptyString(baseDN)) {\n-            throw new MappingException(\"Base DN to check contain entries is null\");\n-        }\n-\n-        // Create filter\n-        Filter searchFilter;\n-        if (objectClasses.length > 0) {\n-            searchFilter = addObjectClassFilter(filter, objectClasses);\n-        } else {\n-            searchFilter = filter;\n-        }\n-\n-        PagedResult<JsonObject> searchResult = null;\n-        try {\n-            ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null,\n-                    null, false, 1, 1, 0);\n-            if (searchResult == null) {\n-                throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n-            }\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n-        }\n-\n-        return (searchResult != null) && (searchResult.getEntriesCount() > 0);\n-    }\n-\n-    protected <T> List<T> createEntities(String baseDN, Class<T> entryClass, PagedResult<JsonObject> searchResult) {\n-        ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-        List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n-        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n-\n-        return entries;\n-    }\n-\n-    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n-            JsonObject... searchResultEntries) {\n-        List<T> result = new ArrayList<T>(searchResultEntries.length);\n-        Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n-\n-        int count = 0;\n-        for (int i = 0; i < searchResultEntries.length; i++) {\n-            count++;\n-            JsonObject entry = searchResultEntries[i];\n-            // String key = entry.getString(CouchbaseOperationService.META_DOC_ID);\n-            String dn = entry.getString(CouchbaseOperationService.DN);\n-            entriesAttributes.put(dn, getAttributeDataList(entry));\n-\n-            // Remove reference to allow java clean up object\n-            searchResultEntries[i] = null;\n-\n-            // Allow java to clean up temporary objects\n-            if (count >= 100) {\n-                List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n-                result.addAll(currentResult);\n-\n-                entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n-                count = 0;\n-            }\n-        }\n-\n-        List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n-        result.addAll(currentResult);\n-\n-        return result;\n-    }\n-\n-    private List<AttributeData> getAttributeDataList(JsonObject entry) {\n-        if (entry == null) {\n-            return null;\n-        }\n-\n-        List<AttributeData> result = new ArrayList<AttributeData>();\n-        for (String attributeName : entry.getNames()) {\n-            Object attributeObject = entry.get(attributeName);\n-\n-            String[] attributeValueStrings;\n-            if (attributeObject == null) {\n-                attributeValueStrings = NO_STRINGS;\n-            }\n-            if (attributeObject instanceof JsonArray) {\n-                attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n-            } else {\n-                attributeValueStrings = new String[] { attributeObject.toString() };\n-            }\n-\n-            AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n-            result.add(tmpAttribute);\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public boolean authenticate(String baseDN, String userName, String password) {\n-        try {\n-            Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n-            PagedResult<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n-                    SearchScope.SUB, null, null, null, false, 0, 1, 1);\n-            if ((searchResult == null) || (searchResult.getEntriesCount() != 1)) {\n-                return false;\n-            }\n-\n-            String bindDn = searchResult.getEntries().get(0).getString(CouchbaseOperationService.DN);\n-\n-            return authenticate(bindDn, password);\n-        } catch (SearchException ex) {\n-            throw new AuthenticationException(String.format(\"Failed to find user DN: %s\", userName), ex);\n-        } catch (Exception ex) {\n-            throw new AuthenticationException(String.format(\"Failed to authenticate user: %s\", userName), ex);\n-        }\n-    }\n-\n-    @Override\n-    public boolean authenticate(String bindDn, String password) {\n-        try {\n-            return operationService.authenticate(toCouchbaseKey(bindDn).getKey(), password);\n-        } catch (Exception ex) {\n-            throw new AuthenticationException(String.format(\"Failed to authenticate DN: %s\", bindDn), ex);\n-        }\n-    }\n-\n-    @Override\n-    public <T> int countEntries(String baseDN, Class<T> entryClass, Filter filter) {\n-        return countEntries(baseDN, entryClass, filter, SearchScope.SUB);\n-    }\n-\n-    @Override\n-    public <T> int countEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope) {\n-        if (StringHelper.isEmptyString(baseDN)) {\n-            throw new MappingException(\"Base DN to find entries is null\");\n-        }\n-\n-        // Check entry class\n-        checkEntryClass(entryClass, false);\n-        String[] objectClasses = getTypeObjectClasses(entryClass);\n-        String[] ldapReturnAttributes = new String[] { CouchbaseOperationService.DN }; // Don't load attributes\n-\n-        // Find entries\n-        Filter searchFilter;\n-        if (objectClasses.length > 0) {\n-            searchFilter = addObjectClassFilter(filter, objectClasses);\n-        } else {\n-            searchFilter = filter;\n-        }\n-\n-        CountBatchOperation<T> batchOperation = new CountBatchOperation<T>();\n-\n-        try {\n-            CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n-            operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), scope, ldapReturnAttributes, null,\n-                    batchOperationWraper, false, 0, 0, 100);\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n-        }\n-\n-        return batchOperation.getCountEntries();\n-    }\n-\n-    private MutationSpec createModification(final Mutation type, final String attributeName, final String... attributeValues) {\n-        String realAttributeName = attributeName;\n-\n-        String[] realValues = attributeValues;\n-        if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, realAttributeName)) {\n-            realValues = operationService.createStoragePassword(attributeValues);\n-        }\n-\n-        if (realValues.length == 1) {\n-            return new MutationSpec(type, realAttributeName, realValues[0]);\n-        }\n-\n-        return new MutationSpec(type, realAttributeName, realValues);\n-    }\n-\n-    protected Sort buildSort(String sortBy, SortOrder sortOrder) {\n-        Sort requestedSort = null;\n-        if (SortOrder.DESCENDING == sortOrder) {\n-            requestedSort = Sort.desc(Expression.path(sortBy));\n-        } else if (SortOrder.ASCENDING == sortOrder) {\n-            requestedSort = Sort.asc(Expression.path(sortBy));\n-        } else {\n-            requestedSort = Sort.def(Expression.path(sortBy));\n-        }\n-        return requestedSort;\n-    }\n-\n-    protected <T> Sort[] getDefaultSort(Class<T> entryClass) {\n-        String[] sortByProperties = getEntrySortBy(entryClass);\n-\n-        if (ArrayHelper.isEmpty(sortByProperties)) {\n-            return null;\n-        }\n-\n-        Sort[] sort = new Sort[sortByProperties.length];\n-        for (int i = 0; i < sortByProperties.length; i++) {\n-            sort[i] = Sort.def(Expression.path(sortByProperties[i]));\n-        }\n-\n-        return sort;\n-    }\n-\n-    @Override\n-    public String[] exportEntry(String dn) {\n-        try {\n-            // Load entry\n-            ParsedKey keyWithInum = toCouchbaseKey(dn);\n-            JsonObject entry = operationService.lookup(keyWithInum.getKey());\n-            Map<String, Object> map = entry.toMap();\n-            List<String> result = new ArrayList<String>(map.size());\n-            for (Entry<String, Object> attr : map.entrySet()) {\n-                result.add(attr.getKey() + \": \" + attr.getValue());\n-            }\n-\n-            return result.toArray(new String[result.size()]);\n-        } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n-        }\n-    }\n-\n-    private Expression toCouchbaseFilter(Filter genericFilter) throws SearchException {\n-        return FILTER_CONVERTER.convertToLdapFilter(genericFilter);\n-    }\n-\n-    private ParsedKey toCouchbaseKey(String dn) {\n-        return KEY_CONVERTER.convertToKey(dn);\n-    }\n-\n-    private static final class CountBatchOperation<T> extends DefaultBatchOperation<T> {\n-\n-        private int countEntries = 0;\n-\n-        @Override\n-        public void performAction(List<T> entries) {\n-        }\n-\n-        @Override\n-        public boolean collectSearchResult(int size) {\n-            countEntries += size;\n-            return false;\n-        }\n-\n-        public int getCountEntries() {\n-            return countEntries;\n-        }\n-    }\n-\n-    @Override\n-    public String encodeTime(Date date) {\n-        if (date == null) {\n-            return null;\n-        }\n-\n-        return jsonDateFormat.format(date);\n-    }\n-\n-    @Override\n-    public Date decodeTime(String date) {\n-        if (StringHelper.isEmpty(date)) {\n-            return null;\n-        }\n-\n-        Date decodedDate;\n-        try {\n-            decodedDate = jsonDateFormat.parse(date);\n-        } catch (ParseException ex) {\n-            LOG.error(\"Failed to decode generalized time '{}'\", date, ex);\n-\n-            return null;\n-        }\n-\n-        return decodedDate;\n-    }\n-\n-}\n+        throw\n+            newUnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n+             }\n+\n+             String[] objectClassesFromDb = objectClassAttributeData.getValues();\n+\n+             if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n+                 attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n+                         new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n+             }\n+         }\n+     }\n+\n+     @Override\n+     public void remove(Object entry) {\n+         Class<?> entryClass = entry.getClass();\n+         checkEntryClass(entryClass, true);\n+         if (isLdapSchemaEntry(entryClass)) {\n+             throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n+         }\n+\n+         Object dnValue = getDNValue(entry, entryClass);\n+\n+         LOG.debug(\"LDAP entry to remove: '{}'\", dnValue.toString());\n+\n+         remove(dnValue.toString());\n+     }\n+\n+     @Override\n+     protected void persist(String dn, List<AttributeData> attributes) {\n+         JsonObject jsonObject = JsonObject.create();\n+         for (AttributeData attribute : attributes) {\n+             String attributeName = attribute.getName();\n+             String[] attributeValues = attribute.getValues();\n+\n+             if (ArrayHelper.isNotEmpty(attributeValues) && StringHelper.isNotEmpty(attributeValues[0])) {\n+                 String[] realValues = attributeValues;\n+                 if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, attributeName)) {\n+                     realValues = operationService.createStoragePassword(attributeValues);\n+                 }\n+                 if (realValues.length > 1) {\n+                     jsonObject.put(attributeName, JsonArray.from(realValues));\n+                 } else {\n+                     jsonObject.put(attributeName, realValues[0]);\n+                 }\n+             }\n+         }\n+         jsonObject.put(CouchbaseOperationService.DN, dn);\n+\n+         // Persist entry\n+         try {\n+             boolean result = operationService.addEntry(toCouchbaseKey(dn).getKey(), jsonObject);\n+             if (!result) {\n+                 throw new EntryPersistenceException(String.format(\"Failed to persist entry: %s\", dn));\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to persist entry: %s\", dn), ex);\n+         }\n+     }\n+\n+     @Override\n+     public void merge(String dn, List<AttributeDataModification> attributeDataModifications) {\n+         // Update entry\n+         try {\n+             List<MutationSpec> modifications = new ArrayList<MutationSpec>(attributeDataModifications.size());\n+             for (AttributeDataModification attributeDataModification : attributeDataModifications) {\n+                 AttributeData attribute = attributeDataModification.getAttribute();\n+                 AttributeData oldAttribute = attributeDataModification.getOldAttribute();\n+\n+                 String attributeName = null;\n+                 String[] attributeValues = null;\n+                 if (attribute != null) {\n+                     attributeName = attribute.getName();\n+                     attributeValues = attribute.getValues();\n+                 }\n+\n+                 String oldAttributeName = null;\n+                 String[] oldAttributeValues = null;\n+                 if (oldAttribute != null) {\n+                     oldAttributeName = oldAttribute.getName();\n+                     oldAttributeValues = oldAttribute.getValues();\n+                 }\n+\n+                 MutationSpec modification = null;\n+                 if (AttributeModificationType.ADD.equals(attributeDataModification.getModificationType())) {\n+                     modification = createModification(Mutation.DICT_ADD, attributeName, attributeValues);\n+                 } else {\n+                     if (AttributeModificationType.REMOVE.equals(attributeDataModification.getModificationType())) {\n+                         modification = createModification(Mutation.DELETE, oldAttributeName, oldAttributeValues);\n+                     } else if (AttributeModificationType.REPLACE.equals(attributeDataModification.getModificationType())) {\n+                         modification = createModification(Mutation.REPLACE, attributeName, attributeValues);\n+                     }\n+                 }\n+\n+                 if (modification != null) {\n+                     modifications.add(modification);\n+                 }\n+             }\n+\n+             if (modifications.size() > 0) {\n+                 boolean result = operationService.updateEntry(toCouchbaseKey(dn).getKey(), modifications);\n+                 if (!result) {\n+                     throw new EntryPersistenceException(String.format(\"Failed to update entry: %s\", dn));\n+                 }\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to update entry: %s\", dn), ex);\n+         }\n+     }\n+\n+     @Override\n+     protected void remove(String dn) {\n+         // Remove entry\n+         try {\n+             for (DeleteNotifier subscriber : subscribers) {\n+                 subscriber.onBeforeRemove(dn);\n+             }\n+             operationService.delete(toCouchbaseKey(dn).getKey());\n+             for (DeleteNotifier subscriber : subscribers) {\n+                 subscriber.onAfterRemove(dn);\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to remove entry: %s\", dn), ex);\n+         }\n+     }\n+\n+     @Override\n+     public void removeRecursively(String dn) {\n+         try {\n+             for (DeleteNotifier subscriber : subscribers) {\n+                 subscriber.onBeforeRemove(dn);\n+             }\n+             operationService.deleteRecursively(toCouchbaseKey(dn).getKey());\n+             for (DeleteNotifier subscriber : subscribers) {\n+                 subscriber.onAfterRemove(dn);\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to remove entry: %s\", dn), ex);\n+         }\n+     }\n+\n+     @Override\n+     protected List<AttributeData> find(String dn, String... ldapReturnAttributes) {\n+         try {\n+             // Load entry\n+             ParsedKey keyWithInum = toCouchbaseKey(dn);\n+             JsonObject entry = operationService.lookup(keyWithInum.getKey(), ldapReturnAttributes);\n+             List<AttributeData> result = getAttributeDataList(entry);\n+             if (result != null) {\n+                 return result;\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n+         }\n+\n+         throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn));\n+     }\n+\n+     @Override\n+     public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n+             BatchOperation<T> batchOperation, int start, int count, int chunkSize) {\n+         if (StringHelper.isEmptyString(baseDN)) {\n+             throw new MappingException(\"Base DN to find entries is null\");\n+         }\n+\n+         PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, scope, ldapReturnAttributes, null, null, batchOperation,\n+                 false, start, count, chunkSize);\n+         if (searchResult.getEntriesCount() == 0) {\n+             return new ArrayList<T>(0);\n+         }\n+\n+         List<T> entries = createEntities(baseDN, entryClass, searchResult);\n+\n+         return entries;\n+     }\n+\n+     @Override\n+     public <T> PagedResult<T> findPagedEntries(String baseDN, Class<T> entryClass, Filter filter, String[] ldapReturnAttributes, String sortBy,\n+             SortOrder sortOrder, int start, int count, int chunkSize) {\n+         if (StringHelper.isEmptyString(baseDN)) {\n+             throw new MappingException(\"Base DN to find entries is null\");\n+         }\n+\n+         PagedResult<JsonObject> searchResult = findEntriesImpl(baseDN, entryClass, filter, SearchScope.SUB, ldapReturnAttributes, sortBy, sortOrder,\n+                 null, true, start, count, chunkSize);\n+\n+         PagedResult<T> result = new PagedResult<T>();\n+         result.setEntriesCount(searchResult.getEntriesCount());\n+         result.setStart(searchResult.getStart());\n+         result.setTotalEntriesCount(searchResult.getTotalEntriesCount());\n+\n+         if (searchResult.getEntriesCount() == 0) {\n+             result.setEntries(new ArrayList<T>(0));\n+             return result;\n+         }\n+\n+         List<T> entries = createEntities(baseDN, entryClass, searchResult);\n+         result.setEntries(entries);\n+\n+         return result;\n+     }\n+\n+     protected <T> PagedResult<JsonObject> findEntriesImpl(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope,\n+             String[] ldapReturnAttributes, String sortBy, SortOrder sortOrder, BatchOperation<T> batchOperation, boolean returnCount, int start,\n+             int count, int chunkSize) {\n+         // Check entry class\n+         checkEntryClass(entryClass, false);\n+         String[] objectClasses = getTypeObjectClasses(entryClass);\n+         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n+         String[] currentLdapReturnAttributes = ldapReturnAttributes;\n+         if (ArrayHelper.isEmpty(currentLdapReturnAttributes)) {\n+             currentLdapReturnAttributes = getLdapAttributes(null, propertiesAnnotations, false);\n+         }\n+\n+         // Find entries\n+         Filter searchFilter;\n+         if (objectClasses.length > 0) {\n+             searchFilter = addObjectClassFilter(filter, objectClasses);\n+         } else {\n+             searchFilter = filter;\n+         }\n+\n+         // Prepare default sort\n+         Sort[] defaultSort = getDefaultSort(entryClass);\n+\n+         if (StringHelper.isNotEmpty(sortBy)) {\n+             Sort requestedSort = buildSort(sortBy, sortOrder);\n+\n+             if (ArrayHelper.isEmpty(defaultSort)) {\n+                 defaultSort = new Sort[] { requestedSort };\n+             } else {\n+                 defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n+             }\n+         }\n+\n+         PagedResult<JsonObject> searchResult = null;\n+         try {\n+             CouchbaseBatchOperationWraper<T> batchOperationWraper = null;\n+             if (batchOperation != null) {\n+                 batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass, propertiesAnnotations);\n+             }\n+             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n+             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, currentLdapReturnAttributes,\n+                     defaultSort, batchOperationWraper, returnCount, start, count, chunkSize);\n+\n+             if (searchResult == null) {\n+                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n+             }\n+\n+             return searchResult;\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+         }\n+     }\n+\n+     @Override\n+     protected boolean contains(String baseDN, Filter filter, String[] objectClasses, String[] ldapReturnAttributes) {\n+         if (StringHelper.isEmptyString(baseDN)) {\n+             throw new MappingException(\"Base DN to check contain entries is null\");\n+         }\n+\n+         // Create filter\n+         Filter searchFilter;\n+         if (objectClasses.length > 0) {\n+             searchFilter = addObjectClassFilter(filter, objectClasses);\n+         } else {\n+             searchFilter = filter;\n+         }\n+\n+         PagedResult<JsonObject> searchResult = null;\n+         try {\n+             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n+             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, ldapReturnAttributes, null,\n+                     null, false, 1, 1, 0);\n+             if (searchResult == null) {\n+                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n+             }\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+         }\n+\n+         return (searchResult != null) && (searchResult.getEntriesCount() > 0);\n+     }\n+\n+     protected <T> List<T> createEntities(String baseDN, Class<T> entryClass, PagedResult<JsonObject> searchResult) {\n+         ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n+         List<PropertyAnnotation> propertiesAnnotations = getEntryPropertyAnnotations(entryClass);\n+         List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n+                 searchResult.getEntries().toArray(new JsonObject[searchResult.getEntriesCount()]));\n+\n+         return entries;\n+     }\n+\n+     protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n+             JsonObject... searchResultEntries) {\n+         List<T> result = new ArrayList<T>(searchResultEntries.length);\n+         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n+\n+         int count = 0;\n+         for (int i = 0; i < searchResultEntries.length; i++) {\n+             count++;\n+             JsonObject entry = searchResultEntries[i];\n+             // String key = entry.getString(CouchbaseOperationService.META_DOC_ID);\n+             String dn = entry.getString(CouchbaseOperationService.DN);\n+             entriesAttributes.put(dn, getAttributeDataList(entry));\n+\n+             // Remove reference to allow java clean up object\n+             searchResultEntries[i] = null;\n+\n+             // Allow java to clean up temporary objects\n+             if (count >= 100) {\n+                 List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n+                 result.addAll(currentResult);\n+\n+                 entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n+                 count = 0;\n+             }\n+         }\n+\n+         List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n+         result.addAll(currentResult);\n+\n+         return result;\n+     }\n+\n+     private List<AttributeData> getAttributeDataList(JsonObject entry) {\n+         if (entry == null) {\n+             return null;\n+         }\n+\n+         List<AttributeData> result = new ArrayList<AttributeData>();\n+         for (String attributeName : entry.getNames()) {\n+             Object attributeObject = entry.get(attributeName);\n+\n+             String[] attributeValueStrings;\n+             if (attributeObject == null) {\n+                 attributeValueStrings = NO_STRINGS;\n+             }\n+             if (attributeObject instanceof JsonArray) {\n+                 attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n+             } else {\n+                 attributeValueStrings = new String[] { attributeObject.toString() };\n+             }\n+\n+             AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n+             result.add(tmpAttribute);\n+         }\n+\n+         return result;\n+     }\n+\n+     @Override\n+     public boolean authenticate(String baseDN, String userName, String password) {\n+         try {\n+             Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n+             PagedResult<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n+                     SearchScope.SUB, null, null, null, false, 0, 1, 1);\n+             if ((searchResult == null) || (searchResult.getEntriesCount() != 1)) {\n+                 return false;\n+             }\n+\n+             String bindDn = searchResult.getEntries().get(0).getString(CouchbaseOperationService.DN);\n+\n+             return authenticate(bindDn, password);\n+         } catch (SearchException ex) {\n+             throw new AuthenticationException(String.format(\"Failed to find user DN: %s\", userName), ex);\n+         } catch (Exception ex) {\n+             throw new AuthenticationException(String.format(\"Failed to authenticate user: %s\", userName), ex);\n+         }\n+     }\n+\n+     @Override\n+     public boolean authenticate(String bindDn, String password) {\n+         try {\n+             return operationService.authenticate(toCouchbaseKey(bindDn).getKey(), password);\n+         } catch (Exception ex) {\n+             throw new AuthenticationException(String.format(\"Failed to authenticate DN: %s\", bindDn), ex);\n+         }\n+     }\n+\n+     @Override\n+     public <T> int countEntries(String baseDN, Class<T> entryClass, Filter filter) {\n+         return countEntries(baseDN, entryClass, filter, SearchScope.SUB);\n+     }\n+\n+     @Override\n+     public <T> int countEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope) {\n+         if (StringHelper.isEmptyString(baseDN)) {\n+             throw new MappingException(\"Base DN to find entries is null\");\n+         }\n+\n+         // Check entry class\n+         checkEntryClass(entryClass, false);\n+         String[] objectClasses = getTypeObjectClasses(entryClass);\n+         String[] ldapReturnAttributes = new String[] { CouchbaseOperationService.DN }; // Don't load attributes\n+\n+         // Find entries\n+         Filter searchFilter;\n+         if (objectClasses.length > 0) {\n+             searchFilter = addObjectClassFilter(filter, objectClasses);\n+         } else {\n+             searchFilter = filter;\n+         }\n+\n+         CountBatchOperation<T> batchOperation = new CountBatchOperation<T>();\n+\n+         try {\n+             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n+             operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), scope, ldapReturnAttributes, null,\n+                     batchOperationWraper, false, 0, 0, 100);\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(\n+                     String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+         }\n+\n+         return batchOperation.getCountEntries();\n+     }\n+\n+     private MutationSpec createModification(final Mutation type, final String attributeName, final String... attributeValues) {\n+         String realAttributeName = attributeName;\n+\n+         String[] realValues = attributeValues;\n+         if (StringHelper.equals(CouchbaseOperationService.USER_PASSWORD, realAttributeName)) {\n+             realValues = operationService.createStoragePassword(attributeValues);\n+         }\n+\n+         if (realValues.length == 1) {\n+             return new MutationSpec(type, realAttributeName, realValues[0]);\n+         }\n+\n+         return new MutationSpec(type, realAttributeName, realValues);\n+     }\n+\n+     protected Sort buildSort(String sortBy, SortOrder sortOrder) {\n+         Sort requestedSort = null;\n+         if (SortOrder.DESCENDING == sortOrder) {\n+             requestedSort = Sort.desc(Expression.path(sortBy));\n+         } else if (SortOrder.ASCENDING == sortOrder) {\n+             requestedSort = Sort.asc(Expression.path(sortBy));\n+         } else {\n+             requestedSort = Sort.def(Expression.path(sortBy));\n+         }\n+         return requestedSort;\n+     }\n+\n+     protected <T> Sort[] getDefaultSort(Class<T> entryClass) {\n+         String[] sortByProperties = getEntrySortBy(entryClass);\n+\n+         if (ArrayHelper.isEmpty(sortByProperties)) {\n+             return null;\n+         }\n+\n+         Sort[] sort = new Sort[sortByProperties.length];\n+         for (int i = 0; i < sortByProperties.length; i++) {\n+             sort[i] = Sort.def(Expression.path(sortByProperties[i]));\n+         }\n+\n+         return sort;\n+     }\n+\n+     @Override\n+     public String[] exportEntry(String dn) {\n+         try {\n+             // Load entry\n+             ParsedKey keyWithInum = toCouchbaseKey(dn);\n+             JsonObject entry = operationService.lookup(keyWithInum.getKey());\n+             Map<String, Object> map = entry.toMap();\n+             List<String> result = new ArrayList<String>(map.size());\n+             for (Entry<String, Object> attr : map.entrySet()) {\n+                 result.add(attr.getKey() + \": \" + attr.getValue());\n+             }\n+\n+             return result.toArray(new String[result.size()]);\n+         } catch (Exception ex) {\n+             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n+         }\n+     }\n+\n+     private Expression toCouchbaseFilter(Filter genericFilter) throws SearchException {\n+         return FILTER_CONVERTER.convertToLdapFilter(genericFilter);\n+     }\n+\n+     private ParsedKey toCouchbaseKey(String dn) {\n+         return KEY_CONVERTER.convertToKey(dn);\n+     }\n+\n+     private static final class CountBatchOperation<T> extends DefaultBatchOperation<T> {\n+\n+         private int countEntries = 0;\n+\n+         @Override\n+         public void performAction(List<T> entries) {\n+         }\n+\n+         @Override\n+         public boolean collectSearchResult(int size) {\n+             countEntries += size;\n+             return false;\n+         }\n+\n+         public int getCountEntries() {\n+             return countEntries;\n+         }\n+     }\n+\n+     @Override\n+     public String encodeTime(Date date) {\n+         if (date == null) {\n+             return null;\n+         }\n+\n+         return jsonDateFormat.format(date);\n+     }\n+\n+     @Override\n+     public Date decodeTime(String date) {\n+         if (StringHelper.isEmpty(date)) {\n+             return null;\n+         }\n+\n+         Date decodedDate;\n+         try {\n+             decodedDate = jsonDateFormat.parse(date);\n+         } catch (ParseException ex) {\n+             LOG.error(\"Failed to decode generalized time '{}'\", date, ex);\n+\n+             return null;\n+         }\n+\n+         return decodedDate;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 534
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/126/CouchbaseEntryManager.java\nindex 8d3034546c..75a1504f38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/126/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/126/CouchbaseEntryManager.java\n@@ -117,7 +117,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n             AttributeData objectClassAttributeData = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase());\n             if (objectClassAttributeData == null) {\n-                throw new UnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n+            throw newUnsupportedOperationException(String.format(\"There is no attribute with objectClasses list! Entry is invalid: '%s'\", entry));\n             }\n \n             String[] objectClassesFromDb = objectClassAttributeData.getValues();\n",
            "diff_size": 1
        }
    ]
}