{
    "error_id": "104",
    "information": {
        "errors": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n                Collections.<String, List<String>>emptyMap(), false);\n        \n        return url;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/104/FacesService.java\nindex dd5c4274df..a936efe68d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/104/FacesService.java\n@@ -49,8 +49,7 @@ public class FacesService {\n         }\n         String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n                 Collections.<String, List<String>>emptyMap(), false);\n-        \n-        return url;\n+                return url;\n     }\n \n     public void redirect(String viewId, Map<String, Object> parameters) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/104/FacesService.java\nindex dd5c4274df..fd36cc8ee2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/104/FacesService.java\n@@ -48,8 +48,8 @@ public class FacesService {\n             throw new RedirectException(\"Cannot redirect to a null viewId\");\n         }\n         String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n-                Collections.<String, List<String>>emptyMap(), false);\n-        \n+            Collections.<String, List<String>>emptyMap(), false);\n+\n         return url;\n     }\n \n@@ -59,7 +59,7 @@ public class FacesService {\n         }\n \n         String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n-                Collections.<String, List<String>>emptyMap(), false);\n+            Collections.<String, List<String>>emptyMap(), false);\n \n         if (parameters != null) {\n             url = encodeParameters(url, parameters);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/104/FacesService.java\nindex dd5c4274df..51671f5f0d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/104/FacesService.java\n@@ -148,4 +148,4 @@ public class FacesService {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/104/FacesService.java\nindex dd5c4274df..a936efe68d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/104/FacesService.java\n@@ -49,8 +49,7 @@ public class FacesService {\n         }\n         String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n                 Collections.<String, List<String>>emptyMap(), false);\n-        \n-        return url;\n+                return url;\n     }\n \n     public void redirect(String viewId, Map<String, Object> parameters) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/104/FacesService.java\nindex dd5c4274df..d5bee98b9e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/104/FacesService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/104/FacesService.java\n@@ -48,104 +48,103 @@ public class FacesService {\n             throw new RedirectException(\"Cannot redirect to a null viewId\");\n         }\n         String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n-                Collections.<String, List<String>>emptyMap(), false);\n-        \n-        return url;\n-    }\n+                Collections.<String, List<String>>emptyMap(), false); returnurl;\n+            }\n \n-    public void redirect(String viewId, Map<String, Object> parameters) {\n-        if (viewId == null) {\n-            throw new RedirectException(\"cannot redirect to a null viewId\");\n-        }\n+            public void redirect(String viewId, Map<String, Object> parameters) {\n+                if (viewId == null) {\n+                    throw new RedirectException(\"cannot redirect to a null viewId\");\n+                }\n \n-        String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n-                Collections.<String, List<String>>emptyMap(), false);\n+                String url = facesContext.getApplication().getViewHandler().getRedirectURL(facesContext, viewId,\n+                        Collections.<String, List<String>>emptyMap(), false);\n \n-        if (parameters != null) {\n-            url = encodeParameters(url, parameters);\n-        }\n+                if (parameters != null) {\n+                    url = encodeParameters(url, parameters);\n+                }\n \n-        try {\n-            externalContext.redirect(externalContext.encodeActionURL(url));\n-        } catch (IOException ioe) {\n-            throw new RedirectException(ioe);\n-        } catch (IllegalStateException ise) {\n-            throw new RedirectException(ise.getMessage());\n-        }\n-    }\n+                try {\n+                    externalContext.redirect(externalContext.encodeActionURL(url));\n+                } catch (IOException ioe) {\n+                    throw new RedirectException(ioe);\n+                } catch (IllegalStateException ise) {\n+                    throw new RedirectException(ise.getMessage());\n+                }\n+            }\n \n-    public void redirectToExternalURL(String url) {\n-        try {\n-            externalContext.redirect(url);\n-        } catch (IOException e) {\n-            throw new RedirectException(e);\n-        }\n-    }\n+            public void redirectToExternalURL(String url) {\n+                try {\n+                    externalContext.redirect(url);\n+                } catch (IOException e) {\n+                    throw new RedirectException(e);\n+                }\n+            }\n \n-    public String encodeParameters(String url, Map<String, Object> parameters) {\n-        if (parameters.isEmpty()) {\n-            return url;\n-        }\n+            public String encodeParameters(String url, Map<String, Object> parameters) {\n+                if (parameters.isEmpty()) {\n+                    return url;\n+                }\n \n-        StringBuilder builder = new StringBuilder(url);\n-        for (Map.Entry<String, Object> param : parameters.entrySet()) {\n-            String parameterName = param.getKey();\n-            if (!containsParameter(url, parameterName)) {\n-                Object parameterValue = param.getValue();\n-                if (parameterValue instanceof Iterable) {\n-                    for (Object value : (Iterable<?>) parameterValue) {\n-                        builder.append('&').append(parameterName).append('=');\n-                        if (value != null) {\n-                            builder.append(encode(value));\n+                StringBuilder builder = new StringBuilder(url);\n+                for (Map.Entry<String, Object> param : parameters.entrySet()) {\n+                    String parameterName = param.getKey();\n+                    if (!containsParameter(url, parameterName)) {\n+                        Object parameterValue = param.getValue();\n+                        if (parameterValue instanceof Iterable) {\n+                            for (Object value : (Iterable<?>) parameterValue) {\n+                                builder.append('&').append(parameterName).append('=');\n+                                if (value != null) {\n+                                    builder.append(encode(value));\n+                                }\n+                            }\n+                        } else {\n+                            builder.append('&').append(parameterName).append('=');\n+                            if (parameterValue != null) {\n+                                builder.append(encode(parameterValue));\n+                            }\n                         }\n                     }\n-                } else {\n-                    builder.append('&').append(parameterName).append('=');\n-                    if (parameterValue != null) {\n-                        builder.append(encode(parameterValue));\n-                    }\n                 }\n+\n+                if (url.indexOf('?') < 0) {\n+                    builder.setCharAt(url.length(), '?');\n+                }\n+                return builder.toString();\n             }\n-        }\n \n-        if (url.indexOf('?') < 0) {\n-            builder.setCharAt(url.length(), '?');\n-        }\n-        return builder.toString();\n-    }\n+            public void renderView(String viewId) {\n+                final FacesContext fc = FacesContext.getCurrentInstance();\n+                final ViewHandler viewHandler = fc.getApplication().getViewHandler();\n \n-    public void renderView(String viewId) {\n-        final FacesContext fc = FacesContext.getCurrentInstance();\n-        final ViewHandler viewHandler = fc.getApplication().getViewHandler();\n+                fc.setViewRoot(viewHandler.createView(fc, viewId));\n+                fc.getPartialViewContext().setRenderAll(true);\n+                fc.renderResponse();\n+            }\n \n-        fc.setViewRoot(viewHandler.createView(fc, viewId));\n-        fc.getPartialViewContext().setRenderAll(true);\n-        fc.renderResponse();\n-    }\n+            public void navigateToView(String fromAction, String outcome, Map<String, Object> parameters) {\n+                final FacesContext fc = FacesContext.getCurrentInstance();\n \n-    public void navigateToView(String fromAction, String outcome, Map<String, Object> parameters) {\n-        final FacesContext fc = FacesContext.getCurrentInstance();\n+                Map<String, Object> requestMap = fc.getExternalContext().getRequestMap();\n+                NavigationHandler nav = fc.getApplication().getNavigationHandler();\n \n-        Map<String, Object> requestMap = fc.getExternalContext().getRequestMap();\n-        NavigationHandler nav = fc.getApplication().getNavigationHandler();\n+                if (parameters != null) {\n+                    requestMap.putAll(parameters);\n+                }\n+                nav.handleNavigation(fc, fromAction, outcome);\n+                fc.renderResponse();\n+            }\n \n-        if (parameters != null) {\n-            requestMap.putAll(parameters);\n-        }\n-        nav.handleNavigation(fc, fromAction, outcome);\n-        fc.renderResponse();\n-    }\n+            private boolean containsParameter(String url, String parameterName) {\n+                return url.indexOf('?' + parameterName + '=') > 0 || url.indexOf('&' + parameterName + '=') > 0;\n+            }\n \n-    private boolean containsParameter(String url, String parameterName) {\n-        return url.indexOf('?' + parameterName + '=') > 0 || url.indexOf('&' + parameterName + '=') > 0;\n-    }\n+            private String encode(Object value) {\n+                try {\n+                    return URLEncoder.encode(String.valueOf(value), \"UTF-8\");\n+                } catch (UnsupportedEncodingException iee) {\n+                    throw new RuntimeException(iee);\n+                }\n+            }\n \n-    private String encode(Object value) {\n-        try {\n-            return URLEncoder.encode(String.valueOf(value), \"UTF-8\");\n-        } catch (UnsupportedEncodingException iee) {\n-            throw new RuntimeException(iee);\n         }\n-    }\n-\n-}\n+        \n\\ No newline at end of file\n",
            "diff_size": 102
        }
    ]
}