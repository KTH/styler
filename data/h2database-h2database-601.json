{
    "error_id": "601",
    "information": {
        "errors": [
            {
                "line": "64",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        this.isDefault = isDefault;\n        isSystem =\n                (name == null) // firebird\n                        || \"INFORMATION_SCHEMA\".equals(name)\n                        || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n                        || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/601/DbSchema.java\nindex 2fa1400907..00f9edbbd6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/601/DbSchema.java\n@@ -60,86 +60,85 @@ public class DbSchema {\n         this.name = name;\n         this.quotedName = contents.quoteIdentifier(name);\n         this.isDefault = isDefault;\n-        isSystem =\n-                (name == null) // firebird\n-                        || \"INFORMATION_SCHEMA\".equals(name)\n-                        || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n-                        || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n-                        || (contents.isDerby() && name.startsWith(\"SYS\"));\n-    }\n+        isSystem = (name == null) // firebird\n+                || \"INFORMATION_SCHEMA\".equals(name)\n+                || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n+                || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n+                || (contents.isDerby() && name.startsWith(\"SYS\"));\n+}\n \n-    /**\n+/**\n      * @return The database content container.\n      */\n-    public DbContents getContents() {\n-        return contents;\n-    }\n+public DbContents getContents() {\n+    return contents;\n+}\n \n-    /**\n+/**\n      * @return The table list.\n      */\n-    public DbTableOrView[] getTables() {\n-        return tables;\n-    }\n+public DbTableOrView[] getTables() {\n+    return tables;\n+}\n \n-    /**\n+/**\n      * @return The procedure list.\n      */\n-    public DbProcedure[] getProcedures() {\n-        return procedures;\n-    }\n+public DbProcedure[] getProcedures() {\n+    return procedures;\n+}\n \n-    /**\n+/**\n      * Read all tables for this schema from the database meta data.\n      *\n      * @param meta the database meta data\n      * @param tableTypes the table types to read\n      */\n-    public void readTables(DatabaseMetaData meta, String[] tableTypes)\n-            throws SQLException {\n-        ResultSet rs = meta.getTables(null, name, null, tableTypes);\n-        ArrayList<DbTableOrView> list = New.arrayList();\n-        while (rs.next()) {\n-            DbTableOrView table = new DbTableOrView(this, rs);\n-            if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n-                continue;\n-            }\n-            list.add(table);\n+public void readTables(DatabaseMetaData meta, String[] tableTypes)\n+        throws SQLException {\n+    ResultSet rs = meta.getTables(null, name, null, tableTypes);\n+    ArrayList<DbTableOrView> list = New.arrayList();\n+    while (rs.next()) {\n+        DbTableOrView table = new DbTableOrView(this, rs);\n+        if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n+            continue;\n         }\n-        rs.close();\n-        tables = list.toArray(new DbTableOrView[0]);\n-        if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n-            for (DbTableOrView tab : tables) {\n-                try {\n-                    tab.readColumns(meta);\n-                } catch (SQLException e) {\n-                    // MySQL:\n-                    // View '...' references invalid table(s) or column(s)\n-                    // or function(s) or definer/invoker of view\n-                    // lack rights to use them HY000/1356\n-                    // ignore\n-                }\n+        list.add(table);\n+    }\n+    rs.close();\n+    tables = list.toArray(new DbTableOrView[0]);\n+    if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n+        for (DbTableOrView tab : tables) {\n+            try {\n+                tab.readColumns(meta);\n+            } catch (SQLException e) {\n+                // MySQL:\n+                // View '...' references invalid table(s) or column(s)\n+                // or function(s) or definer/invoker of view\n+                // lack rights to use them HY000/1356\n+                // ignore\n             }\n         }\n     }\n+}\n \n-    /**\n+/**\n      * Read all procedures in the dataBase.\n      * @param meta the database meta data\n      * @throws SQLException Error while fetching procedures\n      */\n-    public void readProcedures(DatabaseMetaData meta) throws SQLException {\n-        ResultSet rs = meta.getProcedures(null, name, null);\n-        ArrayList<DbProcedure> list = New.arrayList();\n-        while (rs.next()) {\n-            list.add(new DbProcedure(this, rs));\n-        }\n-        rs.close();\n-        procedures = list.toArray(new DbProcedure[0]);\n-        if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n-            for (DbProcedure procedure : procedures) {\n-                procedure.readParameters(meta);\n-            }\n+public void readProcedures(DatabaseMetaData meta) throws SQLException {\n+    ResultSet rs = meta.getProcedures(null, name, null);\n+    ArrayList<DbProcedure> list = New.arrayList();\n+    while (rs.next()) {\n+        list.add(new DbProcedure(this, rs));\n+    }\n+    rs.close();\n+    procedures = list.toArray(new DbProcedure[0]);\n+    if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n+        for (DbProcedure procedure : procedures) {\n+            procedure.readParameters(meta);\n         }\n     }\n }\n+}\n",
            "diff_size": 59
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/601/DbSchema.java\nindex 2fa1400907..420625acbf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/601/DbSchema.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.bnf.context;\n \n import java.sql.DatabaseMetaData;\n@@ -20,126 +21,129 @@ import org.h2.util.StringUtils;\n  */\n public class DbSchema {\n \n-    /**\n-     * The schema name.\n-     */\n-    public final String name;\n-\n-    /**\n-     * True if this is the default schema for this database.\n-     */\n-    public final boolean isDefault;\n-\n-    /**\n-     * True if this is a system schema (for example the INFORMATION_SCHEMA).\n-     */\n-    public final boolean isSystem;\n-\n-    /**\n-     * The quoted schema name.\n-     */\n-    public final String quotedName;\n-\n-    /**\n-     * The database content container.\n-     */\n-    private final DbContents contents;\n-\n-    /**\n-     * The table list.\n-     */\n-    private DbTableOrView[] tables;\n-\n-    /**\n-     * The procedures list.\n-     */\n-    private DbProcedure[] procedures;\n-\n-    DbSchema(DbContents contents, String name, boolean isDefault) {\n-        this.contents = contents;\n-        this.name = name;\n-        this.quotedName = contents.quoteIdentifier(name);\n-        this.isDefault = isDefault;\n-        isSystem =\n-                (name == null) // firebird\n-                        || \"INFORMATION_SCHEMA\".equals(name)\n-                        || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n-                        || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n-                        || (contents.isDerby() && name.startsWith(\"SYS\"));\n-    }\n-\n-    /**\n-     * @return The database content container.\n-     */\n-    public DbContents getContents() {\n-        return contents;\n-    }\n-\n-    /**\n-     * @return The table list.\n-     */\n-    public DbTableOrView[] getTables() {\n-        return tables;\n-    }\n-\n-    /**\n-     * @return The procedure list.\n-     */\n-    public DbProcedure[] getProcedures() {\n-        return procedures;\n+  /**\n+   * The schema name.\n+   */\n+  public final String name;\n+\n+  /**\n+   * True if this is the default schema for this database.\n+   */\n+  public final boolean isDefault;\n+\n+  /**\n+   * True if this is a system schema (for example the INFORMATION_SCHEMA).\n+   */\n+  public final boolean isSystem;\n+\n+  /**\n+   * The quoted schema name.\n+   */\n+  public final String quotedName;\n+\n+  /**\n+   * The database content container.\n+   */\n+  private final DbContents contents;\n+\n+  /**\n+   * The table list.\n+   */\n+  private DbTableOrView[] tables;\n+\n+  /**\n+   * The procedures list.\n+   */\n+  private DbProcedure[] procedures;\n+\n+  DbSchema(DbContents contents, String name, boolean isDefault) {\n+    this.contents = contents;\n+    this.name = name;\n+    this.quotedName = contents.quoteIdentifier(name);\n+    this.isDefault = isDefault;\n+    isSystem =\n+        (name == null) // firebird\n+            || \"INFORMATION_SCHEMA\".equals(name)\n+            || (!contents.isH2() &&\n+            StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n+            || (contents.isPostgreSQL() &&\n+            StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n+            || (contents.isDerby() && name.startsWith(\"SYS\"));\n+  }\n+\n+  /**\n+   * @return The database content container.\n+   */\n+  public DbContents getContents() {\n+    return contents;\n+  }\n+\n+  /**\n+   * @return The table list.\n+   */\n+  public DbTableOrView[] getTables() {\n+    return tables;\n+  }\n+\n+  /**\n+   * @return The procedure list.\n+   */\n+  public DbProcedure[] getProcedures() {\n+    return procedures;\n+  }\n+\n+  /**\n+   * Read all tables for this schema from the database meta data.\n+   *\n+   * @param meta       the database meta data\n+   * @param tableTypes the table types to read\n+   */\n+  public void readTables(DatabaseMetaData meta, String[] tableTypes)\n+      throws SQLException {\n+    ResultSet rs = meta.getTables(null, name, null, tableTypes);\n+    ArrayList<DbTableOrView> list = New.arrayList();\n+    while (rs.next()) {\n+      DbTableOrView table = new DbTableOrView(this, rs);\n+      if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n+        continue;\n+      }\n+      list.add(table);\n     }\n-\n-    /**\n-     * Read all tables for this schema from the database meta data.\n-     *\n-     * @param meta the database meta data\n-     * @param tableTypes the table types to read\n-     */\n-    public void readTables(DatabaseMetaData meta, String[] tableTypes)\n-            throws SQLException {\n-        ResultSet rs = meta.getTables(null, name, null, tableTypes);\n-        ArrayList<DbTableOrView> list = New.arrayList();\n-        while (rs.next()) {\n-            DbTableOrView table = new DbTableOrView(this, rs);\n-            if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n-                continue;\n-            }\n-            list.add(table);\n-        }\n-        rs.close();\n-        tables = list.toArray(new DbTableOrView[0]);\n-        if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n-            for (DbTableOrView tab : tables) {\n-                try {\n-                    tab.readColumns(meta);\n-                } catch (SQLException e) {\n-                    // MySQL:\n-                    // View '...' references invalid table(s) or column(s)\n-                    // or function(s) or definer/invoker of view\n-                    // lack rights to use them HY000/1356\n-                    // ignore\n-                }\n-            }\n+    rs.close();\n+    tables = list.toArray(new DbTableOrView[0]);\n+    if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n+      for (DbTableOrView tab : tables) {\n+        try {\n+          tab.readColumns(meta);\n+        } catch (SQLException e) {\n+          // MySQL:\n+          // View '...' references invalid table(s) or column(s)\n+          // or function(s) or definer/invoker of view\n+          // lack rights to use them HY000/1356\n+          // ignore\n         }\n+      }\n     }\n-\n-    /**\n-     * Read all procedures in the dataBase.\n-     * @param meta the database meta data\n-     * @throws SQLException Error while fetching procedures\n-     */\n-    public void readProcedures(DatabaseMetaData meta) throws SQLException {\n-        ResultSet rs = meta.getProcedures(null, name, null);\n-        ArrayList<DbProcedure> list = New.arrayList();\n-        while (rs.next()) {\n-            list.add(new DbProcedure(this, rs));\n-        }\n-        rs.close();\n-        procedures = list.toArray(new DbProcedure[0]);\n-        if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n-            for (DbProcedure procedure : procedures) {\n-                procedure.readParameters(meta);\n-            }\n-        }\n+  }\n+\n+  /**\n+   * Read all procedures in the dataBase.\n+   *\n+   * @param meta the database meta data\n+   * @throws SQLException Error while fetching procedures\n+   */\n+  public void readProcedures(DatabaseMetaData meta) throws SQLException {\n+    ResultSet rs = meta.getProcedures(null, name, null);\n+    ArrayList<DbProcedure> list = New.arrayList();\n+    while (rs.next()) {\n+      list.add(new DbProcedure(this, rs));\n+    }\n+    rs.close();\n+    procedures = list.toArray(new DbProcedure[0]);\n+    if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n+      for (DbProcedure procedure : procedures) {\n+        procedure.readParameters(meta);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 142
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/601/DbSchema.java\nindex 2fa1400907..274797b94e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/601/DbSchema.java\n@@ -60,8 +60,7 @@ public class DbSchema {\n         this.name = name;\n         this.quotedName = contents.quoteIdentifier(name);\n         this.isDefault = isDefault;\n-        isSystem =\n-                (name == null) // firebird\n+        isSystem = (name == null) // firebird\n                         || \"INFORMATION_SCHEMA\".equals(name)\n                         || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n                         || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n@@ -142,4 +141,4 @@ public class DbSchema {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/601/DbSchema.java\nindex 2fa1400907..5548952368 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/601/DbSchema.java\n@@ -61,85 +61,84 @@ public class DbSchema {\n         this.quotedName = contents.quoteIdentifier(name);\n         this.isDefault = isDefault;\n         isSystem =\n-                (name == null) // firebird\n-                        || \"INFORMATION_SCHEMA\".equals(name)\n-                        || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n-                        || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n-                        || (contents.isDerby() && name.startsWith(\"SYS\"));\n-    }\n+        ( name == null)// firebird|| \"INFORMATION_SCHEMA\".equals(name)\n+                || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n+                || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n+                || (contents.isDerby() && name.startsWith(\"SYS\"));\n+}\n \n-    /**\n+/**\n      * @return The database content container.\n      */\n-    public DbContents getContents() {\n-        return contents;\n-    }\n+public DbContents getContents() {\n+    return contents;\n+}\n \n-    /**\n+/**\n      * @return The table list.\n      */\n-    public DbTableOrView[] getTables() {\n-        return tables;\n-    }\n+public DbTableOrView[] getTables() {\n+    return tables;\n+}\n \n-    /**\n+/**\n      * @return The procedure list.\n      */\n-    public DbProcedure[] getProcedures() {\n-        return procedures;\n-    }\n+public DbProcedure[] getProcedures() {\n+    return procedures;\n+}\n \n-    /**\n+/**\n      * Read all tables for this schema from the database meta data.\n      *\n      * @param meta the database meta data\n      * @param tableTypes the table types to read\n      */\n-    public void readTables(DatabaseMetaData meta, String[] tableTypes)\n-            throws SQLException {\n-        ResultSet rs = meta.getTables(null, name, null, tableTypes);\n-        ArrayList<DbTableOrView> list = New.arrayList();\n-        while (rs.next()) {\n-            DbTableOrView table = new DbTableOrView(this, rs);\n-            if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n-                continue;\n-            }\n-            list.add(table);\n+public void readTables(DatabaseMetaData meta, String[] tableTypes)\n+        throws SQLException {\n+    ResultSet rs = meta.getTables(null, name, null, tableTypes);\n+    ArrayList<DbTableOrView> list = New.arrayList();\n+    while (rs.next()) {\n+        DbTableOrView table = new DbTableOrView(this, rs);\n+        if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n+            continue;\n         }\n-        rs.close();\n-        tables = list.toArray(new DbTableOrView[0]);\n-        if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n-            for (DbTableOrView tab : tables) {\n-                try {\n-                    tab.readColumns(meta);\n-                } catch (SQLException e) {\n-                    // MySQL:\n-                    // View '...' references invalid table(s) or column(s)\n-                    // or function(s) or definer/invoker of view\n-                    // lack rights to use them HY000/1356\n-                    // ignore\n-                }\n+        list.add(table);\n+    }\n+    rs.close();\n+    tables = list.toArray(new DbTableOrView[0]);\n+    if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n+        for (DbTableOrView tab : tables) {\n+            try {\n+                tab.readColumns(meta);\n+            } catch (SQLException e) {\n+                // MySQL:\n+                // View '...' references invalid table(s) or column(s)\n+                // or function(s) or definer/invoker of view\n+                // lack rights to use them HY000/1356\n+                // ignore\n             }\n         }\n     }\n+}\n \n-    /**\n+/**\n      * Read all procedures in the dataBase.\n      * @param meta the database meta data\n      * @throws SQLException Error while fetching procedures\n      */\n-    public void readProcedures(DatabaseMetaData meta) throws SQLException {\n-        ResultSet rs = meta.getProcedures(null, name, null);\n-        ArrayList<DbProcedure> list = New.arrayList();\n-        while (rs.next()) {\n-            list.add(new DbProcedure(this, rs));\n-        }\n-        rs.close();\n-        procedures = list.toArray(new DbProcedure[0]);\n-        if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n-            for (DbProcedure procedure : procedures) {\n-                procedure.readParameters(meta);\n-            }\n+public void readProcedures(DatabaseMetaData meta) throws SQLException {\n+    ResultSet rs = meta.getProcedures(null, name, null);\n+    ArrayList<DbProcedure> list = New.arrayList();\n+    while (rs.next()) {\n+        list.add(new DbProcedure(this, rs));\n+    }\n+    rs.close();\n+    procedures = list.toArray(new DbProcedure[0]);\n+    if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n+        for (DbProcedure procedure : procedures) {\n+            procedure.readParameters(meta);\n         }\n     }\n }\n+}\n",
            "diff_size": 58
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/601/DbSchema.java\nindex 2fa1400907..00f9edbbd6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/601/DbSchema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/601/DbSchema.java\n@@ -60,86 +60,85 @@ public class DbSchema {\n         this.name = name;\n         this.quotedName = contents.quoteIdentifier(name);\n         this.isDefault = isDefault;\n-        isSystem =\n-                (name == null) // firebird\n-                        || \"INFORMATION_SCHEMA\".equals(name)\n-                        || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n-                        || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n-                        || (contents.isDerby() && name.startsWith(\"SYS\"));\n-    }\n+        isSystem = (name == null) // firebird\n+                || \"INFORMATION_SCHEMA\".equals(name)\n+                || (!contents.isH2() && StringUtils.toUpperEnglish(name).startsWith(\"INFO\"))\n+                || (contents.isPostgreSQL() && StringUtils.toUpperEnglish(name).startsWith(\"PG_\"))\n+                || (contents.isDerby() && name.startsWith(\"SYS\"));\n+}\n \n-    /**\n+/**\n      * @return The database content container.\n      */\n-    public DbContents getContents() {\n-        return contents;\n-    }\n+public DbContents getContents() {\n+    return contents;\n+}\n \n-    /**\n+/**\n      * @return The table list.\n      */\n-    public DbTableOrView[] getTables() {\n-        return tables;\n-    }\n+public DbTableOrView[] getTables() {\n+    return tables;\n+}\n \n-    /**\n+/**\n      * @return The procedure list.\n      */\n-    public DbProcedure[] getProcedures() {\n-        return procedures;\n-    }\n+public DbProcedure[] getProcedures() {\n+    return procedures;\n+}\n \n-    /**\n+/**\n      * Read all tables for this schema from the database meta data.\n      *\n      * @param meta the database meta data\n      * @param tableTypes the table types to read\n      */\n-    public void readTables(DatabaseMetaData meta, String[] tableTypes)\n-            throws SQLException {\n-        ResultSet rs = meta.getTables(null, name, null, tableTypes);\n-        ArrayList<DbTableOrView> list = New.arrayList();\n-        while (rs.next()) {\n-            DbTableOrView table = new DbTableOrView(this, rs);\n-            if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n-                continue;\n-            }\n-            list.add(table);\n+public void readTables(DatabaseMetaData meta, String[] tableTypes)\n+        throws SQLException {\n+    ResultSet rs = meta.getTables(null, name, null, tableTypes);\n+    ArrayList<DbTableOrView> list = New.arrayList();\n+    while (rs.next()) {\n+        DbTableOrView table = new DbTableOrView(this, rs);\n+        if (contents.isOracle() && table.getName().indexOf('$') > 0) {\n+            continue;\n         }\n-        rs.close();\n-        tables = list.toArray(new DbTableOrView[0]);\n-        if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n-            for (DbTableOrView tab : tables) {\n-                try {\n-                    tab.readColumns(meta);\n-                } catch (SQLException e) {\n-                    // MySQL:\n-                    // View '...' references invalid table(s) or column(s)\n-                    // or function(s) or definer/invoker of view\n-                    // lack rights to use them HY000/1356\n-                    // ignore\n-                }\n+        list.add(table);\n+    }\n+    rs.close();\n+    tables = list.toArray(new DbTableOrView[0]);\n+    if (tables.length < SysProperties.CONSOLE_MAX_TABLES_LIST_COLUMNS) {\n+        for (DbTableOrView tab : tables) {\n+            try {\n+                tab.readColumns(meta);\n+            } catch (SQLException e) {\n+                // MySQL:\n+                // View '...' references invalid table(s) or column(s)\n+                // or function(s) or definer/invoker of view\n+                // lack rights to use them HY000/1356\n+                // ignore\n             }\n         }\n     }\n+}\n \n-    /**\n+/**\n      * Read all procedures in the dataBase.\n      * @param meta the database meta data\n      * @throws SQLException Error while fetching procedures\n      */\n-    public void readProcedures(DatabaseMetaData meta) throws SQLException {\n-        ResultSet rs = meta.getProcedures(null, name, null);\n-        ArrayList<DbProcedure> list = New.arrayList();\n-        while (rs.next()) {\n-            list.add(new DbProcedure(this, rs));\n-        }\n-        rs.close();\n-        procedures = list.toArray(new DbProcedure[0]);\n-        if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n-            for (DbProcedure procedure : procedures) {\n-                procedure.readParameters(meta);\n-            }\n+public void readProcedures(DatabaseMetaData meta) throws SQLException {\n+    ResultSet rs = meta.getProcedures(null, name, null);\n+    ArrayList<DbProcedure> list = New.arrayList();\n+    while (rs.next()) {\n+        list.add(new DbProcedure(this, rs));\n+    }\n+    rs.close();\n+    procedures = list.toArray(new DbProcedure[0]);\n+    if (procedures.length < SysProperties.CONSOLE_MAX_PROCEDURES_LIST_COLUMNS) {\n+        for (DbProcedure procedure : procedures) {\n+            procedure.readParameters(meta);\n         }\n     }\n }\n+}\n",
            "diff_size": 59
        }
    ]
}