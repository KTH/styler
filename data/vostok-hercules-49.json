{
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "65",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 216).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        CONTAINER_WRITER.write(encoder, container);\n\n        return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n    }\n\n    public static EventBuilder create() {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/49/EventBuilder.java\nindex 0a681d0790..242bb41d22 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/49/EventBuilder.java\n@@ -61,8 +61,8 @@ public class EventBuilder {\n         encoder.writeUuid(uuid);\n \n         CONTAINER_WRITER.write(encoder, container);\n-\n-        return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n+        return new Event(buffer.array(),version ,timestamp,uuid,container\n+        ) ;//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n     }\n \n     public static EventBuilder create() {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/49/EventBuilder.java\nindex 0a681d0790..4f52b24aea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/49/EventBuilder.java\n@@ -62,7 +62,8 @@ public class EventBuilder {\n \n         CONTAINER_WRITER.write(encoder, container);\n \n-        return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n+        return new Event(buffer.array(), version, timestamp, uuid,\n+            container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n     }\n \n     public static EventBuilder create() {\n@@ -71,13 +72,13 @@ public class EventBuilder {\n \n     public static EventBuilder create(final long timestamp, final UUID uuid) {\n         return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(uuid);\n+            .timestamp(timestamp)\n+            .uuid(uuid);\n     }\n \n     public static EventBuilder create(final long timestamp, final String uuidString) {\n         return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(UUID.fromString(uuidString));\n+            .timestamp(timestamp)\n+            .uuid(UUID.fromString(uuidString));\n     }\n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/49/EventBuilder.java\nindex 0a681d0790..ebc8b80de7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/49/EventBuilder.java\n@@ -80,4 +80,4 @@ public class EventBuilder {\n                 .timestamp(timestamp)\n                 .uuid(UUID.fromString(uuidString));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/49/EventBuilder.java\nindex 0a681d0790..6fcd989543 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/49/EventBuilder.java\n@@ -2,7 +2,6 @@ package ru.kontur.vostok.hercules.protocol;\n \n import ru.kontur.vostok.hercules.protocol.encoder.ContainerWriter;\n import ru.kontur.vostok.hercules.protocol.encoder.Encoder;\n-\n import java.nio.ByteBuffer;\n import java.util.UUID;\n \n@@ -11,14 +10,19 @@ import java.util.UUID;\n  *\n  * @author Gregory Koshelev\n  */\n+\n+\n public class EventBuilder {\n     private static final int SIZE_OF_VERSION = 1;\n+\n     private static final int SIZE_OF_TIMESTAMP = 8;\n \n     private static final ContainerWriter CONTAINER_WRITER = new ContainerWriter();\n \n     private long timestamp;\n+\n     private UUID uuid;\n+\n     private int version = 1;// Version is 1\n \n     private Container.ContainerBuilder containerBuilder = Container.builder();\n@@ -52,16 +56,12 @@ public class EventBuilder {\n \n     public Event build() {\n         Container container = containerBuilder.build();\n-\n         ByteBuffer buffer = ByteBuffer.allocate(Sizes.sizeOfVersion() + Sizes.sizeOfTimestamp() + Sizes.SIZE_OF_UUID + container.sizeOf());\n         Encoder encoder = new Encoder(buffer);\n-\n         encoder.writeUnsignedByte(version);\n         encoder.writeLong(timestamp);\n         encoder.writeUuid(uuid);\n-\n         CONTAINER_WRITER.write(encoder, container);\n-\n         return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n     }\n \n@@ -71,13 +71,13 @@ public class EventBuilder {\n \n     public static EventBuilder create(final long timestamp, final UUID uuid) {\n         return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(uuid);\n+            .timestamp(timestamp)\n+            .uuid(uuid);\n     }\n \n     public static EventBuilder create(final long timestamp, final String uuidString) {\n         return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(UUID.fromString(uuidString));\n+            .timestamp(timestamp)\n+            .uuid(UUID.fromString(uuidString));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/49/EventBuilder.java\nindex 0a681d0790..61614e0332 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/49/EventBuilder.java\n@@ -62,22 +62,21 @@ public class EventBuilder {\n \n         CONTAINER_WRITER.write(encoder, container);\n \n-        return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n-    }\n-\n-    public static EventBuilder create() {\n-        return new EventBuilder();\n-    }\n-\n-    public static EventBuilder create(final long timestamp, final UUID uuid) {\n-        return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(uuid);\n-    }\n-\n-    public static EventBuilder create(final long timestamp, final String uuidString) {\n-        return new EventBuilder()\n-                .timestamp(timestamp)\n-                .uuid(UUID.fromString(uuidString));\n-    }\n-}\n+        return new Event (buffer.array(),version, timestamp,uuid,\n+        container ) ; //FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.}publicstatic EventBuilder create() {\n+             return new EventBuilder();\n+         }\n+\n+         public static EventBuilder create(final long timestamp, final UUID uuid) {\n+             return new EventBuilder()\n+                     .timestamp(timestamp)\n+                     .uuid(uuid);\n+         }\n+\n+         public static EventBuilder create(final long timestamp, final String uuidString) {\n+             return new EventBuilder()\n+                     .timestamp(timestamp)\n+                     .uuid(UUID.fromString(uuidString));\n+         }\n+     }\n+     \n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/49/EventBuilder.java\nindex 0a681d0790..242bb41d22 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/49/EventBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/49/EventBuilder.java\n@@ -61,8 +61,8 @@ public class EventBuilder {\n         encoder.writeUuid(uuid);\n \n         CONTAINER_WRITER.write(encoder, container);\n-\n-        return new Event(buffer.array(), version, timestamp, uuid, container);//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n+        return new Event(buffer.array(),version ,timestamp,uuid,container\n+        ) ;//FIXME: If we want to reuse buffers, then we should not use buffer.array() to prevent it leaking. Also, buffer may be greater than event.\n     }\n \n     public static EventBuilder create() {\n",
            "diff_size": 2
        }
    ]
}