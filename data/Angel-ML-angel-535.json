{
    "error_id": "535",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/535/ServerRowsStorage.java\nindex 481df32b44..157bf3618b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/535/ServerRowsStorage.java\n@@ -30,63 +30,63 @@ import io.netty.buffer.ByteBuf;\n  * Base class for row-based matrix partition storage\n  */\n public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+        IServerRowsStorageOp {\n \n-  /**\n-   * Create new ServerRowsStorage\n-   *\n-   * @param rowIdOffset Row id offset\n-   */\n-  public ServerRowsStorage(int rowIdOffset) {\n-    super(rowIdOffset);\n-  }\n+    /**\n+     * Create new ServerRowsStorage\n+     *\n+     * @param rowIdOffset Row id offset\n+     */\n+    public ServerRowsStorage(int rowIdOffset) {\n+        super(rowIdOffset);\n+    }\n \n-  /**\n-   * Create new ServerRowsStorage\n-   */\n-  public ServerRowsStorage() {\n-    this(0);\n-  }\n+    /**\n+     * Create new ServerRowsStorage\n+     */\n+    public ServerRowsStorage() {\n+        this(0);\n+    }\n \n-  /**\n-   * Init the server rows in the storage\n-   *\n-   * @param partKey partition key\n-   * @param rowType row type\n-   * @param estSparsity estimate sparsity\n-   * @param valueClass row element type\n-   */\n-  public void init(\n-      PartitionKey partKey, RowType rowType, double estSparsity,\n-      Class<? extends IElement> valueClass) {\n-    int rowStart = partKey.getStartRow();\n-    int rowEnd = partKey.getEndRow();\n-    long startCol = partKey.getStartCol();\n-    long endCol = partKey.getEndCol();\n+    /**\n+     * Init the server rows in the storage\n+     *\n+     * @param partKey     partition key\n+     * @param rowType     row type\n+     * @param estSparsity estimate sparsity\n+     * @param valueClass  row element type\n+     */\n+    public void init(\n+            PartitionKey partKey, RowType rowType, double estSparsity,\n+            Class<? extends IElement> valueClass) {\n+        int rowStart = partKey.getStartRow();\n+        int rowEnd = partKey.getEndRow();\n+        long startCol = partKey.getStartCol();\n+        long endCol = partKey.getEndCol();\n \n-    int elementNum = partKey.getIndexNum();\n-    if (elementNum <= 0) {\n-      elementNum = (int) ((endCol - startCol) * estSparsity);\n-    }\n-    for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n-      row.init();\n-      putRow(rowIndex, row);\n+        int elementNum = partKey.getIndexNum();\n+        if (elementNum <= 0) {\n+            elementNum = (int) ((endCol - startCol) * estSparsity);\n+        }\n+        for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n+            ServerRow row = ServerRowFactory\n+                    .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+            row.init();\n+            putRow(rowIndex, row);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void update(ByteBuf buf, UpdateOp op) {\n-    int rowNum = buf.readInt();\n-    int rowId;\n-    RowType rowType;\n+    @Override\n+    public void update(ByteBuf buf, UpdateOp op) {\n+        int rowNum = buf.readInt();\n+        int rowId;\n+        RowType rowType;\n \n-    for (int i = 0; i < rowNum; i++) {\n-      rowId = buf.readInt();\n-      rowType = RowType.valueOf(buf.readInt());\n-      ServerRow row = getRow(rowId);\n-      row.update(rowType, buf, op);\n+        for (int i = 0; i < rowNum; i++) {\n+            rowId = buf.readInt();\n+            rowType = RowType.valueOf(buf.readInt());\n+            ServerRow row = getRow(rowId);\n+            row.update(rowType, buf, op);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/535/ServerRowsStorage.java\nindex 481df32b44..9afcdbd5f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/535/ServerRowsStorage.java\n@@ -29,8 +29,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Base class for row-based matrix partition storage\n  */\n-public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+public abstract class ServerRowsStorage extends ServerPartitionStorage implements IServerRowsStorageOp {\n \n   /**\n    * Create new ServerRowsStorage\n@@ -59,7 +58,7 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n   public void init(\n       PartitionKey partKey, RowType rowType, double estSparsity,\n       Class<? extends IElement> valueClass) {\n-    int rowStart = partKey.getStartRow();\n+  int rowStart = partKey.getStartRow();\n     int rowEnd = partKey.getEndRow();\n     long startCol = partKey.getStartCol();\n     long endCol = partKey.getEndCol();\n@@ -69,8 +68,7 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n       elementNum = (int) ((endCol - startCol) * estSparsity);\n     }\n     for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+      ServerRow row = ServerRowFactory.createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n       row.init();\n       putRow(rowIndex, row);\n     }\n@@ -89,4 +87,4 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n       row.update(rowType, buf, op);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 62.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/535/ServerRowsStorage.java\nindex 481df32b44..cde73e151b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/535/ServerRowsStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/535/ServerRowsStorage.java\n@@ -29,24 +29,26 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Base class for row-based matrix partition storage\n  */\n-public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+\n+public abstract class ServerRowsStorage extends ServerPartitionStorage implements IServerRowsStorageOp {\n \n   /**\n    * Create new ServerRowsStorage\n    *\n    * @param rowIdOffset Row id offset\n    */\n-  public ServerRowsStorage(int rowIdOffset) {\n+\n+    public ServerRowsStorage(int rowIdOffset) {\n     super(rowIdOffset);\n-  }\n+    }\n \n   /**\n    * Create new ServerRowsStorage\n    */\n-  public ServerRowsStorage() {\n+\n+    public ServerRowsStorage() {\n     this(0);\n-  }\n+    }\n \n   /**\n    * Init the server rows in the storage\n@@ -56,37 +58,35 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n    * @param estSparsity estimate sparsity\n    * @param valueClass row element type\n    */\n-  public void init(\n-      PartitionKey partKey, RowType rowType, double estSparsity,\n-      Class<? extends IElement> valueClass) {\n+\n+    public void init(PartitionKey partKey, RowType rowType, double estSparsity, Class<? extends IElement> valueClass) {\n     int rowStart = partKey.getStartRow();\n     int rowEnd = partKey.getEndRow();\n     long startCol = partKey.getStartCol();\n     long endCol = partKey.getEndCol();\n-\n     int elementNum = partKey.getIndexNum();\n     if (elementNum <= 0) {\n-      elementNum = (int) ((endCol - startCol) * estSparsity);\n+        elementNum = (int) ((endCol - startCol) * estSparsity);\n     }\n+\n     for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n-      row.init();\n-      putRow(rowIndex, row);\n+        ServerRow row = ServerRowFactory.createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+        row.init();\n+        putRow(rowIndex, row);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void update(ByteBuf buf, UpdateOp op) {\n+    @Override\n+    public void update(ByteBuf buf, UpdateOp op) {\n     int rowNum = buf.readInt();\n     int rowId;\n     RowType rowType;\n-\n     for (int i = 0; i < rowNum; i++) {\n-      rowId = buf.readInt();\n-      rowType = RowType.valueOf(buf.readInt());\n-      ServerRow row = getRow(rowId);\n-      row.update(rowType, buf, op);\n+        rowId = buf.readInt();\n+        rowType = RowType.valueOf(buf.readInt());\n+        ServerRow row = getRow(rowId);\n+        row.update(rowType, buf, op);\n+    }\n     }\n-  }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}