{
    "error_id": "154",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.stratio.qa.specs;\n\nimport com.stratio.qa.utils.ThreadProperty;\nimport cucumber.api.DataTable;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/154/ThenGTest.java\nindex 9aa2a83edb..04b06d31df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/154/ThenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/154/ThenGTest.java\nindex 9aa2a83edb..538bd6ac09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/154/ThenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -35,12 +36,15 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n-        List<String> row2 = Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -60,12 +64,15 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n-        List<String> row2 = Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -85,12 +92,15 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n-        List<String> row2 = Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -109,12 +119,15 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n-        List<String> row2 = Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -133,12 +146,14 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"&&\", \"leader\");\n-        List<String> row2 = Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n+        List<String> row2 =\n+            Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -157,12 +172,15 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n-        List<String> row1 = Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n-        List<String> row2 = Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n+        List<String> row1 =\n+            Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n+        List<String> row2 =\n+            Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n \n         List<List<String>> rawData = Arrays.asList(row1, row2);\n \n@@ -182,7 +200,8 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -206,7 +225,8 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -226,7 +246,8 @@ public class ThenGTest {\n         ThenGSpec theng = new ThenGSpec(commong);\n \n         String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n \n         ThreadProperty.set(envVar, result);\n \n@@ -247,7 +268,8 @@ public class ThenGTest {\n         String envVar = \"EVAR\";\n \n         ThreadProperty.set(envVar, \"BlaBlaBla\");\n-        theng.checkValue(ThreadProperty.get(envVar), \"not valid comparison\", \"BleBleBle\");\n+        theng.checkValue(ThreadProperty.get(envVar), \"not valid comparison\",\n+            \"BleBleBle\");\n     }\n \n     @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \"^A number should be provided in order to perform a valid comparison.$\")\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/154/ThenGTest.java\nindex 9aa2a83edb..69fd187c4e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/154/ThenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -50,8 +51,7 @@ public class ThenGTest {\n \n     }\n \n-\n-    @Test\n+@Test\n     public void testValueNotEqualInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n         String envVar = \"consulMesos\";\n@@ -75,8 +75,7 @@ public class ThenGTest {\n \n     }\n \n-\n-    @Test\n+@Test\n     public void testValueContainsInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n         String envVar = \"consulMesos\";\n@@ -172,8 +171,7 @@ public class ThenGTest {\n \n     }\n \n-\n-    @Test\n+@Test\n     public void testSizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n         String envVar = \"exampleEnvVar\";\n@@ -272,4 +270,4 @@ public class ThenGTest {\n         theng.checkValue(ThreadProperty.get(envVar), \"is lower than\", \"1O\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/154/ThenGTest.java\nindex 9aa2a83edb..04ada7abb3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/154/ThenGTest.java\n@@ -18,7 +18,6 @@ package com.stratio.qa.specs;\n import com.stratio.qa.utils.ThreadProperty;\n import cucumber.api.DataTable;\n import org.testng.annotations.Test;\n-\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.Arrays;\n@@ -33,21 +32,13 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n         List<String> row2 = Arrays.asList(\"[0].Node\", \"equal\", \"paaslab31.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n \n@@ -58,21 +49,13 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[1].Node\", \"not equal\", \"paaslab31.stratio.com\");\n         List<String> row2 = Arrays.asList(\"[2].Node\", \"not equal\", \"paaslab32.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n \n@@ -83,23 +66,16 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"contains\", \"leader\");\n         List<String> row2 = Arrays.asList(\"[1].ServiceTags\", \"contains\", \"master\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testValueDoesNotContainInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -107,23 +83,16 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"does not contain\", \"adsads\");\n         List<String> row2 = Arrays.asList(\"[1].Node\", \"does not contain\", \"rgrerg\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class)\n     public void testWrongOperatorInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -131,23 +100,16 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].ServiceTags\", \"&&\", \"leader\");\n         List<String> row2 = Arrays.asList(\"[1].Node\", \"||\", \"paaslab32.stratio.com\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test\n     public void testKeysContainsInJSON() throws Exception {\n         String baseData = \"exampleJSON.conf\";\n@@ -155,21 +117,13 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.glossary.~[0]\", \"contains\", \"title\");\n         List<String> row2 = Arrays.asList(\"$.glossary.GlossDiv.~\", \"contains\", \"GlossList\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n \n@@ -180,23 +134,16 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$\", \"size\", \"4\");\n         List<String> row2 = Arrays.asList(\"$.[0].ServiceTags\", \"size\", \"2\");\n-\n         List<List<String>> rawData = Arrays.asList(row1, row2);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n-\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class)\n     public void testNotParsedArraySizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -204,19 +151,15 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0]\", \"size\", \"4\");\n         List<List<String>> rawData = Arrays.asList(row1);\n-\n         DataTable table = DataTable.create(rawData);\n         theng.matchWithExpresion(envVar, table);\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \".*?Expected array for size operation.*?\")\n     public void testNotArraySizeInJSON() throws Exception {\n         String baseData = \"consulMesosJSON.conf\";\n@@ -224,40 +167,34 @@ public class ThenGTest {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n-        String result = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-\n+        String result = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n         ThreadProperty.set(envVar, result);\n-\n         List<String> row1 = Arrays.asList(\"$.[0].Node\", \"size\", \"4\");\n         List<List<String>> rawData = Arrays.asList(row1);\n-\n         DataTable table = DataTable.create(rawData);\n-\n         theng.matchWithExpresion(envVar, table);\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \"^Not a valid comparison. Valid ones are: is \\\\| matches \\\\| is higher than \\\\| is lower than \\\\| contains \\\\| is different from$\")\n     public void testCheckValueInvalidComparison() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n         String envVar = \"EVAR\";\n-\n         ThreadProperty.set(envVar, \"BlaBlaBla\");\n-        theng.checkValue(ThreadProperty.get(envVar), \"not valid comparison\", \"BleBleBle\");\n+        theng.checkValue(ThreadProperty.get(envVar),\n+            \"not valid comparison\",\n+                \"BleBleBle\");\n     }\n \n+\n     @Test(expectedExceptions = AssertionError.class, expectedExceptionsMessageRegExp = \"^A number should be provided in order to perform a valid comparison.$\")\n     public void testCheckValueInvalidNumber() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n         CommonG commong = new CommonG();\n         ThenGSpec theng = new ThenGSpec(commong);\n-\n         String envVar = \"EVAR\";\n-\n         ThreadProperty.set(envVar, \"1O\");\n         theng.checkValue(ThreadProperty.get(envVar), \"is higher than\", \"5\");\n         ThreadProperty.set(envVar, \"10\");\n@@ -271,5 +208,4 @@ public class ThenGTest {\n         ThreadProperty.set(envVar, \"S\");\n         theng.checkValue(ThreadProperty.get(envVar), \"is lower than\", \"1O\");\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/154/ThenGTest.java\nindex 9aa2a83edb..04b06d31df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/154/ThenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/154/ThenGTest.java\nindex 9aa2a83edb..04b06d31df 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/154/ThenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/154/ThenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        }
    ]
}