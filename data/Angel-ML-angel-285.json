{
    "error_id": "285",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/285/Transceiver.java\nindex 760a44c2c3..a106ce3b31 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/285/Transceiver.java\n@@ -22,9 +22,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -44,68 +44,69 @@ import java.util.concurrent.locks.ReentrantLock;\n \n /** Base transport class used by ClientCache}. */\n public abstract class Transceiver implements Closeable, Configurable {\n-  private final ReentrantLock channelLock = new ReentrantLock();\n+    private final ReentrantLock channelLock = new ReentrantLock();\n \n-  public abstract String getRemoteName() throws IOException;\n+    public abstract String getRemoteName() throws IOException;\n \n-  /**\n-   * Acquires an exclusive lock on the transceiver's channel.\n-   */\n-  public void lockChannel() {\n-    channelLock.lock();\n-  }\n+    /**\n+     * Acquires an exclusive lock on the transceiver's channel.\n+     */\n+    public void lockChannel() {\n+        channelLock.lock();\n+    }\n \n-  /**\n-   * Releases the lock on the transceiver's channel if held by the calling thread.\n-   */\n-  public void unlockChannel() {\n-    if (channelLock.isHeldByCurrentThread()) {\n-      channelLock.unlock();\n+    /**\n+     * Releases the lock on the transceiver's channel if held by the calling thread.\n+     */\n+    public void unlockChannel() {\n+        if (channelLock.isHeldByCurrentThread()) {\n+            channelLock.unlock();\n+        }\n     }\n-  }\n \n-  /**\n-   * default calls {@link #writeBuffers(java.util.List)} followed by {@link #readBuffers()}.\n-   */\n-  public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n-    lockChannel();\n-    try {\n-      writeBuffers(request);\n-      return readBuffers();\n-    } finally {\n-      unlockChannel();\n+    /**\n+     * default calls {@link #writeBuffers(java.util.List)} followed by {@link #readBuffers()}.\n+     */\n+    public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n+        lockChannel();\n+        try {\n+            writeBuffers(request);\n+            return readBuffers();\n+        } finally {\n+            unlockChannel();\n+        }\n     }\n-  }\n \n-  /**\n-   * messages using callbacks.\n-   */\n-  public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback)\n-      throws IOException {\n-    // The default implementation works synchronously\n-    try {\n-      List<ByteBuffer> response = transceive(request);\n-      callback.handleResult(response);\n-    } catch (IOException e) {\n-      callback.handleError(e);\n+    /**\n+     * messages using callbacks.\n+     */\n+    public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback)\n+            throws IOException {\n+        // The default implementation works synchronously\n+        try {\n+            List<ByteBuffer> response = transceive(request);\n+            callback.handleResult(response);\n+        } catch (IOException e) {\n+            callback.handleError(e);\n+        }\n     }\n-  }\n \n-  /** Called by the default definition of {@link #transceive(java.util.List)}. */\n-  public abstract List<ByteBuffer> readBuffers() throws IOException;\n+    /** Called by the default definition of {@link #transceive(java.util.List)}. */\n+    public abstract List<ByteBuffer> readBuffers() throws IOException;\n \n-  public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;\n+    public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;\n \n-  /**\n-   * True if a handshake has been completed for this connection. Used to determine whether a\n-   * handshake need be completed prior to a one-way message. Requests and responses are always\n-   * prefixed by handshakes, but one-way messages. If the first request sent over a connection is\n-   * one-way, then a handshake-only response is returned. Subsequent one-way messages over the\n-   * connection will have no response data sent. Returns false by default.\n-   */\n-  public boolean isConnected() {\n-    return false;\n-  }\n+    /**\n+     * True if a handshake has been completed for this connection. Used to determine whether a\n+     * handshake need be completed prior to a one-way message. Requests and responses are always\n+     * prefixed by handshakes, but one-way messages. If the first request sent over a connection is\n+     * one-way, then a handshake-only response is returned. Subsequent one-way messages over the\n+     * connection will have no response data sent. Returns false by default.\n+     */\n+    public boolean isConnected() {\n+        return false;\n+    }\n \n-  public void close() throws IOException {}\n+    public void close() throws IOException {\n+    }\n }\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/285/Transceiver.java\nindex 760a44c2c3..7dfd2566b7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/285/Transceiver.java\n@@ -108,4 +108,4 @@ public abstract class Transceiver implements Closeable, Configurable {\n   }\n \n   public void close() throws IOException {}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 55.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 63.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 87.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 111.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/285/Transceiver.java\nindex 760a44c2c3..3a3ef6dc1d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/285/Transceiver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/285/Transceiver.java\n@@ -35,7 +35,6 @@\n package com.tencent.angel.ipc;\n \n import com.tencent.angel.utils.Configurable;\n-\n import java.io.Closeable;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -43,58 +42,63 @@ import java.util.List;\n import java.util.concurrent.locks.ReentrantLock;\n \n /** Base transport class used by ClientCache}. */\n+\n public abstract class Transceiver implements Closeable, Configurable {\n-  private final ReentrantLock channelLock = new ReentrantLock();\n+    private final ReentrantLock channelLock = new ReentrantLock();\n \n-  public abstract String getRemoteName() throws IOException;\n+    public abstract String getRemoteName() throws IOException;\n \n   /**\n    * Acquires an exclusive lock on the transceiver's channel.\n    */\n-  public void lockChannel() {\n+\n+    public void lockChannel() {\n     channelLock.lock();\n-  }\n+    }\n \n   /**\n    * Releases the lock on the transceiver's channel if held by the calling thread.\n    */\n-  public void unlockChannel() {\n+\n+    public void unlockChannel() {\n     if (channelLock.isHeldByCurrentThread()) {\n-      channelLock.unlock();\n+        channelLock.unlock();\n+    }\n     }\n-  }\n \n   /**\n    * default calls {@link #writeBuffers(java.util.List)} followed by {@link #readBuffers()}.\n    */\n-  public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n+\n+    public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n     lockChannel();\n     try {\n-      writeBuffers(request);\n-      return readBuffers();\n+        writeBuffers(request);\n+        return readBuffers();\n     } finally {\n       unlockChannel();\n     }\n-  }\n+    }\n \n   /**\n    * messages using callbacks.\n    */\n-  public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback)\n-      throws IOException {\n+\n+    public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback) throws IOException {\n     // The default implementation works synchronously\n     try {\n-      List<ByteBuffer> response = transceive(request);\n-      callback.handleResult(response);\n+        List<ByteBuffer> response = transceive(request);\n+        callback.handleResult(response);\n     } catch (IOException e) {\n       callback.handleError(e);\n     }\n-  }\n+    }\n \n   /** Called by the default definition of {@link #transceive(java.util.List)}. */\n-  public abstract List<ByteBuffer> readBuffers() throws IOException;\n \n-  public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;\n+    public abstract List<ByteBuffer> readBuffers() throws IOException;\n+\n+    public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;\n \n   /**\n    * True if a handshake has been completed for this connection. Used to determine whether a\n@@ -103,9 +107,10 @@ public abstract class Transceiver implements Closeable, Configurable {\n    * one-way, then a handshake-only response is returned. Subsequent one-way messages over the\n    * connection will have no response data sent. Returns false by default.\n    */\n-  public boolean isConnected() {\n+\n+    public boolean isConnected() {\n     return false;\n-  }\n+    }\n \n-  public void close() throws IOException {}\n-}\n+    public void close() throws IOException {}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}