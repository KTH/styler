{
    "error_id": "117",
    "information": {
        "errors": [
            {
                "line": "21",
                "column": "64",
                "severity": "error",
                "message": "'}' at column 64 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidAccessWay constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "21",
                    "column": "64",
                    "severity": "error",
                    "message": "'}' at column 64 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/117/ValidAccessWayValidator.java\nindex f69052d25c..2df1f1bc63 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/117/ValidAccessWayValidator.java\n@@ -28,13 +28,13 @@ public class ValidAccessWayValidator\n    */\n   @Override\n   public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n-    \n+\n     // check for access way\n     if (!AccessWays.ALL.contains(accessWay) || accessWay\n           .equals(AccessWays.NOT_ACCESSIBLE)) {\n       return false;\n     }\n-      \n+\n     return true;\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/117/ValidAccessWayValidator.java\nindex f69052d25c..de3f0f77bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/117/ValidAccessWayValidator.java\n@@ -14,27 +14,28 @@ public class ValidAccessWayValidator\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidAccessWay constraintAnnotation) {}\n+  public void initialize(ValidAccessWay constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n   public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n-    \n+\n     // check for access way\n     if (!AccessWays.ALL.contains(accessWay) || accessWay\n-          .equals(AccessWays.NOT_ACCESSIBLE)) {\n+        .equals(AccessWays.NOT_ACCESSIBLE)) {\n       return false;\n     }\n-      \n+\n     return true;\n   }\n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "21",
                    "column": "64",
                    "severity": "error",
                    "message": "'}' at column 64 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 2, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/117/ValidAccessWayValidator.java\nindex f69052d25c..013e7d30fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/117/ValidAccessWayValidator.java\n@@ -30,12 +30,9 @@ public class ValidAccessWayValidator\n   public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n     \n     // check for access way\n-    if (!AccessWays.ALL.contains(accessWay) || accessWay\n-          .equals(AccessWays.NOT_ACCESSIBLE)) {\n-      return false;\n+    if (!AccessWays.ALL.contains(accessWay) || accessWay.equals(AccessWays.NOT_ACCESSIBLE)) {\n+  return false;\n     }\n-      \n-    return true;\n+return true;\n   }\n-\n-}\n+  }\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/117/ValidAccessWayValidator.java\nindex f69052d25c..d414b00bf9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/117/ValidAccessWayValidator.java\n@@ -2,23 +2,26 @@ package eu.dzhw.fdz.metadatamanagement.datasetmanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.AccessWays;\n \n /**\n  * Validator for the access way of a subDataSet. Only valued from the {@link AccessWays} class are\n  * allowed.\n  */\n-public class ValidAccessWayValidator\n-    implements ConstraintValidator<ValidAccessWay, String> {\n+\n+\n+public class ValidAccessWayValidator implements ConstraintValidator<ValidAccessWay, String> {\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n-  @Override\n-  public void initialize(ValidAccessWay constraintAnnotation) {}\n+\n+    @Override\n+    public void initialize(ValidAccessWay constraintAnnotation) {\n+\n+    }\n \n   /*\n    * (non-Javadoc)\n@@ -26,16 +29,18 @@ public class ValidAccessWayValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n+\n+\n+    @Override\n+    public boolean isValid(String accessWay,\n+        ConstraintValidatorContext context) {\n     \n     // check for access way\n-    if (!AccessWays.ALL.contains(accessWay) || accessWay\n-          .equals(AccessWays.NOT_ACCESSIBLE)) {\n-      return false;\n+    if (!AccessWays.ALL.contains(accessWay)\n+        || accessWay.equals(AccessWays.NOT_ACCESSIBLE)) {\n+        return false;\n     }\n-      \n-    return true;\n-  }\n \n-}\n+    return true;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "21",
                    "column": "64",
                    "severity": "error",
                    "message": "'}' at column 64 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/117/ValidAccessWayValidator.java\nindex f69052d25c..2df1f1bc63 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/117/ValidAccessWayValidator.java\n@@ -28,13 +28,13 @@ public class ValidAccessWayValidator\n    */\n   @Override\n   public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n-    \n+\n     // check for access way\n     if (!AccessWays.ALL.contains(accessWay) || accessWay\n           .equals(AccessWays.NOT_ACCESSIBLE)) {\n       return false;\n     }\n-      \n+\n     return true;\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/117/ValidAccessWayValidator.java\nindex f69052d25c..193560d603 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/117/ValidAccessWayValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/117/ValidAccessWayValidator.java\n@@ -18,9 +18,8 @@ public class ValidAccessWayValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidAccessWay constraintAnnotation) {}\n-\n-  /*\n+  public void initialize(ValidAccessWay constraintAnnotation) {\n+  }/*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n@@ -28,13 +27,13 @@ public class ValidAccessWayValidator\n    */\n   @Override\n   public boolean isValid(String accessWay, ConstraintValidatorContext context) {\n-    \n+\n     // check for access way\n     if (!AccessWays.ALL.contains(accessWay) || accessWay\n           .equals(AccessWays.NOT_ACCESSIBLE)) {\n       return false;\n     }\n-      \n+\n     return true;\n   }\n \n",
            "diff_size": 5
        }
    ]
}