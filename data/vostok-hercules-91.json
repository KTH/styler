{
    "error_id": "91",
    "information": {
        "errors": [
            {
                "line": "177",
                "column": "52",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                            for (ConsumerRecord<UUID, Event> record : records) {\n                                Event event = record.value();\n                                if (event == null) {// Received non-deserializable data, should be ignored\n                                    droppedEvents++;\n                                    continue;\n                                }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/91/Sink.java\nindex a455c669ed..dd292245f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/91/Sink.java\n@@ -174,7 +174,7 @@ public class Sink {\n                             List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                             for (ConsumerRecord<UUID, Event> record : records) {\n                                 Event event = record.value();\n-                                if (event == null) {// Received non-deserializable data, should be ignored\n+                                if (event == null) { // Received non-deserializable data, should be ignored\n                                     droppedEvents++;\n                                     continue;\n                                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "177",
                    "column": "52",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/91/Sink.java\nindex a455c669ed..4bdfdbec3d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/91/Sink.java\n@@ -59,13 +59,13 @@ public class Sink {\n     private final Meter totalEventsMeter;\n \n     public Sink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n-            Processor processor,\n-            List<PatternMatcher> patternMatchers,\n-            EventDeserializer deserializer,\n-            MetricsCollector metricsCollector) {\n+        ExecutorService executor,\n+        String applicationId,\n+        Properties properties,\n+        Processor processor,\n+        List<PatternMatcher> patternMatchers,\n+        EventDeserializer deserializer,\n+        MetricsCollector metricsCollector) {\n         this.executor = executor;\n         this.applicationId = applicationId;\n         this.properties = properties;\n@@ -253,23 +253,23 @@ public class Sink {\n \n     private static class Props {\n         static final Parameter<Long> POLL_TIMEOUT_MS =\n-                Parameter.longParameter(\"pollTimeoutMs\").\n-                        withDefault(6_000L).\n-                        build();\n+            Parameter.longParameter(\"pollTimeoutMs\").\n+                withDefault(6_000L).\n+                build();\n \n         static final Parameter<Integer> BATCH_SIZE =\n-                Parameter.integerParameter(\"batchSize\").\n-                        withDefault(1000).\n-                        build();\n+            Parameter.integerParameter(\"batchSize\").\n+                withDefault(1000).\n+                build();\n \n         static final Parameter<String> GROUP_ID =\n-                Parameter.stringParameter(\"groupId\").\n-                        withDefault(\"\").\n-                        build();\n+            Parameter.stringParameter(\"groupId\").\n+                withDefault(\"\").\n+                build();\n \n         static final Parameter<Long> AVAILABILITY_TIMEOUT_MS =\n-                Parameter.longParameter(\"availabilityTimeoutMs\").\n-                        withDefault(2_000L).\n-                        build();\n+            Parameter.longParameter(\"availabilityTimeoutMs\").\n+                withDefault(2_000L).\n+                build();\n     }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/91/Sink.java\nindex a455c669ed..d052b1e180 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/91/Sink.java\n@@ -66,7 +66,7 @@ public class Sink {\n             List<PatternMatcher> patternMatchers,\n             EventDeserializer deserializer,\n             MetricsCollector metricsCollector) {\n-        this.executor = executor;\n+    this.executor = executor;\n         this.applicationId = applicationId;\n         this.properties = properties;\n         this.processor = processor;\n@@ -148,8 +148,7 @@ public class Sink {\n         while (isRunning()) {\n             if (processor.isAvailable()) {\n                 try {\n-\n-                    subscribe();\n+    subscribe();\n \n                     while (processor.isAvailable()) {\n                         ConsumerRecords<UUID, Event> pollResult;\n@@ -174,7 +173,7 @@ public class Sink {\n                             List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                             for (ConsumerRecord<UUID, Event> record : records) {\n                                 Event event = record.value();\n-                                if (event == null) {// Received non-deserializable data, should be ignored\n+                                if (event == null) { // Received non-deserializable data, should be ignored\n                                     droppedEvents++;\n                                     continue;\n                                 }\n@@ -253,23 +252,15 @@ public class Sink {\n \n     private static class Props {\n         static final Parameter<Long> POLL_TIMEOUT_MS =\n-                Parameter.longParameter(\"pollTimeoutMs\").\n-                        withDefault(6_000L).\n-                        build();\n+                Parameter.longParameter(\"pollTimeoutMs\").withDefault(6_000L).build();\n \n         static final Parameter<Integer> BATCH_SIZE =\n-                Parameter.integerParameter(\"batchSize\").\n-                        withDefault(1000).\n-                        build();\n+                Parameter.integerParameter(\"batchSize\").withDefault(1000).build();\n \n         static final Parameter<String> GROUP_ID =\n-                Parameter.stringParameter(\"groupId\").\n-                        withDefault(\"\").\n-                        build();\n+                Parameter.stringParameter(\"groupId\").withDefault(\"\").build();\n \n         static final Parameter<Long> AVAILABILITY_TIMEOUT_MS =\n-                Parameter.longParameter(\"availabilityTimeoutMs\").\n-                        withDefault(2_000L).\n-                        build();\n+                Parameter.longParameter(\"availabilityTimeoutMs\").withDefault(2_000L).build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "192",
                    "column": "52",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/91/Sink.java\nindex a455c669ed..ead468c3b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/91/Sink.java\n@@ -21,7 +21,6 @@ import ru.kontur.vostok.hercules.util.PatternMatcher;\n import ru.kontur.vostok.hercules.util.parameter.Parameter;\n import ru.kontur.vostok.hercules.util.properties.PropertiesUtil;\n import ru.kontur.vostok.hercules.util.text.StringUtil;\n-\n import java.time.Duration;\n import java.util.ArrayList;\n import java.util.List;\n@@ -35,48 +34,63 @@ import java.util.regex.Pattern;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class Sink {\n     private static final Logger LOGGER = LoggerFactory.getLogger(Sink.class);\n \n     private volatile boolean running = false;\n \n     private final ExecutorService executor;\n+\n     private final String applicationId;\n+\n     private final Properties properties;\n+\n     private final Processor processor;\n+\n     private final List<PatternMatcher> patternMatchers;\n \n     private final Duration pollTimeout;\n+\n     private final int batchSize;\n+\n     private final long availabilityTimeoutMs;\n \n     private final Pattern pattern;\n+\n     private final KafkaConsumer<UUID, Event> consumer;\n \n     private final Meter droppedEventsMeter;\n+\n     private final Meter processedEventsMeter;\n+\n     private final Meter rejectedEventsMeter;\n+\n     private final Meter totalEventsMeter;\n \n     public Sink(\n-            ExecutorService executor,\n-            String applicationId,\n-            Properties properties,\n-            Processor processor,\n-            List<PatternMatcher> patternMatchers,\n-            EventDeserializer deserializer,\n-            MetricsCollector metricsCollector) {\n+        ExecutorService executor,\n+        String applicationId,\n+        Properties properties,\n+        Processor processor,\n+        List<PatternMatcher> patternMatchers,\n+        EventDeserializer deserializer, MetricsCollector metricsCollector\n+    ) {\n         this.executor = executor;\n         this.applicationId = applicationId;\n         this.properties = properties;\n         this.processor = processor;\n         this.patternMatchers = patternMatchers;\n-\n-        this.pollTimeout = Duration.ofMillis(PropertiesUtil.get(Props.POLL_TIMEOUT_MS, properties).get());\n-        this.batchSize = PropertiesUtil.get(Props.BATCH_SIZE, properties).get();\n-        this.availabilityTimeoutMs = PropertiesUtil.get(Props.AVAILABILITY_TIMEOUT_MS, properties).get();\n-\n-        String consumerGroupId = PropertiesUtil.get(Props.GROUP_ID, properties).get();\n+        this.pollTimeout = Duration.ofMillis(PropertiesUtil.get(Props.POLL_TIMEOUT_MS, properties)\n+        .get());\n+        this.batchSize = PropertiesUtil.get(Props.BATCH_SIZE, properties)\n+        .get();\n+        this.availabilityTimeoutMs = PropertiesUtil.get(Props.AVAILABILITY_TIMEOUT_MS, properties)\n+        .get();\n+\n+        String consumerGroupId = PropertiesUtil.get(Props.GROUP_ID, properties)\n+        .get();\n         if (StringUtil.isNullOrEmpty(consumerGroupId)) {\n             consumerGroupId = ConsumerUtil.toGroupId(applicationId, patternMatchers);\n         }\n@@ -93,7 +107,6 @@ public class Sink {\n         EventDeserializer valueDeserializer = deserializer;\n \n         this.consumer = new KafkaConsumer<>(consumerProperties, keyDeserializer, valueDeserializer);\n-\n         droppedEventsMeter = metricsCollector.meter(\"droppedEvents\");\n         processedEventsMeter = metricsCollector.meter(\"processedEvents\");\n         rejectedEventsMeter = metricsCollector.meter(\"rejectedEvents\");\n@@ -103,15 +116,16 @@ public class Sink {\n     /**\n      * Start sink.\n      */\n+\n     public final void start() {\n         running = true;\n-\n         executor.execute(this::run);\n     }\n \n     /**\n      * Stop Sink.\n      */\n+\n     public final void stop() {\n         running = false;\n \n@@ -119,12 +133,14 @@ public class Sink {\n             consumer.wakeup();\n         } catch (Exception ex) {\n             /* ignore */\n+\n         }\n \n         try {\n             consumer.close();\n         } catch (Exception ex) {\n             /* ignore */\n+\n         }\n \n         postStop();\n@@ -135,6 +151,7 @@ public class Sink {\n      *\n      * @return {@code true} if Sink is running and {@code false} if Sink is stopping\n      */\n+\n     public final boolean isRunning() {\n         return running;\n     }\n@@ -144,11 +161,11 @@ public class Sink {\n      * <p>\n      * Sink awaits availability of {@link Processor}. Also, it controls {@link #isRunning()} during operations.\n      */\n+\n     public final void run() {\n         while (isRunning()) {\n             if (processor.isAvailable()) {\n                 try {\n-\n                     subscribe();\n \n                     while (processor.isAvailable()) {\n@@ -167,9 +184,7 @@ public class Sink {\n                         // ConsumerRecords::count works for O(n), where n is partition count\n                         int eventCount = pollResult.count();\n                         List<Event> events = new ArrayList<>(eventCount);\n-\n                         int droppedEvents = 0;\n-\n                         for (TopicPartition partition : partitions) {\n                             List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                             for (ConsumerRecord<UUID, Event> record : records) {\n@@ -178,6 +193,7 @@ public class Sink {\n                                     droppedEvents++;\n                                     continue;\n                                 }\n+\n                                 events.add(event);\n                             }\n                         }\n@@ -210,6 +226,8 @@ public class Sink {\n     /**\n      * Perform additional stop operations when Event consuming was terminated.\n      */\n+\n+\n     protected void postStop() {\n \n     }\n@@ -217,6 +235,8 @@ public class Sink {\n     /**\n      * Subscribe Sink. Should be called before polling\n      */\n+\n+\n     protected final void subscribe() {\n         consumer.subscribe(pattern);\n     }\n@@ -224,12 +244,16 @@ public class Sink {\n     /**\n      * Unsubscribe Sink. Should be called if Sink cannot process Events.\n      */\n+\n+\n     protected final void unsubscribe() {\n         LOGGER.debug(\"Sink unsubscribe if any\");\n+\n         try {\n             consumer.unsubscribe();\n         } catch (Exception ex) {\n             /* ignore */\n+\n         }\n     }\n \n@@ -239,37 +263,37 @@ public class Sink {\n      * @return polled Events\n      * @throws WakeupException if poll terminated due to shutdown\n      */\n+\n+\n     protected final ConsumerRecords<UUID, Event> poll() throws WakeupException {\n         return consumer.poll(pollTimeout);\n     }\n \n+\n     protected final void commit() {\n         consumer.commitSync();\n     }\n \n+\n     protected final void commit(Map<TopicPartition, OffsetAndMetadata> offsets) {\n         consumer.commitSync(offsets);\n     }\n \n     private static class Props {\n-        static final Parameter<Long> POLL_TIMEOUT_MS =\n-                Parameter.longParameter(\"pollTimeoutMs\").\n-                        withDefault(6_000L).\n-                        build();\n-\n-        static final Parameter<Integer> BATCH_SIZE =\n-                Parameter.integerParameter(\"batchSize\").\n-                        withDefault(1000).\n-                        build();\n-\n-        static final Parameter<String> GROUP_ID =\n-                Parameter.stringParameter(\"groupId\").\n-                        withDefault(\"\").\n-                        build();\n-\n-        static final Parameter<Long> AVAILABILITY_TIMEOUT_MS =\n-                Parameter.longParameter(\"availabilityTimeoutMs\").\n-                        withDefault(2_000L).\n-                        build();\n+        static final Parameter<Long> POLL_TIMEOUT_MS = Parameter.longParameter(\"pollTimeoutMs\")\n+        .withDefault(6_000L)\n+        .build();\n+\n+        static final Parameter<Integer> BATCH_SIZE = Parameter.integerParameter(\"batchSize\")\n+        .withDefault(1000)\n+        .build();\n+\n+        static final Parameter<String> GROUP_ID = Parameter.stringParameter(\"groupId\")\n+        .withDefault(\"\")\n+        .build();\n+\n+        static final Parameter<Long> AVAILABILITY_TIMEOUT_MS = Parameter.longParameter(\"availabilityTimeoutMs\")\n+        .withDefault(2_000L)\n+        .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/91/Sink.java\nindex a455c669ed..dd292245f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/91/Sink.java\n@@ -174,7 +174,7 @@ public class Sink {\n                             List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                             for (ConsumerRecord<UUID, Event> record : records) {\n                                 Event event = record.value();\n-                                if (event == null) {// Received non-deserializable data, should be ignored\n+                                if (event == null) { // Received non-deserializable data, should be ignored\n                                     droppedEvents++;\n                                     continue;\n                                 }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/91/Sink.java\nindex a455c669ed..dd292245f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/91/Sink.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/91/Sink.java\n@@ -174,7 +174,7 @@ public class Sink {\n                             List<ConsumerRecord<UUID, Event>> records = pollResult.records(partition);\n                             for (ConsumerRecord<UUID, Event> record : records) {\n                                 Event event = record.value();\n-                                if (event == null) {// Received non-deserializable data, should be ignored\n+                                if (event == null) { // Received non-deserializable data, should be ignored\n                                     droppedEvents++;\n                                     continue;\n                                 }\n",
            "diff_size": 1
        }
    ]
}