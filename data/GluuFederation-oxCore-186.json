{
    "error_id": "186",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n    public void configure() {\n\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n\t}\n\n    /*",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/186/PythonService.java\nindex e452455bc1..6ffb99e4a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/186/PythonService.java\n@@ -58,7 +58,7 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n+        this.log = LoggerFactory.getLogger(PythonService.class);\n \t}\n \n     /*\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/186/PythonService.java\nindex e452455bc1..f937d8e635 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/186/PythonService.java\n@@ -58,8 +58,8 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n-\t}\n+        this.log = LoggerFactory.getLogger(PythonService.class);\n+    }\n \n     /*\n      * Initialize singleton instance during startup\n@@ -153,7 +153,7 @@ public class PythonService implements Serializable {\n     }\n \n     public <T> T loadPythonScript(String scriptName, String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs)\n-            throws PythonException {\n+        throws PythonException {\n         if (!interpereterReady || StringHelper.isEmpty(scriptName)) {\n             return null;\n         }\n@@ -172,7 +172,7 @@ public class PythonService implements Serializable {\n     }\n \n     public <T> T loadPythonScript(InputStream scriptFile, String scriptName, String scriptPythonType, Class<T> scriptJavaType,\n-            PyObject[] constructorArgs) throws PythonException {\n+                                  PyObject[] constructorArgs) throws PythonException {\n         if (!interpereterReady || (scriptFile == null)) {\n             return null;\n         }\n@@ -192,7 +192,7 @@ public class PythonService implements Serializable {\n \n     @SuppressWarnings(\"unchecked\")\n     private <T> T loadPythonScript(String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs, PythonInterpreter interpreter)\n-            throws PythonException {\n+        throws PythonException {\n         PyObject scriptPythonTypeObject = interpreter.get(scriptPythonType);\n         if (scriptPythonTypeObject == null) {\n             return null;\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/186/PythonService.java\nindex e452455bc1..fa782524e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/186/PythonService.java\n@@ -58,10 +58,10 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n-\t}\n+    this.log = LoggerFactory.getLogger(PythonService.class);\n+    }\n \n-    /*\n+/*\n      * Initialize singleton instance during startup\n      */\n     public boolean initPythonInterpreter(String pythonModulesDir) {\n@@ -248,4 +248,4 @@ public class PythonService implements Serializable {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/186/PythonService.java\nindex e452455bc1..03ac094426 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/186/PythonService.java\n@@ -14,12 +14,10 @@ import java.io.OutputStreamWriter;\n import java.io.Serializable;\n import java.io.UnsupportedEncodingException;\n import java.util.Properties;\n-\n import javax.annotation.PostConstruct;\n import javax.annotation.PreDestroy;\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n-\n import org.gluu.exception.PythonException;\n import org.gluu.persist.reflect.util.ReflectHelper;\n import org.gluu.util.StringHelper;\n@@ -34,6 +32,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Yuriy Movchan Date: 08.21.2012\n  */\n+\n+\n @ApplicationScoped\n public class PythonService implements Serializable {\n \n@@ -41,10 +41,8 @@ public class PythonService implements Serializable {\n \n     @Inject\n     private Logger log;\n-\n     private PythonInterpreter pythonInterpreter;\n     private boolean interpereterReady;\n-\n     private OutputStreamWriter logOut, logErr;\n \n     @PostConstruct\n@@ -58,22 +56,20 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n-\t}\n+        this.log = LoggerFactory.getLogger(PythonService.class);\n+    }\n \n     /*\n      * Initialize singleton instance during startup\n      */\n+\n     public boolean initPythonInterpreter(String pythonModulesDir) {\n         boolean result = false;\n-\n         if (isInitInterpreter()) {\n             try {\n                 PythonInterpreter.initialize(getPreProperties(), getPostProperties(pythonModulesDir), null);\n                 this.pythonInterpreter = new PythonInterpreter();\n-\n                 initPythonInterpreter(this.pythonInterpreter);\n-\n                 result = true;\n             } catch (PyException ex) {\n                 log.error(\"Failed to initialize PythonInterpreter correctly\", ex);\n@@ -83,7 +79,6 @@ public class PythonService implements Serializable {\n         }\n \n         this.interpereterReady = result;\n-\n         return result;\n     }\n \n@@ -101,9 +96,11 @@ public class PythonService implements Serializable {\n     /**\n      * When application undeploy we need clean up pythonInterpreter\n      */\n+\n     @PreDestroy\n     public void destroy() {\n         log.debug(\"Destroying pythonInterpreter component\");\n+\n         if (this.pythonInterpreter != null) {\n             this.pythonInterpreter.cleanup();\n         }\n@@ -116,29 +113,25 @@ public class PythonService implements Serializable {\n         clonedProps.setProperty(\"java.library.path\", \"\");\n         clonedProps.remove(\"javax.net.ssl.trustStore\");\n         clonedProps.remove(\"javax.net.ssl.trustStorePassword\");\n-\n         return clonedProps;\n     }\n \n     private Properties getPostProperties(String pythonModulesDir) {\n         Properties props = getPreProperties();\n-\n         String catalinaTmpFolder = System.getProperty(\"java.io.tmpdir\") + File.separator + \"python\" + File.separator + \"cachedir\";\n         props.setProperty(\"python.cachedir\", catalinaTmpFolder);\n-\n         String pythonHome = System.getenv(\"PYTHON_HOME\");\n         if (StringHelper.isNotEmpty(pythonHome)) {\n             props.setProperty(\"python.home\", pythonHome);\n         }\n \n         // Register custom python modules\n+\n         if (StringHelper.isNotEmpty(pythonModulesDir)) {\n             props.setProperty(\"python.path\", pythonModulesDir);\n         }\n-\n         props.put(\"python.console.encoding\", \"UTF-8\");\n         props.put(\"python.import.site\", \"false\");\n-\n         return props;\n     }\n \n@@ -149,18 +142,17 @@ public class PythonService implements Serializable {\n         }\n \n         String pythonHomeProperty = System.getProperty(\"python.home\");\n+\n         return StringHelper.isNotEmpty(pythonHomeProperty);\n     }\n \n-    public <T> T loadPythonScript(String scriptName, String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs)\n-            throws PythonException {\n+    public <T> T loadPythonScript(String scriptName, String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs) throws PythonException {\n         if (!interpereterReady || StringHelper.isEmpty(scriptName)) {\n             return null;\n         }\n \n         PythonInterpreter currentPythonInterpreter = PythonInterpreter.threadLocalStateInterpreter(null);\n         initPythonInterpreter(currentPythonInterpreter);\n-\n         try {\n             currentPythonInterpreter.execfile(scriptName);\n         } catch (Exception ex) {\n@@ -171,15 +163,13 @@ public class PythonService implements Serializable {\n         return loadPythonScript(scriptPythonType, scriptJavaType, constructorArgs, currentPythonInterpreter);\n     }\n \n-    public <T> T loadPythonScript(InputStream scriptFile, String scriptName, String scriptPythonType, Class<T> scriptJavaType,\n-            PyObject[] constructorArgs) throws PythonException {\n+    public <T> T loadPythonScript(InputStream scriptFile, String scriptName, String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs) throws PythonException {\n         if (!interpereterReady || (scriptFile == null)) {\n             return null;\n         }\n \n         PythonInterpreter currentPythonInterpreter = PythonInterpreter.threadLocalStateInterpreter(null);\n         initPythonInterpreter(currentPythonInterpreter);\n-\n         try {\n             currentPythonInterpreter.execfile(scriptFile, scriptName);\n         } catch (Exception ex) {\n@@ -191,8 +181,9 @@ public class PythonService implements Serializable {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private <T> T loadPythonScript(String scriptPythonType, Class<T> scriptJavaType, PyObject[] constructorArgs, PythonInterpreter interpreter)\n-            throws PythonException {\n+    private <T> T loadPythonScript(String scriptPythonType,\n+        Class<T> scriptJavaType,\n+            PyObject[] constructorArgs, PythonInterpreter interpreter) throws PythonException {\n         PyObject scriptPythonTypeObject = interpreter.get(scriptPythonType);\n         if (scriptPythonTypeObject == null) {\n             return null;\n@@ -209,7 +200,6 @@ public class PythonService implements Serializable {\n         Object scriptJavaClass = scriptPythonTypeClass.__tojava__(scriptJavaType);\n         if (!ReflectHelper.assignableFrom(scriptJavaClass.getClass(), scriptJavaType)) {\n             return null;\n-\n         }\n \n         return (T) scriptJavaClass;\n@@ -246,6 +236,7 @@ public class PythonService implements Serializable {\n                 this.buffer.setLength(0);\n             }\n         }\n+\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/186/PythonService.java\nindex e452455bc1..6ffb99e4a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/186/PythonService.java\n@@ -58,7 +58,7 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n+        this.log = LoggerFactory.getLogger(PythonService.class);\n \t}\n \n     /*\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/186/PythonService.java\nindex e452455bc1..6edde9fa30 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/186/PythonService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/186/PythonService.java\n@@ -58,7 +58,7 @@ public class PythonService implements Serializable {\n     }\n \n     public void configure() {\n-\t\tthis.log = LoggerFactory.getLogger(PythonService.class);\n+    this .log = LoggerFactory.getLogger(PythonService.class);\n \t}\n \n     /*\n",
            "diff_size": 1
        }
    ]
}