{
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @author ecoolper\n */\npublic class MediaImgUploadApacheHttpRequestExecutor extends MediaImgUploadRequestExecutor<CloseableHttpClient, HttpHost> {\n  public MediaImgUploadApacheHttpRequestExecutor(RequestHttp requestHttp) {\n    super(requestHttp);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/27/MediaImgUploadApacheHttpRequestExecutor.java\nindex dc6d979222..6813027123 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/27/MediaImgUploadApacheHttpRequestExecutor.java\n@@ -24,7 +24,8 @@ import java.io.IOException;\n  *\n  * @author ecoolper\n  */\n-public class MediaImgUploadApacheHttpRequestExecutor extends MediaImgUploadRequestExecutor<CloseableHttpClient, HttpHost> {\n+public class MediaImgUploadApacheHttpRequestExecutor\n+    extends MediaImgUploadRequestExecutor<CloseableHttpClient, HttpHost> {\n   public MediaImgUploadApacheHttpRequestExecutor(RequestHttp requestHttp) {\n     super(requestHttp);\n   }\n@@ -42,10 +43,10 @@ public class MediaImgUploadApacheHttpRequestExecutor extends MediaImgUploadReque\n     }\n \n     HttpEntity entity = MultipartEntityBuilder\n-      .create()\n-      .addBinaryBody(\"media\", data)\n-      .setMode(HttpMultipartMode.RFC6532)\n-      .build();\n+        .create()\n+        .addBinaryBody(\"media\", data)\n+        .setMode(HttpMultipartMode.RFC6532)\n+        .build();\n     httpPost.setEntity(entity);\n     httpPost.setHeader(\"Content-Type\", ContentType.MULTIPART_FORM_DATA.toString());\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/27/MediaImgUploadApacheHttpRequestExecutor.java\nindex dc6d979222..18ae16aef7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/27/MediaImgUploadApacheHttpRequestExecutor.java\n@@ -61,4 +61,4 @@ public class MediaImgUploadApacheHttpRequestExecutor extends MediaImgUploadReque\n       httpPost.releaseConnection();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/27/MediaImgUploadApacheHttpRequestExecutor.java\nindex dc6d979222..dd84368b8e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/27/MediaImgUploadApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/27/MediaImgUploadApacheHttpRequestExecutor.java\n@@ -15,7 +15,6 @@ import org.apache.http.entity.ContentType;\n import org.apache.http.entity.mime.HttpMultipartMode;\n import org.apache.http.entity.mime.MultipartEntityBuilder;\n import org.apache.http.impl.client.CloseableHttpClient;\n-\n import java.io.File;\n import java.io.IOException;\n \n@@ -24,41 +23,38 @@ import java.io.IOException;\n  *\n  * @author ecoolper\n  */\n+\n+\n public class MediaImgUploadApacheHttpRequestExecutor extends MediaImgUploadRequestExecutor<CloseableHttpClient, HttpHost> {\n-  public MediaImgUploadApacheHttpRequestExecutor(RequestHttp requestHttp) {\n+\n+    public MediaImgUploadApacheHttpRequestExecutor(RequestHttp requestHttp) {\n     super(requestHttp);\n-  }\n+    }\n \n-  @Override\n-  public WxMediaImgUploadResult execute(String uri, File data) throws WxErrorException, IOException {\n+    @Override\n+    public WxMediaImgUploadResult execute(String uri, File data) throws WxErrorException, IOException {\n     if (data == null) {\n-      throw new WxErrorException(WxError.builder().errorCode(-1).errorMsg(\"\u6587\u4ef6\u5bf9\u8c61\u4e3a\u7a7a\").build());\n+        throw new WxErrorException(WxError.builder().errorCode(-1).errorMsg(\"\u6587\u4ef6\u5bf9\u8c61\u4e3a\u7a7a\").build());\n     }\n \n     HttpPost httpPost = new HttpPost(uri);\n     if (requestHttp.getRequestHttpProxy() != null) {\n-      RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n-      httpPost.setConfig(config);\n+        RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n+        httpPost.setConfig(config);\n     }\n \n-    HttpEntity entity = MultipartEntityBuilder\n-      .create()\n-      .addBinaryBody(\"media\", data)\n-      .setMode(HttpMultipartMode.RFC6532)\n-      .build();\n+    HttpEntity entity = MultipartEntityBuilder.create().addBinaryBody(\"media\", data).setMode(HttpMultipartMode.RFC6532).build();\n     httpPost.setEntity(entity);\n     httpPost.setHeader(\"Content-Type\", ContentType.MULTIPART_FORM_DATA.toString());\n-\n     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n-      String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n-      WxError error = WxError.fromJson(responseContent, WxType.MP);\n-      if (error.getErrorCode() != 0) {\n+        String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n+        WxError error = WxError.fromJson(responseContent, WxType.MP);\n+        if (error.getErrorCode() != 0) {\n         throw new WxErrorException(error);\n-      }\n-\n-      return WxMediaImgUploadResult.fromJson(responseContent);\n+        }\n+        return WxMediaImgUploadResult.fromJson(responseContent);\n     } finally {\n       httpPost.releaseConnection();\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}