{
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "152",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  }\n\n  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n    AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n    XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n    return new XadesSignatureWrapper(xadesSignature, signatureDocument);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/26/AsicSignatureBuilder.java\nindex 7b82e85212..8382e40405 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/26/AsicSignatureBuilder.java\n@@ -134,7 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n+\n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n@@ -147,9 +147,9 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     policyDefinedByUser = null;\n     logger.info(\"Signing asic successfully completed\");\n     return signature;\n-  }\n+  } privateXadesSignatureWrapperparseSignatureWrapper(\n \n-  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n+  DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n     AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n     XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n     return new XadesSignatureWrapper(xadesSignature, signatureDocument);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/26/AsicSignatureBuilder.java\nindex 7b82e85212..20e338d1ef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/26/AsicSignatureBuilder.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -134,7 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n+\n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n@@ -149,7 +149,8 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     return signature;\n   }\n \n-  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n+  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument,\n+                                                      List<DSSDocument> detachedContents) {\n     AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n     XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n     return new XadesSignatureWrapper(xadesSignature, signatureDocument);\n@@ -312,14 +313,18 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n \n       SignerLocation signerLocation = new SignerLocation();\n \n-      if (!isEmpty(signatureParameters.getCity()))\n+      if (!isEmpty(signatureParameters.getCity())) {\n         signerLocation.setLocality(signatureParameters.getCity());\n-      if (!isEmpty(signatureParameters.getStateOrProvince()))\n+      }\n+      if (!isEmpty(signatureParameters.getStateOrProvince())) {\n         signerLocation.setStateOrProvince(signatureParameters.getStateOrProvince());\n-      if (!isEmpty(signatureParameters.getPostalCode()))\n+      }\n+      if (!isEmpty(signatureParameters.getPostalCode())) {\n         signerLocation.setPostalCode(signatureParameters.getPostalCode());\n-      if (!isEmpty(signatureParameters.getCountry()))\n+      }\n+      if (!isEmpty(signatureParameters.getCountry())) {\n         signerLocation.setCountry(signatureParameters.getCountry());\n+      }\n       facade.setSignerLocation(signerLocation);\n     }\n     facade.setSignerRoles(signerRoles);\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/26/AsicSignatureBuilder.java\nindex 7b82e85212..49b9ffd19d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/26/AsicSignatureBuilder.java\n@@ -134,8 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n-    AsicSignature signature;\n+AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n       signature = signatureOpener.open(signatureWrapper);\n@@ -378,4 +377,4 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     return configuration.getTspSource();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/26/AsicSignatureBuilder.java\nindex 7b82e85212..1992382870 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/26/AsicSignatureBuilder.java\n@@ -43,12 +43,10 @@ import org.digidoc4j.impl.asic.xades.XadesSigningDssFacade;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.security.cert.X509Certificate;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_B;\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_LT;\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_LTA;\n@@ -57,89 +55,86 @@ import static org.apache.commons.lang3.StringUtils.isEmpty;\n /**\n  * Signature builder for Asic container.\n  */\n+\n+\n public class AsicSignatureBuilder extends SignatureBuilder implements SignatureFinalizer {\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicSignatureBuilder.class);\n-  private static final int hexMaxlen = 10;\n-  protected transient XadesSigningDssFacade facade;\n-  private Date signingDate;\n-  private boolean isLTorLTAprofile = false;\n+    private static final Logger logger = LoggerFactory.getLogger(AsicSignatureBuilder.class);\n+    private static final int hexMaxlen = 10;\n+    protected transient XadesSigningDssFacade facade;\n+    private Date signingDate;\n+    private boolean isLTorLTAprofile = false;\n \n-  @Override\n-  protected Signature invokeSigningProcess() {\n+    @Override\n+    protected Signature invokeSigningProcess() {\n     logger.info(\"Signing asic container\");\n     signatureParameters.setSigningCertificate(signatureToken.getCertificate());\n     byte[] dataToSign = getDataToBeSigned();\n     Signature result = null;\n     byte[] signatureValue = null;\n     try {\n-      signatureValue = signatureToken.sign(signatureParameters.getDigestAlgorithm(), dataToSign);\n-      result = finalizeSignature(signatureValue);\n+        signatureValue = signatureToken.sign(signatureParameters.getDigestAlgorithm(), dataToSign);\n+        result = finalizeSignature(signatureValue);\n     } catch (TechnicalException e) {\n-      logger.warn(\"PROBLEM with signing: \"\n-          + Helper.bytesToHex(dataToSign, hexMaxlen) + \" -> \" + Helper.bytesToHex(signatureValue, hexMaxlen));\n+      logger.warn(\"PROBLEM with signing: \" + Helper.bytesToHex(dataToSign, hexMaxlen) + \" -> \" + Helper.bytesToHex(signatureValue, hexMaxlen));\n     }\n     return result;\n-  }\n+    }\n \n-  @Override\n-  public DataToSign buildDataToSign() throws SignerCertificateRequiredException, ContainerWithoutFilesException {\n+    @Override\n+    public DataToSign buildDataToSign() throws SignerCertificateRequiredException, ContainerWithoutFilesException {\n     byte[] dataToSign = getDataToBeSigned();\n     validateSignatureCompatibilityWithContainer();\n     return new DataToSign(dataToSign, signatureParameters, this);\n-  }\n+    }\n \n-  @Override\n-  public Signature openAdESSignature(byte[] signatureDocument) {\n+    @Override\n+    public Signature openAdESSignature(byte[] signatureDocument) {\n     if (signatureDocument == null) {\n-      logger.error(\"Signature cannot be empty\");\n-      throw new InvalidSignatureException();\n+        logger.error(\"Signature cannot be empty\");\n+        throw new InvalidSignatureException();\n     }\n     InMemoryDocument document = new InMemoryDocument(signatureDocument);\n     return createSignature(document);\n-  }\n-\n-  @Override\n-  public Signature finalizeSignature(byte[] signatureValue) {\n-    if ((signatureParameters.getEncryptionAlgorithm() == EncryptionAlgorithm.ECDSA || isEcdsaCertificate())\n-        && DSSSignatureUtils.isAsn1Encoded(signatureValue)) {\n-      logger.debug(\"Finalizing signature ASN1: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\"\n-          + String.valueOf(signatureValue.length) + \"]\");\n-      signatureValue = DSSSignatureUtils.convertToXmlDSig(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA,\n-          signatureValue);\n-    }\n-    logger.debug(\"Finalizing signature XmlDSig: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\"\n-        + String.valueOf(signatureValue.length) + \"]\");\n+    }\n+\n+    @Override\n+    public Signature finalizeSignature(byte[] signatureValue) {\n+    if ((signatureParameters.getEncryptionAlgorithm() == EncryptionAlgorithm.ECDSA || isEcdsaCertificate()) && DSSSignatureUtils.isAsn1Encoded(signatureValue)) {\n+        logger.debug(\"Finalizing signature ASN1: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\" + String.valueOf(signatureValue.length) + \"]\");\n+        signatureValue = DSSSignatureUtils.convertToXmlDSig(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA, signatureValue);\n+    }\n+    logger.debug(\"Finalizing signature XmlDSig: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\" + String.valueOf(signatureValue.length) + \"]\");\n     populateParametersForFinalizingSignature(signatureValue);\n     validateSignatureCompatibilityWithContainer();\n     Collection<DataFile> dataFilesToSign = getDataFiles();\n     validateDataFilesToSign(dataFilesToSign);\n     DSSDocument signedDocument = facade.signDocument(signatureValue, dataFilesToSign);\n     return createSignature(signedDocument);\n-  }\n+    }\n \n-  protected void validateSignatureCompatibilityWithContainer() {\n+    protected void validateSignatureCompatibilityWithContainer() {\n     // Do nothing\n-  }\n \n-  protected Signature createSignature(DSSDocument signedDocument) {\n+    }\n+\n+    protected Signature createSignature(DSSDocument signedDocument) {\n     logger.debug(\"Opening signed document validator\");\n     Configuration configuration = getConfiguration();\n     DetachedContentCreator detachedContentCreator = null;\n     try {\n-      detachedContentCreator = new DetachedContentCreator().populate(getDataFiles());\n+        detachedContentCreator = new DetachedContentCreator().populate(getDataFiles());\n     } catch (Exception e) {\n       logger.error(\"Error in datafile processing: \" + e.getMessage());\n       throw new DigiDoc4JException(e);\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n-      BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n-      signature = signatureOpener.open(signatureWrapper);\n-      validateOcspResponse(signature.getOrigin());\n+        BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n+        signature = signatureOpener.open(signatureWrapper);\n+        validateOcspResponse(signature.getOrigin());\n     } else {\n       AsicESignatureOpener signatureOpener = new AsicESignatureOpener(configuration);\n       signature = signatureOpener.open(signatureWrapper);\n@@ -147,15 +142,15 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     policyDefinedByUser = null;\n     logger.info(\"Signing asic successfully completed\");\n     return signature;\n-  }\n+    }\n \n-  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n+    private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n     AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n     XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n     return new XadesSignatureWrapper(xadesSignature, signatureDocument);\n-  }\n+    }\n \n-  protected byte[] getDataToBeSigned() {\n+    protected byte[] getDataToBeSigned() {\n     logger.info(\"Getting data to sign\");\n     initSigningFacade();\n     populateSignatureParameters();\n@@ -165,9 +160,9 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     String signatureId = facade.getSignatureId();\n     signatureParameters.setSignatureId(signatureId);\n     return dataToSign;\n-  }\n+    }\n \n-  protected void populateSignatureParameters() {\n+    protected void populateSignatureParameters() {\n     setDigestAlgorithm();\n     setSigningCertificate();\n     setEncryptionAlgorithm();\n@@ -177,205 +172,199 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     setSignaturePolicy();\n     setSigningDate();\n     setTimeStampProviderSource();\n-  }\n+    }\n \n-  protected void populateParametersForFinalizingSignature(byte[] signatureValueBytes) {\n+    protected void populateParametersForFinalizingSignature(byte[] signatureValueBytes) {\n     if (facade == null) {\n-      initSigningFacade();\n-      populateSignatureParameters();\n+        initSigningFacade();\n+        populateSignatureParameters();\n     }\n     Configuration configuration = getConfiguration();\n     facade.setCertificateSource(configuration.getTSL());\n     setOcspSource(signatureValueBytes);\n-  }\n+    }\n \n-  protected void initSigningFacade() {\n+    protected void initSigningFacade() {\n     if (facade == null) {\n-      facade = new XadesSigningDssFacade();\n+        facade = new XadesSigningDssFacade();\n     }\n-  }\n+    }\n+\n \n-  public Configuration getConfiguration() {\n+    public Configuration getConfiguration() {\n     return container.getConfiguration();\n-  }\n+    }\n \n-  protected List<DataFile> getDataFiles() {\n+    protected List<DataFile> getDataFiles() {\n     return container.getDataFiles();\n-  }\n+    }\n \n-  protected void validateOcspResponse(XadesSignature xadesSignature) {\n+    protected void validateOcspResponse(XadesSignature xadesSignature) {\n     if (isBaselineSignatureProfile()) {\n-      return;\n+        return;\n     }\n     List<BasicOCSPResp> ocspResponses = xadesSignature.getOcspResponses();\n     if (ocspResponses == null || ocspResponses.isEmpty()) {\n-      logger.error(\"Signature does not contain OCSP response\");\n-      throw new OCSPRequestFailedException(xadesSignature.getId());\n-    }\n-  }\n-\n-  protected boolean isBaselineSignatureProfile() {\n-    return signatureParameters.getSignatureProfile() != null\n-        && (SignatureProfile.B_BES == signatureParameters.getSignatureProfile()\n-        || SignatureProfile.B_EPES == signatureParameters.getSignatureProfile());\n-  }\n-\n-  protected void setOcspSource(byte[] signatureValueBytes) {\n-    SKOnlineOCSPSource ocspSource = (SKOnlineOCSPSource) OCSPSourceBuilder.anOcspSource().\n-        withSignatureProfile(this.signatureParameters.getSignatureProfile()).\n-        withSignatureValue(signatureValueBytes).\n-        withConfiguration(getConfiguration()).\n-        build();\n+        logger.error(\"Signature does not contain OCSP response\");\n+        throw new OCSPRequestFailedException(xadesSignature.getId());\n+    }\n+    }\n+\n+    protected boolean isBaselineSignatureProfile() {\n+    return signatureParameters.getSignatureProfile() != null && (SignatureProfile.B_BES == signatureParameters.getSignatureProfile()\n+                                                   || SignatureProfile.B_EPES == signatureParameters.getSignatureProfile());\n+    }\n+\n+    protected void setOcspSource(byte[] signatureValueBytes) {\n+    SKOnlineOCSPSource ocspSource = (SKOnlineOCSPSource) OCSPSourceBuilder.anOcspSource().withSignatureProfile(this.signatureParameters.getSignatureProfile()).withSignatureValue(signatureValueBytes).withConfiguration(getConfiguration()).build();\n     this.facade.setOcspSource(ocspSource);\n-  }\n+    }\n \n-  protected void setTimeStampProviderSource() {\n+    protected void setTimeStampProviderSource() {\n     Configuration configuration = this.getConfiguration();\n     OnlineTSPSource tspSource = new OnlineTSPSource(this.getTspSource(configuration));\n     SkDataLoader dataLoader = SkDataLoader.timestamp(configuration);\n     dataLoader.setUserAgent(Helper.createBDocUserAgent(this.signatureParameters.getSignatureProfile()));\n     tspSource.setDataLoader(dataLoader);\n     this.facade.setTspSource(tspSource);\n-  }\n+    }\n \n-  protected void setDigestAlgorithm() {\n+    protected void setDigestAlgorithm() {\n     if (signatureParameters.getDigestAlgorithm() == null) {\n-      Configuration configuration = getConfiguration();\n-      signatureParameters.setDigestAlgorithm(configuration.getSignatureDigestAlgorithm());\n+        Configuration configuration = getConfiguration();\n+        signatureParameters.setDigestAlgorithm(configuration.getSignatureDigestAlgorithm());\n     }\n     facade.setSignatureDigestAlgorithm(signatureParameters.getDigestAlgorithm());\n-  }\n+    }\n \n-  protected void setEncryptionAlgorithm() {\n+    protected void setEncryptionAlgorithm() {\n     if (signatureParameters.getEncryptionAlgorithm() == EncryptionAlgorithm.ECDSA || isEcdsaCertificate()) {\n-      logger.debug(\"Using ECDSA encryption algorithm\");\n-      signatureParameters.setEncryptionAlgorithm(EncryptionAlgorithm.ECDSA);\n-      facade.setEncryptionAlgorithm(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA);\n+        logger.debug(\"Using ECDSA encryption algorithm\");\n+        signatureParameters.setEncryptionAlgorithm(EncryptionAlgorithm.ECDSA);\n+        facade.setEncryptionAlgorithm(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA);\n     } else {\n       signatureParameters.setEncryptionAlgorithm(EncryptionAlgorithm.RSA);\n       facade.setEncryptionAlgorithm(eu.europa.esig.dss.EncryptionAlgorithm.RSA);\n     }\n-  }\n+    }\n \n-  protected boolean isEcdsaCertificate() {\n+    protected boolean isEcdsaCertificate() {\n     X509Certificate certificate = signatureParameters.getSigningCertificate();\n     String algorithm = certificate.getPublicKey().getAlgorithm();\n-    return algorithm.equals(\"EC\") || algorithm.equals(\"ECC\");\n-  }\n+    return algorithm.equals(\"EC\")\n+|| algorithm.equals(\"ECC\");\n+    }\n \n-  protected void setSignatureProfile() {\n+    protected void setSignatureProfile() {\n     if (signatureParameters.getSignatureProfile() != null) {\n-      setSignatureProfile(signatureParameters.getSignatureProfile());\n+        setSignatureProfile(signatureParameters.getSignatureProfile());\n     } else {\n       SignatureProfile signatureProfile = getConfiguration().getSignatureProfile();\n       setSignatureProfile(signatureProfile);\n       signatureParameters.setSignatureProfile(signatureProfile);\n     }\n-  }\n+    }\n \n-  protected void setSignatureProfile(SignatureProfile profile) {\n+    protected void setSignatureProfile(SignatureProfile profile) {\n     switch (profile) {\n-      case B_BES:\n+        case B_BES:\n         facade.setSignatureLevel(XAdES_BASELINE_B);\n         break;\n-      case B_EPES:\n+        case B_EPES:\n         facade.setSignatureLevel(XAdES_BASELINE_B);\n         break;\n-      case LTA:\n+        case LTA:\n         isLTorLTAprofile = true;\n         facade.setSignatureLevel(XAdES_BASELINE_LTA);\n         break;\n-      default:\n+        default:\n         isLTorLTAprofile = true;\n         facade.setSignatureLevel(XAdES_BASELINE_LT);\n     }\n-  }\n+    }\n \n-  protected void setSignaturePolicy() {\n+    protected void setSignaturePolicy() {\n     if (policyDefinedByUser != null && isDefinedAllPolicyValues()) {\n-      facade.setSignaturePolicy(policyDefinedByUser);\n+        facade.setSignaturePolicy(policyDefinedByUser);\n+    }\n     }\n-  }\n \n-  protected void setSignatureId() {\n+    protected void setSignatureId() {\n     if (StringUtils.isNotBlank(signatureParameters.getSignatureId())) {\n-      facade.setSignatureId(signatureParameters.getSignatureId());\n+        facade.setSignatureId(signatureParameters.getSignatureId());\n+    }\n     }\n-  }\n \n-  protected void setSignerInformation() {\n+    protected void setSignerInformation() {\n     logger.debug(\"Adding signer information\");\n     List<String> signerRoles = signatureParameters.getRoles();\n     if (!(isEmpty(signatureParameters.getCity()) && isEmpty(signatureParameters.getStateOrProvince())\n-        && isEmpty(signatureParameters.getPostalCode())\n-        && isEmpty(signatureParameters.getCountry()))) {\n-\n-      SignerLocation signerLocation = new SignerLocation();\n-\n-      if (!isEmpty(signatureParameters.getCity()))\n+        && isEmpty(signatureParameters.getPostalCode()) && isEmpty(signatureParameters.getCountry()))) {\n+        SignerLocation signerLocation = new SignerLocation();\n+        if (!isEmpty(signatureParameters.getCity()))\n         signerLocation.setLocality(signatureParameters.getCity());\n-      if (!isEmpty(signatureParameters.getStateOrProvince()))\n+        if (!isEmpty(signatureParameters.getStateOrProvince()))\n         signerLocation.setStateOrProvince(signatureParameters.getStateOrProvince());\n-      if (!isEmpty(signatureParameters.getPostalCode()))\n+        if (!isEmpty(signatureParameters.getPostalCode()))\n         signerLocation.setPostalCode(signatureParameters.getPostalCode());\n-      if (!isEmpty(signatureParameters.getCountry()))\n+        if (!isEmpty(signatureParameters.getCountry()))\n         signerLocation.setCountry(signatureParameters.getCountry());\n-      facade.setSignerLocation(signerLocation);\n+        facade.setSignerLocation(signerLocation);\n     }\n     facade.setSignerRoles(signerRoles);\n-  }\n+    }\n \n-  protected void setSigningCertificate() {\n+    protected void setSigningCertificate() {\n     X509Certificate signingCert = signatureParameters.getSigningCertificate();\n     facade.setSigningCertificate(signingCert);\n-  }\n+    }\n \n-  protected void setSigningDate() {\n+    protected void setSigningDate() {\n     if (signingDate == null) {\n-      signingDate = new Date();\n+        signingDate = new Date();\n     }\n     facade.setSigningDate(signingDate);\n     logger.debug(\"Signing date is going to be \" + signingDate);\n-  }\n+    }\n \n-  protected void validateDataFilesToSign(Collection<DataFile> dataFilesToSign) {\n+    protected void validateDataFilesToSign(Collection<DataFile> dataFilesToSign) {\n     if (dataFilesToSign.isEmpty()) {\n-      logger.error(\"Container does not contain any data files\");\n-      throw new ContainerWithoutFilesException();\n+        logger.error(\"Container does not contain any data files\");\n+        throw new ContainerWithoutFilesException();\n+    }\n     }\n-  }\n \n-  protected boolean isTimeMarkProfile() {\n+    protected boolean isTimeMarkProfile() {\n     if (signatureParameters.getSignatureProfile() == null) {\n-      return false;\n+        return false;\n     }\n     return signatureParameters.getSignatureProfile() == SignatureProfile.LT_TM;\n-  }\n+    }\n \n-  protected boolean isTimeStampProfile() {\n+    protected boolean isTimeStampProfile() {\n     if (signatureParameters.getSignatureProfile() == null) {\n-      return false;\n+        return false;\n     }\n     return signatureParameters.getSignatureProfile() == SignatureProfile.LT;\n-  }\n+    }\n \n-  protected boolean isEpesProfile() {\n+    protected boolean isEpesProfile() {\n     if (signatureParameters.getSignatureProfile() != null) {\n-      return signatureParameters.getSignatureProfile() == SignatureProfile.B_EPES;\n+        return signatureParameters.getSignatureProfile() == SignatureProfile.B_EPES;\n     }\n     return false;\n-  }\n+    }\n \n-  private String getTspSource(Configuration configuration) {\n+    private String getTspSource(Configuration configuration) {\n     if (isLTorLTAprofile) {\n-      X509Cert x509Cert = new X509Cert(signatureParameters.getSigningCertificate());\n-      String certCountry = x509Cert.getSubjectName(X509Cert.SubjectName.C);\n-      String tspSourceByCountry = configuration.getTspSourceByCountry(certCountry);\n-      if (StringUtils.isNotBlank(tspSourceByCountry)) {\n-        return tspSourceByCountry;\n-      }\n+        X509Cert x509Cert = new X509Cert(signatureParameters.getSigningCertificate());\n+        String certCountry = x509Cert.getSubjectName(X509Cert.SubjectName.C);\n+        String tspSourceByCountry = configuration.getTspSourceByCountry(certCountry);\n+        if (StringUtils.isNotBlank(tspSourceByCountry)) {\n+                              return tspSourceByCountry;\n+        }\n     }\n     return configuration.getTspSource();\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 158
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/26/AsicSignatureBuilder.java\nindex 7b82e85212..8382e40405 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/26/AsicSignatureBuilder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/26/AsicSignatureBuilder.java\n@@ -134,7 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n+\n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n@@ -147,9 +147,9 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     policyDefinedByUser = null;\n     logger.info(\"Signing asic successfully completed\");\n     return signature;\n-  }\n+  } privateXadesSignatureWrapperparseSignatureWrapper(\n \n-  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n+  DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n     AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n     XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n     return new XadesSignatureWrapper(xadesSignature, signatureDocument);\n",
            "diff_size": 3
        }
    ]
}