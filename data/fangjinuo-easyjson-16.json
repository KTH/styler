{
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "117",
                "column": "54",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n    private Mapper createMapper() {\n        if (useAnnotations && !caseInsensitiveFields &&\n                !acceptSingleValueAsArray && ignoreSet == null\n                && Str.isEmpty(view) && respectIgnore) {\n            return new MapperSimple(fieldAccessType.create(true));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler/16/JsonParserFactory.java\nindex 4551d2d259..c7717cc791 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler/16/JsonParserFactory.java\n@@ -114,223 +114,222 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n-            return new MapperSimple(fieldAccessType.create(true));\n-        }\n-        return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n-    }\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n+        && Str.isEmpty(view) && respectIgnore) {\n+    return new MapperSimple(fieldAccessType.create(true));\n+}\n+return new MapperComplex(fieldAccessType, useAnnotations,\n+        caseInsensitiveFields, ignoreSet, view,\n+        respectIgnore, acceptSingleValueAsArray);\n+}\n \n \n-    public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createFastObjectMapperParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonFastParser(true),\n+            createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createUTF8DirectByteParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonUTF8Parser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.UTF_8);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.UTF_8);\n+    return jsonParser;\n \n-    }\n+}\n \n-    public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createASCIIParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonAsciiParser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.US_ASCII);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.US_ASCII);\n+    return jsonParser;\n \n-    }\n+}\n \n \n-    public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n+public JsonParserAndMapper createLaxParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, false, events),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createCharacterSourceParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n+public JsonParserAndMapper createCharacterSourceParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n-\n-    public JsonParserAndMapper createJsonCharArrayParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createJsonCharArrayParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n+            createMapper());\n \n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-    public JsonParserAndMapper createLazyFinalParser() {\n-        return createFastParser();\n-    }\n \n-    public JsonParserAndMapper createJsonParserForJsonPath() {\n-        return createFastParser();\n-    }\n+public JsonParserAndMapper createLazyFinalParser() {\n+    return createFastParser();\n+}\n \n-    public JsonParserAndMapper create() {\n+public JsonParserAndMapper createJsonParserForJsonPath() {\n+    return createFastParser();\n+}\n \n+public JsonParserAndMapper create() {\n \n-        if (charset == null) {\n-            charset = Charsets.UTF_8;\n-        }\n \n-        return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+    if (charset == null) {\n+        charset = Charsets.UTF_8;\n     }\n \n+    return new JsonMappingParser(\n+            createMapper(), charset,\n+            lax, chop, lazyChop);\n+}\n \n-    public boolean isUsePropertiesFirst() {\n-        return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n-    }\n \n+public boolean isUsePropertiesFirst() {\n+    return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n+}\n \n-    public JsonParserFactory usePropertiesFirst() {\n-        fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n-        return this;\n-    }\n \n-    public boolean isUseFieldsFirst() {\n-        return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n+public JsonParserFactory usePropertiesFirst() {\n+    fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n+    return this;\n+}\n \n-    }\n+public boolean isUseFieldsFirst() {\n+    return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n \n+}\n \n-    public JsonParserFactory useFieldsFirst() {\n-        this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsFirst() {\n+    this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useFieldsOnly() {\n-        this.fieldAccessType = FieldAccessMode.FIELD;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsOnly() {\n+    this.fieldAccessType = FieldAccessMode.FIELD;\n+    return this;\n+}\n \n-    public JsonParserFactory usePropertyOnly() {\n-        this.fieldAccessType = FieldAccessMode.PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory usePropertyOnly() {\n+    this.fieldAccessType = FieldAccessMode.PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useAnnotations() {\n-        this.useAnnotations = true;\n-        return this;\n-    }\n \n-    public boolean isUseAnnotations() {\n-        return useAnnotations;\n-    }\n+public JsonParserFactory useAnnotations() {\n+    this.useAnnotations = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n-        this.useAnnotations = useAnnotations;\n-        return this;\n+public boolean isUseAnnotations() {\n+    return useAnnotations;\n+}\n \n-    }\n+public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n+    this.useAnnotations = useAnnotations;\n+    return this;\n \n+}\n \n-    public JsonParserFactory caseInsensitiveFields() {\n-        this.caseInsensitiveFields = true;\n-        return this;\n-    }\n \n-    public boolean isCaseInsensitiveFields() {\n-        return caseInsensitiveFields;\n-    }\n+public JsonParserFactory caseInsensitiveFields() {\n+    this.caseInsensitiveFields = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n-        this.caseInsensitiveFields = caseInsensitiveFields;\n-        return this;\n+public boolean isCaseInsensitiveFields() {\n+    return caseInsensitiveFields;\n+}\n \n-    }\n+public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n+    this.caseInsensitiveFields = caseInsensitiveFields;\n+    return this;\n \n+}\n \n-    public Set<String> getIgnoreSet() {\n-        return ignoreSet;\n-    }\n \n-    public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n-        this.ignoreSet = ignoreSet;\n-        return this;\n-    }\n+public Set<String> getIgnoreSet() {\n+    return ignoreSet;\n+}\n \n-    public String getView() {\n-        return view;\n-    }\n+public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n+    this.ignoreSet = ignoreSet;\n+    return this;\n+}\n \n-    public JsonParserFactory setView(String view) {\n-        this.view = view;\n-        return this;\n-    }\n+public String getView() {\n+    return view;\n+}\n \n-    public boolean isRespectIgnore() {\n-        return respectIgnore;\n-    }\n+public JsonParserFactory setView(String view) {\n+    this.view = view;\n+    return this;\n+}\n \n-    public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n-        this.respectIgnore = respectIgnore;\n-        return this;\n-    }\n+public boolean isRespectIgnore() {\n+    return respectIgnore;\n+}\n \n-    public JsonParserFactory acceptSingleValueAsArray() {\n-        this.acceptSingleValueAsArray = true;\n-        return this;\n-    }\n+public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n+    this.respectIgnore = respectIgnore;\n+    return this;\n+}\n \n-    public boolean isAcceptSingleValueAsArray() {\n-        return acceptSingleValueAsArray;\n-    }\n+public JsonParserFactory acceptSingleValueAsArray() {\n+    this.acceptSingleValueAsArray = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n-        this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n-        return this;\n+public boolean isAcceptSingleValueAsArray() {\n+    return acceptSingleValueAsArray;\n+}\n \n-    }\n+public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n+    this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n+    return this;\n \n+}\n \n-    public JsonParserFactory setCheckDates(boolean flag) {\n-        this.checkDates = flag;\n-        return this;\n-    }\n \n-    public boolean isCheckDatesSet() {\n-        return checkDates;\n-    }\n+public JsonParserFactory setCheckDates(boolean flag) {\n+    this.checkDates = flag;\n+    return this;\n+}\n+\n+public boolean isCheckDatesSet() {\n+    return checkDates;\n+}\n }\n",
            "diff_size": 204
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "117",
                    "column": "54",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/intellij/16/JsonParserFactory.java\nindex 4551d2d259..92d8e79748 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/intellij/16/JsonParserFactory.java\n@@ -107,28 +107,28 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createFastParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n-                createMapper());\n+            new JsonFastParser(false, chop, lazyChop, checkDates),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     private Mapper createMapper() {\n         if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n+            !acceptSingleValueAsArray && ignoreSet == null\n+            && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n         return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n+            caseInsensitiveFields, ignoreSet, view,\n+            respectIgnore, acceptSingleValueAsArray);\n     }\n \n \n     public JsonParserAndMapper createFastObjectMapperParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n+            new JsonFastParser(true),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n@@ -136,8 +136,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createUTF8DirectByteParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n+            new JsonUTF8Parser(),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(Charsets.UTF_8);\n@@ -147,8 +147,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createASCIIParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n+            new JsonAsciiParser(),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(Charsets.US_ASCII);\n@@ -159,8 +159,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createLaxParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n+            new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -169,8 +169,8 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n+            new JsonParserLax(false, chop, lazyChop, false, events),\n+            createMapper()\n         );\n \n         jsonParser.setCharset(charset);\n@@ -180,7 +180,7 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createCharacterSourceParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -188,7 +188,7 @@ public class JsonParserFactory {\n \n     public JsonParserAndMapper createJsonCharArrayParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n+            createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -211,8 +211,8 @@ public class JsonParserFactory {\n         }\n \n         return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+            createMapper(), charset,\n+            lax, chop, lazyChop);\n     }\n \n \n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/naturalize/16/JsonParserFactory.java\nindex 4551d2d259..d2af4ccba1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/naturalize/16/JsonParserFactory.java\n@@ -40,8 +40,6 @@ import java.nio.charset.Charset;\n import java.util.Set;\n \n public class JsonParserFactory {\n-\n-\n     private Charset charset = Charsets.UTF_8;\n     private boolean lax;\n     private boolean chop = false;\n@@ -57,8 +55,7 @@ public class JsonParserFactory {\n \n     private boolean checkDates = true;\n \n-\n-    public FieldAccessMode getFieldAccessType() {\n+public FieldAccessMode getFieldAccessType() {\n         return fieldAccessType;\n     }\n \n@@ -106,28 +103,24 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper createFastParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(false, chop, lazyChop, checkDates),\n                 createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n                 && Str.isEmpty(view) && respectIgnore) {\n-            return new MapperSimple(fieldAccessType.create(true));\n+    return new MapperSimple(fieldAccessType.create(true));\n         }\n         return new MapperComplex(fieldAccessType, useAnnotations,\n                 caseInsensitiveFields, ignoreSet, view,\n                 respectIgnore, acceptSingleValueAsArray);\n     }\n \n-\n-    public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n+public JsonParserAndMapper createFastObjectMapperParser() {\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(true),\n                 createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -135,43 +128,33 @@ public class JsonParserFactory {\n \n \n     public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonUTF8Parser(),\n+                createMapper());\n \n         jsonParser.setCharset(Charsets.UTF_8);\n         return jsonParser;\n-\n     }\n \n     public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonAsciiParser(),\n+                createMapper());\n \n         jsonParser.setCharset(Charsets.US_ASCII);\n         return jsonParser;\n-\n     }\n \n \n     public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, checkDates),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n \n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, false, events),\n+                createMapper());\n \n         jsonParser.setCharset(charset);\n         return jsonParser;\n@@ -181,16 +164,14 @@ public class JsonParserFactory {\n     public JsonParserAndMapper createCharacterSourceParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n     public JsonParserAndMapper createJsonCharArrayParser() {\n         BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n                 createMapper());\n-\n-        jsonParser.setCharset(charset);\n+jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n@@ -204,19 +185,15 @@ public class JsonParserFactory {\n     }\n \n     public JsonParserAndMapper create() {\n-\n-\n-        if (charset == null) {\n+    if (charset == null) {\n             charset = Charsets.UTF_8;\n         }\n-\n-        return new JsonMappingParser(\n+return new JsonMappingParser(\n                 createMapper(), charset,\n                 lax, chop, lazyChop);\n     }\n \n-\n-    public boolean isUsePropertiesFirst() {\n+public boolean isUsePropertiesFirst() {\n         return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n     }\n \n@@ -228,7 +205,6 @@ public class JsonParserFactory {\n \n     public boolean isUseFieldsFirst() {\n         return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n-\n     }\n \n \n@@ -262,7 +238,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n         this.useAnnotations = useAnnotations;\n         return this;\n-\n     }\n \n \n@@ -278,7 +253,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n         this.caseInsensitiveFields = caseInsensitiveFields;\n         return this;\n-\n     }\n \n \n@@ -321,7 +295,6 @@ public class JsonParserFactory {\n     public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n         this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n         return this;\n-\n     }\n \n \n@@ -333,4 +306,4 @@ public class JsonParserFactory {\n     public boolean isCheckDatesSet() {\n         return checkDates;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/codebuff/16/JsonParserFactory.java\nindex 4551d2d259..9ad353b4e9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/codebuff/16/JsonParserFactory.java\n@@ -4,7 +4,7 @@\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n- *  \t\thttp://www.apache.org/licenses/LICENSE-2.0\n+ *          http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n@@ -35,13 +35,10 @@ import io.advantageous.boon.core.reflection.MapperComplex;\n import io.advantageous.boon.core.reflection.MapperSimple;\n import io.advantageous.boon.core.reflection.fields.FieldAccessMode;\n import io.advantageous.boon.json.implementation.*;\n-\n import java.nio.charset.Charset;\n import java.util.Set;\n \n public class JsonParserFactory {\n-\n-\n     private Charset charset = Charsets.UTF_8;\n     private boolean lax;\n     private boolean chop = false;\n@@ -49,12 +46,10 @@ public class JsonParserFactory {\n     private FieldAccessMode fieldAccessType = FieldAccessMode.FIELD;\n     private boolean useAnnotations = true;\n     private boolean caseInsensitiveFields;\n-\n     private Set<String> ignoreSet;\n     private String view;\n     private boolean respectIgnore = true;\n     private boolean acceptSingleValueAsArray;\n-\n     private boolean checkDates = true;\n \n \n@@ -67,29 +62,35 @@ public class JsonParserFactory {\n         return chop;\n     }\n \n+\n     public JsonParserFactory setChop(boolean chop) {\n         this.chop = chop;\n         return this;\n     }\n \n+\n     public boolean isLazyChop() {\n         return lazyChop;\n     }\n \n+\n     public JsonParserFactory setLazyChop(boolean lazyChop) {\n         this.lazyChop = lazyChop;\n         return this;\n     }\n \n+\n     public JsonParserFactory lax() {\n         lax = true;\n         return this;\n     }\n \n+\n     public boolean isStrict() {\n         return !lax;\n     }\n \n+\n     public JsonParserFactory strict() {\n         lax = false;\n         return this;\n@@ -101,95 +102,73 @@ public class JsonParserFactory {\n         return this;\n     }\n \n+\n     public Charset getCharset() {\n         return charset;\n     }\n \n+\n     public JsonParserAndMapper createFastParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(false, chop, lazyChop, checkDates),\n-                createMapper());\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(false, chop, lazyChop, checkDates),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n+\n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null && Str.isEmpty(view) && respectIgnore) {\n             return new MapperSimple(fieldAccessType.create(true));\n         }\n-        return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n+        return new MapperComplex(fieldAccessType, useAnnotations, caseInsensitiveFields, ignoreSet, view, respectIgnore, acceptSingleValueAsArray);\n     }\n \n \n     public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonFastParser(true), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n \n     public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonUTF8Parser(), createMapper());\n         jsonParser.setCharset(Charsets.UTF_8);\n         return jsonParser;\n-\n     }\n \n-    public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n \n+    public JsonParserAndMapper createASCIIParser() {\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonAsciiParser(), createMapper());\n         jsonParser.setCharset(Charsets.US_ASCII);\n         return jsonParser;\n-\n     }\n \n \n     public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n \n     public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserLax(false, chop, lazyChop, false, events), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n \n     public JsonParserAndMapper createCharacterSourceParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n-\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n \n-    public JsonParserAndMapper createJsonCharArrayParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n \n+    public JsonParserAndMapper createJsonCharArrayParser() {\n+        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(), createMapper());\n         jsonParser.setCharset(charset);\n         return jsonParser;\n     }\n@@ -199,20 +178,17 @@ public class JsonParserFactory {\n         return createFastParser();\n     }\n \n+\n     public JsonParserAndMapper createJsonParserForJsonPath() {\n         return createFastParser();\n     }\n \n-    public JsonParserAndMapper create() {\n-\n \n+    public JsonParserAndMapper create() {\n         if (charset == null) {\n             charset = Charsets.UTF_8;\n         }\n-\n-        return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+        return new JsonMappingParser(createMapper(), charset, lax, chop, lazyChop);\n     }\n \n \n@@ -226,9 +202,9 @@ public class JsonParserFactory {\n         return this;\n     }\n \n+\n     public boolean isUseFieldsFirst() {\n         return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n-\n     }\n \n \n@@ -255,14 +231,15 @@ public class JsonParserFactory {\n         return this;\n     }\n \n+\n     public boolean isUseAnnotations() {\n         return useAnnotations;\n     }\n \n+\n     public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n         this.useAnnotations = useAnnotations;\n         return this;\n-\n     }\n \n \n@@ -271,14 +248,15 @@ public class JsonParserFactory {\n         return this;\n     }\n \n+\n     public boolean isCaseInsensitiveFields() {\n         return caseInsensitiveFields;\n     }\n \n+\n     public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n         this.caseInsensitiveFields = caseInsensitiveFields;\n         return this;\n-\n     }\n \n \n@@ -286,42 +264,49 @@ public class JsonParserFactory {\n         return ignoreSet;\n     }\n \n+\n     public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n         this.ignoreSet = ignoreSet;\n         return this;\n     }\n \n+\n     public String getView() {\n         return view;\n     }\n \n+\n     public JsonParserFactory setView(String view) {\n         this.view = view;\n         return this;\n     }\n \n+\n     public boolean isRespectIgnore() {\n         return respectIgnore;\n     }\n \n+\n     public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n         this.respectIgnore = respectIgnore;\n         return this;\n     }\n \n+\n     public JsonParserFactory acceptSingleValueAsArray() {\n         this.acceptSingleValueAsArray = true;\n         return this;\n     }\n \n+\n     public boolean isAcceptSingleValueAsArray() {\n         return acceptSingleValueAsArray;\n     }\n \n+\n     public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n         this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n         return this;\n-\n     }\n \n \n@@ -330,7 +315,8 @@ public class JsonParserFactory {\n         return this;\n     }\n \n+\n     public boolean isCheckDatesSet() {\n         return checkDates;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 85
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_random/16/JsonParserFactory.java\nindex 4551d2d259..c7717cc791 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_random/16/JsonParserFactory.java\n@@ -114,223 +114,222 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n-            return new MapperSimple(fieldAccessType.create(true));\n-        }\n-        return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n-    }\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n+        && Str.isEmpty(view) && respectIgnore) {\n+    return new MapperSimple(fieldAccessType.create(true));\n+}\n+return new MapperComplex(fieldAccessType, useAnnotations,\n+        caseInsensitiveFields, ignoreSet, view,\n+        respectIgnore, acceptSingleValueAsArray);\n+}\n \n \n-    public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createFastObjectMapperParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonFastParser(true),\n+            createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createUTF8DirectByteParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonUTF8Parser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.UTF_8);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.UTF_8);\n+    return jsonParser;\n \n-    }\n+}\n \n-    public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createASCIIParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonAsciiParser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.US_ASCII);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.US_ASCII);\n+    return jsonParser;\n \n-    }\n+}\n \n \n-    public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n+public JsonParserAndMapper createLaxParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, false, events),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createCharacterSourceParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n+public JsonParserAndMapper createCharacterSourceParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n-\n-    public JsonParserAndMapper createJsonCharArrayParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createJsonCharArrayParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n+            createMapper());\n \n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-    public JsonParserAndMapper createLazyFinalParser() {\n-        return createFastParser();\n-    }\n \n-    public JsonParserAndMapper createJsonParserForJsonPath() {\n-        return createFastParser();\n-    }\n+public JsonParserAndMapper createLazyFinalParser() {\n+    return createFastParser();\n+}\n \n-    public JsonParserAndMapper create() {\n+public JsonParserAndMapper createJsonParserForJsonPath() {\n+    return createFastParser();\n+}\n \n+public JsonParserAndMapper create() {\n \n-        if (charset == null) {\n-            charset = Charsets.UTF_8;\n-        }\n \n-        return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+    if (charset == null) {\n+        charset = Charsets.UTF_8;\n     }\n \n+    return new JsonMappingParser(\n+            createMapper(), charset,\n+            lax, chop, lazyChop);\n+}\n \n-    public boolean isUsePropertiesFirst() {\n-        return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n-    }\n \n+public boolean isUsePropertiesFirst() {\n+    return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n+}\n \n-    public JsonParserFactory usePropertiesFirst() {\n-        fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n-        return this;\n-    }\n \n-    public boolean isUseFieldsFirst() {\n-        return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n+public JsonParserFactory usePropertiesFirst() {\n+    fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n+    return this;\n+}\n \n-    }\n+public boolean isUseFieldsFirst() {\n+    return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n \n+}\n \n-    public JsonParserFactory useFieldsFirst() {\n-        this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsFirst() {\n+    this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useFieldsOnly() {\n-        this.fieldAccessType = FieldAccessMode.FIELD;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsOnly() {\n+    this.fieldAccessType = FieldAccessMode.FIELD;\n+    return this;\n+}\n \n-    public JsonParserFactory usePropertyOnly() {\n-        this.fieldAccessType = FieldAccessMode.PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory usePropertyOnly() {\n+    this.fieldAccessType = FieldAccessMode.PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useAnnotations() {\n-        this.useAnnotations = true;\n-        return this;\n-    }\n \n-    public boolean isUseAnnotations() {\n-        return useAnnotations;\n-    }\n+public JsonParserFactory useAnnotations() {\n+    this.useAnnotations = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n-        this.useAnnotations = useAnnotations;\n-        return this;\n+public boolean isUseAnnotations() {\n+    return useAnnotations;\n+}\n \n-    }\n+public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n+    this.useAnnotations = useAnnotations;\n+    return this;\n \n+}\n \n-    public JsonParserFactory caseInsensitiveFields() {\n-        this.caseInsensitiveFields = true;\n-        return this;\n-    }\n \n-    public boolean isCaseInsensitiveFields() {\n-        return caseInsensitiveFields;\n-    }\n+public JsonParserFactory caseInsensitiveFields() {\n+    this.caseInsensitiveFields = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n-        this.caseInsensitiveFields = caseInsensitiveFields;\n-        return this;\n+public boolean isCaseInsensitiveFields() {\n+    return caseInsensitiveFields;\n+}\n \n-    }\n+public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n+    this.caseInsensitiveFields = caseInsensitiveFields;\n+    return this;\n \n+}\n \n-    public Set<String> getIgnoreSet() {\n-        return ignoreSet;\n-    }\n \n-    public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n-        this.ignoreSet = ignoreSet;\n-        return this;\n-    }\n+public Set<String> getIgnoreSet() {\n+    return ignoreSet;\n+}\n \n-    public String getView() {\n-        return view;\n-    }\n+public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n+    this.ignoreSet = ignoreSet;\n+    return this;\n+}\n \n-    public JsonParserFactory setView(String view) {\n-        this.view = view;\n-        return this;\n-    }\n+public String getView() {\n+    return view;\n+}\n \n-    public boolean isRespectIgnore() {\n-        return respectIgnore;\n-    }\n+public JsonParserFactory setView(String view) {\n+    this.view = view;\n+    return this;\n+}\n \n-    public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n-        this.respectIgnore = respectIgnore;\n-        return this;\n-    }\n+public boolean isRespectIgnore() {\n+    return respectIgnore;\n+}\n \n-    public JsonParserFactory acceptSingleValueAsArray() {\n-        this.acceptSingleValueAsArray = true;\n-        return this;\n-    }\n+public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n+    this.respectIgnore = respectIgnore;\n+    return this;\n+}\n \n-    public boolean isAcceptSingleValueAsArray() {\n-        return acceptSingleValueAsArray;\n-    }\n+public JsonParserFactory acceptSingleValueAsArray() {\n+    this.acceptSingleValueAsArray = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n-        this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n-        return this;\n+public boolean isAcceptSingleValueAsArray() {\n+    return acceptSingleValueAsArray;\n+}\n \n-    }\n+public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n+    this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n+    return this;\n \n+}\n \n-    public JsonParserFactory setCheckDates(boolean flag) {\n-        this.checkDates = flag;\n-        return this;\n-    }\n \n-    public boolean isCheckDatesSet() {\n-        return checkDates;\n-    }\n+public JsonParserFactory setCheckDates(boolean flag) {\n+    this.checkDates = flag;\n+    return this;\n+}\n+\n+public boolean isCheckDatesSet() {\n+    return checkDates;\n+}\n }\n",
            "diff_size": 204
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_three_grams/16/JsonParserFactory.java\nindex 4551d2d259..c7717cc791 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/errored/1/16/JsonParserFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/fangjinuo-easyjson/styler_three_grams/16/JsonParserFactory.java\n@@ -114,223 +114,222 @@ public class JsonParserFactory {\n     }\n \n     private Mapper createMapper() {\n-        if (useAnnotations && !caseInsensitiveFields &&\n-                !acceptSingleValueAsArray && ignoreSet == null\n-                && Str.isEmpty(view) && respectIgnore) {\n-            return new MapperSimple(fieldAccessType.create(true));\n-        }\n-        return new MapperComplex(fieldAccessType, useAnnotations,\n-                caseInsensitiveFields, ignoreSet, view,\n-                respectIgnore, acceptSingleValueAsArray);\n-    }\n+        if (useAnnotations && !caseInsensitiveFields && !acceptSingleValueAsArray && ignoreSet == null\n+        && Str.isEmpty(view) && respectIgnore) {\n+    return new MapperSimple(fieldAccessType.create(true));\n+}\n+return new MapperComplex(fieldAccessType, useAnnotations,\n+        caseInsensitiveFields, ignoreSet, view,\n+        respectIgnore, acceptSingleValueAsArray);\n+}\n \n \n-    public JsonParserAndMapper createFastObjectMapperParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonFastParser(true),\n-                createMapper());\n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createFastObjectMapperParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonFastParser(true),\n+            createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createUTF8DirectByteParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonUTF8Parser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createUTF8DirectByteParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonUTF8Parser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.UTF_8);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.UTF_8);\n+    return jsonParser;\n \n-    }\n+}\n \n-    public JsonParserAndMapper createASCIIParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonAsciiParser(),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createASCIIParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonAsciiParser(),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(Charsets.US_ASCII);\n-        return jsonParser;\n+    jsonParser.setCharset(Charsets.US_ASCII);\n+    return jsonParser;\n \n-    }\n+}\n \n \n-    public JsonParserAndMapper createLaxParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, checkDates),\n-                createMapper());\n+public JsonParserAndMapper createLaxParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, checkDates),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n-                new JsonParserLax(false, chop, lazyChop, false, events),\n-                createMapper()\n-        );\n+public JsonParserAndMapper createParserWithEvents(JsonParserEvents events) {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(\n+            new JsonParserLax(false, chop, lazyChop, false, events),\n+            createMapper()\n+    );\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n \n-    public JsonParserAndMapper createCharacterSourceParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n-                createMapper());\n+public JsonParserAndMapper createCharacterSourceParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserUsingCharacterSource(),\n+            createMapper());\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n-\n-    public JsonParserAndMapper createJsonCharArrayParser() {\n-        BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n-                createMapper());\n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-        jsonParser.setCharset(charset);\n-        return jsonParser;\n-    }\n+public JsonParserAndMapper createJsonCharArrayParser() {\n+    BaseJsonParserAndMapper jsonParser = new BaseJsonParserAndMapper(new JsonParserCharArray(),\n+            createMapper());\n \n+    jsonParser.setCharset(charset);\n+    return jsonParser;\n+}\n \n-    public JsonParserAndMapper createLazyFinalParser() {\n-        return createFastParser();\n-    }\n \n-    public JsonParserAndMapper createJsonParserForJsonPath() {\n-        return createFastParser();\n-    }\n+public JsonParserAndMapper createLazyFinalParser() {\n+    return createFastParser();\n+}\n \n-    public JsonParserAndMapper create() {\n+public JsonParserAndMapper createJsonParserForJsonPath() {\n+    return createFastParser();\n+}\n \n+public JsonParserAndMapper create() {\n \n-        if (charset == null) {\n-            charset = Charsets.UTF_8;\n-        }\n \n-        return new JsonMappingParser(\n-                createMapper(), charset,\n-                lax, chop, lazyChop);\n+    if (charset == null) {\n+        charset = Charsets.UTF_8;\n     }\n \n+    return new JsonMappingParser(\n+            createMapper(), charset,\n+            lax, chop, lazyChop);\n+}\n \n-    public boolean isUsePropertiesFirst() {\n-        return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n-    }\n \n+public boolean isUsePropertiesFirst() {\n+    return fieldAccessType == FieldAccessMode.PROPERTY_THEN_FIELD;\n+}\n \n-    public JsonParserFactory usePropertiesFirst() {\n-        fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n-        return this;\n-    }\n \n-    public boolean isUseFieldsFirst() {\n-        return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n+public JsonParserFactory usePropertiesFirst() {\n+    fieldAccessType = FieldAccessMode.PROPERTY_THEN_FIELD;\n+    return this;\n+}\n \n-    }\n+public boolean isUseFieldsFirst() {\n+    return this.fieldAccessType == FieldAccessMode.FIELD_THEN_PROPERTY;\n \n+}\n \n-    public JsonParserFactory useFieldsFirst() {\n-        this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsFirst() {\n+    this.fieldAccessType = FieldAccessMode.FIELD_THEN_PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useFieldsOnly() {\n-        this.fieldAccessType = FieldAccessMode.FIELD;\n-        return this;\n-    }\n \n+public JsonParserFactory useFieldsOnly() {\n+    this.fieldAccessType = FieldAccessMode.FIELD;\n+    return this;\n+}\n \n-    public JsonParserFactory usePropertyOnly() {\n-        this.fieldAccessType = FieldAccessMode.PROPERTY;\n-        return this;\n-    }\n \n+public JsonParserFactory usePropertyOnly() {\n+    this.fieldAccessType = FieldAccessMode.PROPERTY;\n+    return this;\n+}\n \n-    public JsonParserFactory useAnnotations() {\n-        this.useAnnotations = true;\n-        return this;\n-    }\n \n-    public boolean isUseAnnotations() {\n-        return useAnnotations;\n-    }\n+public JsonParserFactory useAnnotations() {\n+    this.useAnnotations = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n-        this.useAnnotations = useAnnotations;\n-        return this;\n+public boolean isUseAnnotations() {\n+    return useAnnotations;\n+}\n \n-    }\n+public JsonParserFactory setUseAnnotations(boolean useAnnotations) {\n+    this.useAnnotations = useAnnotations;\n+    return this;\n \n+}\n \n-    public JsonParserFactory caseInsensitiveFields() {\n-        this.caseInsensitiveFields = true;\n-        return this;\n-    }\n \n-    public boolean isCaseInsensitiveFields() {\n-        return caseInsensitiveFields;\n-    }\n+public JsonParserFactory caseInsensitiveFields() {\n+    this.caseInsensitiveFields = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n-        this.caseInsensitiveFields = caseInsensitiveFields;\n-        return this;\n+public boolean isCaseInsensitiveFields() {\n+    return caseInsensitiveFields;\n+}\n \n-    }\n+public JsonParserFactory setCaseInsensitiveFields(boolean caseInsensitiveFields) {\n+    this.caseInsensitiveFields = caseInsensitiveFields;\n+    return this;\n \n+}\n \n-    public Set<String> getIgnoreSet() {\n-        return ignoreSet;\n-    }\n \n-    public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n-        this.ignoreSet = ignoreSet;\n-        return this;\n-    }\n+public Set<String> getIgnoreSet() {\n+    return ignoreSet;\n+}\n \n-    public String getView() {\n-        return view;\n-    }\n+public JsonParserFactory setIgnoreSet(Set<String> ignoreSet) {\n+    this.ignoreSet = ignoreSet;\n+    return this;\n+}\n \n-    public JsonParserFactory setView(String view) {\n-        this.view = view;\n-        return this;\n-    }\n+public String getView() {\n+    return view;\n+}\n \n-    public boolean isRespectIgnore() {\n-        return respectIgnore;\n-    }\n+public JsonParserFactory setView(String view) {\n+    this.view = view;\n+    return this;\n+}\n \n-    public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n-        this.respectIgnore = respectIgnore;\n-        return this;\n-    }\n+public boolean isRespectIgnore() {\n+    return respectIgnore;\n+}\n \n-    public JsonParserFactory acceptSingleValueAsArray() {\n-        this.acceptSingleValueAsArray = true;\n-        return this;\n-    }\n+public JsonParserFactory setRespectIgnore(boolean respectIgnore) {\n+    this.respectIgnore = respectIgnore;\n+    return this;\n+}\n \n-    public boolean isAcceptSingleValueAsArray() {\n-        return acceptSingleValueAsArray;\n-    }\n+public JsonParserFactory acceptSingleValueAsArray() {\n+    this.acceptSingleValueAsArray = true;\n+    return this;\n+}\n \n-    public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n-        this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n-        return this;\n+public boolean isAcceptSingleValueAsArray() {\n+    return acceptSingleValueAsArray;\n+}\n \n-    }\n+public JsonParserFactory setAcceptSingleValueAsArray(boolean acceptSingleValueAsArray) {\n+    this.acceptSingleValueAsArray = acceptSingleValueAsArray;\n+    return this;\n \n+}\n \n-    public JsonParserFactory setCheckDates(boolean flag) {\n-        this.checkDates = flag;\n-        return this;\n-    }\n \n-    public boolean isCheckDatesSet() {\n-        return checkDates;\n-    }\n+public JsonParserFactory setCheckDates(boolean flag) {\n+    this.checkDates = flag;\n+    return this;\n+}\n+\n+public boolean isCheckDatesSet() {\n+    return checkDates;\n+}\n }\n",
            "diff_size": 204
        }
    ]
}