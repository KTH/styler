{
    "error_id": "156",
    "information": {
        "errors": [
            {
                "line": "28",
                "severity": "error",
                "message": "Dont use repackaged libraries",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import com.fasterxml.jackson.core.JsonParser;\n\nimport jersey.repackaged.com.google.common.collect.Iterators;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.extern.slf4j.Slf4j;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/156/StringTypeDictionary.java\nindex db6e4c0f42..ff5eb10580 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/156/StringTypeDictionary.java\n@@ -23,9 +23,7 @@ import com.bakdata.conquery.models.types.CTypeVarInt;\n import com.bakdata.conquery.models.types.MajorTypeId;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.core.JsonParser;\n-\n-import jersey.repackaged.com.google.common.collect.Iterators;\n+import com.fasterxml.jackson.core.JsonParser;import jersey.repackaged.com.google.common.collect.Iterators;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n@@ -38,12 +36,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n \t@JsonIgnore\n \tprivate transient Dictionary dictionary = new MapDictionary(dictionaryId);\n-\t\n+\n \t@JsonCreator\n \tpublic StringTypeDictionary(VarIntType numberType) {\n \t\tsuper(MajorTypeId.STRING, numberType);\n \t}\n-\t\n+\n \t@Override\n \tpublic void init(DatasetId dataset) {\n \t\tdictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n@@ -54,15 +52,15 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic byte[] createScriptValue(Number value) {\n \t\treturn getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(int value) {\n \t\treturn dictionary.getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(Number value) {\n \t\treturn getElement(numberType.toInt(value));\n \t}\n-\t\n+\n \t@Override\n \tpublic void writeHeader(OutputStream out) throws IOException {\n \t\tJackson.BINARY_MAPPER.writeValue(out, dictionary);\n@@ -72,7 +70,7 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void readHeader(JsonParser input) throws IOException {\n \t\tdictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n \t}\n-\t\n+\n \t@Override\n \tpublic void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n \t\tdictionary.setName(dictionaryId.getDictionary());\n@@ -84,11 +82,11 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void loadExternalInfos(NamespacedStorage storage) {\n \t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n \t}\n-\t\n+\n \tpublic int size() {\n \t\treturn dictionary.size();\n \t}\n-\t\n+\n \tpublic int getId(byte[] value) {\n \t\treturn dictionary.getId(value);\n \t}\n@@ -96,12 +94,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic Iterator<byte[]> iterator() {\n \t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n \t}\n-\t\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n \t}\n-\t\n+\n \t@Override\n \tpublic long estimateTypeSize() {\n \t\treturn dictionary.estimateMemoryConsumption();\n",
            "diff_size": 13
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Dont use repackaged libraries",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/156/StringTypeDictionary.java\nindex db6e4c0f42..1b1a4e6d0d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/156/StringTypeDictionary.java\n@@ -30,95 +30,98 @@ import lombok.Getter;\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n-@Getter @Setter @Slf4j\n+@Getter\n+@Setter\n+@Slf4j\n @CPSType(base = CType.class, id = \"STRING_DICTIONARY\")\n public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \n-\t@NotNull @Nonnull\n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n-\t@JsonIgnore\n-\tprivate transient Dictionary dictionary = new MapDictionary(dictionaryId);\n-\t\n-\t@JsonCreator\n-\tpublic StringTypeDictionary(VarIntType numberType) {\n-\t\tsuper(MajorTypeId.STRING, numberType);\n-\t}\n-\t\n-\t@Override\n-\tpublic void init(DatasetId dataset) {\n-\t\tdictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n-\t\tdictionary.setDataset(dataset);\n-\t}\n-\n-\t@Override\n-\tpublic byte[] createScriptValue(Number value) {\n-\t\treturn getElement(value);\n-\t}\n-\t\n-\tpublic byte[] getElement(int value) {\n-\t\treturn dictionary.getElement(value);\n-\t}\n-\t\n-\tpublic byte[] getElement(Number value) {\n-\t\treturn getElement(numberType.toInt(value));\n-\t}\n-\t\n-\t@Override\n-\tpublic void writeHeader(OutputStream out) throws IOException {\n-\t\tJackson.BINARY_MAPPER.writeValue(out, dictionary);\n-\t}\n-\n-\t@Override\n-\tpublic void readHeader(JsonParser input) throws IOException {\n-\t\tdictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n-\t}\n-\t\n-\t@Override\n-\tpublic void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n-\t\tdictionary.setName(dictionaryId.getDictionary());\n-\t\tdictionary.setDataset(dictionaryId.getDataset());\n-\t\tdictionaryConsumer.accept(dictionary);\n-\t}\n-\n-\t@Override\n-\tpublic void loadExternalInfos(NamespacedStorage storage) {\n-\t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n-\t}\n-\t\n-\tpublic int size() {\n-\t\treturn dictionary.size();\n-\t}\n-\t\n-\tpublic int getId(byte[] value) {\n-\t\treturn dictionary.getId(value);\n-\t}\n-\n-\tpublic Iterator<byte[]> iterator() {\n-\t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n-\t}\n-\t\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n-\t}\n-\t\n-\t@Override\n-\tpublic long estimateTypeSize() {\n-\t\treturn dictionary.estimateMemoryConsumption();\n-\t}\n-\n-\tpublic void adaptUnderlyingDictionary(Dictionary newDict, VarIntType newNumberType) {\n-\t\tdictionaryId = newDict.getId();\n-\t\tdictionary = newDict;\n-\t\tif(newNumberType.estimateMemoryBitWidth() > numberType.estimateMemoryBitWidth()) {\n-\t\t\tlog.warn(\n-\t\t\t\t\"The width of a column is increased from {} to {} bits because of the shared dictionary {}\",\n-\t\t\t\tnumberType.estimateMemoryBitWidth(),\n-\t\t\t\tnewNumberType.estimateMemoryBitWidth(),\n-\t\t\t\tnewDict.getId()\n-\t\t\t);\n-\t\t}\n-\t\tnumberType = newNumberType;\n-\t\tthis.setPrimitiveType(newNumberType.getPrimitiveType());\n-\t}\n+    @NotNull\n+    @Nonnull\n+    private DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n+    @JsonIgnore\n+    private transient Dictionary dictionary = new MapDictionary(dictionaryId);\n+\n+    @JsonCreator\n+    public StringTypeDictionary(VarIntType numberType) {\n+        super(MajorTypeId.STRING, numberType);\n+    }\n+\n+    @Override\n+    public void init(DatasetId dataset) {\n+        dictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n+        dictionary.setDataset(dataset);\n+    }\n+\n+    @Override\n+    public byte[] createScriptValue(Number value) {\n+        return getElement(value);\n+    }\n+\n+    public byte[] getElement(int value) {\n+        return dictionary.getElement(value);\n+    }\n+\n+    public byte[] getElement(Number value) {\n+        return getElement(numberType.toInt(value));\n+    }\n+\n+    @Override\n+    public void writeHeader(OutputStream out) throws IOException {\n+        Jackson.BINARY_MAPPER.writeValue(out, dictionary);\n+    }\n+\n+    @Override\n+    public void readHeader(JsonParser input) throws IOException {\n+        dictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n+    }\n+\n+    @Override\n+    public void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n+        dictionary.setName(dictionaryId.getDictionary());\n+        dictionary.setDataset(dictionaryId.getDataset());\n+        dictionaryConsumer.accept(dictionary);\n+    }\n+\n+    @Override\n+    public void loadExternalInfos(NamespacedStorage storage) {\n+        dictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n+    }\n+\n+    public int size() {\n+        return dictionary.size();\n+    }\n+\n+    public int getId(byte[] value) {\n+        return dictionary.getId(value);\n+    }\n+\n+    public Iterator<byte[]> iterator() {\n+        return Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n+    }\n+\n+    @Override\n+    public long estimateTypeSize() {\n+        return dictionary.estimateMemoryConsumption();\n+    }\n+\n+    public void adaptUnderlyingDictionary(Dictionary newDict, VarIntType newNumberType) {\n+        dictionaryId = newDict.getId();\n+        dictionary = newDict;\n+        if (newNumberType.estimateMemoryBitWidth() > numberType.estimateMemoryBitWidth()) {\n+            log.warn(\n+                \"The width of a column is increased from {} to {} bits because of the shared dictionary {}\",\n+                numberType.estimateMemoryBitWidth(),\n+                newNumberType.estimateMemoryBitWidth(),\n+                newDict.getId()\n+            );\n+        }\n+        numberType = newNumberType;\n+        this.setPrimitiveType(newNumberType.getPrimitiveType());\n+    }\n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Dont use repackaged libraries",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/156/StringTypeDictionary.java\nindex db6e4c0f42..76ce12e128 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/156/StringTypeDictionary.java\n@@ -121,4 +121,4 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \t\tnumberType = newNumberType;\n \t\tthis.setPrimitiveType(newNumberType.getPrimitiveType());\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Dont use repackaged libraries",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/156/StringTypeDictionary.java\nindex db6e4c0f42..be6df276f1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/156/StringTypeDictionary.java\n@@ -6,10 +6,8 @@ import java.util.Iterator;\n import java.util.Objects;\n import java.util.UUID;\n import java.util.function.Consumer;\n-\n import javax.annotation.Nonnull;\n import javax.validation.constraints.NotNull;\n-\n import com.bakdata.conquery.io.cps.CPSType;\n import com.bakdata.conquery.io.jackson.Jackson;\n import com.bakdata.conquery.io.xodus.NamespacedStorage;\n@@ -24,101 +22,98 @@ import com.bakdata.conquery.models.types.MajorTypeId;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.core.JsonParser;\n-\n import jersey.repackaged.com.google.common.collect.Iterators;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n-@Getter @Setter @Slf4j\n-@CPSType(base = CType.class, id = \"STRING_DICTIONARY\")\n+@Getter\n+@Setter\n+@Slf4j\n+@CPSType(base= CType.class, id= \"STRING_DICTIONARY\")\n public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \n-\t@NotNull @Nonnull\n-\tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n-\t@JsonIgnore\n-\tprivate transient Dictionary dictionary = new MapDictionary(dictionaryId);\n-\t\n-\t@JsonCreator\n-\tpublic StringTypeDictionary(VarIntType numberType) {\n-\t\tsuper(MajorTypeId.STRING, numberType);\n-\t}\n-\t\n-\t@Override\n-\tpublic void init(DatasetId dataset) {\n-\t\tdictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n-\t\tdictionary.setDataset(dataset);\n-\t}\n-\n-\t@Override\n-\tpublic byte[] createScriptValue(Number value) {\n-\t\treturn getElement(value);\n-\t}\n-\t\n-\tpublic byte[] getElement(int value) {\n-\t\treturn dictionary.getElement(value);\n-\t}\n-\t\n-\tpublic byte[] getElement(Number value) {\n-\t\treturn getElement(numberType.toInt(value));\n-\t}\n-\t\n-\t@Override\n-\tpublic void writeHeader(OutputStream out) throws IOException {\n-\t\tJackson.BINARY_MAPPER.writeValue(out, dictionary);\n-\t}\n-\n-\t@Override\n-\tpublic void readHeader(JsonParser input) throws IOException {\n-\t\tdictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n-\t}\n-\t\n-\t@Override\n-\tpublic void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n-\t\tdictionary.setName(dictionaryId.getDictionary());\n-\t\tdictionary.setDataset(dictionaryId.getDataset());\n-\t\tdictionaryConsumer.accept(dictionary);\n-\t}\n-\n-\t@Override\n-\tpublic void loadExternalInfos(NamespacedStorage storage) {\n-\t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n-\t}\n-\t\n-\tpublic int size() {\n-\t\treturn dictionary.size();\n-\t}\n-\t\n-\tpublic int getId(byte[] value) {\n-\t\treturn dictionary.getId(value);\n-\t}\n-\n-\tpublic Iterator<byte[]> iterator() {\n-\t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n-\t}\n-\t\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n-\t}\n-\t\n-\t@Override\n-\tpublic long estimateTypeSize() {\n-\t\treturn dictionary.estimateMemoryConsumption();\n-\t}\n-\n-\tpublic void adaptUnderlyingDictionary(Dictionary newDict, VarIntType newNumberType) {\n-\t\tdictionaryId = newDict.getId();\n-\t\tdictionary = newDict;\n-\t\tif(newNumberType.estimateMemoryBitWidth() > numberType.estimateMemoryBitWidth()) {\n-\t\t\tlog.warn(\n-\t\t\t\t\"The width of a column is increased from {} to {} bits because of the shared dictionary {}\",\n-\t\t\t\tnumberType.estimateMemoryBitWidth(),\n-\t\t\t\tnewNumberType.estimateMemoryBitWidth(),\n-\t\t\t\tnewDict.getId()\n-\t\t\t);\n-\t\t}\n-\t\tnumberType = newNumberType;\n-\t\tthis.setPrimitiveType(newNumberType.getPrimitiveType());\n-\t}\n-}\n+    @NotNull @Nonnull\n+    private DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n+    @JsonIgnore\n+    private transient Dictionary dictionary = new MapDictionary(dictionaryId);\n+\n+    @JsonCreator\n+    public StringTypeDictionary(VarIntType numberType) {\n+        super(MajorTypeId.STRING, numberType);\n+    }\n+\n+    @Override\n+    public void init(DatasetId dataset) {\n+        dictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n+        dictionary.setDataset(dataset);\n+    }\n+\n+    @Override\n+    public byte[] createScriptValue(Number value) {\n+        return getElement(value);\n+    }\n+\n+    public byte[] getElement(int value) {\n+        return dictionary.getElement(value);\n+    }\n+\n+    public byte[] getElement(Number value) {\n+        return getElement(numberType.toInt(value));\n+    }\n+\n+    @Override\n+    public void writeHeader(OutputStream out) throws IOException {\n+        Jackson.BINARY_MAPPER.writeValue(out, dictionary);\n+    }\n+\n+    @Override\n+    public void readHeader(JsonParser input) throws IOException {\n+        dictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n+    }\n+\n+    @Override\n+    public void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n+        dictionary.setName(dictionaryId.getDictionary());\n+        dictionary.setDataset(dictionaryId.getDataset());\n+        dictionaryConsumer.accept(dictionary);\n+    }\n+\n+    @Override\n+    public void loadExternalInfos(NamespacedStorage storage) {\n+        dictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n+    }\n+\n+    public int size() {\n+        return dictionary.size();\n+    }\n+\n+    public int getId(byte[] value) {\n+        return dictionary.getId(value);\n+    }\n+\n+    public Iterator<byte[]> iterator() {\n+        return Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"StringTypeDictionary[dictionary=\"+dictionary+\", numberType=\"+numberType +\"]\";\n+    }\n+\n+    @Override\n+    public long estimateTypeSize() {\n+        return dictionary.estimateMemoryConsumption();\n+    }\n+\n+    public void adaptUnderlyingDictionary(Dictionary newDict, VarIntType newNumberType) {\n+        dictionaryId = newDict.getId();\n+        dictionary = newDict;\n+\n+        if(newNumberType.estimateMemoryBitWidth() > numberType.estimateMemoryBitWidth()) {\n+            log.warn(\"The width of a column is increased from {} to {} bits because of the shared dictionary {}\", numberType.estimateMemoryBitWidth(), newNumberType.estimateMemoryBitWidth(), newDict.getId());\n+        }\n+        numberType = newNumberType;\n+        this.setPrimitiveType(newNumberType.getPrimitiveType());\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 95
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Dont use repackaged libraries",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/156/StringTypeDictionary.java\nindex db6e4c0f42..16a6107bbf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/156/StringTypeDictionary.java\n@@ -38,12 +38,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n \t@JsonIgnore\n \tprivate transient Dictionary dictionary = new MapDictionary(dictionaryId);\n-\t\n+\n \t@JsonCreator\n \tpublic StringTypeDictionary(VarIntType numberType) {\n \t\tsuper(MajorTypeId.STRING, numberType);\n \t}\n-\t\n+\n \t@Override\n \tpublic void init(DatasetId dataset) {\n \t\tdictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n@@ -54,15 +54,15 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic byte[] createScriptValue(Number value) {\n \t\treturn getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(int value) {\n \t\treturn dictionary.getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(Number value) {\n \t\treturn getElement(numberType.toInt(value));\n \t}\n-\t\n+\n \t@Override\n \tpublic void writeHeader(OutputStream out) throws IOException {\n \t\tJackson.BINARY_MAPPER.writeValue(out, dictionary);\n@@ -72,7 +72,7 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void readHeader(JsonParser input) throws IOException {\n \t\tdictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n \t}\n-\t\n+\n \t@Override\n \tpublic void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n \t\tdictionary.setName(dictionaryId.getDictionary());\n@@ -84,11 +84,11 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void loadExternalInfos(NamespacedStorage storage) {\n \t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n \t}\n-\t\n+\n \tpublic int size() {\n \t\treturn dictionary.size();\n \t}\n-\t\n+\n \tpublic int getId(byte[] value) {\n \t\treturn dictionary.getId(value);\n \t}\n@@ -96,12 +96,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic Iterator<byte[]> iterator() {\n \t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n \t}\n-\t\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n \t}\n-\t\n+\n \t@Override\n \tpublic long estimateTypeSize() {\n \t\treturn dictionary.estimateMemoryConsumption();\n",
            "diff_size": 10
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/156/StringTypeDictionary.java\nindex db6e4c0f42..ff5eb10580 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/156/StringTypeDictionary.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/156/StringTypeDictionary.java\n@@ -23,9 +23,7 @@ import com.bakdata.conquery.models.types.CTypeVarInt;\n import com.bakdata.conquery.models.types.MajorTypeId;\n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n-import com.fasterxml.jackson.core.JsonParser;\n-\n-import jersey.repackaged.com.google.common.collect.Iterators;\n+import com.fasterxml.jackson.core.JsonParser;import jersey.repackaged.com.google.common.collect.Iterators;\n import lombok.Getter;\n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n@@ -38,12 +36,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tprivate DictionaryId dictionaryId = new DictionaryId(new DatasetId(\"null\"), UUID.randomUUID().toString());\n \t@JsonIgnore\n \tprivate transient Dictionary dictionary = new MapDictionary(dictionaryId);\n-\t\n+\n \t@JsonCreator\n \tpublic StringTypeDictionary(VarIntType numberType) {\n \t\tsuper(MajorTypeId.STRING, numberType);\n \t}\n-\t\n+\n \t@Override\n \tpublic void init(DatasetId dataset) {\n \t\tdictionaryId = new DictionaryId(dataset, dictionaryId.getDictionary());\n@@ -54,15 +52,15 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic byte[] createScriptValue(Number value) {\n \t\treturn getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(int value) {\n \t\treturn dictionary.getElement(value);\n \t}\n-\t\n+\n \tpublic byte[] getElement(Number value) {\n \t\treturn getElement(numberType.toInt(value));\n \t}\n-\t\n+\n \t@Override\n \tpublic void writeHeader(OutputStream out) throws IOException {\n \t\tJackson.BINARY_MAPPER.writeValue(out, dictionary);\n@@ -72,7 +70,7 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void readHeader(JsonParser input) throws IOException {\n \t\tdictionary = Jackson.BINARY_MAPPER.readValue(input, Dictionary.class);\n \t}\n-\t\n+\n \t@Override\n \tpublic void storeExternalInfos(NamespacedStorage storage, Consumer<Dictionary> dictionaryConsumer) {\n \t\tdictionary.setName(dictionaryId.getDictionary());\n@@ -84,11 +82,11 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic void loadExternalInfos(NamespacedStorage storage) {\n \t\tdictionary = Objects.requireNonNull(storage.getDictionary(dictionaryId));\n \t}\n-\t\n+\n \tpublic int size() {\n \t\treturn dictionary.size();\n \t}\n-\t\n+\n \tpublic int getId(byte[] value) {\n \t\treturn dictionary.getId(value);\n \t}\n@@ -96,12 +94,12 @@ public class StringTypeDictionary extends CTypeVarInt<Integer> {\n \tpublic Iterator<byte[]> iterator() {\n \t\treturn Iterators.transform(dictionary.iterator(), DictionaryEntry::getValue);\n \t}\n-\t\n+\n \t@Override\n \tpublic String toString() {\n \t\treturn \"StringTypeDictionary[dictionary=\" + dictionary + \", numberType=\" + numberType + \"]\";\n \t}\n-\t\n+\n \t@Override\n \tpublic long estimateTypeSize() {\n \t\treturn dictionary.estimateMemoryConsumption();\n",
            "diff_size": 13
        }
    ]
}