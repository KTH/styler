{
    "error_id": "117",
    "information": {
        "errors": [
            {
                "line": "28",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    /**\n     * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n     * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n     *\n     * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n     * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/117/SecurityConfiguration.java\nindex 6cad637032..c8b659abc5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/117/SecurityConfiguration.java\n@@ -26,7 +26,7 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n     /**\n      * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n      * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n-     *\n+     * <p>\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n      */\n@@ -42,8 +42,8 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n     @Override\n     public void configure(WebSecurity web) throws Exception {\n         web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n+            .antMatchers(\"/static/**\")\n+            .antMatchers(\"/views/**\");\n     }\n \n     @Override\n@@ -51,18 +51,18 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n         final String prefix = \"/manager/\";\n         http\n             .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n+            .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n+            .and()\n             .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n+            .invalidSessionUrl(prefix + \"signin\")\n+            .and()\n             .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n+            .loginPage(prefix + \"signin\")\n+            .permitAll()\n+            .and()\n             .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n+            .logoutUrl(prefix + \"signout\")\n+            .and()\n             .httpBasic();\n     }\n \n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/117/SecurityConfiguration.java\nindex 6cad637032..906651e0f1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/117/SecurityConfiguration.java\n@@ -66,4 +66,4 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n             .httpBasic();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/117/SecurityConfiguration.java\nindex 6cad637032..a8412e8f99 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/117/SecurityConfiguration.java\n@@ -18,6 +18,8 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 07.01.2015\n  */\n+\n+\n @Configuration\n @EnableWebSecurity\n @Conditional(SteveProdCondition.class)\n@@ -30,40 +32,34 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n      */\n+\n     @Autowired\n     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication()\n-            .passwordEncoder(CONFIG.getAuth().getPasswordEncoder())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getEncodedPassword())\n-            .roles(\"ADMIN\");\n+        auth.inMemoryAuthentication().passwordEncoder(CONFIG.getAuth().getPasswordEncoder())\n+                                     .withUser(CONFIG.getAuth().getUserName())\n+                                     .password(CONFIG.getAuth().getEncodedPassword()).roles(\"ADMIN\");\n     }\n \n     @Override\n     public void configure(WebSecurity web) throws Exception {\n-        web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n+        web.ignoring().antMatchers(\"/static/**\").antMatchers(\"/views/**\");\n     }\n \n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n         final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n+        http.authorizeRequests().antMatchers(prefix + \"**\")\n+                                .hasRole(\"ADMIN\")\n+                                .and()\n+                                .sessionManagement()\n+                                .invalidSessionUrl(prefix + \"signin\")\n+                                .and()\n+                                .formLogin()\n+                                .loginPage(prefix + \"signin\")\n+                                .permitAll()\n+                                .and()\n+                                .logout()\n+                                .logoutUrl(prefix + \"signout\")\n+                                .and().httpBasic();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/117/SecurityConfiguration.java\nindex 6cad637032..6d60d57c93 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/117/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/117/SecurityConfiguration.java\n@@ -21,49 +21,46 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n @Configuration\n @EnableWebSecurity\n @Conditional(SteveProdCondition.class)\n-public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n-\n-    /**\n+public class SecurityConfiguration extends WebSecurityConfigurerAdapter { /**\n      * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n      * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n      *\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n-     */\n-    @Autowired\n-    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication()\n-            .passwordEncoder(CONFIG.getAuth().getPasswordEncoder())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getEncodedPassword())\n-            .roles(\"ADMIN\");\n-    }\n+     */@Autowired\n+public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.inMemoryAuthentication()\n+        .passwordEncoder(CONFIG.getAuth().getPasswordEncoder())\n+        .withUser(CONFIG.getAuth().getUserName())\n+        .password(CONFIG.getAuth().getEncodedPassword())\n+        .roles(\"ADMIN\");\n+}\n \n-    @Override\n-    public void configure(WebSecurity web) throws Exception {\n-        web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n-    }\n+@Override\n+public void configure(WebSecurity web) throws Exception {\n+    web.ignoring()\n+       .antMatchers(\"/static/**\")\n+       .antMatchers(\"/views/**\");\n+}\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n-    }\n+@Override\n+protected void configure(HttpSecurity http) throws Exception {\n+    final String prefix = \"/manager/\";\n+    http\n+        .authorizeRequests()\n+            .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n+            .and()\n+        .sessionManagement()\n+            .invalidSessionUrl(prefix + \"signin\")\n+            .and()\n+        .formLogin()\n+            .loginPage(prefix + \"signin\")\n+            .permitAll()\n+            .and()\n+        .logout()\n+            .logoutUrl(prefix + \"signout\")\n+            .and()\n+        .httpBasic();\n+}\n \n }\n",
            "diff_size": 37
        }
    ]
}