{
    "error_id": "253",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 165).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        //validateDemoConfigData(reqJson);\n\n        List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n        ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n\n        dataFlowContext.setResponseEntity(responseEntity);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..93640a73bf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/253/QueryBusinessTypeConfigListener.java\n@@ -52,9 +52,7 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n         JSONObject reqJson = dataFlowContext.getReqJson();\n-        //validateDemoConfigData(reqJson);\n-\n-        List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n+        //validateDemoConfigData(reqJson); List<CbusinesstypeDto>cbusinesstypeDto=iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n \n         dataFlowContext.setResponseEntity(responseEntity);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..01e1632129 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/253/QueryBusinessTypeConfigListener.java\n@@ -29,59 +29,60 @@ import java.util.List;\n @Java110Listener(\"queryBusinessTypeConfig\")\n public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowListener {\n \n-    @Autowired\n-    private ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl;\n-\n-    @Override\n-    public String getServiceCode() {\n-        return ServiceCodeConstant.SERVICE_CODE_QUERY_BUSINESSTYPE_CONFIG;\n-    }\n-\n-    @Override\n-    public HttpMethod getHttpMethod() {\n-        return HttpMethod.GET;\n-    }\n-\n-    /**\n-     * \u4e1a\u52a1\u5c42\u6570\u636e\u5904\u7406\n-     *\n-     * @param event \u65f6\u95f4\u5bf9\u8c61\n-     */\n-    @Override\n-    public void soService(ServiceDataFlowEvent event) {\n-        DataFlowContext dataFlowContext = event.getDataFlowContext();\n-        //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n-        JSONObject reqJson = dataFlowContext.getReqJson();\n-        //validateDemoConfigData(reqJson);\n-\n-        List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n-        ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n-\n-        dataFlowContext.setResponseEntity(responseEntity);\n-    }\n-\n-    /**\n-     * \u6821\u9a8c\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n-     *\n-     * @param reqJson \u5305\u542b\u67e5\u8be2\u6761\u4ef6\n-     */\n-    private void validateDemoConfigData(JSONObject reqJson) {\n-        Assert.jsonObjectHaveKey(reqJson, \"demoName\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoName\u4fe1\u606f\");\n-        Assert.jsonObjectHaveKey(reqJson, \"demoValue\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoValue\u4fe1\u606f\");\n-\n-\n-    }\n-\n-    @Override\n-    public int getOrder() {\n-        return super.DEFAULT_ORDER;\n-    }\n-\n-    public ICbusinesstypeInnerServiceSMO getiCbusinesstypeInnerServiceSMOImpl() {\n-        return iCbusinesstypeInnerServiceSMOImpl;\n-    }\n-\n-    public void setiCbusinesstypeInnerServiceSMOImpl(ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl) {\n-        this.iCbusinesstypeInnerServiceSMOImpl = iCbusinesstypeInnerServiceSMOImpl;\n-    }\n+  @Autowired\n+  private ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl;\n+\n+  @Override\n+  public String getServiceCode() {\n+    return ServiceCodeConstant.SERVICE_CODE_QUERY_BUSINESSTYPE_CONFIG;\n+  }\n+\n+  @Override\n+  public HttpMethod getHttpMethod() {\n+    return HttpMethod.GET;\n+  }\n+\n+  /**\n+   * \u4e1a\u52a1\u5c42\u6570\u636e\u5904\u7406\n+   *\n+   * @param event \u65f6\u95f4\u5bf9\u8c61\n+   */\n+  @Override\n+  public void soService(ServiceDataFlowEvent event) {\n+    DataFlowContext dataFlowContext = event.getDataFlowContext();\n+    //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n+    JSONObject reqJson = dataFlowContext.getReqJson();\n+    //validateDemoConfigData(reqJson);\n+\n+    List<CbusinesstypeDto> cbusinesstypeDto =\n+      iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n+    ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n+\n+    dataFlowContext.setResponseEntity(responseEntity);\n+  }\n+\n+  /**\n+   * \u6821\u9a8c\u67e5\u8be2\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n+   *\n+   * @param reqJson \u5305\u542b\u67e5\u8be2\u6761\u4ef6\n+   */\n+  private void validateDemoConfigData(JSONObject reqJson) {\n+    Assert.jsonObjectHaveKey(reqJson, \"demoName\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoName\u4fe1\u606f\");\n+    Assert.jsonObjectHaveKey(reqJson, \"demoValue\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoValue\u4fe1\u606f\");\n+\n+\n+  }\n+\n+  @Override\n+  public int getOrder() {\n+    return super.DEFAULT_ORDER;\n+  }\n+\n+  public ICbusinesstypeInnerServiceSMO getiCbusinesstypeInnerServiceSMOImpl() {\n+    return iCbusinesstypeInnerServiceSMOImpl;\n+  }\n+\n+  public void setiCbusinesstypeInnerServiceSMOImpl(ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl) {\n+    this.iCbusinesstypeInnerServiceSMOImpl = iCbusinesstypeInnerServiceSMOImpl;\n+  }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..2cadf4640a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/253/QueryBusinessTypeConfigListener.java\n@@ -84,4 +84,4 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n     public void setiCbusinesstypeInnerServiceSMOImpl(ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl) {\n         this.iCbusinesstypeInnerServiceSMOImpl = iCbusinesstypeInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..036aa87a5d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/253/QueryBusinessTypeConfigListener.java\n@@ -1,6 +1,5 @@\n package com.java110.api.listener.businesstype;\n \n-\n import com.alibaba.fastjson.JSONObject;\n import com.java110.api.listener.AbstractServiceApiDataFlowListener;\n import com.java110.utils.constant.ServiceCodeConstant;\n@@ -15,7 +14,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.List;\n \n /**\n@@ -26,6 +24,8 @@ import java.util.List;\n  * @Version 1.0\n  * add by wuxw 2019/4/24\n  **/\n+\n+\n @Java110Listener(\"queryBusinessTypeConfig\")\n public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowListener {\n \n@@ -37,6 +37,7 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n         return ServiceCodeConstant.SERVICE_CODE_QUERY_BUSINESSTYPE_CONFIG;\n     }\n \n+\n     @Override\n     public HttpMethod getHttpMethod() {\n         return HttpMethod.GET;\n@@ -47,16 +48,16 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n      *\n      * @param event \u65f6\u95f4\u5bf9\u8c61\n      */\n+\n+\n     @Override\n     public void soService(ServiceDataFlowEvent event) {\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n         JSONObject reqJson = dataFlowContext.getReqJson();\n         //validateDemoConfigData(reqJson);\n-\n         List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n-\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n \n@@ -65,13 +66,14 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n      *\n      * @param reqJson \u5305\u542b\u67e5\u8be2\u6761\u4ef6\n      */\n+\n+\n     private void validateDemoConfigData(JSONObject reqJson) {\n         Assert.jsonObjectHaveKey(reqJson, \"demoName\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoName\u4fe1\u606f\");\n         Assert.jsonObjectHaveKey(reqJson, \"demoValue\", \"\u8bf7\u6c42\u4e2d\u672a\u5305\u542bdemoValue\u4fe1\u606f\");\n-\n-\n     }\n \n+\n     @Override\n     public int getOrder() {\n         return super.DEFAULT_ORDER;\n@@ -84,4 +86,4 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n     public void setiCbusinesstypeInnerServiceSMOImpl(ICbusinesstypeInnerServiceSMO iCbusinesstypeInnerServiceSMOImpl) {\n         this.iCbusinesstypeInnerServiceSMOImpl = iCbusinesstypeInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "column": "54",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "56",
                    "column": "54",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "57",
                    "column": "69",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..05d2743a89 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/253/QueryBusinessTypeConfigListener.java\n@@ -53,9 +53,9 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n         //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n         JSONObject reqJson = dataFlowContext.getReqJson();\n         //validateDemoConfigData(reqJson);\n-\n-        List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n-        ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n+            List < CbusinesstypeDto >cbusinesstypeDto=iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(\n+        BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));ResponseEntity<\n+        String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n \n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/253/QueryBusinessTypeConfigListener.java\nindex d1d16766a8..93640a73bf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/253/QueryBusinessTypeConfigListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/253/QueryBusinessTypeConfigListener.java\n@@ -52,9 +52,7 @@ public class QueryBusinessTypeConfigListener extends AbstractServiceApiDataFlowL\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         //\u83b7\u53d6\u8bf7\u6c42\u6570\u636e\n         JSONObject reqJson = dataFlowContext.getReqJson();\n-        //validateDemoConfigData(reqJson);\n-\n-        List<CbusinesstypeDto> cbusinesstypeDto = iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n+        //validateDemoConfigData(reqJson); List<CbusinesstypeDto>cbusinesstypeDto=iCbusinesstypeInnerServiceSMOImpl.queryCbusinesstypes(BeanConvertUtil.covertBean(reqJson, CbusinesstypeDto.class));\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(cbusinesstypeDto), HttpStatus.OK);\n \n         dataFlowContext.setResponseEntity(responseEntity);\n",
            "diff_size": 3
        }
    ]
}