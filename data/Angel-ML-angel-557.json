{
    "error_id": "557",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/557/IServerRowsStorageOp.java\nindex 3d4f9a4b92..9e07cbc097 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/557/IServerRowsStorageOp.java\n@@ -27,50 +27,57 @@ import java.util.Map.Entry;\n  */\n public interface IServerRowsStorageOp {\n \n-  /**\n-   * Get the server row from storage use row id\n-   * @param rowId row id\n-   * @return server row\n-   */\n-  ServerRow getRow(int rowId);\n+    /**\n+     * Get the server row from storage use row id\n+     *\n+     * @param rowId row id\n+     * @return server row\n+     */\n+    ServerRow getRow(int rowId);\n \n-  /**\n-   * Get batch of server rows use row ids\n-   * @param rowIds row ids\n-   * @return batch of server rows\n-   */\n-  List<ServerRow> getRows(List<Integer> rowIds);\n+    /**\n+     * Get batch of server rows use row ids\n+     *\n+     * @param rowIds row ids\n+     * @return batch of server rows\n+     */\n+    List<ServerRow> getRows(List<Integer> rowIds);\n \n-  /**\n-   * Put the server row to the storage\n-   * @param rowId row id\n-   * @param row server row\n-   */\n-  void putRow(int rowId, ServerRow row);\n+    /**\n+     * Put the server row to the storage\n+     *\n+     * @param rowId row id\n+     * @param row   server row\n+     */\n+    void putRow(int rowId, ServerRow row);\n \n-  /**\n-   * Put the server rows to the storage\n-   * @param rowIds row ids\n-   * @param rows server rows\n-   */\n-  void putRows(List<Integer> rowIds, List<ServerRow> rows);\n+    /**\n+     * Put the server rows to the storage\n+     *\n+     * @param rowIds row ids\n+     * @param rows   server rows\n+     */\n+    void putRows(List<Integer> rowIds, List<ServerRow> rows);\n \n-  /**\n-   * Get the row number\n-   * @return the row number\n-   */\n-  int getRowNum();\n+    /**\n+     * Get the row number\n+     *\n+     * @return the row number\n+     */\n+    int getRowNum();\n \n-  /**\n-   * Is the server row exist\n-   * @param rowId row id\n-   * @return True means exist\n-   */\n-  boolean hasRow(int rowId);\n+    /**\n+     * Is the server row exist\n+     *\n+     * @param rowId row id\n+     * @return True means exist\n+     */\n+    boolean hasRow(int rowId);\n \n-  /**\n-   * Get the <row id, server row> iterator\n-   * @return the <row id, server row> iterator\n-   */\n-  Iterator<Entry<Integer, ServerRow>> iterator();\n+    /**\n+     * Get the <row id, server row> iterator\n+     *\n+     * @return the <row id, server row> iterator\n+     */\n+    Iterator<Entry<Integer, ServerRow>> iterator();\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/557/IServerRowsStorageOp.java\nindex 3d4f9a4b92..cbbc020008 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/557/IServerRowsStorageOp.java\n@@ -73,4 +73,4 @@ public interface IServerRowsStorageOp {\n    * @return the <row id, server row> iterator\n    */\n   Iterator<Entry<Integer, ServerRow>> iterator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 63.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 71.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 87.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/557/IServerRowsStorageOp.java\nindex 3d4f9a4b92..7eb7fffcd1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/557/IServerRowsStorageOp.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/557/IServerRowsStorageOp.java\n@@ -25,6 +25,7 @@ import java.util.Map.Entry;\n /**\n  * Basic operation for Row-based storage\n  */\n+\n public interface IServerRowsStorageOp {\n \n   /**\n@@ -32,45 +33,56 @@ public interface IServerRowsStorageOp {\n    * @param rowId row id\n    * @return server row\n    */\n-  ServerRow getRow(int rowId);\n+    ServerRow getRow(int rowId);\n \n   /**\n    * Get batch of server rows use row ids\n    * @param rowIds row ids\n    * @return batch of server rows\n    */\n-  List<ServerRow> getRows(List<Integer> rowIds);\n+\n+\n+    List<ServerRow> getRows(List<Integer> rowIds);\n \n   /**\n    * Put the server row to the storage\n    * @param rowId row id\n    * @param row server row\n    */\n-  void putRow(int rowId, ServerRow row);\n+\n+\n+    void putRow(int rowId, ServerRow row);\n \n   /**\n    * Put the server rows to the storage\n    * @param rowIds row ids\n    * @param rows server rows\n    */\n-  void putRows(List<Integer> rowIds, List<ServerRow> rows);\n+\n+\n+    void putRows(List<Integer> rowIds, List<ServerRow> rows);\n \n   /**\n    * Get the row number\n    * @return the row number\n    */\n-  int getRowNum();\n+\n+\n+    int getRowNum();\n \n   /**\n    * Is the server row exist\n    * @param rowId row id\n    * @return True means exist\n    */\n-  boolean hasRow(int rowId);\n+\n+    boolean hasRow(int rowId);\n \n   /**\n    * Get the <row id, server row> iterator\n    * @return the <row id, server row> iterator\n    */\n-  Iterator<Entry<Integer, ServerRow>> iterator();\n-}\n+\n+\n+    Iterator<Entry<Integer, ServerRow>> iterator();\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}