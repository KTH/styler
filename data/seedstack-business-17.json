{
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.specification.dsl;\n\nimport org.seedstack.business.specification.Specification;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/17/SpecificationPicker.java\nindex e467b0511d..cfd884ea0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/17/SpecificationPicker.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification.dsl;\n \n import org.seedstack.business.specification.Specification;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/17/SpecificationPicker.java\nindex e467b0511d..88c20b1eeb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/17/SpecificationPicker.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification.dsl;\n \n import org.seedstack.business.specification.Specification;\n@@ -29,7 +30,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      *\n      * @param specification the custom specification.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     OperatorPicker<T, S> satisfying(Specification<T> specification);\n \n@@ -60,7 +61,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be equal to.\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V> OperatorPicker<T, S> equalTo(V value);\n \n@@ -71,7 +72,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be greater than.\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThan(V value);\n \n@@ -82,7 +83,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be greater than or equal to.\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value);\n \n@@ -93,7 +94,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be less than.\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> lessThan(V value);\n \n@@ -104,7 +105,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be less than or equal to.\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value);\n \n@@ -116,7 +117,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param rightValue the value to be less than.\n      * @param <V>        the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue);\n \n@@ -132,8 +133,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      *                       otherwise it will be excluded.\n      * @param <V>            the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n-     *         another one.\n+     * another one.\n      */\n     <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive,\n-            boolean rightInclusive);\n+                                                                   boolean rightInclusive);\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/17/SpecificationPicker.java\nindex e467b0511d..22da361663 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/17/SpecificationPicker.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification.dsl;\n \n import org.seedstack.business.specification.Specification;\n@@ -17,6 +18,7 @@ import org.seedstack.business.specification.Specification;\n  * @param <S> the type of the selector.\n  */\n public interface SpecificationPicker<T, S extends BaseSelector> {\n+\n     /**\n      * Negates the specification that will be picked.\n      *\n@@ -134,6 +136,5 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n      */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive,\n-            boolean rightInclusive);\n-}\n+    <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive, boolean rightInclusive);\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 27.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 47.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 0, indentation should be the same level as line 56.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "66",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "66",
                    "column": "50",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 76.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "76",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 932).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "932",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 87.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 1,432).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "1432",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 98.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 1,884).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "1884",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 2,372).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "column": "2372",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 121.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 2,933).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "2933",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 7, indentation should be the same level as line 137.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 3,962).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "column": "3962",
                    "severity": "warning",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/17/SpecificationPicker.java\nindex e467b0511d..de090147cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/17/SpecificationPicker.java\n@@ -16,13 +16,15 @@ import org.seedstack.business.specification.Specification;\n  * @param <T> the type of the object the specification applies to.\n  * @param <S> the type of the selector.\n  */\n+\n+\n public interface SpecificationPicker<T, S extends BaseSelector> {\n     /**\n      * Negates the specification that will be picked.\n      *\n      * @return the next operation of the builder DSL, allowing to pick the negated specification.\n      */\n-    SpecificationPicker<T, S> not();\n+SpecificationPicker<T, S> not();\n \n     /**\n      * Picks a custom specification.\n@@ -31,7 +33,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n      */\n-    OperatorPicker<T, S> satisfying(Specification<T> specification);\n+OperatorPicker<T, S> satisfying(Specification<T> specification);\n \n     /**\n      * Picks a {@link String}-specific matching specification that will be satisfied if the current\n@@ -42,7 +44,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param pattern the pattern to match.\n      * @return the next operation of the builder DSL, allowing to pick the string matching options.\n      */\n-    StringOptionPicker<T, S> matching(String pattern);\n+StringOptionPicker<T, S> matching(String pattern);\n \n     /**\n      * Picks a {@link String}-specific equality specification that will be satisfied if the current\n@@ -51,7 +53,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param value the value to be equal to.\n      * @return the next operation of the builder DSL, allowing to pick the string equality options.\n      */\n-    StringOptionPicker<T, S> equalTo(String value);\n+StringOptionPicker<T, S> equalTo(String value);\n \n     /**\n      * Picks a general purpose equality specification that will be satisfied if the current selection\n@@ -61,8 +63,7 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V> OperatorPicker<T, S> equalTo(V value);\n+     */<V> OperatorPicker<T, S> equalTo(V value) ;\n \n     /**\n      * Picks a greater than specification that will be satisfied if the current selection is strictly\n@@ -72,8 +73,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThan(V value);\n+     */<V extends Comparable<?\nsuper V>> OperatorPicker<T, S> greaterThan(V value) ;\n \n     /**\n      * Picks a greater than or equal to specification that will be satisfied if the current selection\n@@ -83,8 +84,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value);\n+     */<V extends Comparable<?\nsuper V>> OperatorPicker<T, S> greaterThanOrEqualTo(V value) ;\n \n     /**\n      * Picks a less than specification that will be satisfied if the current selection is strictly\n@@ -94,8 +95,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> lessThan(V value);\n+     */<V extends Comparable<?\nsuper V>> OperatorPicker<T, S> lessThan(V value) ;\n \n     /**\n      * Picks a less than or equal to specification that will be satisfied if the current selection is\n@@ -105,8 +106,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>   the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> lessThanOrEqualTo(V value);\n+     */<V extends Comparable<?\nsuper V>> OperatorPicker<T, S> lessThanOrEqualTo(V value) ;\n \n     /**\n      * Picks a between specification that will be satisfied if the current selection is strictly\n@@ -117,8 +118,8 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>        the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue);\n+     */<V extends Comparable<?\nsuper V>> OperatorPicker<T, S> between(V leftValue, V rightValue) ;\n \n     /**\n      * Picks a between specification that will be satisfied if the current selection is (strictly or\n@@ -133,7 +134,6 @@ public interface SpecificationPicker<T, S extends BaseSelector> {\n      * @param <V>            the type of the value.\n      * @return the next operation of the builder DSL, allowing to combine this specification with\n      *         another one.\n-     */\n-    <V extends Comparable<? super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive,\n-            boolean rightInclusive);\n-}\n+     */<V extends Comparable<?\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        super V>> OperatorPicker<T, S> between(V leftValue, V rightValue, boolean leftInclusive, boolean rightInclusive) ;\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/17/SpecificationPicker.java\nindex e467b0511d..cfd884ea0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/17/SpecificationPicker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/17/SpecificationPicker.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification.dsl;\n \n import org.seedstack.business.specification.Specification;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}