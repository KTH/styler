{
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * Provides methods to read and write FlowDecompositionParameters from and to JSON.\n *\n * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..a88a9949e3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler/38/JsonFlowDecompositionParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write FlowDecompositionParameters from and to JSON.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/intellij/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..6ef774f682 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/intellij/38/JsonFlowDecompositionParameters.java\n@@ -4,6 +4,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package com.farao_community.farao.flow_decomposition.json;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n@@ -38,19 +39,20 @@ public final class JsonFlowDecompositionParameters {\n \n     /**\n      * A configuration loader interface for the FlowDecompositionParameters extensions loaded from the platform configuration\n+     *\n      * @param <E> The extension class\n      */\n     public interface ExtensionSerializer<E extends Extension<FlowDecompositionParameters>> extends ExtensionJsonSerializer<FlowDecompositionParameters, E> {\n     }\n \n     /**\n-     *  Lazily initialized list of extension serializers.\n+     * Lazily initialized list of extension serializers.\n      */\n     private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"flow-decomposition-parameters\"));\n+        Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"flow-decomposition-parameters\"));\n \n     /**\n-     *  Gets the known extension serializers.\n+     * Gets the known extension serializers.\n      */\n     public static ExtensionProviders<ExtensionSerializer> getExtensionSerializers() {\n         return SUPPLIER.get();\n@@ -125,28 +127,28 @@ public final class JsonFlowDecompositionParameters {\n     }\n \n     /**\n-     *  Low level deserialization method, to be used for instance for reading flow decomposition parameters nested in another object.\n+     * Low level deserialization method, to be used for instance for reading flow decomposition parameters nested in another object.\n      */\n     public static FlowDecompositionParameters deserialize(JsonParser parser, DeserializationContext context, FlowDecompositionParameters parameters) throws IOException {\n         return new FlowDecompositionParametersDeserializer().deserialize(parser, context, parameters);\n     }\n \n     /**\n-     *  Low level deserialization method, to be used for instance for updating flow decomposition parameters nested in another object.\n+     * Low level deserialization method, to be used for instance for updating flow decomposition parameters nested in another object.\n      */\n     public static FlowDecompositionParameters deserialize(JsonParser parser, DeserializationContext context) throws IOException {\n         return new FlowDecompositionParametersDeserializer().deserialize(parser, context);\n     }\n \n     /**\n-     *  Low level serialization method, to be used for instance for writing flow decomposition parameters nested in another object.\n+     * Low level serialization method, to be used for instance for writing flow decomposition parameters nested in another object.\n      */\n-    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException  {\n+    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n         new FlowDecompositionParametersSerializer().serialize(parameters, jsonGenerator, serializerProvider);\n     }\n \n     private static ObjectMapper createObjectMapper() {\n         return JsonUtil.createObjectMapper()\n-                .registerModule(new FlowDecompositionParametersJsonModule());\n+            .registerModule(new FlowDecompositionParametersJsonModule());\n     }\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/naturalize/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..9c7557e552 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/naturalize/38/JsonFlowDecompositionParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write FlowDecompositionParameters from and to JSON.\n  *\n@@ -141,7 +140,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      *  Low level serialization method, to be used for instance for writing flow decomposition parameters nested in another object.\n      */\n-    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException  {\n+    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n         new FlowDecompositionParametersSerializer().serialize(parameters, jsonGenerator, serializerProvider);\n     }\n \n@@ -149,4 +148,4 @@ public final class JsonFlowDecompositionParameters {\n         return JsonUtil.createObjectMapper()\n                 .registerModule(new FlowDecompositionParametersJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/codebuff/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..97e6efcc84 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/codebuff/38/JsonFlowDecompositionParameters.java\n@@ -19,7 +19,6 @@ import com.powsybl.commons.extensions.ExtensionJsonSerializer;\n import com.powsybl.commons.extensions.ExtensionProviders;\n import com.powsybl.commons.json.JsonUtil;\n import com.farao_community.farao.flow_decomposition.FlowDecompositionParameters;\n-\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n@@ -34,24 +33,28 @@ import java.util.Objects;\n  *\n  * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n  */\n+\n+\n public final class JsonFlowDecompositionParameters {\n \n     /**\n      * A configuration loader interface for the FlowDecompositionParameters extensions loaded from the platform configuration\n      * @param <E> The extension class\n      */\n+\n     public interface ExtensionSerializer<E extends Extension<FlowDecompositionParameters>> extends ExtensionJsonSerializer<FlowDecompositionParameters, E> {\n     }\n \n     /**\n      *  Lazily initialized list of extension serializers.\n      */\n-    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER =\n-            Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"flow-decomposition-parameters\"));\n+\n+    private static final Supplier<ExtensionProviders<ExtensionSerializer>> SUPPLIER = Suppliers.memoize(() -> ExtensionProviders.createProvider(ExtensionSerializer.class, \"flow-decomposition-parameters\"));\n \n     /**\n      *  Gets the known extension serializers.\n      */\n+\n     public static ExtensionProviders<ExtensionSerializer> getExtensionSerializers() {\n         return SUPPLIER.get();\n     }\n@@ -62,6 +65,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Reads parameters from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static FlowDecompositionParameters read(Path jsonFile) {\n         return update(new FlowDecompositionParameters(), jsonFile);\n     }\n@@ -69,6 +73,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Reads parameters from a JSON file (will NOT rely on platform config).\n      */\n+\n     public static FlowDecompositionParameters read(InputStream jsonStream) {\n         return update(new FlowDecompositionParameters(), jsonStream);\n     }\n@@ -76,9 +81,9 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Updates parameters by reading the content of a JSON file.\n      */\n+\n     public static FlowDecompositionParameters update(FlowDecompositionParameters parameters, Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (InputStream is = Files.newInputStream(jsonFile)) {\n             return update(parameters, is);\n         } catch (IOException e) {\n@@ -89,6 +94,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Updates parameters by reading the content of a JSON stream.\n      */\n+\n     public static FlowDecompositionParameters update(FlowDecompositionParameters parameters, InputStream jsonStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n@@ -101,9 +107,9 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Writes parameters as JSON to a file.\n      */\n+\n     public static void write(FlowDecompositionParameters parameters, Path jsonFile) {\n         Objects.requireNonNull(jsonFile);\n-\n         try (OutputStream outputStream = Files.newOutputStream(jsonFile)) {\n             write(parameters, outputStream);\n         } catch (IOException e) {\n@@ -114,6 +120,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      * Writes parameters as JSON to an output stream.\n      */\n+\n     public static void write(FlowDecompositionParameters parameters, OutputStream outputStream) {\n         try {\n             ObjectMapper objectMapper = createObjectMapper();\n@@ -127,6 +134,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      *  Low level deserialization method, to be used for instance for reading flow decomposition parameters nested in another object.\n      */\n+\n     public static FlowDecompositionParameters deserialize(JsonParser parser, DeserializationContext context, FlowDecompositionParameters parameters) throws IOException {\n         return new FlowDecompositionParametersDeserializer().deserialize(parser, context, parameters);\n     }\n@@ -134,6 +142,7 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      *  Low level deserialization method, to be used for instance for updating flow decomposition parameters nested in another object.\n      */\n+\n     public static FlowDecompositionParameters deserialize(JsonParser parser, DeserializationContext context) throws IOException {\n         return new FlowDecompositionParametersDeserializer().deserialize(parser, context);\n     }\n@@ -141,12 +150,12 @@ public final class JsonFlowDecompositionParameters {\n     /**\n      *  Low level serialization method, to be used for instance for writing flow decomposition parameters nested in another object.\n      */\n-    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException  {\n+\n+    public static void serialize(FlowDecompositionParameters parameters, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {\n         new FlowDecompositionParametersSerializer().serialize(parameters, jsonGenerator, serializerProvider);\n     }\n \n     private static ObjectMapper createObjectMapper() {\n-        return JsonUtil.createObjectMapper()\n-                .registerModule(new FlowDecompositionParametersJsonModule());\n+        return JsonUtil.createObjectMapper().registerModule(new FlowDecompositionParametersJsonModule());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler_random/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..a88a9949e3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler_random/38/JsonFlowDecompositionParameters.java\n@@ -28,7 +28,6 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write FlowDecompositionParameters from and to JSON.\n  *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler_three_grams/38/JsonFlowDecompositionParameters.java\nindex b93c4717dd..419092c4fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/errored/1/38/JsonFlowDecompositionParameters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/farao-community-farao-core/styler_three_grams/38/JsonFlowDecompositionParameters.java\n@@ -28,13 +28,11 @@ import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.Objects;\n \n-\n /**\n  * Provides methods to read and write FlowDecompositionParameters from and to JSON.\n  *\n  * @author Sebastien Murgey {@literal <sebastien.murgey at rte-france.com>}\n- */\n-public final class JsonFlowDecompositionParameters {\n+ */ public final class JsonFlowDecompositionParameters {\n \n     /**\n      * A configuration loader interface for the FlowDecompositionParameters extensions loaded from the platform configuration\n",
            "diff_size": 3
        }
    ]
}