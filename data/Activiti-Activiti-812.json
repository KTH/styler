{
    "error_id": "812",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.asyncexecutor.multitenant;\n\nimport org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\nimport org.activiti.engine.impl.asyncexecutor.AsyncExecutor;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..9de8d4f201 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\n@@ -25,18 +26,18 @@ public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnabl\n \n   protected TenantInfoHolder tenantInfoHolder;\n   protected String tenantId;\n-  \n+\n   public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n+\n     super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n     this.tenantInfoHolder = tenantInfoHolder;\n     this.tenantId = tenantId;\n   }\n-  \n+\n   protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n     return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n   }\n-  \n+\n   @Override\n   public synchronized void run() {\n     tenantInfoHolder.setCurrentTenantId(tenantId);\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..b9ca6f7584 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\n@@ -18,30 +19,28 @@ import org.activiti.engine.impl.cfg.multitenant.TenantInfoHolder;\n \n /**\n  * Extends the default {@link AcquireTimerJobsRunnable} by setting the 'tenant' context before executing.\n- * \n-\n  */\n public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnable {\n \n-  protected TenantInfoHolder tenantInfoHolder;\n-  protected String tenantId;\n-  \n-  public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n-    super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n-    this.tenantInfoHolder = tenantInfoHolder;\n-    this.tenantId = tenantId;\n-  }\n-  \n-  protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n-    return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n-  }\n-  \n-  @Override\n-  public synchronized void run() {\n-    tenantInfoHolder.setCurrentTenantId(tenantId);\n-    super.run();\n-    tenantInfoHolder.clearCurrentTenantId();\n-  }\n+    protected TenantInfoHolder tenantInfoHolder;\n+    protected String tenantId;\n+\n+    public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n+\n+        super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n+        this.tenantInfoHolder = tenantInfoHolder;\n+        this.tenantId = tenantId;\n+    }\n+\n+    protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n+        return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n+    }\n+\n+    @Override\n+    public synchronized void run() {\n+        tenantInfoHolder.setCurrentTenantId(tenantId);\n+        super.run();\n+        tenantInfoHolder.clearCurrentTenantId();\n+    }\n \n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..e6cb482089 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\n@@ -27,9 +28,8 @@ public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnabl\n   protected String tenantId;\n   \n   public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n-    super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n-    this.tenantInfoHolder = tenantInfoHolder;\n+  super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n+this.tenantInfoHolder = tenantInfoHolder;\n     this.tenantId = tenantId;\n   }\n   \n@@ -44,4 +44,4 @@ public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnabl\n     tenantInfoHolder.clearCurrentTenantId();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..a161bfb7d4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -21,27 +21,28 @@ import org.activiti.engine.impl.cfg.multitenant.TenantInfoHolder;\n  * \n \n  */\n+\n+\n public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnable {\n \n-  protected TenantInfoHolder tenantInfoHolder;\n-  protected String tenantId;\n-  \n-  public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n-    super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n+    protected TenantInfoHolder tenantInfoHolder;\n+    protected String tenantId;\n+\n+    public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n+    super(asyncExecutor,\n+          asyncExecutor.getProcessEngineConfiguration().getJobManager());\n     this.tenantInfoHolder = tenantInfoHolder;\n     this.tenantId = tenantId;\n-  }\n-  \n-  protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n+    }\n+\n+    protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n     return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n-  }\n-  \n-  @Override\n-  public synchronized void run() {\n-    tenantInfoHolder.setCurrentTenantId(tenantId);\n-    super.run();\n-    tenantInfoHolder.clearCurrentTenantId();\n-  }\n-\n-}\n+    }\n+\n+    @Override\n+    public synchronized void run() {\n+        tenantInfoHolder.setCurrentTenantId(tenantId);\n+        super.run();\n+        tenantInfoHolder.clearCurrentTenantId();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..9de8d4f201 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\n@@ -25,18 +26,18 @@ public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnabl\n \n   protected TenantInfoHolder tenantInfoHolder;\n   protected String tenantId;\n-  \n+\n   public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n+\n     super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n     this.tenantInfoHolder = tenantInfoHolder;\n     this.tenantId = tenantId;\n   }\n-  \n+\n   protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n     return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n   }\n-  \n+\n   @Override\n   public synchronized void run() {\n     tenantInfoHolder.setCurrentTenantId(tenantId);\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/812/TenantAwareAcquireTimerJobsRunnable.java\nindex 5ebb7d1c87..9de8d4f201 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/812/TenantAwareAcquireTimerJobsRunnable.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/812/TenantAwareAcquireTimerJobsRunnable.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.asyncexecutor.multitenant;\n \n import org.activiti.engine.impl.asyncexecutor.AcquireTimerJobsRunnable;\n@@ -25,18 +26,18 @@ public class TenantAwareAcquireTimerJobsRunnable extends AcquireTimerJobsRunnabl\n \n   protected TenantInfoHolder tenantInfoHolder;\n   protected String tenantId;\n-  \n+\n   public TenantAwareAcquireTimerJobsRunnable(AsyncExecutor asyncExecutor, TenantInfoHolder tenantInfoHolder, String tenantId) {\n-    \n+\n     super(asyncExecutor, asyncExecutor.getProcessEngineConfiguration().getJobManager());\n     this.tenantInfoHolder = tenantInfoHolder;\n     this.tenantId = tenantId;\n   }\n-  \n+\n   protected ExecutorPerTenantAsyncExecutor getTenantAwareAsyncExecutor() {\n     return (ExecutorPerTenantAsyncExecutor) asyncExecutor;\n   }\n-  \n+\n   @Override\n   public synchronized void run() {\n     tenantInfoHolder.setCurrentTenantId(tenantId);\n",
            "diff_size": 5
        }
    ]
}