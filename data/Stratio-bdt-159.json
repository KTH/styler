{
    "error_id": "159",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.stratio.qa.specs;\n\nimport com.stratio.qa.utils.ThreadProperty;\nimport org.testng.annotations.Test;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/159/WhenGTest.java\nindex 03d31effa5..17230704d7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/159/WhenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/159/WhenGTest.java\nindex 03d31effa5..53eb3347b5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/159/WhenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -41,9 +42,11 @@ public class WhenGTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n         String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n+            Paths.get(getClass().getClassLoader().getResource(ascendingFile)\n+                .getFile())));\n \n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n@@ -58,7 +61,8 @@ public class WhenGTest {\n \n         String value = ThreadProperty.get(envVar);\n \n-        assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n+        assertThat(value).as(\"Not correctly ordered\")\n+            .isEqualTo(jsonStringAscending);\n     }\n \n     @Test\n@@ -70,9 +74,11 @@ public class WhenGTest {\n         String envVar = \"envVar\";\n \n         String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+            Paths.get(\n+                getClass().getClassLoader().getResource(baseData).getFile())));\n         String jsonStringDescending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n+            Paths.get(getClass().getClassLoader().getResource(descendingFile)\n+                .getFile())));\n \n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n@@ -87,7 +93,8 @@ public class WhenGTest {\n \n         String value = ThreadProperty.get(envVar);\n \n-        assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringDescending);\n+        assertThat(value).as(\"Not correctly ordered\")\n+            .isEqualTo(jsonStringDescending);\n     }\n \n     @Test\n@@ -97,7 +104,9 @@ public class WhenGTest {\n         String baseData = \"schemas/testCreateFile.json\";\n         String type = \"json\";\n         String envVar = \"myjson\";\n-        List<List<String>> rawData = Arrays.asList(Arrays.asList(\"key1\", \"UPDATE\", \"new_value\", \"n/a\"), Arrays.asList(\"key2\", \"ADDTO\", \"[\\\"new_value\\\"]\", \"array\"));\n+        List<List<String>> rawData = Arrays\n+            .asList(Arrays.asList(\"key1\", \"UPDATE\", \"new_value\", \"n/a\"),\n+                Arrays.asList(\"key2\", \"ADDTO\", \"[\\\"new_value\\\"]\", \"array\"));\n         DataTable modifications = DataTable.create(rawData);\n \n         CommonG commong = new CommonG();\n@@ -106,9 +115,11 @@ public class WhenGTest {\n         wheng.readFileToVariable(baseData, type, envVar, modifications);\n \n         String envVarResult = ThreadProperty.get(envVar);\n-        String expectedResult = \"{\\\"key1\\\":\\\"new_value\\\",\\\"key2\\\":[[\\\"new_value\\\"]],\\\"key3\\\":{\\\"key3_2\\\":\\\"value3_2\\\",\\\"key3_1\\\":\\\"value3_1\\\"}}\";\n+        String expectedResult =\n+            \"{\\\"key1\\\":\\\"new_value\\\",\\\"key2\\\":[[\\\"new_value\\\"]],\\\"key3\\\":{\\\"key3_2\\\":\\\"value3_2\\\",\\\"key3_1\\\":\\\"value3_1\\\"}}\";\n \n-        assertThat(envVarResult).as(\"Not as expected\").isEqualTo(expectedResult);\n+        assertThat(envVarResult).as(\"Not as expected\")\n+            .isEqualTo(expectedResult);\n     }\n \n     @Test\n@@ -118,7 +129,8 @@ public class WhenGTest {\n         String baseData = \"schemas/krb5.conf\";\n         String type = \"string\";\n         String envVar = \"mystring\";\n-        List<List<String>> rawData = Arrays.asList(Arrays.asList(\"foo\", \"REPLACE\", \"bar\", \"n/a\"));\n+        List<List<String>> rawData =\n+            Arrays.asList(Arrays.asList(\"foo\", \"REPLACE\", \"bar\", \"n/a\"));\n         DataTable modifications = DataTable.create(rawData);\n \n         CommonG commong = new CommonG();\n@@ -129,7 +141,8 @@ public class WhenGTest {\n         String envVarResult = ThreadProperty.get(envVar);\n         String expectedResult = \"bar = bar\";\n \n-        assertThat(envVarResult).as(\"Not as expected\").isEqualTo(expectedResult);\n+        assertThat(envVarResult).as(\"Not as expected\")\n+            .isEqualTo(expectedResult);\n     }\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/159/WhenGTest.java\nindex 03d31effa5..7e4d409438 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/159/WhenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n@@ -132,4 +133,4 @@ public class WhenGTest {\n         assertThat(envVarResult).as(\"Not as expected\").isEqualTo(expectedResult);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/159/WhenGTest.java\nindex 03d31effa5..7c16aa8820 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/159/WhenGTest.java\n@@ -17,7 +17,6 @@ package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n import org.testng.annotations.Test;\n-\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.Arrays;\n@@ -25,31 +24,27 @@ import java.util.List;\n import cucumber.api.DataTable;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+\n import static org.assertj.core.api.Assertions.fail;\n \n /**\n  * Created by carlosgarcia on 29/07/16.\n  */\n+\n+\n public class WhenGTest {\n \n     @Test\n     public void testSortJSONElementsAscending() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String ascendingFile = \"indicesJSONAscending.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-        String jsonStringAscending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+        String jsonStringAscending = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(ascendingFile).getFile())));\n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonString);\n-\n         try {\n             wheng.sortElements(envVar, \"alphabetical\", \"ascending\");\n         } catch (Exception e) {\n@@ -57,28 +52,21 @@ public class WhenGTest {\n         }\n \n         String value = ThreadProperty.get(envVar);\n-\n         assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringAscending);\n     }\n \n+\n     @Test\n     public void testSortJSONElementsDescending() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"indicesJSON.conf\";\n         String descendingFile = \"indicesJSONDescending.conf\";\n         String envVar = \"envVar\";\n-\n-        String jsonString = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n-        String jsonStringDescending = new String(Files.readAllBytes(\n-                Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n-\n+        String jsonString = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(baseData).getFile())));\n+        String jsonStringDescending = new String(Files.readAllBytes(Paths.get(getClass().getClassLoader().getResource(descendingFile).getFile())));\n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n-\n         ThreadProperty.set(envVar, jsonString);\n-\n         try {\n             wheng.sortElements(envVar, \"alphabetical\", \"descending\");\n         } catch (Exception e) {\n@@ -86,50 +74,40 @@ public class WhenGTest {\n         }\n \n         String value = ThreadProperty.get(envVar);\n-\n         assertThat(value).as(\"Not correctly ordered\").isEqualTo(jsonStringDescending);\n     }\n \n+\n     @Test\n     public void testReadFileToVariableJSON() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"schemas/testCreateFile.json\";\n         String type = \"json\";\n         String envVar = \"myjson\";\n         List<List<String>> rawData = Arrays.asList(Arrays.asList(\"key1\", \"UPDATE\", \"new_value\", \"n/a\"), Arrays.asList(\"key2\", \"ADDTO\", \"[\\\"new_value\\\"]\", \"array\"));\n         DataTable modifications = DataTable.create(rawData);\n-\n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n-\n         wheng.readFileToVariable(baseData, type, envVar, modifications);\n-\n         String envVarResult = ThreadProperty.get(envVar);\n         String expectedResult = \"{\\\"key1\\\":\\\"new_value\\\",\\\"key2\\\":[[\\\"new_value\\\"]],\\\"key3\\\":{\\\"key3_2\\\":\\\"value3_2\\\",\\\"key3_1\\\":\\\"value3_1\\\"}}\";\n-\n         assertThat(envVarResult).as(\"Not as expected\").isEqualTo(expectedResult);\n     }\n \n+\n     @Test\n     public void testReadFileToVariableString() throws Exception {\n         ThreadProperty.set(\"class\", this.getClass().getCanonicalName());\n-\n         String baseData = \"schemas/krb5.conf\";\n         String type = \"string\";\n         String envVar = \"mystring\";\n         List<List<String>> rawData = Arrays.asList(Arrays.asList(\"foo\", \"REPLACE\", \"bar\", \"n/a\"));\n         DataTable modifications = DataTable.create(rawData);\n-\n         CommonG commong = new CommonG();\n         WhenGSpec wheng = new WhenGSpec(commong);\n-\n         wheng.readFileToVariable(baseData, type, envVar, modifications);\n-\n         String envVarResult = ThreadProperty.get(envVar);\n         String expectedResult = \"bar = bar\";\n-\n         assertThat(envVarResult).as(\"Not as expected\").isEqualTo(expectedResult);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/159/WhenGTest.java\nindex 03d31effa5..17230704d7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/159/WhenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/159/WhenGTest.java\nindex 03d31effa5..17230704d7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/159/WhenGTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/159/WhenGTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.specs;\n \n import com.stratio.qa.utils.ThreadProperty;\n",
            "diff_size": 1
        }
    ]
}