{
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "87",
                "column": "61",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    logger.debug(\"Writing asic mime type to asic zip file\");\n    String mimeTypeString;\n    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n      mimeTypeString = MimeType.ASICS.getMimeTypeString();\n    } else {\n      mimeTypeString = MimeType.ASICE.getMimeTypeString();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/65/AsicContainerCreator.java\nindex bdb1afb6c8..5f0bf1575f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/65/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/65/AsicContainerCreator.java\nindex bdb1afb6c8..93ae3ff21f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/65/AsicContainerCreator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -94,7 +94,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param dataFiles list of data files\n+   * @param dataFiles     list of data files\n    * @param containerType type\n    */\n   public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n@@ -123,7 +123,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param signatures list of signatures\n+   * @param signatures                 list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n   public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/65/AsicContainerCreator.java\nindex bdb1afb6c8..c04efd8696 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/65/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -237,7 +237,6 @@ public class AsicContainerCreator {\n     }\n \n     abstract void doWithEntryStream(OutputStream stream) throws IOException;\n-\n   }\n \n   private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n@@ -256,4 +255,4 @@ public class AsicContainerCreator {\n     throw new TechnicalException(message, e);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/65/AsicContainerCreator.java\nindex bdb1afb6c8..ea7c9f6260 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/65/AsicContainerCreator.java\n@@ -21,7 +21,6 @@ import java.util.Collection;\n import java.util.zip.CRC32;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n-\n import org.apache.commons.io.IOUtils;\n import org.digidoc4j.Constant;\n import org.digidoc4j.DataFile;\n@@ -32,215 +31,238 @@ import org.digidoc4j.impl.asic.manifest.AsicManifest;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.model.DSSDocument;\n import eu.europa.esig.dss.model.MimeType;\n \n /**\n  * ASIC container creator\n  */\n-public class AsicContainerCreator {\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicContainerCreator.class);\n \n-  private static final String ZIP_ENTRY_MIMETYPE = \"mimetype\";\n-  private static final Charset CHARSET = StandardCharsets.UTF_8;\n+public class AsicContainerCreator {\n \n-  private final ZipOutputStream zipOutputStream;\n-  private final OutputStream outputStream;\n-  private String zipComment;\n+    private static final Logger logger = LoggerFactory.getLogger(AsicContainerCreator.class);\n+    private static final String ZIP_ENTRY_MIMETYPE = \"mimetype\";\n+    private static final Charset CHARSET = StandardCharsets.UTF_8;\n+    private final ZipOutputStream zipOutputStream;\n+    private final OutputStream outputStream;\n+    private String zipComment;\n \n   /**\n    * @param outputStream stream\n    */\n-  public AsicContainerCreator(OutputStream outputStream) {\n+\n+\n+    public AsicContainerCreator(OutputStream outputStream) {\n     this.outputStream = outputStream;\n     this.zipOutputStream = new ZipOutputStream(outputStream, CHARSET);\n-  }\n+    }\n \n-  public void finalizeZipFile() {\n+\n+    public void finalizeZipFile() {\n     logger.debug(\"Finalizing asic zip file\");\n     try {\n-      zipOutputStream.finish();\n+        zipOutputStream.finish();\n     } catch (IOException e) {\n       handleIOException(\"Unable to finish creating asic ZIP container\", e);\n     } finally {\n       Helper.deleteTmpFiles();\n     }\n-  }\n+    }\n \n-  @Deprecated\n-  public InputStream fetchInputStreamOfFinalizedContainer() {\n+    @Deprecated\n+    public InputStream fetchInputStreamOfFinalizedContainer() {\n     if (outputStream instanceof ByteArrayOutputStream) {\n-      logger.debug(\"Fetching input stream of the finalized container\");\n-      return new ByteArrayInputStream(((ByteArrayOutputStream) outputStream).toByteArray());\n+        logger.debug(\"Fetching input stream of the finalized container\");\n+        return new ByteArrayInputStream(((ByteArrayOutputStream) outputStream).toByteArray());\n     }\n     throw new NotSupportedException(\"instance not backed by an in-memory stream\");\n-  }\n+    }\n \n   /**\n    * @param containerType type\n    */\n-  public void writeAsiceMimeType(String containerType) {\n+\n+\n+    public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n-      mimeTypeString = MimeType.ASICS.getMimeTypeString();\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n+        mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n     }\n     byte[] mimeTypeBytes = mimeTypeString.getBytes(CHARSET);\n     new BytesEntryCallback(getAsicMimeTypeZipEntry(mimeTypeBytes), mimeTypeBytes).write();\n-  }\n+    }\n \n   /**\n    * @param dataFiles list of data files\n    * @param containerType type\n    */\n-  public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n+\n+\n+    public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n     logger.debug(\"Writing asic manifest\");\n     final AsicManifest manifest = new AsicManifest(containerType);\n     manifest.addFileEntry(dataFiles);\n     new EntryCallback(new ZipEntry(AsicManifest.XML_PATH)) {\n-      @Override\n-      void doWithEntryStream(OutputStream stream) throws IOException {\n+\n+        @Override\n+        void doWithEntryStream(OutputStream stream) throws IOException {\n         manifest.writeTo(stream);\n-      }\n+        }\n+\n     }.write();\n-  }\n+    }\n \n   /**\n    * @param dataFiles list of data files\n    */\n-  public void writeDataFiles(Collection<DataFile> dataFiles) {\n+\n+\n+    public void writeDataFiles(Collection<DataFile> dataFiles) {\n     logger.debug(\"Adding data files to the asic zip container\");\n     for (DataFile dataFile : dataFiles) {\n-      String name = dataFile.getName();\n-      logger.debug(\"Adding data file {}\", name);\n-      zipOutputStream.setLevel(ZipEntry.DEFLATED);\n-      new StreamEntryCallback(new ZipEntry(name), dataFile.getStream()).write();\n+        String name = dataFile.getName();\n+        logger.debug(\"Adding data file {}\", name);\n+        zipOutputStream.setLevel(ZipEntry.DEFLATED);\n+        new StreamEntryCallback(new ZipEntry(name), dataFile.getStream()).write();\n+    }\n     }\n-  }\n \n   /**\n    * @param signatures list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n-  public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n+\n+\n+    public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     int index = nextSignatureFileNameIndex;\n     for (Signature signature : signatures) {\n-      String signatureFileName = \"META-INF/signatures\" + index + \".xml\";\n-      new BytesEntryCallback(new ZipEntry(signatureFileName), signature.getAdESSignature()).write();\n-      index++;\n+        String signatureFileName = \"META-INF/signatures\" + index + \".xml\";\n+        new BytesEntryCallback(new ZipEntry(signatureFileName), signature.getAdESSignature()).write();\n+        index++;\n+    }\n     }\n-  }\n \n   /**\n    * @param dataFile data file\n    */\n-  public void writeTimestampToken(DataFile dataFile) {\n+\n+\n+    public void writeTimestampToken(DataFile dataFile) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     String signatureFileName = \"META-INF/timestamp.tst\";\n     new BytesEntryCallback(new ZipEntry(signatureFileName), dataFile.getBytes()).write();\n-  }\n+    }\n \n   /**\n    * @param asicEntries list of ASIC entries\n    */\n-  public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n+\n+\n+    public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n     logger.debug(\"Writing existing zip container entries\");\n     for (AsicEntry asicEntry : asicEntries) {\n-      DSSDocument content = asicEntry.getContent();\n-      ZipEntry zipEntry = asicEntry.getZipEntry();\n-      new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n+        DSSDocument content = asicEntry.getContent();\n+        ZipEntry zipEntry = asicEntry.getZipEntry();\n+        new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n+    }\n     }\n-  }\n \n   /**\n    * @param comment comment\n    */\n-  public void writeContainerComment(String comment) {\n+\n+\n+    public void writeContainerComment(String comment) {\n     logger.debug(\"Writing container comment: \" + comment);\n     zipOutputStream.setComment(comment);\n-  }\n+    }\n \n   /**\n    * @param zipComment comment\n    */\n-  public void setZipComment(String zipComment) {\n+\n+\n+    public void setZipComment(String zipComment) {\n     this.zipComment = zipComment;\n-  }\n+    }\n \n-  private class StreamEntryCallback extends EntryCallback {\n+    private class StreamEntryCallback extends EntryCallback {\n \n-    private final InputStream inputStream;\n+        private final InputStream inputStream;\n \n-    StreamEntryCallback(ZipEntry entry, InputStream inputStream) {\n-      this(entry, inputStream, true);\n-    }\n \n-    StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n-      super(entry, addComment);\n-      this.inputStream = inputStream;\n-    }\n+        StreamEntryCallback(ZipEntry entry, InputStream inputStream) {\n+        this(entry, inputStream, true);\n+        }\n+\n+\n+        StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n+        super(entry, addComment);\n+        this.inputStream = inputStream;\n+        }\n \n-    @Override\n-    void doWithEntryStream(OutputStream stream) throws IOException {\n-      IOUtils.copy(inputStream, stream);\n+        @Override\n+        void doWithEntryStream(OutputStream stream) throws IOException {\n+        IOUtils.copy(inputStream, stream);\n+        }\n     }\n \n-  }\n+    private class BytesEntryCallback extends EntryCallback {\n \n-  private class BytesEntryCallback extends EntryCallback {\n+        private final byte[] data;\n \n-    private final byte[] data;\n \n-    BytesEntryCallback(ZipEntry entry, byte[] data) {\n-      super(entry);\n-      this.data = data;\n-    }\n+        BytesEntryCallback(ZipEntry entry, byte[] data) {\n+        super(entry);\n+        this.data = data;\n+        }\n+\n+        @Override\n+        void doWithEntryStream(OutputStream stream) throws IOException {\n+        stream.write(data);\n+        }\n \n-    @Override\n-    void doWithEntryStream(OutputStream stream) throws IOException {\n-      stream.write(data);\n     }\n \n-  }\n+    private abstract class EntryCallback {\n \n-  private abstract class EntryCallback {\n+        private final ZipEntry entry;\n+        private final boolean addComment;\n \n-    private final ZipEntry entry;\n-    private final boolean addComment;\n \n-    EntryCallback(ZipEntry entry) {\n-      this(entry, true);\n-    }\n+        EntryCallback(ZipEntry entry) {\n+        this(entry, true);\n+        }\n \n-    EntryCallback(ZipEntry entry, boolean addComment) {\n-      this.entry = entry;\n-      this.addComment = addComment;\n-    }\n \n-    void write() {\n-      if (addComment) {\n-        entry.setComment(zipComment);\n-      }\n-\n-      try {\n-        zipOutputStream.putNextEntry(entry);\n-        doWithEntryStream(zipOutputStream);\n-        zipOutputStream.closeEntry();\n-      } catch (IOException e) {\n-        handleIOException(\"Unable to write Zip entry to asic container\", e);\n-      }\n-    }\n+        EntryCallback(ZipEntry entry, boolean addComment) {\n+        this.entry = entry;\n+        this.addComment = addComment;\n+        }\n+\n+        void write() {\n+        if (addComment) {\n+            entry.setComment(zipComment);\n+        }\n+        try {\n+            zipOutputStream.putNextEntry(entry);\n+            doWithEntryStream(zipOutputStream);\n+            zipOutputStream.closeEntry();\n+        } catch (IOException e) {\n+          handleIOException(\"Unable to write Zip entry to asic container\", e);\n+        }\n+        }\n \n-    abstract void doWithEntryStream(OutputStream stream) throws IOException;\n+        abstract void doWithEntryStream(OutputStream stream) throws IOException;\n \n-  }\n+    }\n \n-  private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n+    private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n     ZipEntry entryMimetype = new ZipEntry(ZIP_ENTRY_MIMETYPE);\n     entryMimetype.setMethod(ZipEntry.STORED);\n     entryMimetype.setSize(mimeTypeBytes.length);\n@@ -249,11 +271,11 @@ public class AsicContainerCreator {\n     crc.update(mimeTypeBytes);\n     entryMimetype.setCrc(crc.getValue());\n     return entryMimetype;\n-  }\n+    }\n \n-  private static void handleIOException(String message, IOException e) {\n+    private static void handleIOException(String message, IOException e) {\n     logger.error(message + \": \" + e.getMessage());\n     throw new TechnicalException(message, e);\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 146
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/65/AsicContainerCreator.java\nindex bdb1afb6c8..5f0bf1575f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/65/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "87",
                    "column": "62",
                    "severity": "error",
                    "message": "'{' at column 62 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "62",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/65/AsicContainerCreator.java\nindex bdb1afb6c8..9640e81dfd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/65/AsicContainerCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/65/AsicContainerCreator.java\n@@ -84,176 +84,175 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n-      mimeTypeString = MimeType.ASICS.getMimeTypeString();\n-    } else {\n-      mimeTypeString = MimeType.ASICE.getMimeTypeString();\n-    }\n-    byte[] mimeTypeBytes = mimeTypeString.getBytes(CHARSET);\n-    new BytesEntryCallback(getAsicMimeTypeZipEntry(mimeTypeBytes), mimeTypeBytes).write();\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {mimeTypeString = MimeType.ASICS.getMimeTypeString();\n+  } else {\n+    mimeTypeString = MimeType.ASICE.getMimeTypeString();\n   }\n+  byte[] mimeTypeBytes = mimeTypeString.getBytes(CHARSET);\n+  new BytesEntryCallback(getAsicMimeTypeZipEntry(mimeTypeBytes), mimeTypeBytes).write();\n+}\n \n-  /**\n+/**\n    * @param dataFiles list of data files\n    * @param containerType type\n    */\n-  public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n-    logger.debug(\"Writing asic manifest\");\n-    final AsicManifest manifest = new AsicManifest(containerType);\n-    manifest.addFileEntry(dataFiles);\n-    new EntryCallback(new ZipEntry(AsicManifest.XML_PATH)) {\n-      @Override\n-      void doWithEntryStream(OutputStream stream) throws IOException {\n-        manifest.writeTo(stream);\n-      }\n-    }.write();\n-  }\n+public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n+  logger.debug(\"Writing asic manifest\");\n+  final AsicManifest manifest = new AsicManifest(containerType);\n+  manifest.addFileEntry(dataFiles);\n+  new EntryCallback(new ZipEntry(AsicManifest.XML_PATH)) {\n+    @Override\n+    void doWithEntryStream(OutputStream stream) throws IOException {\n+      manifest.writeTo(stream);\n+    }\n+  }.write();\n+}\n \n-  /**\n+/**\n    * @param dataFiles list of data files\n    */\n-  public void writeDataFiles(Collection<DataFile> dataFiles) {\n-    logger.debug(\"Adding data files to the asic zip container\");\n-    for (DataFile dataFile : dataFiles) {\n-      String name = dataFile.getName();\n-      logger.debug(\"Adding data file {}\", name);\n-      zipOutputStream.setLevel(ZipEntry.DEFLATED);\n-      new StreamEntryCallback(new ZipEntry(name), dataFile.getStream()).write();\n-    }\n+public void writeDataFiles(Collection<DataFile> dataFiles) {\n+  logger.debug(\"Adding data files to the asic zip container\");\n+  for (DataFile dataFile : dataFiles) {\n+    String name = dataFile.getName();\n+    logger.debug(\"Adding data file {}\", name);\n+    zipOutputStream.setLevel(ZipEntry.DEFLATED);\n+    new StreamEntryCallback(new ZipEntry(name), dataFile.getStream()).write();\n   }\n+}\n \n-  /**\n+/**\n    * @param signatures list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n-  public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n-    logger.debug(\"Adding signatures to the asic zip container\");\n-    int index = nextSignatureFileNameIndex;\n-    for (Signature signature : signatures) {\n-      String signatureFileName = \"META-INF/signatures\" + index + \".xml\";\n-      new BytesEntryCallback(new ZipEntry(signatureFileName), signature.getAdESSignature()).write();\n-      index++;\n-    }\n+public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n+  logger.debug(\"Adding signatures to the asic zip container\");\n+  int index = nextSignatureFileNameIndex;\n+  for (Signature signature : signatures) {\n+    String signatureFileName = \"META-INF/signatures\" + index + \".xml\";\n+    new BytesEntryCallback(new ZipEntry(signatureFileName), signature.getAdESSignature()).write();\n+    index++;\n   }\n+}\n \n-  /**\n+/**\n    * @param dataFile data file\n    */\n-  public void writeTimestampToken(DataFile dataFile) {\n-    logger.debug(\"Adding signatures to the asic zip container\");\n-    String signatureFileName = \"META-INF/timestamp.tst\";\n-    new BytesEntryCallback(new ZipEntry(signatureFileName), dataFile.getBytes()).write();\n-  }\n+public void writeTimestampToken(DataFile dataFile) {\n+  logger.debug(\"Adding signatures to the asic zip container\");\n+  String signatureFileName = \"META-INF/timestamp.tst\";\n+  new BytesEntryCallback(new ZipEntry(signatureFileName), dataFile.getBytes()).write();\n+}\n \n-  /**\n+/**\n    * @param asicEntries list of ASIC entries\n    */\n-  public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n-    logger.debug(\"Writing existing zip container entries\");\n-    for (AsicEntry asicEntry : asicEntries) {\n-      DSSDocument content = asicEntry.getContent();\n-      ZipEntry zipEntry = asicEntry.getZipEntry();\n-      new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n-    }\n+public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n+  logger.debug(\"Writing existing zip container entries\");\n+  for (AsicEntry asicEntry : asicEntries) {\n+    DSSDocument content = asicEntry.getContent();\n+    ZipEntry zipEntry = asicEntry.getZipEntry();\n+    new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n   }\n+}\n \n-  /**\n+/**\n    * @param comment comment\n    */\n-  public void writeContainerComment(String comment) {\n-    logger.debug(\"Writing container comment: \" + comment);\n-    zipOutputStream.setComment(comment);\n-  }\n+public void writeContainerComment(String comment) {\n+  logger.debug(\"Writing container comment: \" + comment);\n+  zipOutputStream.setComment(comment);\n+}\n \n-  /**\n+/**\n    * @param zipComment comment\n    */\n-  public void setZipComment(String zipComment) {\n-    this.zipComment = zipComment;\n-  }\n-\n-  private class StreamEntryCallback extends EntryCallback {\n+public void setZipComment(String zipComment) {\n+  this.zipComment = zipComment;\n+}\n \n-    private final InputStream inputStream;\n+private class StreamEntryCallback extends EntryCallback {\n \n-    StreamEntryCallback(ZipEntry entry, InputStream inputStream) {\n-      this(entry, inputStream, true);\n-    }\n+  private final InputStream inputStream;\n \n-    StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n-      super(entry, addComment);\n-      this.inputStream = inputStream;\n-    }\n+  StreamEntryCallback(ZipEntry entry, InputStream inputStream) {\n+    this(entry, inputStream, true);\n+  }\n \n-    @Override\n-    void doWithEntryStream(OutputStream stream) throws IOException {\n-      IOUtils.copy(inputStream, stream);\n-    }\n+  StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n+    super(entry, addComment);\n+    this.inputStream = inputStream;\n+  }\n \n+  @Override\n+  void doWithEntryStream(OutputStream stream) throws IOException {\n+    IOUtils.copy(inputStream, stream);\n   }\n \n-  private class BytesEntryCallback extends EntryCallback {\n+}\n \n-    private final byte[] data;\n+private class BytesEntryCallback extends EntryCallback {\n \n-    BytesEntryCallback(ZipEntry entry, byte[] data) {\n-      super(entry);\n-      this.data = data;\n-    }\n+  private final byte[] data;\n \n-    @Override\n-    void doWithEntryStream(OutputStream stream) throws IOException {\n-      stream.write(data);\n-    }\n+  BytesEntryCallback(ZipEntry entry, byte[] data) {\n+    super(entry);\n+    this.data = data;\n+  }\n \n+  @Override\n+  void doWithEntryStream(OutputStream stream) throws IOException {\n+    stream.write(data);\n   }\n \n-  private abstract class EntryCallback {\n+}\n \n-    private final ZipEntry entry;\n-    private final boolean addComment;\n+private abstract class EntryCallback {\n \n-    EntryCallback(ZipEntry entry) {\n-      this(entry, true);\n-    }\n+  private final ZipEntry entry;\n+  private final boolean addComment;\n+\n+  EntryCallback(ZipEntry entry) {\n+    this(entry, true);\n+  }\n \n-    EntryCallback(ZipEntry entry, boolean addComment) {\n-      this.entry = entry;\n-      this.addComment = addComment;\n+  EntryCallback(ZipEntry entry, boolean addComment) {\n+    this.entry = entry;\n+    this.addComment = addComment;\n+  }\n+\n+  void write() {\n+    if (addComment) {\n+      entry.setComment(zipComment);\n     }\n \n-    void write() {\n-      if (addComment) {\n-        entry.setComment(zipComment);\n-      }\n-\n-      try {\n-        zipOutputStream.putNextEntry(entry);\n-        doWithEntryStream(zipOutputStream);\n-        zipOutputStream.closeEntry();\n-      } catch (IOException e) {\n-        handleIOException(\"Unable to write Zip entry to asic container\", e);\n-      }\n+    try {\n+      zipOutputStream.putNextEntry(entry);\n+      doWithEntryStream(zipOutputStream);\n+      zipOutputStream.closeEntry();\n+    } catch (IOException e) {\n+      handleIOException(\"Unable to write Zip entry to asic container\", e);\n     }\n+  }\n \n-    abstract void doWithEntryStream(OutputStream stream) throws IOException;\n+  abstract void doWithEntryStream(OutputStream stream) throws IOException;\n \n-  }\n+}\n \n-  private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n-    ZipEntry entryMimetype = new ZipEntry(ZIP_ENTRY_MIMETYPE);\n-    entryMimetype.setMethod(ZipEntry.STORED);\n-    entryMimetype.setSize(mimeTypeBytes.length);\n-    entryMimetype.setCompressedSize(mimeTypeBytes.length);\n-    CRC32 crc = new CRC32();\n-    crc.update(mimeTypeBytes);\n-    entryMimetype.setCrc(crc.getValue());\n-    return entryMimetype;\n-  }\n+private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n+  ZipEntry entryMimetype = new ZipEntry(ZIP_ENTRY_MIMETYPE);\n+  entryMimetype.setMethod(ZipEntry.STORED);\n+  entryMimetype.setSize(mimeTypeBytes.length);\n+  entryMimetype.setCompressedSize(mimeTypeBytes.length);\n+  CRC32 crc = new CRC32();\n+  crc.update(mimeTypeBytes);\n+  entryMimetype.setCrc(crc.getValue());\n+  return entryMimetype;\n+}\n \n-  private static void handleIOException(String message, IOException e) {\n-    logger.error(message + \": \" + e.getMessage());\n-    throw new TechnicalException(message, e);\n-  }\n+private static void handleIOException(String message, IOException e) {\n+  logger.error(message + \": \" + e.getMessage());\n+  throw new TechnicalException(message, e);\n+}\n \n }\n",
            "diff_size": 142
        }
    ]
}