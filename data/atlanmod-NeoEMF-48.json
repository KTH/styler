{
    "error_id": "48",
    "information": {
        "errors": [
            {
                "line": "222",
                "column": "73",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    public EClass get() {\n        return checkNotNull(lazyClass.get(),\n                \"Unable to find the EPackage associated with URI: %s. \" +\n                        \"Make sure it is registered in EPackage.Registry.\", uri);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "222",
                    "column": "73",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler/48/ClassBean.java\nindex 9c52467797..bd7a275fd7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler/48/ClassBean.java\n@@ -220,7 +220,7 @@ public class ClassBean implements Serializable {\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n                 \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "216",
                    "column": "69",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/intellij/48/ClassBean.java\nindex 9c52467797..94ef2a916c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/intellij/48/ClassBean.java\n@@ -71,10 +71,10 @@ public class ClassBean implements Serializable {\n         this.uri = checkNotNull(uri);\n \n         lazyClass = LazyReference.soft(() ->\n-                Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri))\n-                        .map(p -> p.getEClassifier(name))\n-                        .map(EClass.class::cast)\n-                        .orElse(null));\n+            Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri))\n+                .map(p -> p.getEClassifier(name))\n+                .map(EClass.class::cast)\n+                .orElse(null));\n     }\n \n     /**\n@@ -96,9 +96,7 @@ public class ClassBean implements Serializable {\n      *\n      * @param object the object from which the {@link EClass} has to be retrieve with the {@link\n      *               PersistentEObject#eClass()} method\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      * @see #from(EClass)\n      */\n@@ -113,9 +111,7 @@ public class ClassBean implements Serializable {\n      * This method behaves like: {@code of(reference.getName(), reference.getEPackage().getNsURI())}.\n      *\n      * @param eClass the {@link EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -129,9 +125,7 @@ public class ClassBean implements Serializable {\n      *\n      * @param name the name of the {@link EClass}\n      * @param uri  the literal representation of the {@link URI} of the {@link EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -186,10 +180,10 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Optional<ClassBean> inheritFrom() {\n         return get().getESuperTypes()\n-                .parallelStream()\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .findAny();\n+            .parallelStream()\n+            .filter(c -> !c.isInterface())\n+            .map(ClassBean::from)\n+            .findAny();\n     }\n \n     /**\n@@ -201,14 +195,14 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Set<ClassBean> inheritedBy() {\n         return get().getEPackage().getEClassifiers()\n-                .parallelStream()\n-                .filter(EClass.class::isInstance)\n-                .map(EClass.class::cast)\n-                .filter(c -> get().isSuperTypeOf(c))\n-                .filter(c -> !c.isAbstract())\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .collect(Collectors.toSet());\n+            .parallelStream()\n+            .filter(EClass.class::isInstance)\n+            .map(EClass.class::cast)\n+            .filter(c -> get().isSuperTypeOf(c))\n+            .filter(c -> !c.isAbstract())\n+            .filter(c -> !c.isInterface())\n+            .map(ClassBean::from)\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -219,8 +213,8 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+            \"Unable to find the EPackage associated with URI: %s. \" +\n+                \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n@@ -239,7 +233,7 @@ public class ClassBean implements Serializable {\n \n         ClassBean that = ClassBean.class.cast(o);\n         return Objects.equals(name, that.name)\n-                && Objects.equals(uri, that.uri);\n+            && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/naturalize/48/ClassBean.java\nindex 9c52467797..bcc16e33c4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/naturalize/48/ClassBean.java\n@@ -219,8 +219,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Unable to find the EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n@@ -246,5 +245,4 @@ public class ClassBean implements Serializable {\n     public String toString() {\n         return String.format(\"ClassBean {%s @ %s}\", name, uri);\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/codebuff/48/ClassBean.java\nindex 9c52467797..7efe44fab3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/codebuff/48/ClassBean.java\n@@ -13,17 +13,14 @@ package fr.inria.atlanmod.neoemf.data.bean;\n \n import fr.inria.atlanmod.commons.LazyReference;\n import fr.inria.atlanmod.neoemf.core.PersistentEObject;\n-\n import org.eclipse.emf.common.util.URI;\n import org.eclipse.emf.ecore.EClass;\n import org.eclipse.emf.ecore.EPackage;\n-\n import java.io.Serializable;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.annotation.ParametersAreNonnullByDefault;\n@@ -34,28 +31,37 @@ import static fr.inria.atlanmod.commons.Preconditions.checkNotNull;\n /**\n  * A simple representation of a {@link EClass}.\n  */\n+\n+\n @Immutable\n @ParametersAreNonnullByDefault\n public class ClassBean implements Serializable {\n \n+\n     @SuppressWarnings(\"JavaDoc\")\n     private static final long serialVersionUID = 3630220484508625215L;\n \n     /**\n      * The name of the meta-class.\n      */\n+\n+\n     @Nonnull\n     private final String name;\n \n     /**\n      * The literal representation of the {@link URI} of the meta-class.\n      */\n+\n+\n     @Nonnull\n     private final String uri;\n \n     /**\n      * The cached {@link EClass} of this bean.\n      */\n+\n+\n     @Nonnull\n     private final transient LazyReference<EClass> lazyClass;\n \n@@ -66,15 +72,15 @@ public class ClassBean implements Serializable {\n      * @param name the name of the {@link EClass}\n      * @param uri  the literal representation of the {@link URI} of the {@link EClass}\n      */\n+\n+\n     protected ClassBean(String name, String uri) {\n         this.name = checkNotNull(name);\n         this.uri = checkNotNull(uri);\n \n-        lazyClass = LazyReference.soft(() ->\n-                Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri))\n-                        .map(p -> p.getEClassifier(name))\n-                        .map(EClass.class::cast)\n-                        .orElse(null));\n+        lazyClass = LazyReference.soft(() -> Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri)).map(p -> p.getEClassifier(name))\n+                                                                                                             .map(EClass.class::cast)\n+                                                                                                             .orElse(null));\n     }\n \n     /**\n@@ -82,9 +88,10 @@ public class ClassBean implements Serializable {\n      *\n      * @param reference the represented {@link EClass}\n      */\n+\n+\n     private ClassBean(EClass reference) {\n         this(reference.getName(), reference.getEPackage().getNsURI());\n-\n         lazyClass.update(reference);\n     }\n \n@@ -102,6 +109,7 @@ public class ClassBean implements Serializable {\n      * @throws NullPointerException if any argument is {@code null}\n      * @see #from(EClass)\n      */\n+\n     @Nonnull\n     public static ClassBean from(PersistentEObject object) {\n         return from(object.eClass());\n@@ -118,6 +126,7 @@ public class ClassBean implements Serializable {\n      *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n+\n     @Nonnull\n     public static ClassBean from(EClass eClass) {\n         return new ClassBean(eClass);\n@@ -134,6 +143,7 @@ public class ClassBean implements Serializable {\n      *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n+\n     @Nonnull\n     public static ClassBean of(String name, String uri) {\n         return new ClassBean(name, uri);\n@@ -144,6 +154,7 @@ public class ClassBean implements Serializable {\n      *\n      * @return the name\n      */\n+\n     @Nonnull\n     public String name() {\n         return name;\n@@ -154,6 +165,7 @@ public class ClassBean implements Serializable {\n      *\n      * @return the URI\n      */\n+\n     @Nonnull\n     public String uri() {\n         return uri;\n@@ -164,6 +176,8 @@ public class ClassBean implements Serializable {\n      *\n      * @return {@code true} if this {@code ClassBean} represents an abstract class, {@code false} otherwise\n      */\n+\n+\n     public boolean isAbstract() {\n         return get().isAbstract();\n     }\n@@ -173,6 +187,8 @@ public class ClassBean implements Serializable {\n      *\n      * @return {@code true} if this {@code ClassBean} represents an interface, {@code false} otherwise\n      */\n+\n+\n     public boolean isInterface() {\n         return get().isInterface();\n     }\n@@ -183,13 +199,14 @@ public class ClassBean implements Serializable {\n      * @return an {@link Optional} containing the representation of the direct superclass, or {@link Optional#empty()}\n      * if the class has no superclass\n      */\n+\n     @Nonnull\n     public Optional<ClassBean> inheritFrom() {\n         return get().getESuperTypes()\n-                .parallelStream()\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .findAny();\n+                    .parallelStream()\n+                    .filter(c -> !c.isInterface())\n+                    .map(ClassBean::from)\n+                    .findAny();\n     }\n \n     /**\n@@ -198,17 +215,19 @@ public class ClassBean implements Serializable {\n      * @return a immutable {@link Set} containing the representation of all non-abstract subclasses that inherit,\n      * directly and indirectly, from this {@code ClassBean}\n      */\n+\n     @Nonnull\n     public Set<ClassBean> inheritedBy() {\n-        return get().getEPackage().getEClassifiers()\n-                .parallelStream()\n-                .filter(EClass.class::isInstance)\n-                .map(EClass.class::cast)\n-                .filter(c -> get().isSuperTypeOf(c))\n-                .filter(c -> !c.isAbstract())\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .collect(Collectors.toSet());\n+        return get().getEPackage()\n+                    .getEClassifiers()\n+                    .parallelStream()\n+                    .filter(EClass.class::isInstance)\n+                    .map(EClass.class::cast)\n+                    .filter(c -> get().isSuperTypeOf(c))\n+                    .filter(c -> !c.isAbstract())\n+                    .filter(c -> !c.isInterface())\n+                    .map(ClassBean::from)\n+                    .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -216,11 +235,10 @@ public class ClassBean implements Serializable {\n      *\n      * @return a class, or {@code null} if it cannot be found\n      */\n+\n     @Nonnull\n     public EClass get() {\n-        return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+        return checkNotNull(lazyClass.get(), \"Unable to find the EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n@@ -233,18 +251,18 @@ public class ClassBean implements Serializable {\n         if (this == o) {\n             return true;\n         }\n+\n         if (!ClassBean.class.isInstance(o)) {\n             return false;\n         }\n \n         ClassBean that = ClassBean.class.cast(o);\n-        return Objects.equals(name, that.name)\n-                && Objects.equals(uri, that.uri);\n+\n+        return Objects.equals(name, that.name) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n     public String toString() {\n         return String.format(\"ClassBean {%s @ %s}\", name, uri);\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "222",
                    "column": "73",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_random/48/ClassBean.java\nindex 9c52467797..bd7a275fd7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_random/48/ClassBean.java\n@@ -220,7 +220,7 @@ public class ClassBean implements Serializable {\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n                 \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "222",
                    "column": "72",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "222",
                    "column": "72",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_three_grams/48/ClassBean.java\nindex 9c52467797..07c6f8e5e7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/errored/1/48/ClassBean.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/atlanmod-NeoEMF/styler_three_grams/48/ClassBean.java\n@@ -219,7 +219,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n+                \"Unable to find the EPackage associated with URI: %s. \"+\n                         \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n",
            "diff_size": 1
        }
    ]
}