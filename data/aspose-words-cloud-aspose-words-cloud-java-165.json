{
    "error_id": "165",
    "information": {
        "errors": [
            {
                "line": "163",
                "column": "94",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n    return\n        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n        Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..e41af261b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/165/MetafileRenderingOptionsData.java\n@@ -160,7 +160,7 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..03bf8f309a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/165/MetafileRenderingOptionsData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,126 +50,132 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"container class for options of metafile rendering.\")\n public class MetafileRenderingOptionsData {\n-    @SerializedName(\"EmfPlusDualRenderingMode\")\n-    private String emfPlusDualRenderingMode = null;\n+  @SerializedName(\"EmfPlusDualRenderingMode\")\n+  private String emfPlusDualRenderingMode = null;\n \n-    @SerializedName(\"EmulateRasterOperations\")\n-    private Boolean emulateRasterOperations = null;\n+  @SerializedName(\"EmulateRasterOperations\")\n+  private Boolean emulateRasterOperations = null;\n \n-    @SerializedName(\"RenderingMode\")\n-    private String renderingMode = null;\n+  @SerializedName(\"RenderingMode\")\n+  private String renderingMode = null;\n \n-    @SerializedName(\"ScaleWmfFontsToMetafileSize\")\n-    private Boolean scaleWmfFontsToMetafileSize = null;\n+  @SerializedName(\"ScaleWmfFontsToMetafileSize\")\n+  private Boolean scaleWmfFontsToMetafileSize = null;\n \n-    @SerializedName(\"UseEmfEmbeddedToWmf\")\n-    private Boolean useEmfEmbeddedToWmf = null;\n-    public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n-        return this;\n-    }\n+  @SerializedName(\"UseEmfEmbeddedToWmf\")\n+  private Boolean useEmfEmbeddedToWmf = null;\n \n-    /**\n-     * Gets or sets determines how EMF+ Dual metafiles should be rendered.\n-    * @return emfPlusDualRenderingMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n-    public String getEmfPlusDualRenderingMode() {\n-        return emfPlusDualRenderingMode;\n-    }\n+  public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+    return this;\n+  }\n \n-    public void setEmfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n-    }\n+  /**\n+   * Gets or sets determines how EMF+ Dual metafiles should be rendered.\n+   *\n+   * @return emfPlusDualRenderingMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n+  public String getEmfPlusDualRenderingMode() {\n+    return emfPlusDualRenderingMode;\n+  }\n \n-    public MetafileRenderingOptionsData emulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n-        return this;\n-    }\n+  public void setEmfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+  }\n \n-    /**\n-     * Gets or sets a value determining whether or not the raster operations should be emulated.\n-    * @return emulateRasterOperations\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n-    public Boolean getEmulateRasterOperations() {\n-        return emulateRasterOperations;\n-    }\n+  public MetafileRenderingOptionsData emulateRasterOperations(Boolean emulateRasterOperations) {\n+    this.emulateRasterOperations = emulateRasterOperations;\n+    return this;\n+  }\n \n-    public void setEmulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n-    }\n+  /**\n+   * Gets or sets a value determining whether or not the raster operations should be emulated.\n+   *\n+   * @return emulateRasterOperations\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n+  public Boolean getEmulateRasterOperations() {\n+    return emulateRasterOperations;\n+  }\n \n-    public MetafileRenderingOptionsData renderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n-        return this;\n-    }\n+  public void setEmulateRasterOperations(Boolean emulateRasterOperations) {\n+    this.emulateRasterOperations = emulateRasterOperations;\n+  }\n \n-    /**\n-     * Gets or sets determines how metafile images should be rendered.\n-    * @return renderingMode\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n-    public String getRenderingMode() {\n-        return renderingMode;\n-    }\n+  public MetafileRenderingOptionsData renderingMode(String renderingMode) {\n+    this.renderingMode = renderingMode;\n+    return this;\n+  }\n \n-    public void setRenderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n-    }\n+  /**\n+   * Gets or sets determines how metafile images should be rendered.\n+   *\n+   * @return renderingMode\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n+  public String getRenderingMode() {\n+    return renderingMode;\n+  }\n \n-    public MetafileRenderingOptionsData scaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n-        return this;\n-    }\n+  public void setRenderingMode(String renderingMode) {\n+    this.renderingMode = renderingMode;\n+  }\n \n-    /**\n-     * Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page.\n-     * The default value is true.\n-    * @return scaleWmfFontsToMetafileSize\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n-    public Boolean getScaleWmfFontsToMetafileSize() {\n-        return scaleWmfFontsToMetafileSize;\n-    }\n+  public MetafileRenderingOptionsData scaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+    return this;\n+  }\n \n-    public void setScaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n-    }\n+  /**\n+   * Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page.\n+   * The default value is true.\n+   *\n+   * @return scaleWmfFontsToMetafileSize\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n+  public Boolean getScaleWmfFontsToMetafileSize() {\n+    return scaleWmfFontsToMetafileSize;\n+  }\n \n-    public MetafileRenderingOptionsData useEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n-        return this;\n-    }\n+  public void setScaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+  }\n \n-    /**\n-     * Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\n-    * @return useEmfEmbeddedToWmf\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n-    public Boolean getUseEmfEmbeddedToWmf() {\n-        return useEmfEmbeddedToWmf;\n-    }\n+  public MetafileRenderingOptionsData useEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+    return this;\n+  }\n \n-    public void setUseEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n-    }\n+  /**\n+   * Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\n+   *\n+   * @return useEmfEmbeddedToWmf\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n+  public Boolean getUseEmfEmbeddedToWmf() {\n+    return useEmfEmbeddedToWmf;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+  public void setUseEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n-        Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n-        Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n-        Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n-        Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n+            Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n+            Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n+            Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n+            Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n   }\n \n   @Override\n",
            "diff_size": 139
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "165",
                    "column": "90",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..cac331bd5f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/165/MetafileRenderingOptionsData.java\n@@ -61,7 +61,8 @@ public class MetafileRenderingOptionsData {\n \n     @SerializedName(\"UseEmfEmbeddedToWmf\")\n     private Boolean useEmfEmbeddedToWmf = null;\n-    public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n+\n+public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n         this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n         return this;\n     }\n@@ -156,13 +157,13 @@ public class MetafileRenderingOptionsData {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n-    return\n-        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n+\n+MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    return Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n         Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n         Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n@@ -197,4 +198,4 @@ public class MetafileRenderingOptionsData {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..4c76bea29b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/165/MetafileRenderingOptionsData.java\n@@ -45,7 +45,10 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * container class for options of metafile rendering.\n  */\n+\n+\n @ApiModel(description = \"container class for options of metafile rendering.\")\n+\n public class MetafileRenderingOptionsData {\n     @SerializedName(\"EmfPlusDualRenderingMode\")\n     private String emfPlusDualRenderingMode = null;\n@@ -61,63 +64,76 @@ public class MetafileRenderingOptionsData {\n \n     @SerializedName(\"UseEmfEmbeddedToWmf\")\n     private Boolean useEmfEmbeddedToWmf = null;\n+\n     public MetafileRenderingOptionsData emfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n-        return this;\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines how EMF+ Dual metafiles should be rendered.\n     * @return emfPlusDualRenderingMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines how EMF+ Dual metafiles should be rendered.\")\n     public String getEmfPlusDualRenderingMode() {\n-        return emfPlusDualRenderingMode;\n+    return emfPlusDualRenderingMode;\n     }\n \n+\n     public void setEmfPlusDualRenderingMode(String emfPlusDualRenderingMode) {\n-        this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n+    this.emfPlusDualRenderingMode = emfPlusDualRenderingMode;\n     }\n \n+\n     public MetafileRenderingOptionsData emulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n-        return this;\n+    this.emulateRasterOperations = emulateRasterOperations;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a value determining whether or not the raster operations should be emulated.\n     * @return emulateRasterOperations\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value determining whether or not the raster operations should be emulated.\")\n     public Boolean getEmulateRasterOperations() {\n-        return emulateRasterOperations;\n+    return emulateRasterOperations;\n     }\n \n+\n     public void setEmulateRasterOperations(Boolean emulateRasterOperations) {\n-        this.emulateRasterOperations = emulateRasterOperations;\n+    this.emulateRasterOperations = emulateRasterOperations;\n     }\n \n+\n     public MetafileRenderingOptionsData renderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n-        return this;\n+    this.renderingMode = renderingMode;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines how metafile images should be rendered.\n     * @return renderingMode\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines how metafile images should be rendered.\")\n     public String getRenderingMode() {\n-        return renderingMode;\n+    return renderingMode;\n     }\n \n+\n     public void setRenderingMode(String renderingMode) {\n-        this.renderingMode = renderingMode;\n+    this.renderingMode = renderingMode;\n     }\n \n+\n     public MetafileRenderingOptionsData scaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n-        return this;\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+    return this;\n     }\n \n     /**\n@@ -125,57 +141,69 @@ public class MetafileRenderingOptionsData {\n      * The default value is true.\n     * @return scaleWmfFontsToMetafileSize\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value determining whether or not to scale fonts in WMF metafile according to metafile size on the page. The default value is true.\")\n     public Boolean getScaleWmfFontsToMetafileSize() {\n-        return scaleWmfFontsToMetafileSize;\n+    return scaleWmfFontsToMetafileSize;\n     }\n \n+\n     public void setScaleWmfFontsToMetafileSize(Boolean scaleWmfFontsToMetafileSize) {\n-        this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n+    this.scaleWmfFontsToMetafileSize = scaleWmfFontsToMetafileSize;\n     }\n \n+\n     public MetafileRenderingOptionsData useEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n-        return this;\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+    return this;\n     }\n \n     /**\n      * Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\n     * @return useEmfEmbeddedToWmf\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets determines how WMF metafiles with embedded EMF metafiles should be rendered.\")\n     public Boolean getUseEmfEmbeddedToWmf() {\n-        return useEmfEmbeddedToWmf;\n+    return useEmfEmbeddedToWmf;\n     }\n \n+\n     public void setUseEmfEmbeddedToWmf(Boolean useEmfEmbeddedToWmf) {\n-        this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n+    this.useEmfEmbeddedToWmf = useEmfEmbeddedToWmf;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n-    return\n-        Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n+\n+        MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n+        return Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n         Objects.equals(this.renderingMode, metafileRenderingOptionsData.renderingMode) &&\n-        Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n-        Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n-  }\n+            Objects.equals(this.scaleWmfFontsToMetafileSize, metafileRenderingOptionsData.scaleWmfFontsToMetafileSize) &&\n+            Objects.equals(this.useEmfEmbeddedToWmf, metafileRenderingOptionsData.useEmfEmbeddedToWmf);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(emfPlusDualRenderingMode, emulateRasterOperations, renderingMode, scaleWmfFontsToMetafileSize, useEmfEmbeddedToWmf);\n-  }\n+    }\n+\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class MetafileRenderingOptionsData {\\n\");\n     sb.append(\"    emfPlusDualRenderingMode: \").append(toIndentedString(emfPlusDualRenderingMode)).append(\"\\n\");\n@@ -185,16 +213,19 @@ public class MetafileRenderingOptionsData {\n     sb.append(\"    useEmfEmbeddedToWmf: \").append(toIndentedString(useEmfEmbeddedToWmf)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..e41af261b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/165/MetafileRenderingOptionsData.java\n@@ -160,7 +160,7 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/165/MetafileRenderingOptionsData.java\nindex b42eb23a94..66fe2bfc79 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/165/MetafileRenderingOptionsData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/165/MetafileRenderingOptionsData.java\n@@ -160,7 +160,9 @@ public class MetafileRenderingOptionsData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData)o;\n+    MetafileRenderingOptionsData metafileRenderingOptionsData = (MetafileRenderingOptionsData\n+\n+    ) o;\n     return\n         Objects.equals(this.emfPlusDualRenderingMode, metafileRenderingOptionsData.emfPlusDualRenderingMode) &&\n         Objects.equals(this.emulateRasterOperations, metafileRenderingOptionsData.emulateRasterOperations) &&\n",
            "diff_size": 3
        }
    ]
}