{
    "error_id": "195",
    "information": {
        "errors": [
            {
                "line": "120",
                "column": "80",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private boolean isInQueueTimeout() {\n    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/195/HighwayServerInvoke.java\nindex 47c9afa311..98749e4a05 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/195/HighwayServerInvoke.java\n@@ -117,99 +117,99 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n-  }\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+}\n \n-  private void doRunInExecutor() throws Exception {\n-    invocation.onExecuteStart();\n+private void doRunInExecutor() throws Exception {\n+  invocation.onExecuteStart();\n \n-    invocation.getInvocationStageTrace().startServerFiltersRequest();\n-    HighwayCodec.decodeRequest(invocation, header, operationProtobuf, bodyBuffer);\n-    invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket().remoteAddress());\n+  invocation.getInvocationStageTrace().startServerFiltersRequest();\n+  HighwayCodec.decodeRequest(invocation, header, operationProtobuf, bodyBuffer);\n+  invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket().remoteAddress());\n \n-    invocation.getInvocationStageTrace().startHandlersRequest();\n-    invocation.next(response -> sendResponse(invocation.getContext(), response));\n-  }\n+  invocation.getInvocationStageTrace().startHandlersRequest();\n+  invocation.next(response -> sendResponse(invocation.getContext(), response));\n+}\n \n-  private void sendResponse(Map<String, String> context, Response response) {\n-    invocation.getInvocationStageTrace().finishHandlersResponse();\n+private void sendResponse(Map<String, String> context, Response response) {\n+  invocation.getInvocationStageTrace().finishHandlersResponse();\n \n-    ResponseHeader header = new ResponseHeader();\n-    header.setStatusCode(response.getStatusCode());\n-    header.setReasonPhrase(response.getReasonPhrase());\n-    header.setContext(context);\n-    header.setHeaders(response.getHeaders());\n+  ResponseHeader header = new ResponseHeader();\n+  header.setStatusCode(response.getStatusCode());\n+  header.setReasonPhrase(response.getReasonPhrase());\n+  header.setContext(context);\n+  header.setHeaders(response.getHeaders());\n \n-    ResponseRootSerializer bodySchema = operationProtobuf.findResponseRootSerializer(response.getStatusCode());\n-    Object body = response.getResult();\n-    if (response.isFailed()) {\n-      body = ((InvocationException) body).getErrorData();\n-    }\n+  ResponseRootSerializer bodySchema = operationProtobuf.findResponseRootSerializer(response.getStatusCode());\n+  Object body = response.getResult();\n+  if (response.isFailed()) {\n+    body = ((InvocationException) body).getErrorData();\n+  }\n \n-    try {\n-      Buffer respBuffer = HighwayCodec.encodeResponse(msgId, header, bodySchema, body);\n-      invocation.getInvocationStageTrace().finishServerFiltersResponse();\n-      connection.write(respBuffer.getByteBuf());\n-    } catch (Exception e) {\n-      // keep highway performance and simple, this encoding/decoding error not need handle by client\n-      String msg = String.format(\"encode response failed, %s, msgId=%d\",\n-          invocation.getOperationMeta().getMicroserviceQualifiedName(),\n-          msgId);\n-      LOGGER.error(msg, e);\n-    } finally {\n-      if (invocation != null) {\n-        invocation.onFinish(response);\n-      }\n+  try {\n+    Buffer respBuffer = HighwayCodec.encodeResponse(msgId, header, bodySchema, body);\n+    invocation.getInvocationStageTrace().finishServerFiltersResponse();\n+    connection.write(respBuffer.getByteBuf());\n+  } catch (Exception e) {\n+    // keep highway performance and simple, this encoding/decoding error not need handle by client\n+    String msg = String.format(\"encode response failed, %s, msgId=%d\",\n+        invocation.getOperationMeta().getMicroserviceQualifiedName(),\n+        msgId);\n+    LOGGER.error(msg, e);\n+  } finally {\n+    if (invocation != null) {\n+      invocation.onFinish(response);\n     }\n   }\n+}\n \n-  /**\n+/**\n    * start time in queue.\n    */\n-  public void execute() {\n-    try {\n-      invocation = InvocationFactory.forProvider(endpoint,\n-          operationMeta,\n-          null);\n-      operationProtobuf = ProtobufManager.getOrCreateOperation(invocation);\n-      invocation.onStart(null, start);\n-      invocation.getInvocationStageTrace().startSchedule();\n-\n-      // copied from HighwayCodec#decodeRequest()\n-      // for temporary qps enhance purpose, we'll remove it when handler mechanism is refactored\n-      invocation.mergeContext(header.getContext());\n-\n-      Holder<Boolean> qpsFlowControlReject = checkQpsFlowControl(operationMeta);\n-      if (qpsFlowControlReject.value) {\n-        return;\n-      }\n+public void execute() {\n+  try {\n+    invocation = InvocationFactory.forProvider(endpoint,\n+        operationMeta,\n+        null);\n+    operationProtobuf = ProtobufManager.getOrCreateOperation(invocation);\n+    invocation.onStart(null, start);\n+    invocation.getInvocationStageTrace().startSchedule();\n+\n+    // copied from HighwayCodec#decodeRequest()\n+    // for temporary qps enhance purpose, we'll remove it when handler mechanism is refactored\n+    invocation.mergeContext(header.getContext());\n+\n+    Holder<Boolean> qpsFlowControlReject = checkQpsFlowControl(operationMeta);\n+    if (qpsFlowControlReject.value) {\n+      return;\n+    }\n \n-      operationMeta.getExecutor().execute(this::runInExecutor);\n-    } catch (Throwable e) {\n-      if (e instanceof RejectedExecutionException) {\n-        LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n-      }\n-      sendResponse(header.getContext(), Response.providerFailResp(e));\n+    operationMeta.getExecutor().execute(this::runInExecutor);\n+  } catch (Throwable e) {\n+    if (e instanceof RejectedExecutionException) {\n+      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n     }\n+    sendResponse(header.getContext(), Response.providerFailResp(e));\n   }\n+}\n \n-  private Holder<Boolean> checkQpsFlowControl(OperationMeta operationMeta) {\n-    Holder<Boolean> qpsFlowControlReject = new Holder<>(false);\n-    @SuppressWarnings(\"deprecation\")\n-    Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n-    if (null != providerQpsFlowControlHandler) {\n-      try {\n-        providerQpsFlowControlHandler.handle(invocation, response -> {\n-          qpsFlowControlReject.value = true;\n-          sendResponse(header.getContext(), response);\n-        });\n-      } catch (Exception e) {\n-        LOGGER.error(\"failed to execute ProviderQpsFlowControlHandler\", e);\n+private Holder<Boolean> checkQpsFlowControl(OperationMeta operationMeta) {\n+  Holder<Boolean> qpsFlowControlReject = new Holder<>(false);\n+  @SuppressWarnings(\"deprecation\")\n+  Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n+  if (null != providerQpsFlowControlHandler) {\n+    try {\n+      providerQpsFlowControlHandler.handle(invocation, response -> {\n         qpsFlowControlReject.value = true;\n-        sendResponse(header.getContext(), Response.providerFailResp(e));\n-      }\n+        sendResponse(header.getContext(), response);\n+      });\n+    } catch (Exception e) {\n+      LOGGER.error(\"failed to execute ProviderQpsFlowControlHandler\", e);\n+      qpsFlowControlReject.value = true;\n+      sendResponse(header.getContext(), Response.providerFailResp(e));\n     }\n-    return qpsFlowControlReject;\n   }\n+  return qpsFlowControlReject;\n+}\n }\n",
            "diff_size": 85
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "120",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/195/HighwayServerInvoke.java\nindex 47c9afa311..8e99a14f43 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/195/HighwayServerInvoke.java\n@@ -117,8 +117,7 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n   }\n \n   private void doRunInExecutor() throws Exception {\n@@ -212,4 +211,4 @@ public class HighwayServerInvoke {\n     }\n     return qpsFlowControlReject;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/195/HighwayServerInvoke.java\nindex 47c9afa311..98749e4a05 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/195/HighwayServerInvoke.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/195/HighwayServerInvoke.java\n@@ -117,99 +117,99 @@ public class HighwayServerInvoke {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n-  }\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > operationMeta.getConfig().getNanoHighwayRequestWaitInPoolTimeout();\n+}\n \n-  private void doRunInExecutor() throws Exception {\n-    invocation.onExecuteStart();\n+private void doRunInExecutor() throws Exception {\n+  invocation.onExecuteStart();\n \n-    invocation.getInvocationStageTrace().startServerFiltersRequest();\n-    HighwayCodec.decodeRequest(invocation, header, operationProtobuf, bodyBuffer);\n-    invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket().remoteAddress());\n+  invocation.getInvocationStageTrace().startServerFiltersRequest();\n+  HighwayCodec.decodeRequest(invocation, header, operationProtobuf, bodyBuffer);\n+  invocation.getHandlerContext().put(Const.REMOTE_ADDRESS, this.connection.getNetSocket().remoteAddress());\n \n-    invocation.getInvocationStageTrace().startHandlersRequest();\n-    invocation.next(response -> sendResponse(invocation.getContext(), response));\n-  }\n+  invocation.getInvocationStageTrace().startHandlersRequest();\n+  invocation.next(response -> sendResponse(invocation.getContext(), response));\n+}\n \n-  private void sendResponse(Map<String, String> context, Response response) {\n-    invocation.getInvocationStageTrace().finishHandlersResponse();\n+private void sendResponse(Map<String, String> context, Response response) {\n+  invocation.getInvocationStageTrace().finishHandlersResponse();\n \n-    ResponseHeader header = new ResponseHeader();\n-    header.setStatusCode(response.getStatusCode());\n-    header.setReasonPhrase(response.getReasonPhrase());\n-    header.setContext(context);\n-    header.setHeaders(response.getHeaders());\n+  ResponseHeader header = new ResponseHeader();\n+  header.setStatusCode(response.getStatusCode());\n+  header.setReasonPhrase(response.getReasonPhrase());\n+  header.setContext(context);\n+  header.setHeaders(response.getHeaders());\n \n-    ResponseRootSerializer bodySchema = operationProtobuf.findResponseRootSerializer(response.getStatusCode());\n-    Object body = response.getResult();\n-    if (response.isFailed()) {\n-      body = ((InvocationException) body).getErrorData();\n-    }\n+  ResponseRootSerializer bodySchema = operationProtobuf.findResponseRootSerializer(response.getStatusCode());\n+  Object body = response.getResult();\n+  if (response.isFailed()) {\n+    body = ((InvocationException) body).getErrorData();\n+  }\n \n-    try {\n-      Buffer respBuffer = HighwayCodec.encodeResponse(msgId, header, bodySchema, body);\n-      invocation.getInvocationStageTrace().finishServerFiltersResponse();\n-      connection.write(respBuffer.getByteBuf());\n-    } catch (Exception e) {\n-      // keep highway performance and simple, this encoding/decoding error not need handle by client\n-      String msg = String.format(\"encode response failed, %s, msgId=%d\",\n-          invocation.getOperationMeta().getMicroserviceQualifiedName(),\n-          msgId);\n-      LOGGER.error(msg, e);\n-    } finally {\n-      if (invocation != null) {\n-        invocation.onFinish(response);\n-      }\n+  try {\n+    Buffer respBuffer = HighwayCodec.encodeResponse(msgId, header, bodySchema, body);\n+    invocation.getInvocationStageTrace().finishServerFiltersResponse();\n+    connection.write(respBuffer.getByteBuf());\n+  } catch (Exception e) {\n+    // keep highway performance and simple, this encoding/decoding error not need handle by client\n+    String msg = String.format(\"encode response failed, %s, msgId=%d\",\n+        invocation.getOperationMeta().getMicroserviceQualifiedName(),\n+        msgId);\n+    LOGGER.error(msg, e);\n+  } finally {\n+    if (invocation != null) {\n+      invocation.onFinish(response);\n     }\n   }\n+}\n \n-  /**\n+/**\n    * start time in queue.\n    */\n-  public void execute() {\n-    try {\n-      invocation = InvocationFactory.forProvider(endpoint,\n-          operationMeta,\n-          null);\n-      operationProtobuf = ProtobufManager.getOrCreateOperation(invocation);\n-      invocation.onStart(null, start);\n-      invocation.getInvocationStageTrace().startSchedule();\n-\n-      // copied from HighwayCodec#decodeRequest()\n-      // for temporary qps enhance purpose, we'll remove it when handler mechanism is refactored\n-      invocation.mergeContext(header.getContext());\n-\n-      Holder<Boolean> qpsFlowControlReject = checkQpsFlowControl(operationMeta);\n-      if (qpsFlowControlReject.value) {\n-        return;\n-      }\n+public void execute() {\n+  try {\n+    invocation = InvocationFactory.forProvider(endpoint,\n+        operationMeta,\n+        null);\n+    operationProtobuf = ProtobufManager.getOrCreateOperation(invocation);\n+    invocation.onStart(null, start);\n+    invocation.getInvocationStageTrace().startSchedule();\n+\n+    // copied from HighwayCodec#decodeRequest()\n+    // for temporary qps enhance purpose, we'll remove it when handler mechanism is refactored\n+    invocation.mergeContext(header.getContext());\n+\n+    Holder<Boolean> qpsFlowControlReject = checkQpsFlowControl(operationMeta);\n+    if (qpsFlowControlReject.value) {\n+      return;\n+    }\n \n-      operationMeta.getExecutor().execute(this::runInExecutor);\n-    } catch (Throwable e) {\n-      if (e instanceof RejectedExecutionException) {\n-        LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n-      }\n-      sendResponse(header.getContext(), Response.providerFailResp(e));\n+    operationMeta.getExecutor().execute(this::runInExecutor);\n+  } catch (Throwable e) {\n+    if (e instanceof RejectedExecutionException) {\n+      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n     }\n+    sendResponse(header.getContext(), Response.providerFailResp(e));\n   }\n+}\n \n-  private Holder<Boolean> checkQpsFlowControl(OperationMeta operationMeta) {\n-    Holder<Boolean> qpsFlowControlReject = new Holder<>(false);\n-    @SuppressWarnings(\"deprecation\")\n-    Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n-    if (null != providerQpsFlowControlHandler) {\n-      try {\n-        providerQpsFlowControlHandler.handle(invocation, response -> {\n-          qpsFlowControlReject.value = true;\n-          sendResponse(header.getContext(), response);\n-        });\n-      } catch (Exception e) {\n-        LOGGER.error(\"failed to execute ProviderQpsFlowControlHandler\", e);\n+private Holder<Boolean> checkQpsFlowControl(OperationMeta operationMeta) {\n+  Holder<Boolean> qpsFlowControlReject = new Holder<>(false);\n+  @SuppressWarnings(\"deprecation\")\n+  Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n+  if (null != providerQpsFlowControlHandler) {\n+    try {\n+      providerQpsFlowControlHandler.handle(invocation, response -> {\n         qpsFlowControlReject.value = true;\n-        sendResponse(header.getContext(), Response.providerFailResp(e));\n-      }\n+        sendResponse(header.getContext(), response);\n+      });\n+    } catch (Exception e) {\n+      LOGGER.error(\"failed to execute ProviderQpsFlowControlHandler\", e);\n+      qpsFlowControlReject.value = true;\n+      sendResponse(header.getContext(), Response.providerFailResp(e));\n     }\n-    return qpsFlowControlReject;\n   }\n+  return qpsFlowControlReject;\n+}\n }\n",
            "diff_size": 85
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "120",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}