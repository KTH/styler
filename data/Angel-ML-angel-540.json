{
    "error_id": "540",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/540/ServerIntLongRow.java\nindex 609c889845..669303f730 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/540/ServerIntLongRow.java\n@@ -35,143 +35,146 @@ import org.apache.commons.logging.LogFactory;\n  */\n public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n \n-  private static final Log LOG = LogFactory.getLog(ServerIntLongRow.class);\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   * @param storage inner storage\n-   */\n-  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntLongStorage storage) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, storage);\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerIntLongRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerIntLongRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  @Override\n-  public IntLongStorage getStorage() {\n-    return (IntLongStorage) storage;\n-  }\n-\n-  @Override\n-  public long get(int index) {\n-    return getStorage().get(index);\n-  }\n-\n-  @Override\n-  public void set(int index, long value) {\n-    getStorage().set(index, value);\n-  }\n-\n-  @Override\n-  public long[] get(int[] indices) {\n-    return getStorage().get(indices);\n-  }\n-\n-  @Override\n-  public void set(int[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    getStorage().set(indices, values);\n-  }\n-\n-  @Override\n-  public void addTo(int index, long value) {\n-    getStorage().addTo(index, value);\n-  }\n-\n-  @Override\n-  public void addTo(int[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    getStorage().addTo(indices, values);\n-  }\n-\n-  @Override\n-  public void mergeTo(IntLongVector mergedRow) {\n-    startRead();\n-    try {\n-      getStorage().mergeTo(mergedRow);\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerIntLongRow deepClone() {\n-    startRead();\n-    try {\n-      return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().deepClone());\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow\n-  adaptiveClone() {\n-    startRead();\n-    try {\n-      return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().adaptiveClone());\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(int index) {\n-    return getStorage().exist(index);\n-  }\n-\n-  @Override\n-  public long initAndGet(int index, InitFunc func) {\n-    return getStorage().initAndGet(index, func);\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n-    getStorage().indexGet(indexType, indexSize, in, out, func);\n-  }\n-\n-  @Override\n-  public void elemUpdate(LongElemUpdateFunc func) {\n-    getStorage().elemUpdate(func);\n-  }\n+    private static final Log LOG = LogFactory.getLog(ServerIntLongRow.class);\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param storage    inner storage\n+     */\n+    public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n+                            IntLongStorage storage) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, storage);\n+    }\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n+\n+    /**\n+     * Create a new ServerIntLongRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerIntLongRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public IntLongStorage getStorage() {\n+        return (IntLongStorage) storage;\n+    }\n+\n+    @Override\n+    public long get(int index) {\n+        return getStorage().get(index);\n+    }\n+\n+    @Override\n+    public void set(int index, long value) {\n+        getStorage().set(index, value);\n+    }\n+\n+    @Override\n+    public long[] get(int[] indices) {\n+        return getStorage().get(indices);\n+    }\n+\n+    @Override\n+    public void set(int[] indices, long[] values) {\n+        assert indices.length == values.length;\n+        getStorage().set(indices, values);\n+    }\n+\n+    @Override\n+    public void addTo(int index, long value) {\n+        getStorage().addTo(index, value);\n+    }\n+\n+    @Override\n+    public void addTo(int[] indices, long[] values) {\n+        assert indices.length == values.length;\n+        getStorage().addTo(indices, values);\n+    }\n+\n+    @Override\n+    public void mergeTo(IntLongVector mergedRow) {\n+        startRead();\n+        try {\n+            getStorage().mergeTo(mergedRow);\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    @Override\n+    public ServerIntLongRow deepClone() {\n+        startRead();\n+        try {\n+            return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol,\n+                    (int) estElemNum,\n+                    (IntLongStorage) getStorage().deepClone());\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol,\n+                    (int) estElemNum,\n+                    (IntLongStorage) getStorage().adaptiveClone());\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(int index) {\n+        return getStorage().exist(index);\n+    }\n+\n+    @Override\n+    public long initAndGet(int index, InitFunc func) {\n+        return getStorage().initAndGet(index, func);\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out,\n+                         InitFunc func) {\n+        getStorage().indexGet(indexType, indexSize, in, out, func);\n+    }\n+\n+    @Override\n+    public void elemUpdate(LongElemUpdateFunc func) {\n+        getStorage().elemUpdate(func);\n+    }\n }\n",
            "diff_size": 142
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/540/ServerIntLongRow.java\nindex 609c889845..a21f50af70 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/540/ServerIntLongRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntLongVector;\n@@ -131,20 +130,19 @@ public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n     startRead();\n     try {\n       return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().deepClone());\n-    } finally {\n+(IntLongStorage) getStorage().deepClone());\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-  adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().adaptiveClone());\n-    } finally {\n+(IntLongStorage) getStorage().adaptiveClone());\n+  } finally {\n       endRead();\n     }\n   }\n@@ -174,4 +172,4 @@ public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n   public void elemUpdate(LongElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 51.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 65.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 75.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 84.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 169.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/540/ServerIntLongRow.java\nindex 609c889845..bd3a26e5ee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/540/ServerIntLongRow.java\n@@ -33,9 +33,9 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * The row with \"int\" index type and \"long\" value type in PS\n  */\n-public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n \n-  private static final Log LOG = LogFactory.getLog(ServerIntLongRow.class);\n+public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n+    private static final Log LOG = LogFactory.getLog(ServerIntLongRow.class);\n \n   /**\n    * Create a new ServerIntDoubleRow\n@@ -47,10 +47,10 @@ public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n    * @param estElemNum the estimate element number\n    * @param storage inner storage\n    */\n-  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntLongStorage storage) {\n+\n+    public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntLongStorage storage) {\n     super(rowId, rowType, startCol, endCol, estElemNum, storage);\n-  }\n+    }\n \n   /**\n    * Create a new ServerIntDoubleRow\n@@ -61,93 +61,102 @@ public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n+\n+    public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n+    }\n \n   /**\n    * Create a new ServerIntLongRow\n    *\n    * @param rowType row type\n    */\n-  public ServerIntLongRow(RowType rowType) {\n+\n+    public ServerIntLongRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n-  }\n+    }\n \n   //////////////////////////////////////////////////////////////////////////////////////////////////\n   //Methods with out lock operation, you must call startWrite/startRead before using these methods\n   // and call endWrite/endRead after\n   //////////////////////////////////////////////////////////////////////////////////////////////////\n \n-  @Override\n-  public IntLongStorage getStorage() {\n+    @Override\n+    public IntLongStorage getStorage() {\n     return (IntLongStorage) storage;\n-  }\n+    }\n \n-  @Override\n-  public long get(int index) {\n+    @Override\n+    public long get(int index) {\n     return getStorage().get(index);\n-  }\n+    }\n \n-  @Override\n-  public void set(int index, long value) {\n+    @Override\n+    public void set(int index, long value) {\n     getStorage().set(index, value);\n-  }\n+    }\n \n-  @Override\n-  public long[] get(int[] indices) {\n+    @Override\n+    public long[] get(int[] indices) {\n     return getStorage().get(indices);\n-  }\n+    }\n \n-  @Override\n-  public void set(int[] indices, long[] values) {\n+    @Override\n+    public void set(int[] indices, long[] values) {\n     assert indices.length == values.length;\n     getStorage().set(indices, values);\n-  }\n+    }\n \n-  @Override\n-  public void addTo(int index, long value) {\n+    @Override\n+    public void addTo(int index, long value) {\n     getStorage().addTo(index, value);\n-  }\n+    }\n \n-  @Override\n-  public void addTo(int[] indices, long[] values) {\n+    @Override\n+    public void addTo(int[] indices, long[] values) {\n     assert indices.length == values.length;\n     getStorage().addTo(indices, values);\n-  }\n+    }\n \n-  @Override\n-  public void mergeTo(IntLongVector mergedRow) {\n+    @Override\n+    public void mergeTo(IntLongVector mergedRow) {\n     startRead();\n     try {\n-      getStorage().mergeTo(mergedRow);\n+        getStorage().mergeTo(mergedRow);\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerIntLongRow deepClone() {\n+    @Override\n+    public ServerIntLongRow deepClone() {\n     startRead();\n     try {\n-      return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().deepClone());\n+        return new ServerIntLongRow(rowId,\n+        rowType,\n+        (int) startCol,\n+        (int) endCol,\n+        (int) estElemNum,\n+        (IntLongStorage) getStorage().deepClone());\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow\n-  adaptiveClone() {\n+    @Override\n+    public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      return new ServerIntLongRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntLongStorage) getStorage().adaptiveClone());\n+        return new ServerIntLongRow(rowId,\n+        rowType,\n+        (int) startCol,\n+        (int) endCol,\n+        (int) estElemNum,\n+        (IntLongStorage) getStorage().adaptiveClone());\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n \n   /**\n@@ -156,22 +165,23 @@ public class ServerIntLongRow extends ServerBasicTypeRow implements IIntLongOp {\n    * @param index element index\n    * @return true means exist\n    */\n-  public boolean exist(int index) {\n+\n+    public boolean exist(int index) {\n     return getStorage().exist(index);\n-  }\n+    }\n \n-  @Override\n-  public long initAndGet(int index, InitFunc func) {\n+    @Override\n+    public long initAndGet(int index, InitFunc func) {\n     return getStorage().initAndGet(index, func);\n-  }\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     getStorage().indexGet(indexType, indexSize, in, out, func);\n-  }\n+    }\n \n-  @Override\n-  public void elemUpdate(LongElemUpdateFunc func) {\n+    @Override\n+    public void elemUpdate(LongElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/540/ServerIntLongRow.java\nindex 609c889845..8f240a13e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/540/ServerIntLongRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/540/ServerIntLongRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntLongVector;\n",
            "diff_size": 1
        }
    ]
}