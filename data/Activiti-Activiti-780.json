{
    "error_id": "780",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.DynamicBpmnConstants;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..2839d734a2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/780/ScriptTaskActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.ActivitiException;\n@@ -60,7 +61,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n   public void execute(DelegateExecution execution) {\n \n     ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    \n+\n     if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n       ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n       if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..848c3fb701 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/780/ScriptTaskActivityBehavior.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.ActivitiException;\n@@ -28,72 +29,68 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n  * activity implementation of the BPMN 2.0 script task.\n- * \n+ */\n+public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n \n+    private static final long serialVersionUID = 1L;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskActivityBehavior.class);\n \n- */\n-public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n+    protected String scriptTaskId;\n+    protected String script;\n+    protected String language;\n+    protected String resultVariable;\n+    protected boolean storeScriptVariables = false; // see https://activiti.atlassian.net/browse/ACT-1626\n \n-  private static final long serialVersionUID = 1L;\n-\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskActivityBehavior.class);\n-\n-  protected String scriptTaskId;\n-  protected String script;\n-  protected String language;\n-  protected String resultVariable;\n-  protected boolean storeScriptVariables = false; // see https://activiti.atlassian.net/browse/ACT-1626\n-\n-  public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {\n-    this.script = script;\n-    this.language = language;\n-    this.resultVariable = resultVariable;\n-  }\n-\n-  public ScriptTaskActivityBehavior(String scriptTaskId, String script, String language, String resultVariable, boolean storeScriptVariables) {\n-    this(script, language, resultVariable);\n-    this.scriptTaskId = scriptTaskId;\n-    this.storeScriptVariables = storeScriptVariables;\n-  }\n-\n-  public void execute(DelegateExecution execution) {\n-\n-    ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    \n-    if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n-      ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n-      if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n-        String overrideScript = taskElementProperties.get(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT).asText();\n-        if (StringUtils.isNotEmpty(overrideScript) && !overrideScript.equals(script)) {\n-          script = overrideScript;\n-        }\n-      }\n+    public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {\n+        this.script = script;\n+        this.language = language;\n+        this.resultVariable = resultVariable;\n     }\n \n-    boolean noErrors = true;\n-    try {\n-      Object result = scriptingEngines.evaluate(script, language, execution, storeScriptVariables);\n+    public ScriptTaskActivityBehavior(String scriptTaskId, String script, String language, String resultVariable, boolean storeScriptVariables) {\n+        this(script, language, resultVariable);\n+        this.scriptTaskId = scriptTaskId;\n+        this.storeScriptVariables = storeScriptVariables;\n+    }\n \n-      if (resultVariable != null) {\n-        execution.setVariable(resultVariable, result);\n-      }\n+    public void execute(DelegateExecution execution) {\n \n-    } catch (ActivitiException e) {\n+        ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n \n-      LOGGER.warn(\"Exception while executing \" + execution.getCurrentFlowElement().getId() + \" : \" + e.getMessage());\n+        if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n+            ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n+            if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n+                String overrideScript = taskElementProperties.get(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT).asText();\n+                if (StringUtils.isNotEmpty(overrideScript) && !overrideScript.equals(script)) {\n+                    script = overrideScript;\n+                }\n+            }\n+        }\n \n-      noErrors = false;\n-      Throwable rootCause = ExceptionUtils.getRootCause(e);\n-      if (rootCause instanceof BpmnError) {\n-        ErrorPropagation.propagateError((BpmnError) rootCause, execution);\n-      } else {\n-        throw e;\n-      }\n-    }\n-    if (noErrors) {\n-      leave(execution);\n+        boolean noErrors = true;\n+        try {\n+            Object result = scriptingEngines.evaluate(script, language, execution, storeScriptVariables);\n+\n+            if (resultVariable != null) {\n+                execution.setVariable(resultVariable, result);\n+            }\n+\n+        } catch (ActivitiException e) {\n+\n+            LOGGER.warn(\"Exception while executing \" + execution.getCurrentFlowElement().getId() + \" : \" + e.getMessage());\n+\n+            noErrors = false;\n+            Throwable rootCause = ExceptionUtils.getRootCause(e);\n+            if (rootCause instanceof BpmnError) {\n+                ErrorPropagation.propagateError((BpmnError) rootCause, execution);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        if (noErrors) {\n+            leave(execution);\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..485e0a1387 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/780/ScriptTaskActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.ActivitiException;\n@@ -96,4 +97,4 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..bfc24b4108 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/780/ScriptTaskActivityBehavior.java\n@@ -23,7 +23,6 @@ import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n /**\n@@ -33,67 +32,72 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n \n \n  */\n-public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskActivityBehavior.class);\n+public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n \n-  protected String scriptTaskId;\n-  protected String script;\n-  protected String language;\n-  protected String resultVariable;\n-  protected boolean storeScriptVariables = false; // see https://activiti.atlassian.net/browse/ACT-1626\n+    private static final long serialVersionUID = 1L;\n \n-  public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScriptTaskActivityBehavior.class);\n+    protected String scriptTaskId;\n+    protected String script;\n+    protected String language;\n+    protected String resultVariable;\n+    protected boolean storeScriptVariables = false; // see https://activiti.atlassian.net/browse/ACT-1626\n+\n+    public ScriptTaskActivityBehavior(String script, String language, String resultVariable) {\n     this.script = script;\n     this.language = language;\n     this.resultVariable = resultVariable;\n-  }\n+    }\n \n-  public ScriptTaskActivityBehavior(String scriptTaskId, String script, String language, String resultVariable, boolean storeScriptVariables) {\n+    public ScriptTaskActivityBehavior(String scriptTaskId,\n+                                      String script,\n+                                      String language,\n+                                      String resultVariable, boolean storeScriptVariables) {\n     this(script, language, resultVariable);\n     this.scriptTaskId = scriptTaskId;\n     this.storeScriptVariables = storeScriptVariables;\n-  }\n-\n-  public void execute(DelegateExecution execution) {\n+    }\n \n+    public void execute(DelegateExecution execution) {\n     ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    \n     if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n-      ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n-      if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n-        String overrideScript = taskElementProperties.get(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT).asText();\n-        if (StringUtils.isNotEmpty(overrideScript) && !overrideScript.equals(script)) {\n-          script = overrideScript;\n+        ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId,\n+                                                                                    execution.getProcessDefinitionId());\n+        if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n+            String overrideScript = taskElementProperties.get(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT).asText();\n+            if (StringUtils.isNotEmpty(overrideScript) && !overrideScript.equals(script)) {\n+                script = overrideScript;\n+            }\n         }\n-      }\n     }\n \n     boolean noErrors = true;\n     try {\n-      Object result = scriptingEngines.evaluate(script, language, execution, storeScriptVariables);\n-\n-      if (resultVariable != null) {\n-        execution.setVariable(resultVariable, result);\n-      }\n-\n+        Object result = scriptingEngines.evaluate(script,\n+                                                  language,\n+                                                  execution,\n+                                                  storeScriptVariables);\n+        if (resultVariable != null) {\n+            execution.setVariable(resultVariable, result);\n+        }\n     } catch (ActivitiException e) {\n-\n       LOGGER.warn(\"Exception while executing \" + execution.getCurrentFlowElement().getId() + \" : \" + e.getMessage());\n-\n       noErrors = false;\n+\n+\n       Throwable rootCause = ExceptionUtils.getRootCause(e);\n       if (rootCause instanceof BpmnError) {\n-        ErrorPropagation.propagateError((BpmnError) rootCause, execution);\n+          ErrorPropagation.propagateError((BpmnError) rootCause, execution);\n       } else {\n         throw e;\n       }\n     }\n+\n     if (noErrors) {\n-      leave(execution);\n+        leave(execution);\n+    }\n     }\n-  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..2839d734a2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/780/ScriptTaskActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.ActivitiException;\n@@ -60,7 +61,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n   public void execute(DelegateExecution execution) {\n \n     ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    \n+\n     if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n       ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n       if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/780/ScriptTaskActivityBehavior.java\nindex 780136ccf3..2839d734a2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/780/ScriptTaskActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/780/ScriptTaskActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import org.activiti.engine.ActivitiException;\n@@ -60,7 +61,7 @@ public class ScriptTaskActivityBehavior extends TaskActivityBehavior {\n   public void execute(DelegateExecution execution) {\n \n     ScriptingEngines scriptingEngines = Context.getProcessEngineConfiguration().getScriptingEngines();\n-    \n+\n     if (Context.getProcessEngineConfiguration().isEnableProcessDefinitionInfoCache()) {\n       ObjectNode taskElementProperties = Context.getBpmnOverrideElementProperties(scriptTaskId, execution.getProcessDefinitionId());\n       if (taskElementProperties != null && taskElementProperties.has(DynamicBpmnConstants.SCRIPT_TASK_SCRIPT)) {\n",
            "diff_size": 2
        }
    ]
}