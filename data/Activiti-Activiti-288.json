{
    "error_id": "288",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.el;\n\nimport java.util.Map;\nimport javax.el.ELContext;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/288/JuelExpression.java\nindex 1de3cc49db..afa02941fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/288/JuelExpression.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import java.util.Map;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/288/JuelExpression.java\nindex 1de3cc49db..fb9815582a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/288/JuelExpression.java\n@@ -32,9 +32,6 @@ import org.activiti.engine.impl.interceptor.DelegateInterceptor;\n \n /**\n  * Expression implementation backed by a JUEL {@link ValueExpression}.\n- *\n-\n-\n  */\n public class JuelExpression implements Expression {\n \n@@ -49,16 +46,16 @@ public class JuelExpression implements Expression {\n     @Override\n     public Object getValue(VariableScope variableScope) {\n         ELContext elContext = Context.getProcessEngineConfiguration()\n-                                     .getExpressionManager()\n-                                     .getElContext(variableScope);\n+                .getExpressionManager()\n+                .getElContext(variableScope);\n         return getValueFromContext(elContext, Context.getProcessEngineConfiguration().getDelegateInterceptor());\n     }\n \n     @Override\n     public void setValue(Object value, VariableScope variableScope) {\n         ELContext elContext = Context.getProcessEngineConfiguration()\n-                                     .getExpressionManager()\n-                                     .getElContext(variableScope);\n+                .getExpressionManager()\n+                .getElContext(variableScope);\n         try {\n             ExpressionSetInvocation invocation = new ExpressionSetInvocation(valueExpression, elContext, value);\n             Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(invocation);\n@@ -82,13 +79,13 @@ public class JuelExpression implements Expression {\n \n     @Override\n     public Object getValue(ExpressionManager expressionManager,\n-        DelegateInterceptor delegateInterceptor, Map<String, Object> availableVariables) {\n+                           DelegateInterceptor delegateInterceptor, Map<String, Object> availableVariables) {\n         ELContext elContext = expressionManager.getElContext(availableVariables);\n         return getValueFromContext(elContext, delegateInterceptor);\n     }\n \n     private Object getValueFromContext(ELContext elContext,\n-        DelegateInterceptor delegateInterceptor) {\n+                                       DelegateInterceptor delegateInterceptor) {\n         try {\n             ExpressionGetInvocation invocation = new ExpressionGetInvocation(valueExpression, elContext);\n             delegateInterceptor.handleInvocation(invocation);\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/288/JuelExpression.java\nindex 1de3cc49db..c972b141e3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/288/JuelExpression.java\n@@ -36,41 +36,42 @@ import org.activiti.engine.impl.interceptor.DelegateInterceptor;\n \n \n  */\n+\n+\n public class JuelExpression implements Expression {\n \n     private String expressionText;\n+\n     private ValueExpression valueExpression;\n \n     public JuelExpression(ValueExpression valueExpression, String expressionText) {\n-        this.valueExpression = valueExpression;\n-        this.expressionText = expressionText;\n+    this.valueExpression = valueExpression;\n+    this.expressionText = expressionText;\n     }\n \n     @Override\n     public Object getValue(VariableScope variableScope) {\n-        ELContext elContext = Context.getProcessEngineConfiguration()\n-                                     .getExpressionManager()\n-                                     .getElContext(variableScope);\n-        return getValueFromContext(elContext, Context.getProcessEngineConfiguration().getDelegateInterceptor());\n+    ELContext elContext = Context.getProcessEngineConfiguration().getExpressionManager().getElContext(variableScope);\n+    return getValueFromContext(elContext,\n+                               Context.getProcessEngineConfiguration().getDelegateInterceptor());\n     }\n \n     @Override\n     public void setValue(Object value, VariableScope variableScope) {\n-        ELContext elContext = Context.getProcessEngineConfiguration()\n-                                     .getExpressionManager()\n-                                     .getElContext(variableScope);\n-        try {\n-            ExpressionSetInvocation invocation = new ExpressionSetInvocation(valueExpression, elContext, value);\n-            Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(invocation);\n-        } catch (Exception e) {\n-            throw new ActivitiException(\"Error while evaluating expression: \" + expressionText, e);\n-        }\n+    ELContext elContext = Context.getProcessEngineConfiguration().getExpressionManager().getElContext(variableScope);\n+    try {\n+        ExpressionSetInvocation invocation = new ExpressionSetInvocation(valueExpression, elContext, value);\n+        Context.getProcessEngineConfiguration().getDelegateInterceptor().handleInvocation(invocation);\n+    } catch (Exception e) {\n+      throw new ActivitiException(\"Error while evaluating expression: \" + expressionText,\n+                                  e);\n+    }\n     }\n \n     @Override\n     public String toString() {\n         if (valueExpression != null) {\n-            return valueExpression.getExpressionString();\n+        return valueExpression.getExpressionString();\n         }\n         return super.toString();\n     }\n@@ -82,23 +83,25 @@ public class JuelExpression implements Expression {\n \n     @Override\n     public Object getValue(ExpressionManager expressionManager,\n-        DelegateInterceptor delegateInterceptor, Map<String, Object> availableVariables) {\n-        ELContext elContext = expressionManager.getElContext(availableVariables);\n-        return getValueFromContext(elContext, delegateInterceptor);\n+                           DelegateInterceptor delegateInterceptor, Map<String, Object> availableVariables) {\n+    ELContext elContext = expressionManager.getElContext(availableVariables);\n+    return getValueFromContext(elContext, delegateInterceptor);\n     }\n \n-    private Object getValueFromContext(ELContext elContext,\n-        DelegateInterceptor delegateInterceptor) {\n-        try {\n-            ExpressionGetInvocation invocation = new ExpressionGetInvocation(valueExpression, elContext);\n-            delegateInterceptor.handleInvocation(invocation);\n-            return invocation.getInvocationResult();\n-        } catch (PropertyNotFoundException pnfe) {\n-            throw new ActivitiException(\"Unknown property used in expression: \" + expressionText, pnfe);\n-        } catch (MethodNotFoundException mnfe) {\n-            throw new ActivitiException(\"Unknown method used in expression: \" + expressionText, mnfe);\n-        } catch (Exception ele) {\n-            throw new ActivitiException(\"Error while evaluating expression: \" + expressionText, ele);\n-        }\n+    private Object getValueFromContext(ELContext elContext, DelegateInterceptor delegateInterceptor) {\n+    try {\n+        ExpressionGetInvocation invocation = new ExpressionGetInvocation(valueExpression, elContext);\n+        delegateInterceptor.handleInvocation(invocation);\n+        return invocation.getInvocationResult();\n+    } catch (PropertyNotFoundException pnfe) {\n+      throw new ActivitiException(\"Unknown property used in expression: \" + expressionText,\n+                                  pnfe);\n+    } catch (MethodNotFoundException mnfe) {\n+      throw new ActivitiException(\"Unknown method used in expression: \" + expressionText,\n+                                  mnfe);\n+    } catch (Exception ele) {\n+      throw new ActivitiException(\"Error while evaluating expression: \" + expressionText,\n+                                  ele);\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/288/JuelExpression.java\nindex 1de3cc49db..afa02941fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/288/JuelExpression.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import java.util.Map;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/288/JuelExpression.java\nindex 1de3cc49db..afa02941fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/288/JuelExpression.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/288/JuelExpression.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import java.util.Map;\n",
            "diff_size": 1
        }
    ]
}