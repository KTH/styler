{
    "error_id": "145",
    "information": {
        "errors": [
            {
                "line": "91",
                "column": "84",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n\n        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n        ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n            dataFlowContext.setResponseEntity(responseEntity);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..b37ad90c62 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/145/PayFeePreTempCarInoutListener.java\n@@ -88,7 +88,7 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n         businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n+        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS, Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n         if (responseEntity.getStatusCode() != HttpStatus.OK) {\n             dataFlowContext.setResponseEntity(responseEntity);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..c5035acba4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/145/PayFeePreTempCarInoutListener.java\n@@ -37,132 +37,131 @@ import java.util.Map;\n @Java110Listener(\"payFeePreTempCarInoutListener\")\n public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowListener {\n \n-    private static Logger logger = LoggerFactory.getLogger(PayFeePreTempCarInoutListener.class);\n+  private static Logger logger = LoggerFactory.getLogger(PayFeePreTempCarInoutListener.class);\n \n-    @Autowired\n-    private IFeeBMO feeBMOImpl;\n+  @Autowired\n+  private IFeeBMO feeBMOImpl;\n \n-    @Autowired\n-    private IFeeInnerServiceSMO feeInnerServiceSMOImpl;\n+  @Autowired\n+  private IFeeInnerServiceSMO feeInnerServiceSMOImpl;\n \n-    @Autowired\n-    private IRoomInnerServiceSMO roomInnerServiceSMOImpl;\n+  @Autowired\n+  private IRoomInnerServiceSMO roomInnerServiceSMOImpl;\n \n-    @Autowired\n-    private ICarInoutInnerServiceSMO carInoutInnerServiceSMOImpl;\n+  @Autowired\n+  private ICarInoutInnerServiceSMO carInoutInnerServiceSMOImpl;\n \n-    @Autowired\n-    private IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl;\n+  @Autowired\n+  private IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl;\n \n \n-    @Override\n-    public String getServiceCode() {\n-        return ServiceCodeConstant.SERVICE_CODE_PAY_FEE_PRE_TEMP_CAR_INOUT;\n-    }\n-\n-    @Override\n-    public HttpMethod getHttpMethod() {\n-        return HttpMethod.POST;\n-    }\n-\n-    @Override\n-    public void soService(ServiceDataFlowEvent event) {\n+  @Override\n+  public String getServiceCode() {\n+    return ServiceCodeConstant.SERVICE_CODE_PAY_FEE_PRE_TEMP_CAR_INOUT;\n+  }\n \n-        logger.debug(\"ServiceDataFlowEvent : {}\", event);\n+  @Override\n+  public HttpMethod getHttpMethod() {\n+    return HttpMethod.POST;\n+  }\n \n-        DataFlowContext dataFlowContext = event.getDataFlowContext();\n-        AppService service = event.getAppService();\n+  @Override\n+  public void soService(ServiceDataFlowEvent event) {\n \n-        String paramIn = dataFlowContext.getReqData();\n+    logger.debug(\"ServiceDataFlowEvent : {}\", event);\n \n-        //\u6821\u9a8c\u6570\u636e\n-        validate(paramIn);\n-        JSONObject paramObj = JSONObject.parseObject(paramIn);\n+    DataFlowContext dataFlowContext = event.getDataFlowContext();\n+    AppService service = event.getAppService();\n \n-        HttpHeaders header = new HttpHeaders();\n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n-        JSONArray businesses = new JSONArray();\n-        paramObj.put(\"cycles\", 0);\n-        //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n-        businesses.add(feeBMOImpl.addFeeTempDetail(paramObj, dataFlowContext));\n-        businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n-        businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n+    String paramIn = dataFlowContext.getReqData();\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n-        ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n-        if (responseEntity.getStatusCode() != HttpStatus.OK) {\n-            dataFlowContext.setResponseEntity(responseEntity);\n-            return;\n-        }\n+    //\u6821\u9a8c\u6570\u636e\n+    validate(paramIn);\n+    JSONObject paramObj = JSONObject.parseObject(paramIn);\n \n-        JSONObject paramOut = JSONObject.parseObject(responseEntity.getBody());\n-        paramOut.put(\"receivableAmount\", paramObj.getString(\"receivableAmount\"));\n+    HttpHeaders header = new HttpHeaders();\n+    dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n+    JSONArray businesses = new JSONArray();\n+    paramObj.put(\"cycles\", 0);\n+    //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n+    businesses.add(feeBMOImpl.addFeeTempDetail(paramObj, dataFlowContext));\n+    businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n+    businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n \n-        responseEntity = new ResponseEntity<>(paramOut.toJSONString(), HttpStatus.OK);\n-        dataFlowContext.setResponseEntity(responseEntity);\n+    dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS, Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n+    ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n+    if (responseEntity.getStatusCode() != HttpStatus.OK) {\n+      dataFlowContext.setResponseEntity(responseEntity);\n+      return;\n     }\n \n+    JSONObject paramOut = JSONObject.parseObject(responseEntity.getBody());\n+    paramOut.put(\"receivableAmount\", paramObj.getString(\"receivableAmount\"));\n \n+    responseEntity = new ResponseEntity<>(paramOut.toJSONString(), HttpStatus.OK);\n+    dataFlowContext.setResponseEntity(responseEntity);\n+  }\n \n-    /**\n-     * \u5237\u5165order\u4fe1\u606f\n-     *\n-     * @param orders  \u8ba2\u5355\u4fe1\u606f\n-     * @param headers \u5934\u90e8\u4fe1\u606f\n-     */\n-    protected void freshOrderProtocol(JSONObject orders, Map<String, String> headers) {\n-        feeBMOImpl.freshOrderProtocol(orders, headers);\n-        orders.put(\"orderProcess\", Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n \n-    }\n+  /**\n+   * \u5237\u5165order\u4fe1\u606f\n+   *\n+   * @param orders  \u8ba2\u5355\u4fe1\u606f\n+   * @param headers \u5934\u90e8\u4fe1\u606f\n+   */\n+  protected void freshOrderProtocol(JSONObject orders, Map<String, String> headers) {\n+    feeBMOImpl.freshOrderProtocol(orders, headers);\n+    orders.put(\"orderProcess\", Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n \n+  }\n \n-    /**\n-     * \u6570\u636e\u6821\u9a8c\n-     *\n-     * @param paramIn \"communityId\": \"7020181217000001\",\n-     *                \"memberId\": \"3456789\",\n-     *                \"memberTypeCd\": \"390001200001\"\n-     */\n-    private void validate(String paramIn) {\n-        Assert.jsonObjectHaveKey(paramIn, \"communityId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bcommunityId\u8282\u70b9\");\n-        Assert.jsonObjectHaveKey(paramIn, \"receivedAmount\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542breceivedAmount\u8282\u70b9\");\n-        Assert.jsonObjectHaveKey(paramIn, \"feeId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bfeeId\u8282\u70b9\");\n \n-        JSONObject paramInObj = JSONObject.parseObject(paramIn);\n-        Assert.hasLength(paramInObj.getString(\"communityId\"), \"\u5c0f\u533aID\u4e0d\u80fd\u4e3a\u7a7a\");\n-        Assert.hasLength(paramInObj.getString(\"receivedAmount\"), \"\u5b9e\u6536\u91d1\u989d\u4e0d\u80fd\u4e3a\u7a7a\");\n-        Assert.hasLength(paramInObj.getString(\"feeId\"), \"\u8d39\u7528ID\u4e0d\u80fd\u4e3a\u7a7a\");\n+  /**\n+   * \u6570\u636e\u6821\u9a8c\n+   *\n+   * @param paramIn \"communityId\": \"7020181217000001\",\n+   *                \"memberId\": \"3456789\",\n+   *                \"memberTypeCd\": \"390001200001\"\n+   */\n+  private void validate(String paramIn) {\n+    Assert.jsonObjectHaveKey(paramIn, \"communityId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bcommunityId\u8282\u70b9\");\n+    Assert.jsonObjectHaveKey(paramIn, \"receivedAmount\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542breceivedAmount\u8282\u70b9\");\n+    Assert.jsonObjectHaveKey(paramIn, \"feeId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bfeeId\u8282\u70b9\");\n \n-    }\n+    JSONObject paramInObj = JSONObject.parseObject(paramIn);\n+    Assert.hasLength(paramInObj.getString(\"communityId\"), \"\u5c0f\u533aID\u4e0d\u80fd\u4e3a\u7a7a\");\n+    Assert.hasLength(paramInObj.getString(\"receivedAmount\"), \"\u5b9e\u6536\u91d1\u989d\u4e0d\u80fd\u4e3a\u7a7a\");\n+    Assert.hasLength(paramInObj.getString(\"feeId\"), \"\u8d39\u7528ID\u4e0d\u80fd\u4e3a\u7a7a\");\n \n-    @Override\n-    public int getOrder() {\n-        return DEFAULT_ORDER;\n-    }\n+  }\n \n+  @Override\n+  public int getOrder() {\n+    return DEFAULT_ORDER;\n+  }\n \n-    public IFeeInnerServiceSMO getFeeInnerServiceSMOImpl() {\n-        return feeInnerServiceSMOImpl;\n-    }\n \n-    public void setFeeInnerServiceSMOImpl(IFeeInnerServiceSMO feeInnerServiceSMOImpl) {\n-        this.feeInnerServiceSMOImpl = feeInnerServiceSMOImpl;\n-    }\n+  public IFeeInnerServiceSMO getFeeInnerServiceSMOImpl() {\n+    return feeInnerServiceSMOImpl;\n+  }\n \n-    public IFeeConfigInnerServiceSMO getFeeConfigInnerServiceSMOImpl() {\n-        return feeConfigInnerServiceSMOImpl;\n-    }\n+  public void setFeeInnerServiceSMOImpl(IFeeInnerServiceSMO feeInnerServiceSMOImpl) {\n+    this.feeInnerServiceSMOImpl = feeInnerServiceSMOImpl;\n+  }\n \n-    public void setFeeConfigInnerServiceSMOImpl(IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl) {\n-        this.feeConfigInnerServiceSMOImpl = feeConfigInnerServiceSMOImpl;\n-    }\n+  public IFeeConfigInnerServiceSMO getFeeConfigInnerServiceSMOImpl() {\n+    return feeConfigInnerServiceSMOImpl;\n+  }\n \n-    public IRoomInnerServiceSMO getRoomInnerServiceSMOImpl() {\n-        return roomInnerServiceSMOImpl;\n-    }\n+  public void setFeeConfigInnerServiceSMOImpl(IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl) {\n+    this.feeConfigInnerServiceSMOImpl = feeConfigInnerServiceSMOImpl;\n+  }\n \n-    public void setRoomInnerServiceSMOImpl(IRoomInnerServiceSMO roomInnerServiceSMOImpl) {\n-        this.roomInnerServiceSMOImpl = roomInnerServiceSMOImpl;\n-    }\n+  public IRoomInnerServiceSMO getRoomInnerServiceSMOImpl() {\n+    return roomInnerServiceSMOImpl;\n+  }\n+\n+  public void setRoomInnerServiceSMOImpl(IRoomInnerServiceSMO roomInnerServiceSMOImpl) {\n+    this.roomInnerServiceSMOImpl = roomInnerServiceSMOImpl;\n+  }\n }\n",
            "diff_size": 140
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..9ba7f34521 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/145/PayFeePreTempCarInoutListener.java\n@@ -88,7 +88,7 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n         businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n+        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS, Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n         if (responseEntity.getStatusCode() != HttpStatus.OK) {\n             dataFlowContext.setResponseEntity(responseEntity);\n@@ -103,8 +103,7 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n     }\n \n \n-\n-    /**\n+/**\n      * \u5237\u5165order\u4fe1\u606f\n      *\n      * @param orders  \u8ba2\u5355\u4fe1\u606f\n@@ -165,4 +164,4 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n     public void setRoomInnerServiceSMOImpl(IRoomInnerServiceSMO roomInnerServiceSMOImpl) {\n         this.roomInnerServiceSMOImpl = roomInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..5d576b3d98 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/145/PayFeePreTempCarInoutListener.java\n@@ -23,7 +23,6 @@ import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.Map;\n \n /**\n@@ -34,6 +33,8 @@ import java.util.Map;\n  * @Version 1.0\n  * add by wuxw 2019/6/3\n  **/\n+\n+\n @Java110Listener(\"payFeePreTempCarInoutListener\")\n public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowListener {\n \n@@ -54,41 +55,41 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n     @Autowired\n     private IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl;\n \n-\n     @Override\n     public String getServiceCode() {\n         return ServiceCodeConstant.SERVICE_CODE_PAY_FEE_PRE_TEMP_CAR_INOUT;\n     }\n \n+\n     @Override\n     public HttpMethod getHttpMethod() {\n         return HttpMethod.POST;\n     }\n \n+\n     @Override\n     public void soService(ServiceDataFlowEvent event) {\n-\n         logger.debug(\"ServiceDataFlowEvent : {}\", event);\n \n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         AppService service = event.getAppService();\n-\n         String paramIn = dataFlowContext.getReqData();\n \n         //\u6821\u9a8c\u6570\u636e\n         validate(paramIn);\n-        JSONObject paramObj = JSONObject.parseObject(paramIn);\n \n+        JSONObject paramObj = JSONObject.parseObject(paramIn);\n         HttpHeaders header = new HttpHeaders();\n         dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n+\n         JSONArray businesses = new JSONArray();\n         paramObj.put(\"cycles\", 0);\n         //\u6dfb\u52a0\u5355\u5143\u4fe1\u606f\n         businesses.add(feeBMOImpl.addFeeTempDetail(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n+        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS, Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n         if (responseEntity.getStatusCode() != HttpStatus.OK) {\n             dataFlowContext.setResponseEntity(responseEntity);\n@@ -97,7 +98,6 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n \n         JSONObject paramOut = JSONObject.parseObject(responseEntity.getBody());\n         paramOut.put(\"receivableAmount\", paramObj.getString(\"receivableAmount\"));\n-\n         responseEntity = new ResponseEntity<>(paramOut.toJSONString(), HttpStatus.OK);\n         dataFlowContext.setResponseEntity(responseEntity);\n     }\n@@ -110,10 +110,12 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n      * @param orders  \u8ba2\u5355\u4fe1\u606f\n      * @param headers \u5934\u90e8\u4fe1\u606f\n      */\n+\n+\n+\n     protected void freshOrderProtocol(JSONObject orders, Map<String, String> headers) {\n         feeBMOImpl.freshOrderProtocol(orders, headers);\n         orders.put(\"orderProcess\", Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n-\n     }\n \n \n@@ -124,6 +126,8 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n      *                \"memberId\": \"3456789\",\n      *                \"memberTypeCd\": \"390001200001\"\n      */\n+\n+\n     private void validate(String paramIn) {\n         Assert.jsonObjectHaveKey(paramIn, \"communityId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bcommunityId\u8282\u70b9\");\n         Assert.jsonObjectHaveKey(paramIn, \"receivedAmount\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542breceivedAmount\u8282\u70b9\");\n@@ -133,15 +137,14 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n         Assert.hasLength(paramInObj.getString(\"communityId\"), \"\u5c0f\u533aID\u4e0d\u80fd\u4e3a\u7a7a\");\n         Assert.hasLength(paramInObj.getString(\"receivedAmount\"), \"\u5b9e\u6536\u91d1\u989d\u4e0d\u80fd\u4e3a\u7a7a\");\n         Assert.hasLength(paramInObj.getString(\"feeId\"), \"\u8d39\u7528ID\u4e0d\u80fd\u4e3a\u7a7a\");\n-\n     }\n \n+\n     @Override\n     public int getOrder() {\n         return DEFAULT_ORDER;\n     }\n \n-\n     public IFeeInnerServiceSMO getFeeInnerServiceSMOImpl() {\n         return feeInnerServiceSMOImpl;\n     }\n@@ -165,4 +168,4 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n     public void setRoomInnerServiceSMOImpl(IRoomInnerServiceSMO roomInnerServiceSMOImpl) {\n         this.roomInnerServiceSMOImpl = roomInnerServiceSMOImpl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..b37ad90c62 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/145/PayFeePreTempCarInoutListener.java\n@@ -88,7 +88,7 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n         businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n+        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS, Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n         if (responseEntity.getStatusCode() != HttpStatus.OK) {\n             dataFlowContext.setResponseEntity(responseEntity);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "91",
                    "column": "85",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "91",
                    "column": "85",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/145/PayFeePreTempCarInoutListener.java\nindex 4ba9cab4f7..5bb2b78a6e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/145/PayFeePreTempCarInoutListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/145/PayFeePreTempCarInoutListener.java\n@@ -88,7 +88,7 @@ public class PayFeePreTempCarInoutListener extends AbstractServiceApiDataFlowLis\n         businesses.add(feeBMOImpl.modifyTempFee(paramObj, dataFlowContext));\n         businesses.add(feeBMOImpl.modifyTempCarInout(paramObj, dataFlowContext));\n \n-        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n+        dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.ORDER_PROCESS ,Orders.ORDER_PROCESS_ORDER_PRE_SUBMIT);\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n         if (responseEntity.getStatusCode() != HttpStatus.OK) {\n             dataFlowContext.setResponseEntity(responseEntity);\n",
            "diff_size": 1
        }
    ]
}