{
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "174",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                        newModified = true;\n                    } else if (dependentTable.getSchema() != this) {\n                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n                                obj.getSQL(false), dependentTable.getSQL(false));\n                    } else if (!modified) {\n                        dependentTable.removeColumnExpressionsDependencies(session);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/26/Schema.java\nindex 6310b7375c..064ee520be 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/26/Schema.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.schema;\n \n import java.util.ArrayList;\n@@ -65,15 +66,15 @@ public class Schema extends DbObjectBase {\n     /**\n      * Create a new schema object.\n      *\n-     * @param database the database\n-     * @param id the object id\n+     * @param database   the database\n+     * @param id         the object id\n      * @param schemaName the schema name\n-     * @param owner the owner of the schema\n-     * @param system if this is a system schema (such a schema can not be\n-     *            dropped)\n+     * @param owner      the owner of the schema\n+     * @param system     if this is a system schema (such a schema can not be\n+     *                   dropped)\n      */\n     public Schema(Database database, int id, String schemaName, User owner,\n-            boolean system) {\n+                  boolean system) {\n         super(database, id, schemaName, Trace.SCHEMA);\n         tablesAndViews = database.newConcurrentStringMap();\n         domains = database.newConcurrentStringMap();\n@@ -125,8 +126,8 @@ public class Schema extends DbObjectBase {\n      */\n     public boolean isEmpty() {\n         return tablesAndViews.isEmpty() && domains.isEmpty() && synonyms.isEmpty() && indexes.isEmpty()\n-                && sequences.isEmpty() && triggers.isEmpty() && constraints.isEmpty() && constants.isEmpty()\n-                && functions.isEmpty();\n+            && sequences.isEmpty() && triggers.isEmpty() && constraints.isEmpty() && constants.isEmpty()\n+            && functions.isEmpty();\n     }\n \n     @Override\n@@ -172,7 +173,7 @@ public class Schema extends DbObjectBase {\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n                         throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getSQL(false), dependentTable.getSQL(false));\n+                            obj.getSQL(false), dependentTable.getSQL(false));\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n                         dependentTable.setModified();\n@@ -227,6 +228,7 @@ public class Schema extends DbObjectBase {\n \n     /**\n      * Set table engine params of this schema.\n+     *\n      * @param tableEngineParams default table engine params\n      */\n     public void setTableEngineParams(ArrayList<String> tableEngineParams) {\n@@ -237,35 +239,35 @@ public class Schema extends DbObjectBase {\n     private Map<String, SchemaObject> getMap(int type) {\n         Map<String, ? extends SchemaObject> result;\n         switch (type) {\n-        case DbObject.TABLE_OR_VIEW:\n-            result = tablesAndViews;\n-            break;\n-        case DbObject.DOMAIN:\n-            result = domains;\n-            break;\n-        case DbObject.SYNONYM:\n-            result = synonyms;\n-            break;\n-        case DbObject.SEQUENCE:\n-            result = sequences;\n-            break;\n-        case DbObject.INDEX:\n-            result = indexes;\n-            break;\n-        case DbObject.TRIGGER:\n-            result = triggers;\n-            break;\n-        case DbObject.CONSTRAINT:\n-            result = constraints;\n-            break;\n-        case DbObject.CONSTANT:\n-            result = constants;\n-            break;\n-        case DbObject.FUNCTION_ALIAS:\n-            result = functions;\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + type);\n+            case DbObject.TABLE_OR_VIEW:\n+                result = tablesAndViews;\n+                break;\n+            case DbObject.DOMAIN:\n+                result = domains;\n+                break;\n+            case DbObject.SYNONYM:\n+                result = synonyms;\n+                break;\n+            case DbObject.SEQUENCE:\n+                result = sequences;\n+                break;\n+            case DbObject.INDEX:\n+                result = indexes;\n+                break;\n+            case DbObject.TRIGGER:\n+                result = triggers;\n+                break;\n+            case DbObject.CONSTRAINT:\n+                result = constraints;\n+                break;\n+            case DbObject.CONSTANT:\n+                result = constants;\n+                break;\n+            case DbObject.FUNCTION_ALIAS:\n+                result = functions;\n+                break;\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + type);\n         }\n         return (Map<String, SchemaObject>) result;\n     }\n@@ -293,7 +295,7 @@ public class Schema extends DbObjectBase {\n     /**\n      * Rename an object.\n      *\n-     * @param obj the object to rename\n+     * @param obj     the object to rename\n      * @param newName the new name\n      */\n     public void rename(SchemaObject obj, String newName) {\n@@ -321,7 +323,7 @@ public class Schema extends DbObjectBase {\n      * returned. Synonyms are not returned or resolved.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     //getTableOrView\u548cfindTableOrView\u5dee\u4e0d\u591a\uff0c\u5dee\u522b\u662fgetTableOrView\u5982\u679c\u8868\u4e0d\u5b58\u5728\u629b\u51fa\u5f02\u5e38\uff0c\u800cfindTableOrView\u53ea\u8fd4\u56denull\n@@ -340,7 +342,7 @@ public class Schema extends DbObjectBase {\n      * synonym is returned\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Table resolveTableOrView(Session session, String name) {\n@@ -380,7 +382,7 @@ public class Schema extends DbObjectBase {\n      * no object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Index findIndex(Session session, String name) {\n@@ -418,7 +420,7 @@ public class Schema extends DbObjectBase {\n      * object with this name exists.\n      *\n      * @param session the session\n-     * @param name the object name\n+     * @param name    the object name\n      * @return the object or null\n      */\n     public Constraint findConstraint(Session session, String name) {\n@@ -465,7 +467,7 @@ public class Schema extends DbObjectBase {\n     }\n \n     private String getUniqueName(DbObject obj,\n-            Map<String, ? extends SchemaObject> map, String prefix) {\n+                                 Map<String, ? extends SchemaObject> map, String prefix) {\n         String hash = StringUtils.toUpperEnglish(Integer.toHexString(obj.getName().hashCode()));\n         String name = null;\n         synchronized (temporaryUniqueNames) {\n@@ -478,7 +480,7 @@ public class Schema extends DbObjectBase {\n             }\n             if (name == null) {\n                 prefix = prefix + hash + \"_\";\n-                for (int i = 0;; i++) {\n+                for (int i = 0; ; i++) {\n                     name = prefix + i;\n                     if (!map.containsKey(name) && !temporaryUniqueNames.contains(name)) {\n                         break;\n@@ -494,7 +496,7 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param table the constraint table\n+     * @param table   the constraint table\n      * @return the unique name\n      */\n     public String getUniqueConstraintName(Session session, Table table) {\n@@ -511,7 +513,7 @@ public class Schema extends DbObjectBase {\n      * Create a unique constraint name.\n      *\n      * @param session the session\n-     * @param domain the constraint domain\n+     * @param domain  the constraint domain\n      * @return the unique name\n      */\n     public String getUniqueDomainConstraintName(Session session, Domain domain) {\n@@ -522,8 +524,8 @@ public class Schema extends DbObjectBase {\n      * Create a unique index name.\n      *\n      * @param session the session\n-     * @param table the indexed table\n-     * @param prefix the index name prefix\n+     * @param table   the indexed table\n+     * @param prefix  the index name prefix\n      * @return the unique name\n      */\n     public String getUniqueIndexName(Session session, Table table, String prefix) {\n@@ -541,7 +543,7 @@ public class Schema extends DbObjectBase {\n      * Local temporary tables are also returned.\n      *\n      * @param session the session\n-     * @param name the table or view name\n+     * @param name    the table or view name\n      * @return the table or view\n      * @throws DbException if no such object exists\n      */\n@@ -637,11 +639,10 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects.\n      *\n-     * @param addTo\n-     *                  list to add objects to, or {@code null} to allocate a new\n-     *                  list\n+     * @param addTo list to add objects to, or {@code null} to allocate a new\n+     *              list\n      * @return the specified list with added objects, or a new (possibly empty) list\n-     *         with all objects\n+     * with all objects\n      */\n     public ArrayList<SchemaObject> getAll(ArrayList<SchemaObject> addTo) {\n         if (addTo == null) {\n@@ -662,13 +663,11 @@ public class Schema extends DbObjectBase {\n     /**\n      * Get all objects of the given type.\n      *\n-     * @param type\n-     *                  the object type\n-     * @param addTo\n-     *                  list to add objects to, or {@code null} to allocate a new\n-     *                  list\n+     * @param type  the object type\n+     * @param addTo list to add objects to, or {@code null} to allocate a new\n+     *              list\n      * @return the specified list with added objects, or a new (possibly empty) list\n-     *         with objects of the given type\n+     * with objects of the given type\n      */\n     public ArrayList<SchemaObject> getAll(int type, ArrayList<SchemaObject> addTo) {\n         Collection<SchemaObject> values = getMap(type).values();\n@@ -765,25 +764,25 @@ public class Schema extends DbObjectBase {\n     /**\n      * Add a linked table to the schema.\n      *\n-     * @param id the object id\n-     * @param tableName the table name of the alias\n-     * @param driver the driver class name\n-     * @param url the database URL\n-     * @param user the user name\n-     * @param password the password\n+     * @param id             the object id\n+     * @param tableName      the table name of the alias\n+     * @param driver         the driver class name\n+     * @param url            the database URL\n+     * @param user           the user name\n+     * @param password       the password\n      * @param originalSchema the schema name of the target table\n-     * @param originalTable the table name of the target table\n-     * @param emitUpdates if updates should be emitted instead of delete/insert\n-     * @param force create the object even if the database can not be accessed\n+     * @param originalTable  the table name of the target table\n+     * @param emitUpdates    if updates should be emitted instead of delete/insert\n+     * @param force          create the object even if the database can not be accessed\n      * @return the {@link TableLink} object\n      */\n     public TableLink createTableLink(int id, String tableName, String driver,\n-            String url, String user, String password, String originalSchema,\n-            String originalTable, boolean emitUpdates, boolean force) {\n+                                     String url, String user, String password, String originalSchema,\n+                                     String originalTable, boolean emitUpdates, boolean force) {\n         synchronized (database) {\n             return new TableLink(this, id, tableName,\n-                    driver, url, user, password,\n-                    originalSchema, originalTable, emitUpdates, force);\n+                driver, url, user, password,\n+                originalSchema, originalTable, emitUpdates, force);\n         }\n     }\n \n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/26/Schema.java\nindex 6310b7375c..f3c18db659 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/26/Schema.java\n@@ -10,7 +10,6 @@ import java.util.Collection;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n-\n import org.h2.api.ErrorCode;\n import org.h2.command.ddl.CreateSynonymData;\n import org.h2.command.ddl.CreateTableData;\n@@ -39,12 +38,13 @@ import org.h2.util.Utils;\n  * A schema as created by the SQL statement\n  * CREATE SCHEMA\n  */\n+\n+\n public class Schema extends DbObjectBase {\n \n     private User owner;\n     private final boolean system;\n     private ArrayList<String> tableEngineParams;\n-\n     private final ConcurrentHashMap<String, Table> tablesAndViews;\n     private final ConcurrentHashMap<String, Domain> domains;\n     private final ConcurrentHashMap<String, TableSynonym> synonyms;\n@@ -60,7 +60,7 @@ public class Schema extends DbObjectBase {\n      * avoid returning the same unique name twice when multiple threads\n      * concurrently create objects.\n      */\n-    private final HashSet<String> temporaryUniqueNames = new HashSet<>();\n+    private final HashSet<String> temporaryUniqueNames = new HashSet< >();\n \n     /**\n      * Create a new schema object.\n@@ -72,8 +72,8 @@ public class Schema extends DbObjectBase {\n      * @param system if this is a system schema (such a schema can not be\n      *            dropped)\n      */\n-    public Schema(Database database, int id, String schemaName, User owner,\n-            boolean system) {\n+\n+    public Schema(Database database, int id, String schemaName, User owner, boolean system) {\n         super(database, id, schemaName, Trace.SCHEMA);\n         tablesAndViews = database.newConcurrentStringMap();\n         domains = database.newConcurrentStringMap();\n@@ -93,6 +93,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @return true if it can be dropped\n      */\n+\n+\n     public boolean canDrop() {\n         return !system;\n     }\n@@ -123,10 +125,16 @@ public class Schema extends DbObjectBase {\n      *\n      * @return {@code true} if this schema is empty, {@code false} otherwise\n      */\n+\n+\n     public boolean isEmpty() {\n-        return tablesAndViews.isEmpty() && domains.isEmpty() && synonyms.isEmpty() && indexes.isEmpty()\n-                && sequences.isEmpty() && triggers.isEmpty() && constraints.isEmpty() && constants.isEmpty()\n-                && functions.isEmpty();\n+        return tablesAndViews.isEmpty() && domains.isEmpty()\n+        && synonyms.isEmpty()\n+        && indexes.isEmpty()\n+        && sequences.isEmpty()\n+        && triggers.isEmpty()\n+        && constraints.isEmpty()\n+        && constants.isEmpty() && functions.isEmpty();\n     }\n \n     @Override\n@@ -172,12 +180,13 @@ public class Schema extends DbObjectBase {\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n                         throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n-                                obj.getSQL(false), dependentTable.getSQL(false));\n+                                              obj.getSQL(false),\n+                                              dependentTable.getSQL(false));\n                     } else if (!modified) {\n-                        dependentTable.removeColumnExpressionsDependencies(session);\n-                        dependentTable.setModified();\n-                        database.updateMeta(session, dependentTable);\n-                    }\n+                               dependentTable.removeColumnExpressionsDependencies(session);\n+                               dependentTable.setModified();\n+                               database.updateMeta(session, dependentTable);\n+                           }\n                 }\n             }\n             modified = newModified;\n@@ -212,6 +221,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @return the owner\n      */\n+\n+\n     public User getOwner() {\n         return owner;\n     }\n@@ -221,6 +232,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @return default table engine params\n      */\n+\n+\n     public ArrayList<String> getTableEngineParams() {\n         return tableEngineParams;\n     }\n@@ -229,6 +242,8 @@ public class Schema extends DbObjectBase {\n      * Set table engine params of this schema.\n      * @param tableEngineParams default table engine params\n      */\n+\n+\n     public void setTableEngineParams(ArrayList<String> tableEngineParams) {\n         this.tableEngineParams = tableEngineParams;\n     }\n@@ -277,6 +292,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @param obj the object to add\n      */\n+\n+\n     public void add(SchemaObject obj) {\n         if (obj.getSchema() != this) {\n             DbException.throwInternalError(\"wrong schema\");\n@@ -296,6 +313,8 @@ public class Schema extends DbObjectBase {\n      * @param obj the object to rename\n      * @param newName the new name\n      */\n+\n+\n     public void rename(SchemaObject obj, String newName) {\n         int type = obj.getType();\n         Map<String, SchemaObject> map = getMap(type);\n@@ -325,6 +344,8 @@ public class Schema extends DbObjectBase {\n      * @return the object or null\n      */\n     //getTableOrView\u548cfindTableOrView\u5dee\u4e0d\u591a\uff0c\u5dee\u522b\u662fgetTableOrView\u5982\u679c\u8868\u4e0d\u5b58\u5728\u629b\u51fa\u5f02\u5e38\uff0c\u800cfindTableOrView\u53ea\u8fd4\u56denull\n+\n+\n     public Table findTableOrView(Session session, String name) {\n         Table table = tablesAndViews.get(name);\n         if (table == null && session != null) {\n@@ -343,6 +364,8 @@ public class Schema extends DbObjectBase {\n      * @param name the object name\n      * @return the object or null\n      */\n+\n+\n     public Table resolveTableOrView(Session session, String name) {\n         Table table = findTableOrView(session, name);\n         if (table == null) {\n@@ -361,6 +384,8 @@ public class Schema extends DbObjectBase {\n      * @param name the object name\n      * @return the object or null\n      */\n+\n+\n     public TableSynonym getSynonym(String name) {\n         return synonyms.get(name);\n     }\n@@ -371,6 +396,8 @@ public class Schema extends DbObjectBase {\n      * @param name the name of the domain\n      * @return the domain or null\n      */\n+\n+\n     public Domain findDomain(String name) {\n         return domains.get(name);\n     }\n@@ -383,6 +410,8 @@ public class Schema extends DbObjectBase {\n      * @param name the object name\n      * @return the object or null\n      */\n+\n+\n     public Index findIndex(Session session, String name) {\n         Index index = indexes.get(name);\n         if (index == null) {\n@@ -398,6 +427,8 @@ public class Schema extends DbObjectBase {\n      * @param name the object name\n      * @return the object or null\n      */\n+\n+\n     public TriggerObject findTrigger(String name) {\n         return triggers.get(name);\n     }\n@@ -409,6 +440,8 @@ public class Schema extends DbObjectBase {\n      * @param sequenceName the object name\n      * @return the object or null\n      */\n+\n+\n     public Sequence findSequence(String sequenceName) {\n         return sequences.get(sequenceName);\n     }\n@@ -421,6 +454,8 @@ public class Schema extends DbObjectBase {\n      * @param name the object name\n      * @return the object or null\n      */\n+\n+\n     public Constraint findConstraint(Session session, String name) {\n         Constraint constraint = constraints.get(name);\n         if (constraint == null) {\n@@ -436,6 +471,8 @@ public class Schema extends DbObjectBase {\n      * @param constantName the object name\n      * @return the object or null\n      */\n+\n+\n     public Constant findConstant(String constantName) {\n         return constants.get(constantName);\n     }\n@@ -447,6 +484,8 @@ public class Schema extends DbObjectBase {\n      * @param functionAlias the object name\n      * @return the object or null\n      */\n+\n+\n     public FunctionAlias findFunction(String functionAlias) {\n         return functions.get(functionAlias);\n     }\n@@ -456,6 +495,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @param name the object name\n      */\n+\n+\n     public void freeUniqueName(String name) {\n         if (name != null) {\n             synchronized (temporaryUniqueNames) {\n@@ -464,8 +505,7 @@ public class Schema extends DbObjectBase {\n         }\n     }\n \n-    private String getUniqueName(DbObject obj,\n-            Map<String, ? extends SchemaObject> map, String prefix) {\n+    private String getUniqueName(DbObject obj, Map<String, ? extends SchemaObject> map, String prefix) {\n         String hash = StringUtils.toUpperEnglish(Integer.toHexString(obj.getName().hashCode()));\n         String name = null;\n         synchronized (temporaryUniqueNames) {\n@@ -497,6 +537,8 @@ public class Schema extends DbObjectBase {\n      * @param table the constraint table\n      * @return the unique name\n      */\n+\n+\n     public String getUniqueConstraintName(Session session, Table table) {\n         Map<String, Constraint> tableConstraints;\n         if (table.isTemporary() && !table.isGlobalTemporary()) {\n@@ -514,6 +556,8 @@ public class Schema extends DbObjectBase {\n      * @param domain the constraint domain\n      * @return the unique name\n      */\n+\n+\n     public String getUniqueDomainConstraintName(Session session, Domain domain) {\n         return getUniqueName(domain, constraints, \"CONSTRAINT_\");\n     }\n@@ -526,6 +570,8 @@ public class Schema extends DbObjectBase {\n      * @param prefix the index name prefix\n      * @return the unique name\n      */\n+\n+\n     public String getUniqueIndexName(Session session, Table table, String prefix) {\n         Map<String, Index> tableIndexes;\n         if (table.isTemporary() && !table.isGlobalTemporary()) {\n@@ -546,6 +592,8 @@ public class Schema extends DbObjectBase {\n      * @throws DbException if no such object exists\n      */\n     //getTableOrView\u548cfindTableOrView\u5dee\u4e0d\u591a\uff0c\u5dee\u522b\u662fgetTableOrView\u5982\u679c\u8868\u4e0d\u5b58\u5728\u629b\u51fa\u5f02\u5e38\uff0c\u800cfindTableOrView\u53ea\u8fd4\u56denull\n+\n+\n     public Table getTableOrView(Session session, String name) {\n         Table table = tablesAndViews.get(name);\n         if (table == null) {\n@@ -566,6 +614,8 @@ public class Schema extends DbObjectBase {\n      * @return the domain\n      * @throws DbException if no such object exists\n      */\n+\n+\n     public Domain getDomain(String name) {\n         Domain domain = domains.get(name);\n         if (domain == null) {\n@@ -581,6 +631,8 @@ public class Schema extends DbObjectBase {\n      * @return the index\n      * @throws DbException if no such object exists\n      */\n+\n+\n     public Index getIndex(String name) {\n         Index index = indexes.get(name);\n         if (index == null) {\n@@ -596,6 +648,8 @@ public class Schema extends DbObjectBase {\n      * @return the constraint\n      * @throws DbException if no such object exists\n      */\n+\n+\n     public Constraint getConstraint(String name) {\n         Constraint constraint = constraints.get(name);\n         if (constraint == null) {\n@@ -611,6 +665,8 @@ public class Schema extends DbObjectBase {\n      * @return the constant\n      * @throws DbException if no such object exists\n      */\n+\n+\n     public Constant getConstant(String constantName) {\n         Constant constant = constants.get(constantName);\n         if (constant == null) {\n@@ -626,6 +682,8 @@ public class Schema extends DbObjectBase {\n      * @return the sequence\n      * @throws DbException if no such object exists\n      */\n+\n+\n     public Sequence getSequence(String sequenceName) {\n         Sequence sequence = sequences.get(sequenceName);\n         if (sequence == null) {\n@@ -643,6 +701,8 @@ public class Schema extends DbObjectBase {\n      * @return the specified list with added objects, or a new (possibly empty) list\n      *         with all objects\n      */\n+\n+\n     public ArrayList<SchemaObject> getAll(ArrayList<SchemaObject> addTo) {\n         if (addTo == null) {\n             addTo = Utils.newSmallArrayList();\n@@ -670,12 +730,14 @@ public class Schema extends DbObjectBase {\n      * @return the specified list with added objects, or a new (possibly empty) list\n      *         with objects of the given type\n      */\n+\n+\n     public ArrayList<SchemaObject> getAll(int type, ArrayList<SchemaObject> addTo) {\n         Collection<SchemaObject> values = getMap(type).values();\n         if (addTo != null) {\n             addTo.addAll(values);\n         } else {\n-            addTo = new ArrayList<>(values);\n+            addTo = new ArrayList< >(values);\n         }\n         return addTo;\n     }\n@@ -685,6 +747,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @return a (possible empty) list of all objects\n      */\n+\n+\n     public Collection<Table> getAllTablesAndViews() {\n         return tablesAndViews.values();\n     }\n@@ -700,6 +764,8 @@ public class Schema extends DbObjectBase {\n      * @param name the table name\n      * @return the table or null if not found\n      */\n+\n+\n     public Table getTableOrViewByName(String name) {\n         return tablesAndViews.get(name);\n     }\n@@ -709,6 +775,8 @@ public class Schema extends DbObjectBase {\n      *\n      * @param obj the object to remove\n      */\n+\n+\n     public void remove(SchemaObject obj) {\n         String objName = obj.getName();\n         Map<String, SchemaObject> map = getMap(obj.getType());\n@@ -724,6 +792,8 @@ public class Schema extends DbObjectBase {\n      * @param data the create table information\n      * @return the created {@link Table} object\n      */\n+\n+\n     public Table createTable(CreateTableData data) {\n         synchronized (database) {\n             if (!data.temporary || data.globalTemporary) {\n@@ -754,6 +824,8 @@ public class Schema extends DbObjectBase {\n      * @param data the create synonym information\n      * @return the created {@link TableSynonym} object\n      */\n+\n+\n     public TableSynonym createSynonym(CreateSynonymData data) {\n         synchronized (database) {\n             database.lockMeta(data.session);\n@@ -777,14 +849,12 @@ public class Schema extends DbObjectBase {\n      * @param force create the object even if the database can not be accessed\n      * @return the {@link TableLink} object\n      */\n-    public TableLink createTableLink(int id, String tableName, String driver,\n-            String url, String user, String password, String originalSchema,\n-            String originalTable, boolean emitUpdates, boolean force) {\n+\n+\n+    public TableLink createTableLink(int id, String tableName, String driver, String url, String user, String password, String originalSchema, String originalTable, boolean emitUpdates, boolean force) {\n         synchronized (database) {\n-            return new TableLink(this, id, tableName,\n-                    driver, url, user, password,\n-                    originalSchema, originalTable, emitUpdates, force);\n+            return new TableLink(this, id, tableName, driver, url, user, password, originalSchema, originalTable, emitUpdates, force);\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 98
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/26/Schema.java\nindex 6310b7375c..96343f2260 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/26/Schema.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/26/Schema.java\n@@ -171,7 +171,7 @@ public class Schema extends DbObjectBase {\n                         database.removeSchemaObject(session, obj);\n                         newModified = true;\n                     } else if (dependentTable.getSchema() != this) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, //\n+                            throwDbException.get(ErrorCode.CANNOT_DROP_2, //\n                                 obj.getSQL(false), dependentTable.getSQL(false));\n                     } else if (!modified) {\n                         dependentTable.removeColumnExpressionsDependencies(session);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}