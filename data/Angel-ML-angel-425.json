{
    "error_id": "425",
    "information": {
        "errors": [
            {
                "line": "50",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    if (part != null) {\n      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n\n      int[] rowIds = mf.getRowIds();\n      ServerRow[] rows = new ServerRow[rowIds.length];",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/425/MFUpdaterFunc.java\nindex 77114382b5..27f3f3408c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/425/MFUpdaterFunc.java\n@@ -46,32 +46,31 @@ public abstract class MFUpdaterFunc extends UpdaterFunc {\n         .getMatrixPartitionManager()\n         .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n-    if (part != null) {\n-      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+    if (part != null) { MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n \n-      int[] rowIds = mf.getRowIds();\n-      ServerRow[] rows = new ServerRow[rowIds.length];\n-      for (int i = 0; i < rowIds.length; i++) {\n-        rows[i] = part.getRow(rowIds[i]);\n-      }\n-      update(rows, mf.getFunc());\n+    int[] rowIds = mf.getRowIds();\n+    ServerRow[] rows = new ServerRow[rowIds.length];\n+    for (int i = 0; i < rowIds.length; i++) {\n+      rows[i] = part.getRow(rowIds[i]);\n     }\n+    update(rows, mf.getFunc());\n   }\n+}\n \n-  private void update(ServerRow[] rows, Serialize func) {\n-    switch (rows[0].getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n-        for (int i = 0; i < rows.length; i++) {\n-          denseRows[i] = (ServerDenseDoubleRow) rows[i];\n-        }\n-        doUpdate(denseRows, func);\n-        return;\n-      default:\n-        throw new RuntimeException(\"currently only supports Double Dense Row\");\n-    }\n+private void update(ServerRow[] rows, Serialize func) {\n+  switch (rows[0].getRowType()) {\n+    case T_DOUBLE_DENSE:\n+      ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n+      for (int i = 0; i < rows.length; i++) {\n+        denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+      }\n+      doUpdate(denseRows, func);\n+      return;\n+    default:\n+      throw new RuntimeException(\"currently only supports Double Dense Row\");\n   }\n+}\n \n-  protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n+protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/425/MFUpdaterFunc.java\nindex 77114382b5..c249c10c42 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/425/MFUpdaterFunc.java\n@@ -27,51 +27,52 @@ import com.tencent.angel.ps.impl.matrix.ServerRow;\n  * `MFUpdaterFunc` is a POF updater for multi rows in matrix with a user-defined function.\n  * Constructor's Parameters include int[] `rowIds` and Serialize `func`, which correspond to\n  * ServerDenseDoubleRow[] `rows` and Serialize `func` in `doUpdate` interface respectively.\n- *\n+ * <p>\n  * That is the length of `rowIds` and `rows` is exactly the same, rows[i] is the content of\n  * rowIds[i] row in matrix.\n  */\n public abstract class MFUpdaterFunc extends UpdaterFunc {\n-  public MFUpdaterFunc(int matrixId, int[] rowIds, Serialize func) {\n-    super(new MFUpdaterParam(matrixId, rowIds, func));\n-  }\n+    public MFUpdaterFunc(int matrixId, int[] rowIds, Serialize func) {\n+        super(new MFUpdaterParam(matrixId, rowIds, func));\n+    }\n \n-  public MFUpdaterFunc() {\n-    super(null);\n-  }\n+    public MFUpdaterFunc() {\n+        super(null);\n+    }\n \n-  @Override\n-  public void partitionUpdate(PartitionUpdaterParam partParam) {\n-    ServerPartition part = PSContext.get()\n-        .getMatrixPartitionManager()\n-        .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+    @Override\n+    public void partitionUpdate(PartitionUpdaterParam partParam) {\n+        ServerPartition part = PSContext.get()\n+                .getMatrixPartitionManager()\n+                .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n-    if (part != null) {\n-      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+        if (part != null) {\n+            MFUpdaterParam.MFPartitionUpdaterParam mf =\n+                    (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n \n-      int[] rowIds = mf.getRowIds();\n-      ServerRow[] rows = new ServerRow[rowIds.length];\n-      for (int i = 0; i < rowIds.length; i++) {\n-        rows[i] = part.getRow(rowIds[i]);\n-      }\n-      update(rows, mf.getFunc());\n+            int[] rowIds = mf.getRowIds();\n+            ServerRow[] rows = new ServerRow[rowIds.length];\n+            for (int i = 0; i < rowIds.length; i++) {\n+                rows[i] = part.getRow(rowIds[i]);\n+            }\n+            update(rows, mf.getFunc());\n+        }\n     }\n-  }\n \n-  private void update(ServerRow[] rows, Serialize func) {\n-    switch (rows[0].getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n-        for (int i = 0; i < rows.length; i++) {\n-          denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+    private void update(ServerRow[] rows, Serialize func) {\n+        switch (rows[0].getRowType()) {\n+            case T_DOUBLE_DENSE:\n+                ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n+                for (int i = 0; i < rows.length; i++) {\n+                    denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+                }\n+                doUpdate(denseRows, func);\n+                return;\n+            default:\n+                throw new RuntimeException(\"currently only supports Double Dense Row\");\n         }\n-        doUpdate(denseRows, func);\n-        return;\n-      default:\n-        throw new RuntimeException(\"currently only supports Double Dense Row\");\n     }\n-  }\n \n-  protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n+    protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/425/MFUpdaterFunc.java\nindex 77114382b5..c6bbe1fd6c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/425/MFUpdaterFunc.java\n@@ -74,4 +74,4 @@ public abstract class MFUpdaterFunc extends UpdaterFunc {\n \n   protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/425/MFUpdaterFunc.java\nindex 77114382b5..30bc02ed2f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/425/MFUpdaterFunc.java\n@@ -31,47 +31,45 @@ import com.tencent.angel.ps.impl.matrix.ServerRow;\n  * That is the length of `rowIds` and `rows` is exactly the same, rows[i] is the content of\n  * rowIds[i] row in matrix.\n  */\n+\n public abstract class MFUpdaterFunc extends UpdaterFunc {\n-  public MFUpdaterFunc(int matrixId, int[] rowIds, Serialize func) {\n+\n+    public MFUpdaterFunc(int matrixId, int[] rowIds, Serialize func) {\n     super(new MFUpdaterParam(matrixId, rowIds, func));\n-  }\n+    }\n \n-  public MFUpdaterFunc() {\n+    public MFUpdaterFunc() {\n     super(null);\n-  }\n-\n-  @Override\n-  public void partitionUpdate(PartitionUpdaterParam partParam) {\n-    ServerPartition part = PSContext.get()\n-        .getMatrixPartitionManager()\n-        .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+    }\n \n+    @Override\n+    public void partitionUpdate(PartitionUpdaterParam partParam) {\n+    ServerPartition part = PSContext.get().getMatrixPartitionManager().getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n     if (part != null) {\n-      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n-\n-      int[] rowIds = mf.getRowIds();\n-      ServerRow[] rows = new ServerRow[rowIds.length];\n-      for (int i = 0; i < rowIds.length; i++) {\n-        rows[i] = part.getRow(rowIds[i]);\n-      }\n-      update(rows, mf.getFunc());\n+        MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+        int[] rowIds = mf.getRowIds();\n+        ServerRow[] rows = new ServerRow[rowIds.length];\n+        for (int i = 0; i < rowIds.length; i++) {\n+                          rows[i] = part.getRow(rowIds[i]);\n+        }\n+        update(rows, mf.getFunc());\n+    }\n     }\n-  }\n \n-  private void update(ServerRow[] rows, Serialize func) {\n+    private void update(ServerRow[] rows, Serialize func) {\n     switch (rows[0].getRowType()) {\n-      case T_DOUBLE_DENSE:\n+        case T_DOUBLE_DENSE:\n         ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n         for (int i = 0; i < rows.length; i++) {\n-          denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+        denseRows[i] = (ServerDenseDoubleRow) rows[i];\n         }\n         doUpdate(denseRows, func);\n         return;\n-      default:\n+        default:\n         throw new RuntimeException(\"currently only supports Double Dense Row\");\n     }\n-  }\n+    }\n \n-  protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n+    protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/425/MFUpdaterFunc.java\nindex 77114382b5..1b48af538c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/425/MFUpdaterFunc.java\n@@ -47,31 +47,32 @@ public abstract class MFUpdaterFunc extends UpdaterFunc {\n         .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n     if (part != null) {\n-      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+      MFUpdaterParam.MFPartitionUpdaterParam mf =\n+          (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+  int [ ] rowIds = mf.getRowIds();\n+       ServerRow[] rows = new ServerRow[rowIds.length];\n+       for (int i = 0; i < rowIds.length; i++) {\n+         rows[i] = part.getRow(rowIds[i]);\n+       }\n+       update(rows, mf.getFunc());\n+     }\n+   }\n \n-      int[] rowIds = mf.getRowIds();\n-      ServerRow[] rows = new ServerRow[rowIds.length];\n-      for (int i = 0; i < rowIds.length; i++) {\n-        rows[i] = part.getRow(rowIds[i]);\n-      }\n-      update(rows, mf.getFunc());\n-    }\n-  }\n-\n-  private void update(ServerRow[] rows, Serialize func) {\n-    switch (rows[0].getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n-        for (int i = 0; i < rows.length; i++) {\n-          denseRows[i] = (ServerDenseDoubleRow) rows[i];\n-        }\n-        doUpdate(denseRows, func);\n-        return;\n-      default:\n-        throw new RuntimeException(\"currently only supports Double Dense Row\");\n-    }\n-  }\n+   private void update(ServerRow[] rows, Serialize func) {\n+     switch (rows[0].getRowType()) {\n+       case T_DOUBLE_DENSE:\n+         ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n+         for (int i = 0; i < rows.length; i++) {\n+           denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+         }\n+         doUpdate(denseRows, func);\n+         return;\n+       default:\n+         throw new RuntimeException(\"currently only supports Double Dense Row\");\n+     }\n+   }\n \n-  protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n+   protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/425/MFUpdaterFunc.java\nindex 77114382b5..27f3f3408c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/425/MFUpdaterFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/425/MFUpdaterFunc.java\n@@ -46,32 +46,31 @@ public abstract class MFUpdaterFunc extends UpdaterFunc {\n         .getMatrixPartitionManager()\n         .getPartition(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n-    if (part != null) {\n-      MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n+    if (part != null) { MFUpdaterParam.MFPartitionUpdaterParam mf = (MFUpdaterParam.MFPartitionUpdaterParam) partParam;\n \n-      int[] rowIds = mf.getRowIds();\n-      ServerRow[] rows = new ServerRow[rowIds.length];\n-      for (int i = 0; i < rowIds.length; i++) {\n-        rows[i] = part.getRow(rowIds[i]);\n-      }\n-      update(rows, mf.getFunc());\n+    int[] rowIds = mf.getRowIds();\n+    ServerRow[] rows = new ServerRow[rowIds.length];\n+    for (int i = 0; i < rowIds.length; i++) {\n+      rows[i] = part.getRow(rowIds[i]);\n     }\n+    update(rows, mf.getFunc());\n   }\n+}\n \n-  private void update(ServerRow[] rows, Serialize func) {\n-    switch (rows[0].getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n-        for (int i = 0; i < rows.length; i++) {\n-          denseRows[i] = (ServerDenseDoubleRow) rows[i];\n-        }\n-        doUpdate(denseRows, func);\n-        return;\n-      default:\n-        throw new RuntimeException(\"currently only supports Double Dense Row\");\n-    }\n+private void update(ServerRow[] rows, Serialize func) {\n+  switch (rows[0].getRowType()) {\n+    case T_DOUBLE_DENSE:\n+      ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[rows.length];\n+      for (int i = 0; i < rows.length; i++) {\n+        denseRows[i] = (ServerDenseDoubleRow) rows[i];\n+      }\n+      doUpdate(denseRows, func);\n+      return;\n+    default:\n+      throw new RuntimeException(\"currently only supports Double Dense Row\");\n   }\n+}\n \n-  protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n+protected abstract void doUpdate(ServerDenseDoubleRow[] rows, Serialize func);\n \n }\n",
            "diff_size": 24
        }
    ]
}