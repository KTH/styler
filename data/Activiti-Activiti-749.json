{
    "error_id": "749",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.util;\n\nimport org.activiti.bpmn.model.BpmnModel;\nimport org.activiti.bpmn.model.Process;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/749/ProcessDefinitionUtil.java\nindex 031d8bbb5c..9b5582829b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/749/ProcessDefinitionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import org.activiti.bpmn.model.BpmnModel;\n@@ -43,7 +44,7 @@ public class ProcessDefinitionUtil {\n         return cacheEntry.getProcessDefinition();\n       }\n       return null;\n-      \n+\n     } else {\n       // This will check the cache in the findDeployedProcessDefinitionById method\n       return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n@@ -65,7 +66,7 @@ public class ProcessDefinitionUtil {\n     ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n     return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n   }\n-  \n+\n   public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n     ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n     if (cacheEntry != null) {\n@@ -73,19 +74,19 @@ public class ProcessDefinitionUtil {\n     }\n     return null;\n   }\n-  \n+\n   public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n     ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n     return processDefinition.isSuspended();\n   }\n-  \n+\n   public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n     ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n     ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n     if (processDefinition == null) {\n       throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n     }\n-    \n+\n     return processDefinition;\n   }\n }\n",
            "diff_size": 6
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/749/ProcessDefinitionUtil.java\nindex 031d8bbb5c..e47dd11734 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/749/ProcessDefinitionUtil.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import org.activiti.bpmn.model.BpmnModel;\n@@ -26,66 +27,64 @@ import org.activiti.engine.repository.ProcessDefinition;\n /**\n  * A utility class that hides the complexity of {@link ProcessDefinitionEntity} and {@link Process} lookup. Use this class rather than accessing the process definition cache or\n  * {@link DeploymentManager} directly.\n- * \n-\n  */\n public class ProcessDefinitionUtil {\n \n-  public static ProcessDefinition getProcessDefinition(String processDefinitionId) {\n-    return getProcessDefinition(processDefinitionId, false);\n-  }\n+    public static ProcessDefinition getProcessDefinition(String processDefinitionId) {\n+        return getProcessDefinition(processDefinitionId, false);\n+    }\n+\n+    public static ProcessDefinition getProcessDefinition(String processDefinitionId, boolean checkCacheOnly) {\n+        ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();\n+        if (checkCacheOnly) {\n+            ProcessDefinitionCacheEntry cacheEntry = processEngineConfiguration.getProcessDefinitionCache().get(processDefinitionId);\n+            if (cacheEntry != null) {\n+                return cacheEntry.getProcessDefinition();\n+            }\n+            return null;\n \n-  public static ProcessDefinition getProcessDefinition(String processDefinitionId, boolean checkCacheOnly) {\n-    ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();\n-    if (checkCacheOnly) {\n-      ProcessDefinitionCacheEntry cacheEntry = processEngineConfiguration.getProcessDefinitionCache().get(processDefinitionId);\n-      if (cacheEntry != null) {\n-        return cacheEntry.getProcessDefinition();\n-      }\n-      return null;\n-      \n-    } else {\n-      // This will check the cache in the findDeployedProcessDefinitionById method\n-      return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n+        } else {\n+            // This will check the cache in the findDeployedProcessDefinitionById method\n+            return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n+        }\n     }\n-  }\n \n-  public static Process getProcess(String processDefinitionId) {\n-    DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n+    public static Process getProcess(String processDefinitionId) {\n+        DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n \n-    // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n-    ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n-    return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getProcess();\n-  }\n+        // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n+        ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n+        return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getProcess();\n+    }\n \n-  public static BpmnModel getBpmnModel(String processDefinitionId) {\n-    DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n+    public static BpmnModel getBpmnModel(String processDefinitionId) {\n+        DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n \n-    // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n-    ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n-    return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n-  }\n-  \n-  public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n-    ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n-    if (cacheEntry != null) {\n-      return cacheEntry.getBpmnModel();\n+        // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n+        ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n+        return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n     }\n-    return null;\n-  }\n-  \n-  public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n-    ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n-    return processDefinition.isSuspended();\n-  }\n-  \n-  public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n-    ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n-    ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n-    if (processDefinition == null) {\n-      throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n+\n+    public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n+        ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n+        if (cacheEntry != null) {\n+            return cacheEntry.getBpmnModel();\n+        }\n+        return null;\n+    }\n+\n+    public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n+        ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n+        return processDefinition.isSuspended();\n+    }\n+\n+    public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n+        ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n+        ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n+        if (processDefinition == null) {\n+            throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n+        }\n+\n+        return processDefinition;\n     }\n-    \n-    return processDefinition;\n-  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/749/ProcessDefinitionUtil.java\nindex 031d8bbb5c..36fd6593d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/749/ProcessDefinitionUtil.java\n@@ -29,63 +29,64 @@ import org.activiti.engine.repository.ProcessDefinition;\n  * \n \n  */\n+\n+\n public class ProcessDefinitionUtil {\n \n-  public static ProcessDefinition getProcessDefinition(String processDefinitionId) {\n-    return getProcessDefinition(processDefinitionId, false);\n-  }\n+    public static ProcessDefinition getProcessDefinition(String processDefinitionId) {\n+        return getProcessDefinition(processDefinitionId, false);\n+    }\n \n-  public static ProcessDefinition getProcessDefinition(String processDefinitionId, boolean checkCacheOnly) {\n+    public static ProcessDefinition getProcessDefinition(String processDefinitionId, boolean checkCacheOnly) {\n     ProcessEngineConfigurationImpl processEngineConfiguration = Context.getProcessEngineConfiguration();\n     if (checkCacheOnly) {\n-      ProcessDefinitionCacheEntry cacheEntry = processEngineConfiguration.getProcessDefinitionCache().get(processDefinitionId);\n-      if (cacheEntry != null) {\n-        return cacheEntry.getProcessDefinition();\n-      }\n-      return null;\n-      \n+        ProcessDefinitionCacheEntry cacheEntry = processEngineConfiguration.getProcessDefinitionCache().get(processDefinitionId);\n+        if (cacheEntry != null) {\n+                            return cacheEntry.getProcessDefinition();\n+        }\n+        return null;\n     } else {\n       // This will check the cache in the findDeployedProcessDefinitionById method\n       return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n     }\n-  }\n+    }\n \n-  public static Process getProcess(String processDefinitionId) {\n+    public static Process getProcess(String processDefinitionId) {\n     DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n \n     // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n     ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n     return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getProcess();\n-  }\n+    }\n \n-  public static BpmnModel getBpmnModel(String processDefinitionId) {\n+    public static BpmnModel getBpmnModel(String processDefinitionId) {\n     DeploymentManager deploymentManager = Context.getProcessEngineConfiguration().getDeploymentManager();\n \n     // This will check the cache in the findDeployedProcessDefinitionById and resolveProcessDefinition method\n     ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n     return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n-  }\n-  \n-  public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n+    }\n+\n+    public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n     ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n     if (cacheEntry != null) {\n-      return cacheEntry.getBpmnModel();\n+        return cacheEntry.getBpmnModel();\n     }\n     return null;\n-  }\n-  \n-  public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n+    }\n+\n+    public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n     ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n     return processDefinition.isSuspended();\n-  }\n-  \n-  public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n+    }\n+\n+    public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n     ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n     ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n     if (processDefinition == null) {\n-      throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n+        throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n     }\n-    \n     return processDefinition;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/749/ProcessDefinitionUtil.java\nindex 031d8bbb5c..9b5582829b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/749/ProcessDefinitionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import org.activiti.bpmn.model.BpmnModel;\n@@ -43,7 +44,7 @@ public class ProcessDefinitionUtil {\n         return cacheEntry.getProcessDefinition();\n       }\n       return null;\n-      \n+\n     } else {\n       // This will check the cache in the findDeployedProcessDefinitionById method\n       return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n@@ -65,7 +66,7 @@ public class ProcessDefinitionUtil {\n     ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n     return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n   }\n-  \n+\n   public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n     ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n     if (cacheEntry != null) {\n@@ -73,19 +74,19 @@ public class ProcessDefinitionUtil {\n     }\n     return null;\n   }\n-  \n+\n   public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n     ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n     return processDefinition.isSuspended();\n   }\n-  \n+\n   public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n     ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n     ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n     if (processDefinition == null) {\n       throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n     }\n-    \n+\n     return processDefinition;\n   }\n }\n",
            "diff_size": 6
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/749/ProcessDefinitionUtil.java\nindex 031d8bbb5c..9b5582829b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/749/ProcessDefinitionUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/749/ProcessDefinitionUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import org.activiti.bpmn.model.BpmnModel;\n@@ -43,7 +44,7 @@ public class ProcessDefinitionUtil {\n         return cacheEntry.getProcessDefinition();\n       }\n       return null;\n-      \n+\n     } else {\n       // This will check the cache in the findDeployedProcessDefinitionById method\n       return processEngineConfiguration.getDeploymentManager().findDeployedProcessDefinitionById(processDefinitionId);\n@@ -65,7 +66,7 @@ public class ProcessDefinitionUtil {\n     ProcessDefinition processDefinitionEntity = deploymentManager.findDeployedProcessDefinitionById(processDefinitionId);\n     return deploymentManager.resolveProcessDefinition(processDefinitionEntity).getBpmnModel();\n   }\n-  \n+\n   public static BpmnModel getBpmnModelFromCache(String processDefinitionId) {\n     ProcessDefinitionCacheEntry cacheEntry = Context.getProcessEngineConfiguration().getProcessDefinitionCache().get(processDefinitionId);\n     if (cacheEntry != null) {\n@@ -73,19 +74,19 @@ public class ProcessDefinitionUtil {\n     }\n     return null;\n   }\n-  \n+\n   public static boolean isProcessDefinitionSuspended(String processDefinitionId) {\n     ProcessDefinitionEntity processDefinition = getProcessDefinitionFromDatabase(processDefinitionId);\n     return processDefinition.isSuspended();\n   }\n-  \n+\n   public static ProcessDefinitionEntity getProcessDefinitionFromDatabase(String processDefinitionId) {\n     ProcessDefinitionEntityManager processDefinitionEntityManager = Context.getProcessEngineConfiguration().getProcessDefinitionEntityManager();\n     ProcessDefinitionEntity processDefinition = processDefinitionEntityManager.findById(processDefinitionId);\n     if (processDefinition == null) {\n       throw new ActivitiException(\"No process definition found with id \" + processDefinitionId);\n     }\n-    \n+\n     return processDefinition;\n   }\n }\n",
            "diff_size": 6
        }
    ]
}