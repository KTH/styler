{
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "75",
                "severity": "error",
                "message": "'}' at column 75 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "'}' at column 75 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..0b9d0d1841 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler/92/ValidUniqueQuestionNumberValidator.java\n@@ -16,7 +16,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n  */\n public class ValidUniqueQuestionNumberValidator\n     implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n@@ -38,8 +38,8 @@ public class ValidUniqueQuestionNumberValidator\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n     if (question.getInstrumentId() != null\n         && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n+\n+      List<IdAndVersionProjection> existingQuestions =\n           questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n           question.getNumber());\n       if (existingQuestions.isEmpty()) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..f586e5b7b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/intellij/92/ValidUniqueQuestionNumberValidator.java\n@@ -16,21 +16,22 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n  */\n public class ValidUniqueQuestionNumberValidator\n     implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n@@ -38,10 +39,10 @@ public class ValidUniqueQuestionNumberValidator\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n     if (question.getInstrumentId() != null\n         && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n+\n+      List<IdAndVersionProjection> existingQuestions =\n           questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n-          question.getNumber());\n+              question.getNumber());\n       if (existingQuestions.isEmpty()) {\n         return true;\n       } else {\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "'}' at column 75 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..d4ee105736 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/naturalize/92/ValidUniqueQuestionNumberValidator.java\n@@ -38,9 +38,7 @@ public class ValidUniqueQuestionNumberValidator\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n     if (question.getInstrumentId() != null\n         && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n-          questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n+  List<IdAndVersionProjection> existingQuestions = questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n           question.getNumber());\n       if (existingQuestions.isEmpty()) {\n         return true;\n@@ -55,4 +53,4 @@ public class ValidUniqueQuestionNumberValidator\n     }\n     return true;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 80, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 12, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..492c7bd734 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/codebuff/92/ValidUniqueQuestionNumberValidator.java\n@@ -1,12 +1,9 @@\n package eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.validation;\n \n import java.util.List;\n-\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.projections.IdAndVersionProjection;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.Question;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepository;\n@@ -14,19 +11,23 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n /**\n  * Validates the uniqueness of question.\n  */\n-public class ValidUniqueQuestionNumberValidator\n-    implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n-  @Autowired\n-  private QuestionRepository questionRepository;\n+\n+\n+public class ValidUniqueQuestionNumberValidator implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n+\n+    @Autowired\n+    private QuestionRepository questionRepository;\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n-  @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+\n+    @Override\n+    public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+\n+    }\n \n   /*\n    * (non-Javadoc)\n@@ -34,25 +35,26 @@ public class ValidUniqueQuestionNumberValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(Question question, ConstraintValidatorContext context) {\n-    if (question.getInstrumentId() != null\n-        && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n-          questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n-          question.getNumber());\n-      if (existingQuestions.isEmpty()) {\n-        return true;\n-      } else {\n-        if (existingQuestions.get(0).getId().equals(question.getId())) {\n-          //we are updating this question\n-          return true;\n+\n+\n+    @Override\n+    public boolean isValid(Question question,\n+        ConstraintValidatorContext context) {\n+    if (question.getInstrumentId() != null && question.getNumber() != null) {\n+        List<IdAndVersionProjection> existingQuestions = questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(), question.getNumber());\n+        if (existingQuestions.isEmpty()) {\n+                                                                                return true;\n         } else {\n-          return false;\n+          if (existingQuestions.get(0).getId()\n+                                      .equals(question.getId())) {\n+          //we are updating this question\n+                   return true;\n+          } else {\n+            return false;\n+          }\n         }\n-      }\n     }\n+\n     return true;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "'}' at column 75 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..0b9d0d1841 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_random/92/ValidUniqueQuestionNumberValidator.java\n@@ -16,7 +16,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n  */\n public class ValidUniqueQuestionNumberValidator\n     implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n@@ -38,8 +38,8 @@ public class ValidUniqueQuestionNumberValidator\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n     if (question.getInstrumentId() != null\n         && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n+\n+      List<IdAndVersionProjection> existingQuestions =\n           questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n           question.getNumber());\n       if (existingQuestions.isEmpty()) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "76",
                    "severity": "error",
                    "message": "'}' at column 76 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/92/ValidUniqueQuestionNumberValidator.java\nindex ea25b008b3..4f3be69a51 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/errored/1/92/ValidUniqueQuestionNumberValidator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/dzhw-metadatamanagement/styler_three_grams/92/ValidUniqueQuestionNumberValidator.java\n@@ -16,7 +16,7 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n  */\n public class ValidUniqueQuestionNumberValidator\n     implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n@@ -26,9 +26,7 @@ public class ValidUniqueQuestionNumberValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n-\n-  /*\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) { }/*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n@@ -38,8 +36,8 @@ public class ValidUniqueQuestionNumberValidator\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n     if (question.getInstrumentId() != null\n         && question.getNumber() != null) {\n-        \n-      List<IdAndVersionProjection> existingQuestions = \n+\n+      List<IdAndVersionProjection> existingQuestions =\n           questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n           question.getNumber());\n       if (existingQuestions.isEmpty()) {\n",
            "diff_size": 6
        }
    ]
}