{
    "error_id": "783",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/783/WorkerGroupId.java\nindex 1b2d0c3b67..44e42eeb84 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/783/WorkerGroupId.java\n@@ -23,46 +23,46 @@ import com.tencent.angel.exception.UnvalidIdStrException;\n  * The type worker group id.\n  */\n public class WorkerGroupId extends Id {\n-  public static String WORKERGROUP = \"WorkerGroup\";\n+    public static String WORKERGROUP = \"WorkerGroup\";\n \n-  /**\n-   * Instantiates a new Worker group id with index.\n-   *\n-   * @param index the index\n-   */\n-  public WorkerGroupId(int index) {\n-    super(index);\n-  }\n-\n-  /**\n-   * Instantiates a new Worker group id with 'idStr'\n-   * <p>\n-   * 'idStr' must match <code>WorkerGroup_XXX</code>\n-   *\n-   * @param idStr the id str\n-   * @throws UnvalidIdStrException\n-   */\n-  public WorkerGroupId(String idStr) throws UnvalidIdStrException {\n-    if (idStr == null) {\n-      throw new UnvalidIdStrException(\"workergroup id str can not be null\");\n+    /**\n+     * Instantiates a new Worker group id with index.\n+     *\n+     * @param index the index\n+     */\n+    public WorkerGroupId(int index) {\n+        super(index);\n     }\n \n-    String[] idElemts = idStr.split(SEPARATOR);\n-    if (idElemts.length != 2 || !idElemts[0].equals(WORKERGROUP)) {\n-      throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n-          + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n-    }\n+    /**\n+     * Instantiates a new Worker group id with 'idStr'\n+     * <p>\n+     * 'idStr' must match <code>WorkerGroup_XXX</code>\n+     *\n+     * @param idStr the id str\n+     * @throws UnvalidIdStrException\n+     */\n+    public WorkerGroupId(String idStr) throws UnvalidIdStrException {\n+        if (idStr == null) {\n+            throw new UnvalidIdStrException(\"workergroup id str can not be null\");\n+        }\n \n-    try {\n-      index = Integer.valueOf(idElemts[1]);\n-    } catch (Exception x) {\n-      throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n-          + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+        String[] idElemts = idStr.split(SEPARATOR);\n+        if (idElemts.length != 2 || !idElemts[0].equals(WORKERGROUP)) {\n+            throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n+                    + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+        }\n+\n+        try {\n+            index = Integer.valueOf(idElemts[1]);\n+        } catch (Exception x) {\n+            throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n+                    + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+        }\n     }\n-  }\n \n-  @Override\n-  public String toString() {\n-    return WORKERGROUP + Id.SEPARATOR + super.toString();\n-  }\n+    @Override\n+    public String toString() {\n+        return WORKERGROUP + Id.SEPARATOR + super.toString();\n+    }\n }\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/783/WorkerGroupId.java\nindex 1b2d0c3b67..dcf6e4654d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/783/WorkerGroupId.java\n@@ -65,4 +65,4 @@ public class WorkerGroupId extends Id {\n   public String toString() {\n     return WORKERGROUP + Id.SEPARATOR + super.toString();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/783/WorkerGroupId.java\nindex 1b2d0c3b67..fc5c7f7d4d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/783/WorkerGroupId.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/783/WorkerGroupId.java\n@@ -22,17 +22,20 @@ import com.tencent.angel.exception.UnvalidIdStrException;\n /**\n  * The type worker group id.\n  */\n+\n public class WorkerGroupId extends Id {\n-  public static String WORKERGROUP = \"WorkerGroup\";\n+\n+    public static String WORKERGROUP = \"WorkerGroup\";\n \n   /**\n    * Instantiates a new Worker group id with index.\n    *\n    * @param index the index\n    */\n-  public WorkerGroupId(int index) {\n+\n+    public WorkerGroupId(int index) {\n     super(index);\n-  }\n+    }\n \n   /**\n    * Instantiates a new Worker group id with 'idStr'\n@@ -42,27 +45,27 @@ public class WorkerGroupId extends Id {\n    * @param idStr the id str\n    * @throws UnvalidIdStrException\n    */\n-  public WorkerGroupId(String idStr) throws UnvalidIdStrException {\n+\n+    public WorkerGroupId(String idStr)\n+    throws UnvalidIdStrException {\n     if (idStr == null) {\n-      throw new UnvalidIdStrException(\"workergroup id str can not be null\");\n+                                          throw new UnvalidIdStrException(\"workergroup id str can not be null\");\n     }\n \n     String[] idElemts = idStr.split(SEPARATOR);\n     if (idElemts.length != 2 || !idElemts[0].equals(WORKERGROUP)) {\n-      throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n-          + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+                                          throw new UnvalidIdStrException(\"unvalid id str \" + idStr + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n     }\n-\n     try {\n-      index = Integer.valueOf(idElemts[1]);\n+        index = Integer.valueOf(idElemts[1]);\n     } catch (Exception x) {\n-      throw new UnvalidIdStrException(\"unvalid id str \" + idStr\n-          + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+      throw new UnvalidIdStrException(\"unvalid id str \" + idStr + \", must be like this:\" + WORKERGROUP + SEPARATOR + \"workerGroupIndex\");\n+    }\n     }\n-  }\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     return WORKERGROUP + Id.SEPARATOR + super.toString();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}