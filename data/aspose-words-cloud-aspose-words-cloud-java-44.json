{
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "299",
                "column": "52",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    CompareOptions compareOptions = (CompareOptions)o;\n    return\n        Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n        Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/44/CompareOptions.java\nindex 6d94354c25..87f5aaaed9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/44/CompareOptions.java\n@@ -296,7 +296,7 @@ public class CompareOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CompareOptions compareOptions = (CompareOptions)o;\n+    CompareOptions compareOptions = (CompareOptions) o;\n     return\n         Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n         Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/44/CompareOptions.java\nindex 6d94354c25..751f1b7aea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/44/CompareOptions.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,266 +50,276 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Container class for compare documents options.\")\n public class CompareOptions {\n-    /**\n-     * Gets or sets specifies which document shall be used as a target during comparison.\n-     */\n-    @JsonAdapter(TargetEnum.Adapter.class)\n-    public enum TargetEnum {\n-        CURRENT(\"Current\"),\n-        NEW(\"New\");\n-\n-        private String value;\n-\n-        TargetEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets specifies which document shall be used as a target during comparison.\n+   */\n+  @JsonAdapter(TargetEnum.Adapter.class)\n+  public enum TargetEnum {\n+    CURRENT(\"Current\"),\n+    NEW(\"New\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    TargetEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static TargetEnum fromValue(String text) {\n-            for (TargetEnum b : TargetEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< TargetEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TargetEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TargetEnum.fromValue(String.valueOf(value));\n-            }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static TargetEnum fromValue(String text) {\n+      for (TargetEnum b : TargetEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"IgnoreCaseChanges\")\n-    private Boolean ignoreCaseChanges = null;\n+    public static class Adapter extends TypeAdapter<TargetEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public TargetEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TargetEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"IgnoreComments\")\n-    private Boolean ignoreComments = null;\n+  @SerializedName(\"IgnoreCaseChanges\")\n+  private Boolean ignoreCaseChanges = null;\n \n-    @SerializedName(\"IgnoreFields\")\n-    private Boolean ignoreFields = null;\n+  @SerializedName(\"IgnoreComments\")\n+  private Boolean ignoreComments = null;\n \n-    @SerializedName(\"IgnoreFootnotes\")\n-    private Boolean ignoreFootnotes = null;\n+  @SerializedName(\"IgnoreFields\")\n+  private Boolean ignoreFields = null;\n \n-    @SerializedName(\"IgnoreFormatting\")\n-    private Boolean ignoreFormatting = null;\n+  @SerializedName(\"IgnoreFootnotes\")\n+  private Boolean ignoreFootnotes = null;\n \n-    @SerializedName(\"IgnoreHeadersAndFooters\")\n-    private Boolean ignoreHeadersAndFooters = null;\n+  @SerializedName(\"IgnoreFormatting\")\n+  private Boolean ignoreFormatting = null;\n \n-    @SerializedName(\"IgnoreTables\")\n-    private Boolean ignoreTables = null;\n+  @SerializedName(\"IgnoreHeadersAndFooters\")\n+  private Boolean ignoreHeadersAndFooters = null;\n \n-    @SerializedName(\"IgnoreTextboxes\")\n-    private Boolean ignoreTextboxes = null;\n+  @SerializedName(\"IgnoreTables\")\n+  private Boolean ignoreTables = null;\n \n-    @SerializedName(\"Target\")\n-    private TargetEnum target = null;\n-    public CompareOptions ignoreCaseChanges(Boolean ignoreCaseChanges) {\n-        this.ignoreCaseChanges = ignoreCaseChanges;\n-        return this;\n-    }\n+  @SerializedName(\"IgnoreTextboxes\")\n+  private Boolean ignoreTextboxes = null;\n \n-    /**\n-     * Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\n-    * @return ignoreCaseChanges\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\")\n-    public Boolean getIgnoreCaseChanges() {\n-        return ignoreCaseChanges;\n-    }\n+  @SerializedName(\"Target\")\n+  private TargetEnum target = null;\n \n-    public void setIgnoreCaseChanges(Boolean ignoreCaseChanges) {\n-        this.ignoreCaseChanges = ignoreCaseChanges;\n-    }\n+  public CompareOptions ignoreCaseChanges(Boolean ignoreCaseChanges) {\n+    this.ignoreCaseChanges = ignoreCaseChanges;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreComments(Boolean ignoreComments) {\n-        this.ignoreComments = ignoreComments;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\n+   *\n+   * @return ignoreCaseChanges\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\")\n+  public Boolean getIgnoreCaseChanges() {\n+    return ignoreCaseChanges;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether specifies whether to compare differences in comments. By default comments are\n-     * not ignored.\n-    * @return ignoreComments\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in comments. By default comments are not ignored.\")\n-    public Boolean getIgnoreComments() {\n-        return ignoreComments;\n-    }\n+  public void setIgnoreCaseChanges(Boolean ignoreCaseChanges) {\n+    this.ignoreCaseChanges = ignoreCaseChanges;\n+  }\n \n-    public void setIgnoreComments(Boolean ignoreComments) {\n-        this.ignoreComments = ignoreComments;\n-    }\n+  public CompareOptions ignoreComments(Boolean ignoreComments) {\n+    this.ignoreComments = ignoreComments;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreFields(Boolean ignoreFields) {\n-        this.ignoreFields = ignoreFields;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether specifies whether to compare differences in comments. By default comments are\n+   * not ignored.\n+   *\n+   * @return ignoreComments\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in comments. By default comments are not ignored.\")\n+  public Boolean getIgnoreComments() {\n+    return ignoreComments;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether specifies whether to compare differences in fields. By default fields are not\n-     * ignored.\n-    * @return ignoreFields\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in fields. By default fields are not ignored.\")\n-    public Boolean getIgnoreFields() {\n-        return ignoreFields;\n-    }\n+  public void setIgnoreComments(Boolean ignoreComments) {\n+    this.ignoreComments = ignoreComments;\n+  }\n \n-    public void setIgnoreFields(Boolean ignoreFields) {\n-        this.ignoreFields = ignoreFields;\n-    }\n+  public CompareOptions ignoreFields(Boolean ignoreFields) {\n+    this.ignoreFields = ignoreFields;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreFootnotes(Boolean ignoreFootnotes) {\n-        this.ignoreFootnotes = ignoreFootnotes;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether specifies whether to compare differences in fields. By default fields are not\n+   * ignored.\n+   *\n+   * @return ignoreFields\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in fields. By default fields are not ignored.\")\n+  public Boolean getIgnoreFields() {\n+    return ignoreFields;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether specifies whether to compare differences in footnotes and endnotes. By default\n-     * footnotes are not ignored.\n-    * @return ignoreFootnotes\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in footnotes and endnotes. By default footnotes are not ignored.\")\n-    public Boolean getIgnoreFootnotes() {\n-        return ignoreFootnotes;\n-    }\n+  public void setIgnoreFields(Boolean ignoreFields) {\n+    this.ignoreFields = ignoreFields;\n+  }\n \n-    public void setIgnoreFootnotes(Boolean ignoreFootnotes) {\n-        this.ignoreFootnotes = ignoreFootnotes;\n-    }\n+  public CompareOptions ignoreFootnotes(Boolean ignoreFootnotes) {\n+    this.ignoreFootnotes = ignoreFootnotes;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreFormatting(Boolean ignoreFormatting) {\n-        this.ignoreFormatting = ignoreFormatting;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether specifies whether to compare differences in footnotes and endnotes. By default\n+   * footnotes are not ignored.\n+   *\n+   * @return ignoreFootnotes\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in footnotes and endnotes. By default footnotes are not ignored.\")\n+  public Boolean getIgnoreFootnotes() {\n+    return ignoreFootnotes;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether true indicates that formatting is ignored. By default document formatting is\n-     * not ignored.\n-    * @return ignoreFormatting\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that formatting is ignored. By default document formatting is not ignored.\")\n-    public Boolean getIgnoreFormatting() {\n-        return ignoreFormatting;\n-    }\n+  public void setIgnoreFootnotes(Boolean ignoreFootnotes) {\n+    this.ignoreFootnotes = ignoreFootnotes;\n+  }\n \n-    public void setIgnoreFormatting(Boolean ignoreFormatting) {\n-        this.ignoreFormatting = ignoreFormatting;\n-    }\n+  public CompareOptions ignoreFormatting(Boolean ignoreFormatting) {\n+    this.ignoreFormatting = ignoreFormatting;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n-        this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether true indicates that formatting is ignored. By default document formatting is\n+   * not ignored.\n+   *\n+   * @return ignoreFormatting\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that formatting is ignored. By default document formatting is not ignored.\")\n+  public Boolean getIgnoreFormatting() {\n+    return ignoreFormatting;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether true indicates that headers and footers content is ignored. By default headers\n-     * and footers are not ignored.\n-    * @return ignoreHeadersAndFooters\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that headers and footers content is ignored. By default headers and footers are not ignored.\")\n-    public Boolean getIgnoreHeadersAndFooters() {\n-        return ignoreHeadersAndFooters;\n-    }\n+  public void setIgnoreFormatting(Boolean ignoreFormatting) {\n+    this.ignoreFormatting = ignoreFormatting;\n+  }\n \n-    public void setIgnoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n-        this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n-    }\n+  public CompareOptions ignoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n+    this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreTables(Boolean ignoreTables) {\n-        this.ignoreTables = ignoreTables;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether true indicates that headers and footers content is ignored. By default headers\n+   * and footers are not ignored.\n+   *\n+   * @return ignoreHeadersAndFooters\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that headers and footers content is ignored. By default headers and footers are not ignored.\")\n+  public Boolean getIgnoreHeadersAndFooters() {\n+    return ignoreHeadersAndFooters;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether specifies whether to compare the differences in data contained in tables. By\n-     * default tables are not ignored.\n-    * @return ignoreTables\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare the differences in data contained in tables. By default tables are not ignored.\")\n-    public Boolean getIgnoreTables() {\n-        return ignoreTables;\n-    }\n+  public void setIgnoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n+    this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n+  }\n \n-    public void setIgnoreTables(Boolean ignoreTables) {\n-        this.ignoreTables = ignoreTables;\n-    }\n+  public CompareOptions ignoreTables(Boolean ignoreTables) {\n+    this.ignoreTables = ignoreTables;\n+    return this;\n+  }\n \n-    public CompareOptions ignoreTextboxes(Boolean ignoreTextboxes) {\n-        this.ignoreTextboxes = ignoreTextboxes;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether specifies whether to compare the differences in data contained in tables. By\n+   * default tables are not ignored.\n+   *\n+   * @return ignoreTables\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare the differences in data contained in tables. By default tables are not ignored.\")\n+  public Boolean getIgnoreTables() {\n+    return ignoreTables;\n+  }\n \n-    /**\n-     * Gets or sets a value indicating whether specifies whether to compare differences in the data contained within text boxes.\n-     * By default textboxes are not ignored.\n-    * @return ignoreTextboxes\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in the data contained within text boxes. By default textboxes are not ignored.\")\n-    public Boolean getIgnoreTextboxes() {\n-        return ignoreTextboxes;\n-    }\n+  public void setIgnoreTables(Boolean ignoreTables) {\n+    this.ignoreTables = ignoreTables;\n+  }\n \n-    public void setIgnoreTextboxes(Boolean ignoreTextboxes) {\n-        this.ignoreTextboxes = ignoreTextboxes;\n-    }\n+  public CompareOptions ignoreTextboxes(Boolean ignoreTextboxes) {\n+    this.ignoreTextboxes = ignoreTextboxes;\n+    return this;\n+  }\n \n-    public CompareOptions target(TargetEnum target) {\n-        this.target = target;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a value indicating whether specifies whether to compare differences in the data contained within text boxes.\n+   * By default textboxes are not ignored.\n+   *\n+   * @return ignoreTextboxes\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in the data contained within text boxes. By default textboxes are not ignored.\")\n+  public Boolean getIgnoreTextboxes() {\n+    return ignoreTextboxes;\n+  }\n \n-    /**\n-     * Gets or sets specifies which document shall be used as a target during comparison.\n-    * @return target\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies which document shall be used as a target during comparison.\")\n-    public TargetEnum getTarget() {\n-        return target;\n-    }\n+  public void setIgnoreTextboxes(Boolean ignoreTextboxes) {\n+    this.ignoreTextboxes = ignoreTextboxes;\n+  }\n \n-    public void setTarget(TargetEnum target) {\n-        this.target = target;\n-    }\n+  public CompareOptions target(TargetEnum target) {\n+    this.target = target;\n+    return this;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    CompareOptions compareOptions = (CompareOptions)o;\n+  /**\n+   * Gets or sets specifies which document shall be used as a target during comparison.\n+   *\n+   * @return target\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies which document shall be used as a target during comparison.\")\n+  public TargetEnum getTarget() {\n+    return target;\n+  }\n+\n+  public void setTarget(TargetEnum target) {\n+    this.target = target;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    CompareOptions compareOptions = (CompareOptions) o;\n     return\n         Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n-        Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n-        Objects.equals(this.ignoreFields, compareOptions.ignoreFields) &&\n-        Objects.equals(this.ignoreFootnotes, compareOptions.ignoreFootnotes) &&\n-        Objects.equals(this.ignoreFormatting, compareOptions.ignoreFormatting) &&\n-        Objects.equals(this.ignoreHeadersAndFooters, compareOptions.ignoreHeadersAndFooters) &&\n-        Objects.equals(this.ignoreTables, compareOptions.ignoreTables) &&\n-        Objects.equals(this.ignoreTextboxes, compareOptions.ignoreTextboxes) &&\n-        Objects.equals(this.target, compareOptions.target);\n+            Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n+            Objects.equals(this.ignoreFields, compareOptions.ignoreFields) &&\n+            Objects.equals(this.ignoreFootnotes, compareOptions.ignoreFootnotes) &&\n+            Objects.equals(this.ignoreFormatting, compareOptions.ignoreFormatting) &&\n+            Objects.equals(this.ignoreHeadersAndFooters, compareOptions.ignoreHeadersAndFooters) &&\n+            Objects.equals(this.ignoreTables, compareOptions.ignoreTables) &&\n+            Objects.equals(this.ignoreTextboxes, compareOptions.ignoreTextboxes) &&\n+            Objects.equals(this.target, compareOptions.target);\n   }\n \n   @Override\n",
            "diff_size": 304
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "302",
                    "column": "48",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/44/CompareOptions.java\nindex 6d94354c25..5e787a715d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/44/CompareOptions.java\n@@ -53,7 +53,8 @@ public class CompareOptions {\n     @JsonAdapter(TargetEnum.Adapter.class)\n     public enum TargetEnum {\n         CURRENT(\"Current\"),\n-        NEW(\"New\");\n+\n+NEW(\"New\");\n \n         private String value;\n \n@@ -79,7 +80,7 @@ public class CompareOptions {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TargetEnum > {\n+        public static class Adapter extends TypeAdapter<TargetEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -119,7 +120,8 @@ public class CompareOptions {\n \n     @SerializedName(\"Target\")\n     private TargetEnum target = null;\n-    public CompareOptions ignoreCaseChanges(Boolean ignoreCaseChanges) {\n+\n+public CompareOptions ignoreCaseChanges(Boolean ignoreCaseChanges) {\n         this.ignoreCaseChanges = ignoreCaseChanges;\n         return this;\n     }\n@@ -292,13 +294,13 @@ public class CompareOptions {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CompareOptions compareOptions = (CompareOptions)o;\n-    return\n-        Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n+\n+CompareOptions compareOptions = (CompareOptions)o;\n+    return Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n         Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n         Objects.equals(this.ignoreFields, compareOptions.ignoreFields) &&\n         Objects.equals(this.ignoreFootnotes, compareOptions.ignoreFootnotes) &&\n@@ -341,4 +343,4 @@ public class CompareOptions {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/44/CompareOptions.java\nindex 6d94354c25..01eaf02770 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/44/CompareOptions.java\n@@ -45,53 +45,59 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Container class for compare documents options.\n  */\n+\n+\n @ApiModel(description = \"Container class for compare documents options.\")\n+\n public class CompareOptions {\n     /**\n      * Gets or sets specifies which document shall be used as a target during comparison.\n      */\n     @JsonAdapter(TargetEnum.Adapter.class)\n     public enum TargetEnum {\n-        CURRENT(\"Current\"),\n-        NEW(\"New\");\n+    CURRENT(\"Current\"),\n \n-        private String value;\n+    NEW(\"New\");\n \n-        TargetEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n+    TargetEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                               return String.valueOf(value);\n+    }\n+\n+    public static TargetEnum fromValue(String text) {\n+        for (TargetEnum b : TargetEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                     return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<TargetEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static TargetEnum fromValue(String text) {\n-            for (TargetEnum b : TargetEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< TargetEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TargetEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TargetEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TargetEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public TargetEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TargetEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"IgnoreCaseChanges\")\n     private Boolean ignoreCaseChanges = null;\n@@ -119,27 +125,32 @@ public class CompareOptions {\n \n     @SerializedName(\"Target\")\n     private TargetEnum target = null;\n+\n     public CompareOptions ignoreCaseChanges(Boolean ignoreCaseChanges) {\n-        this.ignoreCaseChanges = ignoreCaseChanges;\n-        return this;\n+    this.ignoreCaseChanges = ignoreCaseChanges;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\n     * @return ignoreCaseChanges\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that documents comparison is case insensitive. By default comparison is case sensitive.\")\n     public Boolean getIgnoreCaseChanges() {\n-        return ignoreCaseChanges;\n+    return ignoreCaseChanges;\n     }\n \n+\n     public void setIgnoreCaseChanges(Boolean ignoreCaseChanges) {\n-        this.ignoreCaseChanges = ignoreCaseChanges;\n+    this.ignoreCaseChanges = ignoreCaseChanges;\n     }\n \n+\n     public CompareOptions ignoreComments(Boolean ignoreComments) {\n-        this.ignoreComments = ignoreComments;\n-        return this;\n+    this.ignoreComments = ignoreComments;\n+    return this;\n     }\n \n     /**\n@@ -147,18 +158,22 @@ public class CompareOptions {\n      * not ignored.\n     * @return ignoreComments\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in comments. By default comments are not ignored.\")\n     public Boolean getIgnoreComments() {\n-        return ignoreComments;\n+    return ignoreComments;\n     }\n \n+\n     public void setIgnoreComments(Boolean ignoreComments) {\n-        this.ignoreComments = ignoreComments;\n+    this.ignoreComments = ignoreComments;\n     }\n \n+\n     public CompareOptions ignoreFields(Boolean ignoreFields) {\n-        this.ignoreFields = ignoreFields;\n-        return this;\n+    this.ignoreFields = ignoreFields;\n+    return this;\n     }\n \n     /**\n@@ -166,18 +181,22 @@ public class CompareOptions {\n      * ignored.\n     * @return ignoreFields\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in fields. By default fields are not ignored.\")\n     public Boolean getIgnoreFields() {\n-        return ignoreFields;\n+    return ignoreFields;\n     }\n \n+\n     public void setIgnoreFields(Boolean ignoreFields) {\n-        this.ignoreFields = ignoreFields;\n+    this.ignoreFields = ignoreFields;\n     }\n \n+\n     public CompareOptions ignoreFootnotes(Boolean ignoreFootnotes) {\n-        this.ignoreFootnotes = ignoreFootnotes;\n-        return this;\n+    this.ignoreFootnotes = ignoreFootnotes;\n+    return this;\n     }\n \n     /**\n@@ -185,18 +204,22 @@ public class CompareOptions {\n      * footnotes are not ignored.\n     * @return ignoreFootnotes\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in footnotes and endnotes. By default footnotes are not ignored.\")\n     public Boolean getIgnoreFootnotes() {\n-        return ignoreFootnotes;\n+    return ignoreFootnotes;\n     }\n \n+\n     public void setIgnoreFootnotes(Boolean ignoreFootnotes) {\n-        this.ignoreFootnotes = ignoreFootnotes;\n+    this.ignoreFootnotes = ignoreFootnotes;\n     }\n \n+\n     public CompareOptions ignoreFormatting(Boolean ignoreFormatting) {\n-        this.ignoreFormatting = ignoreFormatting;\n-        return this;\n+    this.ignoreFormatting = ignoreFormatting;\n+    return this;\n     }\n \n     /**\n@@ -204,18 +227,22 @@ public class CompareOptions {\n      * not ignored.\n     * @return ignoreFormatting\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that formatting is ignored. By default document formatting is not ignored.\")\n     public Boolean getIgnoreFormatting() {\n-        return ignoreFormatting;\n+    return ignoreFormatting;\n     }\n \n+\n     public void setIgnoreFormatting(Boolean ignoreFormatting) {\n-        this.ignoreFormatting = ignoreFormatting;\n+    this.ignoreFormatting = ignoreFormatting;\n     }\n \n+\n     public CompareOptions ignoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n-        this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n-        return this;\n+    this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n+    return this;\n     }\n \n     /**\n@@ -223,18 +250,22 @@ public class CompareOptions {\n      * and footers are not ignored.\n     * @return ignoreHeadersAndFooters\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether true indicates that headers and footers content is ignored. By default headers and footers are not ignored.\")\n     public Boolean getIgnoreHeadersAndFooters() {\n-        return ignoreHeadersAndFooters;\n+    return ignoreHeadersAndFooters;\n     }\n \n+\n     public void setIgnoreHeadersAndFooters(Boolean ignoreHeadersAndFooters) {\n-        this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n+    this.ignoreHeadersAndFooters = ignoreHeadersAndFooters;\n     }\n \n+\n     public CompareOptions ignoreTables(Boolean ignoreTables) {\n-        this.ignoreTables = ignoreTables;\n-        return this;\n+    this.ignoreTables = ignoreTables;\n+    return this;\n     }\n \n     /**\n@@ -242,18 +273,22 @@ public class CompareOptions {\n      * default tables are not ignored.\n     * @return ignoreTables\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare the differences in data contained in tables. By default tables are not ignored.\")\n     public Boolean getIgnoreTables() {\n-        return ignoreTables;\n+    return ignoreTables;\n     }\n \n+\n     public void setIgnoreTables(Boolean ignoreTables) {\n-        this.ignoreTables = ignoreTables;\n+    this.ignoreTables = ignoreTables;\n     }\n \n+\n     public CompareOptions ignoreTextboxes(Boolean ignoreTextboxes) {\n-        this.ignoreTextboxes = ignoreTextboxes;\n-        return this;\n+    this.ignoreTextboxes = ignoreTextboxes;\n+    return this;\n     }\n \n     /**\n@@ -261,61 +296,73 @@ public class CompareOptions {\n      * By default textboxes are not ignored.\n     * @return ignoreTextboxes\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a value indicating whether specifies whether to compare differences in the data contained within text boxes. By default textboxes are not ignored.\")\n     public Boolean getIgnoreTextboxes() {\n-        return ignoreTextboxes;\n+    return ignoreTextboxes;\n     }\n \n+\n     public void setIgnoreTextboxes(Boolean ignoreTextboxes) {\n-        this.ignoreTextboxes = ignoreTextboxes;\n+    this.ignoreTextboxes = ignoreTextboxes;\n     }\n \n+\n     public CompareOptions target(TargetEnum target) {\n-        this.target = target;\n-        return this;\n+    this.target = target;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies which document shall be used as a target during comparison.\n     * @return target\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies which document shall be used as a target during comparison.\")\n     public TargetEnum getTarget() {\n-        return target;\n+    return target;\n     }\n \n+\n     public void setTarget(TargetEnum target) {\n-        this.target = target;\n+    this.target = target;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    CompareOptions compareOptions = (CompareOptions)o;\n-    return\n-        Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n+\n+        CompareOptions compareOptions = (CompareOptions) o;\n+        return Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n         Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n         Objects.equals(this.ignoreFields, compareOptions.ignoreFields) &&\n         Objects.equals(this.ignoreFootnotes, compareOptions.ignoreFootnotes) &&\n         Objects.equals(this.ignoreFormatting, compareOptions.ignoreFormatting) &&\n         Objects.equals(this.ignoreHeadersAndFooters, compareOptions.ignoreHeadersAndFooters) &&\n         Objects.equals(this.ignoreTables, compareOptions.ignoreTables) &&\n-        Objects.equals(this.ignoreTextboxes, compareOptions.ignoreTextboxes) &&\n-        Objects.equals(this.target, compareOptions.target);\n-  }\n+            Objects.equals(this.ignoreTextboxes, compareOptions.ignoreTextboxes) &&\n+            Objects.equals(this.target, compareOptions.target);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(ignoreCaseChanges, ignoreComments, ignoreFields, ignoreFootnotes, ignoreFormatting, ignoreHeadersAndFooters, ignoreTables, ignoreTextboxes, target);\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class CompareOptions {\\n\");\n     sb.append(\"    ignoreCaseChanges: \").append(toIndentedString(ignoreCaseChanges)).append(\"\\n\");\n@@ -329,16 +376,18 @@ public class CompareOptions {\n     sb.append(\"    target: \").append(toIndentedString(target)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 150
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/44/CompareOptions.java\nindex 6d94354c25..87f5aaaed9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/44/CompareOptions.java\n@@ -296,7 +296,7 @@ public class CompareOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CompareOptions compareOptions = (CompareOptions)o;\n+    CompareOptions compareOptions = (CompareOptions) o;\n     return\n         Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n         Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/44/CompareOptions.java\nindex 6d94354c25..7ae940ccfd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/44/CompareOptions.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/44/CompareOptions.java\n@@ -296,7 +296,8 @@ public class CompareOptions {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    CompareOptions compareOptions = (CompareOptions)o;\n+    CompareOptions compareOptions = (CompareOptions\n+) o;\n     return\n         Objects.equals(this.ignoreCaseChanges, compareOptions.ignoreCaseChanges) &&\n         Objects.equals(this.ignoreComments, compareOptions.ignoreComments) &&\n",
            "diff_size": 2
        }
    ]
}