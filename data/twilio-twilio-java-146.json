{
    "error_id": "146",
    "information": {
        "errors": [
            {
                "line": "160",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/146/RegulationReader.java\nindex b7cb3baa95..972645bbc7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/146/RegulationReader.java\n@@ -157,7 +157,7 @@ public class RegulationReader extends Reader<Regulation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/146/RegulationReader.java\nindex b7cb3baa95..616c4fe164 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/146/RegulationReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.numbers.v2.regulatorycompliance;\n@@ -157,7 +157,7 @@ public class RegulationReader extends Reader<Regulation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/146/RegulationReader.java\nindex b7cb3baa95..fc29aadb1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/146/RegulationReader.java\n@@ -31,6 +31,8 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param endUserType The type of End User of the Regulation resource\n      * @return this\n      */\n+\n+\n     public RegulationReader setEndUserType(final Regulation.EndUserType endUserType) {\n         this.endUserType = endUserType;\n         return this;\n@@ -42,6 +44,8 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param isoCountry The ISO country code of the phone number's country\n      * @return this\n      */\n+\n+\n     public RegulationReader setIsoCountry(final String isoCountry) {\n         this.isoCountry = isoCountry;\n         return this;\n@@ -53,6 +57,8 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param numberType The type of phone number being regulated\n      * @return this\n      */\n+\n+\n     public RegulationReader setNumberType(final String numberType) {\n         this.numberType = numberType;\n         return this;\n@@ -64,6 +70,8 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Regulation ResourceSet\n      */\n+\n+\n     @Override\n     public ResourceSet<Regulation> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -75,6 +83,8 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Regulation ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<Regulation> firstPage(final TwilioRestClient client) {\n@@ -82,7 +92,7 @@ public class RegulationReader extends Reader<Regulation> {\n             HttpMethod.GET,\n             Domains.NUMBERS.toString(),\n             \"/v2/RegulatoryCompliance/Regulations\"\n-        );\n+                          );\n \n         addQueryParams(request);\n         return pageForRequest(client, request);\n@@ -95,14 +105,13 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Regulation ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<Regulation> getPage(final String targetUrl, final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+    public Page<Regulation> getPage(final String targetUrl,\n+                                    final TwilioRestClient client) {\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -113,13 +122,12 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n+\n     @Override\n     public Page<Regulation> nextPage(final Page<Regulation> page,\n                                      final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(Domains.NUMBERS.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getNextPageUrl(Domains.NUMBERS.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -130,13 +138,12 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n+\n     @Override\n     public Page<Regulation> previousPage(final Page<Regulation> page,\n                                          final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(Domains.NUMBERS.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getPreviousPageUrl(Domains.NUMBERS.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -147,9 +154,11 @@ public class RegulationReader extends Reader<Regulation> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<Regulation> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<Regulation> pageForRequest(final TwilioRestClient client,\n+                                            final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"Regulation read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {\n@@ -157,15 +166,11 @@ public class RegulationReader extends Reader<Regulation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n-        return Page.fromJson(\n-            \"results\",\n-            response.getContent(),\n-            Regulation.class,\n-            client.getObjectMapper()\n-        );\n+        return Page.fromJson(\"results\", response.getContent(), Regulation.class, client.getObjectMapper());\n     }\n \n     /**\n@@ -173,6 +178,8 @@ public class RegulationReader extends Reader<Regulation> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (endUserType != null) {\n             request.addQueryParam(\"EndUserType\", endUserType.toString());\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/146/RegulationReader.java\nindex b7cb3baa95..972645bbc7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/146/RegulationReader.java\n@@ -157,7 +157,7 @@ public class RegulationReader extends Reader<Regulation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/146/RegulationReader.java\nindex b7cb3baa95..4d81b6397e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/146/RegulationReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/146/RegulationReader.java\n@@ -157,7 +157,8 @@ public class RegulationReader extends Reader<Regulation> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ]
}