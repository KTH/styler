{
    "error_id": "451",
    "information": {
        "errors": [
            {
                "line": "208",
                "column": "41",
                "severity": "warning",
                "message": "';' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
            }
        ]
    },
    "source_code": "        int newPageId = index.getPageStore().allocatePage();\n        PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n        for (; splitPoint < entryCount; ) {\n            p2.addRow(getRow(splitPoint), false);\n            removeRow(splitPoint);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/451/PageBtreeLeaf.java\nindex 6a92071f14..95b6928f1f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/451/PageBtreeLeaf.java\n@@ -205,7 +205,7 @@ public class PageBtreeLeaf extends PageBtree {\n     PageBtree split(int splitPoint) {\n         int newPageId = index.getPageStore().allocatePage();\n         PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n+        for (; splitPoint < entryCount;) {\n             p2.addRow(getRow(splitPoint), false);\n             removeRow(splitPoint);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "210",
                    "column": "37",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/451/PageBtreeLeaf.java\nindex 6a92071f14..8dd2d97847 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/451/PageBtreeLeaf.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.Arrays;\n@@ -30,374 +31,377 @@ import org.h2.store.PageStore;\n  */\n public class PageBtreeLeaf extends PageBtree {\n \n-    private static final int OFFSET_LENGTH = 2;\n-\n-    private final boolean optimizeUpdate;\n-    private boolean writtenData;\n-\n-    private PageBtreeLeaf(PageBtreeIndex index, int pageId, Data data) {\n-        super(index, pageId, data);\n-        this.optimizeUpdate = index.getDatabase().getSettings().optimizeUpdate;\n+  private static final int OFFSET_LENGTH = 2;\n+\n+  private final boolean optimizeUpdate;\n+  private boolean writtenData;\n+\n+  private PageBtreeLeaf(PageBtreeIndex index, int pageId, Data data) {\n+    super(index, pageId, data);\n+    this.optimizeUpdate = index.getDatabase().getSettings().optimizeUpdate;\n+  }\n+\n+  /**\n+   * Read a b-tree leaf page.\n+   *\n+   * @param index  the index\n+   * @param data   the data\n+   * @param pageId the page id\n+   * @return the page\n+   */\n+  public static Page read(PageBtreeIndex index, Data data, int pageId) {\n+    PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, data);\n+    p.read();\n+    return p;\n+  }\n+\n+  /**\n+   * Create a new page.\n+   *\n+   * @param index        the index\n+   * @param pageId       the page id\n+   * @param parentPageId the parent\n+   * @return the page\n+   */\n+  static PageBtreeLeaf create(PageBtreeIndex index, int pageId,\n+                              int parentPageId) {\n+    PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, index.getPageStore()\n+        .createData());\n+    index.getPageStore().logUndo(p, null);\n+    p.rows = SearchRow.EMPTY_ARRAY;\n+    p.parentPageId = parentPageId;\n+    p.writeHead();\n+    p.start = p.data.length();\n+    return p;\n+  }\n+\n+  private void read() {\n+    data.reset();\n+    int type = data.readByte();\n+    data.readShortInt();\n+    this.parentPageId = data.readInt();\n+    onlyPosition = (type & Page.FLAG_LAST) == 0;\n+    int indexId = data.readVarInt();\n+    if (indexId != index.getId()) {\n+      throw DbException.get(ErrorCode.FILE_CORRUPTED_1,\n+          \"page:\" + getPos() + \" expected index:\" + index.getId() +\n+              \"got:\" + indexId);\n     }\n-\n-    /**\n-     * Read a b-tree leaf page.\n-     *\n-     * @param index the index\n-     * @param data the data\n-     * @param pageId the page id\n-     * @return the page\n-     */\n-    public static Page read(PageBtreeIndex index, Data data, int pageId) {\n-        PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, data);\n-        p.read();\n-        return p;\n+    entryCount = data.readShortInt();\n+    offsets = new int[entryCount];\n+    rows = new SearchRow[entryCount];\n+    for (int i = 0; i < entryCount; i++) {\n+      offsets[i] = data.readShortInt();\n     }\n-\n-    /**\n-     * Create a new page.\n-     *\n-     * @param index the index\n-     * @param pageId the page id\n-     * @param parentPageId the parent\n-     * @return the page\n-     */\n-    static PageBtreeLeaf create(PageBtreeIndex index, int pageId,\n-            int parentPageId) {\n-        PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, index.getPageStore()\n-                .createData());\n-        index.getPageStore().logUndo(p, null);\n-        p.rows = SearchRow.EMPTY_ARRAY;\n-        p.parentPageId = parentPageId;\n-        p.writeHead();\n-        p.start = p.data.length();\n-        return p;\n-    }\n-\n-    private void read() {\n-        data.reset();\n-        int type = data.readByte();\n-        data.readShortInt();\n-        this.parentPageId = data.readInt();\n-        onlyPosition = (type & Page.FLAG_LAST) == 0;\n-        int indexId = data.readVarInt();\n-        if (indexId != index.getId()) {\n-            throw DbException.get(ErrorCode.FILE_CORRUPTED_1,\n-                    \"page:\" + getPos() + \" expected index:\" + index.getId() +\n-                    \"got:\" + indexId);\n+    start = data.length();\n+    written = true;\n+    writtenData = true;\n+  }\n+\n+  @Override\n+  int addRowTry(SearchRow row) {\n+    int x = addRow(row, true);\n+    memoryChange();\n+    return x;\n+  }\n+\n+  private int addRow(SearchRow row, boolean tryOnly) {\n+    int rowLength = index.getRowSize(data, row, onlyPosition);\n+    int pageSize = index.getPageStore().getPageSize();\n+    int last = entryCount == 0 ? pageSize : offsets[entryCount - 1];\n+    if (last - rowLength < start + OFFSET_LENGTH) {\n+      if (tryOnly && entryCount > 1) {\n+        int x = find(row, false, true, true);\n+        if (entryCount < 5) {\n+          // required, otherwise the index doesn't work correctly\n+          return entryCount / 2;\n         }\n-        entryCount = data.readShortInt();\n-        offsets = new int[entryCount];\n-        rows = new SearchRow[entryCount];\n-        for (int i = 0; i < entryCount; i++) {\n-            offsets[i] = data.readShortInt();\n-        }\n-        start = data.length();\n-        written = true;\n-        writtenData = true;\n+        // split near the insertion point to better fill pages\n+        // split in half would be:\n+        // return entryCount / 2;\n+        int third = entryCount / 3;\n+        return x < third ? third : x >= 2 * third ? 2 * third : x;\n+      }\n+      readAllRows();\n+      writtenData = false;\n+      onlyPosition = true;\n+      // change the offsets (now storing only positions)\n+      int o = pageSize;\n+      for (int i = 0; i < entryCount; i++) {\n+        o -= index.getRowSize(data, getRow(i), true);\n+        offsets[i] = o;\n+      }\n+      last = entryCount == 0 ? pageSize : offsets[entryCount - 1];\n+      rowLength = index.getRowSize(data, row, true);\n+      if (SysProperties.CHECK && last - rowLength < start + OFFSET_LENGTH) {\n+        throw DbException.throwInternalError();\n+      }\n     }\n-\n-    @Override\n-    int addRowTry(SearchRow row) {\n-        int x = addRow(row, true);\n-        memoryChange();\n-        return x;\n+    index.getPageStore().logUndo(this, data);\n+    if (!optimizeUpdate) {\n+      readAllRows();\n     }\n-\n-    private int addRow(SearchRow row, boolean tryOnly) {\n-        int rowLength = index.getRowSize(data, row, onlyPosition);\n-        int pageSize = index.getPageStore().getPageSize();\n-        int last = entryCount == 0 ? pageSize : offsets[entryCount - 1];\n-        if (last - rowLength < start + OFFSET_LENGTH) {\n-            if (tryOnly && entryCount > 1) {\n-                int x = find(row, false, true, true);\n-                if (entryCount < 5) {\n-                    // required, otherwise the index doesn't work correctly\n-                    return entryCount / 2;\n-                }\n-                // split near the insertion point to better fill pages\n-                // split in half would be:\n-                // return entryCount / 2;\n-                int third = entryCount / 3;\n-                return x < third ? third : x >= 2 * third ? 2 * third : x;\n-            }\n-            readAllRows();\n-            writtenData = false;\n-            onlyPosition = true;\n-            // change the offsets (now storing only positions)\n-            int o = pageSize;\n-            for (int i = 0; i < entryCount; i++) {\n-                o -= index.getRowSize(data, getRow(i), true);\n-                offsets[i] = o;\n-            }\n-            last = entryCount == 0 ? pageSize : offsets[entryCount - 1];\n-            rowLength = index.getRowSize(data, row, true);\n-            if (SysProperties.CHECK && last - rowLength < start + OFFSET_LENGTH) {\n-                throw DbException.throwInternalError();\n-            }\n-        }\n-        index.getPageStore().logUndo(this, data);\n-        if (!optimizeUpdate) {\n-            readAllRows();\n-        }\n-        changeCount = index.getPageStore().getChangeCount();\n-        written = false;\n-        int x;\n-        if (entryCount == 0) {\n-            x = 0;\n-        } else {\n-            x = find(row, false, true, true);\n-        }\n-        start += OFFSET_LENGTH;\n-        int offset = (x == 0 ? pageSize : offsets[x - 1]) - rowLength;\n-        if (optimizeUpdate && writtenData) {\n-            if (entryCount > 0) {\n-                byte[] d = data.getBytes();\n-                int dataStart = offsets[entryCount - 1];\n-                System.arraycopy(d, dataStart, d, dataStart - rowLength,\n-                        offset - dataStart + rowLength);\n-            }\n-            index.writeRow(data, offset, row, onlyPosition);\n-        }\n-        offsets = insert(offsets, entryCount, x, offset);\n-        add(offsets, x + 1, entryCount + 1, -rowLength);\n-        rows = insert(rows, entryCount, x, row);\n-        entryCount++;\n-        index.getPageStore().update(this);\n-        return -1;\n+    changeCount = index.getPageStore().getChangeCount();\n+    written = false;\n+    int x;\n+    if (entryCount == 0) {\n+      x = 0;\n+    } else {\n+      x = find(row, false, true, true);\n     }\n-\n-    private void removeRow(int at) {\n-        if (!optimizeUpdate) {\n-            readAllRows();\n-        }\n-        index.getPageStore().logUndo(this, data);\n-        entryCount--;\n-        written = false;\n-        changeCount = index.getPageStore().getChangeCount();\n-        if (entryCount <= 0) {\n-            DbException.throwInternalError(\"\" + entryCount);\n-        }\n-        int startNext = at > 0 ? offsets[at - 1] : index.getPageStore().getPageSize();\n-        int rowLength = startNext - offsets[at];\n-        start -= OFFSET_LENGTH;\n-\n-        if (optimizeUpdate) {\n-            if (writtenData) {\n-                byte[] d = data.getBytes();\n-                int dataStart = offsets[entryCount];\n-                System.arraycopy(d, dataStart, d,\n-                        dataStart + rowLength, offsets[at] - dataStart);\n-                Arrays.fill(d, dataStart, dataStart + rowLength, (byte) 0);\n-            }\n-        }\n-\n-        offsets = remove(offsets, entryCount + 1, at);\n-        add(offsets, at, entryCount, rowLength);\n-        rows = remove(rows, entryCount + 1, at);\n+    start += OFFSET_LENGTH;\n+    int offset = (x == 0 ? pageSize : offsets[x - 1]) - rowLength;\n+    if (optimizeUpdate && writtenData) {\n+      if (entryCount > 0) {\n+        byte[] d = data.getBytes();\n+        int dataStart = offsets[entryCount - 1];\n+        System.arraycopy(d, dataStart, d, dataStart - rowLength,\n+            offset - dataStart + rowLength);\n+      }\n+      index.writeRow(data, offset, row, onlyPosition);\n     }\n-\n-    int getEntryCount() {\n-        return entryCount;\n+    offsets = insert(offsets, entryCount, x, offset);\n+    add(offsets, x + 1, entryCount + 1, -rowLength);\n+    rows = insert(rows, entryCount, x, row);\n+    entryCount++;\n+    index.getPageStore().update(this);\n+    return -1;\n+  }\n+\n+  private void removeRow(int at) {\n+    if (!optimizeUpdate) {\n+      readAllRows();\n     }\n-\n-    @Override\n-    PageBtree split(int splitPoint) {\n-        int newPageId = index.getPageStore().allocatePage();\n-        PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n-            p2.addRow(getRow(splitPoint), false);\n-            removeRow(splitPoint);\n-        }\n-        memoryChange();\n-        p2.memoryChange();\n-        return p2;\n+    index.getPageStore().logUndo(this, data);\n+    entryCount--;\n+    written = false;\n+    changeCount = index.getPageStore().getChangeCount();\n+    if (entryCount <= 0) {\n+      DbException.throwInternalError(\"\" + entryCount);\n     }\n-\n-    @Override\n-    PageBtreeLeaf getFirstLeaf() {\n-        return this;\n+    int startNext =\n+        at > 0 ? offsets[at - 1] : index.getPageStore().getPageSize();\n+    int rowLength = startNext - offsets[at];\n+    start -= OFFSET_LENGTH;\n+\n+    if (optimizeUpdate) {\n+      if (writtenData) {\n+        byte[] d = data.getBytes();\n+        int dataStart = offsets[entryCount];\n+        System.arraycopy(d, dataStart, d,\n+            dataStart + rowLength, offsets[at] - dataStart);\n+        Arrays.fill(d, dataStart, dataStart + rowLength, (byte) 0);\n+      }\n     }\n \n-    @Override\n-    PageBtreeLeaf getLastLeaf() {\n-        return this;\n+    offsets = remove(offsets, entryCount + 1, at);\n+    add(offsets, at, entryCount, rowLength);\n+    rows = remove(rows, entryCount + 1, at);\n+  }\n+\n+  int getEntryCount() {\n+    return entryCount;\n+  }\n+\n+  @Override\n+  PageBtree split(int splitPoint) {\n+    int newPageId = index.getPageStore().allocatePage();\n+    PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n+    for (; splitPoint < entryCount; ) {\n+      p2.addRow(getRow(splitPoint), false);\n+      removeRow(splitPoint);\n     }\n-\n-    @Override\n-    SearchRow remove(SearchRow row) {\n-        int at = find(row, false, false, true);\n-        SearchRow delete = getRow(at);\n-        if (index.compareRows(row, delete) != 0 || delete.getKey() != row.getKey()) {\n-            throw DbException.get(ErrorCode.ROW_NOT_FOUND_WHEN_DELETING_1,\n-                    index.getSQL() + \": \" + row);\n-        }\n-        index.getPageStore().logUndo(this, data);\n-        if (entryCount == 1) {\n-            // the page is now empty\n-            return row;\n-        }\n-        removeRow(at);\n-        memoryChange();\n-        index.getPageStore().update(this);\n-        if (at == entryCount) {\n-            // the last row changed\n-            return getRow(at - 1);\n-        }\n-        // the last row didn't change\n-        return null;\n+    memoryChange();\n+    p2.memoryChange();\n+    return p2;\n+  }\n+\n+  @Override\n+  PageBtreeLeaf getFirstLeaf() {\n+    return this;\n+  }\n+\n+  @Override\n+  PageBtreeLeaf getLastLeaf() {\n+    return this;\n+  }\n+\n+  @Override\n+  SearchRow remove(SearchRow row) {\n+    int at = find(row, false, false, true);\n+    SearchRow delete = getRow(at);\n+    if (index.compareRows(row, delete) != 0 ||\n+        delete.getKey() != row.getKey()) {\n+      throw DbException.get(ErrorCode.ROW_NOT_FOUND_WHEN_DELETING_1,\n+          index.getSQL() + \": \" + row);\n     }\n-\n-    @Override\n-    void freeRecursive() {\n-        index.getPageStore().logUndo(this, data);\n-        index.getPageStore().free(getPos());\n+    index.getPageStore().logUndo(this, data);\n+    if (entryCount == 1) {\n+      // the page is now empty\n+      return row;\n     }\n-\n-    @Override\n-    int getRowCount() {\n-        return entryCount;\n+    removeRow(at);\n+    memoryChange();\n+    index.getPageStore().update(this);\n+    if (at == entryCount) {\n+      // the last row changed\n+      return getRow(at - 1);\n     }\n-\n-    @Override\n-    void setRowCountStored(int rowCount) {\n-        // ignore\n+    // the last row didn't change\n+    return null;\n+  }\n+\n+  @Override\n+  void freeRecursive() {\n+    index.getPageStore().logUndo(this, data);\n+    index.getPageStore().free(getPos());\n+  }\n+\n+  @Override\n+  int getRowCount() {\n+    return entryCount;\n+  }\n+\n+  @Override\n+  void setRowCountStored(int rowCount) {\n+    // ignore\n+  }\n+\n+  @Override\n+  public void write() {\n+    writeData();\n+    index.getPageStore().writePage(getPos(), data);\n+  }\n+\n+  private void writeHead() {\n+    data.reset();\n+    data.writeByte((byte) (Page.TYPE_BTREE_LEAF |\n+        (onlyPosition ? 0 : Page.FLAG_LAST)));\n+    data.writeShortInt(0);\n+    data.writeInt(parentPageId);\n+    data.writeVarInt(index.getId());\n+    data.writeShortInt(entryCount);\n+  }\n+\n+  private void writeData() {\n+    if (written) {\n+      return;\n     }\n-\n-    @Override\n-    public void write() {\n-        writeData();\n-        index.getPageStore().writePage(getPos(), data);\n+    if (!optimizeUpdate) {\n+      readAllRows();\n     }\n-\n-    private void writeHead() {\n-        data.reset();\n-        data.writeByte((byte) (Page.TYPE_BTREE_LEAF |\n-                (onlyPosition ? 0 : Page.FLAG_LAST)));\n-        data.writeShortInt(0);\n-        data.writeInt(parentPageId);\n-        data.writeVarInt(index.getId());\n-        data.writeShortInt(entryCount);\n+    writeHead();\n+    for (int i = 0; i < entryCount; i++) {\n+      data.writeShortInt(offsets[i]);\n     }\n-\n-    private void writeData() {\n-        if (written) {\n-            return;\n-        }\n-        if (!optimizeUpdate) {\n-            readAllRows();\n-        }\n-        writeHead();\n-        for (int i = 0; i < entryCount; i++) {\n-            data.writeShortInt(offsets[i]);\n-        }\n-        if (!writtenData || !optimizeUpdate) {\n-            for (int i = 0; i < entryCount; i++) {\n-                index.writeRow(data, offsets[i], rows[i], onlyPosition);\n-            }\n-            writtenData = true;\n-        }\n-        written = true;\n-        memoryChange();\n+    if (!writtenData || !optimizeUpdate) {\n+      for (int i = 0; i < entryCount; i++) {\n+        index.writeRow(data, offsets[i], rows[i], onlyPosition);\n+      }\n+      writtenData = true;\n     }\n-\n-    @Override\n-    void find(PageBtreeCursor cursor, SearchRow first, boolean bigger) {\n-        int i = find(first, bigger, false, false);\n-        if (i > entryCount) {\n-            if (parentPageId == PageBtree.ROOT) {\n-                return;\n-            }\n-            PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n-            next.find(cursor, first, bigger);\n-            return;\n-        }\n-        cursor.setCurrent(this, i);\n+    written = true;\n+    memoryChange();\n+  }\n+\n+  @Override\n+  void find(PageBtreeCursor cursor, SearchRow first, boolean bigger) {\n+    int i = find(first, bigger, false, false);\n+    if (i > entryCount) {\n+      if (parentPageId == PageBtree.ROOT) {\n+        return;\n+      }\n+      PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n+      next.find(cursor, first, bigger);\n+      return;\n     }\n-\n-    @Override\n-    void last(PageBtreeCursor cursor) {\n-        cursor.setCurrent(this, entryCount - 1);\n-    }\n-\n-    @Override\n-    void remapChildren() {\n-        // nothing to do\n-    }\n-\n-    /**\n-     * Set the cursor to the first row of the next page.\n-     *\n-     * @param cursor the cursor\n-     */\n-    void nextPage(PageBtreeCursor cursor) {\n-        if (parentPageId == PageBtree.ROOT) {\n-            cursor.setCurrent(null, 0);\n-            return;\n-        }\n-        PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n-        next.nextPage(cursor, getPos());\n+    cursor.setCurrent(this, i);\n+  }\n+\n+  @Override\n+  void last(PageBtreeCursor cursor) {\n+    cursor.setCurrent(this, entryCount - 1);\n+  }\n+\n+  @Override\n+  void remapChildren() {\n+    // nothing to do\n+  }\n+\n+  /**\n+   * Set the cursor to the first row of the next page.\n+   *\n+   * @param cursor the cursor\n+   */\n+  void nextPage(PageBtreeCursor cursor) {\n+    if (parentPageId == PageBtree.ROOT) {\n+      cursor.setCurrent(null, 0);\n+      return;\n     }\n-\n-    /**\n-     * Set the cursor to the last row of the previous page.\n-     *\n-     * @param cursor the cursor\n-     */\n-    void previousPage(PageBtreeCursor cursor) {\n-        if (parentPageId == PageBtree.ROOT) {\n-            cursor.setCurrent(null, 0);\n-            return;\n-        }\n-        PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n-        next.previousPage(cursor, getPos());\n+    PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n+    next.nextPage(cursor, getPos());\n+  }\n+\n+  /**\n+   * Set the cursor to the last row of the previous page.\n+   *\n+   * @param cursor the cursor\n+   */\n+  void previousPage(PageBtreeCursor cursor) {\n+    if (parentPageId == PageBtree.ROOT) {\n+      cursor.setCurrent(null, 0);\n+      return;\n     }\n-\n-    @Override\n-    public String toString() {\n-        return \"page[\" + getPos() + \"] b-tree leaf table:\" +\n-                index.getId() + \" entries:\" + entryCount;\n+    PageBtreeNode next = (PageBtreeNode) index.getPage(parentPageId);\n+    next.previousPage(cursor, getPos());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"page[\" + getPos() + \"] b-tree leaf table:\" +\n+        index.getId() + \" entries:\" + entryCount;\n+  }\n+\n+  @Override\n+  public void moveTo(Session session, int newPos) {\n+    PageStore store = index.getPageStore();\n+    readAllRows();\n+    PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPos, parentPageId);\n+    store.logUndo(this, data);\n+    store.logUndo(p2, null);\n+    p2.rows = rows;\n+    p2.entryCount = entryCount;\n+    p2.offsets = offsets;\n+    p2.onlyPosition = onlyPosition;\n+    p2.parentPageId = parentPageId;\n+    p2.start = start;\n+    store.update(p2);\n+    if (parentPageId == ROOT) {\n+      index.setRootPageId(session, newPos);\n+    } else {\n+      PageBtreeNode p = (PageBtreeNode) store.getPage(parentPageId);\n+      p.moveChild(getPos(), newPos);\n     }\n+    store.free(getPos());\n+  }\n \n-    @Override\n-    public void moveTo(Session session, int newPos) {\n-        PageStore store = index.getPageStore();\n-        readAllRows();\n-        PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPos, parentPageId);\n-        store.logUndo(this, data);\n-        store.logUndo(p2, null);\n-        p2.rows = rows;\n-        p2.entryCount = entryCount;\n-        p2.offsets = offsets;\n-        p2.onlyPosition = onlyPosition;\n-        p2.parentPageId = parentPageId;\n-        p2.start = start;\n-        store.update(p2);\n-        if (parentPageId == ROOT) {\n-            index.setRootPageId(session, newPos);\n-        } else {\n-            PageBtreeNode p = (PageBtreeNode) store.getPage(parentPageId);\n-            p.moveChild(getPos(), newPos);\n-        }\n-        store.free(getPos());\n+  @Override\n+  protected void memoryChange() {\n+    if (!PageBtreeIndex.isMemoryChangeRequired()) {\n+      return;\n     }\n-\n-    @Override\n-    protected void memoryChange() {\n-        if (!PageBtreeIndex.isMemoryChangeRequired()) {\n-            return;\n-        }\n-        int memory = Constants.MEMORY_PAGE_BTREE + index.getPageStore().getPageSize();\n-        if (rows != null) {\n-            memory += getEntryCount() * (4 + Constants.MEMORY_POINTER);\n-            for (int i = 0; i < entryCount; i++) {\n-                SearchRow r = rows[i];\n-                if (r != null) {\n-                    memory += r.getMemory();\n-                }\n-            }\n+    int memory =\n+        Constants.MEMORY_PAGE_BTREE + index.getPageStore().getPageSize();\n+    if (rows != null) {\n+      memory += getEntryCount() * (4 + Constants.MEMORY_POINTER);\n+      for (int i = 0; i < entryCount; i++) {\n+        SearchRow r = rows[i];\n+        if (r != null) {\n+          memory += r.getMemory();\n         }\n-        index.memoryChange(memory >> 2);\n+      }\n     }\n+    index.memoryChange(memory >> 2);\n+  }\n \n }\n",
            "diff_size": 497
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/451/PageBtreeLeaf.java\nindex 6a92071f14..af79b2e963 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/451/PageBtreeLeaf.java\n@@ -205,7 +205,7 @@ public class PageBtreeLeaf extends PageBtree {\n     PageBtree split(int splitPoint) {\n         int newPageId = index.getPageStore().allocatePage();\n         PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n+        for (; splitPoint < entryCount;) {\n             p2.addRow(getRow(splitPoint), false);\n             removeRow(splitPoint);\n         }\n@@ -400,4 +400,4 @@ public class PageBtreeLeaf extends PageBtree {\n         index.memoryChange(memory >> 2);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/451/PageBtreeLeaf.java\nindex 6a92071f14..6d1b682bf6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/451/PageBtreeLeaf.java\n@@ -28,10 +28,11 @@ import org.h2.store.PageStore;\n  * <li>data (key: varLong, value,...)</li>\n  * </ul>\n  */\n+\n+\n public class PageBtreeLeaf extends PageBtree {\n \n     private static final int OFFSET_LENGTH = 2;\n-\n     private final boolean optimizeUpdate;\n     private boolean writtenData;\n \n@@ -48,6 +49,8 @@ public class PageBtreeLeaf extends PageBtree {\n      * @param pageId the page id\n      * @return the page\n      */\n+\n+\n     public static Page read(PageBtreeIndex index, Data data, int pageId) {\n         PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, data);\n         p.read();\n@@ -62,10 +65,10 @@ public class PageBtreeLeaf extends PageBtree {\n      * @param parentPageId the parent\n      * @return the page\n      */\n-    static PageBtreeLeaf create(PageBtreeIndex index, int pageId,\n-            int parentPageId) {\n-        PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, index.getPageStore()\n-                .createData());\n+\n+\n+    static PageBtreeLeaf create(PageBtreeIndex index, int pageId, int parentPageId) {\n+        PageBtreeLeaf p = new PageBtreeLeaf(index, pageId, index.getPageStore().createData());\n         index.getPageStore().logUndo(p, null);\n         p.rows = SearchRow.EMPTY_ARRAY;\n         p.parentPageId = parentPageId;\n@@ -82,9 +85,8 @@ public class PageBtreeLeaf extends PageBtree {\n         onlyPosition = (type & Page.FLAG_LAST) == 0;\n         int indexId = data.readVarInt();\n         if (indexId != index.getId()) {\n-            throw DbException.get(ErrorCode.FILE_CORRUPTED_1,\n-                    \"page:\" + getPos() + \" expected index:\" + index.getId() +\n-                    \"got:\" + indexId);\n+            throw DbException.get(ErrorCode.FILE_CORRUPTED_1, \"page:\" + getPos() + \" expected index:\"\n+            + index.getId() + \"got:\" + indexId);\n         }\n         entryCount = data.readShortInt();\n         offsets = new int[entryCount];\n@@ -154,8 +156,11 @@ public class PageBtreeLeaf extends PageBtree {\n             if (entryCount > 0) {\n                 byte[] d = data.getBytes();\n                 int dataStart = offsets[entryCount - 1];\n-                System.arraycopy(d, dataStart, d, dataStart - rowLength,\n-                        offset - dataStart + rowLength);\n+                System.arraycopy(d,\n+dataStart,\n+d,\n+dataStart - rowLength,\n+offset - dataStart + rowLength);\n             }\n             index.writeRow(data, offset, row, onlyPosition);\n         }\n@@ -181,17 +186,14 @@ public class PageBtreeLeaf extends PageBtree {\n         int startNext = at > 0 ? offsets[at - 1] : index.getPageStore().getPageSize();\n         int rowLength = startNext - offsets[at];\n         start -= OFFSET_LENGTH;\n-\n         if (optimizeUpdate) {\n             if (writtenData) {\n                 byte[] d = data.getBytes();\n                 int dataStart = offsets[entryCount];\n-                System.arraycopy(d, dataStart, d,\n-                        dataStart + rowLength, offsets[at] - dataStart);\n+                System.arraycopy(d, dataStart, d, dataStart + rowLength, offsets[at] - dataStart);\n                 Arrays.fill(d, dataStart, dataStart + rowLength, (byte) 0);\n             }\n         }\n-\n         offsets = remove(offsets, entryCount + 1, at);\n         add(offsets, at, entryCount, rowLength);\n         rows = remove(rows, entryCount + 1, at);\n@@ -205,7 +207,7 @@ public class PageBtreeLeaf extends PageBtree {\n     PageBtree split(int splitPoint) {\n         int newPageId = index.getPageStore().allocatePage();\n         PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n+        for (; splitPoint < entryCount;) {\n             p2.addRow(getRow(splitPoint), false);\n             removeRow(splitPoint);\n         }\n@@ -230,7 +232,7 @@ public class PageBtreeLeaf extends PageBtree {\n         SearchRow delete = getRow(at);\n         if (index.compareRows(row, delete) != 0 || delete.getKey() != row.getKey()) {\n             throw DbException.get(ErrorCode.ROW_NOT_FOUND_WHEN_DELETING_1,\n-                    index.getSQL() + \": \" + row);\n+                                  index.getSQL() + \": \" + row);\n         }\n         index.getPageStore().logUndo(this, data);\n         if (entryCount == 1) {\n@@ -262,6 +264,7 @@ public class PageBtreeLeaf extends PageBtree {\n     @Override\n     void setRowCountStored(int rowCount) {\n         // ignore\n+\n     }\n \n     @Override\n@@ -272,8 +275,7 @@ public class PageBtreeLeaf extends PageBtree {\n \n     private void writeHead() {\n         data.reset();\n-        data.writeByte((byte) (Page.TYPE_BTREE_LEAF |\n-                (onlyPosition ? 0 : Page.FLAG_LAST)));\n+        data.writeByte((byte) (Page.TYPE_BTREE_LEAF | (onlyPosition ? 0 : Page.FLAG_LAST)));\n         data.writeShortInt(0);\n         data.writeInt(parentPageId);\n         data.writeVarInt(index.getId());\n@@ -323,6 +325,7 @@ public class PageBtreeLeaf extends PageBtree {\n     @Override\n     void remapChildren() {\n         // nothing to do\n+\n     }\n \n     /**\n@@ -330,6 +333,8 @@ public class PageBtreeLeaf extends PageBtree {\n      *\n      * @param cursor the cursor\n      */\n+\n+\n     void nextPage(PageBtreeCursor cursor) {\n         if (parentPageId == PageBtree.ROOT) {\n             cursor.setCurrent(null, 0);\n@@ -344,6 +349,8 @@ public class PageBtreeLeaf extends PageBtree {\n      *\n      * @param cursor the cursor\n      */\n+\n+\n     void previousPage(PageBtreeCursor cursor) {\n         if (parentPageId == PageBtree.ROOT) {\n             cursor.setCurrent(null, 0);\n@@ -355,8 +362,8 @@ public class PageBtreeLeaf extends PageBtree {\n \n     @Override\n     public String toString() {\n-        return \"page[\" + getPos() + \"] b-tree leaf table:\" +\n-                index.getId() + \" entries:\" + entryCount;\n+        return \"page[\" + getPos() + \"] b-tree leaf table:\"\n+        + index.getId() + \" entries:\" + entryCount;\n     }\n \n     @Override\n@@ -400,4 +407,4 @@ public class PageBtreeLeaf extends PageBtree {\n         index.memoryChange(memory >> 2);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/451/PageBtreeLeaf.java\nindex 6a92071f14..95b6928f1f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/451/PageBtreeLeaf.java\n@@ -205,7 +205,7 @@ public class PageBtreeLeaf extends PageBtree {\n     PageBtree split(int splitPoint) {\n         int newPageId = index.getPageStore().allocatePage();\n         PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n+        for (; splitPoint < entryCount;) {\n             p2.addRow(getRow(splitPoint), false);\n             removeRow(splitPoint);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "208",
                    "column": "41",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/451/PageBtreeLeaf.java\nindex 6a92071f14..83501fff96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/451/PageBtreeLeaf.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/451/PageBtreeLeaf.java\n@@ -205,7 +205,7 @@ public class PageBtreeLeaf extends PageBtree {\n     PageBtree split(int splitPoint) {\n         int newPageId = index.getPageStore().allocatePage();\n         PageBtreeLeaf p2 = PageBtreeLeaf.create(index, newPageId, parentPageId);\n-        for (; splitPoint < entryCount; ) {\n+        for (; splitPoint < entryCount;){\n             p2.addRow(getRow(splitPoint), false);\n             removeRow(splitPoint);\n         }\n",
            "diff_size": 1
        }
    ]
}