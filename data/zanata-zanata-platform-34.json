{
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "115",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public static class DateUnitAndFigure {\n        private String unit; // s(second) m(minute) or d(day)\n        private int figure;\n\n        public String getUnit() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/34/DateUtil.java\nindex 601a86e8d2..d7f64bf18d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/34/DateUtil.java\n@@ -1,6 +1,7 @@\n /**\n  *\n  */\n+\n package org.zanata.util;\n \n import java.util.Date;\n@@ -27,11 +28,11 @@ public class DateUtil {\n     // Period Formatters are thread safe and immutable according to joda time\n     // docs\n     private static final PeriodFormatter TIME_REMAINING_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n+        new PeriodFormatterBuilder().appendDays()\n+            .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n+            .appendHours().appendSuffix(\" hour\", \" hours\")\n+            .appendSeparator(\", \").appendMinutes()\n+            .appendSuffix(\" min\", \" mins\").toFormatter();\n \n     /**\n      * Format date to dd/MM/yy hh:mm a\n@@ -42,7 +43,7 @@ public class DateUtil {\n     public static String formatShortDate(Date date) {\n         if (date != null) {\n             DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n+                DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -57,7 +58,7 @@ public class DateUtil {\n     public static String formatTime(Date date) {\n         if (date != null) {\n             DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n+                DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -93,10 +94,10 @@ public class DateUtil {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n             return new DateUnitAndFigure(\"seconds\",\n-                    period.toStandardSeconds().getSeconds());\n+                period.toStandardSeconds().getSeconds());\n         } else if (period.toStandardDays().getDays() <= 0) {\n             return new DateUnitAndFigure(\"minutes\",\n-                    period.toStandardMinutes().getMinutes());\n+                period.toStandardMinutes().getMinutes());\n         }\n         return new DateUnitAndFigure(\"days\", period.toStandardDays().getDays());\n     }\n@@ -123,7 +124,7 @@ public class DateUtil {\n             return this.figure;\n         }\n \n-        @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n+        @java.beans.ConstructorProperties({\"unit\", \"figure\"})\n         public DateUnitAndFigure(final String unit, final int figure) {\n             this.unit = unit;\n             this.figure = figure;\n@@ -154,7 +155,7 @@ public class DateUtil {\n      */\n     public static Date getEndOfTheDay(Date actionTime) {\n         DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n-                .withTimeAtStartOfDay().minusMillis(1);\n+            .withTimeAtStartOfDay().minusMillis(1);\n         return endOfTheDay.toDate();\n     }\n \n@@ -166,7 +167,7 @@ public class DateUtil {\n      */\n     public static Date getStartOfWeek(Date actionTime) {\n         DateTime truncateMonth =\n-                new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n+            new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -178,7 +179,7 @@ public class DateUtil {\n      */\n     public static Date getEndOfTheWeek(Date actionTime) {\n         DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n-                .roundCeilingCopy().minusMillis(1);\n+            .roundCeilingCopy().minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -191,7 +192,7 @@ public class DateUtil {\n      */\n     public static Date getStartOfMonth(Date actionTime) {\n         DateTime truncateMonth =\n-                new DateTime(actionTime).monthOfYear().roundFloorCopy();\n+            new DateTime(actionTime).monthOfYear().roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -204,7 +205,7 @@ public class DateUtil {\n      */\n     public static Date getEndOfTheMonth(Date actionTime) {\n         DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n-                .roundCeilingCopy().minusMillis(1);\n+            .roundCeilingCopy().minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -216,7 +217,7 @@ public class DateUtil {\n      * @throws IllegalArgumentException\n      */\n     public static Date getDate(String date, String pattern)\n-            throws IllegalArgumentException {\n+        throws IllegalArgumentException {\n         DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n         return formatter.parseDateTime(date).toDate();\n     }\n@@ -246,6 +247,6 @@ public class DateUtil {\n             return null;\n         }\n         return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n-                .parseDateTime(dateString);\n+            .parseDateTime(dateString);\n     }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/34/DateUtil.java\nindex 601a86e8d2..7f5d0f4081 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/34/DateUtil.java\n@@ -18,20 +18,24 @@ import org.ocpsoft.prettytime.PrettyTime;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n-public class DateUtil {\n \n+\n+public class DateUtil {\n     private static final String DATE_TIME_SHORT_PATTERN = \"dd/MM/yy HH:mm\";\n     private static final String TIME_SHORT_PATTERN = \"hh:mm:ss\";\n     // Used for advanced editor search queries\n     private static final String DATE_SHORT_QUERY_PATTERN = \"yyyy-MM-dd\";\n     // Period Formatters are thread safe and immutable according to joda time\n     // docs\n-    private static final PeriodFormatter TIME_REMAINING_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n+    private static final PeriodFormatter TIME_REMAINING_FORMATTER = new PeriodFormatterBuilder().appendDays()\n+                                                                                                .appendSuffix(\" day\", \" days\")\n+                                                                                                .appendSeparator(\", \")\n+                                                                                                .appendHours()\n+                                                                                                .appendSuffix(\" hour\", \" hours\")\n+                                                                                                .appendSeparator(\", \")\n+                                                                                                .appendMinutes()\n+                                                                                                .appendSuffix(\" min\", \" mins\")\n+                                                                                                .toFormatter();\n \n     /**\n      * Format date to dd/MM/yy hh:mm a\n@@ -39,10 +43,10 @@ public class DateUtil {\n      * @param date\n      * @return\n      */\n+\n     public static String formatShortDate(Date date) {\n         if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n+            DateTimeFormatter fmt = DateTimeFormat.forPattern(DATE_TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -54,10 +58,10 @@ public class DateUtil {\n      * @param date\n      * @return\n      */\n+\n     public static String formatTime(Date date) {\n         if (date != null) {\n-            DateTimeFormatter fmt =\n-                    DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n+            DateTimeFormatter fmt = DateTimeFormat.forPattern(TIME_SHORT_PATTERN);\n             return fmt.print(new DateTime(date));\n         }\n         return null;\n@@ -70,6 +74,7 @@ public class DateUtil {\n      * @param then\n      * @return\n      */\n+\n     public static String getHowLongAgoDescription(Date then) {\n         Locale locale = Locale.getDefault();\n         PrettyTime p = new PrettyTime(locale);\n@@ -92,11 +97,9 @@ public class DateUtil {\n     public static DateUnitAndFigure getUnitAndFigure(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return new DateUnitAndFigure(\"seconds\",\n-                    period.toStandardSeconds().getSeconds());\n+            return new DateUnitAndFigure(\"seconds\", period.toStandardSeconds().getSeconds());\n         } else if (period.toStandardDays().getDays() <= 0) {\n-            return new DateUnitAndFigure(\"minutes\",\n-                    period.toStandardMinutes().getMinutes());\n+            return new DateUnitAndFigure(\"minutes\", period.toStandardMinutes().getMinutes());\n         }\n         return new DateUnitAndFigure(\"days\", period.toStandardDays().getDays());\n     }\n@@ -124,7 +127,8 @@ public class DateUtil {\n         }\n \n         @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n-        public DateUnitAndFigure(final String unit, final int figure) {\n+        public DateUnitAndFigure(final String unit,\n+        final int figure) {\n             this.unit = unit;\n             this.figure = figure;\n         }\n@@ -140,6 +144,7 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfDay(Date actionTime) {\n         DateTime dateTime = new DateTime(actionTime);\n         return dateTime.withTimeAtStartOfDay().toDate();\n@@ -152,9 +157,11 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheDay(Date actionTime) {\n         DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n-                .withTimeAtStartOfDay().minusMillis(1);\n+                                                       .withTimeAtStartOfDay()\n+                                                       .minusMillis(1);\n         return endOfTheDay.toDate();\n     }\n \n@@ -164,9 +171,10 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfWeek(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n+        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n+                                                         .roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -176,9 +184,11 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheWeek(Date actionTime) {\n         DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n-                .roundCeilingCopy().minusMillis(1);\n+                                                         .roundCeilingCopy()\n+                                                         .minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -189,9 +199,10 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getStartOfMonth(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).monthOfYear().roundFloorCopy();\n+        DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n+                                                         .roundFloorCopy();\n         return truncateMonth.toDate();\n     }\n \n@@ -202,9 +213,11 @@ public class DateUtil {\n      * @param actionTime\n      * @return\n      */\n+\n     public static Date getEndOfTheMonth(Date actionTime) {\n         DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n-                .roundCeilingCopy().minusMillis(1);\n+                                                         .roundCeilingCopy()\n+                                                         .minusMillis(1);\n         return truncateMonth.toDate();\n     }\n \n@@ -215,8 +228,8 @@ public class DateUtil {\n      * @param pattern\n      * @throws IllegalArgumentException\n      */\n-    public static Date getDate(String date, String pattern)\n-            throws IllegalArgumentException {\n+\n+    public static Date getDate(String date, String pattern) throws IllegalArgumentException {\n         DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n         return formatter.parseDateTime(date).toDate();\n     }\n@@ -228,6 +241,7 @@ public class DateUtil {\n      * @param to\n      * @param days\n      */\n+\n     public static boolean isDatesInRange(Date from, Date to, int days) {\n         DateTime fromDate = new DateTime(from);\n         DateTime toDate = new DateTime(to);\n@@ -241,11 +255,11 @@ public class DateUtil {\n      * @param dateString in form \"yyyy-mm-dd\" or empty string or null\n      * @return the parsed date or null.\n      */\n+\n     public static DateTime parseQueryDate(String dateString) {\n         if (Strings.isNullOrEmpty(dateString)) {\n             return null;\n         }\n-        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n-                .parseDateTime(dateString);\n+        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN).parseDateTime(dateString);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/34/DateUtil.java\nindex 601a86e8d2..57a48ae0d5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/34/DateUtil.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/34/DateUtil.java\n@@ -111,141 +111,140 @@ public class DateUtil {\n         return date1.compareTo(date2);\n     }\n \n-    public static class DateUnitAndFigure {\n-        private String unit; // s(second) m(minute) or d(day)\n-        private int figure;\n+    public static class DateUnitAndFigure { privateString unit; // s(second) m(minute) or d(day)\n+    private int figure;\n \n-        public String getUnit() {\n-            return this.unit;\n-        }\n+    public String getUnit() {\n+        return this.unit;\n+    }\n \n-        public int getFigure() {\n-            return this.figure;\n-        }\n+    public int getFigure() {\n+        return this.figure;\n+    }\n \n-        @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n-        public DateUnitAndFigure(final String unit, final int figure) {\n-            this.unit = unit;\n-            this.figure = figure;\n-        }\n+    @java.beans.ConstructorProperties({ \"unit\", \"figure\" })\n+    public DateUnitAndFigure(final String unit, final int figure) {\n+        this.unit = unit;\n+        this.figure = figure;\n+    }\n \n-        public DateUnitAndFigure() {\n-        }\n+    public DateUnitAndFigure() {\n     }\n+}\n \n-    /**\n+/**\n      * return start of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns\n      * Tue Mar 25 00:00:00 EST 2014\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getStartOfDay(Date actionTime) {\n-        DateTime dateTime = new DateTime(actionTime);\n-        return dateTime.withTimeAtStartOfDay().toDate();\n-    }\n+public static Date getStartOfDay(Date actionTime) {\n+    DateTime dateTime = new DateTime(actionTime);\n+    return dateTime.withTimeAtStartOfDay().toDate();\n+}\n \n-    /**\n+/**\n      * return end of the day date. e.g Tue Mar 25 12:31:00 EST 2014 returns Tue\n      * Mar 25 23:59:59 EST 2014\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getEndOfTheDay(Date actionTime) {\n-        DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n-                .withTimeAtStartOfDay().minusMillis(1);\n-        return endOfTheDay.toDate();\n-    }\n+public static Date getEndOfTheDay(Date actionTime) {\n+    DateTime endOfTheDay = new DateTime(actionTime).plusDays(1)\n+            .withTimeAtStartOfDay().minusMillis(1);\n+    return endOfTheDay.toDate();\n+}\n \n-    /**\n+/**\n      * return first day of the week date. (Monday being the first day)\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getStartOfWeek(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n-        return truncateMonth.toDate();\n-    }\n+public static Date getStartOfWeek(Date actionTime) {\n+    DateTime truncateMonth =\n+            new DateTime(actionTime).weekOfWeekyear().roundFloorCopy();\n+    return truncateMonth.toDate();\n+}\n \n-    /**\n+/**\n      * return last day of the week date. (Sunday being the last day)\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getEndOfTheWeek(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n-                .roundCeilingCopy().minusMillis(1);\n-        return truncateMonth.toDate();\n-    }\n+public static Date getEndOfTheWeek(Date actionTime) {\n+    DateTime truncateMonth = new DateTime(actionTime).weekOfWeekyear()\n+            .roundCeilingCopy().minusMillis(1);\n+    return truncateMonth.toDate();\n+}\n \n-    /**\n+/**\n      * return first day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n      * returns Tue Mar 1 00:00:00 EST 2014\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getStartOfMonth(Date actionTime) {\n-        DateTime truncateMonth =\n-                new DateTime(actionTime).monthOfYear().roundFloorCopy();\n-        return truncateMonth.toDate();\n-    }\n+public static Date getStartOfMonth(Date actionTime) {\n+    DateTime truncateMonth =\n+            new DateTime(actionTime).monthOfYear().roundFloorCopy();\n+    return truncateMonth.toDate();\n+}\n \n-    /**\n+/**\n      * return last day of the month date. e.g Tue Mar 25 12:31:00 EST 2014\n      * returns Tue Mar 31 23:59:59 EST 2014\n      *\n      * @param actionTime\n      * @return\n      */\n-    public static Date getEndOfTheMonth(Date actionTime) {\n-        DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n-                .roundCeilingCopy().minusMillis(1);\n-        return truncateMonth.toDate();\n-    }\n+public static Date getEndOfTheMonth(Date actionTime) {\n+    DateTime truncateMonth = new DateTime(actionTime).monthOfYear()\n+            .roundCeilingCopy().minusMillis(1);\n+    return truncateMonth.toDate();\n+}\n \n-    /**\n+/**\n      * Convert String to {@link java.util.Date} with given pattern\n      *\n      * @param date\n      * @param pattern\n      * @throws IllegalArgumentException\n      */\n-    public static Date getDate(String date, String pattern)\n-            throws IllegalArgumentException {\n-        DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n-        return formatter.parseDateTime(date).toDate();\n-    }\n+public static Date getDate(String date, String pattern)\n+        throws IllegalArgumentException {\n+    DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);\n+    return formatter.parseDateTime(date).toDate();\n+}\n \n-    /**\n+/**\n      * Check if date difference is within given days.\n      *\n      * @param from\n      * @param to\n      * @param days\n      */\n-    public static boolean isDatesInRange(Date from, Date to, int days) {\n-        DateTime fromDate = new DateTime(from);\n-        DateTime toDate = new DateTime(to);\n-        Days d = Days.daysBetween(fromDate, toDate);\n-        return d.getDays() <= days;\n-    }\n+public static boolean isDatesInRange(Date from, Date to, int days) {\n+    DateTime fromDate = new DateTime(from);\n+    DateTime toDate = new DateTime(to);\n+    Days d = Days.daysBetween(fromDate, toDate);\n+    return d.getDays() <= days;\n+}\n \n-    /**\n+/**\n      * Parse a yyyy-mm-dd string to a date.\n      *\n      * @param dateString in form \"yyyy-mm-dd\" or empty string or null\n      * @return the parsed date or null.\n      */\n-    public static DateTime parseQueryDate(String dateString) {\n-        if (Strings.isNullOrEmpty(dateString)) {\n-            return null;\n-        }\n-        return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n-                .parseDateTime(dateString);\n+public static DateTime parseQueryDate(String dateString) {\n+    if (Strings.isNullOrEmpty(dateString)) {\n+        return null;\n     }\n+    return DateTimeFormat.forPattern(DATE_SHORT_QUERY_PATTERN)\n+            .parseDateTime(dateString);\n+}\n }\n",
            "diff_size": 75
        }
    ]
}