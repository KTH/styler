{
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "62",
                "column": "30",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public boolean hasPages(){\n        return results != null && results.hasCursor();\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/126/PagingResultsIterator.java\nindex 2ec96a856b..55ae615595 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/126/PagingResultsIterator.java\n@@ -59,7 +59,7 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     }\n \n     @Override\n-    public boolean hasPages(){\n+    public boolean hasPages() {\n         return results != null && results.hasCursor();\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "56",
                    "column": "7",
                    "severity": "warning",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/126/PagingResultsIterator.java\nindex 2ec96a856b..fb2a0525cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/126/PagingResultsIterator.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence;\n \n \n@@ -21,110 +22,113 @@ import java.util.Iterator;\n import java.util.List;\n \n \n-/** iterates over a Results object, crossing page boundaries automatically */\n+/**\n+ * iterates over a Results object, crossing page boundaries automatically\n+ */\n public class PagingResultsIterator implements ResultsIterator, Iterable {\n \n-    private Results results;\n-    private Iterator currentPageIterator;\n-    private Results.Level level;\n+  private Results results;\n+  private Iterator currentPageIterator;\n+  private Results.Level level;\n \n \n-    public PagingResultsIterator( Results results ) {\n-        this( results, results.level );\n-    }\n+  public PagingResultsIterator(Results results) {\n+    this(results, results.level);\n+  }\n \n \n-    /**\n-     * @param level overrides the default level from the Results - in case you want to return, say, UUIDs where the\n-     * Query was set for Entities\n-     */\n-    public PagingResultsIterator( Results results, Results.Level level ) {\n-        this.results = results;\n-        this.level = level;\n-        initCurrentPageIterator();\n-    }\n+  /**\n+   * @param level overrides the default level from the Results - in case you want to return, say, UUIDs where the\n+   *              Query was set for Entities\n+   */\n+  public PagingResultsIterator(Results results, Results.Level level) {\n+    this.results = results;\n+    this.level = level;\n+    initCurrentPageIterator();\n+  }\n \n \n-    @Override\n-    public boolean hasNext() {\n-        if ( currentPageIterator != null ) {\n-            if ( currentPageIterator.hasNext() ) {\n-                return true;\n-            }\n-            else {\n-                return loadNextPage();\n-            }\n-        }\n-        return false;\n+  @Override\n+  public boolean hasNext() {\n+    if (currentPageIterator != null) {\n+      if (currentPageIterator.hasNext()) {\n+        return true;\n+      } else {\n+        return loadNextPage();\n+      }\n     }\n-\n-    @Override\n-    public boolean hasPages(){\n-        return results != null && results.hasCursor();\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean hasPages() {\n+    return results != null && results.hasCursor();\n+  }\n+\n+\n+  /**\n+   * @return the next object (type varies according the Results.Level)\n+   */\n+  @Override\n+  public Object next() {\n+    return currentPageIterator.next();\n+  }\n+\n+\n+  /**\n+   * not supported\n+   */\n+  @Override\n+  public void remove() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+\n+  /**\n+   * initialize the iterator for the current page of results.\n+   *\n+   * @return true if the iterator has more results\n+   */\n+  private boolean initCurrentPageIterator() {\n+    List currentPage;\n+    if (results != null) {\n+      switch (level) {\n+        case IDS:\n+          currentPage = results.getIds();\n+          break;\n+        case REFS:\n+          currentPage = results.getRefs();\n+          break;\n+        default:\n+          currentPage = results.getEntities();\n+      }\n+      if (currentPage.size() > 0) {\n+        currentPageIterator = currentPage.iterator();\n+      }\n+    } else {\n+      currentPageIterator = null;\n     }\n-\n-\n-    /** @return the next object (type varies according the Results.Level) */\n-    @Override\n-    public Object next() {\n-        return currentPageIterator.next();\n+    return currentPageIterator != null && currentPageIterator.hasNext();\n+  }\n+\n+\n+  /**\n+   * attempts to load the next page\n+   *\n+   * @return true if loaded there are more results\n+   */\n+  private boolean loadNextPage() {\n+    try {\n+      results = results.getNextPageResults();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n     }\n+    return initCurrentPageIterator();\n+  }\n \n \n-    /** not supported */\n-    @Override\n-    public void remove() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-\n-    /**\n-     * initialize the iterator for the current page of results.\n-     *\n-     * @return true if the iterator has more results\n-     */\n-    private boolean initCurrentPageIterator() {\n-        List currentPage;\n-        if ( results != null ) {\n-            switch ( level ) {\n-                case IDS:\n-                    currentPage = results.getIds();\n-                    break;\n-                case REFS:\n-                    currentPage = results.getRefs();\n-                    break;\n-                default:\n-                    currentPage = results.getEntities();\n-            }\n-            if ( currentPage.size() > 0 ) {\n-                currentPageIterator = currentPage.iterator();\n-            }\n-        }\n-        else {\n-            currentPageIterator = null;\n-        }\n-        return currentPageIterator != null && currentPageIterator.hasNext();\n-    }\n-\n-\n-    /**\n-     * attempts to load the next page\n-     *\n-     * @return true if loaded there are more results\n-     */\n-    private boolean loadNextPage() {\n-        try {\n-            results = results.getNextPageResults();\n-        }\n-        catch ( Exception e ) {\n-            throw new RuntimeException( e );\n-        }\n-        return initCurrentPageIterator();\n-    }\n-\n-\n-    @Override\n-    public Iterator iterator() {\n-        return this;\n-    }\n+  @Override\n+  public Iterator iterator() {\n+    return this;\n+  }\n }\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/126/PagingResultsIterator.java\nindex 2ec96a856b..2aea8456b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/126/PagingResultsIterator.java\n@@ -59,7 +59,7 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     }\n \n     @Override\n-    public boolean hasPages(){\n+    public boolean hasPages() {\n         return results != null && results.hasCursor();\n     }\n \n@@ -127,4 +127,4 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     public Iterator iterator() {\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/126/PagingResultsIterator.java\nindex 2ec96a856b..d82517fc5e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/126/PagingResultsIterator.java\n@@ -22,6 +22,8 @@ import java.util.List;\n \n \n /** iterates over a Results object, crossing page boundaries automatically */\n+\n+\n public class PagingResultsIterator implements ResultsIterator, Iterable {\n \n     private Results results;\n@@ -38,6 +40,8 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n      * @param level overrides the default level from the Results - in case you want to return, say, UUIDs where the\n      * Query was set for Entities\n      */\n+\n+\n     public PagingResultsIterator( Results results, Results.Level level ) {\n         this.results = results;\n         this.level = level;\n@@ -58,13 +62,16 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n         return false;\n     }\n \n+\n     @Override\n-    public boolean hasPages(){\n+    public boolean hasPages() {\n         return results != null && results.hasCursor();\n     }\n \n \n     /** @return the next object (type varies according the Results.Level) */\n+\n+\n     @Override\n     public Object next() {\n         return currentPageIterator.next();\n@@ -72,6 +79,8 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n \n \n     /** not supported */\n+\n+\n     @Override\n     public void remove() {\n         throw new UnsupportedOperationException();\n@@ -83,6 +92,9 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n      *\n      * @return true if the iterator has more results\n      */\n+\n+\n+\n     private boolean initCurrentPageIterator() {\n         List currentPage;\n         if ( results != null ) {\n@@ -112,6 +124,9 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n      *\n      * @return true if loaded there are more results\n      */\n+\n+\n+\n     private boolean loadNextPage() {\n         try {\n             results = results.getNextPageResults();\n@@ -127,4 +142,4 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     public Iterator iterator() {\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/126/PagingResultsIterator.java\nindex 2ec96a856b..55ae615595 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/126/PagingResultsIterator.java\n@@ -59,7 +59,7 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     }\n \n     @Override\n-    public boolean hasPages(){\n+    public boolean hasPages() {\n         return results != null && results.hasCursor();\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "63",
                    "column": "5",
                    "severity": "warning",
                    "message": "'{' at column 5 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/126/PagingResultsIterator.java\nindex 2ec96a856b..b5944690b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/126/PagingResultsIterator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/126/PagingResultsIterator.java\n@@ -59,7 +59,8 @@ public class PagingResultsIterator implements ResultsIterator, Iterable {\n     }\n \n     @Override\n-    public boolean hasPages(){\n+    public boolean hasPages()\n+    {\n         return results != null && results.hasCursor();\n     }\n \n",
            "diff_size": 2
        }
    ]
}