{
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "212",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        q.setParameter(\"endDate\", endDate);\n\n        if(statsBy == STATS_BY.REVIEWER) {\n            q.setComment(\"activityDAO.getReviewedStats\");\n        } else {\n            q.setComment(\"activityDAO.getTranslatedStats\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/41/ActivityDAO.java\nindex 284681e7d0..479ff5ad64 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/41/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/41/ActivityDAO.java\nindex 284681e7d0..4710990b7d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/41/ActivityDAO.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.dao;\n \n import java.util.Date;\n@@ -49,14 +50,14 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     public Activity findActivity(long personId, EntityType contextType,\n-            long contextId, ActivityType activityType, Date approxTime) {\n+                                 long contextId, ActivityType activityType, Date approxTime) {\n         Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"AND a.activityType = :activityType \"\n-                                + \"AND a.contextType = :contextType \"\n-                                + \"AND :approxTime = a.approxTime\");\n+            getSession().createQuery(\n+                \"FROM Activity a WHERE a.actor.id = :personId \"\n+                    + \"AND a.contextId = :contextId \"\n+                    + \"AND a.activityType = :activityType \"\n+                    + \"AND a.contextType = :contextType \"\n+                    + \"AND :approxTime = a.approxTime\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setParameter(\"activityType\", activityType);\n@@ -69,7 +70,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     @SuppressWarnings(\"unchecked\")\n     public List<Activity> findLatestVersionActivitiesByUser(long personId,\n-        List<Long> versionIds, int offset, int maxResults) {\n+                                                            List<Long> versionIds, int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.actor.id = :personId \");\n         queryBuilder.append(\"AND a.contextType = 'HProjectIteration' \");\n@@ -88,7 +89,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     @SuppressWarnings(\"unchecked\")\n     public List<Activity> findLatestVersionActivities(Long versionId,\n-            int offset, int maxResults) {\n+                                                      int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.contextType = 'HProjectIteration' \");\n         queryBuilder.append(\"AND a.contextId = :versionId \");\n@@ -105,12 +106,12 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     @SuppressWarnings(\"unchecked\")\n     public List<Activity> findLatestActivitiesForContext(long personId,\n-            long contextId, int offset, int maxResults) {\n+                                                         long contextId, int offset, int maxResults) {\n         Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"order by a.lastChanged DESC\");\n+            getSession().createQuery(\n+                \"FROM Activity a WHERE a.actor.id = :personId \"\n+                    + \"AND a.contextId = :contextId \"\n+                    + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setMaxResults(maxResults);\n@@ -122,11 +123,11 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     @SuppressWarnings(\"unchecked\")\n     public List<Activity> findLatestActivities(long personId, int offset,\n-            int maxResults) {\n+                                               int maxResults) {\n         Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"order by a.lastChanged DESC\");\n+            getSession().createQuery(\n+                \"FROM Activity a WHERE a.actor.id = :personId \"\n+                    + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setMaxResults(maxResults);\n         query.setFirstResult(offset);\n@@ -137,9 +138,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n     public int getActivityCountByActor(Long personId) {\n         Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from Activity a where a.actor.id = :personId\");\n+            getSession()\n+                .createQuery(\n+                    \"select count(*) from Activity a where a.actor.id = :personId\");\n         q.setParameter(\"personId\", personId);\n         q.setCacheable(true);\n         q.setComment(\"activityDAO.getActivityCountByActor\");\n@@ -163,9 +164,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param endDate\n      */\n     public int[]\n-            getTranslatedStats(Long personId, Date startDate, Date endDate) {\n+    getTranslatedStats(Long personId, Date startDate, Date endDate) {\n         return getTranslationStatistic(personId, startDate, endDate,\n-                STATS_BY.TRANSLATOR);\n+            STATS_BY.TRANSLATOR);\n     }\n \n     /**\n@@ -189,12 +190,12 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param endDate\n      */\n     private int[] getTranslationStatistic(Long personId, Date startDate,\n-        Date endDate, STATS_BY statsBy) {\n+                                          Date endDate, STATS_BY statsBy) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"select sum(tft.textFlow.wordCount),\")\n-                .append(\"count(tft.textFlow),\")\n-                .append(\"count(distinct tft.textFlow.document)\")\n-                .append(\"from HTextFlowTarget tft \");\n+            .append(\"count(tft.textFlow),\")\n+            .append(\"count(distinct tft.textFlow.document)\")\n+            .append(\"from HTextFlowTarget tft \");\n \n         if (statsBy == STATS_BY.REVIEWER) {\n             queryBuilder.append(\"where tft.reviewer.id = :personId \");\n@@ -202,14 +203,14 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n             queryBuilder.append(\"where tft.translator.id = :personId \");\n         }\n         queryBuilder\n-                .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n+            .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n \n         Query q = getSession().createQuery(queryBuilder.toString());\n         q.setParameter(\"personId\", personId);\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n@@ -219,7 +220,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n \n         Object[] objects = (Object[]) q.uniqueResult();\n \n-        int[] results = new int[] { 0, 0, 0 };\n+        int[] results = new int[] {0, 0, 0};\n \n         if (objects == null || objects.length == 0) {\n             return results;\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/41/ActivityDAO.java\nindex 284681e7d0..09f8a8b8e4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/41/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n@@ -218,8 +218,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setCacheable(true);\n \n         Object[] objects = (Object[]) q.uniqueResult();\n-\n-        int[] results = new int[] { 0, 0, 0 };\n+int[] results = new int[] { 0, 0, 0 };\n \n         if (objects == null || objects.length == 0) {\n             return results;\n@@ -233,4 +232,4 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         }\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/41/ActivityDAO.java\nindex 284681e7d0..e82cb28c19 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/41/ActivityDAO.java\n@@ -22,10 +22,8 @@ package org.zanata.dao;\n \n import java.util.Date;\n import java.util.List;\n-\n import org.hibernate.Query;\n import org.hibernate.Session;\n-\n import javax.enterprise.context.RequestScoped;\n import javax.inject.Named;\n import org.zanata.common.ActivityType;\n@@ -35,6 +33,8 @@ import org.zanata.model.type.EntityType;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"activityDAO\")\n @RequestScoped\n public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n@@ -48,15 +48,13 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         super(Activity.class, session);\n     }\n \n-    public Activity findActivity(long personId, EntityType contextType,\n-            long contextId, ActivityType activityType, Date approxTime) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"AND a.activityType = :activityType \"\n-                                + \"AND a.contextType = :contextType \"\n-                                + \"AND :approxTime = a.approxTime\");\n+    public Activity findActivity(long personId,\n+           EntityType contextType,\n+           long contextId,\n+           ActivityType activityType, Date approxTime) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"AND a.contextId = :contextId \"\n+            + \"AND a.activityType = :activityType \"\n+            + \"AND a.contextType = :contextType \" + \"AND :approxTime = a.approxTime\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setParameter(\"activityType\", activityType);\n@@ -68,14 +66,12 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivitiesByUser(long personId,\n-        List<Long> versionIds, int offset, int maxResults) {\n+    public List<Activity> findLatestVersionActivitiesByUser(long personId, List<Long> versionIds, int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.actor.id = :personId \");\n         queryBuilder.append(\"AND a.contextType = 'HProjectIteration' \");\n         queryBuilder.append(\"AND a.contextId in (:versionIds) \");\n         queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n         Query query = getSession().createQuery(queryBuilder.toString());\n         query.setParameter(\"personId\", personId);\n         query.setParameterList(\"versionIds\", versionIds);\n@@ -87,13 +83,11 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestVersionActivities(Long versionId,\n-            int offset, int maxResults) {\n+    public List<Activity> findLatestVersionActivities(Long versionId, int offset, int maxResults) {\n         StringBuilder queryBuilder = new StringBuilder();\n         queryBuilder.append(\"FROM Activity a WHERE a.contextType = 'HProjectIteration' \");\n         queryBuilder.append(\"AND a.contextId = :versionId \");\n         queryBuilder.append(\"order by a.lastChanged DESC\");\n-\n         Query query = getSession().createQuery(queryBuilder.toString());\n         query.setParameter(\"versionId\", versionId);\n         query.setMaxResults(maxResults);\n@@ -104,13 +98,8 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivitiesForContext(long personId,\n-            long contextId, int offset, int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"AND a.contextId = :contextId \"\n-                                + \"order by a.lastChanged DESC\");\n+    public List<Activity> findLatestActivitiesForContext(long personId, long contextId, int offset, int maxResults) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"AND a.contextId = :contextId \" + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setParameter(\"contextId\", contextId);\n         query.setMaxResults(maxResults);\n@@ -121,12 +110,8 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public List<Activity> findLatestActivities(long personId, int offset,\n-            int maxResults) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"FROM Activity a WHERE a.actor.id = :personId \"\n-                                + \"order by a.lastChanged DESC\");\n+    public List<Activity> findLatestActivities(long personId, int offset, int maxResults) {\n+        Query query = getSession().createQuery(\"FROM Activity a WHERE a.actor.id = :personId \" + \"order by a.lastChanged DESC\");\n         query.setParameter(\"personId\", personId);\n         query.setMaxResults(maxResults);\n         query.setFirstResult(offset);\n@@ -136,10 +121,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n     }\n \n     public int getActivityCountByActor(Long personId) {\n-        Query q =\n-                getSession()\n-                        .createQuery(\n-                                \"select count(*) from Activity a where a.actor.id = :personId\");\n+        Query q = getSession().createQuery(\"select count(*) from Activity a where a.actor.id = :personId\");\n         q.setParameter(\"personId\", personId);\n         q.setCacheable(true);\n         q.setComment(\"activityDAO.getActivityCountByActor\");\n@@ -162,10 +144,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n-    public int[]\n-            getTranslatedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-                STATS_BY.TRANSLATOR);\n+\n+    public int[] getTranslatedStats(Long personId, Date startDate, Date endDate) {\n+        return getTranslationStatistic(personId, startDate, endDate, STATS_BY.TRANSLATOR);\n     }\n \n     /**\n@@ -176,9 +157,9 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n+\n     public int[] getReviewedStats(Long personId, Date startDate, Date endDate) {\n-        return getTranslationStatistic(personId, startDate, endDate,\n-            STATS_BY.REVIEWER);\n+        return getTranslationStatistic(personId, startDate, endDate, STATS_BY.REVIEWER);\n     }\n \n     /**\n@@ -188,43 +169,32 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n      * @param startDate\n      * @param endDate\n      */\n-    private int[] getTranslationStatistic(Long personId, Date startDate,\n-        Date endDate, STATS_BY statsBy) {\n-        StringBuilder queryBuilder = new StringBuilder();\n-        queryBuilder.append(\"select sum(tft.textFlow.wordCount),\")\n-                .append(\"count(tft.textFlow),\")\n-                .append(\"count(distinct tft.textFlow.document)\")\n-                .append(\"from HTextFlowTarget tft \");\n \n+    private int[] getTranslationStatistic(Long personId, Date startDate, Date endDate, STATS_BY statsBy) {\n+        StringBuilder queryBuilder = new StringBuilder();\n+        queryBuilder.append(\"select sum(tft.textFlow.wordCount),\").append(\"count(tft.textFlow),\")\n+                                                                  .append(\"count(distinct tft.textFlow.document)\").append(\"from HTextFlowTarget tft \");\n         if (statsBy == STATS_BY.REVIEWER) {\n             queryBuilder.append(\"where tft.reviewer.id = :personId \");\n         } else {\n             queryBuilder.append(\"where tft.translator.id = :personId \");\n         }\n-        queryBuilder\n-                .append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n-\n+        queryBuilder.append(\"and tft.lastChanged BETWEEN :startDate AND :endDate \");\n         Query q = getSession().createQuery(queryBuilder.toString());\n         q.setParameter(\"personId\", personId);\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n-\n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n         }\n-\n         q.setCacheable(true);\n-\n         Object[] objects = (Object[]) q.uniqueResult();\n-\n         int[] results = new int[] { 0, 0, 0 };\n-\n         if (objects == null || objects.length == 0) {\n             return results;\n         }\n-\n         for (int i = 0; i < results.length; i++) {\n             if (objects.length >= i) {\n                 Long count = (Long) objects[i];\n@@ -233,4 +203,4 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         }\n         return results;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/41/ActivityDAO.java\nindex 284681e7d0..479ff5ad64 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/41/ActivityDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/41/ActivityDAO.java\n@@ -209,7 +209,7 @@ public class ActivityDAO extends AbstractDAOImpl<Activity, Long> {\n         q.setParameter(\"startDate\", startDate);\n         q.setParameter(\"endDate\", endDate);\n \n-        if(statsBy == STATS_BY.REVIEWER) {\n+        if (statsBy == STATS_BY.REVIEWER) {\n             q.setComment(\"activityDAO.getReviewedStats\");\n         } else {\n             q.setComment(\"activityDAO.getTranslatedStats\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}