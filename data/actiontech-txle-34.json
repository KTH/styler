{
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "288",
                "column": "3",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            if (!key.startsWith(\"n_c_v_\")) {\n                Object value = entry.getValue();\n//\t\t\t\tif (value == null) {\n                if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                    value = dataMap.get(\"n_c_v_\" + key);\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "288",
                    "column": "19",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler/34/AutoCompensateHandler.java\nindex 2c80482382..2b7bf82c0f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler/34/AutoCompensateHandler.java\n@@ -285,7 +285,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+                //\t\t\t\tif (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "288",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "309",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "310",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "311",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "312",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "313",
                    "column": "44",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "314",
                    "column": "47",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "315",
                    "column": "50",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "316",
                    "column": "50",
                    "severity": "error",
                    "message": "'++' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/codebuff/34/AutoCompensateHandler.java\nindex 2c80482382..9e6d6b61db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/codebuff/34/AutoCompensateHandler.java\n@@ -20,7 +20,6 @@ import org.apache.servicecomb.saga.omega.transaction.monitor.AutoCompensableSqlM\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n-\n import java.sql.*;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -28,7 +27,6 @@ import java.util.Map;\n \n public class AutoCompensateHandler implements IAutoCompensateHandler {\n     private static final Logger LOG = LoggerFactory.getLogger(AutoCompensateHandler.class);\n-\n     private static volatile AutoCompensateHandler autoCompensateHandler = null;\n     private final String schema = TxleConstants.APP_NAME;\n \n@@ -53,18 +51,19 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         if (globalTxId == null || globalTxId.length() == 0) {\n             return;\n         }\n+\n         String localTxId = CurrentThreadOmegaContext.getLocalTxIdFromCurThread();\n         if (localTxId == null || localTxId.length() == 0) {\n             return;\n         }\n \n         // To parse SQL by SQLParser tools from Druid.\n+\n         MySqlStatementParser parser = new MySqlStatementParser(executeSql);\n         SQLStatement sqlStatement = parser.parseStatement();\n         if (sqlStatement instanceof MySqlSelectIntoStatement) {\n             return;\n         }\n-\n         if (standbyParams == null) {\n             standbyParams = new HashMap<>();\n         }\n@@ -79,23 +78,22 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         standbyParams.put(\"dbdrivername\", dbdrivername);\n         standbyParams.put(\"dburl\", dburl);\n         standbyParams.put(\"dbusername\", dbusername);\n-\n         if (sqlStatement instanceof MySqlInsertStatement) {\n             return;\n         } else if (sqlStatement instanceof MySqlUpdateStatement) {\n             AutoCompensateUpdateHandler.newInstance().prepareCompensationBeforeUpdating(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n         } else if (sqlStatement instanceof MySqlDeleteStatement) {\n-            AutoCompensateDeleteHandler.newInstance().prepareCompensationBeforeDeleting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n-        } else {\n-            standbyParams.clear();\n+                   AutoCompensateDeleteHandler.newInstance().prepareCompensationBeforeDeleting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n+               } else {\n+                   standbyParams.clear();\n             // Default is closed, means that just does record, if it's open, then program will throw an exception about current special SQL, just for auto-compensation.\n-            boolean checkSpecialSql = TxleStaticConfig.getBooleanConfig(\"txle.transaction.auto-compensation.check-special-sql\", false);\n-            if (checkSpecialSql) {\n-                throw new SQLException(TxleConstants.logErrorPrefixWithTime() + \"Do not support sql [\" + executeSql + \"] to auto-compensation.\");\n-            } else {\n-                LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Do not support sql [{}] to auto-compensation, but it has been executed due to the switch 'checkSpecialSql' is closed.\", executeSql);\n-            }\n-        }\n+                   boolean checkSpecialSql = TxleStaticConfig.getBooleanConfig(\"txle.transaction.auto-compensation.check-special-sql\", false);\n+                   if (checkSpecialSql) {\n+                       throw new SQLException(TxleConstants.logErrorPrefixWithTime() + \"Do not support sql [\" + executeSql + \"] to auto-compensation.\");\n+                   } else {\n+                       LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"Do not support sql [{}] to auto-compensation, but it has been executed due to the switch 'checkSpecialSql' is closed.\", executeSql);\n+                   }\n+               }\n     }\n \n     @Override\n@@ -104,18 +102,19 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         if (globalTxId == null || globalTxId.length() == 0) {\n             return;\n         }\n+\n         String localTxId = CurrentThreadOmegaContext.getLocalTxIdFromCurThread();\n         if (localTxId == null || localTxId.length() == 0) {\n             return;\n         }\n \n         // To parse SQL by SQLParser tools from Druid.\n+\n         MySqlStatementParser parser = new MySqlStatementParser(executeSql);\n         SQLStatement sqlStatement = parser.parseStatement();\n         if (sqlStatement instanceof MySqlSelectIntoStatement) {\n             return;\n         }\n-\n         if (standbyParams == null) {\n             standbyParams = new HashMap<>();\n         }\n@@ -130,7 +129,6 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         standbyParams.put(\"dbdrivername\", dbdrivername);\n         standbyParams.put(\"dburl\", dburl);\n         standbyParams.put(\"dbusername\", dbusername);\n-\n         if (sqlStatement instanceof MySqlInsertStatement) {\n             AutoCompensateInsertHandler.newInstance().prepareCompensationAfterInserting(delegate, sqlStatement, executeSql, globalTxId, localTxId, server, standbyParams);\n         } else if (sqlStatement instanceof MySqlUpdateStatement) {\n@@ -139,164 +137,166 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n     }\n \n     protected Map<String, String> selectColumnNameType(PreparedStatement delegate, String tableName) throws SQLException {\n-        String sql = \"SHOW FULL COLUMNS FROM \" + tableName + TxleConstants.ACTION_SQL;\n+    String sql = \"SHOW FULL COLUMNS FROM \" + tableName + TxleConstants.ACTION_SQL;\n \n         // start to mark duration for maintaining sql By Gannalyo.\n-        ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n+    ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n \n-        PreparedStatement ps = null;\n-        ResultSet columnResultSet = null;\n-        Map<String, String> columnNameType = new HashMap<>();\n-        try {\n-            ps = delegate.getConnection().prepareStatement(sql);\n-            ResultSet resultSet = ps.executeQuery();\n+    PreparedStatement ps = null;\n+    ResultSet columnResultSet = null;\n+    Map<String, String> columnNameType = new HashMap<>();\n+    try {\n+        ps = delegate.getConnection().prepareStatement(sql);\n \n-            // end mark duration for maintaining sql By Gannalyo.\n-            ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n+        ResultSet resultSet = ps.executeQuery();\n \n-            while (resultSet.next()) {\n+            // end mark duration for maintaining sql By Gannalyo.\n+        ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n+        while (resultSet.next()) {\n                 // column name and type\n-                columnNameType.put(resultSet.getString(1), resultSet.getString(2));\n+            columnNameType.put(resultSet.getString(1), resultSet.getString(2));\n+        }\n+        ps.close();\n+    } catch (SQLException e) {\n+        throw e;\n+    } catch (BeansException e) {\n+        throw e;\n+    } finally {\n+        try {\n+            if (ps != null) {\n+                ps.close();\n             }\n-            ps.close();\n-        } catch (SQLException e) {\n-            throw e;\n-        } catch (BeansException e) {\n-            throw e;\n         } finally {\n-            try {\n-                if (ps != null) {\n-                    ps.close();\n-                }\n-            } finally {\n-                if (columnResultSet != null) {\n-                    columnResultSet.close();\n-                }\n+            if (columnResultSet != null) {\n+                columnResultSet.close();\n             }\n         }\n-        return columnNameType;\n+    }\n+    return columnNameType;\n     }\n \n     protected void prepareBackupTable(Connection connection, String tableName, String txleBackupTableName) {\n-        PreparedStatement preparedStatement = null;\n-        ResultSet resultSet = null;\n-        try {\n-            boolean isExistsBackupTable = false;\n-            preparedStatement = connection.prepareStatement(\"SELECT COUNT(1) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '\" + schema + \"' AND TABLE_NAME = '\" + txleBackupTableName + \"'\");\n-            resultSet = preparedStatement.executeQuery();\n-            if (resultSet.next()) {\n-                isExistsBackupTable = resultSet.getInt(1) > 0;\n-            }\n-            if (!isExistsBackupTable) {\n-                connection.prepareStatement(\"CREATE DATABASE IF NOT EXISTS txle DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_general_ci\").execute();\n+    PreparedStatement preparedStatement = null;\n+    ResultSet resultSet = null;\n+    try {\n+        boolean isExistsBackupTable = false;\n+        preparedStatement = connection.prepareStatement(\"SELECT COUNT(1) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '\" + schema + \"' AND TABLE_NAME = '\" + txleBackupTableName + \"'\");\n+        resultSet = preparedStatement.executeQuery();\n+        if (resultSet.next()) {\n+            isExistsBackupTable = resultSet.getInt(1) > 0;\n+        }\n+        if (!isExistsBackupTable) {\n+            connection.prepareStatement(\"CREATE DATABASE IF NOT EXISTS txle DEFAULT CHARSET utf8mb4 COLLATE utf8mb4_general_ci\").execute();\n                 // copy table without constraints(pk, index...) so that the original data could be written for many times.\n-                connection.prepareStatement(\"CREATE TABLE IF NOT EXISTS \" + schema + \".\" + txleBackupTableName + \" AS SELECT * FROM \" + tableName + \" LIMIT 0\").execute();\n-                connection.prepareStatement(\"ALTER TABLE \" + schema + \".\" + txleBackupTableName + \" ADD globalTxId VARCHAR(36)\").execute();\n-                connection.prepareStatement(\"ALTER TABLE \" + schema + \".\" + txleBackupTableName + \" ADD localTxId VARCHAR(36)\").execute();\n-            }\n-        } catch (SQLException e) {\n+            connection.prepareStatement(\"CREATE TABLE IF NOT EXISTS \" + schema + \".\" + txleBackupTableName + \" AS SELECT * FROM \" + tableName + \" LIMIT 0\").execute();\n+            connection.prepareStatement(\"ALTER TABLE \" + schema + \".\" + txleBackupTableName + \" ADD globalTxId VARCHAR(36)\").execute();\n+            connection.prepareStatement(\"ALTER TABLE \" + schema + \".\" + txleBackupTableName + \" ADD localTxId VARCHAR(36)\").execute();\n+        }\n+    } catch (SQLException e) {\n             // No obviously effect to main business in case of error.\n-            LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Failed to create backup table for txle.\", e);\n-        } finally {\n-            if (preparedStatement != null) {\n-                try {\n-                    preparedStatement.close();\n-                } catch (SQLException e) {\n-                    LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to close PreparedStatement after executing method 'saveAutoCompensationInfo' for delete SQL.\", e);\n-                }\n+        LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Failed to create backup table for txle.\", e);\n+    } finally {\n+        if (preparedStatement != null) {\n+            try {\n+                preparedStatement.close();\n+            } catch (SQLException e) {\n+                LOG.error(\n+                    TxleConstants.logErrorPrefixWithTime() + \"Fail to close PreparedStatement after executing method 'saveAutoCompensationInfo' for delete SQL.\",\n+e);\n             }\n-            if (resultSet != null) {\n-                try {\n-                    resultSet.close();\n-                } catch (SQLException e) {\n-                    LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to close ResultSet after executing method 'saveAutoCompensationInfo' for delete SQL.\", e);\n-                }\n+        }\n+        if (resultSet != null) {\n+            try {\n+                resultSet.close();\n+            } catch (SQLException e) {\n+                LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to close ResultSet after executing method 'saveAutoCompensationInfo' for delete SQL.\", e);\n             }\n         }\n     }\n+    }\n \n     protected String parsePrimaryKeyColumnName(PreparedStatement delegate, String tableName) throws SQLException {\n-        String primaryKeyColumnName = \"id\", sql = \"SHOW FULL COLUMNS FROM \" + tableName + TxleConstants.ACTION_SQL;\n+    String primaryKeyColumnName = \"id\", sql = \"SHOW FULL COLUMNS FROM \" + tableName + TxleConstants.ACTION_SQL;\n \n         // start to mark duration for maintaining sql By Gannalyo.\n-        ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n+    ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n \n         // So far, didn't know how to get primary-key from Druid. So, use the original way.\n-        Connection connection = null;\n-        PreparedStatement ps = null;\n-        ResultSet columnResultSet = null;\n-        try {\n-            connection = delegate.getConnection();\n-            ps = connection.prepareStatement(sql);\n-            columnResultSet = ps.executeQuery();\n \n-            // end mark duration for maintaining sql By Gannalyo.\n-            ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n+    Connection connection = null;\n+    PreparedStatement ps = null;\n+    ResultSet columnResultSet = null;\n+    try {\n+        connection = delegate.getConnection();\n+        ps = connection.prepareStatement(sql);\n+        columnResultSet = ps.executeQuery();\n \n-            while (columnResultSet.next()) {\n-                if (\"PRI\".equalsIgnoreCase(columnResultSet.getString(\"Key\")) && primaryKeyColumnName.length() == 0) {\n-                    primaryKeyColumnName = columnResultSet.getString(\"Field\");\n-                    break;\n-                }\n+            // end mark duration for maintaining sql By Gannalyo.\n+        ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n+        while (columnResultSet.next()) {\n+            if (\"PRI\".equalsIgnoreCase(columnResultSet.getString(\"Key\")) && primaryKeyColumnName.length() == 0) {\n+                primaryKeyColumnName = columnResultSet.getString(\"Field\");\n+                break;\n             }\n-        } catch (SQLException e) {\n-            throw e;\n-        } catch (BeansException e) {\n-            throw e;\n-        } finally {\n+        }\n+    } catch (SQLException e) {\n+        throw e;\n+    } catch (BeansException e) {\n+        throw e;\n+    } finally {\n //            try {\n //                if (connection != null) connection.close();\n //            } finally {\n-            try {\n-                if (ps != null) {\n-                    ps.close();\n-                }\n-            } finally {\n-                if (columnResultSet != null) {\n-                    columnResultSet.close();\n-                }\n+        try {\n+            if (ps != null) {\n+                ps.close();\n+            }\n+        } finally {\n+            if (columnResultSet != null) {\n+                columnResultSet.close();\n             }\n-//            }\n         }\n-        return primaryKeyColumnName;\n+//            }\n+    }\n+    return primaryKeyColumnName;\n     }\n \n     protected void resetColumnValueByDBType(Map<String, String> columnNameType, Map<String, Object> dataMap) {\n-        Iterator<Map.Entry<String, Object>> iterator = dataMap.entrySet().iterator();\n-        while (iterator.hasNext()) {\n-            Map.Entry<String, Object> entry = iterator.next();\n+    Iterator<Map.Entry<String, Object>> iterator = dataMap.entrySet().iterator();\n+    while (iterator.hasNext()) {\n+        Map.Entry<String, Object> entry = iterator.next();\n             // TODO support all of column type.\n-            String key = entry.getKey();\n-            String type = columnNameType.get(key);\n-            if (type == null && key.startsWith(\"n_c_v_\")) {\n-                type = columnNameType.get(key.substring(6));\n-            }\n-            if (type != null && (type.startsWith(\"varchar\") || \"datetime\".equalsIgnoreCase(type))) {\n-                dataMap.put(key, \"'\" + entry.getValue() + \"'\");\n-            }\n+        String key = entry.getKey();\n+        String type = columnNameType.get(key);\n+        if (type == null && key.startsWith(\"n_c_v_\")) {\n+            type = columnNameType.get(key.substring(6));\n         }\n+        if (type != null && (type.startsWith(\"varchar\") || \"datetime\".equalsIgnoreCase(type))) {\n+            dataMap.put(key, \"'\" + entry.getValue() + \"'\");\n+        }\n+    }\n     }\n \n     protected String constructWhereSqlForCompensation(Map<String, Object> dataMap) throws SQLException {\n-        StringBuffer whereSqlForCompensation = new StringBuffer();\n-        Iterator<Map.Entry<String, Object>> iterator = dataMap.entrySet().iterator();\n-        while (iterator.hasNext()) {\n-            Map.Entry<String, Object> entry = iterator.next();\n-            String key = entry.getKey();\n-            if (!key.startsWith(\"n_c_v_\")) {\n-                Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n-                if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n-                    value = dataMap.get(\"n_c_v_\" + key);\n-                }\n-                if (whereSqlForCompensation.length() == 0) {\n-                    whereSqlForCompensation.append(key + \" = \" + value);\n-                } else {\n-                    whereSqlForCompensation.append(\" and \" + key + \" = \" + value);\n-                }\n+    StringBuffer whereSqlForCompensation = new StringBuffer();\n+    Iterator<Map.Entry<String, Object>> iterator = dataMap.entrySet().iterator();\n+    while (iterator.hasNext()) {\n+        Map.Entry<String, Object> entry = iterator.next();\n+        String key = entry.getKey();\n+        if (!key.startsWith(\"n_c_v_\")) {\n+            Object value = entry.getValue();\n+//              if (value == null) {\n+            if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n+                value = dataMap.get(\"n_c_v_\" + key);\n+            }\n+            if (whereSqlForCompensation.length() == 0) {\n+                whereSqlForCompensation.append(key + \" = \" + value);\n+            } else {\n+                whereSqlForCompensation.append(\" and \" + key + \" = \" + value);\n             }\n         }\n-        return whereSqlForCompensation.toString();\n+    }\n+    return whereSqlForCompensation.toString();\n     }\n \n     public boolean saveTxleUndoLog(PreparedStatement delegate, String globalTxId, String localTxId, String executeSql, String compensateSql, String server) throws SQLException {\n@@ -306,23 +306,21 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n         try {\n             String sql = \"insert into txle_undo_log(globaltxid, localtxid, executesql, compensatesql, status, server, lastmodifytime, createtime) values (?, ?, ?, ?, ?, ?, ?, ?)\" + TxleConstants.ACTION_SQL;\n             preparedStatement = delegate.getConnection().prepareStatement(sql);\n-            preparedStatement.setString(index++, globalTxId);\n-            preparedStatement.setString(index++, localTxId);\n-            preparedStatement.setString(index++, executeSql);\n-            preparedStatement.setString(index++, compensateSql);\n-            preparedStatement.setInt(index++, 0);\n-            preparedStatement.setString(index++, server);\n-            preparedStatement.setTimestamp(index++, currentTime);\n-            preparedStatement.setTimestamp(index++, currentTime);\n+            preparedStatement.setString(index ++, globalTxId);\n+            preparedStatement.setString(index ++, localTxId);\n+            preparedStatement.setString(index ++, executeSql);\n+            preparedStatement.setString(index ++, compensateSql);\n+            preparedStatement.setInt(index ++, 0);\n+            preparedStatement.setString(index ++, server);\n+            preparedStatement.setTimestamp(index ++, currentTime);\n+            preparedStatement.setTimestamp(index ++, currentTime);\n \n             // start to mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n-\n             boolean result = preparedStatement.executeUpdate() > 0;\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             return result;\n         } catch (Exception e) {\n             LOG.error(TxleConstants.LOG_ERROR_PREFIX + \"Failed to save undo_log, localTxId=[{}].\", localTxId, e);\n@@ -333,5 +331,4 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             }\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 176
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "288",
                    "column": "19",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_three_grams/34/AutoCompensateHandler.java\nindex 2c80482382..2b7bf82c0f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/errored/1/34/AutoCompensateHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/actiontech-txle/styler_three_grams/34/AutoCompensateHandler.java\n@@ -285,7 +285,7 @@ public class AutoCompensateHandler implements IAutoCompensateHandler {\n             String key = entry.getKey();\n             if (!key.startsWith(\"n_c_v_\")) {\n                 Object value = entry.getValue();\n-//\t\t\t\tif (value == null) {\n+                //\t\t\t\tif (value == null) {\n                 if (dataMap.keySet().contains(\"n_c_v_\" + key)) {\n                     value = dataMap.get(\"n_c_v_\" + key);\n                 }\n",
            "diff_size": 1
        }
    ]
}