{
    "error_id": "564",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.persistence;\n\nimport java.sql.CallableStatement;\nimport java.sql.PreparedStatement;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..25a177d588 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/564/ByteArrayRefTypeHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence;\n \n import java.sql.CallableStatement;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..4963f1e8af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/564/ByteArrayRefTypeHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence;\n \n import java.sql.CallableStatement;\n@@ -27,40 +28,38 @@ import org.apache.ibatis.type.TypeReference;\n \n /**\n  * MyBatis TypeHandler for {@link ByteArrayRef}.\n- * \n-\n  */\n public class ByteArrayRefTypeHandler extends TypeReference<ByteArrayRef> implements TypeHandler<ByteArrayRef> {\n \n-  @Override\n-  public void setParameter(PreparedStatement ps, int i, ByteArrayRef parameter, JdbcType jdbcType) throws SQLException {\n-    ps.setString(i, getValueToSet(parameter));\n-  }\n+    @Override\n+    public void setParameter(PreparedStatement ps, int i, ByteArrayRef parameter, JdbcType jdbcType) throws SQLException {\n+        ps.setString(i, getValueToSet(parameter));\n+    }\n \n-  private String getValueToSet(ByteArrayRef parameter) {\n-    if (parameter == null) {\n-      // Note that this should not happen: ByteArrayRefs should always be initialized.\n-      return null;\n+    private String getValueToSet(ByteArrayRef parameter) {\n+        if (parameter == null) {\n+            // Note that this should not happen: ByteArrayRefs should always be initialized.\n+            return null;\n+        }\n+        return parameter.getId();\n     }\n-    return parameter.getId();\n-  }\n \n-  @Override\n-  public ByteArrayRef getResult(ResultSet rs, String columnName) throws SQLException {\n-    String id = rs.getString(columnName);\n-    return new ByteArrayRef(id);\n-  }\n+    @Override\n+    public ByteArrayRef getResult(ResultSet rs, String columnName) throws SQLException {\n+        String id = rs.getString(columnName);\n+        return new ByteArrayRef(id);\n+    }\n \n-  @Override\n-  public ByteArrayRef getResult(ResultSet rs, int columnIndex) throws SQLException {\n-    String id = rs.getString(columnIndex);\n-    return new ByteArrayRef(id);\n-  }\n+    @Override\n+    public ByteArrayRef getResult(ResultSet rs, int columnIndex) throws SQLException {\n+        String id = rs.getString(columnIndex);\n+        return new ByteArrayRef(id);\n+    }\n \n-  @Override\n-  public ByteArrayRef getResult(CallableStatement cs, int columnIndex) throws SQLException {\n-    String id = cs.getString(columnIndex);\n-    return new ByteArrayRef(id);\n-  }\n+    @Override\n+    public ByteArrayRef getResult(CallableStatement cs, int columnIndex) throws SQLException {\n+        String id = cs.getString(columnIndex);\n+        return new ByteArrayRef(id);\n+    }\n \n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..7c954d925d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/564/ByteArrayRefTypeHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence;\n \n import java.sql.CallableStatement;\n@@ -63,4 +64,4 @@ public class ByteArrayRefTypeHandler extends TypeReference<ByteArrayRef> impleme\n     return new ByteArrayRef(id);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..8a52955990 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/564/ByteArrayRefTypeHandler.java\n@@ -19,7 +19,6 @@ import java.sql.CallableStatement;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-\n import org.activiti.engine.impl.persistence.entity.ByteArrayRef;\n import org.apache.ibatis.type.JdbcType;\n import org.apache.ibatis.type.TypeHandler;\n@@ -30,37 +29,38 @@ import org.apache.ibatis.type.TypeReference;\n  * \n \n  */\n+\n+\n public class ByteArrayRefTypeHandler extends TypeReference<ByteArrayRef> implements TypeHandler<ByteArrayRef> {\n \n-  @Override\n-  public void setParameter(PreparedStatement ps, int i, ByteArrayRef parameter, JdbcType jdbcType) throws SQLException {\n+    @Override\n+    public void setParameter(PreparedStatement ps, int i, ByteArrayRef parameter, JdbcType jdbcType) throws SQLException {\n     ps.setString(i, getValueToSet(parameter));\n-  }\n+    }\n \n-  private String getValueToSet(ByteArrayRef parameter) {\n+    private String getValueToSet(ByteArrayRef parameter) {\n     if (parameter == null) {\n       // Note that this should not happen: ByteArrayRefs should always be initialized.\n-      return null;\n+        return null;\n     }\n     return parameter.getId();\n-  }\n+    }\n \n-  @Override\n-  public ByteArrayRef getResult(ResultSet rs, String columnName) throws SQLException {\n+    @Override\n+    public ByteArrayRef getResult(ResultSet rs, String columnName) throws SQLException {\n     String id = rs.getString(columnName);\n     return new ByteArrayRef(id);\n-  }\n+    }\n \n-  @Override\n-  public ByteArrayRef getResult(ResultSet rs, int columnIndex) throws SQLException {\n+    @Override\n+    public ByteArrayRef getResult(ResultSet rs, int columnIndex) throws SQLException {\n     String id = rs.getString(columnIndex);\n     return new ByteArrayRef(id);\n-  }\n+    }\n \n-  @Override\n-  public ByteArrayRef getResult(CallableStatement cs, int columnIndex) throws SQLException {\n+    @Override\n+    public ByteArrayRef getResult(CallableStatement cs, int columnIndex) throws SQLException {\n     String id = cs.getString(columnIndex);\n     return new ByteArrayRef(id);\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..25a177d588 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/564/ByteArrayRefTypeHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence;\n \n import java.sql.CallableStatement;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/564/ByteArrayRefTypeHandler.java\nindex 20b49422cd..25a177d588 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/564/ByteArrayRefTypeHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/564/ByteArrayRefTypeHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.persistence;\n \n import java.sql.CallableStatement;\n",
            "diff_size": 1
        }
    ]
}