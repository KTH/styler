{
    "error_id": "627",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/627/GetRowParam.java\nindex e6b32b28ec..1edbec5392 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/627/GetRowParam.java\n@@ -25,96 +25,97 @@ import java.util.List;\n /**\n  * The Get row parameter.\n  */\n-public class GetRowParam implements ParamSplit{\n-  /**\n-   * The Matrix id.\n-   */\n-  protected final int matrixId;\n-  /**\n-   * The Row index.\n-   */\n-  protected final int rowIndex;\n-  /**\n-   * The Clock.\n-   */\n-  protected int clock;\n-  /**\n-   * The Bypass mode.\n-   */\n-  protected final boolean bypassMode;\n+public class GetRowParam implements ParamSplit {\n+    /**\n+     * The Matrix id.\n+     */\n+    protected final int matrixId;\n+    /**\n+     * The Row index.\n+     */\n+    protected final int rowIndex;\n+    /**\n+     * The Clock.\n+     */\n+    protected int clock;\n+    /**\n+     * The Bypass mode.\n+     */\n+    protected final boolean bypassMode;\n \n-  /**\n-   * Creates a new parameter.\n-   *\n-   * @param matrixId   the matrix id\n-   * @param rowIndex   the row index\n-   * @param clock      the clock\n-   * @param bypassMode the bypass mode\n-   */\n-  public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode){\n-    this.matrixId = matrixId;\n-    this.rowIndex = rowIndex;\n-    this.clock = clock;\n-    this.bypassMode = bypassMode;\n-  }\n+    /**\n+     * Creates a new parameter.\n+     *\n+     * @param matrixId   the matrix id\n+     * @param rowIndex   the row index\n+     * @param clock      the clock\n+     * @param bypassMode the bypass mode\n+     */\n+    public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode) {\n+        this.matrixId = matrixId;\n+        this.rowIndex = rowIndex;\n+        this.clock = clock;\n+        this.bypassMode = bypassMode;\n+    }\n+\n+    /**\n+     * Gets matrix id.\n+     *\n+     * @return the matrix id\n+     */\n+    public int getMatrixId() {\n+        return matrixId;\n+    }\n \n-  /**\n-   * Gets matrix id.\n-   *\n-   * @return the matrix id\n-   */\n-  public int getMatrixId() {\n-    return matrixId;\n-  }\n+    /**\n+     * Gets clock.\n+     *\n+     * @return the clock\n+     */\n+    public int getClock() {\n+        return clock;\n+    }\n \n-  /**\n-   * Gets clock.\n-   *\n-   * @return the clock\n-   */\n-  public int getClock() {\n-    return clock;\n-  }\n+    /**\n+     * Is bypass mode boolean.\n+     *\n+     * @return the boolean\n+     */\n+    public boolean isBypassMode() {\n+        return bypassMode;\n+    }\n \n-  /**\n-   * Is bypass mode boolean.\n-   *\n-   * @return the boolean\n-   */\n-  public boolean isBypassMode() {\n-    return bypassMode;\n-  }\n+    /**\n+     * Gets row index.\n+     *\n+     * @return the row index\n+     */\n+    public int getRowIndex() {\n+        return rowIndex;\n+    }\n \n-  /**\n-   * Gets row index.\n-   *\n-   * @return the row index\n-   */\n-  public int getRowIndex() {\n-    return rowIndex;\n-  }\n+    @Override\n+    public List<PartitionGetRowParam> split() {\n+        List<PartitionKey> parts =\n+                PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n+        int size = parts.size();\n \n-  @Override\n-  public List<PartitionGetRowParam> split() {\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n-    int size = parts.size();\n+        List<PartitionGetRowParam> partParams = new ArrayList<PartitionGetRowParam>(size);\n \n-    List<PartitionGetRowParam> partParams = new ArrayList<PartitionGetRowParam>(size);\n+        for (int i = 0; i < size; i++) {\n+            partParams\n+                    .add(new PartitionGetRowParam(matrixId, parts.get(i), rowIndex, clock, false));\n+        }\n \n-    for (int i = 0; i < size; i++) {\n-      partParams.add(new PartitionGetRowParam(matrixId, parts.get(i), rowIndex, clock, false));\n+        return partParams;\n     }\n \n-    return partParams;\n-  }\n-\n-  /**\n-   * Sets clock.\n-   *\n-   * @param clock the clock\n-   */\n-  public void setClock(int clock) {\n-    this.clock = clock;\n-  }\n+    /**\n+     * Sets clock.\n+     *\n+     * @param clock the clock\n+     */\n+    public void setClock(int clock) {\n+        this.clock = clock;\n+    }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/627/GetRowParam.java\nindex e6b32b28ec..068d05b0e9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/627/GetRowParam.java\n@@ -25,7 +25,7 @@ import java.util.List;\n /**\n  * The Get row parameter.\n  */\n-public class GetRowParam implements ParamSplit{\n+public class GetRowParam implements ParamSplit {\n   /**\n    * The Matrix id.\n    */\n@@ -51,7 +51,7 @@ public class GetRowParam implements ParamSplit{\n    * @param clock      the clock\n    * @param bypassMode the bypass mode\n    */\n-  public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode){\n+  public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode) {\n     this.matrixId = matrixId;\n     this.rowIndex = rowIndex;\n     this.clock = clock;\n@@ -117,4 +117,4 @@ public class GetRowParam implements ParamSplit{\n   public void setClock(int clock) {\n     this.clock = clock;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 33.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 56.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 69.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 89.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 120.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/627/GetRowParam.java\nindex e6b32b28ec..b290f2f84f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/627/GetRowParam.java\n@@ -18,30 +18,31 @@ package com.tencent.angel.ml.matrix.udf.getrow;\n \n import com.tencent.angel.PartitionKey;\n import com.tencent.angel.psagent.PSAgentContext;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * The Get row parameter.\n  */\n-public class GetRowParam implements ParamSplit{\n+\n+public class GetRowParam implements ParamSplit {\n   /**\n    * The Matrix id.\n    */\n-  protected final int matrixId;\n+\n+    protected final int matrixId;\n   /**\n    * The Row index.\n    */\n-  protected final int rowIndex;\n+    protected final int rowIndex;\n   /**\n    * The Clock.\n    */\n-  protected int clock;\n+    protected int clock;\n   /**\n    * The Bypass mode.\n    */\n-  protected final boolean bypassMode;\n+    protected final boolean bypassMode;\n \n   /**\n    * Creates a new parameter.\n@@ -51,70 +52,73 @@ public class GetRowParam implements ParamSplit{\n    * @param clock      the clock\n    * @param bypassMode the bypass mode\n    */\n-  public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode){\n+\n+    public GetRowParam(int matrixId, int rowIndex, int clock, boolean bypassMode) {\n     this.matrixId = matrixId;\n     this.rowIndex = rowIndex;\n     this.clock = clock;\n     this.bypassMode = bypassMode;\n-  }\n+    }\n \n   /**\n    * Gets matrix id.\n    *\n    * @return the matrix id\n    */\n-  public int getMatrixId() {\n+\n+    public int getMatrixId() {\n     return matrixId;\n-  }\n+    }\n \n   /**\n    * Gets clock.\n    *\n    * @return the clock\n    */\n-  public int getClock() {\n+\n+    public int getClock() {\n     return clock;\n-  }\n+    }\n \n   /**\n    * Is bypass mode boolean.\n    *\n    * @return the boolean\n    */\n-  public boolean isBypassMode() {\n+\n+    public boolean isBypassMode() {\n     return bypassMode;\n-  }\n+    }\n \n   /**\n    * Gets row index.\n    *\n    * @return the row index\n    */\n-  public int getRowIndex() {\n+\n+    public int getRowIndex() {\n     return rowIndex;\n-  }\n+    }\n \n-  @Override\n-  public List<PartitionGetRowParam> split() {\n-    List<PartitionKey> parts =\n-        PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n+    @Override\n+    public List<PartitionGetRowParam> split() {\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n     int size = parts.size();\n-\n     List<PartitionGetRowParam> partParams = new ArrayList<PartitionGetRowParam>(size);\n-\n     for (int i = 0; i < size; i++) {\n-      partParams.add(new PartitionGetRowParam(matrixId, parts.get(i), rowIndex, clock, false));\n+        partParams.add(new PartitionGetRowParam(matrixId, parts.get(i), rowIndex, clock, false));\n     }\n-\n     return partParams;\n-  }\n+    }\n \n   /**\n    * Sets clock.\n    *\n    * @param clock the clock\n    */\n-  public void setClock(int clock) {\n+\n+    public void setClock(int clock) {\n     this.clock = clock;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 15.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/627/GetRowParam.java\nindex e6b32b28ec..f98e05aba6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/627/GetRowParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/627/GetRowParam.java\n@@ -12,9 +12,7 @@\n  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n- */\n-\n-package com.tencent.angel.ml.matrix.udf.getrow;\n+ */ package com.tencent.angel.ml.matrix.udf.getrow;\n \n import com.tencent.angel.PartitionKey;\n import com.tencent.angel.psagent.PSAgentContext;\n",
            "diff_size": 3
        }
    ]
}