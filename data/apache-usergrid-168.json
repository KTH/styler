{
    "error_id": "168",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param indexEdge The edge this entity is indexed on\n     */\n    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n\n\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/168/EntityToMapConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/168/EntityToMapConverter.java\nindex ff81672594..5779e2cd8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/168/EntityToMapConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/168/EntityToMapConverter.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.index.impl;\n \n \n@@ -44,65 +45,64 @@ import static org.apache.usergrid.persistence.index.impl.IndexingUtils.idString;\n  * Convert a CP entity to an elasticsearch document\n  */\n public class EntityToMapConverter {\n-    /**\n-     * Set the entity as a map with the context\n-     *\n-     * @param applicationScope\n-     * @param entity The entity\n-     * @param indexEdge The edge this entity is indexed on\n-     */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n-\n-\n+  /**\n+   * Set the entity as a map with the context\n+   *\n+   * @param applicationScope\n+   * @param entity           The entity\n+   * @param indexEdge        The edge this entity is indexed on\n+   */\n+  public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge,\n+                                            final Entity entity) {\n \n-        final Map<String, Object> outputEntity = new HashMap<>();\n \n+    final Map<String, Object> outputEntity = new HashMap<>();\n \n-        final Id entityId = entity.getId();\n \n-        /***\n-         * Add our static fields for easier admin/debugging/reporting\n-         ****/\n+    final Id entityId = entity.getId();\n \n-        outputEntity.put( ENTITY_ID_FIELDNAME, idString(entityId) );\n+    /***\n+     * Add our static fields for easier admin/debugging/reporting\n+     ****/\n \n-        outputEntity.put( ENTITY_VERSION_FIELDNAME, entity.getVersion() );\n+    outputEntity.put(ENTITY_ID_FIELDNAME, idString(entityId));\n \n-        outputEntity.put( ENTITY_TYPE_FIELDNAME, getType( applicationScope, entityId ) );\n+    outputEntity.put(ENTITY_VERSION_FIELDNAME, entity.getVersion());\n \n+    outputEntity.put(ENTITY_TYPE_FIELDNAME, getType(applicationScope, entityId));\n \n-        outputEntity.put( APPLICATION_ID_FIELDNAME, idString( applicationScope.getApplication() ) );\n \n-        outputEntity.put( EDGE_NODE_ID_FIELDNAME, idString( indexEdge.getNodeId() ) );\n+    outputEntity.put(APPLICATION_ID_FIELDNAME, idString(applicationScope.getApplication()));\n \n-        outputEntity.put( EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType() );\n+    outputEntity.put(EDGE_NODE_ID_FIELDNAME, idString(indexEdge.getNodeId()));\n \n-        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName()  );\n+    outputEntity.put(EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType());\n \n-        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp()  );\n+    outputEntity.put(EDGE_NAME_FIELDNAME, indexEdge.getEdgeName());\n \n+    outputEntity.put(EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp());\n \n-        //add the context for filtering later\n-        outputEntity.put( EDGE_SEARCH_FIELDNAME, IndexingUtils.createContextName( applicationScope, indexEdge ) );\n \n+    //add the context for filtering later\n+    outputEntity.put(EDGE_SEARCH_FIELDNAME, IndexingUtils.createContextName(applicationScope, indexEdge));\n \n \n-        //migrate the entity to map since we're ultimately going to use maps once we get rid of the Field objects\n-        final EntityMap entityMap = EntityMap.fromEntity( entity );\n-        entityMap.clearFields();\n+    //migrate the entity to map since we're ultimately going to use maps once we get rid of the Field objects\n+    final EntityMap entityMap = EntityMap.fromEntity(entity);\n+    entityMap.clearFields();\n \n-        //now visit our entity\n+    //now visit our entity\n \n-        final FieldParser parser = new EntityMappingParser();\n+    final FieldParser parser = new EntityMappingParser();\n \n-        final List<EntityField> fieldsToIndex =   parser.parse( entityMap );\n+    final List<EntityField> fieldsToIndex = parser.parse(entityMap);\n \n \n-        //add our fields\n-        outputEntity.put( ENTITY_FIELDS, fieldsToIndex );\n+    //add our fields\n+    outputEntity.put(ENTITY_FIELDS, fieldsToIndex);\n \n \n-        return outputEntity;\n-    }\n+    return outputEntity;\n+  }\n \n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/168/EntityToMapConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/168/EntityToMapConverter.java\nindex ff81672594..dd83cb33e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/168/EntityToMapConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/168/EntityToMapConverter.java\n@@ -20,7 +20,6 @@ package org.apache.usergrid.persistence.index.impl;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.usergrid.persistence.core.scope.ApplicationScope;\n import org.apache.usergrid.persistence.index.IndexEdge;\n import org.apache.usergrid.persistence.model.entity.Entity;\n@@ -43,6 +42,8 @@ import static org.apache.usergrid.persistence.index.impl.IndexingUtils.idString;\n /**\n  * Convert a CP entity to an elasticsearch document\n  */\n+\n+\n public class EntityToMapConverter {\n     /**\n      * Set the entity as a map with the context\n@@ -51,35 +52,22 @@ public class EntityToMapConverter {\n      * @param entity The entity\n      * @param indexEdge The edge this entity is indexed on\n      */\n-    public static Map<String, Object> convert(ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity) {\n-\n-\n-\n-        final Map<String, Object> outputEntity = new HashMap<>();\n-\n \n+    public static Map<String, Object> convert( ApplicationScope applicationScope, final IndexEdge indexEdge, final Entity entity ) {\n+        final Map<String, Object> outputEntity = new HashMap< >();\n         final Id entityId = entity.getId();\n \n         /***\n          * Add our static fields for easier admin/debugging/reporting\n          ****/\n-\n-        outputEntity.put( ENTITY_ID_FIELDNAME, idString(entityId) );\n-\n+        outputEntity.put( ENTITY_ID_FIELDNAME, idString( entityId ) );\n         outputEntity.put( ENTITY_VERSION_FIELDNAME, entity.getVersion() );\n-\n         outputEntity.put( ENTITY_TYPE_FIELDNAME, getType( applicationScope, entityId ) );\n-\n-\n         outputEntity.put( APPLICATION_ID_FIELDNAME, idString( applicationScope.getApplication() ) );\n-\n         outputEntity.put( EDGE_NODE_ID_FIELDNAME, idString( indexEdge.getNodeId() ) );\n-\n         outputEntity.put( EDGE_NODE_TYPE_FIELDNAME, indexEdge.getNodeType() );\n-\n-        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName()  );\n-\n-        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp()  );\n+        outputEntity.put( EDGE_NAME_FIELDNAME, indexEdge.getEdgeName() );\n+        outputEntity.put( EDGE_TIMESTAMP_FIELDNAME, indexEdge.getTimestamp() );\n \n \n         //add the context for filtering later\n@@ -88,21 +76,18 @@ public class EntityToMapConverter {\n \n \n         //migrate the entity to map since we're ultimately going to use maps once we get rid of the Field objects\n+\n         final EntityMap entityMap = EntityMap.fromEntity( entity );\n         entityMap.clearFields();\n \n         //now visit our entity\n \n         final FieldParser parser = new EntityMappingParser();\n-\n-        final List<EntityField> fieldsToIndex =   parser.parse( entityMap );\n+        final List<EntityField> fieldsToIndex = parser.parse( entityMap );\n \n \n         //add our fields\n         outputEntity.put( ENTITY_FIELDS, fieldsToIndex );\n-\n-\n         return outputEntity;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}