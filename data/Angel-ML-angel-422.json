{
    "error_id": "422",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..45b840b71b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/422/DenseIntMatrixTest.java\n@@ -1,217 +1,217 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseIntVector;\r\n-import com.tencent.angel.ml.math.vector.TIntVector;\r\n-import org.junit.Test;\r\n-\r\n-import static junit.framework.Assert.assertEquals;\r\n-\r\n-public class DenseIntMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(1, 0, 2);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(5, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1.0, mat.sparsity());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(0.0, mat_1.sparsity());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(4, mat.size());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(4, mat_1.size());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getValues() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\r\n-    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\r\n-\r\n-    assertEquals(1, row0.get(0));\r\n-    assertEquals(2, row0.get(1));\r\n-    assertEquals(3, row1.get(0));\r\n-    assertEquals(4, row1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getTIntVector() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = (TIntVector)mat.getTVector(0);\r\n-\r\n-    assertEquals(1, vec.get(0));\r\n-    assertEquals(2, vec.get(1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    mat_1.plusBy(vec);\r\n-    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\r\n-\r\n-    assertEquals(0, vec_1.get(0));\r\n-    assertEquals(0, vec_1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void clear() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-\r\n-    mat.clear();\r\n-\r\n-    assertEquals(0, mat.get(0, 0));\r\n-    assertEquals(0, mat.get(0, 1));\r\n-    assertEquals(0, mat.get(1, 0));\r\n-    assertEquals(0, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void nonZeroNum() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\r\n-\r\n-    assertEquals(2, mat.nonZeroNum());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n-\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseIntVector;\n+import com.tencent.angel.ml.math.vector.TIntVector;\n+import org.junit.Test;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+public class DenseIntMatrixTest {\n+  @Test\n+  public void inc() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    mat.plusBy(0, 0, 1);\n+    mat.plusBy(1, 0, 2);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(5, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void plusBy() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy1() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy2() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy3() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void sparsity() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1.0, mat.sparsity());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(0.0, mat_1.sparsity());\n+\n+  }\n+\n+  @Test\n+  public void size() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(4, mat.size());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(4, mat_1.size());\n+\n+  }\n+\n+  @Test\n+  public void getValues() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\n+    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\n+\n+    assertEquals(1, row0.get(0));\n+    assertEquals(2, row0.get(1));\n+    assertEquals(3, row1.get(0));\n+    assertEquals(4, row1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void get() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void getTIntVector() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = (TIntVector)mat.getTVector(0);\n+\n+    assertEquals(1, vec.get(0));\n+    assertEquals(2, vec.get(1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\n+\n+    assertEquals(0, vec_1.get(0));\n+    assertEquals(0, vec_1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void clear() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+\n+    mat.clear();\n+\n+    assertEquals(0, mat.get(0, 0));\n+    assertEquals(0, mat.get(0, 1));\n+    assertEquals(0, mat.get(1, 0));\n+    assertEquals(0, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void nonZeroNum() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\n+\n+    assertEquals(2, mat.nonZeroNum());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(2, mat_1.nonZeroNum());\n+\n+  }\n+\n+}\n",
            "diff_size": 217
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..acddcc93cc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/422/DenseIntMatrixTest.java\n@@ -23,195 +23,195 @@ import org.junit.Test;\n import static junit.framework.Assert.assertEquals;\r\n \r\n public class DenseIntMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+    @Test\r\n+    public void inc() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n \r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(1, 0, 2);\r\n+        mat.plusBy(0, 0, 1);\r\n+        mat.plusBy(1, 0, 2);\r\n \r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(5, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-  }\r\n+        assertEquals(2, mat.get(0, 0));\r\n+        assertEquals(2, mat.get(0, 1));\r\n+        assertEquals(5, mat.get(1, 0));\r\n+        assertEquals(4, mat.get(1, 1));\r\n+    }\r\n \r\n-  @Test\r\n-  public void plusBy() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n+    @Test\r\n+    public void plusBy() throws Exception {\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][] {{1, 2}, {3, 4}});\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][] {{5, 6}, {7, 8}});\r\n \r\n-    mat.plusBy(mat_1);\r\n+        mat.plusBy(mat_1);\r\n \r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n+        assertEquals(6, mat.get(0, 0));\r\n+        assertEquals(8, mat.get(0, 1));\r\n+        assertEquals(10, mat.get(1, 0));\r\n+        assertEquals(12, mat.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n+    @Test\r\n+    public void plusBy1() throws Exception {\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][] {{1, 2}, {3, 4}});\r\n+        TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][] {{5, 6}, {7, 8}});\r\n \r\n-    mat.plusBy(mat_1);\r\n+        mat.plusBy(mat_1);\r\n \r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n+        assertEquals(6, mat.get(0, 0));\r\n+        assertEquals(8, mat.get(0, 1));\r\n+        assertEquals(10, mat.get(1, 0));\r\n+        assertEquals(12, mat.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n+    @Test\r\n+    public void plusBy2() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+        DenseIntVector vec = new DenseIntVector(2, new int[] {1, 2});\r\n+        vec.setRowId(0);\r\n \r\n-    mat.plusBy(vec);\r\n+        mat.plusBy(vec);\r\n \r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n+        assertEquals(2, mat.get(0, 0));\r\n+        assertEquals(4, mat.get(0, 1));\r\n+        assertEquals(3, mat.get(1, 0));\r\n+        assertEquals(4, mat.get(1, 1));\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n \r\n-    mat_1.plusBy(vec);\r\n+        mat_1.plusBy(vec);\r\n \r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n+        assertEquals(1, mat_1.get(0, 0));\r\n+        assertEquals(2, mat_1.get(0, 1));\r\n+        assertEquals(0, mat_1.get(1, 0));\r\n+        assertEquals(0, mat_1.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n+    @Test\r\n+    public void plusBy3() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+        TIntVector vec = new DenseIntVector(2, new int[] {1, 2});\r\n+        vec.setRowId(0);\r\n \r\n-    mat.plusBy(vec);\r\n+        mat.plusBy(vec);\r\n \r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n+        assertEquals(2, mat.get(0, 0));\r\n+        assertEquals(4, mat.get(0, 1));\r\n+        assertEquals(3, mat.get(1, 0));\r\n+        assertEquals(4, mat.get(1, 1));\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n \r\n-    mat_1.plusBy(vec);\r\n+        mat_1.plusBy(vec);\r\n \r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n+        assertEquals(1, mat_1.get(0, 0));\r\n+        assertEquals(2, mat_1.get(0, 1));\r\n+        assertEquals(0, mat_1.get(1, 0));\r\n+        assertEquals(0, mat_1.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+    @Test\r\n+    public void sparsity() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n \r\n-    assertEquals(1.0, mat.sparsity());\r\n+        assertEquals(1.0, mat.sparsity());\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n \r\n-    assertEquals(0.0, mat_1.sparsity());\r\n+        assertEquals(0.0, mat_1.sparsity());\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+    @Test\r\n+    public void size() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n \r\n-    assertEquals(4, mat.size());\r\n+        assertEquals(4, mat.size());\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n \r\n-    assertEquals(4, mat_1.size());\r\n+        assertEquals(4, mat_1.size());\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void getValues() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+    @Test\r\n+    public void getValues() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n \r\n-    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\r\n-    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\r\n+        DenseIntVector row0 = (DenseIntVector) mat.getTVector(0);\r\n+        DenseIntVector row1 = (DenseIntVector) mat.getTVector(1);\r\n \r\n-    assertEquals(1, row0.get(0));\r\n-    assertEquals(2, row0.get(1));\r\n-    assertEquals(3, row1.get(0));\r\n-    assertEquals(4, row1.get(1));\r\n+        assertEquals(1, row0.get(0));\r\n+        assertEquals(2, row0.get(1));\r\n+        assertEquals(3, row1.get(0));\r\n+        assertEquals(4, row1.get(1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+    @Test\r\n+    public void get() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n \r\n-    assertEquals(1, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n+        assertEquals(1, mat.get(0, 0));\r\n+        assertEquals(2, mat.get(0, 1));\r\n+        assertEquals(3, mat.get(1, 0));\r\n+        assertEquals(4, mat.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void getTIntVector() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = (TIntVector)mat.getTVector(0);\r\n+    @Test\r\n+    public void getTIntVector() throws Exception {\r\n+        int[][] value = {{1, 2}, {3, 4}};\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n+        TIntVector vec = (TIntVector) mat.getTVector(0);\r\n \r\n-    assertEquals(1, vec.get(0));\r\n-    assertEquals(2, vec.get(1));\r\n+        assertEquals(1, vec.get(0));\r\n+        assertEquals(2, vec.get(1));\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    mat_1.plusBy(vec);\r\n-    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        mat_1.plusBy(vec);\r\n+        TIntVector vec_1 = (TIntVector) mat_1.getTVector(1);\r\n \r\n-    assertEquals(0, vec_1.get(0));\r\n-    assertEquals(0, vec_1.get(1));\r\n+        assertEquals(0, vec_1.get(0));\r\n+        assertEquals(0, vec_1.get(1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void clear() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n+    @Test\r\n+    public void clear() throws Exception {\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][] {{1, 2}, {3, 4}});\r\n \r\n-    mat.clear();\r\n+        mat.clear();\r\n \r\n-    assertEquals(0, mat.get(0, 0));\r\n-    assertEquals(0, mat.get(0, 1));\r\n-    assertEquals(0, mat.get(1, 0));\r\n-    assertEquals(0, mat.get(1, 1));\r\n+        assertEquals(0, mat.get(0, 0));\r\n+        assertEquals(0, mat.get(0, 1));\r\n+        assertEquals(0, mat.get(1, 0));\r\n+        assertEquals(0, mat.get(1, 1));\r\n \r\n-  }\r\n+    }\r\n \r\n-  @Test\r\n-  public void nonZeroNum() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\r\n+    @Test\r\n+    public void nonZeroNum() throws Exception {\r\n+        DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][] {{0, 2}, {0, 4}});\r\n \r\n-    assertEquals(2, mat.nonZeroNum());\r\n+        assertEquals(2, mat.nonZeroNum());\r\n \r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-    mat_1.plusBy(vec);\r\n+        DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n+        DenseIntVector vec = new DenseIntVector(2, new int[] {1, 2});\r\n+        vec.setRowId(0);\r\n+        mat_1.plusBy(vec);\r\n \r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n+        assertEquals(2, mat_1.nonZeroNum());\r\n \r\n-  }\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..3028e08ff4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/422/DenseIntMatrixTest.java\n@@ -210,8 +210,7 @@ public class DenseIntMatrixTest {\n     vec.setRowId(0);\r\n     mat_1.plusBy(vec);\r\n \r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n-\r\n+    assertEquals(2, mat_1.nonZeroNum());\n   }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..84f902d639 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/422/DenseIntMatrixTest.java\n@@ -14,204 +14,160 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseIntVector;\r\n-import com.tencent.angel.ml.math.vector.TIntVector;\r\n-import org.junit.Test;\r\n-\r\n-import static junit.framework.Assert.assertEquals;\r\n-\r\n-public class DenseIntMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(1, 0, 2);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(5, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1.0, mat.sparsity());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(0.0, mat_1.sparsity());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(4, mat.size());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(4, mat_1.size());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getValues() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\r\n-    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\r\n-\r\n-    assertEquals(1, row0.get(0));\r\n-    assertEquals(2, row0.get(1));\r\n-    assertEquals(3, row1.get(0));\r\n-    assertEquals(4, row1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getTIntVector() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = (TIntVector)mat.getTVector(0);\r\n-\r\n-    assertEquals(1, vec.get(0));\r\n-    assertEquals(2, vec.get(1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    mat_1.plusBy(vec);\r\n-    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\r\n-\r\n-    assertEquals(0, vec_1.get(0));\r\n-    assertEquals(0, vec_1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void clear() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-\r\n-    mat.clear();\r\n-\r\n-    assertEquals(0, mat.get(0, 0));\r\n-    assertEquals(0, mat.get(0, 1));\r\n-    assertEquals(0, mat.get(1, 0));\r\n-    assertEquals(0, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void nonZeroNum() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\r\n-\r\n-    assertEquals(2, mat.nonZeroNum());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n-\r\n-  }\r\n-\r\n-}\r\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseIntVector;\n+import com.tencent.angel.ml.math.vector.TIntVector;\n+import org.junit.Test;\n+import static junit.framework.Assert.assertEquals;\n+\n+public class DenseIntMatrixTest {\n+\n+\n+    @Test\n+    public void inc() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    mat.plusBy(0, 0, 1);\n+    mat.plusBy(1, 0, 2);\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(5, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+    }\n+\n+    @Test\n+    public void plusBy() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+    mat.plusBy(mat_1);\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+    }\n+\n+    @Test\n+    public void plusBy1() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+    mat.plusBy(mat_1);\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+    }\n+\n+    @Test\n+    public void plusBy2() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat.plusBy(vec);\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+    }\n+\n+    @Test\n+    public void plusBy3() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat.plusBy(vec);\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+    }\n+\n+    @Test\n+    public void sparsity() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    assertEquals(1.0, mat.sparsity());\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    assertEquals(0.0, mat_1.sparsity());\n+    }\n+\n+    @Test\n+    public void size() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    assertEquals(4, mat.size());\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    assertEquals(4, mat_1.size());\n+    }\n+\n+    @Test\n+    public void getValues() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    DenseIntVector row0 = (DenseIntVector) mat.getTVector(0);\n+    DenseIntVector row1 = (DenseIntVector) mat.getTVector(1);\n+    assertEquals(1, row0.get(0));\n+    assertEquals(2, row0.get(1));\n+    assertEquals(3, row1.get(0));\n+    assertEquals(4, row1.get(1));\n+    }\n+\n+    @Test\n+    public void get() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    assertEquals(1, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+    }\n+\n+    @Test\n+    public void getTIntVector() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = (TIntVector) mat.getTVector(0);\n+    assertEquals(1, vec.get(0));\n+    assertEquals(2, vec.get(1));\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    TIntVector vec_1 = (TIntVector) mat_1.getTVector(1);\n+    assertEquals(0, vec_1.get(0));\n+    assertEquals(0, vec_1.get(1));\n+    }\n+\n+    @Test\n+    public void clear() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    mat.clear();\n+    assertEquals(0, mat.get(0, 0));\n+    assertEquals(0, mat.get(0, 1));\n+    assertEquals(0, mat.get(1, 0));\n+    assertEquals(0, mat.get(1, 1));\n+    }\n+\n+    @Test\n+    public void nonZeroNum() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\n+    assertEquals(2, mat.nonZeroNum());\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat_1.plusBy(vec);\n+    assertEquals(2, mat_1.nonZeroNum());\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 201
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..45b840b71b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/422/DenseIntMatrixTest.java\n@@ -1,217 +1,217 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseIntVector;\r\n-import com.tencent.angel.ml.math.vector.TIntVector;\r\n-import org.junit.Test;\r\n-\r\n-import static junit.framework.Assert.assertEquals;\r\n-\r\n-public class DenseIntMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(1, 0, 2);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(5, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1.0, mat.sparsity());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(0.0, mat_1.sparsity());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(4, mat.size());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(4, mat_1.size());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getValues() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\r\n-    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\r\n-\r\n-    assertEquals(1, row0.get(0));\r\n-    assertEquals(2, row0.get(1));\r\n-    assertEquals(3, row1.get(0));\r\n-    assertEquals(4, row1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getTIntVector() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = (TIntVector)mat.getTVector(0);\r\n-\r\n-    assertEquals(1, vec.get(0));\r\n-    assertEquals(2, vec.get(1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    mat_1.plusBy(vec);\r\n-    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\r\n-\r\n-    assertEquals(0, vec_1.get(0));\r\n-    assertEquals(0, vec_1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void clear() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-\r\n-    mat.clear();\r\n-\r\n-    assertEquals(0, mat.get(0, 0));\r\n-    assertEquals(0, mat.get(0, 1));\r\n-    assertEquals(0, mat.get(1, 0));\r\n-    assertEquals(0, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void nonZeroNum() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\r\n-\r\n-    assertEquals(2, mat.nonZeroNum());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n-\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseIntVector;\n+import com.tencent.angel.ml.math.vector.TIntVector;\n+import org.junit.Test;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+public class DenseIntMatrixTest {\n+  @Test\n+  public void inc() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    mat.plusBy(0, 0, 1);\n+    mat.plusBy(1, 0, 2);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(5, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void plusBy() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy1() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy2() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy3() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void sparsity() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1.0, mat.sparsity());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(0.0, mat_1.sparsity());\n+\n+  }\n+\n+  @Test\n+  public void size() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(4, mat.size());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(4, mat_1.size());\n+\n+  }\n+\n+  @Test\n+  public void getValues() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\n+    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\n+\n+    assertEquals(1, row0.get(0));\n+    assertEquals(2, row0.get(1));\n+    assertEquals(3, row1.get(0));\n+    assertEquals(4, row1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void get() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void getTIntVector() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = (TIntVector)mat.getTVector(0);\n+\n+    assertEquals(1, vec.get(0));\n+    assertEquals(2, vec.get(1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\n+\n+    assertEquals(0, vec_1.get(0));\n+    assertEquals(0, vec_1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void clear() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+\n+    mat.clear();\n+\n+    assertEquals(0, mat.get(0, 0));\n+    assertEquals(0, mat.get(0, 1));\n+    assertEquals(0, mat.get(1, 0));\n+    assertEquals(0, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void nonZeroNum() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\n+\n+    assertEquals(2, mat.nonZeroNum());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(2, mat_1.nonZeroNum());\n+\n+  }\n+\n+}\n",
            "diff_size": 217
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/422/DenseIntMatrixTest.java\nindex 6b01c53d1e..45b840b71b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/422/DenseIntMatrixTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/422/DenseIntMatrixTest.java\n@@ -1,217 +1,217 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseIntVector;\r\n-import com.tencent.angel.ml.math.vector.TIntVector;\r\n-import org.junit.Test;\r\n-\r\n-import static junit.framework.Assert.assertEquals;\r\n-\r\n-public class DenseIntMatrixTest {\r\n-  @Test\r\n-  public void inc() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    mat.plusBy(0, 0, 1);\r\n-    mat.plusBy(1, 0, 2);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(5, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy1() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\r\n-\r\n-    mat.plusBy(mat_1);\r\n-\r\n-    assertEquals(6, mat.get(0, 0));\r\n-    assertEquals(8, mat.get(0, 1));\r\n-    assertEquals(10, mat.get(1, 0));\r\n-    assertEquals(12, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy2() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void plusBy3() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-\r\n-    mat.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat.get(0, 0));\r\n-    assertEquals(4, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(1, mat_1.get(0, 0));\r\n-    assertEquals(2, mat_1.get(0, 1));\r\n-    assertEquals(0, mat_1.get(1, 0));\r\n-    assertEquals(0, mat_1.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void sparsity() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1.0, mat.sparsity());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(0.0, mat_1.sparsity());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void size() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(4, mat.size());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-\r\n-    assertEquals(4, mat_1.size());\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getValues() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\r\n-    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\r\n-\r\n-    assertEquals(1, row0.get(0));\r\n-    assertEquals(2, row0.get(1));\r\n-    assertEquals(3, row1.get(0));\r\n-    assertEquals(4, row1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void get() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-\r\n-    assertEquals(1, mat.get(0, 0));\r\n-    assertEquals(2, mat.get(0, 1));\r\n-    assertEquals(3, mat.get(1, 0));\r\n-    assertEquals(4, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void getTIntVector() throws Exception {\r\n-    int[][] value = {{1, 2}, {3, 4}};\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\r\n-    TIntVector vec = (TIntVector)mat.getTVector(0);\r\n-\r\n-    assertEquals(1, vec.get(0));\r\n-    assertEquals(2, vec.get(1));\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    mat_1.plusBy(vec);\r\n-    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\r\n-\r\n-    assertEquals(0, vec_1.get(0));\r\n-    assertEquals(0, vec_1.get(1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void clear() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\r\n-\r\n-    mat.clear();\r\n-\r\n-    assertEquals(0, mat.get(0, 0));\r\n-    assertEquals(0, mat.get(0, 1));\r\n-    assertEquals(0, mat.get(1, 0));\r\n-    assertEquals(0, mat.get(1, 1));\r\n-\r\n-  }\r\n-\r\n-  @Test\r\n-  public void nonZeroNum() throws Exception {\r\n-    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\r\n-\r\n-    assertEquals(2, mat.nonZeroNum());\r\n-\r\n-    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\r\n-    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\r\n-    vec.setRowId(0);\r\n-    mat_1.plusBy(vec);\r\n-\r\n-    assertEquals(2, mat_1.nonZeroNum());\r\n-\r\n-  }\r\n-\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseIntVector;\n+import com.tencent.angel.ml.math.vector.TIntVector;\n+import org.junit.Test;\n+\n+import static junit.framework.Assert.assertEquals;\n+\n+public class DenseIntMatrixTest {\n+  @Test\n+  public void inc() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    mat.plusBy(0, 0, 1);\n+    mat.plusBy(1, 0, 2);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(5, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+  }\n+\n+  @Test\n+  public void plusBy() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy1() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+    TIntMatrix mat_1 = new DenseIntMatrix(2, 2, new int[][]{{5, 6}, {7, 8}});\n+\n+    mat.plusBy(mat_1);\n+\n+    assertEquals(6, mat.get(0, 0));\n+    assertEquals(8, mat.get(0, 1));\n+    assertEquals(10, mat.get(1, 0));\n+    assertEquals(12, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy2() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void plusBy3() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+\n+    mat.plusBy(vec);\n+\n+    assertEquals(2, mat.get(0, 0));\n+    assertEquals(4, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(1, mat_1.get(0, 0));\n+    assertEquals(2, mat_1.get(0, 1));\n+    assertEquals(0, mat_1.get(1, 0));\n+    assertEquals(0, mat_1.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void sparsity() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1.0, mat.sparsity());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(0.0, mat_1.sparsity());\n+\n+  }\n+\n+  @Test\n+  public void size() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(4, mat.size());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+\n+    assertEquals(4, mat_1.size());\n+\n+  }\n+\n+  @Test\n+  public void getValues() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    DenseIntVector row0 = (DenseIntVector)mat.getTVector(0);\n+    DenseIntVector row1 = (DenseIntVector)mat.getTVector(1);\n+\n+    assertEquals(1, row0.get(0));\n+    assertEquals(2, row0.get(1));\n+    assertEquals(3, row1.get(0));\n+    assertEquals(4, row1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void get() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+\n+    assertEquals(1, mat.get(0, 0));\n+    assertEquals(2, mat.get(0, 1));\n+    assertEquals(3, mat.get(1, 0));\n+    assertEquals(4, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void getTIntVector() throws Exception {\n+    int[][] value = {{1, 2}, {3, 4}};\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, value);\n+    TIntVector vec = (TIntVector)mat.getTVector(0);\n+\n+    assertEquals(1, vec.get(0));\n+    assertEquals(2, vec.get(1));\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    mat_1.plusBy(vec);\n+    TIntVector vec_1 = (TIntVector)mat_1.getTVector(1);\n+\n+    assertEquals(0, vec_1.get(0));\n+    assertEquals(0, vec_1.get(1));\n+\n+  }\n+\n+  @Test\n+  public void clear() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{1, 2}, {3, 4}});\n+\n+    mat.clear();\n+\n+    assertEquals(0, mat.get(0, 0));\n+    assertEquals(0, mat.get(0, 1));\n+    assertEquals(0, mat.get(1, 0));\n+    assertEquals(0, mat.get(1, 1));\n+\n+  }\n+\n+  @Test\n+  public void nonZeroNum() throws Exception {\n+    DenseIntMatrix mat = new DenseIntMatrix(2, 2, new int[][]{{0, 2}, {0, 4}});\n+\n+    assertEquals(2, mat.nonZeroNum());\n+\n+    DenseIntMatrix mat_1 = new DenseIntMatrix(2, 2);\n+    DenseIntVector vec = new DenseIntVector(2, new int[]{1, 2});\n+    vec.setRowId(0);\n+    mat_1.plusBy(vec);\n+\n+    assertEquals(2, mat_1.nonZeroNum());\n+\n+  }\n+\n+}\n",
            "diff_size": 217
        }
    ]
}