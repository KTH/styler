{
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "42",
                "column": "15",
                "severity": "error",
                "message": "'(' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "        if (hasWarningsOnly) {\n          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n              ()));\n        } else {\n          Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/20/AbstractValidationResult.java\nindex 93f23b9d38..465dd4eebf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/20/AbstractValidationResult.java\n@@ -38,57 +38,56 @@ public abstract class AbstractValidationResult implements ValidationResult {\n       boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n       if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n         if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n-              ()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n-        }\n-        if (CollectionUtils.isNotEmpty(this.errors)) {\n-          for (DigiDoc4JException error : this.errors) {\n-            LOGGER.error(error.toString());\n-          }\n-        }\n-        if (CollectionUtils.isNotEmpty(this.warnings)) {\n-          for (DigiDoc4JException warning : this.warnings) {\n-            LOGGER.warn(warning.toString());\n-          }\n-        }\n-        if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n-              .getResultName()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n-        }\n+          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n+    }\n+    if (CollectionUtils.isNotEmpty(this.errors)) {\n+      for (DigiDoc4JException error : this.errors) {\n+        LOGGER.error(error.toString());\n       }\n     }\n+    if (CollectionUtils.isNotEmpty(this.warnings)) {\n+      for (DigiDoc4JException warning : this.warnings) {\n+        LOGGER.warn(warning.toString());\n+      }\n+    }\n+    if (hasWarningsOnly) {\n+      Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n+          .getResultName()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n+    }\n   }\n+}\n+}\n \n-  /*\n+/*\n    * RESTRICTED METHODS\n    */\n \n-  protected abstract String getResultName();\n+protected abstract String getResultName();\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public List<DigiDoc4JException> getErrors() {\n-    return errors;\n-  }\n+@Override\n+public List<DigiDoc4JException> getErrors() {\n+  return errors;\n+}\n \n-  public void setErrors(List<DigiDoc4JException> errors) {\n-    this.errors = errors;\n-  }\n+public void setErrors(List<DigiDoc4JException> errors) {\n+  this.errors = errors;\n+}\n \n-  @Override\n-  public List<DigiDoc4JException> getWarnings() {\n-    return warnings;\n-  }\n+@Override\n+public List<DigiDoc4JException> getWarnings() {\n+  return warnings;\n+}\n \n-  public void setWarnings(List<DigiDoc4JException> warnings) {\n-    this.warnings = warnings;\n-  }\n+public void setWarnings(List<DigiDoc4JException> warnings) {\n+  this.warnings = warnings;\n+}\n \n }\n",
            "diff_size": 51
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/20/AbstractValidationResult.java\nindex 93f23b9d38..0cc547edb0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/20/AbstractValidationResult.java\n@@ -38,8 +38,7 @@ public abstract class AbstractValidationResult implements ValidationResult {\n       boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n       if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n         if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n-              ()));\n+          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n         } else {\n           Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n         }\n@@ -54,8 +53,7 @@ public abstract class AbstractValidationResult implements ValidationResult {\n           }\n         }\n         if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n-              .getResultName()));\n+          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n         } else {\n           Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n         }\n@@ -91,4 +89,4 @@ public abstract class AbstractValidationResult implements ValidationResult {\n     this.warnings = warnings;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/20/AbstractValidationResult.java\nindex 93f23b9d38..04156f2074 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/20/AbstractValidationResult.java\n@@ -2,7 +2,6 @@ package org.digidoc4j.impl;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.commons.collections4.CollectionUtils;\n import org.digidoc4j.Configuration;\n import org.digidoc4j.ValidationResult;\n@@ -14,81 +13,87 @@ import org.slf4j.LoggerFactory;\n /**\n  * Created by Janar Rahumeel (CGI Estonia)\n  */\n+\n+\n public abstract class AbstractValidationResult implements ValidationResult {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractValidationResult.class);\n-  protected List<DigiDoc4JException> errors = new ArrayList<>();\n-  protected List<DigiDoc4JException> warnings = new ArrayList<>();\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractValidationResult.class);\n+    protected List<DigiDoc4JException> errors = new ArrayList<>();\n+    protected List<DigiDoc4JException> warnings = new ArrayList<>();\n \n-  @Override\n-  public boolean isValid() {\n+    @Override\n+    public boolean isValid() {\n     return errors.isEmpty();\n-  }\n+    }\n \n-  @Override\n-  public boolean hasWarnings() {\n+    @Override\n+    public boolean hasWarnings() {\n     return CollectionUtils.isNotEmpty(this.warnings);\n-  }\n+    }\n \n   /**\n    * @param configuration configuration context\n    */\n-  public void print(Configuration configuration) {\n+\n+\n+    public void print(Configuration configuration) {\n     if (configuration.getPrintValidationReport()) {\n-      boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n-      if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n-        if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n-              ()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n-        }\n-        if (CollectionUtils.isNotEmpty(this.errors)) {\n-          for (DigiDoc4JException error : this.errors) {\n-            LOGGER.error(error.toString());\n-          }\n-        }\n-        if (CollectionUtils.isNotEmpty(this.warnings)) {\n-          for (DigiDoc4JException warning : this.warnings) {\n-            LOGGER.warn(warning.toString());\n-          }\n+        boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n+        if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n+                                                      if (hasWarningsOnly) {\n+                                                                            Helper.printWarningSection(LOGGER,\n+                                                                                String.format(\"Start of <%s> validation result\", this.getResultName()));\n+                                                      } else {\n+                                                        Helper.printErrorSection(LOGGER,\n+                                                            String.format(\"Start of <%s> validation result\", this.getResultName()));\n+                                                      }\n+                                                      if (CollectionUtils.isNotEmpty(this.errors)) {\n+                                                                            for (DigiDoc4JException error : this.errors) {\n+                                                                                                       LOGGER.error(error.toString());\n+                                                                            }\n+                                                      }\n+                                                      if (CollectionUtils.isNotEmpty(this.warnings)) {\n+                                                                            for (DigiDoc4JException warning : this.warnings) {\n+                                                                                                         LOGGER.warn(warning.toString());\n+                                                                            }\n+                                                      }\n+                                                      if (hasWarningsOnly) {\n+                                                                            Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n+                                                      } else {\n+                                                        Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n+                                                      }\n         }\n-        if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n-              .getResultName()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n-        }\n-      }\n     }\n-  }\n+    }\n \n   /*\n    * RESTRICTED METHODS\n    */\n \n-  protected abstract String getResultName();\n+    protected abstract String getResultName();\n \n   /*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public List<DigiDoc4JException> getErrors() {\n+    @Override\n+    public List<DigiDoc4JException> getErrors() {\n     return errors;\n-  }\n+    }\n+\n \n-  public void setErrors(List<DigiDoc4JException> errors) {\n+    public void setErrors(List<DigiDoc4JException> errors) {\n     this.errors = errors;\n-  }\n+    }\n \n-  @Override\n-  public List<DigiDoc4JException> getWarnings() {\n+    @Override\n+    public List<DigiDoc4JException> getWarnings() {\n     return warnings;\n-  }\n+    }\n \n-  public void setWarnings(List<DigiDoc4JException> warnings) {\n+\n+    public void setWarnings(List<DigiDoc4JException> warnings) {\n     this.warnings = warnings;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/20/AbstractValidationResult.java\nindex 93f23b9d38..465dd4eebf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/20/AbstractValidationResult.java\n@@ -38,57 +38,56 @@ public abstract class AbstractValidationResult implements ValidationResult {\n       boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n       if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n         if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n-              ()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n-        }\n-        if (CollectionUtils.isNotEmpty(this.errors)) {\n-          for (DigiDoc4JException error : this.errors) {\n-            LOGGER.error(error.toString());\n-          }\n-        }\n-        if (CollectionUtils.isNotEmpty(this.warnings)) {\n-          for (DigiDoc4JException warning : this.warnings) {\n-            LOGGER.warn(warning.toString());\n-          }\n-        }\n-        if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n-              .getResultName()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n-        }\n+          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n+    }\n+    if (CollectionUtils.isNotEmpty(this.errors)) {\n+      for (DigiDoc4JException error : this.errors) {\n+        LOGGER.error(error.toString());\n       }\n     }\n+    if (CollectionUtils.isNotEmpty(this.warnings)) {\n+      for (DigiDoc4JException warning : this.warnings) {\n+        LOGGER.warn(warning.toString());\n+      }\n+    }\n+    if (hasWarningsOnly) {\n+      Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n+          .getResultName()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n+    }\n   }\n+}\n+}\n \n-  /*\n+/*\n    * RESTRICTED METHODS\n    */\n \n-  protected abstract String getResultName();\n+protected abstract String getResultName();\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public List<DigiDoc4JException> getErrors() {\n-    return errors;\n-  }\n+@Override\n+public List<DigiDoc4JException> getErrors() {\n+  return errors;\n+}\n \n-  public void setErrors(List<DigiDoc4JException> errors) {\n-    this.errors = errors;\n-  }\n+public void setErrors(List<DigiDoc4JException> errors) {\n+  this.errors = errors;\n+}\n \n-  @Override\n-  public List<DigiDoc4JException> getWarnings() {\n-    return warnings;\n-  }\n+@Override\n+public List<DigiDoc4JException> getWarnings() {\n+  return warnings;\n+}\n \n-  public void setWarnings(List<DigiDoc4JException> warnings) {\n-    this.warnings = warnings;\n-  }\n+public void setWarnings(List<DigiDoc4JException> warnings) {\n+  this.warnings = warnings;\n+}\n \n }\n",
            "diff_size": 51
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "column": "114",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/20/AbstractValidationResult.java\nindex 93f23b9d38..8c73231dc4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/20/AbstractValidationResult.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/20/AbstractValidationResult.java\n@@ -38,57 +38,56 @@ public abstract class AbstractValidationResult implements ValidationResult {\n       boolean hasWarningsOnly = CollectionUtils.isNotEmpty(this.warnings) && this.isValid();\n       if (hasWarningsOnly || CollectionUtils.isNotEmpty(this.errors)) {\n         if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName\n-              ()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n-        }\n-        if (CollectionUtils.isNotEmpty(this.errors)) {\n-          for (DigiDoc4JException error : this.errors) {\n-            LOGGER.error(error.toString());\n-          }\n-        }\n-        if (CollectionUtils.isNotEmpty(this.warnings)) {\n-          for (DigiDoc4JException warning : this.warnings) {\n-            LOGGER.warn(warning.toString());\n-          }\n-        }\n-        if (hasWarningsOnly) {\n-          Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n-              .getResultName()));\n-        } else {\n-          Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n-        }\n+          Helper.printWarningSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName ()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"Start of <%s> validation result\", this.getResultName()));\n+    }\n+    if (CollectionUtils.isNotEmpty(this.errors)) {\n+      for (DigiDoc4JException error : this.errors) {\n+        LOGGER.error(error.toString());\n       }\n     }\n+    if (CollectionUtils.isNotEmpty(this.warnings)) {\n+      for (DigiDoc4JException warning : this.warnings) {\n+        LOGGER.warn(warning.toString());\n+      }\n+    }\n+    if (hasWarningsOnly) {\n+      Helper.printWarningSection(LOGGER, String.format(\"End of <%s> validation result\", this\n+          .getResultName()));\n+    } else {\n+      Helper.printErrorSection(LOGGER, String.format(\"End of <%s> validation result\", this.getResultName()));\n+    }\n   }\n+}\n+}\n \n-  /*\n+/*\n    * RESTRICTED METHODS\n    */\n \n-  protected abstract String getResultName();\n+protected abstract String getResultName();\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  @Override\n-  public List<DigiDoc4JException> getErrors() {\n-    return errors;\n-  }\n+@Override\n+public List<DigiDoc4JException> getErrors() {\n+  return errors;\n+}\n \n-  public void setErrors(List<DigiDoc4JException> errors) {\n-    this.errors = errors;\n-  }\n+public void setErrors(List<DigiDoc4JException> errors) {\n+  this.errors = errors;\n+}\n \n-  @Override\n-  public List<DigiDoc4JException> getWarnings() {\n-    return warnings;\n-  }\n+@Override\n+public List<DigiDoc4JException> getWarnings() {\n+  return warnings;\n+}\n \n-  public void setWarnings(List<DigiDoc4JException> warnings) {\n-    this.warnings = warnings;\n-  }\n+public void setWarnings(List<DigiDoc4JException> warnings) {\n+  this.warnings = warnings;\n+}\n \n }\n",
            "diff_size": 51
        }
    ]
}