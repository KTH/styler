{
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "406",
                "column": "58",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    StringFormatData stringFormatData = (StringFormatData)o;\n    return\n        Objects.equals(this.alignment, stringFormatData.alignment) &&\n        Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/70/StringFormatData.java\nindex 5e1466b991..f1b3277928 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/70/StringFormatData.java\n@@ -403,7 +403,7 @@ public class StringFormatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n+    StringFormatData stringFormatData = (StringFormatData) o;\n     return\n         Objects.equals(this.alignment, stringFormatData.alignment) &&\n         Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/70/StringFormatData.java\nindex 5e1466b991..536d700b1b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/70/StringFormatData.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,369 +50,375 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Allows to specify System.Drawing.StringFormat options.\")\n public class StringFormatData {\n-    /**\n-     * Gets or sets horizontal alignment of the string.\n-     */\n-    @JsonAdapter(AlignmentEnum.Adapter.class)\n-    public enum AlignmentEnum {\n-        NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n-\n-        private String value;\n-\n-        AlignmentEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets horizontal alignment of the string.\n+   */\n+  @JsonAdapter(AlignmentEnum.Adapter.class)\n+  public enum AlignmentEnum {\n+    NEAR(\"Near\"),\n+    CENTER(\"Center\"),\n+    FAR(\"Far\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    AlignmentEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static AlignmentEnum fromValue(String text) {\n-            for (AlignmentEnum b : AlignmentEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< AlignmentEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public AlignmentEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return AlignmentEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n     }\n \n-    /**\n-     * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n-     */\n-    @JsonAdapter(FormatFlagsEnum.Adapter.class)\n-    public enum FormatFlagsEnum {\n-        DIRECTIONRIGHTTOLEFT(\"DirectionRightToLeft\"),\n-        DIRECTIONVERTICAL(\"DirectionVertical\"),\n-        FITBLACKBOX(\"FitBlackBox\"),\n-        DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n-        NOFONTFALLBACK(\"NoFontFallback\"),\n-        MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n-        NOWRAP(\"NoWrap\"),\n-        LINELIMIT(\"LineLimit\"),\n-        NOCLIP(\"NoClip\");\n-\n-        private String value;\n-\n-        FormatFlagsEnum(String value) {\n-            this.value = value;\n+    public static AlignmentEnum fromValue(String text) {\n+      for (AlignmentEnum b : AlignmentEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n \n-        public String getValue() {\n-            return value;\n-        }\n+    public static class Adapter extends TypeAdapter<AlignmentEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public AlignmentEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return AlignmentEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  /**\n+   * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n+   */\n+  @JsonAdapter(FormatFlagsEnum.Adapter.class)\n+  public enum FormatFlagsEnum {\n+    DIRECTIONRIGHTTOLEFT(\"DirectionRightToLeft\"),\n+    DIRECTIONVERTICAL(\"DirectionVertical\"),\n+    FITBLACKBOX(\"FitBlackBox\"),\n+    DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n+    NOFONTFALLBACK(\"NoFontFallback\"),\n+    MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n+    NOWRAP(\"NoWrap\"),\n+    LINELIMIT(\"LineLimit\"),\n+    NOCLIP(\"NoClip\");\n+\n+    private String value;\n+\n+    FormatFlagsEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static FormatFlagsEnum fromValue(String text) {\n-            for (FormatFlagsEnum b : FormatFlagsEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< FormatFlagsEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final FormatFlagsEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public FormatFlagsEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return FormatFlagsEnum.fromValue(String.valueOf(value));\n-            }\n+    public static FormatFlagsEnum fromValue(String text) {\n+      for (FormatFlagsEnum b : FormatFlagsEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    /**\n-     * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n-     */\n-    @JsonAdapter(HotkeyPrefixEnum.Adapter.class)\n-    public enum HotkeyPrefixEnum {\n-        NONE(\"None\"),\n-        SHOW(\"Show\"),\n-        HIDE(\"Hide\");\n+    public static class Adapter extends TypeAdapter<FormatFlagsEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final FormatFlagsEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public FormatFlagsEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return FormatFlagsEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-        private String value;\n+  /**\n+   * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n+   */\n+  @JsonAdapter(HotkeyPrefixEnum.Adapter.class)\n+  public enum HotkeyPrefixEnum {\n+    NONE(\"None\"),\n+    SHOW(\"Show\"),\n+    HIDE(\"Hide\");\n \n-        HotkeyPrefixEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n-        }\n+    HotkeyPrefixEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static HotkeyPrefixEnum fromValue(String text) {\n-            for (HotkeyPrefixEnum b : HotkeyPrefixEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< HotkeyPrefixEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HotkeyPrefixEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HotkeyPrefixEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HotkeyPrefixEnum.fromValue(String.valueOf(value));\n-            }\n+    public static HotkeyPrefixEnum fromValue(String text) {\n+      for (HotkeyPrefixEnum b : HotkeyPrefixEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    /**\n-     * Gets or sets the vertical alignment of the string.\n-     */\n-    @JsonAdapter(LineAlignmentEnum.Adapter.class)\n-    public enum LineAlignmentEnum {\n-        NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n+    public static class Adapter extends TypeAdapter<HotkeyPrefixEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final HotkeyPrefixEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public HotkeyPrefixEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HotkeyPrefixEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-        private String value;\n+  /**\n+   * Gets or sets the vertical alignment of the string.\n+   */\n+  @JsonAdapter(LineAlignmentEnum.Adapter.class)\n+  public enum LineAlignmentEnum {\n+    NEAR(\"Near\"),\n+    CENTER(\"Center\"),\n+    FAR(\"Far\");\n \n-        LineAlignmentEnum(String value) {\n-            this.value = value;\n-        }\n+    private String value;\n \n-        public String getValue() {\n-            return value;\n-        }\n+    LineAlignmentEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static LineAlignmentEnum fromValue(String text) {\n-            for (LineAlignmentEnum b : LineAlignmentEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< LineAlignmentEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final LineAlignmentEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public LineAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return LineAlignmentEnum.fromValue(String.valueOf(value));\n-            }\n+    public static LineAlignmentEnum fromValue(String text) {\n+      for (LineAlignmentEnum b : LineAlignmentEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    /**\n-     * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n-     */\n-    @JsonAdapter(TrimmingEnum.Adapter.class)\n-    public enum TrimmingEnum {\n-        NONE(\"None\"),\n-        CHARACTER(\"Character\"),\n-        WORD(\"Word\"),\n-        ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n-        ELLIPSISWORD(\"EllipsisWord\"),\n-        ELLIPSISPATH(\"EllipsisPath\");\n-\n-        private String value;\n-\n-        TrimmingEnum(String value) {\n-            this.value = value;\n-        }\n+    public static class Adapter extends TypeAdapter<LineAlignmentEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final LineAlignmentEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public LineAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return LineAlignmentEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-        public String getValue() {\n-            return value;\n-        }\n+  /**\n+   * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n+   */\n+  @JsonAdapter(TrimmingEnum.Adapter.class)\n+  public enum TrimmingEnum {\n+    NONE(\"None\"),\n+    CHARACTER(\"Character\"),\n+    WORD(\"Word\"),\n+    ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n+    ELLIPSISWORD(\"EllipsisWord\"),\n+    ELLIPSISPATH(\"EllipsisPath\");\n+\n+    private String value;\n+\n+    TrimmingEnum(String value) {\n+      this.value = value;\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static TrimmingEnum fromValue(String text) {\n-            for (TrimmingEnum b : TrimmingEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< TrimmingEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TrimmingEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TrimmingEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TrimmingEnum.fromValue(String.valueOf(value));\n-            }\n+    public static TrimmingEnum fromValue(String text) {\n+      for (TrimmingEnum b : TrimmingEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"Alignment\")\n-    private AlignmentEnum alignment = null;\n+    public static class Adapter extends TypeAdapter<TrimmingEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TrimmingEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public TrimmingEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TrimmingEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"FormatFlags\")\n-    private FormatFlagsEnum formatFlags = null;\n+  @SerializedName(\"Alignment\")\n+  private AlignmentEnum alignment = null;\n \n-    @SerializedName(\"HotkeyPrefix\")\n-    private HotkeyPrefixEnum hotkeyPrefix = null;\n+  @SerializedName(\"FormatFlags\")\n+  private FormatFlagsEnum formatFlags = null;\n \n-    @SerializedName(\"LineAlignment\")\n-    private LineAlignmentEnum lineAlignment = null;\n+  @SerializedName(\"HotkeyPrefix\")\n+  private HotkeyPrefixEnum hotkeyPrefix = null;\n \n-    @SerializedName(\"Trimming\")\n-    private TrimmingEnum trimming = null;\n-    public StringFormatData alignment(AlignmentEnum alignment) {\n-        this.alignment = alignment;\n-        return this;\n-    }\n+  @SerializedName(\"LineAlignment\")\n+  private LineAlignmentEnum lineAlignment = null;\n \n-    /**\n-     * Gets or sets horizontal alignment of the string.\n-    * @return alignment\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets horizontal alignment of the string.\")\n-    public AlignmentEnum getAlignment() {\n-        return alignment;\n-    }\n+  @SerializedName(\"Trimming\")\n+  private TrimmingEnum trimming = null;\n \n-    public void setAlignment(AlignmentEnum alignment) {\n-        this.alignment = alignment;\n-    }\n+  public StringFormatData alignment(AlignmentEnum alignment) {\n+    this.alignment = alignment;\n+    return this;\n+  }\n \n-    public StringFormatData formatFlags(FormatFlagsEnum formatFlags) {\n-        this.formatFlags = formatFlags;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets horizontal alignment of the string.\n+   *\n+   * @return alignment\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets horizontal alignment of the string.\")\n+  public AlignmentEnum getAlignment() {\n+    return alignment;\n+  }\n \n-    /**\n-     * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n-    * @return formatFlags\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\")\n-    public FormatFlagsEnum getFormatFlags() {\n-        return formatFlags;\n-    }\n+  public void setAlignment(AlignmentEnum alignment) {\n+    this.alignment = alignment;\n+  }\n \n-    public void setFormatFlags(FormatFlagsEnum formatFlags) {\n-        this.formatFlags = formatFlags;\n-    }\n+  public StringFormatData formatFlags(FormatFlagsEnum formatFlags) {\n+    this.formatFlags = formatFlags;\n+    return this;\n+  }\n \n-    public StringFormatData hotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n-        this.hotkeyPrefix = hotkeyPrefix;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n+   *\n+   * @return formatFlags\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\")\n+  public FormatFlagsEnum getFormatFlags() {\n+    return formatFlags;\n+  }\n \n-    /**\n-     * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n-    * @return hotkeyPrefix\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\")\n-    public HotkeyPrefixEnum getHotkeyPrefix() {\n-        return hotkeyPrefix;\n-    }\n+  public void setFormatFlags(FormatFlagsEnum formatFlags) {\n+    this.formatFlags = formatFlags;\n+  }\n \n-    public void setHotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n-        this.hotkeyPrefix = hotkeyPrefix;\n-    }\n+  public StringFormatData hotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n+    this.hotkeyPrefix = hotkeyPrefix;\n+    return this;\n+  }\n \n-    public StringFormatData lineAlignment(LineAlignmentEnum lineAlignment) {\n-        this.lineAlignment = lineAlignment;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n+   *\n+   * @return hotkeyPrefix\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\")\n+  public HotkeyPrefixEnum getHotkeyPrefix() {\n+    return hotkeyPrefix;\n+  }\n \n-    /**\n-     * Gets or sets the vertical alignment of the string.\n-    * @return lineAlignment\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the vertical alignment of the string.\")\n-    public LineAlignmentEnum getLineAlignment() {\n-        return lineAlignment;\n-    }\n+  public void setHotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n+    this.hotkeyPrefix = hotkeyPrefix;\n+  }\n \n-    public void setLineAlignment(LineAlignmentEnum lineAlignment) {\n-        this.lineAlignment = lineAlignment;\n-    }\n+  public StringFormatData lineAlignment(LineAlignmentEnum lineAlignment) {\n+    this.lineAlignment = lineAlignment;\n+    return this;\n+  }\n \n-    public StringFormatData trimming(TrimmingEnum trimming) {\n-        this.trimming = trimming;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets the vertical alignment of the string.\n+   *\n+   * @return lineAlignment\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the vertical alignment of the string.\")\n+  public LineAlignmentEnum getLineAlignment() {\n+    return lineAlignment;\n+  }\n \n-    /**\n-     * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n-    * @return trimming\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\")\n-    public TrimmingEnum getTrimming() {\n-        return trimming;\n-    }\n+  public void setLineAlignment(LineAlignmentEnum lineAlignment) {\n+    this.lineAlignment = lineAlignment;\n+  }\n \n-    public void setTrimming(TrimmingEnum trimming) {\n-        this.trimming = trimming;\n-    }\n+  public StringFormatData trimming(TrimmingEnum trimming) {\n+    this.trimming = trimming;\n+    return this;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n+  /**\n+   * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n+   *\n+   * @return trimming\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\")\n+  public TrimmingEnum getTrimming() {\n+    return trimming;\n+  }\n+\n+  public void setTrimming(TrimmingEnum trimming) {\n+    this.trimming = trimming;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    StringFormatData stringFormatData = (StringFormatData) o;\n     return\n         Objects.equals(this.alignment, stringFormatData.alignment) &&\n-        Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n-        Objects.equals(this.hotkeyPrefix, stringFormatData.hotkeyPrefix) &&\n-        Objects.equals(this.lineAlignment, stringFormatData.lineAlignment) &&\n-        Objects.equals(this.trimming, stringFormatData.trimming);\n+            Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n+            Objects.equals(this.hotkeyPrefix, stringFormatData.hotkeyPrefix) &&\n+            Objects.equals(this.lineAlignment, stringFormatData.lineAlignment) &&\n+            Objects.equals(this.trimming, stringFormatData.trimming);\n   }\n \n   @Override\n",
            "diff_size": 433
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "427",
                    "column": "54",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/70/StringFormatData.java\nindex 5e1466b991..c17cbad9ea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/70/StringFormatData.java\n@@ -53,8 +53,10 @@ public class StringFormatData {\n     @JsonAdapter(AlignmentEnum.Adapter.class)\n     public enum AlignmentEnum {\n         NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n+\n+CENTER(\"Center\"),\n+\n+FAR(\"Far\");\n \n         private String value;\n \n@@ -80,7 +82,7 @@ public class StringFormatData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< AlignmentEnum > {\n+        public static class Adapter extends TypeAdapter<AlignmentEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -100,14 +102,22 @@ public class StringFormatData {\n     @JsonAdapter(FormatFlagsEnum.Adapter.class)\n     public enum FormatFlagsEnum {\n         DIRECTIONRIGHTTOLEFT(\"DirectionRightToLeft\"),\n-        DIRECTIONVERTICAL(\"DirectionVertical\"),\n-        FITBLACKBOX(\"FitBlackBox\"),\n-        DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n-        NOFONTFALLBACK(\"NoFontFallback\"),\n-        MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n-        NOWRAP(\"NoWrap\"),\n-        LINELIMIT(\"LineLimit\"),\n-        NOCLIP(\"NoClip\");\n+\n+DIRECTIONVERTICAL(\"DirectionVertical\"),\n+\n+FITBLACKBOX(\"FitBlackBox\"),\n+\n+DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n+\n+NOFONTFALLBACK(\"NoFontFallback\"),\n+\n+MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n+\n+NOWRAP(\"NoWrap\"),\n+\n+LINELIMIT(\"LineLimit\"),\n+\n+NOCLIP(\"NoClip\");\n \n         private String value;\n \n@@ -133,7 +143,7 @@ public class StringFormatData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< FormatFlagsEnum > {\n+        public static class Adapter extends TypeAdapter<FormatFlagsEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final FormatFlagsEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -153,8 +163,10 @@ public class StringFormatData {\n     @JsonAdapter(HotkeyPrefixEnum.Adapter.class)\n     public enum HotkeyPrefixEnum {\n         NONE(\"None\"),\n-        SHOW(\"Show\"),\n-        HIDE(\"Hide\");\n+\n+SHOW(\"Show\"),\n+\n+HIDE(\"Hide\");\n \n         private String value;\n \n@@ -180,7 +192,7 @@ public class StringFormatData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< HotkeyPrefixEnum > {\n+        public static class Adapter extends TypeAdapter<HotkeyPrefixEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final HotkeyPrefixEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -200,8 +212,10 @@ public class StringFormatData {\n     @JsonAdapter(LineAlignmentEnum.Adapter.class)\n     public enum LineAlignmentEnum {\n         NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n+\n+CENTER(\"Center\"),\n+\n+FAR(\"Far\");\n \n         private String value;\n \n@@ -227,7 +241,7 @@ public class StringFormatData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< LineAlignmentEnum > {\n+        public static class Adapter extends TypeAdapter<LineAlignmentEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final LineAlignmentEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -247,11 +261,16 @@ public class StringFormatData {\n     @JsonAdapter(TrimmingEnum.Adapter.class)\n     public enum TrimmingEnum {\n         NONE(\"None\"),\n-        CHARACTER(\"Character\"),\n-        WORD(\"Word\"),\n-        ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n-        ELLIPSISWORD(\"EllipsisWord\"),\n-        ELLIPSISPATH(\"EllipsisPath\");\n+\n+CHARACTER(\"Character\"),\n+\n+WORD(\"Word\"),\n+\n+ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n+\n+ELLIPSISWORD(\"EllipsisWord\"),\n+\n+ELLIPSISPATH(\"EllipsisPath\");\n \n         private String value;\n \n@@ -277,7 +296,7 @@ public class StringFormatData {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TrimmingEnum > {\n+        public static class Adapter extends TypeAdapter<TrimmingEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TrimmingEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -305,7 +324,8 @@ public class StringFormatData {\n \n     @SerializedName(\"Trimming\")\n     private TrimmingEnum trimming = null;\n-    public StringFormatData alignment(AlignmentEnum alignment) {\n+\n+public StringFormatData alignment(AlignmentEnum alignment) {\n         this.alignment = alignment;\n         return this;\n     }\n@@ -399,13 +419,13 @@ public class StringFormatData {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n-    return\n-        Objects.equals(this.alignment, stringFormatData.alignment) &&\n+\n+StringFormatData stringFormatData = (StringFormatData)o;\n+    return Objects.equals(this.alignment, stringFormatData.alignment) &&\n         Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n         Objects.equals(this.hotkeyPrefix, stringFormatData.hotkeyPrefix) &&\n         Objects.equals(this.lineAlignment, stringFormatData.lineAlignment) &&\n@@ -440,4 +460,4 @@ public class StringFormatData {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/70/StringFormatData.java\nindex 5e1466b991..ebc834efa2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/70/StringFormatData.java\n@@ -45,251 +45,275 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Allows to specify System.Drawing.StringFormat options.\n  */\n+\n+\n @ApiModel(description = \"Allows to specify System.Drawing.StringFormat options.\")\n+\n public class StringFormatData {\n     /**\n      * Gets or sets horizontal alignment of the string.\n      */\n     @JsonAdapter(AlignmentEnum.Adapter.class)\n     public enum AlignmentEnum {\n-        NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n+    NEAR(\"Near\"), CENTER(\"Center\"), FAR(\"Far\");\n \n-        private String value;\n+    private String value;\n \n-        AlignmentEnum(String value) {\n-            this.value = value;\n-        }\n+    AlignmentEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                  return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static AlignmentEnum fromValue(String text) {\n+        for (AlignmentEnum b : AlignmentEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                           return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<AlignmentEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static AlignmentEnum fromValue(String text) {\n-            for (AlignmentEnum b : AlignmentEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< AlignmentEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final AlignmentEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public AlignmentEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return AlignmentEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public AlignmentEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return AlignmentEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n      */\n+\n+\n     @JsonAdapter(FormatFlagsEnum.Adapter.class)\n     public enum FormatFlagsEnum {\n-        DIRECTIONRIGHTTOLEFT(\"DirectionRightToLeft\"),\n-        DIRECTIONVERTICAL(\"DirectionVertical\"),\n-        FITBLACKBOX(\"FitBlackBox\"),\n-        DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n-        NOFONTFALLBACK(\"NoFontFallback\"),\n-        MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n-        NOWRAP(\"NoWrap\"),\n-        LINELIMIT(\"LineLimit\"),\n-        NOCLIP(\"NoClip\");\n-\n-        private String value;\n-\n-        FormatFlagsEnum(String value) {\n-            this.value = value;\n-        }\n+    DIRECTIONRIGHTTOLEFT(\"DirectionRightToLeft\"),\n+\n+    DIRECTIONVERTICAL(\"DirectionVertical\"),\n+\n+    FITBLACKBOX(\"FitBlackBox\"),\n+\n+    DISPLAYFORMATCONTROL(\"DisplayFormatControl\"),\n+\n+    NOFONTFALLBACK(\"NoFontFallback\"),\n+\n+    MEASURETRAILINGSPACES(\"MeasureTrailingSpaces\"),\n+\n+    NOWRAP(\"NoWrap\"),\n+\n+    LINELIMIT(\"LineLimit\"),\n+\n+    NOCLIP(\"NoClip\");\n+\n+    private String value;\n+\n+    FormatFlagsEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n \n-        public String getValue() {\n-            return value;\n+    @Override\n+    public String toString() {\n+                                    return String.valueOf(value);\n+    }\n+\n+    public static FormatFlagsEnum fromValue(String text) {\n+        for (FormatFlagsEnum b : FormatFlagsEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                               return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<FormatFlagsEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final FormatFlagsEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static FormatFlagsEnum fromValue(String text) {\n-            for (FormatFlagsEnum b : FormatFlagsEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< FormatFlagsEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final FormatFlagsEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public FormatFlagsEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return FormatFlagsEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public FormatFlagsEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return FormatFlagsEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n      */\n+\n+\n     @JsonAdapter(HotkeyPrefixEnum.Adapter.class)\n     public enum HotkeyPrefixEnum {\n-        NONE(\"None\"),\n-        SHOW(\"Show\"),\n-        HIDE(\"Hide\");\n+    NONE(\"None\"), SHOW(\"Show\"), HIDE(\"Hide\");\n \n-        private String value;\n+    private String value;\n \n-        HotkeyPrefixEnum(String value) {\n-            this.value = value;\n-        }\n+    HotkeyPrefixEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                     return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static HotkeyPrefixEnum fromValue(String text) {\n+        for (HotkeyPrefixEnum b : HotkeyPrefixEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                 return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<HotkeyPrefixEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final HotkeyPrefixEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static HotkeyPrefixEnum fromValue(String text) {\n-            for (HotkeyPrefixEnum b : HotkeyPrefixEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< HotkeyPrefixEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HotkeyPrefixEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HotkeyPrefixEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HotkeyPrefixEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public HotkeyPrefixEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HotkeyPrefixEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets the vertical alignment of the string.\n      */\n+\n+\n     @JsonAdapter(LineAlignmentEnum.Adapter.class)\n     public enum LineAlignmentEnum {\n-        NEAR(\"Near\"),\n-        CENTER(\"Center\"),\n-        FAR(\"Far\");\n+    NEAR(\"Near\"), CENTER(\"Center\"), FAR(\"Far\");\n \n-        private String value;\n+    private String value;\n \n-        LineAlignmentEnum(String value) {\n-            this.value = value;\n-        }\n+    LineAlignmentEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                      return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static LineAlignmentEnum fromValue(String text) {\n+        for (LineAlignmentEnum b : LineAlignmentEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                   return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<LineAlignmentEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final LineAlignmentEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static LineAlignmentEnum fromValue(String text) {\n-            for (LineAlignmentEnum b : LineAlignmentEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< LineAlignmentEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final LineAlignmentEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public LineAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return LineAlignmentEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public LineAlignmentEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return LineAlignmentEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n      */\n+\n+\n     @JsonAdapter(TrimmingEnum.Adapter.class)\n     public enum TrimmingEnum {\n-        NONE(\"None\"),\n-        CHARACTER(\"Character\"),\n-        WORD(\"Word\"),\n-        ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n-        ELLIPSISWORD(\"EllipsisWord\"),\n-        ELLIPSISPATH(\"EllipsisPath\");\n+    NONE(\"None\"),\n \n-        private String value;\n+    CHARACTER(\"Character\"),\n \n-        TrimmingEnum(String value) {\n-            this.value = value;\n-        }\n+    WORD(\"Word\"),\n+\n+    ELLIPSISCHARACTER(\"EllipsisCharacter\"),\n+\n+    ELLIPSISWORD(\"EllipsisWord\"),\n+\n+    ELLIPSISPATH(\"EllipsisPath\");\n \n-        public String getValue() {\n-            return value;\n+    private String value;\n+\n+    TrimmingEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                 return String.valueOf(value);\n+    }\n+\n+    public static TrimmingEnum fromValue(String text) {\n+        for (TrimmingEnum b : TrimmingEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                         return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<TrimmingEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final TrimmingEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static TrimmingEnum fromValue(String text) {\n-            for (TrimmingEnum b : TrimmingEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< TrimmingEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TrimmingEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TrimmingEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TrimmingEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public TrimmingEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TrimmingEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"Alignment\")\n     private AlignmentEnum alignment = null;\n@@ -305,120 +329,145 @@ public class StringFormatData {\n \n     @SerializedName(\"Trimming\")\n     private TrimmingEnum trimming = null;\n+\n     public StringFormatData alignment(AlignmentEnum alignment) {\n-        this.alignment = alignment;\n-        return this;\n+    this.alignment = alignment;\n+    return this;\n     }\n \n     /**\n      * Gets or sets horizontal alignment of the string.\n     * @return alignment\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets horizontal alignment of the string.\")\n     public AlignmentEnum getAlignment() {\n-        return alignment;\n+    return alignment;\n     }\n \n+\n     public void setAlignment(AlignmentEnum alignment) {\n-        this.alignment = alignment;\n+    this.alignment = alignment;\n     }\n \n+\n     public StringFormatData formatFlags(FormatFlagsEnum formatFlags) {\n-        this.formatFlags = formatFlags;\n-        return this;\n+    this.formatFlags = formatFlags;\n+    return this;\n     }\n \n     /**\n      * Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\n     * @return formatFlags\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a System.Drawing.StringFormatFlags enumeration that contains formatting information.\")\n     public FormatFlagsEnum getFormatFlags() {\n-        return formatFlags;\n+    return formatFlags;\n     }\n \n+\n     public void setFormatFlags(FormatFlagsEnum formatFlags) {\n-        this.formatFlags = formatFlags;\n+    this.formatFlags = formatFlags;\n     }\n \n+\n     public StringFormatData hotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n-        this.hotkeyPrefix = hotkeyPrefix;\n-        return this;\n+    this.hotkeyPrefix = hotkeyPrefix;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\n     * @return hotkeyPrefix\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the System.Drawing.Text.HotkeyPrefix object for this System.Drawing.StringFormat object.\")\n     public HotkeyPrefixEnum getHotkeyPrefix() {\n-        return hotkeyPrefix;\n+    return hotkeyPrefix;\n     }\n \n+\n     public void setHotkeyPrefix(HotkeyPrefixEnum hotkeyPrefix) {\n-        this.hotkeyPrefix = hotkeyPrefix;\n+    this.hotkeyPrefix = hotkeyPrefix;\n     }\n \n+\n     public StringFormatData lineAlignment(LineAlignmentEnum lineAlignment) {\n-        this.lineAlignment = lineAlignment;\n-        return this;\n+    this.lineAlignment = lineAlignment;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the vertical alignment of the string.\n     * @return lineAlignment\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the vertical alignment of the string.\")\n     public LineAlignmentEnum getLineAlignment() {\n-        return lineAlignment;\n+    return lineAlignment;\n     }\n \n+\n     public void setLineAlignment(LineAlignmentEnum lineAlignment) {\n-        this.lineAlignment = lineAlignment;\n+    this.lineAlignment = lineAlignment;\n     }\n \n+\n     public StringFormatData trimming(TrimmingEnum trimming) {\n-        this.trimming = trimming;\n-        return this;\n+    this.trimming = trimming;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\n     * @return trimming\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the System.Drawing.StringTrimming enumeration for this System.Drawing.StringFormat object.\")\n     public TrimmingEnum getTrimming() {\n-        return trimming;\n+    return trimming;\n     }\n \n+\n     public void setTrimming(TrimmingEnum trimming) {\n-        this.trimming = trimming;\n+    this.trimming = trimming;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n-    return\n-        Objects.equals(this.alignment, stringFormatData.alignment) &&\n+\n+        StringFormatData stringFormatData = (StringFormatData) o;\n+        return Objects.equals(this.alignment, stringFormatData.alignment) &&\n         Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n         Objects.equals(this.hotkeyPrefix, stringFormatData.hotkeyPrefix) &&\n-        Objects.equals(this.lineAlignment, stringFormatData.lineAlignment) &&\n-        Objects.equals(this.trimming, stringFormatData.trimming);\n-  }\n+            Objects.equals(this.lineAlignment, stringFormatData.lineAlignment) &&\n+            Objects.equals(this.trimming, stringFormatData.trimming);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(alignment, formatFlags, hotkeyPrefix, lineAlignment, trimming);\n-  }\n+    }\n \n-  @Override\n-  public String toString() {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class StringFormatData {\\n\");\n     sb.append(\"    alignment: \").append(toIndentedString(alignment)).append(\"\\n\");\n@@ -428,16 +477,19 @@ public class StringFormatData {\n     sb.append(\"    trimming: \").append(toIndentedString(trimming)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 337
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/70/StringFormatData.java\nindex 5e1466b991..f1b3277928 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/70/StringFormatData.java\n@@ -403,7 +403,7 @@ public class StringFormatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n+    StringFormatData stringFormatData = (StringFormatData) o;\n     return\n         Objects.equals(this.alignment, stringFormatData.alignment) &&\n         Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/70/StringFormatData.java\nindex 5e1466b991..2baa468792 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/70/StringFormatData.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/70/StringFormatData.java\n@@ -403,7 +403,9 @@ public class StringFormatData {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    StringFormatData stringFormatData = (StringFormatData)o;\n+    StringFormatData stringFormatData = (StringFormatData\n+\n+    ) o;\n     return\n         Objects.equals(this.alignment, stringFormatData.alignment) &&\n         Objects.equals(this.formatFlags, stringFormatData.formatFlags) &&\n",
            "diff_size": 3
        }
    ]
}