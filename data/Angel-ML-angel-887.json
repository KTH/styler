{
    "error_id": "887",
    "information": {
        "errors": [
            {
                "line": "19",
                "column": "7",
                "severity": "error",
                "message": "',' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n      , int startIndex, int endIndex) {\n    super(matrixId, part);\n    this.nodeIds = nodeIds;\n    this.startIndex = startIndex;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "column": "7",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "19",
                    "column": "13",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/887/PartGetNodeFeatsParam.java\nindex 1db07bf0fa..80a997e2af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/887/PartGetNodeFeatsParam.java\n@@ -6,63 +6,63 @@ import io.netty.buffer.ByteBuf;\n \n public class PartGetNodeFeatsParam extends PartitionGetParam {\n \n-  /**\n-   * Node ids\n-   */\n-  private int[] nodeIds;\n+    /**\n+     * Node ids\n+     */\n+    private int[] nodeIds;\n \n-  private int startIndex;\n-  private int endIndex;\n+    private int startIndex;\n+    private int endIndex;\n \n \n-  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n-      , int startIndex, int endIndex) {\n-    super(matrixId, part);\n-    this.nodeIds = nodeIds;\n-    this.startIndex = startIndex;\n-    this.endIndex = endIndex;\n-  }\n+    public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n+            , int startIndex, int endIndex) {\n+        super(matrixId, part);\n+        this.nodeIds = nodeIds;\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+    }\n \n-  public PartGetNodeFeatsParam() {\n-    this(-1, null, null, -1, -1);\n-  }\n+    public PartGetNodeFeatsParam() {\n+        this(-1, null, null, -1, -1);\n+    }\n \n-  public int[] getNodeIds() {\n-    return nodeIds;\n-  }\n+    public int[] getNodeIds() {\n+        return nodeIds;\n+    }\n \n-  public void setNodeIds(int[] nodeIds) {\n-    this.nodeIds = nodeIds;\n-  }\n+    public void setNodeIds(int[] nodeIds) {\n+        this.nodeIds = nodeIds;\n+    }\n \n-  public int getStartIndex() {\n-    return startIndex;\n-  }\n+    public int getStartIndex() {\n+        return startIndex;\n+    }\n \n-  public int getEndIndex() {\n-    return endIndex;\n-  }\n+    public int getEndIndex() {\n+        return endIndex;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    buf.writeInt(endIndex - startIndex);\n-    for (int i = startIndex; i < endIndex; i++) {\n-      buf.writeInt(nodeIds[i]);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        buf.writeInt(endIndex - startIndex);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            buf.writeInt(nodeIds[i]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    nodeIds = new int[buf.readInt()];\n-    for (int i = 0; i < nodeIds.length; i++) {\n-      nodeIds[i] = buf.readInt();\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        nodeIds = new int[buf.readInt()];\n+        for (int i = 0; i < nodeIds.length; i++) {\n+            nodeIds[i] = buf.readInt();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + 4 + 4 * nodeIds.length;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + 4 + 4 * nodeIds.length;\n+    }\n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/887/PartGetNodeFeatsParam.java\nindex 1db07bf0fa..00b403685d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/887/PartGetNodeFeatsParam.java\n@@ -10,13 +10,11 @@ public class PartGetNodeFeatsParam extends PartitionGetParam {\n    * Node ids\n    */\n   private int[] nodeIds;\n-\n-  private int startIndex;\n+private int startIndex;\n   private int endIndex;\n \n \n-  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n-      , int startIndex, int endIndex) {\n+  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds, int startIndex, int endIndex) {\n     super(matrixId, part);\n     this.nodeIds = nodeIds;\n     this.startIndex = startIndex;\n@@ -65,4 +63,4 @@ public class PartGetNodeFeatsParam extends PartitionGetParam {\n   public int bufferLen() {\n     return super.bufferLen() + 4 + 4 * nodeIds.length;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "9",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/887/PartGetNodeFeatsParam.java\nindex 1db07bf0fa..77c880fdbd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/887/PartGetNodeFeatsParam.java\n@@ -9,60 +9,57 @@ public class PartGetNodeFeatsParam extends PartitionGetParam {\n   /**\n    * Node ids\n    */\n-  private int[] nodeIds;\n+    private int[] nodeIds;\n+    private int startIndex;\n+    private int endIndex;\n \n-  private int startIndex;\n-  private int endIndex;\n-\n-\n-  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n-      , int startIndex, int endIndex) {\n+    public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds, int startIndex, int endIndex) {\n     super(matrixId, part);\n     this.nodeIds = nodeIds;\n     this.startIndex = startIndex;\n     this.endIndex = endIndex;\n-  }\n+    }\n \n-  public PartGetNodeFeatsParam() {\n+    public PartGetNodeFeatsParam() {\n     this(-1, null, null, -1, -1);\n-  }\n+    }\n \n-  public int[] getNodeIds() {\n+    public int[] getNodeIds() {\n     return nodeIds;\n-  }\n+    }\n \n-  public void setNodeIds(int[] nodeIds) {\n+    public void setNodeIds(int[] nodeIds) {\n     this.nodeIds = nodeIds;\n-  }\n+    }\n \n-  public int getStartIndex() {\n+    public int getStartIndex() {\n     return startIndex;\n-  }\n+    }\n \n-  public int getEndIndex() {\n+    public int getEndIndex() {\n     return endIndex;\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n     buf.writeInt(endIndex - startIndex);\n     for (int i = startIndex; i < endIndex; i++) {\n-      buf.writeInt(nodeIds[i]);\n+        buf.writeInt(nodeIds[i]);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n     nodeIds = new int[buf.readInt()];\n     for (int i = 0; i < nodeIds.length; i++) {\n-      nodeIds[i] = buf.readInt();\n+        nodeIds[i] = buf.readInt();\n+    }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     return super.bufferLen() + 4 + 4 * nodeIds.length;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "7",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/887/PartGetNodeFeatsParam.java\nindex 1db07bf0fa..6f46b65b0b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/887/PartGetNodeFeatsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/887/PartGetNodeFeatsParam.java\n@@ -15,54 +15,53 @@ public class PartGetNodeFeatsParam extends PartitionGetParam {\n   private int endIndex;\n \n \n-  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds\n-      , int startIndex, int endIndex) {\n-    super(matrixId, part);\n-    this.nodeIds = nodeIds;\n-    this.startIndex = startIndex;\n-    this.endIndex = endIndex;\n-  }\n+  public PartGetNodeFeatsParam(int matrixId, PartitionKey part, int[] nodeIds , int startIndex, int endIndex) {\n+super(matrixId, part);\n+this.nodeIds = nodeIds;\n+this.startIndex = startIndex;\n+this.endIndex = endIndex;\n+}\n \n-  public PartGetNodeFeatsParam() {\n-    this(-1, null, null, -1, -1);\n-  }\n+public PartGetNodeFeatsParam() {\n+  this(-1, null, null, -1, -1);\n+}\n \n-  public int[] getNodeIds() {\n-    return nodeIds;\n-  }\n+public int[] getNodeIds() {\n+  return nodeIds;\n+}\n \n-  public void setNodeIds(int[] nodeIds) {\n-    this.nodeIds = nodeIds;\n-  }\n+public void setNodeIds(int[] nodeIds) {\n+  this.nodeIds = nodeIds;\n+}\n \n-  public int getStartIndex() {\n-    return startIndex;\n-  }\n+public int getStartIndex() {\n+  return startIndex;\n+}\n \n-  public int getEndIndex() {\n-    return endIndex;\n-  }\n+public int getEndIndex() {\n+  return endIndex;\n+}\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    buf.writeInt(endIndex - startIndex);\n-    for (int i = startIndex; i < endIndex; i++) {\n-      buf.writeInt(nodeIds[i]);\n-    }\n+@Override\n+public void serialize(ByteBuf buf) {\n+  super.serialize(buf);\n+  buf.writeInt(endIndex - startIndex);\n+  for (int i = startIndex; i < endIndex; i++) {\n+    buf.writeInt(nodeIds[i]);\n   }\n+}\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    nodeIds = new int[buf.readInt()];\n-    for (int i = 0; i < nodeIds.length; i++) {\n-      nodeIds[i] = buf.readInt();\n-    }\n+@Override\n+public void deserialize(ByteBuf buf) {\n+  super.deserialize(buf);\n+  nodeIds = new int[buf.readInt()];\n+  for (int i = 0; i < nodeIds.length; i++) {\n+    nodeIds[i] = buf.readInt();\n   }\n+}\n \n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + 4 + 4 * nodeIds.length;\n-  }\n+@Override\n+public int bufferLen() {\n+  return super.bufferLen() + 4 + 4 * nodeIds.length;\n+}\n }\n",
            "diff_size": 42
        }
    ]
}