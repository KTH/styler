{
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport com.google.common.collect.HashMultimap;\nimport com.google.common.collect.Multimap;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/0/DomainModule.java\nindex d88ee7de60..974208b6e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/0/DomainModule.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.HashMultimap;\n@@ -89,8 +90,8 @@ class DomainModule extends AbstractModule {\n         requestInjection(identityInterceptor);\n         bindInterceptor(Matchers.subclassesOf(Factory.class), factoryMethods(), identityInterceptor);\n \n-        \n-        \n+\n+\n         // Domain events\n         Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlersByEvent =\n                 HashMultimap.create();\n@@ -101,10 +102,10 @@ class DomainModule extends AbstractModule {\n         // Domain Event Intercepter\n         for (Class<? extends DomainEventInterceptor> eventInterceptorClass : eventInterceptors) {\n             bind(eventInterceptorClass);\n-            \n+\n         }\n-        \n-        \n+\n+\n         bind(new EventHandlersByEventTypeLiteral()).toInstance(eventHandlersByEvent);\n         bind(DomainEventPublisher.class).to(DomainEventPublisherImpl.class)\n                 .in(Scopes.SINGLETON);\n",
            "diff_size": 6
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/0/DomainModule.java\nindex d88ee7de60..7507da6fbc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/0/DomainModule.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.HashMultimap;\n@@ -50,9 +51,9 @@ class DomainModule extends AbstractModule {\n     private final Collection<Class<? extends DomainEventInterceptor>> eventInterceptors;\n \n     DomainModule(Map<Key<?>, Class<?>> bindings, Collection<BindingStrategy> bindingStrategies,\n-            Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses,\n-            Collection<Class<? extends DomainEventInterceptor>> eventInterceptors,\n-            Collection<Class<? extends DomainEventHandler>> eventHandlerClasses) {\n+                 Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses,\n+                 Collection<Class<? extends DomainEventInterceptor>> eventInterceptors,\n+                 Collection<Class<? extends DomainEventHandler>> eventHandlerClasses) {\n         this.bindings = bindings;\n         this.bindingStrategies = bindingStrategies;\n         this.identityGeneratorClasses = identityGeneratorClasses;\n@@ -89,8 +90,7 @@ class DomainModule extends AbstractModule {\n         requestInjection(identityInterceptor);\n         bindInterceptor(Matchers.subclassesOf(Factory.class), factoryMethods(), identityInterceptor);\n \n-        \n-        \n+\n         // Domain events\n         Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlersByEvent =\n                 HashMultimap.create();\n@@ -101,10 +101,10 @@ class DomainModule extends AbstractModule {\n         // Domain Event Intercepter\n         for (Class<? extends DomainEventInterceptor> eventInterceptorClass : eventInterceptors) {\n             bind(eventInterceptorClass);\n-            \n+\n         }\n-        \n-        \n+\n+\n         bind(new EventHandlersByEventTypeLiteral()).toInstance(eventHandlersByEvent);\n         bind(DomainEventPublisher.class).to(DomainEventPublisherImpl.class)\n                 .in(Scopes.SINGLETON);\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 310).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "67",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "83",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "column": "31",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "column": "127",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/0/DomainModule.java\nindex d88ee7de60..32ea32736b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/0/DomainModule.java\n@@ -39,8 +39,9 @@ import org.seedstack.shed.reflect.ExecutablePredicates;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@SuppressWarnings(\"rawtypes\")\n-class DomainModule extends AbstractModule {\n+\n+@SuppressWarnings(\"rawtypes\") class DomainModule extends AbstractModule {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(DomainModule.class);\n     private static final String GET_PRODUCED_CLASS = \"getProducedClass\";\n     private final Map<Key<?>, Class<?>> bindings;\n@@ -49,10 +50,8 @@ class DomainModule extends AbstractModule {\n     private final Collection<Class<? extends DomainEventHandler>> eventHandlerClasses;\n     private final Collection<Class<? extends DomainEventInterceptor>> eventInterceptors;\n \n-    DomainModule(Map<Key<?>, Class<?>> bindings, Collection<BindingStrategy> bindingStrategies,\n-            Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses,\n-            Collection<Class<? extends DomainEventInterceptor>> eventInterceptors,\n-            Collection<Class<? extends DomainEventHandler>> eventHandlerClasses) {\n+\n+    DomainModule(Map<Key<?>, Class<?>> bindings, Collection<BindingStrategy> bindingStrategies, Collection<Class<? extends IdentityGenerator>> identityGeneratorClasses, Collection<Class<? extends DomainEventInterceptor>> eventInterceptors, Collection<Class<? extends DomainEventHandler>> eventHandlerClasses) {\n         this.bindings = bindings;\n         this.bindingStrategies = bindingStrategies;\n         this.identityGeneratorClasses = identityGeneratorClasses;\n@@ -65,24 +64,21 @@ class DomainModule extends AbstractModule {\n         bind(DomainRegistry.class).to(DomainRegistryImpl.class);\n \n         // Simple bindings\n-        for (Entry<Key<?>, Class<?>> binding : bindings.entrySet()) {\n-            LOGGER.trace(\"Binding {} to {}\", binding.getKey(), binding.getValue()\n-                    .getSimpleName());\n+        for(Entry<Key<?>, Class<?>> binding : bindings.entrySet() ) {\n+            LOGGER.trace(\"Binding {} to {}\", binding.getKey(), binding.getValue().getSimpleName());\n             bind(binding.getKey()).to(Classes.cast(binding.getValue()));\n         }\n \n         // Binding strategies\n-        for (BindingStrategy bindingStrategy : bindingStrategies) {\n+        for(BindingStrategy bindingStrategy : bindingStrategies) {\n             bindingStrategy.resolve(binder());\n         }\n \n         // Identity generation\n-        for (Class<? extends IdentityGenerator> identityGeneratorClass : identityGeneratorClasses) {\n+        for(Class<? extends IdentityGenerator> identityGeneratorClass : identityGeneratorClasses) {\n             bind(identityGeneratorClass);\n-            BusinessUtils.getQualifier(identityGeneratorClass)\n-                    .ifPresent(qualifier -> bind(findIdentityGeneratorInterface(identityGeneratorClass))\n-                            .annotatedWith(qualifier)\n-                            .to(identityGeneratorClass));\n+            BusinessUtils.getQualifier(identityGeneratorClass).ifPresent(qualifier-> bind(findIdentityGeneratorInterface(identityGeneratorClass)).annotatedWith(qualifier)\n+.to(identityGeneratorClass));\n         }\n         bind(IdentityService.class).to(IdentityServiceImpl.class);\n         IdentityInterceptor identityInterceptor = new IdentityInterceptor();\n@@ -92,51 +88,40 @@ class DomainModule extends AbstractModule {\n         \n         \n         // Domain events\n-        Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlersByEvent =\n-                HashMultimap.create();\n-        for (Class<? extends DomainEventHandler> eventHandlerClass : eventHandlerClasses) {\n+        Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlersByEvent = HashMultimap.create();\n+        for(Class<? extends DomainEventHandler> eventHandlerClass : eventHandlerClasses) {\n             eventHandlersByEvent.put(getEventClass(eventHandlerClass), eventHandlerClass);\n             bind(eventHandlerClass);\n         }\n         // Domain Event Intercepter\n-        for (Class<? extends DomainEventInterceptor> eventInterceptorClass : eventInterceptors) {\n+        for(Class<? extends DomainEventInterceptor> eventInterceptorClass : eventInterceptors) {\n             bind(eventInterceptorClass);\n-            \n         }\n-        \n-        \n         bind(new EventHandlersByEventTypeLiteral()).toInstance(eventHandlersByEvent);\n-        bind(DomainEventPublisher.class).to(DomainEventPublisherImpl.class)\n-                .in(Scopes.SINGLETON);\n+        bind(DomainEventPublisher.class).to(DomainEventPublisherImpl.class).in(Scopes.SINGLETON);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private Class<DomainEvent> getEventClass(Class<? extends DomainEventHandler> domainEventHandlerClass) {\n+    @SuppressWarnings(\"unchecked\") private Class<DomainEvent> getEventClass(Class<? extends DomainEventHandler> domainEventHandlerClass) {\n         return (Class<DomainEvent>) BusinessUtils.resolveGenerics(DomainEventHandler.class, domainEventHandlerClass)[0];\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private Class<IdentityGenerator> findIdentityGeneratorInterface(\n-            Class<? extends IdentityGenerator> identityGeneratorClass) {\n-        return (Class<IdentityGenerator>) Classes.from(identityGeneratorClass)\n-                .traversingInterfaces()\n-                .traversingSuperclasses()\n-                .classes()\n-                .filter(ClassPredicates.classIsInterface()\n-                        .and(ClassPredicates.classIsAssignableFrom(IdentityGenerator.class)))\n-                .findFirst().<BaseException>orElseThrow(\n-                        () -> BusinessException.createNew(BusinessErrorCode.ILLEGAL_IDENTITY_GENERATOR)\n-                                .put(\"class\", identityGeneratorClass));\n+    @SuppressWarnings(\"unchecked\") private Class<IdentityGenerator> findIdentityGeneratorInterface(Class<? extends IdentityGenerator> identityGeneratorClass) {\n+        return (Class<IdentityGenerator>) Classes.from(identityGeneratorClass).traversingInterfaces()\n+.traversingSuperclasses()\n+.classes()\n+.filter(ClassPredicates.classIsInterface().and(ClassPredicates.classIsAssignableFrom(IdentityGenerator.class)))\n+.findFirst()\n+.<BaseException>orElseThrow(()-> BusinessException.createNew(BusinessErrorCode.ILLEGAL_IDENTITY_GENERATOR).put(\"class\", identityGeneratorClass));\n     }\n \n+\n     private Matcher<Method> factoryMethods() {\n-        return new MethodMatcherBuilder(ExecutablePredicates.<Method>executableBelongsToClassAssignableTo(Factory.class)\n-                .and(m -> !m.getName().equals(GET_PRODUCED_CLASS))\n-                .and(CreateResolver.INSTANCE)\n-        ).build();\n+        return new MethodMatcherBuilder(ExecutablePredicates.<Method>executableBelongsToClassAssignableTo(Factory.class).and(m->\n+                                                                                                                             ! m.getName().equals(GET_PRODUCED_CLASS))\n+.and(CreateResolver.INSTANCE)).build();\n     }\n \n-    private static class EventHandlersByEventTypeLiteral extends TypeLiteral<Multimap<Class<? extends DomainEvent>,\n-            Class<? extends DomainEventHandler>>> {\n+\n+    private static class EventHandlersByEventTypeLiteral extends TypeLiteral<Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>>> {\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/0/DomainModule.java\nindex d88ee7de60..974208b6e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/0/DomainModule.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/0/DomainModule.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.HashMultimap;\n@@ -89,8 +90,8 @@ class DomainModule extends AbstractModule {\n         requestInjection(identityInterceptor);\n         bindInterceptor(Matchers.subclassesOf(Factory.class), factoryMethods(), identityInterceptor);\n \n-        \n-        \n+\n+\n         // Domain events\n         Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlersByEvent =\n                 HashMultimap.create();\n@@ -101,10 +102,10 @@ class DomainModule extends AbstractModule {\n         // Domain Event Intercepter\n         for (Class<? extends DomainEventInterceptor> eventInterceptorClass : eventInterceptors) {\n             bind(eventInterceptorClass);\n-            \n+\n         }\n-        \n-        \n+\n+\n         bind(new EventHandlersByEventTypeLiteral()).toInstance(eventHandlersByEvent);\n         bind(DomainEventPublisher.class).to(DomainEventPublisherImpl.class)\n                 .in(Scopes.SINGLETON);\n",
            "diff_size": 6
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}