{
    "error_id": "152",
    "information": {
        "errors": [
            {
                "line": "432",
                "column": "49",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    DrawingObject drawingObject = (DrawingObject)o;\n    return\n        Objects.equals(this.height, drawingObject.height) &&\n        Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/152/DrawingObject.java\nindex b5742c316d..79948f3184 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/152/DrawingObject.java\n@@ -429,7 +429,7 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/152/DrawingObject.java\nindex b5742c316d..4642bdcd33 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/152/DrawingObject.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,401 +50,412 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Represents Drawing Object DTO.\")\n public class DrawingObject extends DrawingObjectLink {\n-    /**\n-     * Gets or sets specifies where the distance to the image is measured from.\n-     */\n-    @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n-    public enum RelativeHorizontalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        PAGE(\"Page\"),\n-        COLUMN(\"Column\"),\n-        DEFAULT(\"Default\"),\n-        CHARACTER(\"Character\"),\n-        LEFTMARGIN(\"LeftMargin\"),\n-        RIGHTMARGIN(\"RightMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeHorizontalPositionEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets specifies where the distance to the image is measured from.\n+   */\n+  @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n+  public enum RelativeHorizontalPositionEnum {\n+    MARGIN(\"Margin\"),\n+    PAGE(\"Page\"),\n+    COLUMN(\"Column\"),\n+    DEFAULT(\"Default\"),\n+    CHARACTER(\"Character\"),\n+    LEFTMARGIN(\"LeftMargin\"),\n+    RIGHTMARGIN(\"RightMargin\"),\n+    INSIDEMARGIN(\"InsideMargin\"),\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    RelativeHorizontalPositionEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static RelativeHorizontalPositionEnum fromValue(String text) {\n-            for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< RelativeHorizontalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n     }\n \n-    /**\n-     * Gets or sets specifies where the distance to the image measured from.\n-     */\n-    @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n-    public enum RelativeVerticalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        TABLEDEFAULT(\"TableDefault\"),\n-        PAGE(\"Page\"),\n-        PARAGRAPH(\"Paragraph\"),\n-        TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n-        LINE(\"Line\"),\n-        TOPMARGIN(\"TopMargin\"),\n-        BOTTOMMARGIN(\"BottomMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeVerticalPositionEnum(String value) {\n-            this.value = value;\n+    public static RelativeHorizontalPositionEnum fromValue(String text) {\n+      for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n \n-        public String getValue() {\n-            return value;\n-        }\n+    public static class Adapter extends TypeAdapter<RelativeHorizontalPositionEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+      @Override\n+      public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-        public static RelativeVerticalPositionEnum fromValue(String text) {\n-            for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+  /**\n+   * Gets or sets specifies where the distance to the image measured from.\n+   */\n+  @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n+  public enum RelativeVerticalPositionEnum {\n+    MARGIN(\"Margin\"),\n+    TABLEDEFAULT(\"TableDefault\"),\n+    PAGE(\"Page\"),\n+    PARAGRAPH(\"Paragraph\"),\n+    TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n+    LINE(\"Line\"),\n+    TOPMARGIN(\"TopMargin\"),\n+    BOTTOMMARGIN(\"BottomMargin\"),\n+    INSIDEMARGIN(\"InsideMargin\"),\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n \n-        public static class Adapter extends TypeAdapter< RelativeVerticalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    private String value;\n+\n+    RelativeVerticalPositionEnum(String value) {\n+      this.value = value;\n     }\n \n-    /**\n-     * Gets or sets specifies how to wrap text around the image.\n-     */\n-    @JsonAdapter(WrapTypeEnum.Adapter.class)\n-    public enum WrapTypeEnum {\n-        INLINE(\"Inline\"),\n-        TOPBOTTOM(\"TopBottom\"),\n-        SQUARE(\"Square\"),\n-        NONE(\"None\"),\n-        TIGHT(\"Tight\"),\n-        THROUGH(\"Through\");\n-\n-        private String value;\n-\n-        WrapTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public String getValue() {\n-            return value;\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+    public static RelativeVerticalPositionEnum fromValue(String text) {\n+      for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n \n-        public static WrapTypeEnum fromValue(String text) {\n-            for (WrapTypeEnum b : WrapTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public static class Adapter extends TypeAdapter<RelativeVerticalPositionEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets or sets specifies how to wrap text around the image.\n+   */\n+  @JsonAdapter(WrapTypeEnum.Adapter.class)\n+  public enum WrapTypeEnum {\n+    INLINE(\"Inline\"),\n+    TOPBOTTOM(\"TopBottom\"),\n+    SQUARE(\"Square\"),\n+    NONE(\"None\"),\n+    TIGHT(\"Tight\"),\n+    THROUGH(\"Through\");\n+\n+    private String value;\n+\n+    WrapTypeEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< WrapTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return WrapTypeEnum.fromValue(String.valueOf(value));\n-            }\n+    public static WrapTypeEnum fromValue(String text) {\n+      for (WrapTypeEnum b : WrapTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"Height\")\n-    private Double height = null;\n+    public static class Adapter extends TypeAdapter<WrapTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"ImageDataLink\")\n-    private WordsApiLink imageDataLink = null;\n+      @Override\n+      public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return WrapTypeEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"Left\")\n-    private Double left = null;\n+  @SerializedName(\"Height\")\n+  private Double height = null;\n \n-    @SerializedName(\"OleDataLink\")\n-    private WordsApiLink oleDataLink = null;\n+  @SerializedName(\"ImageDataLink\")\n+  private WordsApiLink imageDataLink = null;\n \n-    @SerializedName(\"RelativeHorizontalPosition\")\n-    private RelativeHorizontalPositionEnum relativeHorizontalPosition = null;\n+  @SerializedName(\"Left\")\n+  private Double left = null;\n \n-    @SerializedName(\"RelativeVerticalPosition\")\n-    private RelativeVerticalPositionEnum relativeVerticalPosition = null;\n+  @SerializedName(\"OleDataLink\")\n+  private WordsApiLink oleDataLink = null;\n \n-    @SerializedName(\"RenderLinks\")\n-    private List<WordsApiLink> renderLinks = null;\n+  @SerializedName(\"RelativeHorizontalPosition\")\n+  private RelativeHorizontalPositionEnum relativeHorizontalPosition = null;\n \n-    @SerializedName(\"Top\")\n-    private Double top = null;\n+  @SerializedName(\"RelativeVerticalPosition\")\n+  private RelativeVerticalPositionEnum relativeVerticalPosition = null;\n \n-    @SerializedName(\"Width\")\n-    private Double width = null;\n+  @SerializedName(\"RenderLinks\")\n+  private List<WordsApiLink> renderLinks = null;\n \n-    @SerializedName(\"WrapType\")\n-    private WrapTypeEnum wrapType = null;\n-    public DrawingObject height(Double height) {\n-        this.height = height;\n-        return this;\n-    }\n+  @SerializedName(\"Top\")\n+  private Double top = null;\n \n-    /**\n-     * Gets or sets height of the drawing object in points.\n-    * @return height\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n-    public Double getHeight() {\n-        return height;\n-    }\n+  @SerializedName(\"Width\")\n+  private Double width = null;\n \n-    public void setHeight(Double height) {\n-        this.height = height;\n-    }\n+  @SerializedName(\"WrapType\")\n+  private WrapTypeEnum wrapType = null;\n \n-    public DrawingObject imageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n-        return this;\n-    }\n+  public DrawingObject height(Double height) {\n+    this.height = height;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets link to image data. Can be null if shape does not have an image.\n-    * @return imageDataLink\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n-    public WordsApiLink getImageDataLink() {\n-        return imageDataLink;\n-    }\n+  /**\n+   * Gets or sets height of the drawing object in points.\n+   *\n+   * @return height\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n+  public Double getHeight() {\n+    return height;\n+  }\n \n-    public void setImageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n-    }\n+  public void setHeight(Double height) {\n+    this.height = height;\n+  }\n \n-    public DrawingObject left(Double left) {\n-        this.left = left;\n-        return this;\n-    }\n+  public DrawingObject imageDataLink(WordsApiLink imageDataLink) {\n+    this.imageDataLink = imageDataLink;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets distance in points from the origin to the left side of the image.\n-    * @return left\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n-    public Double getLeft() {\n-        return left;\n-    }\n+  /**\n+   * Gets or sets link to image data. Can be null if shape does not have an image.\n+   *\n+   * @return imageDataLink\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n+  public WordsApiLink getImageDataLink() {\n+    return imageDataLink;\n+  }\n \n-    public void setLeft(Double left) {\n-        this.left = left;\n-    }\n+  public void setImageDataLink(WordsApiLink imageDataLink) {\n+    this.imageDataLink = imageDataLink;\n+  }\n \n-    public DrawingObject oleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n-        return this;\n-    }\n+  public DrawingObject left(Double left) {\n+    this.left = left;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets link to ole object. Can be null if shape does not have ole data.\n-    * @return oleDataLink\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n-    public WordsApiLink getOleDataLink() {\n-        return oleDataLink;\n-    }\n+  /**\n+   * Gets or sets distance in points from the origin to the left side of the image.\n+   *\n+   * @return left\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n+  public Double getLeft() {\n+    return left;\n+  }\n \n-    public void setOleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n-    }\n+  public void setLeft(Double left) {\n+    this.left = left;\n+  }\n \n-    public DrawingObject relativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n-        return this;\n-    }\n+  public DrawingObject oleDataLink(WordsApiLink oleDataLink) {\n+    this.oleDataLink = oleDataLink;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies where the distance to the image is measured from.\n-    * @return relativeHorizontalPosition\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n-    public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n-        return relativeHorizontalPosition;\n-    }\n+  /**\n+   * Gets or sets link to ole object. Can be null if shape does not have ole data.\n+   *\n+   * @return oleDataLink\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n+  public WordsApiLink getOleDataLink() {\n+    return oleDataLink;\n+  }\n \n-    public void setRelativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n-    }\n+  public void setOleDataLink(WordsApiLink oleDataLink) {\n+    this.oleDataLink = oleDataLink;\n+  }\n \n-    public DrawingObject relativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n-        return this;\n-    }\n+  public DrawingObject relativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies where the distance to the image measured from.\n-    * @return relativeVerticalPosition\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n-    public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n-        return relativeVerticalPosition;\n-    }\n+  /**\n+   * Gets or sets specifies where the distance to the image is measured from.\n+   *\n+   * @return relativeHorizontalPosition\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n+  public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n+    return relativeHorizontalPosition;\n+  }\n \n-    public void setRelativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n-    }\n+  public void setRelativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n+  }\n \n-    public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n-        return this;\n-    }\n+  public DrawingObject relativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n+    return this;\n+  }\n \n-    public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n-        if (this.renderLinks == null) {\n-            this.renderLinks = new ArrayList<WordsApiLink>();\n-        }\n-        this.renderLinks.add(renderLinksItem);\n-        return this;\n-    }\n+  /**\n+   * Gets or sets specifies where the distance to the image measured from.\n+   *\n+   * @return relativeVerticalPosition\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n+  public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n+    return relativeVerticalPosition;\n+  }\n \n-    /**\n-     * Gets or sets a list of links that originate from this DrawingObjectDto.\n-    * @return renderLinks\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n-    public List<WordsApiLink> getRenderLinks() {\n-        return renderLinks;\n-    }\n+  public void setRelativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n+  }\n \n-    public void setRenderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n-    }\n+  public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n+    this.renderLinks = renderLinks;\n+    return this;\n+  }\n \n-    public DrawingObject top(Double top) {\n-        this.top = top;\n-        return this;\n+  public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n+    if (this.renderLinks == null) {\n+      this.renderLinks = new ArrayList<WordsApiLink>();\n     }\n+    this.renderLinks.add(renderLinksItem);\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets distance in points from the origin to the top side of the image.\n-    * @return top\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n-    public Double getTop() {\n-        return top;\n-    }\n+  /**\n+   * Gets or sets a list of links that originate from this DrawingObjectDto.\n+   *\n+   * @return renderLinks\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n+  public List<WordsApiLink> getRenderLinks() {\n+    return renderLinks;\n+  }\n \n-    public void setTop(Double top) {\n-        this.top = top;\n-    }\n+  public void setRenderLinks(List<WordsApiLink> renderLinks) {\n+    this.renderLinks = renderLinks;\n+  }\n \n-    public DrawingObject width(Double width) {\n-        this.width = width;\n-        return this;\n-    }\n+  public DrawingObject top(Double top) {\n+    this.top = top;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets width of the drawing objects in points.\n-    * @return width\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n-    public Double getWidth() {\n-        return width;\n-    }\n+  /**\n+   * Gets or sets distance in points from the origin to the top side of the image.\n+   *\n+   * @return top\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n+  public Double getTop() {\n+    return top;\n+  }\n \n-    public void setWidth(Double width) {\n-        this.width = width;\n-    }\n+  public void setTop(Double top) {\n+    this.top = top;\n+  }\n \n-    public DrawingObject wrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n-        return this;\n-    }\n+  public DrawingObject width(Double width) {\n+    this.width = width;\n+    return this;\n+  }\n \n-    /**\n-     * Gets or sets specifies how to wrap text around the image.\n-    * @return wrapType\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n-    public WrapTypeEnum getWrapType() {\n-        return wrapType;\n-    }\n+  /**\n+   * Gets or sets width of the drawing objects in points.\n+   *\n+   * @return width\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n+  public Double getWidth() {\n+    return width;\n+  }\n \n-    public void setWrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n-    }\n+  public void setWidth(Double width) {\n+    this.width = width;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+  public DrawingObject wrapType(WrapTypeEnum wrapType) {\n+    this.wrapType = wrapType;\n+    return this;\n+  }\n+\n+  /**\n+   * Gets or sets specifies how to wrap text around the image.\n+   *\n+   * @return wrapType\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n+  public WrapTypeEnum getWrapType() {\n+    return wrapType;\n+  }\n+\n+  public void setWrapType(WrapTypeEnum wrapType) {\n+    this.wrapType = wrapType;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n-        Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n-        Objects.equals(this.left, drawingObject.left) &&\n-        Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n-        Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n-        Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n-        Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n-        Objects.equals(this.top, drawingObject.top) &&\n-        Objects.equals(this.width, drawingObject.width) &&\n-        Objects.equals(this.wrapType, drawingObject.wrapType) &&\n-        super.equals(o);\n+            Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n+            Objects.equals(this.left, drawingObject.left) &&\n+            Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n+            Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n+            Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n+            Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n+            Objects.equals(this.top, drawingObject.top) &&\n+            Objects.equals(this.width, drawingObject.width) &&\n+            Objects.equals(this.wrapType, drawingObject.wrapType) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 431
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "456",
                    "column": "45",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/152/DrawingObject.java\nindex b5742c316d..61aa66ddf6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/152/DrawingObject.java\n@@ -53,14 +53,22 @@ public class DrawingObject extends DrawingObjectLink {\n     @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n     public enum RelativeHorizontalPositionEnum {\n         MARGIN(\"Margin\"),\n-        PAGE(\"Page\"),\n-        COLUMN(\"Column\"),\n-        DEFAULT(\"Default\"),\n-        CHARACTER(\"Character\"),\n-        LEFTMARGIN(\"LeftMargin\"),\n-        RIGHTMARGIN(\"RightMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+PAGE(\"Page\"),\n+\n+COLUMN(\"Column\"),\n+\n+DEFAULT(\"Default\"),\n+\n+CHARACTER(\"Character\"),\n+\n+LEFTMARGIN(\"LeftMargin\"),\n+\n+RIGHTMARGIN(\"RightMargin\"),\n+\n+INSIDEMARGIN(\"InsideMargin\"),\n+\n+OUTSIDEMARGIN(\"OutsideMargin\");\n \n         private String value;\n \n@@ -86,7 +94,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< RelativeHorizontalPositionEnum > {\n+        public static class Adapter extends TypeAdapter<RelativeHorizontalPositionEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -106,15 +114,24 @@ public class DrawingObject extends DrawingObjectLink {\n     @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n     public enum RelativeVerticalPositionEnum {\n         MARGIN(\"Margin\"),\n-        TABLEDEFAULT(\"TableDefault\"),\n-        PAGE(\"Page\"),\n-        PARAGRAPH(\"Paragraph\"),\n-        TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n-        LINE(\"Line\"),\n-        TOPMARGIN(\"TopMargin\"),\n-        BOTTOMMARGIN(\"BottomMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+TABLEDEFAULT(\"TableDefault\"),\n+\n+PAGE(\"Page\"),\n+\n+PARAGRAPH(\"Paragraph\"),\n+\n+TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n+\n+LINE(\"Line\"),\n+\n+TOPMARGIN(\"TopMargin\"),\n+\n+BOTTOMMARGIN(\"BottomMargin\"),\n+\n+INSIDEMARGIN(\"InsideMargin\"),\n+\n+OUTSIDEMARGIN(\"OutsideMargin\");\n \n         private String value;\n \n@@ -140,7 +157,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< RelativeVerticalPositionEnum > {\n+        public static class Adapter extends TypeAdapter<RelativeVerticalPositionEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -160,11 +177,16 @@ public class DrawingObject extends DrawingObjectLink {\n     @JsonAdapter(WrapTypeEnum.Adapter.class)\n     public enum WrapTypeEnum {\n         INLINE(\"Inline\"),\n-        TOPBOTTOM(\"TopBottom\"),\n-        SQUARE(\"Square\"),\n-        NONE(\"None\"),\n-        TIGHT(\"Tight\"),\n-        THROUGH(\"Through\");\n+\n+TOPBOTTOM(\"TopBottom\"),\n+\n+SQUARE(\"Square\"),\n+\n+NONE(\"None\"),\n+\n+TIGHT(\"Tight\"),\n+\n+THROUGH(\"Through\");\n \n         private String value;\n \n@@ -190,7 +212,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< WrapTypeEnum > {\n+        public static class Adapter extends TypeAdapter<WrapTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -233,7 +255,8 @@ public class DrawingObject extends DrawingObjectLink {\n \n     @SerializedName(\"WrapType\")\n     private WrapTypeEnum wrapType = null;\n-    public DrawingObject height(Double height) {\n+\n+public DrawingObject height(Double height) {\n         this.height = height;\n         return this;\n     }\n@@ -344,7 +367,7 @@ public class DrawingObject extends DrawingObjectLink {\n     public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n         this.renderLinks = renderLinks;\n         return this;\n-    }\n+  }\n \n     public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n         if (this.renderLinks == null) {\n@@ -425,13 +448,13 @@ public class DrawingObject extends DrawingObjectLink {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n-    return\n-        Objects.equals(this.height, drawingObject.height) &&\n+\n+DrawingObject drawingObject = (DrawingObject)o;\n+    return Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n         Objects.equals(this.left, drawingObject.left) &&\n         Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n@@ -478,4 +501,4 @@ public class DrawingObject extends DrawingObjectLink {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/152/DrawingObject.java\nindex b5742c316d..c12dca3f13 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/152/DrawingObject.java\n@@ -45,164 +45,197 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents Drawing Object DTO.\n  */\n+\n+\n @ApiModel(description = \"Represents Drawing Object DTO.\")\n+\n public class DrawingObject extends DrawingObjectLink {\n     /**\n      * Gets or sets specifies where the distance to the image is measured from.\n      */\n     @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n     public enum RelativeHorizontalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        PAGE(\"Page\"),\n-        COLUMN(\"Column\"),\n-        DEFAULT(\"Default\"),\n-        CHARACTER(\"Character\"),\n-        LEFTMARGIN(\"LeftMargin\"),\n-        RIGHTMARGIN(\"RightMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeHorizontalPositionEnum(String value) {\n-            this.value = value;\n-        }\n+    MARGIN(\"Margin\"),\n+\n+    PAGE(\"Page\"),\n+\n+    COLUMN(\"Column\"),\n+\n+    DEFAULT(\"Default\"),\n+\n+    CHARACTER(\"Character\"),\n+\n+    LEFTMARGIN(\"LeftMargin\"),\n+\n+    RIGHTMARGIN(\"RightMargin\"),\n+\n+    INSIDEMARGIN(\"InsideMargin\"),\n+\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+    private String value;\n+\n+    RelativeHorizontalPositionEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                                   return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static RelativeHorizontalPositionEnum fromValue(String text) {\n+        for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                                             return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<RelativeHorizontalPositionEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static RelativeHorizontalPositionEnum fromValue(String text) {\n-            for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< RelativeHorizontalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets specifies where the distance to the image measured from.\n      */\n+\n+\n     @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n     public enum RelativeVerticalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        TABLEDEFAULT(\"TableDefault\"),\n-        PAGE(\"Page\"),\n-        PARAGRAPH(\"Paragraph\"),\n-        TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n-        LINE(\"Line\"),\n-        TOPMARGIN(\"TopMargin\"),\n-        BOTTOMMARGIN(\"BottomMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeVerticalPositionEnum(String value) {\n-            this.value = value;\n-        }\n+    MARGIN(\"Margin\"),\n+\n+    TABLEDEFAULT(\"TableDefault\"),\n+\n+    PAGE(\"Page\"),\n+\n+    PARAGRAPH(\"Paragraph\"),\n+\n+    TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n \n-        public String getValue() {\n-            return value;\n+    LINE(\"Line\"),\n+\n+    TOPMARGIN(\"TopMargin\"),\n+\n+    BOTTOMMARGIN(\"BottomMargin\"),\n+\n+    INSIDEMARGIN(\"InsideMargin\"),\n+\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+    private String value;\n+\n+    RelativeVerticalPositionEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                                 return String.valueOf(value);\n+    }\n+\n+    public static RelativeVerticalPositionEnum fromValue(String text) {\n+        for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                                                         return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<RelativeVerticalPositionEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static RelativeVerticalPositionEnum fromValue(String text) {\n-            for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< RelativeVerticalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n \n     /**\n      * Gets or sets specifies how to wrap text around the image.\n      */\n+\n+\n     @JsonAdapter(WrapTypeEnum.Adapter.class)\n     public enum WrapTypeEnum {\n-        INLINE(\"Inline\"),\n-        TOPBOTTOM(\"TopBottom\"),\n-        SQUARE(\"Square\"),\n-        NONE(\"None\"),\n-        TIGHT(\"Tight\"),\n-        THROUGH(\"Through\");\n+    INLINE(\"Inline\"),\n \n-        private String value;\n+    TOPBOTTOM(\"TopBottom\"),\n \n-        WrapTypeEnum(String value) {\n-            this.value = value;\n-        }\n+    SQUARE(\"Square\"),\n+\n+    NONE(\"None\"),\n+\n+    TIGHT(\"Tight\"),\n+\n+    THROUGH(\"Through\");\n+\n+    private String value;\n+\n+    WrapTypeEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                 return String.valueOf(value);\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public static WrapTypeEnum fromValue(String text) {\n+        for (WrapTypeEnum b : WrapTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                         return b;\n         }\n+        }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<WrapTypeEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static WrapTypeEnum fromValue(String text) {\n-            for (WrapTypeEnum b : WrapTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< WrapTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return WrapTypeEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return WrapTypeEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"Height\")\n     private Double height = null;\n@@ -233,205 +266,249 @@ public class DrawingObject extends DrawingObjectLink {\n \n     @SerializedName(\"WrapType\")\n     private WrapTypeEnum wrapType = null;\n+\n     public DrawingObject height(Double height) {\n-        this.height = height;\n-        return this;\n+    this.height = height;\n+    return this;\n     }\n \n     /**\n      * Gets or sets height of the drawing object in points.\n     * @return height\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n     public Double getHeight() {\n-        return height;\n+    return height;\n     }\n \n+\n     public void setHeight(Double height) {\n-        this.height = height;\n+    this.height = height;\n     }\n \n+\n     public DrawingObject imageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n-        return this;\n+    this.imageDataLink = imageDataLink;\n+    return this;\n     }\n \n     /**\n      * Gets or sets link to image data. Can be null if shape does not have an image.\n     * @return imageDataLink\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n     public WordsApiLink getImageDataLink() {\n-        return imageDataLink;\n+    return imageDataLink;\n     }\n \n+\n     public void setImageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n+    this.imageDataLink = imageDataLink;\n     }\n \n+\n     public DrawingObject left(Double left) {\n-        this.left = left;\n-        return this;\n+    this.left = left;\n+    return this;\n     }\n \n     /**\n      * Gets or sets distance in points from the origin to the left side of the image.\n     * @return left\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n     public Double getLeft() {\n-        return left;\n+    return left;\n     }\n \n+\n     public void setLeft(Double left) {\n-        this.left = left;\n+    this.left = left;\n     }\n \n+\n     public DrawingObject oleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n-        return this;\n+    this.oleDataLink = oleDataLink;\n+    return this;\n     }\n \n     /**\n      * Gets or sets link to ole object. Can be null if shape does not have ole data.\n     * @return oleDataLink\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n     public WordsApiLink getOleDataLink() {\n-        return oleDataLink;\n+    return oleDataLink;\n     }\n \n+\n     public void setOleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n+    this.oleDataLink = oleDataLink;\n     }\n \n+\n     public DrawingObject relativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n-        return this;\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies where the distance to the image is measured from.\n     * @return relativeHorizontalPosition\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n     public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n-        return relativeHorizontalPosition;\n+    return relativeHorizontalPosition;\n     }\n \n+\n     public void setRelativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n     }\n \n+\n     public DrawingObject relativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n-        return this;\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies where the distance to the image measured from.\n     * @return relativeVerticalPosition\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n     public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n-        return relativeVerticalPosition;\n+    return relativeVerticalPosition;\n     }\n \n+\n     public void setRelativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n     }\n \n+\n     public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n-        return this;\n+    this.renderLinks = renderLinks;\n+    return this;\n     }\n \n+\n     public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n-        if (this.renderLinks == null) {\n-            this.renderLinks = new ArrayList<WordsApiLink>();\n-        }\n-        this.renderLinks.add(renderLinksItem);\n-        return this;\n+    if (this.renderLinks == null) {\n+        this.renderLinks = new ArrayList<WordsApiLink>();\n+    }\n+    this.renderLinks.add(renderLinksItem);\n+    return this;\n     }\n \n     /**\n      * Gets or sets a list of links that originate from this DrawingObjectDto.\n     * @return renderLinks\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n     public List<WordsApiLink> getRenderLinks() {\n-        return renderLinks;\n+    return renderLinks;\n     }\n \n+\n     public void setRenderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n+    this.renderLinks = renderLinks;\n     }\n \n+\n     public DrawingObject top(Double top) {\n-        this.top = top;\n-        return this;\n+    this.top = top;\n+    return this;\n     }\n \n     /**\n      * Gets or sets distance in points from the origin to the top side of the image.\n     * @return top\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n     public Double getTop() {\n-        return top;\n+    return top;\n     }\n \n+\n     public void setTop(Double top) {\n-        this.top = top;\n+    this.top = top;\n     }\n \n+\n     public DrawingObject width(Double width) {\n-        this.width = width;\n-        return this;\n+    this.width = width;\n+    return this;\n     }\n \n     /**\n      * Gets or sets width of the drawing objects in points.\n     * @return width\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n     public Double getWidth() {\n-        return width;\n+    return width;\n     }\n \n+\n     public void setWidth(Double width) {\n-        this.width = width;\n+    this.width = width;\n     }\n \n+\n     public DrawingObject wrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n-        return this;\n+    this.wrapType = wrapType;\n+    return this;\n     }\n \n     /**\n      * Gets or sets specifies how to wrap text around the image.\n     * @return wrapType\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n     public WrapTypeEnum getWrapType() {\n-        return wrapType;\n+    return wrapType;\n     }\n \n+\n     public void setWrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n+    this.wrapType = wrapType;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n-    return\n-        Objects.equals(this.height, drawingObject.height) &&\n+\n+        DrawingObject drawingObject = (DrawingObject) o;\n+        return Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n         Objects.equals(this.left, drawingObject.left) &&\n         Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n@@ -440,17 +517,29 @@ public class DrawingObject extends DrawingObjectLink {\n         Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n         Objects.equals(this.top, drawingObject.top) &&\n         Objects.equals(this.width, drawingObject.width) &&\n-        Objects.equals(this.wrapType, drawingObject.wrapType) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.wrapType, drawingObject.wrapType) &&\n+            super.equals(o);\n+    }\n+\n+\n+    @Override\n+    public int hashCode() {\n+    return Objects.hash(height,\n+imageDataLink,\n+left,\n+oleDataLink,\n+relativeHorizontalPosition,\n+relativeVerticalPosition,\n+renderLinks,\n+top,\n+width,\n+wrapType,\n+super.hashCode());\n+    }\n \n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(height, imageDataLink, left, oleDataLink, relativeHorizontalPosition, relativeVerticalPosition, renderLinks, top, width, wrapType, super.hashCode());\n-  }\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class DrawingObject {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -466,16 +555,19 @@ public class DrawingObject extends DrawingObjectLink {\n     sb.append(\"    wrapType: \").append(toIndentedString(wrapType)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 327
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/152/DrawingObject.java\nindex b5742c316d..79948f3184 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/152/DrawingObject.java\n@@ -429,7 +429,7 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/152/DrawingObject.java\nindex b5742c316d..31b1c86d87 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/152/DrawingObject.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/152/DrawingObject.java\n@@ -429,7 +429,8 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject\n+) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 2
        }
    ]
}