{
    "error_id": "205",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Inject\n    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n                                                     final MigrationInfoCache migrationInfoCache ) {\n\n        this.keyspace = keyspace;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..c817090b83 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -54,7 +54,7 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n \n     @Inject\n     public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n+    final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n                                                      final MigrationInfoCache migrationInfoCache ) {\n \n         this.keyspace = keyspace;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..c3f480b321 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.collection.serialization.impl;\n \n \n@@ -47,147 +48,146 @@ import com.netflix.astyanax.MutationBatch;\n public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySerializationStrategy {\n \n \n-    protected final Keyspace keyspace;\n-    private final VersionedMigrationSet<MvccEntitySerializationStrategy> versions;\n-    private final MigrationInfoCache migrationInfoCache;\n-\n+  protected final Keyspace keyspace;\n+  private final VersionedMigrationSet<MvccEntitySerializationStrategy> versions;\n+  private final MigrationInfoCache migrationInfoCache;\n \n-    @Inject\n-    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n-                                                     final MigrationInfoCache migrationInfoCache ) {\n \n-        this.keyspace = keyspace;\n-        this.migrationInfoCache = migrationInfoCache;\n-        this.versions = allVersions;\n-    }\n+  @Inject\n+  public MvccEntitySerializationStrategyProxyImpl(final Keyspace keyspace,\n+                                                  final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n+                                                  final MigrationInfoCache migrationInfoCache) {\n \n+    this.keyspace = keyspace;\n+    this.migrationInfoCache = migrationInfoCache;\n+    this.versions = allVersions;\n+  }\n \n-    @Override\n-    public MutationBatch write( final CollectionScope context, final MvccEntity entity ) {\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public MutationBatch write(final CollectionScope context, final MvccEntity entity) {\n \n-        if ( migration.needsMigration() ) {\n-            final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-            aggregateBatch.mergeShallow( migration.from.write( context, entity ) );\n-            aggregateBatch.mergeShallow( migration.to.write( context, entity ) );\n+    if (migration.needsMigration()) {\n+      final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n \n-            return aggregateBatch;\n-        }\n+      aggregateBatch.mergeShallow(migration.from.write(context, entity));\n+      aggregateBatch.mergeShallow(migration.to.write(context, entity));\n \n-        return migration.to.write( context, entity );\n+      return aggregateBatch;\n     }\n \n+    return migration.to.write(context, entity);\n+  }\n \n-    @Override\n-    public EntitySet load( final CollectionScope scope, final Collection<Id> entityIds, final UUID maxVersion ) {\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public EntitySet load(final CollectionScope scope, final Collection<Id> entityIds, final UUID maxVersion) {\n \n-        if ( migration.needsMigration() ) {\n-            return migration.from.load( scope, entityIds, maxVersion );\n-        }\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-        return migration.to.load( scope, entityIds, maxVersion );\n+    if (migration.needsMigration()) {\n+      return migration.from.load(scope, entityIds, maxVersion);\n     }\n \n+    return migration.to.load(scope, entityIds, maxVersion);\n+  }\n \n \n-    @Override\n-    public Iterator<MvccEntity> loadDescendingHistory( final CollectionScope context, final Id entityId,\n-                                                       final UUID version, final int fetchSize ) {\n-\n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public Iterator<MvccEntity> loadDescendingHistory(final CollectionScope context, final Id entityId,\n+                                                    final UUID version, final int fetchSize) {\n \n-        if ( migration.needsMigration()) {\n-            return migration.from.loadDescendingHistory( context, entityId, version, fetchSize );\n-        }\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-        return migration.to.loadDescendingHistory( context, entityId, version, fetchSize );\n+    if (migration.needsMigration()) {\n+      return migration.from.loadDescendingHistory(context, entityId, version, fetchSize);\n     }\n \n+    return migration.to.loadDescendingHistory(context, entityId, version, fetchSize);\n+  }\n \n-    @Override\n-    public Iterator<MvccEntity> loadAscendingHistory( final CollectionScope context, final Id entityId,\n-                                                      final UUID version, final int fetchSize ) {\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public Iterator<MvccEntity> loadAscendingHistory(final CollectionScope context, final Id entityId,\n+                                                   final UUID version, final int fetchSize) {\n \n-        if ( migration.needsMigration() ) {\n-            return migration.from.loadAscendingHistory( context, entityId, version, fetchSize );\n-        }\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-        return migration.to.loadAscendingHistory( context, entityId, version, fetchSize );\n+    if (migration.needsMigration()) {\n+      return migration.from.loadAscendingHistory(context, entityId, version, fetchSize);\n     }\n \n-    @Override\n-    public Optional<MvccEntity> load( final CollectionScope scope, final Id entityId ) {\n+    return migration.to.loadAscendingHistory(context, entityId, version, fetchSize);\n+  }\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public Optional<MvccEntity> load(final CollectionScope scope, final Id entityId) {\n \n-        if ( migration.needsMigration() ) {\n-            return migration.from.load( scope, entityId );\n-        }\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-        return migration.to.load( scope, entityId );\n+    if (migration.needsMigration()) {\n+      return migration.from.load(scope, entityId);\n     }\n \n+    return migration.to.load(scope, entityId);\n+  }\n \n-    @Override\n-    public MutationBatch mark( final CollectionScope context, final Id entityId, final UUID version ) {\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public MutationBatch mark(final CollectionScope context, final Id entityId, final UUID version) {\n \n-        if ( migration.needsMigration() ) {\n-            final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-            aggregateBatch.mergeShallow( migration.from.mark( context, entityId, version ) );\n-            aggregateBatch.mergeShallow( migration.to.mark( context, entityId, version ) );\n+    if (migration.needsMigration()) {\n+      final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n \n-            return aggregateBatch;\n-        }\n+      aggregateBatch.mergeShallow(migration.from.mark(context, entityId, version));\n+      aggregateBatch.mergeShallow(migration.to.mark(context, entityId, version));\n \n-        return migration.to.mark( context, entityId, version );\n+      return aggregateBatch;\n     }\n \n+    return migration.to.mark(context, entityId, version);\n+  }\n \n-    @Override\n-    public MutationBatch delete( final CollectionScope context, final Id entityId, final UUID version ) {\n \n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+  @Override\n+  public MutationBatch delete(final CollectionScope context, final Id entityId, final UUID version) {\n \n-        if ( migration.needsMigration() ) {\n-            final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-            aggregateBatch.mergeShallow( migration.from.delete( context, entityId, version ) );\n-            aggregateBatch.mergeShallow( migration.to.delete( context, entityId, version ) );\n+    if (migration.needsMigration()) {\n+      final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n \n-            return aggregateBatch;\n-        }\n+      aggregateBatch.mergeShallow(migration.from.delete(context, entityId, version));\n+      aggregateBatch.mergeShallow(migration.to.delete(context, entityId, version));\n \n-        return migration.to.delete( context, entityId, version );\n+      return aggregateBatch;\n     }\n \n-    /**\n-     * Return true if we're on an old version\n-     */\n-    private MigrationRelationship<MvccEntitySerializationStrategy> getMigrationRelationShip() {\n-        return this.versions.getMigrationRelationship(\n-                migrationInfoCache.getVersion( CollectionMigrationPlugin.PLUGIN_NAME ) );\n-    }\n+    return migration.to.delete(context, entityId, version);\n+  }\n \n+  /**\n+   * Return true if we're on an old version\n+   */\n+  private MigrationRelationship<MvccEntitySerializationStrategy> getMigrationRelationShip() {\n+    return this.versions.getMigrationRelationship(\n+        migrationInfoCache.getVersion(CollectionMigrationPlugin.PLUGIN_NAME));\n+  }\n \n-    @Override\n-    public Collection<MultiTennantColumnFamilyDefinition> getColumnFamilies() {\n-        return Collections.emptyList();\n-    }\n \n+  @Override\n+  public Collection<MultiTennantColumnFamilyDefinition> getColumnFamilies() {\n+    return Collections.emptyList();\n+  }\n \n-    @Override\n-    public int getImplementationVersion() {\n-        return 0;\n-    }\n+\n+  @Override\n+  public int getImplementationVersion() {\n+    return 0;\n+  }\n }\n \n",
            "diff_size": 126
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..f4faf435c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -46,18 +46,14 @@ import com.netflix.astyanax.MutationBatch;\n  */\n public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySerializationStrategy {\n \n-\n     protected final Keyspace keyspace;\n     private final VersionedMigrationSet<MvccEntitySerializationStrategy> versions;\n     private final MigrationInfoCache migrationInfoCache;\n \n \n     @Inject\n-    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n-                                                     final MigrationInfoCache migrationInfoCache ) {\n-\n-        this.keyspace = keyspace;\n+    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace, final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions, final MigrationInfoCache migrationInfoCache ) {\n+    this.keyspace = keyspace;\n         this.migrationInfoCache = migrationInfoCache;\n         this.versions = allVersions;\n     }\n@@ -94,14 +90,11 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n     }\n \n \n+@Override\n+    public Iterator<MvccEntity> loadDescendingHistory( final CollectionScope context, final Id entityId, final UUID version, final int fetchSize ) {\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n-    @Override\n-    public Iterator<MvccEntity> loadDescendingHistory( final CollectionScope context, final Id entityId,\n-                                                       final UUID version, final int fetchSize ) {\n-\n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n-        if ( migration.needsMigration()) {\n+        if ( migration.needsMigration() ) {\n             return migration.from.loadDescendingHistory( context, entityId, version, fetchSize );\n         }\n \n@@ -110,10 +103,8 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n \n \n     @Override\n-    public Iterator<MvccEntity> loadAscendingHistory( final CollectionScope context, final Id entityId,\n-                                                      final UUID version, final int fetchSize ) {\n-\n-        final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n+    public Iterator<MvccEntity> loadAscendingHistory( final CollectionScope context, final Id entityId, final UUID version, final int fetchSize ) {\n+    final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n \n         if ( migration.needsMigration() ) {\n             return migration.from.loadAscendingHistory( context, entityId, version, fetchSize );\n@@ -170,7 +161,8 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n         return migration.to.delete( context, entityId, version );\n     }\n \n-    /**\n+\n+/**\n      * Return true if we're on an old version\n      */\n     private MigrationRelationship<MvccEntitySerializationStrategy> getMigrationRelationShip() {\n@@ -189,5 +181,4 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n     public int getImplementationVersion() {\n         return 0;\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..cea479f106 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -21,7 +21,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.UUID;\n-\n import org.apache.usergrid.persistence.collection.CollectionScope;\n import org.apache.usergrid.persistence.collection.EntitySet;\n import org.apache.usergrid.persistence.collection.MvccEntity;\n@@ -32,7 +31,6 @@ import org.apache.usergrid.persistence.core.migration.data.MigrationInfoCache;\n import org.apache.usergrid.persistence.core.migration.data.newimpls.MigrationRelationship;\n import org.apache.usergrid.persistence.core.migration.data.newimpls.VersionedMigrationSet;\n import org.apache.usergrid.persistence.model.entity.Id;\n-\n import com.google.common.base.Optional;\n import com.google.inject.Inject;\n import com.netflix.astyanax.Keyspace;\n@@ -44,19 +42,17 @@ import com.netflix.astyanax.MutationBatch;\n  * migration data goes to both sources and is read from the old source. After the upgrade completes,\n  * it will be available from the new source\n  */\n-public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySerializationStrategy {\n \n \n+public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySerializationStrategy {\n+\n     protected final Keyspace keyspace;\n     private final VersionedMigrationSet<MvccEntitySerializationStrategy> versions;\n     private final MigrationInfoCache migrationInfoCache;\n \n \n     @Inject\n-    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n-                                                     final MigrationInfoCache migrationInfoCache ) {\n-\n+    public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace, final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions, final MigrationInfoCache migrationInfoCache ) {\n         this.keyspace = keyspace;\n         this.migrationInfoCache = migrationInfoCache;\n         this.versions = allVersions;\n@@ -65,117 +61,90 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n \n     @Override\n     public MutationBatch write( final CollectionScope context, final MvccEntity entity ) {\n-\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n-\n             aggregateBatch.mergeShallow( migration.from.write( context, entity ) );\n             aggregateBatch.mergeShallow( migration.to.write( context, entity ) );\n-\n             return aggregateBatch;\n         }\n-\n         return migration.to.write( context, entity );\n     }\n \n \n     @Override\n     public EntitySet load( final CollectionScope scope, final Collection<Id> entityIds, final UUID maxVersion ) {\n-\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             return migration.from.load( scope, entityIds, maxVersion );\n         }\n-\n         return migration.to.load( scope, entityIds, maxVersion );\n     }\n \n \n-\n     @Override\n-    public Iterator<MvccEntity> loadDescendingHistory( final CollectionScope context, final Id entityId,\n-                                                       final UUID version, final int fetchSize ) {\n-\n+    public Iterator<MvccEntity> loadDescendingHistory( final CollectionScope context, final Id entityId, final UUID version, final int fetchSize ) {\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n-        if ( migration.needsMigration()) {\n+        if ( migration.needsMigration() ) {\n             return migration.from.loadDescendingHistory( context, entityId, version, fetchSize );\n         }\n-\n         return migration.to.loadDescendingHistory( context, entityId, version, fetchSize );\n     }\n \n \n     @Override\n-    public Iterator<MvccEntity> loadAscendingHistory( final CollectionScope context, final Id entityId,\n-                                                      final UUID version, final int fetchSize ) {\n-\n+    public Iterator<MvccEntity> loadAscendingHistory( final CollectionScope context, final Id entityId, final UUID version, final int fetchSize ) {\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             return migration.from.loadAscendingHistory( context, entityId, version, fetchSize );\n         }\n-\n         return migration.to.loadAscendingHistory( context, entityId, version, fetchSize );\n     }\n \n+\n     @Override\n     public Optional<MvccEntity> load( final CollectionScope scope, final Id entityId ) {\n-\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             return migration.from.load( scope, entityId );\n         }\n-\n         return migration.to.load( scope, entityId );\n     }\n \n \n     @Override\n     public MutationBatch mark( final CollectionScope context, final Id entityId, final UUID version ) {\n-\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n-\n             aggregateBatch.mergeShallow( migration.from.mark( context, entityId, version ) );\n             aggregateBatch.mergeShallow( migration.to.mark( context, entityId, version ) );\n-\n             return aggregateBatch;\n         }\n-\n         return migration.to.mark( context, entityId, version );\n     }\n \n \n     @Override\n     public MutationBatch delete( final CollectionScope context, final Id entityId, final UUID version ) {\n-\n         final MigrationRelationship<MvccEntitySerializationStrategy> migration = getMigrationRelationShip();\n-\n         if ( migration.needsMigration() ) {\n             final MutationBatch aggregateBatch = keyspace.prepareMutationBatch();\n-\n             aggregateBatch.mergeShallow( migration.from.delete( context, entityId, version ) );\n             aggregateBatch.mergeShallow( migration.to.delete( context, entityId, version ) );\n-\n             return aggregateBatch;\n         }\n-\n         return migration.to.delete( context, entityId, version );\n     }\n \n     /**\n      * Return true if we're on an old version\n      */\n+\n+\n+\n     private MigrationRelationship<MvccEntitySerializationStrategy> getMigrationRelationShip() {\n-        return this.versions.getMigrationRelationship(\n-                migrationInfoCache.getVersion( CollectionMigrationPlugin.PLUGIN_NAME ) );\n+        return this.versions.getMigrationRelationship( migrationInfoCache.getVersion( CollectionMigrationPlugin.PLUGIN_NAME ) );\n     }\n \n \n@@ -189,5 +158,4 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n     public int getImplementationVersion() {\n         return 0;\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..dd1ae87661 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -54,8 +54,7 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n \n     @Inject\n     public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n-                                                     final MigrationInfoCache migrationInfoCache ) {\n+                                           final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions, final MigrationInfoCache migrationInfoCache ) {\n \n         this.keyspace = keyspace;\n         this.migrationInfoCache = migrationInfoCache;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/205/MvccEntitySerializationStrategyProxyImpl.java\nindex 02dfd9da62..c817090b83 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/205/MvccEntitySerializationStrategyProxyImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/205/MvccEntitySerializationStrategyProxyImpl.java\n@@ -54,7 +54,7 @@ public class MvccEntitySerializationStrategyProxyImpl implements MvccEntitySeria\n \n     @Inject\n     public MvccEntitySerializationStrategyProxyImpl( final Keyspace keyspace,\n-                                                     final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n+    final VersionedMigrationSet<MvccEntitySerializationStrategy> allVersions,\n                                                      final MigrationInfoCache migrationInfoCache ) {\n \n         this.keyspace = keyspace;\n",
            "diff_size": 1
        }
    ]
}