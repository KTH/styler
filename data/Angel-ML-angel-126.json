{
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/126/LongDoubleSparseVectorStorage.java\nindex a7f1f38e60..ab91dd1e67 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/126/LongDoubleSparseVectorStorage.java\n@@ -31,255 +31,255 @@ import java.util.Random;\n \n public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n \n-  private Long2DoubleOpenHashMap map;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private long dim;\n-\n-  public LongDoubleSparseVectorStorage() {\n-    super();\n-  }\n-\n-  public LongDoubleSparseVectorStorage(long dim, Long2DoubleOpenHashMap map) {\n-    this.flag = 2;\n-    this.dim = dim;\n-    this.map = map;\n-  }\n-\n-  public LongDoubleSparseVectorStorage(long dim, int capacity) {\n-    this(dim, new Long2DoubleOpenHashMap(capacity));\n-  }\n-\n-  public LongDoubleSparseVectorStorage(long dim) {\n-    this(dim, (int) Math.min(64, Math.max(dim, 0)));\n-  }\n-\n-  public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {\n-    this(dim, new Long2DoubleOpenHashMap(indices, values));\n-  }\n-\n-  @Override\n-  public double get(long idx) {\n-    return map.get(idx);\n-  }\n-\n-  @Override\n-  public void set(long idx, double value) {\n-    map.put(idx, value);\n-  }\n-\n-  @Override\n-  public long[] getIndices() {\n-    return map.keySet().toLongArray();\n-  }\n-\n-  @Override\n-  public ObjectIterator<Long2DoubleMap.Entry> entryIterator() {\n-    return map.long2DoubleEntrySet().fastIterator();\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage clone() {\n-    return new LongDoubleSparseVectorStorage(dim, map.clone());\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage copy() {\n-    return new LongDoubleSparseVectorStorage(dim, map.clone());\n-  }\n-\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse() {\n-    int capacity = map.size();\n-    double[] oneLikeValues = new double[capacity];\n-\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted() {\n-    int capacity = map.size();\n-    double[] oneLikeValues = new double[capacity];\n-    long[] indices = map.keySet().toLongArray();\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse(long dim, int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted(long dim, int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse(int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted(int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySparse() {\n-    return new LongDoubleSparseVectorStorage(dim, map.size());\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySorted() {\n-    return new LongDoubleSortedVectorStorage(dim, map.size());\n-  }\n-\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySparse(long dim, int capacity) {\n-    return new LongDoubleSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySorted(long dim, int capacity) {\n-    return new LongDoubleSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySparse(int capacity) {\n-    return new LongDoubleSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongDoubleVectorStorage emptySorted(int capacity) {\n-    return new LongDoubleSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongSet indexIterator() {\n-    return map.keySet();\n-  }\n-\n-  @Override\n-  public int size() {\n-    return map.size();\n-  }\n-\n-  public void setSize(int size) {\n-  }\n-\n-  @Override\n-  public boolean hasKey(long key) {\n-    return map.containsKey(key);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_DOUBLE_SPARSE_LONGKEY;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    map.clear();\n-  }\n-\n-  @Override\n-  public DoubleIterator valueIterator() {\n-    return map.values().iterator();\n-  }\n-\n-  @Override\n-  public double[] getValues() {\n-    return map.values().toDoubleArray();\n-  }\n+    private Long2DoubleOpenHashMap map;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private long dim;\n+\n+    public LongDoubleSparseVectorStorage() {\n+        super();\n+    }\n+\n+    public LongDoubleSparseVectorStorage(long dim, Long2DoubleOpenHashMap map) {\n+        this.flag = 2;\n+        this.dim = dim;\n+        this.map = map;\n+    }\n+\n+    public LongDoubleSparseVectorStorage(long dim, int capacity) {\n+        this(dim, new Long2DoubleOpenHashMap(capacity));\n+    }\n+\n+    public LongDoubleSparseVectorStorage(long dim) {\n+        this(dim, (int) Math.min(64, Math.max(dim, 0)));\n+    }\n+\n+    public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {\n+        this(dim, new Long2DoubleOpenHashMap(indices, values));\n+    }\n+\n+    @Override\n+    public double get(long idx) {\n+        return map.get(idx);\n+    }\n+\n+    @Override\n+    public void set(long idx, double value) {\n+        map.put(idx, value);\n+    }\n+\n+    @Override\n+    public long[] getIndices() {\n+        return map.keySet().toLongArray();\n+    }\n+\n+    @Override\n+    public ObjectIterator<Long2DoubleMap.Entry> entryIterator() {\n+        return map.long2DoubleEntrySet().fastIterator();\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage clone() {\n+        return new LongDoubleSparseVectorStorage(dim, map.clone());\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage copy() {\n+        return new LongDoubleSparseVectorStorage(dim, map.clone());\n+    }\n+\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse() {\n+        int capacity = map.size();\n+        double[] oneLikeValues = new double[capacity];\n+\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted() {\n+        int capacity = map.size();\n+        double[] oneLikeValues = new double[capacity];\n+        long[] indices = map.keySet().toLongArray();\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse(long dim, int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted(long dim, int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse(int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted(int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySparse() {\n+        return new LongDoubleSparseVectorStorage(dim, map.size());\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySorted() {\n+        return new LongDoubleSortedVectorStorage(dim, map.size());\n+    }\n+\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySparse(long dim, int capacity) {\n+        return new LongDoubleSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySorted(long dim, int capacity) {\n+        return new LongDoubleSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySparse(int capacity) {\n+        return new LongDoubleSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongDoubleVectorStorage emptySorted(int capacity) {\n+        return new LongDoubleSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongSet indexIterator() {\n+        return map.keySet();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    public void setSize(int size) {\n+    }\n+\n+    @Override\n+    public boolean hasKey(long key) {\n+        return map.containsKey(key);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_DOUBLE_SPARSE_LONGKEY;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    @Override\n+    public DoubleIterator valueIterator() {\n+        return map.values().iterator();\n+    }\n+\n+    @Override\n+    public double[] getValues() {\n+        return map.values().toDoubleArray();\n+    }\n }\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/126/LongDoubleSparseVectorStorage.java\nindex a7f1f38e60..bbaed447b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/126/LongDoubleSparseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n@@ -87,8 +86,7 @@ public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n     return new LongDoubleSparseVectorStorage(dim, map.clone());\n   }\n \n-\n-  @Override\n+@Override\n   public LongDoubleVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     double[] oneLikeValues = new double[capacity];\n@@ -111,8 +109,7 @@ public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongDoubleVectorStorage oneLikeSparse(long dim, int capacity) {\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = new long[capacity];\n@@ -198,8 +195,7 @@ public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongDoubleVectorStorage emptySparse() {\n     return new LongDoubleSparseVectorStorage(dim, map.size());\n   }\n@@ -209,8 +205,7 @@ public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n     return new LongDoubleSortedVectorStorage(dim, map.size());\n   }\n \n-\n-  @Override\n+@Override\n   public LongDoubleVectorStorage emptySparse(long dim, int capacity) {\n     return new LongDoubleSparseVectorStorage(dim, capacity);\n   }\n@@ -282,4 +277,4 @@ public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n   public double[] getValues() {\n     return map.values().toDoubleArray();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/126/LongDoubleSparseVectorStorage.java\nindex a7f1f38e60..662e7ea6fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/126/LongDoubleSparseVectorStorage.java\n@@ -24,262 +24,257 @@ import it.unimi.dsi.fastutil.longs.Long2DoubleMap;\n import it.unimi.dsi.fastutil.longs.Long2DoubleOpenHashMap;\n import it.unimi.dsi.fastutil.longs.LongSet;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Random;\n \n public class LongDoubleSparseVectorStorage implements LongDoubleVectorStorage {\n+    private Long2DoubleOpenHashMap map;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private long dim;\n \n-  private Long2DoubleOpenHashMap map;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private long dim;\n-\n-  public LongDoubleSparseVectorStorage() {\n+    public LongDoubleSparseVectorStorage() {\n     super();\n-  }\n+    }\n \n-  public LongDoubleSparseVectorStorage(long dim, Long2DoubleOpenHashMap map) {\n+    public LongDoubleSparseVectorStorage(long dim, Long2DoubleOpenHashMap map) {\n     this.flag = 2;\n     this.dim = dim;\n     this.map = map;\n-  }\n+    }\n \n-  public LongDoubleSparseVectorStorage(long dim, int capacity) {\n+    public LongDoubleSparseVectorStorage(long dim, int capacity) {\n     this(dim, new Long2DoubleOpenHashMap(capacity));\n-  }\n+    }\n \n-  public LongDoubleSparseVectorStorage(long dim) {\n+    public LongDoubleSparseVectorStorage(long dim) {\n     this(dim, (int) Math.min(64, Math.max(dim, 0)));\n-  }\n+    }\n \n-  public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {\n+    public LongDoubleSparseVectorStorage(long dim, long[] indices, double[] values) {\n     this(dim, new Long2DoubleOpenHashMap(indices, values));\n-  }\n+    }\n \n-  @Override\n-  public double get(long idx) {\n+    @Override\n+    public double get(long idx) {\n     return map.get(idx);\n-  }\n+    }\n \n-  @Override\n-  public void set(long idx, double value) {\n+    @Override\n+    public void set(long idx, double value) {\n     map.put(idx, value);\n-  }\n+    }\n \n-  @Override\n-  public long[] getIndices() {\n+    @Override\n+    public long[] getIndices() {\n     return map.keySet().toLongArray();\n-  }\n+    }\n \n-  @Override\n-  public ObjectIterator<Long2DoubleMap.Entry> entryIterator() {\n+    @Override\n+    public ObjectIterator<Long2DoubleMap.Entry> entryIterator() {\n     return map.long2DoubleEntrySet().fastIterator();\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage clone() {\n+    @Override\n+    public LongDoubleVectorStorage clone() {\n     return new LongDoubleSparseVectorStorage(dim, map.clone());\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage copy() {\n+    @Override\n+    public LongDoubleVectorStorage copy() {\n     return new LongDoubleSparseVectorStorage(dim, map.clone());\n-  }\n-\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse() {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     double[] oneLikeValues = new double[capacity];\n-\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted() {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted() {\n     int capacity = map.size();\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = map.keySet().toLongArray();\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse(long dim, int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse(long dim, int capacity) {\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = new long[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n+        long idx = rand.nextInt((int) dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted(long dim, int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted(long dim, int capacity) {\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = new long[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n+        long idx = rand.nextInt((int) dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSparse(int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSparse(int capacity) {\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = new long[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt((int) dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage oneLikeSorted(int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage oneLikeSorted(int capacity) {\n     double[] oneLikeValues = new double[capacity];\n     long[] indices = new long[capacity];\n     HashSet set = new HashSet<Integer>();\n     Random rand = new Random();\n     int j = 0;\n     while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n+        int idx = rand.nextInt((int) dim);\n+        if (!set.contains(idx)) {\n         indices[j] = idx;\n         set.add(idx);\n         j++;\n-      }\n+        }\n     }\n     Arrays.sort(indices);\n     for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+        oneLikeValues[i] = 1;\n     }\n     return new LongDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySparse() {\n+    @Override\n+    public LongDoubleVectorStorage emptySparse() {\n     return new LongDoubleSparseVectorStorage(dim, map.size());\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySorted() {\n+    @Override\n+    public LongDoubleVectorStorage emptySorted() {\n     return new LongDoubleSortedVectorStorage(dim, map.size());\n-  }\n-\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySparse(long dim, int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage emptySparse(long dim, int capacity) {\n     return new LongDoubleSparseVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySorted(long dim, int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage emptySorted(long dim, int capacity) {\n     return new LongDoubleSortedVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySparse(int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage emptySparse(int capacity) {\n     return new LongDoubleSparseVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public LongDoubleVectorStorage emptySorted(int capacity) {\n+    @Override\n+    public LongDoubleVectorStorage emptySorted(int capacity) {\n     return new LongDoubleSortedVectorStorage(dim, capacity);\n-  }\n+    }\n \n-  @Override\n-  public LongSet indexIterator() {\n+    @Override\n+    public LongSet indexIterator() {\n     return map.keySet();\n-  }\n+    }\n \n-  @Override\n-  public int size() {\n+    @Override\n+    public int size() {\n     return map.size();\n-  }\n+    }\n \n-  public void setSize(int size) {\n-  }\n+    public void setSize(int size) {}\n \n-  @Override\n-  public boolean hasKey(long key) {\n+    @Override\n+    public boolean hasKey(long key) {\n     return map.containsKey(key);\n-  }\n+    }\n \n-  @Override\n-  public RowType getType() {\n+    @Override\n+    public RowType getType() {\n     return RowType.T_DOUBLE_SPARSE_LONGKEY;\n-  }\n+    }\n \n-  @Override\n-  public boolean isDense() {\n+    @Override\n+    public boolean isDense() {\n     return flag == 1;\n-  }\n+    }\n \n-  @Override\n-  public boolean isSparse() {\n+    @Override\n+    public boolean isSparse() {\n     return flag == 2;\n-  }\n+    }\n \n-  @Override\n-  public boolean isSorted() {\n+    @Override\n+    public boolean isSorted() {\n     return flag == 4;\n-  }\n+    }\n \n-  @Override\n-  public void clear() {\n+    @Override\n+    public void clear() {\n     map.clear();\n-  }\n+    }\n \n-  @Override\n-  public DoubleIterator valueIterator() {\n+    @Override\n+    public DoubleIterator valueIterator() {\n     return map.values().iterator();\n-  }\n+    }\n \n-  @Override\n-  public double[] getValues() {\n+    @Override\n+    public double[] getValues() {\n     return map.values().toDoubleArray();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 131
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/126/LongDoubleSparseVectorStorage.java\nindex a7f1f38e60..b2d03cb5e1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/126/LongDoubleSparseVectorStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/126/LongDoubleSparseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n",
            "diff_size": 1
        }
    ]
}