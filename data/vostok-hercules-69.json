{
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "264",
                "column": "44",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                return;\n            } catch (HttpProtocolException | UnavailableHostException e) {\n                if (!whiteList.remove(url)){\n                    continue;\n                }\n                if (!greyList.offer(new GreyListTopologyElement(url))) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/69/GateClient.java\nindex e78b02e1fd..021f8b26d3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/69/GateClient.java\n@@ -261,7 +261,7 @@ public class GateClient implements Closeable {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/69/GateClient.java\nindex e78b02e1fd..51dc06102e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/69/GateClient.java\n@@ -61,9 +61,9 @@ public class GateClient implements Closeable {\n         this.greyList = new ArrayBlockingQueue<>(whiteList.size());\n \n         scheduler.scheduleWithFixedDelay(this::updateTopology,\n-                greyListElementsRecoveryTimeMs,\n-                greyListElementsRecoveryTimeMs,\n-                TimeUnit.MILLISECONDS);\n+            greyListElementsRecoveryTimeMs,\n+            greyListElementsRecoveryTimeMs,\n+            TimeUnit.MILLISECONDS);\n \n     }\n \n@@ -79,16 +79,16 @@ public class GateClient implements Closeable {\n         this.client = createHttpClient(requestTimeout, connectionTimeout, connectionCount);\n \n         scheduler.scheduleWithFixedDelay(this::updateTopology,\n-                greyListElementsRecoveryTimeMs,\n-                greyListElementsRecoveryTimeMs,\n-                TimeUnit.MILLISECONDS);\n+            greyListElementsRecoveryTimeMs,\n+            greyListElementsRecoveryTimeMs,\n+            TimeUnit.MILLISECONDS);\n     }\n \n     /**\n      * Request to {@value #PING}\n      *\n      * @param url Gate Url\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @throws BadRequestException      throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n     public void ping(String url) throws BadRequestException, UnavailableHostException, HttpProtocolException {\n@@ -101,15 +101,15 @@ public class GateClient implements Closeable {\n     /**\n      * Request to {@value #SEND_ASYNC}\n      *\n-     * @param url Gate url\n+     * @param url    Gate url\n      * @param apiKey key for sending\n      * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param data   payload\n+     * @throws BadRequestException      throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n     public void sendAsync(String url, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+        throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         sendToHost(url, urlParam -> {\n             HttpPost httpPost = buildRequest(url, apiKey, SEND_ASYNC, stream, data);\n             return sendRequest(httpPost);\n@@ -119,15 +119,15 @@ public class GateClient implements Closeable {\n     /**\n      * Request to {@value #SEND_ACK}\n      *\n-     * @param url Gate url\n+     * @param url    Gate url\n      * @param apiKey key for sending\n      * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param data   payload\n+     * @throws BadRequestException      throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n     public void send(String url, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+        throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         sendToHost(url, urlParam -> {\n             HttpPost httpPost = buildRequest(url, apiKey, SEND_ACK, stream, data);\n             return sendRequest(httpPost);\n@@ -138,11 +138,11 @@ public class GateClient implements Closeable {\n      * Request to {@value #PING}\n      *\n      * @param retryLimit count of attempt to send data to one of the <code>urls</code>' hosts\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void ping(int retryLimit)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, this::ping);\n     }\n \n@@ -150,14 +150,14 @@ public class GateClient implements Closeable {\n      * Request to {@value #SEND_ASYNC}\n      *\n      * @param retryLimit count of attempt to send data to one of the <code>urls</code>' hosts\n-     * @param apiKey key for sending\n-     * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param apiKey     key for sending\n+     * @param stream     topic name in kafka\n+     * @param data       payload\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void sendAsync(int retryLimit, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, url -> sendAsync(url, apiKey, stream, data));\n     }\n \n@@ -165,25 +165,25 @@ public class GateClient implements Closeable {\n      * Request to {@value #SEND_ACK}\n      *\n      * @param retryLimit count of attempt to send data to one of the <code>urls</code>' hosts\n-     * @param apiKey key for sending\n-     * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param apiKey     key for sending\n+     * @param stream     topic name in kafka\n+     * @param data       payload\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void send(int retryLimit, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, url -> send(url, apiKey, stream, data));\n     }\n \n     /**\n      * Request to {@value #PING}. Count of retry is <code>whitelist.size() + 1</code>\n      *\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void ping()\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         ping(whiteList.size() + 1);\n     }\n \n@@ -192,12 +192,12 @@ public class GateClient implements Closeable {\n      *\n      * @param apiKey key for sending\n      * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param data   payload\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void sendAsync(String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         sendAsync(whiteList.size() + 1, apiKey, stream, data);\n     }\n \n@@ -206,12 +206,12 @@ public class GateClient implements Closeable {\n      *\n      * @param apiKey key for sending\n      * @param stream topic name in kafka\n-     * @param data payload\n-     * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n+     * @param data   payload\n+     * @throws BadRequestException         throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n     public void send(String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n         send(whiteList.size() + 1, apiKey, stream, data);\n     }\n \n@@ -243,11 +243,12 @@ public class GateClient implements Closeable {\n     }\n \n     //TODO: metrics\n+\n     /**\n      * Strategy of sending data to addresses pool\n      */\n     private void sendToPool(int retryLimit, HerculesRequestSender sender)\n-            throws BadRequestException, UnavailableClusterException {\n+        throws BadRequestException, UnavailableClusterException {\n \n         for (int count = 0; count < retryLimit; count++) {\n \n@@ -261,7 +262,7 @@ public class GateClient implements Closeable {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n@@ -277,11 +278,12 @@ public class GateClient implements Closeable {\n     }\n \n     //TODO: metrics\n+\n     /**\n      * Strategy of sending data to single host\n      */\n     private void sendToHost(String url, ApacheRequestSender sender)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+        throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         try {\n             int statusCode = sender.send(url);\n \n@@ -328,26 +330,26 @@ public class GateClient implements Closeable {\n     /**\n      * Tuning of {@link CloseableHttpClient}\n      *\n-     * @param requestTimeout request timeout aka socket timeout (in millis)\n+     * @param requestTimeout    request timeout aka socket timeout (in millis)\n      * @param connectionTimeout connection timeout (in millis)\n-     * @param connectionCount maximum client connections\n+     * @param connectionCount   maximum client connections\n      * @return Customized http client\n      */\n     private static CloseableHttpClient createHttpClient(int requestTimeout, int connectionTimeout, int connectionCount) {\n         RequestConfig requestConfig = RequestConfig\n-                .custom()\n-                .setSocketTimeout(requestTimeout)\n-                .setConnectTimeout(connectionTimeout)\n-                .setConnectionRequestTimeout(connectionTimeout)\n-                .build();\n+            .custom()\n+            .setSocketTimeout(requestTimeout)\n+            .setConnectTimeout(connectionTimeout)\n+            .setConnectionRequestTimeout(connectionTimeout)\n+            .build();\n \n         return HttpClientBuilder\n-                .create()\n-                .setDefaultRequestConfig(requestConfig)\n-                .setMaxConnPerRoute(connectionCount)\n-                .setMaxConnTotal(connectionCount)\n-                .setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n-                .build();\n+            .create()\n+            .setDefaultRequestConfig(requestConfig)\n+            .setMaxConnPerRoute(connectionCount)\n+            .setMaxConnTotal(connectionCount)\n+            .setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n+            .build();\n     }\n \n     @FunctionalInterface\n@@ -362,32 +364,32 @@ public class GateClient implements Closeable {\n \n     private static class Props {\n         static final PropertyDescription<Integer> REQUEST_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"requestTimeout\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n+            PropertyDescriptions\n+                .integerProperty(\"requestTimeout\")\n+                .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n+                .withValidator(IntegerValidators.positive())\n+                .build();\n \n         static final PropertyDescription<Integer> CONNECTION_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionTimeout\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n+            PropertyDescriptions\n+                .integerProperty(\"connectionTimeout\")\n+                .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n+                .withValidator(IntegerValidators.positive())\n+                .build();\n \n         static final PropertyDescription<Integer> CONNECTION_COUNT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionCount\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_CONNECTION_COUNT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n+            PropertyDescriptions\n+                .integerProperty(\"connectionCount\")\n+                .withDefaultValue(GateClientDefaults.DEFAULT_CONNECTION_COUNT)\n+                .withValidator(IntegerValidators.positive())\n+                .build();\n \n         static final PropertyDescription<Integer> GREY_LIST_ELEMENTS_RECOVERY_TIME_MS =\n-                PropertyDescriptions\n-                        .integerProperty(\"greyListElementsRecoveryTimeMs\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_RECOVERY_TIME)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n+            PropertyDescriptions\n+                .integerProperty(\"greyListElementsRecoveryTimeMs\")\n+                .withDefaultValue(GateClientDefaults.DEFAULT_RECOVERY_TIME)\n+                .withValidator(IntegerValidators.positive())\n+                .build();\n \n     }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/69/GateClient.java\nindex e78b02e1fd..733791b1b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/69/GateClient.java\n@@ -64,7 +64,6 @@ public class GateClient implements Closeable {\n                 greyListElementsRecoveryTimeMs,\n                 greyListElementsRecoveryTimeMs,\n                 TimeUnit.MILLISECONDS);\n-\n     }\n \n     public GateClient(Properties properties, Topology<String> whiteList) {\n@@ -248,10 +247,8 @@ public class GateClient implements Closeable {\n      */\n     private void sendToPool(int retryLimit, HerculesRequestSender sender)\n             throws BadRequestException, UnavailableClusterException {\n-\n-        for (int count = 0; count < retryLimit; count++) {\n-\n-            if (whiteList.isEmpty()) {\n+    for (int count = 0; count < retryLimit; count++) {\n+    if (whiteList.isEmpty()) {\n                 throw new UnavailableClusterException();\n             }\n \n@@ -261,7 +258,7 @@ public class GateClient implements Closeable {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n@@ -361,33 +358,24 @@ public class GateClient implements Closeable {\n     }\n \n     private static class Props {\n-        static final PropertyDescription<Integer> REQUEST_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"requestTimeout\")\n+        static final PropertyDescription<Integer> REQUEST_TIMEOUT = PropertyDescriptions.integerProperty(\"requestTimeout\")\n                         .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n                         .withValidator(IntegerValidators.positive())\n                         .build();\n \n-        static final PropertyDescription<Integer> CONNECTION_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionTimeout\")\n+        static final PropertyDescription<Integer> CONNECTION_TIMEOUT = PropertyDescriptions.integerProperty(\"connectionTimeout\")\n                         .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n                         .withValidator(IntegerValidators.positive())\n                         .build();\n \n-        static final PropertyDescription<Integer> CONNECTION_COUNT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionCount\")\n+        static final PropertyDescription<Integer> CONNECTION_COUNT = PropertyDescriptions.integerProperty(\"connectionCount\")\n                         .withDefaultValue(GateClientDefaults.DEFAULT_CONNECTION_COUNT)\n                         .withValidator(IntegerValidators.positive())\n                         .build();\n \n-        static final PropertyDescription<Integer> GREY_LIST_ELEMENTS_RECOVERY_TIME_MS =\n-                PropertyDescriptions\n-                        .integerProperty(\"greyListElementsRecoveryTimeMs\")\n+        static final PropertyDescription<Integer> GREY_LIST_ELEMENTS_RECOVERY_TIME_MS = PropertyDescriptions.integerProperty(\"greyListElementsRecoveryTimeMs\")\n                         .withDefaultValue(GateClientDefaults.DEFAULT_RECOVERY_TIME)\n                         .withValidator(IntegerValidators.positive())\n                         .build();\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/69/GateClient.java\nindex e78b02e1fd..6cd88c4c0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/69/GateClient.java\n@@ -22,7 +22,6 @@ import ru.kontur.vostok.hercules.util.concurrent.Topology;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescription;\n import ru.kontur.vostok.hercules.util.properties.PropertyDescriptions;\n import ru.kontur.vostok.hercules.util.validation.IntegerValidators;\n-\n import java.io.Closeable;\n import java.io.IOException;\n import java.util.Properties;\n@@ -38,33 +37,35 @@ import java.util.concurrent.TimeUnit;\n  *\n  * @author Daniil Zhenikhov\n  */\n+\n+\n public class GateClient implements Closeable {\n     private static final Logger LOGGER = LoggerFactory.getLogger(GateClient.class);\n+\n     private static final Random RANDOM = new Random();\n \n     private static final String PING = \"/ping\";\n+\n     private static final String SEND_ACK = \"/stream/send\";\n+\n     private static final String SEND_ASYNC = \"/stream/sendAsync\";\n \n     private final CloseableHttpClient client;\n \n     private final BlockingQueue<GreyListTopologyElement> greyList;\n+\n     private final Topology<String> whiteList;\n+\n     private final int greyListElementsRecoveryTimeMs;\n+\n     private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n \n     public GateClient(Properties properties, CloseableHttpClient client, Topology<String> whiteList) {\n-\n         this.greyListElementsRecoveryTimeMs = Props.GREY_LIST_ELEMENTS_RECOVERY_TIME_MS.extract(properties);\n         this.client = client;\n         this.whiteList = whiteList;\n         this.greyList = new ArrayBlockingQueue<>(whiteList.size());\n-\n-        scheduler.scheduleWithFixedDelay(this::updateTopology,\n-                greyListElementsRecoveryTimeMs,\n-                greyListElementsRecoveryTimeMs,\n-                TimeUnit.MILLISECONDS);\n-\n+        scheduler.scheduleWithFixedDelay(this::updateTopology, greyListElementsRecoveryTimeMs, greyListElementsRecoveryTimeMs, TimeUnit.MILLISECONDS);\n     }\n \n     public GateClient(Properties properties, Topology<String> whiteList) {\n@@ -75,13 +76,8 @@ public class GateClient implements Closeable {\n         this.greyListElementsRecoveryTimeMs = Props.GREY_LIST_ELEMENTS_RECOVERY_TIME_MS.extract(properties);\n         this.whiteList = whiteList;\n         this.greyList = new ArrayBlockingQueue<>(whiteList.size());\n-\n         this.client = createHttpClient(requestTimeout, connectionTimeout, connectionCount);\n-\n-        scheduler.scheduleWithFixedDelay(this::updateTopology,\n-                greyListElementsRecoveryTimeMs,\n-                greyListElementsRecoveryTimeMs,\n-                TimeUnit.MILLISECONDS);\n+        scheduler.scheduleWithFixedDelay(this::updateTopology, greyListElementsRecoveryTimeMs, greyListElementsRecoveryTimeMs, TimeUnit.MILLISECONDS);\n     }\n \n     /**\n@@ -91,11 +87,15 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n+\n     public void ping(String url) throws BadRequestException, UnavailableHostException, HttpProtocolException {\n-        sendToHost(url, urlParam -> {\n+        sendToHost(\n+            url,\n+            urlParam -> {\n             HttpGet httpGet = new HttpGet(urlParam + PING);\n             return sendRequest(httpGet);\n-        });\n+        }\n+        );\n     }\n \n     /**\n@@ -108,8 +108,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n-    public void sendAsync(String url, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+\n+    public void sendAsync(String url, String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         sendToHost(url, urlParam -> {\n             HttpPost httpPost = buildRequest(url, apiKey, SEND_ASYNC, stream, data);\n             return sendRequest(httpPost);\n@@ -126,8 +126,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableHostException throws if was error on server side: 5xx errors or connection errors\n      */\n-    public void send(String url, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+\n+    public void send(String url, String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         sendToHost(url, urlParam -> {\n             HttpPost httpPost = buildRequest(url, apiKey, SEND_ACK, stream, data);\n             return sendRequest(httpPost);\n@@ -141,8 +141,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void ping(int retryLimit)\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void ping(int retryLimit) throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, this::ping);\n     }\n \n@@ -156,8 +156,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void sendAsync(int retryLimit, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void sendAsync(int retryLimit, String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, url -> sendAsync(url, apiKey, stream, data));\n     }\n \n@@ -171,8 +171,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void send(int retryLimit, String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void send(int retryLimit, String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableClusterException {\n         sendToPool(retryLimit, url -> send(url, apiKey, stream, data));\n     }\n \n@@ -182,8 +182,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void ping()\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void ping() throws BadRequestException, UnavailableClusterException {\n         ping(whiteList.size() + 1);\n     }\n \n@@ -196,8 +196,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void sendAsync(String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void sendAsync(String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableClusterException {\n         sendAsync(whiteList.size() + 1, apiKey, stream, data);\n     }\n \n@@ -210,8 +210,8 @@ public class GateClient implements Closeable {\n      * @throws BadRequestException throws if was error on client side: 4xx errors or http protocol errors\n      * @throws UnavailableClusterException throws if was error on addresses pool side: no one of address is unavailable\n      */\n-    public void send(String apiKey, String stream, final byte[] data)\n-            throws BadRequestException, UnavailableClusterException {\n+\n+    public void send(String apiKey, String stream, final byte[] data) throws BadRequestException, UnavailableClusterException {\n         send(whiteList.size() + 1, apiKey, stream, data);\n     }\n \n@@ -226,6 +226,7 @@ public class GateClient implements Closeable {\n     /**\n      * Strategy of updating urls in topology\n      */\n+\n     private void updateTopology() {\n         if (greyList.isEmpty()) {\n             return;\n@@ -246,28 +247,27 @@ public class GateClient implements Closeable {\n     /**\n      * Strategy of sending data to addresses pool\n      */\n-    private void sendToPool(int retryLimit, HerculesRequestSender sender)\n-            throws BadRequestException, UnavailableClusterException {\n \n+    private void sendToPool(int retryLimit, HerculesRequestSender sender) throws BadRequestException, UnavailableClusterException {\n         for (int count = 0; count < retryLimit; count++) {\n-\n             if (whiteList.isEmpty()) {\n                 throw new UnavailableClusterException();\n             }\n \n             String url = whiteList.next();\n-\n             try {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n+\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n                     if (LOGGER.isDebugEnabled()) {\n                         LOGGER.debug(\"Send fails\", e);\n                     }\n+\n                     whiteList.add(url);\n                 }\n             }\n@@ -280,16 +280,15 @@ public class GateClient implements Closeable {\n     /**\n      * Strategy of sending data to single host\n      */\n-    private void sendToHost(String url, ApacheRequestSender sender)\n-            throws BadRequestException, UnavailableHostException, HttpProtocolException {\n+\n+    private void sendToHost(String url, ApacheRequestSender sender) throws BadRequestException, UnavailableHostException, HttpProtocolException {\n         try {\n             int statusCode = sender.send(url);\n-\n             if (statusCode >= 400 && statusCode < 500) {\n                 throw new BadRequestException(statusCode);\n             } else if (statusCode >= 500) {\n-                throw new UnavailableHostException(url);\n-            }\n+                       throw new UnavailableHostException(url);\n+                   }\n         } catch (ClientProtocolException e) {\n             throw new HttpProtocolException(e);\n         } catch (IOException e) {\n@@ -299,7 +298,8 @@ public class GateClient implements Closeable {\n \n     private int sendRequest(HttpUriRequest request) throws IOException {\n         CloseableHttpResponse response = client.execute(request);\n-        int statusCode = response.getStatusLine().getStatusCode();\n+        int statusCode = response.getStatusLine()\n+        .getStatusCode();\n         response.close();\n         return statusCode;\n     }\n@@ -314,14 +314,13 @@ public class GateClient implements Closeable {\n      * @param data   payload\n      * @return formatted http post request\n      */\n+\n     private HttpPost buildRequest(String url, String apiKey, String action, String stream, byte[] data) {\n         HttpPost httpPost = new HttpPost(url + action + \"?stream=\" + stream);\n-\n         httpPost.addHeader(\"apiKey\", apiKey);\n \n         HttpEntity entity = new ByteArrayEntity(data, ContentType.APPLICATION_OCTET_STREAM);\n         httpPost.setEntity(entity);\n-\n         return httpPost;\n     }\n \n@@ -333,21 +332,19 @@ public class GateClient implements Closeable {\n      * @param connectionCount maximum client connections\n      * @return Customized http client\n      */\n+\n     private static CloseableHttpClient createHttpClient(int requestTimeout, int connectionTimeout, int connectionCount) {\n-        RequestConfig requestConfig = RequestConfig\n-                .custom()\n-                .setSocketTimeout(requestTimeout)\n-                .setConnectTimeout(connectionTimeout)\n-                .setConnectionRequestTimeout(connectionTimeout)\n-                .build();\n-\n-        return HttpClientBuilder\n-                .create()\n-                .setDefaultRequestConfig(requestConfig)\n-                .setMaxConnPerRoute(connectionCount)\n-                .setMaxConnTotal(connectionCount)\n-                .setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n-                .build();\n+        RequestConfig requestConfig = RequestConfig.custom()\n+        .setSocketTimeout(requestTimeout)\n+        .setConnectTimeout(connectionTimeout)\n+        .setConnectionRequestTimeout(connectionTimeout)\n+        .build();\n+        return HttpClientBuilder.create()\n+        .setDefaultRequestConfig(requestConfig)\n+        .setMaxConnPerRoute(connectionCount)\n+        .setMaxConnTotal(connectionCount)\n+        .setRetryHandler(new DefaultHttpRequestRetryHandler(0, false))\n+        .build();\n     }\n \n     @FunctionalInterface\n@@ -361,33 +358,24 @@ public class GateClient implements Closeable {\n     }\n \n     private static class Props {\n-        static final PropertyDescription<Integer> REQUEST_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"requestTimeout\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n-\n-        static final PropertyDescription<Integer> CONNECTION_TIMEOUT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionTimeout\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n-\n-        static final PropertyDescription<Integer> CONNECTION_COUNT =\n-                PropertyDescriptions\n-                        .integerProperty(\"connectionCount\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_CONNECTION_COUNT)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n-\n-        static final PropertyDescription<Integer> GREY_LIST_ELEMENTS_RECOVERY_TIME_MS =\n-                PropertyDescriptions\n-                        .integerProperty(\"greyListElementsRecoveryTimeMs\")\n-                        .withDefaultValue(GateClientDefaults.DEFAULT_RECOVERY_TIME)\n-                        .withValidator(IntegerValidators.positive())\n-                        .build();\n-\n+        static final PropertyDescription<Integer> REQUEST_TIMEOUT = PropertyDescriptions.integerProperty(\"requestTimeout\")\n+        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n+        .withValidator(IntegerValidators.positive())\n+        .build();\n+\n+        static final PropertyDescription<Integer> CONNECTION_TIMEOUT = PropertyDescriptions.integerProperty(\"connectionTimeout\")\n+        .withDefaultValue(GateClientDefaults.DEFAULT_TIMEOUT)\n+        .withValidator(IntegerValidators.positive())\n+        .build();\n+\n+        static final PropertyDescription<Integer> CONNECTION_COUNT = PropertyDescriptions.integerProperty(\"connectionCount\")\n+        .withDefaultValue(GateClientDefaults.DEFAULT_CONNECTION_COUNT)\n+        .withValidator(IntegerValidators.positive())\n+        .build();\n+\n+        static final PropertyDescription<Integer> GREY_LIST_ELEMENTS_RECOVERY_TIME_MS = PropertyDescriptions.integerProperty(\"greyListElementsRecoveryTimeMs\")\n+        .withDefaultValue(GateClientDefaults.DEFAULT_RECOVERY_TIME)\n+        .withValidator(IntegerValidators.positive())\n+        .build();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/69/GateClient.java\nindex e78b02e1fd..021f8b26d3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/69/GateClient.java\n@@ -261,7 +261,7 @@ public class GateClient implements Closeable {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/69/GateClient.java\nindex e78b02e1fd..021f8b26d3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/69/GateClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/69/GateClient.java\n@@ -261,7 +261,7 @@ public class GateClient implements Closeable {\n                 sender.send(url);\n                 return;\n             } catch (HttpProtocolException | UnavailableHostException e) {\n-                if (!whiteList.remove(url)){\n+                if (!whiteList.remove(url)) {\n                     continue;\n                 }\n                 if (!greyList.offer(new GreyListTopologyElement(url))) {\n",
            "diff_size": 1
        }
    ]
}