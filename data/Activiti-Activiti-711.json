{
    "error_id": "711",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/711/GetDataObjectsCmd.java\nindex 1abb7e6351..73cefef831 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/711/GetDataObjectsCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -45,7 +46,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n   protected boolean isLocal;\n   protected String locale;\n   protected boolean withLocalizationFallback;\n-  \n+\n   public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n     this.executionId = executionId;\n     this.dataObjectNames = dataObjectNames;\n@@ -72,7 +73,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     if (execution == null) {\n       throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n     }\n-    \n+\n     Map<String, VariableInstance> variables = null;\n \n     if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n@@ -95,7 +96,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     Map<String,DataObject> dataObjects = null;\n     if (variables != null) {\n       dataObjects = new HashMap<>(variables.size());\n-      \n+\n       for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n         String name = entry.getKey();\n         VariableInstance variableEntity = (VariableInstance) entry.getValue();\n@@ -104,7 +105,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n         while (!executionEntity.isScope()) {\n           executionEntity = executionEntity.getParent();\n         }\n-        \n+\n         BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n         ValuedDataObject foundDataObject = null;\n         if (executionEntity.getParentId() == null) {\n@@ -123,14 +124,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         String localizedName = null;\n         String localizedDescription = null;\n-        \n-        if (locale != null && foundDataObject != null) {          \n-          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n+\n+        if (locale != null && foundDataObject != null) {\n+          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(),\n               execution.getProcessDefinitionId(), withLocalizationFallback);\n-          \n+\n           if (languageNode != null) {\n             JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n             if (nameNode != null) {\n@@ -142,14 +143,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         if (foundDataObject != null) {\n-          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n+          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(),\n               foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n         }\n       }\n     }\n-    \n+\n     return dataObjects;\n   }\n }\n",
            "diff_size": 13
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/711/GetDataObjectsCmd.java\nindex 1abb7e6351..fc251e0ebe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/711/GetDataObjectsCmd.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -39,117 +40,117 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n \n public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n-  protected String executionId;\n-  protected Collection<String> dataObjectNames;\n-  protected boolean isLocal;\n-  protected String locale;\n-  protected boolean withLocalizationFallback;\n-  \n-  public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n-    this.executionId = executionId;\n-    this.dataObjectNames = dataObjectNames;\n-    this.isLocal = isLocal;\n-  }\n-\n-  public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal, String locale, boolean withLocalizationFallback) {\n-    this.executionId = executionId;\n-    this.dataObjectNames = dataObjectNames;\n-    this.isLocal = isLocal;\n-    this.locale = locale;\n-    this.withLocalizationFallback = withLocalizationFallback;\n-  }\n-\n-  public Map<String, DataObject> execute(CommandContext commandContext) {\n-\n-    // Verify existance of execution\n-    if (executionId == null) {\n-      throw new ActivitiIllegalArgumentException(\"executionId is null\");\n-    }\n-\n-    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n+    private static final long serialVersionUID = 1L;\n+    protected String executionId;\n+    protected Collection<String> dataObjectNames;\n+    protected boolean isLocal;\n+    protected String locale;\n+    protected boolean withLocalizationFallback;\n \n-    if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+    public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n+        this.executionId = executionId;\n+        this.dataObjectNames = dataObjectNames;\n+        this.isLocal = isLocal;\n     }\n-    \n-    Map<String, VariableInstance> variables = null;\n-\n-    if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n-      // Fetch all\n-      if (isLocal) {\n-        variables = execution.getVariableInstancesLocal();\n-      } else {\n-        variables = execution.getVariableInstances();\n-      }\n-\n-    } else {\n-      // Fetch specific collection of variables\n-      if (isLocal) {\n-        variables = execution.getVariableInstancesLocal(dataObjectNames, false);\n-      } else {\n-        variables = execution.getVariableInstances(dataObjectNames, false);\n-      }\n+\n+    public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal, String locale, boolean withLocalizationFallback) {\n+        this.executionId = executionId;\n+        this.dataObjectNames = dataObjectNames;\n+        this.isLocal = isLocal;\n+        this.locale = locale;\n+        this.withLocalizationFallback = withLocalizationFallback;\n     }\n \n-    Map<String,DataObject> dataObjects = null;\n-    if (variables != null) {\n-      dataObjects = new HashMap<>(variables.size());\n-      \n-      for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n-        String name = entry.getKey();\n-        VariableInstance variableEntity = (VariableInstance) entry.getValue();\n-\n-        ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n-        while (!executionEntity.isScope()) {\n-          executionEntity = executionEntity.getParent();\n+    public Map<String, DataObject> execute(CommandContext commandContext) {\n+\n+        // Verify existance of execution\n+        if (executionId == null) {\n+            throw new ActivitiIllegalArgumentException(\"executionId is null\");\n         }\n-        \n-        BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n-        ValuedDataObject foundDataObject = null;\n-        if (executionEntity.getParentId() == null) {\n-          for (ValuedDataObject dataObject : bpmnModel.getMainProcess().getDataObjects()) {\n-            if (dataObject.getName().equals(variableEntity.getName())) {\n-              foundDataObject = dataObject;\n-              break;\n+\n+        ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n+\n+        if (execution == null) {\n+            throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+        }\n+\n+        Map<String, VariableInstance> variables = null;\n+\n+        if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n+            // Fetch all\n+            if (isLocal) {\n+                variables = execution.getVariableInstancesLocal();\n+            } else {\n+                variables = execution.getVariableInstances();\n             }\n-          }\n+\n         } else {\n-          SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n-          for (ValuedDataObject dataObject : subProcess.getDataObjects()) {\n-            if (dataObject.getName().equals(variableEntity.getName())) {\n-              foundDataObject = dataObject;\n-              break;\n+            // Fetch specific collection of variables\n+            if (isLocal) {\n+                variables = execution.getVariableInstancesLocal(dataObjectNames, false);\n+            } else {\n+                variables = execution.getVariableInstances(dataObjectNames, false);\n             }\n-          }\n         }\n-        \n-        String localizedName = null;\n-        String localizedDescription = null;\n-        \n-        if (locale != null && foundDataObject != null) {          \n-          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n-              execution.getProcessDefinitionId(), withLocalizationFallback);\n-          \n-          if (languageNode != null) {\n-            JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n-            if (nameNode != null) {\n-              localizedName = nameNode.asText();\n-            }\n-            JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n-            if (descriptionNode != null) {\n-              localizedDescription = descriptionNode.asText();\n+\n+        Map<String, DataObject> dataObjects = null;\n+        if (variables != null) {\n+            dataObjects = new HashMap<>(variables.size());\n+\n+            for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n+                String name = entry.getKey();\n+                VariableInstance variableEntity = (VariableInstance) entry.getValue();\n+\n+                ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n+                while (!executionEntity.isScope()) {\n+                    executionEntity = executionEntity.getParent();\n+                }\n+\n+                BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n+                ValuedDataObject foundDataObject = null;\n+                if (executionEntity.getParentId() == null) {\n+                    for (ValuedDataObject dataObject : bpmnModel.getMainProcess().getDataObjects()) {\n+                        if (dataObject.getName().equals(variableEntity.getName())) {\n+                            foundDataObject = dataObject;\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n+                    for (ValuedDataObject dataObject : subProcess.getDataObjects()) {\n+                        if (dataObject.getName().equals(variableEntity.getName())) {\n+                            foundDataObject = dataObject;\n+                            break;\n+                        }\n+                    }\n+                }\n+\n+                String localizedName = null;\n+                String localizedDescription = null;\n+\n+                if (locale != null && foundDataObject != null) {\n+                    ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(),\n+                            execution.getProcessDefinitionId(), withLocalizationFallback);\n+\n+                    if (languageNode != null) {\n+                        JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n+                        if (nameNode != null) {\n+                            localizedName = nameNode.asText();\n+                        }\n+                        JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n+                        if (descriptionNode != null) {\n+                            localizedDescription = descriptionNode.asText();\n+                        }\n+                    }\n+                }\n+\n+                if (foundDataObject != null) {\n+                    dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(),\n+                            foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n+                }\n             }\n-          }\n         }\n-        \n-        if (foundDataObject != null) {\n-          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n-              foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n-        }\n-      }\n+\n+        return dataObjects;\n     }\n-    \n-    return dataObjects;\n-  }\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 50, indentation should be the same level as line 82.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/711/GetDataObjectsCmd.java\nindex 1abb7e6351..1560dfb31d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/711/GetDataObjectsCmd.java\n@@ -17,7 +17,6 @@ import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.SubProcess;\n import org.activiti.bpmn.model.ValuedDataObject;\n@@ -33,123 +32,119 @@ import org.activiti.engine.impl.persistence.entity.VariableInstance;\n import org.activiti.engine.impl.util.ProcessDefinitionUtil;\n import org.activiti.engine.runtime.DataObject;\n import org.activiti.engine.runtime.Execution;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n-  protected String executionId;\n-  protected Collection<String> dataObjectNames;\n-  protected boolean isLocal;\n-  protected String locale;\n-  protected boolean withLocalizationFallback;\n-  \n-  public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n+public class GetDataObjectsCmd implements Command<Map<String, DataObject>>,\n+                                          Serializable {\n+\n+                                              private static final long serialVersionUID = 1L;\n+                                              protected String executionId;\n+                                              protected Collection<String> dataObjectNames;\n+                                              protected boolean isLocal;\n+                                              protected String locale;\n+                                              protected boolean withLocalizationFallback;\n+\n+                                              public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n     this.executionId = executionId;\n     this.dataObjectNames = dataObjectNames;\n     this.isLocal = isLocal;\n-  }\n+                                              }\n \n-  public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal, String locale, boolean withLocalizationFallback) {\n+                                              public GetDataObjectsCmd(String executionId,\n+                                                                       Collection<String> dataObjectNames,\n+                                                                       boolean isLocal,\n+                                                                       String locale, boolean withLocalizationFallback) {\n     this.executionId = executionId;\n     this.dataObjectNames = dataObjectNames;\n     this.isLocal = isLocal;\n     this.locale = locale;\n     this.withLocalizationFallback = withLocalizationFallback;\n-  }\n+                                              }\n \n-  public Map<String, DataObject> execute(CommandContext commandContext) {\n+                                              public Map<String, DataObject> execute(CommandContext commandContext) {\n \n     // Verify existance of execution\n     if (executionId == null) {\n-      throw new ActivitiIllegalArgumentException(\"executionId is null\");\n+                                                  throw new ActivitiIllegalArgumentException(\"executionId is null\");\n     }\n \n     ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n-\n     if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+                                                  throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\",\n+                                                                                            Execution.class);\n     }\n-    \n-    Map<String, VariableInstance> variables = null;\n \n+    Map<String, VariableInstance> variables = null;\n     if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n       // Fetch all\n-      if (isLocal) {\n-        variables = execution.getVariableInstancesLocal();\n-      } else {\n-        variables = execution.getVariableInstances();\n-      }\n-\n+                                                  if (isLocal) {\n+                                                                  variables = execution.getVariableInstancesLocal();\n+                                                  } else {\n+                                                      variables = execution.getVariableInstances();\n+                                                  }\n     } else {\n       // Fetch specific collection of variables\n       if (isLocal) {\n-        variables = execution.getVariableInstancesLocal(dataObjectNames, false);\n+               variables = execution.getVariableInstancesLocal(dataObjectNames, false);\n       } else {\n-        variables = execution.getVariableInstances(dataObjectNames, false);\n+          variables = execution.getVariableInstances(dataObjectNames, false);\n       }\n     }\n \n-    Map<String,DataObject> dataObjects = null;\n+    Map<String, DataObject> dataObjects = null;\n     if (variables != null) {\n-      dataObjects = new HashMap<>(variables.size());\n-      \n-      for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n-        String name = entry.getKey();\n-        VariableInstance variableEntity = (VariableInstance) entry.getValue();\n-\n-        ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n-        while (!executionEntity.isScope()) {\n-          executionEntity = executionEntity.getParent();\n-        }\n-        \n-        BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n-        ValuedDataObject foundDataObject = null;\n-        if (executionEntity.getParentId() == null) {\n-          for (ValuedDataObject dataObject : bpmnModel.getMainProcess().getDataObjects()) {\n-            if (dataObject.getName().equals(variableEntity.getName())) {\n-              foundDataObject = dataObject;\n-              break;\n+        dataObjects = new HashMap<>(variables.size());\n+        for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n+            String name = entry.getKey();\n+            VariableInstance variableEntity = (VariableInstance) entry.getValue();\n+            ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n+            while (!executionEntity.isScope()) {\n+            executionEntity = executionEntity.getParent();\n             }\n-          }\n-        } else {\n-          SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n-          for (ValuedDataObject dataObject : subProcess.getDataObjects()) {\n-            if (dataObject.getName().equals(variableEntity.getName())) {\n-              foundDataObject = dataObject;\n-              break;\n+\n+            BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n+            ValuedDataObject foundDataObject = null;\n+            if (executionEntity.getParentId() == null) {\n+                                                                               for (ValuedDataObject dataObject : bpmnModel.getMainProcess().getDataObjects()) {\n+                if (dataObject.getName().equals(variableEntity.getName())) {\n+                    foundDataObject = dataObject;\n+                    break;\n+                }\n+                                                                               }\n+            } else {\n+                SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n+                for (ValuedDataObject dataObject : subProcess.getDataObjects()) {\n+                if (dataObject.getName().equals(variableEntity.getName())) {\n+                    foundDataObject = dataObject;\n+                    break;\n+                }\n+                }\n             }\n-          }\n-        }\n-        \n-        String localizedName = null;\n-        String localizedDescription = null;\n-        \n-        if (locale != null && foundDataObject != null) {          \n-          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n-              execution.getProcessDefinitionId(), withLocalizationFallback);\n-          \n-          if (languageNode != null) {\n-            JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n-            if (nameNode != null) {\n-              localizedName = nameNode.asText();\n+\n+            String localizedName = null;\n+            String localizedDescription = null;\n+            if (locale != null && foundDataObject != null) {\n+                ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), execution.getProcessDefinitionId(), withLocalizationFallback);\n+                if (languageNode != null) {\n+                    JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n+                    if (nameNode != null) {\n+                        localizedName = nameNode.asText();\n+                    }\n+\n+                    JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n+                    if (descriptionNode != null) {\n+                        localizedDescription = descriptionNode.asText();\n+                    }\n+                }\n             }\n-            JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n-            if (descriptionNode != null) {\n-              localizedDescription = descriptionNode.asText();\n+\n+            if (foundDataObject != null) {\n+                dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n             }\n-          }\n         }\n-        \n-        if (foundDataObject != null) {\n-          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n-              foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n-        }\n-      }\n     }\n-    \n     return dataObjects;\n-  }\n-}\n+                                              }\n+}\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/711/GetDataObjectsCmd.java\nindex 1abb7e6351..73cefef831 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/711/GetDataObjectsCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -45,7 +46,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n   protected boolean isLocal;\n   protected String locale;\n   protected boolean withLocalizationFallback;\n-  \n+\n   public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n     this.executionId = executionId;\n     this.dataObjectNames = dataObjectNames;\n@@ -72,7 +73,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     if (execution == null) {\n       throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n     }\n-    \n+\n     Map<String, VariableInstance> variables = null;\n \n     if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n@@ -95,7 +96,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     Map<String,DataObject> dataObjects = null;\n     if (variables != null) {\n       dataObjects = new HashMap<>(variables.size());\n-      \n+\n       for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n         String name = entry.getKey();\n         VariableInstance variableEntity = (VariableInstance) entry.getValue();\n@@ -104,7 +105,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n         while (!executionEntity.isScope()) {\n           executionEntity = executionEntity.getParent();\n         }\n-        \n+\n         BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n         ValuedDataObject foundDataObject = null;\n         if (executionEntity.getParentId() == null) {\n@@ -123,14 +124,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         String localizedName = null;\n         String localizedDescription = null;\n-        \n-        if (locale != null && foundDataObject != null) {          \n-          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n+\n+        if (locale != null && foundDataObject != null) {\n+          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(),\n               execution.getProcessDefinitionId(), withLocalizationFallback);\n-          \n+\n           if (languageNode != null) {\n             JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n             if (nameNode != null) {\n@@ -142,14 +143,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         if (foundDataObject != null) {\n-          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n+          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(),\n               foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n         }\n       }\n     }\n-    \n+\n     return dataObjects;\n   }\n }\n",
            "diff_size": 13
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/711/GetDataObjectsCmd.java\nindex 1abb7e6351..73cefef831 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/711/GetDataObjectsCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/711/GetDataObjectsCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -45,7 +46,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n   protected boolean isLocal;\n   protected String locale;\n   protected boolean withLocalizationFallback;\n-  \n+\n   public GetDataObjectsCmd(String executionId, Collection<String> dataObjectNames, boolean isLocal) {\n     this.executionId = executionId;\n     this.dataObjectNames = dataObjectNames;\n@@ -72,7 +73,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     if (execution == null) {\n       throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n     }\n-    \n+\n     Map<String, VariableInstance> variables = null;\n \n     if (dataObjectNames == null || dataObjectNames.isEmpty()) {\n@@ -95,7 +96,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n     Map<String,DataObject> dataObjects = null;\n     if (variables != null) {\n       dataObjects = new HashMap<>(variables.size());\n-      \n+\n       for (Entry<String, VariableInstance> entry : variables.entrySet()) {\n         String name = entry.getKey();\n         VariableInstance variableEntity = (VariableInstance) entry.getValue();\n@@ -104,7 +105,7 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n         while (!executionEntity.isScope()) {\n           executionEntity = executionEntity.getParent();\n         }\n-        \n+\n         BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(execution.getProcessDefinitionId());\n         ValuedDataObject foundDataObject = null;\n         if (executionEntity.getParentId() == null) {\n@@ -123,14 +124,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         String localizedName = null;\n         String localizedDescription = null;\n-        \n-        if (locale != null && foundDataObject != null) {          \n-          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n+\n+        if (locale != null && foundDataObject != null) {\n+          ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(),\n               execution.getProcessDefinitionId(), withLocalizationFallback);\n-          \n+\n           if (languageNode != null) {\n             JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n             if (nameNode != null) {\n@@ -142,14 +143,14 @@ public class GetDataObjectsCmd implements Command<Map<String, DataObject>>, Seri\n             }\n           }\n         }\n-        \n+\n         if (foundDataObject != null) {\n-          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n+          dataObjects.put(name, new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(),\n               foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId()));\n         }\n       }\n     }\n-    \n+\n     return dataObjects;\n   }\n }\n",
            "diff_size": 13
        }
    ]
}