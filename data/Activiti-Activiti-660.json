{
    "error_id": "660",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.interceptor;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.ActivitiOptimisticLockingException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/660/RetryInterceptor.java\nindex c361513a49..ac56f4c71e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/660/RetryInterceptor.java\n@@ -1,90 +1,91 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.interceptor;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.ActivitiOptimisticLockingException;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-/**\r\n- * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\r\n- * \r\n-\r\n- */\r\n-public class RetryInterceptor extends AbstractCommandInterceptor {\r\n-\r\n-  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n-\r\n-  protected int numOfRetries = 3;\r\n-  protected int waitTimeInMs = 50;\r\n-  protected int waitIncreaseFactor = 5;\r\n-\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    long waitTime = waitTimeInMs;\r\n-    int failedAttempts = 0;\r\n-\r\n-    do {\r\n-      if (failedAttempts > 0) {\r\n-        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n-        waitBeforeRetry(waitTime);\r\n-        waitTime *= waitIncreaseFactor;\r\n-      }\r\n-\r\n-      try {\r\n-\r\n-        // try to execute the command\r\n-        return next.execute(config, command);\r\n-\r\n-      } catch (ActivitiOptimisticLockingException e) {\r\n-        log.info(\"Caught optimistic locking exception: \" + e);\r\n-      }\r\n-\r\n-      failedAttempts++;\r\n-    } while (failedAttempts <= numOfRetries);\r\n-\r\n-    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n-  }\r\n-\r\n-  protected void waitBeforeRetry(long waitTime) {\r\n-    try {\r\n-      Thread.sleep(waitTime);\r\n-    } catch (InterruptedException e) {\r\n-      log.debug(\"I am interrupted while waiting for a retry.\");\r\n-    }\r\n-  }\r\n-\r\n-  public void setNumOfRetries(int numOfRetries) {\r\n-    this.numOfRetries = numOfRetries;\r\n-  }\r\n-\r\n-  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n-    this.waitIncreaseFactor = waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public void setWaitTimeInMs(int waitTimeInMs) {\r\n-    this.waitTimeInMs = waitTimeInMs;\r\n-  }\r\n-\r\n-  public int getNumOfRetries() {\r\n-    return numOfRetries;\r\n-  }\r\n-\r\n-  public int getWaitIncreaseFactor() {\r\n-    return waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public int getWaitTimeInMs() {\r\n-    return waitTimeInMs;\r\n-  }\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.interceptor;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.ActivitiOptimisticLockingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\n+ * \n+\n+ */\n+public class RetryInterceptor extends AbstractCommandInterceptor {\n+\n+  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\n+\n+  protected int numOfRetries = 3;\n+  protected int waitTimeInMs = 50;\n+  protected int waitIncreaseFactor = 5;\n+\n+  public <T> T execute(CommandConfig config, Command<T> command) {\n+    long waitTime = waitTimeInMs;\n+    int failedAttempts = 0;\n+\n+    do {\n+      if (failedAttempts > 0) {\n+        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\n+        waitBeforeRetry(waitTime);\n+        waitTime *= waitIncreaseFactor;\n+      }\n+\n+      try {\n+\n+        // try to execute the command\n+        return next.execute(config, command);\n+\n+      } catch (ActivitiOptimisticLockingException e) {\n+        log.info(\"Caught optimistic locking exception: \" + e);\n+      }\n+\n+      failedAttempts++;\n+    } while (failedAttempts <= numOfRetries);\n+\n+    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\n+  }\n+\n+  protected void waitBeforeRetry(long waitTime) {\n+    try {\n+      Thread.sleep(waitTime);\n+    } catch (InterruptedException e) {\n+      log.debug(\"I am interrupted while waiting for a retry.\");\n+    }\n+  }\n+\n+  public void setNumOfRetries(int numOfRetries) {\n+    this.numOfRetries = numOfRetries;\n+  }\n+\n+  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\n+    this.waitIncreaseFactor = waitIncreaseFactor;\n+  }\n+\n+  public void setWaitTimeInMs(int waitTimeInMs) {\n+    this.waitTimeInMs = waitTimeInMs;\n+  }\n+\n+  public int getNumOfRetries() {\n+    return numOfRetries;\n+  }\n+\n+  public int getWaitIncreaseFactor() {\n+    return waitIncreaseFactor;\n+  }\n+\n+  public int getWaitTimeInMs() {\n+    return waitTimeInMs;\n+  }\n+}\n",
            "diff_size": 91
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/660/RetryInterceptor.java\nindex c361513a49..a15fc17b62 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/660/RetryInterceptor.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- * \r\n+ *\r\n  *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n+ *\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl.interceptor;\r\n \r\n import org.activiti.engine.ActivitiException;\r\n@@ -19,72 +20,70 @@ import org.slf4j.LoggerFactory;\n \r\n /**\r\n  * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\r\n- * \r\n-\r\n  */\r\n public class RetryInterceptor extends AbstractCommandInterceptor {\r\n \r\n-  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n+    private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n \r\n-  protected int numOfRetries = 3;\r\n-  protected int waitTimeInMs = 50;\r\n-  protected int waitIncreaseFactor = 5;\r\n+    protected int numOfRetries = 3;\r\n+    protected int waitTimeInMs = 50;\r\n+    protected int waitIncreaseFactor = 5;\r\n \r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    long waitTime = waitTimeInMs;\r\n-    int failedAttempts = 0;\r\n+    public <T> T execute(CommandConfig config, Command<T> command) {\r\n+        long waitTime = waitTimeInMs;\r\n+        int failedAttempts = 0;\r\n \r\n-    do {\r\n-      if (failedAttempts > 0) {\r\n-        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n-        waitBeforeRetry(waitTime);\r\n-        waitTime *= waitIncreaseFactor;\r\n-      }\r\n+        do {\r\n+            if (failedAttempts > 0) {\r\n+                log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n+                waitBeforeRetry(waitTime);\r\n+                waitTime *= waitIncreaseFactor;\r\n+            }\r\n \r\n-      try {\r\n+            try {\r\n \r\n-        // try to execute the command\r\n-        return next.execute(config, command);\r\n+                // try to execute the command\r\n+                return next.execute(config, command);\r\n \r\n-      } catch (ActivitiOptimisticLockingException e) {\r\n-        log.info(\"Caught optimistic locking exception: \" + e);\r\n-      }\r\n+            } catch (ActivitiOptimisticLockingException e) {\r\n+                log.info(\"Caught optimistic locking exception: \" + e);\r\n+            }\r\n \r\n-      failedAttempts++;\r\n-    } while (failedAttempts <= numOfRetries);\r\n+            failedAttempts++;\r\n+        } while (failedAttempts <= numOfRetries);\r\n \r\n-    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n-  }\r\n+        throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n+    }\r\n \r\n-  protected void waitBeforeRetry(long waitTime) {\r\n-    try {\r\n-      Thread.sleep(waitTime);\r\n-    } catch (InterruptedException e) {\r\n-      log.debug(\"I am interrupted while waiting for a retry.\");\r\n+    protected void waitBeforeRetry(long waitTime) {\r\n+        try {\r\n+            Thread.sleep(waitTime);\r\n+        } catch (InterruptedException e) {\r\n+            log.debug(\"I am interrupted while waiting for a retry.\");\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  public void setNumOfRetries(int numOfRetries) {\r\n-    this.numOfRetries = numOfRetries;\r\n-  }\r\n+    public void setNumOfRetries(int numOfRetries) {\r\n+        this.numOfRetries = numOfRetries;\r\n+    }\r\n \r\n-  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n-    this.waitIncreaseFactor = waitIncreaseFactor;\r\n-  }\r\n+    public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n+        this.waitIncreaseFactor = waitIncreaseFactor;\r\n+    }\r\n \r\n-  public void setWaitTimeInMs(int waitTimeInMs) {\r\n-    this.waitTimeInMs = waitTimeInMs;\r\n-  }\r\n+    public void setWaitTimeInMs(int waitTimeInMs) {\r\n+        this.waitTimeInMs = waitTimeInMs;\r\n+    }\r\n \r\n-  public int getNumOfRetries() {\r\n-    return numOfRetries;\r\n-  }\r\n+    public int getNumOfRetries() {\r\n+        return numOfRetries;\r\n+    }\r\n \r\n-  public int getWaitIncreaseFactor() {\r\n-    return waitIncreaseFactor;\r\n-  }\r\n+    public int getWaitIncreaseFactor() {\r\n+        return waitIncreaseFactor;\r\n+    }\r\n \r\n-  public int getWaitTimeInMs() {\r\n-    return waitTimeInMs;\r\n-  }\r\n+    public int getWaitTimeInMs() {\r\n+        return waitTimeInMs;\r\n+    }\r\n }\r\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 11, indentation should be the same level as line 47.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/660/RetryInterceptor.java\nindex c361513a49..cf9707ff96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/660/RetryInterceptor.java\n@@ -10,81 +10,79 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.activiti.engine.impl.interceptor;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.ActivitiOptimisticLockingException;\r\n-import org.slf4j.Logger;\r\n+package org.activiti.engine.impl.interceptor;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.ActivitiOptimisticLockingException;\n+import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\r\n \r\n /**\r\n  * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\r\n  * \r\n \r\n- */\r\n-public class RetryInterceptor extends AbstractCommandInterceptor {\r\n-\r\n-  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n-\r\n-  protected int numOfRetries = 3;\r\n-  protected int waitTimeInMs = 50;\r\n-  protected int waitIncreaseFactor = 5;\r\n-\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    long waitTime = waitTimeInMs;\r\n-    int failedAttempts = 0;\r\n-\r\n-    do {\r\n-      if (failedAttempts > 0) {\r\n-        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n-        waitBeforeRetry(waitTime);\r\n-        waitTime *= waitIncreaseFactor;\r\n-      }\r\n-\r\n-      try {\r\n-\r\n-        // try to execute the command\r\n-        return next.execute(config, command);\r\n-\r\n-      } catch (ActivitiOptimisticLockingException e) {\r\n-        log.info(\"Caught optimistic locking exception: \" + e);\r\n-      }\r\n-\r\n-      failedAttempts++;\r\n-    } while (failedAttempts <= numOfRetries);\r\n-\r\n-    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n-  }\r\n-\r\n-  protected void waitBeforeRetry(long waitTime) {\r\n-    try {\r\n-      Thread.sleep(waitTime);\r\n-    } catch (InterruptedException e) {\r\n-      log.debug(\"I am interrupted while waiting for a retry.\");\r\n-    }\r\n-  }\r\n-\r\n-  public void setNumOfRetries(int numOfRetries) {\r\n-    this.numOfRetries = numOfRetries;\r\n-  }\r\n-\r\n-  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n-    this.waitIncreaseFactor = waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public void setWaitTimeInMs(int waitTimeInMs) {\r\n-    this.waitTimeInMs = waitTimeInMs;\r\n-  }\r\n-\r\n-  public int getNumOfRetries() {\r\n-    return numOfRetries;\r\n-  }\r\n-\r\n-  public int getWaitIncreaseFactor() {\r\n-    return waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public int getWaitTimeInMs() {\r\n-    return waitTimeInMs;\r\n-  }\r\n-}\r\n+ */\n+\n+\n+public class RetryInterceptor extends AbstractCommandInterceptor {\n+\n+    private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\n+    protected int numOfRetries = 3;\n+    protected int waitTimeInMs = 50;\n+    protected int waitIncreaseFactor = 5;\n+    public <T> T execute(CommandConfig config, Command<T> command) {\n+    long waitTime = waitTimeInMs;\n+    int failedAttempts = 0;\n+    do {\n+        if (failedAttempts > 0) {\n+            log.info(\"Waiting for {}ms before retrying the command.\",\n+                     waitTime);\n+            waitBeforeRetry(waitTime);\n+            waitTime *= waitIncreaseFactor;\n+        }\n+\n+        try {\r\n+\r\n+        // try to execute the command\n+           return next.execute(config, command);\n+        } catch (ActivitiOptimisticLockingException e) {\n+          log.info(\"Caught optimistic locking exception: \" + e);\n+        }\n+        failedAttempts++;\n+    } while (failedAttempts <= numOfRetries);\n+    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\n+    }\n+\n+    protected void waitBeforeRetry(long waitTime) {\n+    try {\n+        Thread.sleep(waitTime);\n+    } catch (InterruptedException e) {\n+      log.debug(\"I am interrupted while waiting for a retry.\");\n+    }\n+    }\n+\n+    public void setNumOfRetries(int numOfRetries) {\n+    this.numOfRetries = numOfRetries;\n+    }\n+\n+    public void setWaitIncreaseFactor(int waitIncreaseFactor) {\n+    this.waitIncreaseFactor = waitIncreaseFactor;\n+    }\n+\n+    public void setWaitTimeInMs(int waitTimeInMs) {\n+    this.waitTimeInMs = waitTimeInMs;\n+    }\n+\n+    public int getNumOfRetries() {\n+    return numOfRetries;\n+    }\n+\n+    public int getWaitIncreaseFactor() {\n+    return waitIncreaseFactor;\n+    }\n+\n+    public int getWaitTimeInMs() {\n+    return waitTimeInMs;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/660/RetryInterceptor.java\nindex c361513a49..ac56f4c71e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/660/RetryInterceptor.java\n@@ -1,90 +1,91 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.interceptor;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.ActivitiOptimisticLockingException;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-/**\r\n- * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\r\n- * \r\n-\r\n- */\r\n-public class RetryInterceptor extends AbstractCommandInterceptor {\r\n-\r\n-  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n-\r\n-  protected int numOfRetries = 3;\r\n-  protected int waitTimeInMs = 50;\r\n-  protected int waitIncreaseFactor = 5;\r\n-\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    long waitTime = waitTimeInMs;\r\n-    int failedAttempts = 0;\r\n-\r\n-    do {\r\n-      if (failedAttempts > 0) {\r\n-        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n-        waitBeforeRetry(waitTime);\r\n-        waitTime *= waitIncreaseFactor;\r\n-      }\r\n-\r\n-      try {\r\n-\r\n-        // try to execute the command\r\n-        return next.execute(config, command);\r\n-\r\n-      } catch (ActivitiOptimisticLockingException e) {\r\n-        log.info(\"Caught optimistic locking exception: \" + e);\r\n-      }\r\n-\r\n-      failedAttempts++;\r\n-    } while (failedAttempts <= numOfRetries);\r\n-\r\n-    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n-  }\r\n-\r\n-  protected void waitBeforeRetry(long waitTime) {\r\n-    try {\r\n-      Thread.sleep(waitTime);\r\n-    } catch (InterruptedException e) {\r\n-      log.debug(\"I am interrupted while waiting for a retry.\");\r\n-    }\r\n-  }\r\n-\r\n-  public void setNumOfRetries(int numOfRetries) {\r\n-    this.numOfRetries = numOfRetries;\r\n-  }\r\n-\r\n-  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n-    this.waitIncreaseFactor = waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public void setWaitTimeInMs(int waitTimeInMs) {\r\n-    this.waitTimeInMs = waitTimeInMs;\r\n-  }\r\n-\r\n-  public int getNumOfRetries() {\r\n-    return numOfRetries;\r\n-  }\r\n-\r\n-  public int getWaitIncreaseFactor() {\r\n-    return waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public int getWaitTimeInMs() {\r\n-    return waitTimeInMs;\r\n-  }\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.interceptor;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.ActivitiOptimisticLockingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\n+ * \n+\n+ */\n+public class RetryInterceptor extends AbstractCommandInterceptor {\n+\n+  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\n+\n+  protected int numOfRetries = 3;\n+  protected int waitTimeInMs = 50;\n+  protected int waitIncreaseFactor = 5;\n+\n+  public <T> T execute(CommandConfig config, Command<T> command) {\n+    long waitTime = waitTimeInMs;\n+    int failedAttempts = 0;\n+\n+    do {\n+      if (failedAttempts > 0) {\n+        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\n+        waitBeforeRetry(waitTime);\n+        waitTime *= waitIncreaseFactor;\n+      }\n+\n+      try {\n+\n+        // try to execute the command\n+        return next.execute(config, command);\n+\n+      } catch (ActivitiOptimisticLockingException e) {\n+        log.info(\"Caught optimistic locking exception: \" + e);\n+      }\n+\n+      failedAttempts++;\n+    } while (failedAttempts <= numOfRetries);\n+\n+    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\n+  }\n+\n+  protected void waitBeforeRetry(long waitTime) {\n+    try {\n+      Thread.sleep(waitTime);\n+    } catch (InterruptedException e) {\n+      log.debug(\"I am interrupted while waiting for a retry.\");\n+    }\n+  }\n+\n+  public void setNumOfRetries(int numOfRetries) {\n+    this.numOfRetries = numOfRetries;\n+  }\n+\n+  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\n+    this.waitIncreaseFactor = waitIncreaseFactor;\n+  }\n+\n+  public void setWaitTimeInMs(int waitTimeInMs) {\n+    this.waitTimeInMs = waitTimeInMs;\n+  }\n+\n+  public int getNumOfRetries() {\n+    return numOfRetries;\n+  }\n+\n+  public int getWaitIncreaseFactor() {\n+    return waitIncreaseFactor;\n+  }\n+\n+  public int getWaitTimeInMs() {\n+    return waitTimeInMs;\n+  }\n+}\n",
            "diff_size": 91
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/660/RetryInterceptor.java\nindex c361513a49..ac56f4c71e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/660/RetryInterceptor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/660/RetryInterceptor.java\n@@ -1,90 +1,91 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl.interceptor;\r\n-\r\n-import org.activiti.engine.ActivitiException;\r\n-import org.activiti.engine.ActivitiOptimisticLockingException;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-/**\r\n- * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\r\n- * \r\n-\r\n- */\r\n-public class RetryInterceptor extends AbstractCommandInterceptor {\r\n-\r\n-  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\r\n-\r\n-  protected int numOfRetries = 3;\r\n-  protected int waitTimeInMs = 50;\r\n-  protected int waitIncreaseFactor = 5;\r\n-\r\n-  public <T> T execute(CommandConfig config, Command<T> command) {\r\n-    long waitTime = waitTimeInMs;\r\n-    int failedAttempts = 0;\r\n-\r\n-    do {\r\n-      if (failedAttempts > 0) {\r\n-        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\r\n-        waitBeforeRetry(waitTime);\r\n-        waitTime *= waitIncreaseFactor;\r\n-      }\r\n-\r\n-      try {\r\n-\r\n-        // try to execute the command\r\n-        return next.execute(config, command);\r\n-\r\n-      } catch (ActivitiOptimisticLockingException e) {\r\n-        log.info(\"Caught optimistic locking exception: \" + e);\r\n-      }\r\n-\r\n-      failedAttempts++;\r\n-    } while (failedAttempts <= numOfRetries);\r\n-\r\n-    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\r\n-  }\r\n-\r\n-  protected void waitBeforeRetry(long waitTime) {\r\n-    try {\r\n-      Thread.sleep(waitTime);\r\n-    } catch (InterruptedException e) {\r\n-      log.debug(\"I am interrupted while waiting for a retry.\");\r\n-    }\r\n-  }\r\n-\r\n-  public void setNumOfRetries(int numOfRetries) {\r\n-    this.numOfRetries = numOfRetries;\r\n-  }\r\n-\r\n-  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\r\n-    this.waitIncreaseFactor = waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public void setWaitTimeInMs(int waitTimeInMs) {\r\n-    this.waitTimeInMs = waitTimeInMs;\r\n-  }\r\n-\r\n-  public int getNumOfRetries() {\r\n-    return numOfRetries;\r\n-  }\r\n-\r\n-  public int getWaitIncreaseFactor() {\r\n-    return waitIncreaseFactor;\r\n-  }\r\n-\r\n-  public int getWaitTimeInMs() {\r\n-    return waitTimeInMs;\r\n-  }\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl.interceptor;\n+\n+import org.activiti.engine.ActivitiException;\n+import org.activiti.engine.ActivitiOptimisticLockingException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Intercepts {@link ActivitiOptimisticLockingException} and tries to run the same command again. The number of retries and the time waited between retries is configurable.\n+ * \n+\n+ */\n+public class RetryInterceptor extends AbstractCommandInterceptor {\n+\n+  private static Logger log = LoggerFactory.getLogger(RetryInterceptor.class);\n+\n+  protected int numOfRetries = 3;\n+  protected int waitTimeInMs = 50;\n+  protected int waitIncreaseFactor = 5;\n+\n+  public <T> T execute(CommandConfig config, Command<T> command) {\n+    long waitTime = waitTimeInMs;\n+    int failedAttempts = 0;\n+\n+    do {\n+      if (failedAttempts > 0) {\n+        log.info(\"Waiting for {}ms before retrying the command.\", waitTime);\n+        waitBeforeRetry(waitTime);\n+        waitTime *= waitIncreaseFactor;\n+      }\n+\n+      try {\n+\n+        // try to execute the command\n+        return next.execute(config, command);\n+\n+      } catch (ActivitiOptimisticLockingException e) {\n+        log.info(\"Caught optimistic locking exception: \" + e);\n+      }\n+\n+      failedAttempts++;\n+    } while (failedAttempts <= numOfRetries);\n+\n+    throw new ActivitiException(numOfRetries + \" retries failed with ActivitiOptimisticLockingException. Giving up.\");\n+  }\n+\n+  protected void waitBeforeRetry(long waitTime) {\n+    try {\n+      Thread.sleep(waitTime);\n+    } catch (InterruptedException e) {\n+      log.debug(\"I am interrupted while waiting for a retry.\");\n+    }\n+  }\n+\n+  public void setNumOfRetries(int numOfRetries) {\n+    this.numOfRetries = numOfRetries;\n+  }\n+\n+  public void setWaitIncreaseFactor(int waitIncreaseFactor) {\n+    this.waitIncreaseFactor = waitIncreaseFactor;\n+  }\n+\n+  public void setWaitTimeInMs(int waitTimeInMs) {\n+    this.waitTimeInMs = waitTimeInMs;\n+  }\n+\n+  public int getNumOfRetries() {\n+    return numOfRetries;\n+  }\n+\n+  public int getWaitIncreaseFactor() {\n+    return waitIncreaseFactor;\n+  }\n+\n+  public int getWaitTimeInMs() {\n+    return waitTimeInMs;\n+  }\n+}\n",
            "diff_size": 91
        }
    ]
}