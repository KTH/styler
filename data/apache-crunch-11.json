{
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "97",
                "column": "77",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  }\n\n  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n    return new AvroFileReaderFactory(reader, ptype);\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/11/AvroFileSource.java\nindex 66db25d46d..0d2071495b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/11/AvroFileSource.java\n@@ -52,7 +52,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +73,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/11/AvroFileSource.java\nindex 66db25d46d..680b1c7be5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/11/AvroFileSource.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.io.avro;\n \n import java.io.IOException;\n@@ -38,10 +39,10 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n \n   private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n     FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n-          .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n-          .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n-          .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n+        .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n+        .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n+        .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n+        .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n     mode.configure(bundle);\n     return bundle;\n   }\n@@ -52,7 +53,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +74,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +95,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/11/AvroFileSource.java\nindex 66db25d46d..5a7925cd8d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/11/AvroFileSource.java\n@@ -38,11 +38,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n \n   private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n     FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n+    .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n           .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n           .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n           .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n-    mode.configure(bundle);\n+mode.configure(bundle);\n     return bundle;\n   }\n \n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/11/AvroFileSource.java\nindex 66db25d46d..ebcf5e0dee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/11/AvroFileSource.java\n@@ -18,7 +18,6 @@\n package org.apache.crunch.io.avro;\n \n import java.io.IOException;\n-\n import java.util.List;\n import org.apache.avro.io.DatumReader;\n import org.apache.avro.mapred.AvroJob;\n@@ -36,65 +35,65 @@ import org.apache.hadoop.fs.Path;\n \n public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSource<T> {\n \n-  private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n-    FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n-          .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n-          .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n-          .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n+    private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n+    FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class).set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n+                                                                      .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n+                                                                      .set(\n+                              Avros.REFLECT_DATA_FACTORY_CLASS,\n+                              Avros.REFLECT_DATA_FACTORY.getClass().getName())\n+                                                                      .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n     mode.configure(bundle);\n     return bundle;\n-  }\n-\n+    }\n \n-  private static <S> FormatBundle getBundle(AvroType<S> ptype) {\n+    private static <S> FormatBundle getBundle(AvroType<S> ptype) {\n     return getBundle(ptype, AvroMode.fromType(ptype));\n-  }\n+    }\n \n-  private DatumReader<T> reader;\n-  \n-  public AvroFileSource(Path path, AvroType<T> ptype) {\n+    private DatumReader<T> reader;\n+\n+    public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n-  }\n+    }\n \n-  public AvroFileSource(Path path, AvroType<T> ptype, AvroMode mode) {\n+    public AvroFileSource(Path path, AvroType<T> ptype, AvroMode mode) {\n     super(path, ptype, getBundle(ptype, mode));\n-  }\n+    }\n \n-  public AvroFileSource(Path path, AvroType<T> ptype, DatumReader<T> reader) {\n+    public AvroFileSource(Path path, AvroType<T> ptype, DatumReader<T> reader) {\n     super(path, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }\n+    }\n \n-  public AvroFileSource(List<Path> paths, AvroType<T> ptype) {\n+    public AvroFileSource(List<Path> paths, AvroType<T> ptype) {\n     super(paths, ptype, getBundle(ptype));\n-  }\n+    }\n \n-  public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n+    public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n-  }\n-  \n-  public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n+    }\n+\n+    public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+    }\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     return \"Avro(\" + pathsAsString() + \")\";\n-  }\n+    }\n \n-  @Override\n-  public Iterable<T> read(Configuration conf) throws IOException {\n+    @Override\n+    public Iterable<T> read(Configuration conf) throws IOException {\n     return read(conf, getFileReaderFactory((AvroType<T>) ptype));\n-  }\n+    }\n \n-  @Override\n-  public ReadableData<T> asReadable() {\n+    @Override\n+    public ReadableData<T> asReadable() {\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n-  }\n+    }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+    protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/11/AvroFileSource.java\nindex 66db25d46d..0d2071495b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/11/AvroFileSource.java\n@@ -52,7 +52,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +73,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/11/AvroFileSource.java\nindex 66db25d46d..0d2071495b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/11/AvroFileSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/11/AvroFileSource.java\n@@ -52,7 +52,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +73,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 4
        }
    ]
}