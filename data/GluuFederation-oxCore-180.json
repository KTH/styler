{
    "error_id": "180",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n\n    @Override\n    public String getPersistenceType() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/180/LdapEntryManagerFactory.java\nindex 7a90924e97..ab2d780d9a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/180/LdapEntryManagerFactory.java\n@@ -25,7 +25,7 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n     public static final String PERSISTANCE_TYPE = \"ldap\";\n     public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+        private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n     @Override\n     public String getPersistenceType() {\n@@ -34,10 +34,10 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n-    \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n+\t\t\t\t\tHashMap<String, String> confs = new HashMap<String, String>();\n+\t\t\t\t\tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n \n-    \treturn confs;\n+\t\t\t\t\treturn confs;\n     }\n \n \t@Override\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/180/LdapEntryManagerFactory.java\nindex 7a90924e97..0343f5d4cb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/180/LdapEntryManagerFactory.java\n@@ -25,7 +25,7 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n     public static final String PERSISTANCE_TYPE = \"ldap\";\n     public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n     @Override\n     public String getPersistenceType() {\n@@ -34,27 +34,27 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n-    \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n+        HashMap<String, String> confs = new HashMap<String, String>();\n+        confs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n \n-    \treturn confs;\n+        return confs;\n     }\n \n-\t@Override\n+    @Override\n     public LdapEntryManager createEntryManager(Properties conf) {\n-\t\tProperties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n+        Properties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n \n-\t\tLdapConnectionProvider connectionProvider = new LdapConnectionProvider(entryManagerConf);\n+        LdapConnectionProvider connectionProvider = new LdapConnectionProvider(entryManagerConf);\n         if (!connectionProvider.isCreated()) {\n             throw new ConfigurationException(\n-                    String.format(\"Failed to create LDAP connection pool! Result code: '%s'\", connectionProvider.getCreationResultCode()));\n+                String.format(\"Failed to create LDAP connection pool! Result code: '%s'\", connectionProvider.getCreationResultCode()));\n         }\n         LOG.debug(\"Created connectionProvider '{}' with code '{}'\", connectionProvider, connectionProvider.getCreationResultCode());\n \n         LdapConnectionProvider bindConnectionProvider = new LdapAuthConnectionProvider(entryManagerConf);\n         if (!bindConnectionProvider.isCreated()) {\n             throw new ConfigurationException(\n-                    String.format(\"Failed to create LDAP bind connection pool! Result code: '%s'\", bindConnectionProvider.getCreationResultCode()));\n+                String.format(\"Failed to create LDAP bind connection pool! Result code: '%s'\", bindConnectionProvider.getCreationResultCode()));\n         }\n         LOG.debug(\"Created bindConnectionProvider '{}' with code '{}'\", bindConnectionProvider, bindConnectionProvider.getCreationResultCode());\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "column": "5",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/180/LdapEntryManagerFactory.java\nindex 7a90924e97..3deec860af 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/180/LdapEntryManagerFactory.java\n@@ -25,27 +25,27 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n     public static final String PERSISTANCE_TYPE = \"ldap\";\n     public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n-    @Override\n+@Override\n     public String getPersistenceType() {\n         return PERSISTANCE_TYPE;\n     }\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n+    HashMap<String, String> confs = new HashMap<String, String>();\n     \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n \n     \treturn confs;\n     }\n \n-\t@Override\n-    public LdapEntryManager createEntryManager(Properties conf) {\n-\t\tProperties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n+@Override\n+public LdapEntryManager createEntryManager(Properties conf) {\n+    Properties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n \n \t\tLdapConnectionProvider connectionProvider = new LdapConnectionProvider(entryManagerConf);\n-        if (!connectionProvider.isCreated()) {\n+if (!connectionProvider.isCreated()) {\n             throw new ConfigurationException(\n                     String.format(\"Failed to create LDAP connection pool! Result code: '%s'\", connectionProvider.getCreationResultCode()));\n         }\n@@ -64,4 +64,4 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n         return ldapEntryManager;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/180/LdapEntryManagerFactory.java\nindex 7a90924e97..ff7eb04fa0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/180/LdapEntryManagerFactory.java\n@@ -2,9 +2,7 @@ package org.gluu.persist.ldap.impl;\n \n import java.util.HashMap;\n import java.util.Properties;\n-\n import javax.enterprise.context.ApplicationScoped;\n-\n import org.gluu.persist.PersistenceEntryManagerFactory;\n import org.gluu.persist.exception.operation.ConfigurationException;\n import org.gluu.persist.ldap.operation.impl.LdapAuthConnectionProvider;\n@@ -19,13 +17,15 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Yuriy Movchan Date: 02/02/2018\n  */\n+\n+\n @ApplicationScoped\n public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     public static final String PERSISTANCE_TYPE = \"ldap\";\n-    public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+    public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n+    private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n     @Override\n     public String getPersistenceType() {\n@@ -34,34 +34,28 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n-    \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n-\n-    \treturn confs;\n+        HashMap<String, String> confs = new HashMap<String, String>();\n+        confs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n+        return confs;\n     }\n \n-\t@Override\n+    @Override\n     public LdapEntryManager createEntryManager(Properties conf) {\n-\t\tProperties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n-\n-\t\tLdapConnectionProvider connectionProvider = new LdapConnectionProvider(entryManagerConf);\n+        Properties entryManagerConf = PropertiesHelper.filterProperties(conf, PERSISTANCE_TYPE);\n+        LdapConnectionProvider connectionProvider = new LdapConnectionProvider(entryManagerConf);\n         if (!connectionProvider.isCreated()) {\n-            throw new ConfigurationException(\n-                    String.format(\"Failed to create LDAP connection pool! Result code: '%s'\", connectionProvider.getCreationResultCode()));\n+            throw new ConfigurationException(String.format(\"Failed to create LDAP connection pool! Result code: '%s'\",\n+                connectionProvider.getCreationResultCode()));\n         }\n         LOG.debug(\"Created connectionProvider '{}' with code '{}'\", connectionProvider, connectionProvider.getCreationResultCode());\n-\n         LdapConnectionProvider bindConnectionProvider = new LdapAuthConnectionProvider(entryManagerConf);\n         if (!bindConnectionProvider.isCreated()) {\n-            throw new ConfigurationException(\n-                    String.format(\"Failed to create LDAP bind connection pool! Result code: '%s'\", bindConnectionProvider.getCreationResultCode()));\n+            throw new ConfigurationException(String.format(\"Failed to create LDAP bind connection pool! Result code: '%s'\", bindConnectionProvider.getCreationResultCode()));\n         }\n         LOG.debug(\"Created bindConnectionProvider '{}' with code '{}'\", bindConnectionProvider, bindConnectionProvider.getCreationResultCode());\n-\n         LdapEntryManager ldapEntryManager = new LdapEntryManager(new LdapOperationsServiceImpl(connectionProvider, bindConnectionProvider));\n         LOG.info(\"Created LdapEntryManager: {}\", ldapEntryManager.getOperationService());\n-\n         return ldapEntryManager;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/180/LdapEntryManagerFactory.java\nindex 7a90924e97..ab2d780d9a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/180/LdapEntryManagerFactory.java\n@@ -25,7 +25,7 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n     public static final String PERSISTANCE_TYPE = \"ldap\";\n     public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+        private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n     @Override\n     public String getPersistenceType() {\n@@ -34,10 +34,10 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n-    \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n+\t\t\t\t\tHashMap<String, String> confs = new HashMap<String, String>();\n+\t\t\t\t\tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n \n-    \treturn confs;\n+\t\t\t\t\treturn confs;\n     }\n \n \t@Override\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/180/LdapEntryManagerFactory.java\nindex 7a90924e97..85b9e4ea01 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/180/LdapEntryManagerFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/180/LdapEntryManagerFactory.java\n@@ -25,7 +25,7 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n     public static final String PERSISTANCE_TYPE = \"ldap\";\n     public static final String LDAP_DEFAULT_PROPERTIES_FILE = \"gluu-ldap.properties\";\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(LdapEntryManagerFactory.class);\n \n     @Override\n     public String getPersistenceType() {\n@@ -34,10 +34,10 @@ public class LdapEntryManagerFactory implements PersistenceEntryManagerFactory {\n \n     @Override\n     public HashMap<String, String> getConfigurationFileNames() {\n-    \tHashMap<String, String> confs = new HashMap<String, String>();\n-    \tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n+\t\t\t\t\tHashMap<String, String> confs = new HashMap<String, String>();\n+\t\t\t\t\tconfs.put(PERSISTANCE_TYPE, LDAP_DEFAULT_PROPERTIES_FILE);\n \n-    \treturn confs;\n+\t\t\t\t\treturn confs;\n     }\n \n \t@Override\n",
            "diff_size": 4
        }
    ]
}