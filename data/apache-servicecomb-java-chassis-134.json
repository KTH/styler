{
    "error_id": "134",
    "information": {
        "errors": [
            {
                "line": "166",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      if (parameter.getName().equals(providerParameter.getName())) {\n        LOGGER.warn(\n            \"Param name [{}] is duplicated which may cause ambiguous deserialization result. Please check you schema definition\",\n            parameter.getName());\n        return;\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/134/OperationGenerator.java\nindex eecfdc8058..993cc7ac6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/134/OperationGenerator.java\n@@ -274,7 +274,6 @@ public class OperationGenerator {\n   }\n \n   /**\n-   *\n    * \u6839\u636emethod\u4e0a\u7684\u6570\u636e\uff0c\u7efc\u5408\u751f\u6210\u5951\u7ea6\u53c2\u6570\n    */\n   protected void scanMethodParameters() {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "332",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/134/OperationGenerator.java\nindex eecfdc8058..88f82a8ff5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/134/OperationGenerator.java\n@@ -329,9 +329,9 @@ public class OperationGenerator {\n     if (parameter instanceof AbstractSerializableParameter) {\n       if (defaultValue != null) {\n         ((AbstractSerializableParameter<?>) parameter).setDefaultValue(defaultValue);\n-      } else if ((((AbstractSerializableParameter<?>) parameter).getDefaultValue() == null)\n-          && (!((AbstractSerializableParameter<?>) parameter)\n-          .getRequired())) { //if required false then only take java primitive values as defaults\n+      } else if ((((AbstractSerializableParameter<?>) parameter).getDefaultValue() == null) && (!((AbstractSerializableParameter<?>) parameter)\n+          .getRequired())) {\n+  //if required false then only take java primitive values as defaults\n         if (parameterType instanceof Class && ((Class) parameterType).isPrimitive()) {\n           switch (parameterType.getTypeName()) {\n             case \"boolean\":\n@@ -450,4 +450,4 @@ public class OperationGenerator {\n     }\n     pathObj.set(httpMethod, operation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "241",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "318",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "328",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "329",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "330",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "331",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "332",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "333",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "337",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "367",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "387",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "390",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/134/OperationGenerator.java\nindex eecfdc8058..56fac987b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/134/OperationGenerator.java\n@@ -27,9 +27,7 @@ import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import javax.ws.rs.DefaultValue;\n-\n import org.apache.servicecomb.swagger.SwaggerUtils;\n import org.apache.servicecomb.swagger.extend.parameter.ContextParameter;\n import org.apache.servicecomb.swagger.generator.core.processor.annotation.AnnotationUtils;\n@@ -37,9 +35,7 @@ import org.apache.servicecomb.swagger.generator.core.utils.ParamUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.google.inject.util.Types;\n-\n import io.swagger.models.HttpMethod;\n import io.swagger.models.Model;\n import io.swagger.models.Operation;\n@@ -52,402 +48,402 @@ import io.swagger.models.properties.Property;\n import io.swagger.util.ReflectionUtils;\n \n public class OperationGenerator {\n-  private static final Logger LOGGER = LoggerFactory.getLogger(OperationGenerator.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(OperationGenerator.class);\n \n-  protected SwaggerGenerator swaggerGenerator;\n+    protected SwaggerGenerator swaggerGenerator;\n \n-  protected Swagger swagger;\n+    protected Swagger swagger;\n \n-  protected Operation operation;\n+    protected Operation operation;\n \n   // \u6839\u636e\u65b9\u6cd5\u4e0a\u72ec\u7acb\u7684ResponseHeader(s)\u6807\u6ce8\u751f\u6210\u7684\u6570\u636e\n   // \u5982\u679cResponse\u4e2d\u4e0d\u5b58\u5728\u5bf9\u5e94\u7684header\uff0c\u5219\u4f1a\u5c06\u8fd9\u4e9bheader\u8865\u5145\u8fdb\u53bb\n-  protected Map<String, Property> responseHeaderMap = new HashMap<>();\n+\n+    protected Map<String, Property> responseHeaderMap = new HashMap<>();\n \n   // provider\u7684\u65b9\u6cd5\n-  protected Method providerMethod;\n+\n+    protected Method providerMethod;\n \n   // \u65b9\u6cd5annotation\u6240\u6709\u7684\u53c2\u6570\n-  private List<Parameter> methodAnnotationParameters = new ArrayList<>();\n+\n+    private List<Parameter> methodAnnotationParameters = new ArrayList<>();\n \n   // provider\u6240\u6709\u7684\u53c2\u6570\n   // \u5982\u679c\u76f8\u540c\u7684\u53c2\u6570\u540d\u5728annotationParameters\u4e2d\u5df2\u7ecf\u5b58\u5728\n   // \u5219\u4eceannotationParameters\u79fb\u9664\uff0c\u5c06\u4e4b\u8f6c\u79fb\u5230providerParameters\u4e2d\u6765\uff0c\u8986\u76d6\u5728\u540c\u540d\u4f4d\u7f6e\n-  private List<Parameter> providerParameters = new ArrayList<>();\n+\n+    private List<Parameter> providerParameters = new ArrayList<>();\n \n   // \u751f\u6210\u7684\u5951\u7ea6\u53c2\u6570\n-  private List<Parameter> swaggerParameters = new ArrayList<>();\n \n-  protected SwaggerGeneratorContext context;\n+    private List<Parameter> swaggerParameters = new ArrayList<>();\n+\n+    protected SwaggerGeneratorContext context;\n \n-  protected String path;\n+    protected String path;\n \n-  protected String httpMethod;\n+    protected String httpMethod;\n \n-  public OperationGenerator(SwaggerGenerator swaggerGenerator, Method providerMethod) {\n+    public OperationGenerator(SwaggerGenerator swaggerGenerator, Method providerMethod) {\n     this.swaggerGenerator = swaggerGenerator;\n     this.swagger = swaggerGenerator.swagger;\n     this.operation = new Operation();\n     this.providerMethod = providerMethod;\n     this.context = swaggerGenerator.context;\n-\n     if (swagger.getParameters() != null) {\n-      methodAnnotationParameters.addAll(swagger.getParameters().values());\n+        methodAnnotationParameters.addAll(swagger.getParameters().values());\n+    }\n     }\n-  }\n \n-  public void addResponseHeader(String name, Property header) {\n+    public void addResponseHeader(String name, Property header) {\n     responseHeaderMap.put(name, header);\n-  }\n+    }\n \n-  public List<Parameter> getSwaggerParameters() {\n+    public List<Parameter> getSwaggerParameters() {\n     return swaggerParameters;\n-  }\n+    }\n \n-  public SwaggerGeneratorContext getContext() {\n+    public SwaggerGeneratorContext getContext() {\n     return context;\n-  }\n+    }\n \n-  public SwaggerGenerator getSwaggerGenerator() {\n+    public SwaggerGenerator getSwaggerGenerator() {\n     return swaggerGenerator;\n-  }\n+    }\n \n-  public Swagger getSwagger() {\n+    public Swagger getSwagger() {\n     return swagger;\n-  }\n+    }\n \n-  public Operation getOperation() {\n+    public Operation getOperation() {\n     return operation;\n-  }\n+    }\n \n-  public String getPath() {\n+    public String getPath() {\n     return path;\n-  }\n+    }\n \n-  public void setPath(String path) {\n+    public void setPath(String path) {\n     path = context.resolveStringValue(path);\n     if (!path.startsWith(\"/\")) {\n-      path = \"/\" + path;\n+        path = \"/\" + path;\n     }\n+\n     this.path = path;\n-  }\n+    }\n \n-  public String getHttpMethod() {\n+    public String getHttpMethod() {\n     return httpMethod;\n-  }\n+    }\n \n-  public void setHttpMethod(String httpMethod) {\n+    public void setHttpMethod(String httpMethod) {\n     if (StringUtils.isEmpty(httpMethod)) {\n-      return;\n+        return;\n     }\n \n     this.httpMethod = httpMethod.toLowerCase(Locale.US);\n-  }\n+    }\n \n-  public void addMethodAnnotationParameter(Parameter parameter) {\n+    public void addMethodAnnotationParameter(Parameter parameter) {\n     methodAnnotationParameters.add(parameter);\n-  }\n+    }\n \n   /**\n    * Add a parameter into {@linkplain #providerParameters},\n    * duplicated name params will be ignored(excepting for {@linkplain ContextParameter}s)\n    */\n-  public void addProviderParameter(Parameter parameter) {\n+\n+    public void addProviderParameter(Parameter parameter) {\n     if (ContextParameter.class.isInstance(parameter)) {\n       // ContextParameter has no name and is not written in schema,\n       // so just add it without checking\n-      providerParameters.add(parameter);\n-      return;\n+        providerParameters.add(parameter);\n+        return;\n     }\n     // check duplicated param according to param name\n+\n     for (Parameter providerParameter : providerParameters) {\n-      if (parameter.getName().equals(providerParameter.getName())) {\n-        LOGGER.warn(\n-            \"Param name [{}] is duplicated which may cause ambiguous deserialization result. Please check you schema definition\",\n-            parameter.getName());\n-        return;\n-      }\n+        if (parameter.getName().equals(providerParameter.getName())) {\n+                                                               LOGGER.warn(\"Param name [{}] is duplicated which may cause ambiguous deserialization result. Please check you schema definition\",\n+parameter.getName());\n+                                                               return;\n+        }\n     }\n-\n     providerParameters.add(parameter);\n-  }\n+    }\n \n-  public List<Parameter> getProviderParameters() {\n+    public List<Parameter> getProviderParameters() {\n     return providerParameters;\n-  }\n+    }\n \n-  public void generate() {\n+    public void generate() {\n     scanMethodAnnotation();\n     scanMethodParameters();\n     scanResponse();\n-\n     checkBodyParameter();\n     copyToSwaggerParameters();\n     operation.setParameters(swaggerParameters);\n-\n     correctOperation();\n-  }\n+    }\n \n-  protected void copyToSwaggerParameters() {\n+    protected void copyToSwaggerParameters() {\n     for (Parameter parameter : providerParameters) {\n-      if (ContextParameter.class.isInstance(parameter)) {\n-        continue;\n-      }\n-\n-      int annotationIdx = ParamUtils.findParameterByName(parameter.getName(), methodAnnotationParameters);\n-      if (annotationIdx != -1) {\n-        Parameter annotationParameter = methodAnnotationParameters.remove(annotationIdx);\n-        swaggerParameters.add(annotationParameter);\n+        if (ContextParameter.class.isInstance(parameter)) {\n         continue;\n-      }\n+        }\n \n-      swaggerParameters.add(parameter);\n+        int annotationIdx = ParamUtils.findParameterByName(parameter.getName(), methodAnnotationParameters);\n+        if (annotationIdx != -1) {\n+                                                       Parameter annotationParameter = methodAnnotationParameters.remove(annotationIdx);\n+                                                       swaggerParameters.add(annotationParameter);\n+                                                       continue;\n+        }\n+        swaggerParameters.add(parameter);\n     }\n-\n     swaggerParameters.addAll(methodAnnotationParameters);\n-  }\n+    }\n \n-  protected int countRealBodyParameter(List<Parameter> parameters) {\n+    protected int countRealBodyParameter(List<Parameter> parameters) {\n     int count = 0;\n     for (Parameter p : parameters) {\n-      if (ParamUtils.isRealBodyParameter(p)) {\n-        count++;\n-      }\n+        if (ParamUtils.isRealBodyParameter(p)) {\n+                                       count++;\n+        }\n     }\n \n     return count;\n-  }\n+    }\n \n-  protected void checkBodyParameter() {\n+    protected void checkBodyParameter() {\n     // annotationParameters\u4e2d\u4e0d\u80fd\u6709\u591a\u4e2abody\n     int annotationBodyCount = countRealBodyParameter(methodAnnotationParameters);\n     if (annotationBodyCount > 1) {\n-      throw new Error(String.format(\"too many (%d) body parameter in %s:%s annotation\",\n-          annotationBodyCount,\n-          providerMethod.getDeclaringClass().getName(),\n-          providerMethod.getName()));\n+        throw new Error(String.format(\"too many (%d) body parameter in %s:%s annotation\",\n+annotationBodyCount,\n+providerMethod.getDeclaringClass().getName(),\n+providerMethod.getName()));\n     }\n \n     // providerParameters\u4e2d\u4e0d\u80fd\u6709\u591a\u4e2abody\n+\n     int parameterBodyCount = countRealBodyParameter(providerParameters);\n     if (parameterBodyCount > 1) {\n-      throw new Error(String.format(\"too many (%d) body parameter in %s:%s parameters\",\n-          parameterBodyCount,\n-          providerMethod.getDeclaringClass().getName(),\n-          providerMethod.getName()));\n+        throw new Error(String.format(\"too many (%d) body parameter in %s:%s parameters\",\n+parameterBodyCount,\n+providerMethod.getDeclaringClass().getName(),\n+providerMethod.getName()));\n     }\n \n     // annotationParameters\u548cproviderParameters\u4e0d\u80fd\u540c\u65f6\u51fa\u73b0body\n+\n     if (annotationBodyCount + parameterBodyCount >= 2) {\n-      throw new Error(String.format(\"not allow both defined body parameter in %s:%s annotation and parameters\",\n-          providerMethod.getDeclaringClass().getName(),\n-          providerMethod.getName()));\n+        throw new Error(String.format(\"not allow both defined body parameter in %s:%s annotation and parameters\", providerMethod.getDeclaringClass().getName(), providerMethod.getName()));\n+    }\n     }\n-  }\n \n-  protected void scanMethodAnnotation() {\n+    protected void scanMethodAnnotation() {\n     for (Annotation annotation : providerMethod.getAnnotations()) {\n-      MethodAnnotationProcessor processor = context.findMethodAnnotationProcessor(annotation.annotationType());\n-      if (processor == null) {\n+        MethodAnnotationProcessor processor = context.findMethodAnnotationProcessor(annotation.annotationType());\n+        if (processor == null) {\n         continue;\n-      }\n-      processor.process(annotation, this);\n+        }\n+        processor.process(annotation, this);\n     }\n-\n     setDefaultTag();\n-  }\n+    }\n \n-  private void setDefaultTag() {\n+    private void setDefaultTag() {\n     // if tag has been defined, do nothing\n     if (null != operation.getTags()) {\n-      for (String tag : operation.getTags()) {\n-        if (!StringUtils.isEmpty(tag)) {\n-          return;\n+        for (String tag : operation.getTags()) {\n+                                         if (!StringUtils.isEmpty(tag)) {\n+                                                   return;\n+                                         }\n         }\n-      }\n     }\n \n     // if there is no tag, set default tag\n+\n     if (!swaggerGenerator.getDefaultTags().isEmpty()) {\n-      operation.setTags(new ArrayList<>(swaggerGenerator.getDefaultTags()));\n+        operation.setTags(new ArrayList<>(swaggerGenerator.getDefaultTags()));\n+    }\n     }\n-  }\n \n   /**\n    *\n    * \u6839\u636emethod\u4e0a\u7684\u6570\u636e\uff0c\u7efc\u5408\u751f\u6210\u5951\u7ea6\u53c2\u6570\n    */\n-  protected void scanMethodParameters() {\n+\n+    protected void scanMethodParameters() {\n     Annotation[][] allAnnotations = providerMethod.getParameterAnnotations();\n     Type[] parameterTypes = providerMethod.getGenericParameterTypes();\n     for (int paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n-      int swaggerParamCount = providerParameters.size();\n-      Type type = parameterTypes[paramIdx];\n+        int swaggerParamCount = providerParameters.size();\n+        Type type = parameterTypes[paramIdx];\n \n       // \u6839\u636eannotation\u5904\u7406\n-      Annotation[] paramAnnotations = allAnnotations[paramIdx];\n-      processByParameterAnnotation(paramAnnotations, paramIdx, type);\n-\n-      if (isArgumentNotProcessed(swaggerParamCount)) {\n+        Annotation[] paramAnnotations = allAnnotations[paramIdx];\n+        processByParameterAnnotation(paramAnnotations, paramIdx, type);\n+        if (isArgumentNotProcessed(swaggerParamCount)) {\n         // \u662f\u5426\u9700\u8981\u6839\u636e\u53c2\u6570\u7c7b\u578b\u5904\u7406\uff0c\u76ee\u6807\u573a\u666f\uff1ahttpRequest\u4e4b\u7c7b\n-        processByParameterType(type, paramIdx);\n-      }\n+                                                                             processByParameterType(type, paramIdx);\n+        }\n \n-      if (isArgumentNotProcessed(swaggerParamCount)) {\n+        if (isArgumentNotProcessed(swaggerParamCount)) {\n         // \u6ca1\u6709\u7528\u4e8e\u63cf\u8ff0\u5951\u7ea6\u7684\u6807\u6ce8\uff0c\u6839\u636e\u51fd\u6570\u539f\u578b\u6765\u53cd\u5c04\u751f\u6210\n-        context.getDefaultParamProcessor().process(this, paramIdx);\n-      }\n+                                                                             context.getDefaultParamProcessor().process(this, paramIdx);\n+        }\n \n-      if (!isArgumentNotProcessed(swaggerParamCount)) {\n-        Parameter parameter = providerParameters.get(this.providerParameters.size() - 1);\n-        AnnotationUtils.processApiParam(paramAnnotations, parameter);\n-      }\n+        if (!isArgumentNotProcessed(swaggerParamCount)) {\n+                                                                             Parameter parameter = providerParameters.get(this.providerParameters.size() - 1);\n+                                                                             AnnotationUtils.processApiParam(paramAnnotations, parameter);\n+        }\n+    }\n     }\n-  }\n \n-  private boolean isArgumentNotProcessed(int swaggerParamCount) {\n+    private boolean isArgumentNotProcessed(int swaggerParamCount) {\n     return swaggerParamCount == providerParameters.size();\n-  }\n+    }\n \n-  @SuppressWarnings({\"rawtypes\"})\n-  protected void processByParameterAnnotation(Annotation[] paramAnnotations, int paramIdx, Type parameterType) {\n+    @SuppressWarnings({\"rawtypes\"})\n+    protected void processByParameterAnnotation(Annotation[] paramAnnotations, int paramIdx, Type parameterType) {\n     String defaultValue = null;\n     Parameter parameter = null;\n     for (Annotation annotation : paramAnnotations) {\n       //JAX-RS default value cannot be mapped to parameter name directly, stored it to map with the actual parameter\n-      if (annotation instanceof DefaultValue) {\n-        defaultValue = ((DefaultValue) annotation).value();\n-      } else {\n-        ParameterAnnotationProcessor processor =\n-            context.findParameterAnnotationProcessor(annotation.annotationType());\n-        if (processor != null) {\n-          processor.process(annotation, this, paramIdx);\n-          parameter = this.providerParameters.get(this.providerParameters.size() - 1);\n+        if (annotation instanceof DefaultValue) {\n+                                                       defaultValue = ((DefaultValue) annotation).value();\n+        } else {\n+          ParameterAnnotationProcessor processor = context.findParameterAnnotationProcessor(annotation.annotationType());\n+          if (processor != null) {\n+                   processor.process(annotation, this, paramIdx);\n+                   parameter = this.providerParameters.get(this.providerParameters.size() - 1);\n+          }\n         }\n-      }\n     }\n+\n     if (parameter instanceof AbstractSerializableParameter) {\n-      if (defaultValue != null) {\n-        ((AbstractSerializableParameter<?>) parameter).setDefaultValue(defaultValue);\n-      } else if ((((AbstractSerializableParameter<?>) parameter).getDefaultValue() == null)\n-          && (!((AbstractSerializableParameter<?>) parameter)\n-          .getRequired())) { //if required false then only take java primitive values as defaults\n-        if (parameterType instanceof Class && ((Class) parameterType).isPrimitive()) {\n-          switch (parameterType.getTypeName()) {\n-            case \"boolean\":\n-              defaultValue = \"false\";\n-              break;\n-            default:\n-              defaultValue = \"0\";\n-          }\n+        if (defaultValue != null) {\n+                                                                ((AbstractSerializableParameter<?>) parameter).setDefaultValue(defaultValue);\n+        } else if ((((AbstractSerializableParameter<?>) parameter).getDefaultValue() == null) && (!((AbstractSerializableParameter<?>) parameter).getRequired())) { //if required false then only take java primitive values as defaults\n+                                                                if (parameterType instanceof Class && ((Class) parameterType).isPrimitive()) {\n+                                                                                                                                                                      switch (parameterType.getTypeName()) {\n+                                                                                                                                                 case \"boolean\":\n+                                                                                                                                                                          defaultValue = \"false\";\n+                                                                                                                                                                          break;\n+                                                                                                                                                 default:\n+                                                                                                                                                                          defaultValue = \"0\";\n+                                                                                                                                                                      }\n+                                                                }\n+\n+                                                                ((AbstractSerializableParameter<?>) parameter).setDefaultValue(defaultValue);\n         }\n-        ((AbstractSerializableParameter<?>) parameter).setDefaultValue(defaultValue);\n-      }\n     }\n-  }\n+    }\n \n-  protected void processByParameterType(Type parameterType, int paramIdx) {\n+    protected void processByParameterType(Type parameterType, int paramIdx) {\n     ParameterTypeProcessor processor = context.findParameterTypeProcessor(parameterType);\n     if (processor == null) {\n       //maybe is ArrayList ...\n-      Type realType = checkAndGetType(parameterType);\n-      if (realType != null) {\n-        processor = context.findParameterTypeProcessor(realType);\n-      }\n+        Type realType = checkAndGetType(parameterType);\n+        if (realType != null) {\n+                               processor = context.findParameterTypeProcessor(realType);\n+        }\n     }\n+\n     if (processor != null) {\n-      processor.process(this, paramIdx);\n+        processor.process(this, paramIdx);\n+    }\n     }\n-  }\n \n   // check whether is ArrayList , LinkedList ...  or not\n-  private Type checkAndGetType(Type type) {\n+\n+    private Type checkAndGetType(Type type) {\n     if (ParameterizedType.class.isAssignableFrom(type.getClass())) {\n-      ParameterizedType targetType = (ParameterizedType) type;\n-      Class<?> targetCls = (Class<?>) targetType.getRawType();\n-      if (List.class.isAssignableFrom(targetCls)) {\n-        return Types.newParameterizedType(List.class, (Class<?>) targetType.getActualTypeArguments()[0]);\n-      }\n+        ParameterizedType targetType = (ParameterizedType) type;\n+        Class<?> targetCls = (Class<?>) targetType.getRawType();\n+        if (List.class.isAssignableFrom(targetCls)) {\n+                                                                       return Types.newParameterizedType(List.class, (Class<?>) targetType.getActualTypeArguments()[0]);\n+        }\n     }\n+\n     return null;\n-  }\n+    }\n \n-  public void correctOperation() {\n+    public void correctOperation() {\n     if (StringUtils.isEmpty(operation.getOperationId())) {\n-      operation.setOperationId(providerMethod.getName());\n+        operation.setOperationId(providerMethod.getName());\n     }\n-\n     context.postProcessOperation(this);\n-\n     SwaggerUtils.correctResponses(operation);\n     addHeaderToResponse();\n-  }\n+    }\n \n-  private void addHeaderToResponse() {\n+    private void addHeaderToResponse() {\n     for (Entry<String, Response> responseEntry : operation.getResponses().entrySet()) {\n-      Response response = responseEntry.getValue();\n-\n-      for (Entry<String, Property> entry : responseHeaderMap.entrySet()) {\n-        if (response.getHeaders() != null && response.getHeaders().containsKey(entry.getKey())) {\n-          continue;\n+        Response response = responseEntry.getValue();\n+        for (Entry<String, Property> entry : responseHeaderMap.entrySet()) {\n+                                                                                          if (response.getHeaders() != null && response.getHeaders().containsKey(entry.getKey())) {\n+            continue;\n+                                                                                          }\n+                                                                                          response.addHeader(entry.getKey(), entry.getValue());\n         }\n-\n-        response.addHeader(entry.getKey(), entry.getValue());\n-      }\n     }\n-  }\n+    }\n \n-  public void scanResponse() {\n+    public void scanResponse() {\n     if (operation.getResponses() != null) {\n-      Response successResponse = operation.getResponses().get(SwaggerConst.SUCCESS_KEY);\n-      if (successResponse != null) {\n-        if (successResponse.getResponseSchema() == null) {\n+        Response successResponse = operation.getResponses().get(SwaggerConst.SUCCESS_KEY);\n+        if (successResponse != null) {\n+                                              if (successResponse.getResponseSchema() == null) {\n           // \u6807\u6ce8\u5df2\u7ecf\u5b9a\u4e49\u4e86response\uff0c\u4f46\u662f\u662fvoid\uff0c\u8fd9\u53ef\u80fd\u662f\u5728\u6807\u6ce8\u4e0a\u672a\u5b9a\u4e49\n           // \u6839\u636e\u51fd\u6570\u539f\u578b\u6765\u5904\u7406response\n-          Model model = createResponseModel();\n-          successResponse.setResponseSchema(model);\n+                                         Model model = createResponseModel();\n+                                         successResponse.setResponseSchema(model);\n+                                              }\n+\n+                                              return;\n         }\n-        return;\n-      }\n     }\n \n     Model model = createResponseModel();\n     Response response = new Response();\n     response.setResponseSchema(model);\n     operation.addResponse(SwaggerConst.SUCCESS_KEY, response);\n-  }\n+    }\n \n-  protected Model createResponseModel() {\n+    protected Model createResponseModel() {\n     Type responseType = providerMethod.getReturnType();\n     if (ReflectionUtils.isVoid(responseType)) {\n-      return null;\n+        return null;\n     }\n \n     ResponseTypeProcessor processor = context.findResponseTypeProcessor(responseType);\n     return processor.process(this, providerMethod.getGenericReturnType());\n-  }\n+    }\n \n-  public Method getProviderMethod() {\n+    public Method getProviderMethod() {\n     return providerMethod;\n-  }\n+    }\n \n-  protected void addOperationToSwagger() {\n+    protected void addOperationToSwagger() {\n     if (StringUtils.isEmpty(httpMethod)) {\n-      return;\n+        return;\n     }\n \n     Path pathObj = swagger.getPath(path);\n     if (pathObj == null) {\n-      pathObj = new Path();\n-      swagger.path(path, pathObj);\n+        pathObj = new Path();\n+        swagger.path(path, pathObj);\n     }\n \n     HttpMethod hm = HttpMethod.valueOf(httpMethod.toUpperCase(Locale.US));\n     if (pathObj.getOperationMap().get(hm) != null) {\n-      throw new Error(String.format(\"Only allowed one default path. %s:%s\",\n-          swaggerGenerator.getCls().getName(),\n-          providerMethod.getName()));\n+        throw new Error(String.format(\"Only allowed one default path. %s:%s\",\n+swaggerGenerator.getCls().getName(),\n+providerMethod.getName()));\n     }\n     pathObj.set(httpMethod, operation);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 237
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/134/OperationGenerator.java\nindex eecfdc8058..221fc770c0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/134/OperationGenerator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/134/OperationGenerator.java\n@@ -163,7 +163,7 @@ public class OperationGenerator {\n     for (Parameter providerParameter : providerParameters) {\n       if (parameter.getName().equals(providerParameter.getName())) {\n         LOGGER.warn(\n-            \"Param name [{}] is duplicated which may cause ambiguous deserialization result. Please check you schema definition\",\n+        \"Param name [{}] is duplicated which may cause ambiguous deserialization result. Please check you schema definition\",\n             parameter.getName());\n         return;\n       }\n",
            "diff_size": 1
        }
    ]
}