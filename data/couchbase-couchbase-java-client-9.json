{
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "40",
                "column": "116",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasSerializableFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                \"document for id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "40",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler/9/SerializableTranscoder.java\nindex a4a804ecee..276ca8e8bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler/9/SerializableTranscoder.java\n@@ -38,7 +38,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "41",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/9/SerializableTranscoder.java\nindex a4a804ecee..0e8ec5cf01 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/9/SerializableTranscoder.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -35,7 +36,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                            ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                 \"document for id \" + id + \", could not decode.\");\n@@ -57,7 +58,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+                                            MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/9/SerializableTranscoder.java\nindex a4a804ecee..6dc80a2ec6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/9/SerializableTranscoder.java\n@@ -34,11 +34,9 @@ import java.io.Serializable;\n public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n@@ -56,8 +54,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -65,4 +62,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/9/SerializableTranscoder.java\nindex a4a804ecee..903a849ac2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/9/SerializableTranscoder.java\n@@ -22,7 +22,6 @@ import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.deps.io.netty.buffer.ByteBuf;\n import com.couchbase.client.java.document.SerializableDocument;\n import com.couchbase.client.java.error.TranscodingException;\n-\n import java.io.Serializable;\n \n /**\n@@ -31,16 +30,14 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n+\n+public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n-\n         Serializable deserialized = TranscoderUtils.deserialize(content);\n         return newDocument(id, expiry, deserialized, cas);\n     }\n@@ -56,8 +53,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -65,4 +61,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/9/SerializableTranscoder.java\nindex a4a804ecee..2e5153f4c1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/9/SerializableTranscoder.java\n@@ -37,32 +37,32 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n-        }\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \"\n+                + \"document for id \" + id + \", could not decode.\");\n+     }\n \n-        Serializable deserialized = TranscoderUtils.deserialize(content);\n-        return newDocument(id, expiry, deserialized, cas);\n-    }\n+     Serializable deserialized = TranscoderUtils.deserialize(content);\n+     return newDocument(id, expiry, deserialized, cas);\n+ }\n \n-    @Override\n-    protected Tuple2<ByteBuf, Integer> doEncode(final SerializableDocument document) throws Exception {\n-        return Tuple.create(TranscoderUtils.serialize(document.content()), TranscoderUtils.SERIALIZED_COMPAT_FLAGS);\n-    }\n+ @Override\n+ protected Tuple2<ByteBuf, Integer> doEncode(final SerializableDocument document) throws Exception {\n+     return Tuple.create(TranscoderUtils.serialize(document.content()), TranscoderUtils.SERIALIZED_COMPAT_FLAGS);\n+ }\n \n-    @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas) {\n-        return SerializableDocument.create(id, expiry, content, cas);\n-    }\n+ @Override\n+ public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas) {\n+     return SerializableDocument.create(id, expiry, content, cas);\n+ }\n \n-    @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n-        return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n-    }\n+ @Override\n+ public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n+     MutationToken mutationToken) {\n+     return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n+ }\n \n-    @Override\n-    public Class<SerializableDocument> documentType() {\n-        return SerializableDocument.class;\n-    }\n+ @Override\n+ public Class<SerializableDocument> documentType() {\n+     return SerializableDocument.class;\n+ }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "40",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/9/SerializableTranscoder.java\nindex a4a804ecee..276ca8e8bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/9/SerializableTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_three_grams/9/SerializableTranscoder.java\n@@ -38,7 +38,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 1
        }
    ]
}