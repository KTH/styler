{
    "error_id": "202",
    "information": {
        "errors": [
            {
                "line": "144",
                "column": "52",
                "severity": "warning",
                "message": "'=' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n\n        final Observable<EntityIdScope> entityIds =allEntityIdsObservable.getEntities( applicationScopeObservable );\n        //now we have an observable of entityIds.  Walk each connection type\n\n        //get all edge types for connections",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/202/ConnectionServiceImpl.java\nindex 82c1038132..fecb59b2e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/202/ConnectionServiceImpl.java\n@@ -141,7 +141,7 @@ public class ConnectionServiceImpl implements ConnectionService {\n         final Observable<ApplicationScope> applicationScopeObservable ) {\n \n \n-        final Observable<EntityIdScope> entityIds =allEntityIdsObservable.getEntities( applicationScopeObservable );\n+        final Observable<EntityIdScope> entityIds = allEntityIdsObservable.getEntities( applicationScopeObservable );\n         //now we have an observable of entityIds.  Walk each connection type\n \n         //get all edge types for connections\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "93",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/202/ConnectionServiceImpl.java\nindex 82c1038132..5c4a8606b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/202/ConnectionServiceImpl.java\n@@ -47,137 +47,134 @@ import rx.Observable;\n @Singleton\n public class ConnectionServiceImpl implements ConnectionService {\n \n-    private final PipelineBuilderFactory pipelineBuilderFactory;\n-    private final AllEntityIdsObservable allEntityIdsObservable;\n-    private final GraphManagerFactory graphManagerFactory;\n-\n-\n-    @Inject\n-    public ConnectionServiceImpl( final PipelineBuilderFactory pipelineBuilderFactory,\n-                                  final AllEntityIdsObservable allEntityIdsObservable,\n-                                  final GraphManagerFactory graphManagerFactory ) {\n-        this.pipelineBuilderFactory = pipelineBuilderFactory;\n-        this.allEntityIdsObservable = allEntityIdsObservable;\n-        this.graphManagerFactory = graphManagerFactory;\n-    }\n-\n+  private final PipelineBuilderFactory pipelineBuilderFactory;\n+  private final AllEntityIdsObservable allEntityIdsObservable;\n+  private final GraphManagerFactory graphManagerFactory;\n \n-    @Override\n-    public Observable<ResultsPage<Entity>> searchConnection( final ConnectionSearch search ) {\n-        //set startid -- graph | es query filter -- load entities filter (verifies exists) --> results page collector\n-        // -> 1.0 results\n \n-        //  startid -- graph edge load -- entity load (verify) from ids -> results page collector\n-        // startid -- eq query candiddate -- entity load (verify) from canddiates -> results page collector\n+  @Inject\n+  public ConnectionServiceImpl(final PipelineBuilderFactory pipelineBuilderFactory,\n+                               final AllEntityIdsObservable allEntityIdsObservable,\n+                               final GraphManagerFactory graphManagerFactory) {\n+    this.pipelineBuilderFactory = pipelineBuilderFactory;\n+    this.allEntityIdsObservable = allEntityIdsObservable;\n+    this.graphManagerFactory = graphManagerFactory;\n+  }\n \n-        //startid -- graph edge load -- entity id verify --> filter to connection ref --> connection ref collector\n-        //startid -- eq query candiddate -- candidate id verify --> filter to connection ref --> connection ref\n-        // collector\n \n+  @Override\n+  public Observable<ResultsPage<Entity>> searchConnection(final ConnectionSearch search) {\n+    //set startid -- graph | es query filter -- load entities filter (verifies exists) --> results page collector\n+    // -> 1.0 results\n \n-        final Optional<String> query = search.getQuery();\n+    //  startid -- graph edge load -- entity load (verify) from ids -> results page collector\n+    // startid -- eq query candiddate -- entity load (verify) from canddiates -> results page collector\n \n-        final IdBuilder pipelineBuilder =\n-            pipelineBuilderFactory.create( search.getApplicationScope() ).withCursor( search.getCursor() )\n-                                  .withLimit( search.getLimit() ).fromId( search.getSourceNodeId() );\n+    //startid -- graph edge load -- entity id verify --> filter to connection ref --> connection ref collector\n+    //startid -- eq query candiddate -- candidate id verify --> filter to connection ref --> connection ref\n+    // collector\n \n \n-        //we want to load all entities\n+    final Optional<String> query = search.getQuery();\n \n-        final EntityBuilder results;\n+    final IdBuilder pipelineBuilder =\n+        pipelineBuilderFactory.create(search.getApplicationScope()).withCursor(search.getCursor())\n+            .withLimit(search.getLimit()).fromId(search.getSourceNodeId());\n \n \n-        if ( !query.isPresent() ) {\n-            results =\n-                pipelineBuilder.traverseConnection( search.getConnectionName(), search.getEntityType() ).loadEntities();\n-        }\n+    //we want to load all entities\n \n-        else {\n+    final EntityBuilder results;\n \n-            results =\n-                pipelineBuilder.searchConnection( search.getConnectionName(), query.get(), search.getEntityType() )\n-                               .loadEntities();\n-        }\n \n+    if (!query.isPresent()) {\n+      results =\n+          pipelineBuilder.traverseConnection(search.getConnectionName(), search.getEntityType()).loadEntities();\n+    } else {\n \n-        return results.build();\n+      results =\n+          pipelineBuilder.searchConnection(search.getConnectionName(), query.get(), search.getEntityType())\n+              .loadEntities();\n     }\n \n \n-    @Override\n-    public Observable<ResultsPage<ConnectionRef>> searchConnectionAsRefs( final ConnectionSearch search ) {\n+    return results.build();\n+  }\n \n-        final Optional<String> query = search.getQuery();\n \n-        final Id sourceNodeId = search.getSourceNodeId();\n+  @Override\n+  public Observable<ResultsPage<ConnectionRef>> searchConnectionAsRefs(final ConnectionSearch search) {\n \n-        final IdBuilder pipelineBuilder =\n-            pipelineBuilderFactory.create( search.getApplicationScope() ).withCursor( search.getCursor() )\n-                                  .withLimit( search.getLimit() ).fromId( sourceNodeId );\n+    final Optional<String> query = search.getQuery();\n \n+    final Id sourceNodeId = search.getSourceNodeId();\n \n-        final IdBuilder traversedIds;\n-        final String connectionName = search.getConnectionName();\n+    final IdBuilder pipelineBuilder =\n+        pipelineBuilderFactory.create(search.getApplicationScope()).withCursor(search.getCursor())\n+            .withLimit(search.getLimit()).fromId(sourceNodeId);\n \n-        if ( !query.isPresent() ) {\n-            traversedIds = pipelineBuilder.traverseConnection( connectionName, search.getEntityType() );\n-        }\n-        else {\n-            traversedIds =\n-                pipelineBuilder.searchConnection( connectionName, query.get(), search.getEntityType() ).loadIds();\n-        }\n \n-        //create connection refs\n+    final IdBuilder traversedIds;\n+    final String connectionName = search.getConnectionName();\n \n-        final Observable<ResultsPage<ConnectionRef>> results =\n-            traversedIds.loadConnectionRefs( sourceNodeId, connectionName ).build();\n-\n-        return results;\n+    if (!query.isPresent()) {\n+      traversedIds = pipelineBuilder.traverseConnection(connectionName, search.getEntityType());\n+    } else {\n+      traversedIds =\n+          pipelineBuilder.searchConnection(connectionName, query.get(), search.getEntityType()).loadIds();\n     }\n \n+    //create connection refs\n \n-    @Override\n-    public Observable<ConnectionScope> deDupeConnections(\n-        final Observable<ApplicationScope> applicationScopeObservable ) {\n+    final Observable<ResultsPage<ConnectionRef>> results =\n+        traversedIds.loadConnectionRefs(sourceNodeId, connectionName).build();\n \n+    return results;\n+  }\n \n-        final Observable<EntityIdScope> entityIds =allEntityIdsObservable.getEntities( applicationScopeObservable );\n-        //now we have an observable of entityIds.  Walk each connection type\n \n-        //get all edge types for connections\n-       return  entityIds.flatMap( entityIdScope -> {\n+  @Override\n+  public Observable<ConnectionScope> deDupeConnections(\n+      final Observable<ApplicationScope> applicationScopeObservable) {\n \n-            final ApplicationScope applicationScope = entityIdScope.getApplicationScope();\n-            final Id entityId = entityIdScope.getId();\n \n-            final GraphManager gm = graphManagerFactory.createEdgeManager(applicationScope );\n+    final Observable<EntityIdScope> entityIds = allEntityIdsObservable.getEntities(applicationScopeObservable);\n+    //now we have an observable of entityIds.  Walk each connection type\n \n-            return gm.getEdgeTypesFromSource(\n-                new SimpleSearchEdgeType( entityId, CpNamingUtils.EDGE_CONN_PREFIX, Optional.absent() ) )\n+    //get all edge types for connections\n+    return entityIds.flatMap(entityIdScope -> {\n \n-                //now load all edges from this node of this type\n-                .flatMap( edgeType -> {\n-                    final SearchByEdgeType searchByEdge =\n-                        new SimpleSearchByEdgeType( entityId, edgeType, Long.MAX_VALUE,\n-                            SearchByEdgeType.Order.ASCENDING, Optional.absent() );\n+      final ApplicationScope applicationScope = entityIdScope.getApplicationScope();\n+      final Id entityId = entityIdScope.getId();\n \n-                    //load edges from the source the with type specified\n-                    return gm.loadEdgesFromSource( searchByEdge );\n-                } )\n+      final GraphManager gm = graphManagerFactory.createEdgeManager(applicationScope);\n \n-                //now that we have a stream of edges, stream all versions\n-                .flatMap( edge -> {\n-                    final SearchByEdge searchByEdge =\n-                        new SimpleSearchByEdge( edge.getSourceNode(), edge.getType(), edge.getTargetNode(),\n-                            Long.MAX_VALUE, SearchByEdgeType.Order.ASCENDING, Optional.absent() );\n-                    return gm.loadEdgeVersions( searchByEdge );\n-                } )\n+      return gm.getEdgeTypesFromSource(\n+          new SimpleSearchEdgeType(entityId, CpNamingUtils.EDGE_CONN_PREFIX, Optional.absent()))\n \n-            //skip the first version since it's the one we want to retain\n-            // validate there is only 1 version of it, delete anything > than the min\n-                .skip( 1 )\n-                .flatMap( edgeToDelete -> gm.deleteEdge( edgeToDelete ) )\n-                .map(deletedEdge ->  new ConnectionScope( applicationScope, deletedEdge ) ) ;\n-        });\n-    }\n+          //now load all edges from this node of this type\n+          .flatMap(edgeType -> {\n+            final SearchByEdgeType searchByEdge =\n+                new SimpleSearchByEdgeType(entityId, edgeType, Long.MAX_VALUE,\n+                    SearchByEdgeType.Order.ASCENDING, Optional.absent());\n+\n+            //load edges from the source the with type specified\n+            return gm.loadEdgesFromSource(searchByEdge);\n+          })\n+\n+          //now that we have a stream of edges, stream all versions\n+          .flatMap(edge -> {\n+            final SearchByEdge searchByEdge =\n+                new SimpleSearchByEdge(edge.getSourceNode(), edge.getType(), edge.getTargetNode(),\n+                    Long.MAX_VALUE, SearchByEdgeType.Order.ASCENDING, Optional.absent());\n+            return gm.loadEdgeVersions(searchByEdge);\n+          })\n+\n+          //skip the first version since it's the one we want to retain\n+          // validate there is only 1 version of it, delete anything > than the min\n+          .skip(1)\n+          .flatMap(edgeToDelete -> gm.deleteEdge(edgeToDelete))\n+          .map(deletedEdge -> new ConnectionScope(applicationScope, deletedEdge));\n+    });\n+  }\n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/202/ConnectionServiceImpl.java\nindex 82c1038132..fecb59b2e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/202/ConnectionServiceImpl.java\n@@ -141,7 +141,7 @@ public class ConnectionServiceImpl implements ConnectionService {\n         final Observable<ApplicationScope> applicationScopeObservable ) {\n \n \n-        final Observable<EntityIdScope> entityIds =allEntityIdsObservable.getEntities( applicationScopeObservable );\n+        final Observable<EntityIdScope> entityIds = allEntityIdsObservable.getEntities( applicationScopeObservable );\n         //now we have an observable of entityIds.  Walk each connection type\n \n         //get all edge types for connections\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/202/ConnectionServiceImpl.java\nindex 82c1038132..b381a075f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/202/ConnectionServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/202/ConnectionServiceImpl.java\n@@ -141,7 +141,8 @@ public class ConnectionServiceImpl implements ConnectionService {\n         final Observable<ApplicationScope> applicationScopeObservable ) {\n \n \n-        final Observable<EntityIdScope> entityIds =allEntityIdsObservable.getEntities( applicationScopeObservable );\n+        final Observable<EntityIdScope> entityIds =\n+        allEntityIdsObservable.getEntities( applicationScopeObservable );\n         //now we have an observable of entityIds.  Walk each connection type\n \n         //get all edge types for connections\n",
            "diff_size": 2
        }
    ]
}