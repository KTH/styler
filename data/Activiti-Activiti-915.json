{
    "error_id": "915",
    "information": {
        "errors": [
            {
                "line": "444",
                "severity": "error",
                "message": "'METHOD_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    private List<IdentityLink> getIdentityLinks(String taskId) {\n        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n            List<String> userRoles = securityManager.getAuthenticatedUserRoles();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/915/TaskRuntimeImpl.java\nindex 1dec98789a..f28c786f5d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/915/TaskRuntimeImpl.java\n@@ -153,9 +153,9 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         if (!task.getAssignee().equals(authenticatedUserId)) {\n             throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n+\n         taskService.complete(completeTaskPayload.getTaskId(),\n                 completeTaskPayload.getVariables(), true);\n \n@@ -435,13 +435,13 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n \n         taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n+\n         taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n                 saveTaskPayload.getVariables());\n     }\n \n-\n     private List<IdentityLink> getIdentityLinks(String taskId) {\n+\n         String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n             List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "444",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/915/TaskRuntimeImpl.java\nindex 1dec98789a..1fe2d56a89 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/915/TaskRuntimeImpl.java\n@@ -153,9 +153,9 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         if (!task.getAssignee().equals(authenticatedUserId)) {\n             throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n+\n         taskService.complete(completeTaskPayload.getTaskId(),\n                 completeTaskPayload.getVariables(), true);\n \n@@ -262,14 +262,14 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         task.setOwner(securityManager.getAuthenticatedUserId());\n         taskService.saveTask(task);\n         if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : createTaskPayload.getCandidateGroups() ) {\n+            for (String g : createTaskPayload.getCandidateGroups()) {\n                 taskService.addCandidateGroup(task.getId(),\n                         g);\n             }\n         }\n \n         if (createTaskPayload.getCandidateUsers() != null && !createTaskPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : createTaskPayload.getCandidateUsers() ) {\n+            for (String u : createTaskPayload.getCandidateUsers()) {\n                 taskService.addCandidateUser(task.getId(),\n                         u);\n             }\n@@ -297,7 +297,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.addCandidateUser(internalTask.getId(),\n                         u);\n             }\n@@ -323,7 +323,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.deleteCandidateUser(internalTask.getId(),\n                         u);\n             }\n@@ -348,7 +348,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.addCandidateGroup(internalTask.getId(),\n                         g);\n             }\n@@ -373,7 +373,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n \n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.deleteCandidateGroup(internalTask.getId(),\n                         g);\n             }\n@@ -385,7 +385,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> userCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getUserId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         userCandidates.add(i.getUserId());\n@@ -402,7 +402,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> groupCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getGroupId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         groupCandidates.add(i.getGroupId());\n@@ -435,7 +435,7 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n \n         taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n+\n         taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n                 saveTaskPayload.getVariables());\n     }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 136.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 145.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 163.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 171.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 185.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 193.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 199.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 215.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 224.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "283",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 284.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 308.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "330",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 331.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "353",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 354.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "429",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 263).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/915/TaskRuntimeImpl.java\nindex 1dec98789a..d3711aa8bd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/915/TaskRuntimeImpl.java\n@@ -47,7 +47,6 @@ import org.activiti.runtime.api.model.impl.APITaskConverter;\n import org.activiti.runtime.api.model.impl.APIVariableInstanceConverter;\n import org.activiti.runtime.api.query.impl.PageImpl;\n import org.springframework.security.access.prepost.PreAuthorize;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n@@ -71,14 +70,13 @@ public class TaskRuntimeImpl implements TaskRuntime {\n                            SecurityManager securityManager,\n                            APITaskConverter taskConverter,\n                            APIVariableInstanceConverter variableInstanceConverter,\n-                           TaskRuntimeConfiguration configuration,\n-                           TaskRuntimeHelper taskRuntimeHelper) {\n-        this.taskService = taskService;\n-        this.securityManager = securityManager;\n-        this.taskConverter = taskConverter;\n-        this.variableInstanceConverter = variableInstanceConverter;\n-        this.configuration = configuration;\n-        this.taskRuntimeHelper = taskRuntimeHelper;\n+                           TaskRuntimeConfiguration configuration, TaskRuntimeHelper taskRuntimeHelper) {\n+    this.taskService = taskService;\n+    this.securityManager = securityManager;\n+    this.taskConverter = taskConverter;\n+    this.variableInstanceConverter = variableInstanceConverter;\n+    this.configuration = configuration;\n+    this.taskRuntimeHelper = taskRuntimeHelper;\n     }\n \n     @Override\n@@ -93,121 +91,116 @@ public class TaskRuntimeImpl implements TaskRuntime {\n \n     @Override\n     public Page<Task> tasks(Pageable pageable) {\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            return tasks(pageable,\n-                    TaskPayloadBuilder.tasks().withAssignee(authenticatedUserId).withGroups(userGroups).build());\n-        }\n-        throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+        List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+        return tasks(pageable, TaskPayloadBuilder.tasks().withAssignee(authenticatedUserId).withGroups(userGroups).build());\n+    }\n+    throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n     }\n \n     @Override\n-    public Page<Task> tasks(Pageable pageable,\n-                            GetTasksPayload getTasksPayload) {\n-        TaskQuery taskQuery = taskService.createTaskQuery();\n-        if (getTasksPayload == null) {\n-            getTasksPayload = TaskPayloadBuilder.tasks().build();\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            getTasksPayload.setAssigneeId(authenticatedUserId);\n-            getTasksPayload.setGroups(userGroups);\n-        } else {\n-            throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n-        }\n-        taskQuery = taskQuery.or()\n-                .taskCandidateOrAssigned(getTasksPayload.getAssigneeId(),\n-                        getTasksPayload.getGroups())\n-                .taskOwner(authenticatedUserId)\n-                .endOr();\n-\n-        if (getTasksPayload.getProcessInstanceId() != null) {\n-            taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n-        }\n-        if (getTasksPayload.getParentTaskId() != null) {\n-            taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n-        }\n-        List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n-                pageable.getMaxItems()));\n-        return new PageImpl<>(tasks,\n-                Math.toIntExact(taskQuery.count()));\n+    public Page<Task> tasks(Pageable pageable, GetTasksPayload getTasksPayload) {\n+    TaskQuery taskQuery = taskService.createTaskQuery();\n+    if (getTasksPayload == null) {\n+        getTasksPayload = TaskPayloadBuilder.tasks().build();\n+    }\n+\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+        List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+        getTasksPayload.setAssigneeId(authenticatedUserId);\n+        getTasksPayload.setGroups(userGroups);\n+    } else {\n+      throw new IllegalStateException(\"You need an authenticated user to perform a task query\");\n+    }\n+    taskQuery = taskQuery.or().taskCandidateOrAssigned(getTasksPayload.getAssigneeId(),\n+                                                       getTasksPayload.getGroups()).taskOwner(authenticatedUserId).endOr();\n+    if (getTasksPayload.getProcessInstanceId() != null) {\n+        taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n+    }\n+\n+    if (getTasksPayload.getParentTaskId() != null) {\n+        taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n+    }\n+\n+    List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n+                                                             pageable.getMaxItems()));\n+    return new PageImpl<>(tasks, Math.toIntExact(taskQuery.count()));\n     }\n \n     @Override\n     public Task complete(CompleteTaskPayload completeTaskPayload) {\n         //@TODO: not the most efficient way to return the just completed task, improve\n         //      we might need to create an empty shell with the task ID and Status only\n-        Task task;\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        try {\n-            task = task(completeTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot complete task\" + completeTaskPayload.getTaskId() + \" due he/she cannot access to the task\");\n-        }\n+    Task task;\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    try {\n+        task = task(completeTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot complete task\" + completeTaskPayload.getTaskId() + \" due he/she cannot access to the task\");\n+    }\n         // validate the the task does have an assignee\n-        if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"The task needs to be claimed before trying to complete it\");\n-        }\n-        if (!task.getAssignee().equals(authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n-        }\n-        \n-        taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n-        taskService.complete(completeTaskPayload.getTaskId(),\n-                completeTaskPayload.getVariables(), true);\n-\n \n-        ((TaskImpl) task).setStatus(Task.TaskStatus.COMPLETED);\n+    if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n+        throw new IllegalStateException(\"The task needs to be claimed before trying to complete it\");\n+    }\n \n-        return task;\n+    if (!task.getAssignee().equals(authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n+    }\n+    taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n+    taskService.complete(completeTaskPayload.getTaskId(),\n+                         completeTaskPayload.getVariables(),\n+                         true);\n+    ((TaskImpl) task).setStatus(Task.TaskStatus.COMPLETED);\n+    return task;\n     }\n \n     @Override\n     public Task claim(ClaimTaskPayload claimTaskPayload) {\n         // Validate that the task is visible by the currently authorized user\n-        Task task;\n-        try {\n-            task = task(claimTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot claim task\" + claimTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n-        }\n+    Task task;\n+    try {\n+        task = task(claimTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot claim task\" + claimTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n+    }\n         // validate the the task doesn't have an assignee\n-        if (task.getAssignee() != null && !task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"The task was already claimed, the assignee of this task needs to release it first for you to claim it\");\n-        }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        claimTaskPayload.setAssignee(authenticatedUserId);\n-        taskService.claim(claimTaskPayload.getTaskId(),\n-                claimTaskPayload.getAssignee());\n+    if (task.getAssignee() != null && !task.getAssignee().isEmpty()) {\n+        throw new IllegalStateException(\"The task was already claimed, the assignee of this task needs to release it first for you to claim it\");\n+    }\n \n-        return task(claimTaskPayload.getTaskId());\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    claimTaskPayload.setAssignee(authenticatedUserId);\n+    taskService.claim(claimTaskPayload.getTaskId(),\n+                      claimTaskPayload.getAssignee());\n+    return task(claimTaskPayload.getTaskId());\n     }\n \n     @Override\n     public Task release(ReleaseTaskPayload releaseTaskPayload) {\n         // Validate that the task is visible by the currently authorized user\n-        Task task;\n-        try {\n-            task = task(releaseTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot claim task\" + releaseTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n-        }\n+    Task task;\n+    try {\n+        task = task(releaseTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot claim task\" + releaseTaskPayload.getTaskId() + \" due it is not a candidate for it\");\n+    }\n         // validate the the task doesn't have an assignee\n-        if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n-            throw new IllegalStateException(\"You cannot release a task that is not claimed\");\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        // validate that you are trying to release task where you are the assignee\n-        if (!task.getAssignee().equals(authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot release a task where you are not the assignee\");\n-        }\n \n-        taskService.unclaim(releaseTaskPayload.getTaskId());\n-        return task(releaseTaskPayload.getTaskId());\n+    if (task.getAssignee() == null || task.getAssignee().isEmpty()) {\n+        throw new IllegalStateException(\"You cannot release a task that is not claimed\");\n+    }\n+\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+        // validate that you are trying to release task where you are the assignee\n+    if (!task.getAssignee().equals(authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot release a task where you are not the assignee\");\n+    }\n+    taskService.unclaim(releaseTaskPayload.getTaskId());\n+    return task(releaseTaskPayload.getTaskId());\n     }\n \n     @Override\n@@ -219,34 +212,35 @@ public class TaskRuntimeImpl implements TaskRuntime {\n     public Task delete(DeleteTaskPayload deleteTaskPayload) {\n         //@TODO: not the most efficient way to return the just deleted task, improve\n         //      we might need to create an empty shell with the task ID and Status only\n-        Task task;\n-        try {\n-            task = task(deleteTaskPayload.getTaskId());\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot delete the task\" + deleteTaskPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    Task task;\n+    try {\n+        task = task(deleteTaskPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot delete the task\" + deleteTaskPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n+\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         // validate that you are trying to delete task where you are the assignee or the owner\n-        if ((task.getAssignee() == null || task.getAssignee().isEmpty() || !task.getAssignee().equals(authenticatedUserId)) &&\n-                (task.getOwner() == null || task.getOwner().isEmpty() || !task.getOwner().equals(authenticatedUserId))) {\n-            throw new IllegalStateException(\"You cannot delete a task where you are not the assignee/owner\");\n-        }\n-        TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n-                task.getName(),\n-                Task.TaskStatus.CANCELLED);\n-        if (!deleteTaskPayload.hasReason()) {\n-            deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n-        }\n-        taskService.deleteTask(deleteTaskPayload.getTaskId(),\n-                deleteTaskPayload.getReason(),\n-                true);\n-        return deletedTaskData;\n+    if ((task.getAssignee() == null || task.getAssignee().isEmpty() || !task.getAssignee().equals(authenticatedUserId)) && (task.getOwner() == null || task.getOwner().isEmpty() || !task.getOwner().equals(authenticatedUserId))) {\n+        throw new IllegalStateException(\"You cannot delete a task where you are not the assignee/owner\");\n+    }\n+\n+    TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n+                                            task.getName(),\n+                                            Task.TaskStatus.CANCELLED);\n+    if (!deleteTaskPayload.hasReason()) {\n+        deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n+    }\n+    taskService.deleteTask(deleteTaskPayload.getTaskId(),\n+                           deleteTaskPayload.getReason(),\n+                           true);\n+    return deletedTaskData;\n     }\n \n     @Override\n     public Task create(CreateTaskPayload createTaskPayload) {\n         if (createTaskPayload.getName() == null || createTaskPayload.getName().isEmpty()) {\n-            throw new IllegalStateException(\"You cannot create a task without name\");\n+        throw new IllegalStateException(\"You cannot create a task without name\");\n         }\n \n         org.activiti.engine.task.Task task = taskService.newTask();\n@@ -262,198 +256,181 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         task.setOwner(securityManager.getAuthenticatedUserId());\n         taskService.saveTask(task);\n         if (createTaskPayload.getCandidateGroups() != null && !createTaskPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : createTaskPayload.getCandidateGroups() ) {\n-                taskService.addCandidateGroup(task.getId(),\n-                        g);\n+            for (String g : createTaskPayload.getCandidateGroups()) {\n+                taskService.addCandidateGroup(task.getId(), g);\n             }\n         }\n \n         if (createTaskPayload.getCandidateUsers() != null && !createTaskPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : createTaskPayload.getCandidateUsers() ) {\n-                taskService.addCandidateUser(task.getId(),\n-                        u);\n+            for (String u : createTaskPayload.getCandidateUsers()) {\n+                taskService.addCandidateUser(task.getId(), u);\n             }\n         }\n-\n         return taskConverter.from(task);\n     }\n \n     @Override\n     public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+        internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n \n         // validate that you are trying to add CandidateUsers to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n+    }\n \n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.addCandidateUser(internalTask.getId(),\n-                        u);\n-            }\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.addCandidateUser(internalTask.getId(), u);\n         }\n     }\n+    }\n \n     @Override\n     public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+        internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateUsersPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateUsersPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n \n         // validate that you are trying to add CandidateUsers to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n+    }\n \n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.deleteCandidateUser(internalTask.getId(),\n-                        u);\n-            }\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.deleteCandidateUser(internalTask.getId(), u);\n         }\n     }\n+    }\n \n     @Override\n     public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+        internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         // validate that you are trying to add CandidateGroups to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n+    }\n \n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.addCandidateGroup(internalTask.getId(),\n-                        g);\n-            }\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.addCandidateGroup(internalTask.getId(), g);\n         }\n     }\n+    }\n \n     @Override\n     public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        org.activiti.engine.task.Task internalTask;\n-        try {\n-            internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n-\n-        } catch (IllegalStateException ex) {\n-            throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n-        }\n+    org.activiti.engine.task.Task internalTask;\n+    try {\n+        internalTask = taskRuntimeHelper.getInternalTaskWithChecks(candidateGroupsPayload.getTaskId());\n+    } catch (IllegalStateException ex) {\n+      throw new IllegalStateException(\"The authenticated user cannot update the task\" + candidateGroupsPayload.getTaskId() + \" due it is not the current assignee\");\n+    }\n \n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         // validate that you are trying to add CandidateGroups to the task where you are the assignee\n-        if (!Objects.equals(internalTask.getAssignee(), authenticatedUserId)) {\n-            throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n-        }\n-\n+    if (!Objects.equals(internalTask.getAssignee(),\n+                        authenticatedUserId)) {\n+        throw new IllegalStateException(\"You cannot update a task where you are not the assignee\");\n+    }\n \n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.deleteCandidateGroup(internalTask.getId(),\n-                        g);\n-            }\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.deleteCandidateGroup(internalTask.getId(), g);\n         }\n     }\n+    }\n \n     @Override\n     public List<String> userCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> userCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getUserId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        userCandidates.add(i.getUserId());\n-                    }\n-                }\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> userCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+        if (i.getUserId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+                userCandidates.add(i.getUserId());\n             }\n-\n         }\n-        return userCandidates;\n+        }\n+    }\n+    return userCandidates;\n     }\n \n     @Override\n     public List<String> groupCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> groupCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getGroupId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        groupCandidates.add(i.getGroupId());\n-                    }\n-                }\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> groupCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+        if (i.getGroupId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+                groupCandidates.add(i.getGroupId());\n             }\n-\n         }\n-        return groupCandidates;\n+        }\n+    }\n+    return groupCandidates;\n     }\n \n     @Override\n     public List<VariableInstance> variables(GetTaskVariablesPayload getTaskVariablesPayload) {\n-        taskRuntimeHelper.assertHasAccessToTask(getTaskVariablesPayload.getTaskId());\n-        return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n+    taskRuntimeHelper.assertHasAccessToTask(getTaskVariablesPayload.getTaskId());\n+    return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n     }\n \n     @Override\n     public void createVariable(CreateTaskVariablePayload createTaskVariablePayload) {\n-        taskRuntimeHelper.createVariable(false, createTaskVariablePayload);\n+    taskRuntimeHelper.createVariable(false, createTaskVariablePayload);\n     }\n \n     @Override\n     public void updateVariable(UpdateTaskVariablePayload updateTaskVariablePayload) {\n-        taskRuntimeHelper.updateVariable(false, updateTaskVariablePayload);\n+    taskRuntimeHelper.updateVariable(false, updateTaskVariablePayload);\n     }\n \n     @Override\n     public void save(SaveTaskPayload saveTaskPayload) {\n-        taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n-\n-        taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n-        taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n-                saveTaskPayload.getVariables());\n+    taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n+    taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n+    taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n+                                  saveTaskPayload.getVariables());\n     }\n \n-\n     private List<IdentityLink> getIdentityLinks(String taskId) {\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId,\n-                    userGroups).taskId(taskId).singleResult();\n-            if (internalTask == null) {\n-                throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n-            }\n-            return taskService.getIdentityLinksForTask(taskId);\n-        }\n-        throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+        List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n+        List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+        org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId, userGroups).taskId(taskId).singleResult();\n+        if (internalTask == null) {\n+                                                                           throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n+        }\n+        return taskService.getIdentityLinksForTask(taskId);\n+    }\n+    throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 272
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "443",
                    "column": "31",
                    "severity": "error",
                    "message": "GenericWhitespace '>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "443",
                    "column": "31",
                    "severity": "error",
                    "message": "GenericWhitespace '>' should followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "443",
                    "column": "63",
                    "severity": "error",
                    "message": "'{' at column 63 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "443",
                    "column": "63",
                    "severity": "error",
                    "message": "WhitespaceAround: '{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "443",
                    "column": "90",
                    "severity": "error",
                    "message": "WhitespaceAround: '=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/915/TaskRuntimeImpl.java\nindex 1dec98789a..bdb7e9d1a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/915/TaskRuntimeImpl.java\n@@ -153,9 +153,9 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         if (!task.getAssignee().equals(authenticatedUserId)) {\n             throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n+\n         taskService.complete(completeTaskPayload.getTaskId(),\n                 completeTaskPayload.getVariables(), true);\n \n@@ -435,25 +435,23 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n \n         taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n+\n         taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n                 saveTaskPayload.getVariables());\n     }\n \n-\n-    private List<IdentityLink> getIdentityLinks(String taskId) {\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-        if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n-            List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n-            List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n-            org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId,\n-                    userGroups).taskId(taskId).singleResult();\n-            if (internalTask == null) {\n-                throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n-            }\n-            return taskService.getIdentityLinksForTask(taskId);\n+    private List<IdentityLink >getIdentityLinks(String taskId){ StringauthenticatedUserId= securityManager.getAuthenticatedUserId();\n+    if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n+        List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n+        List<String> userGroups = securityManager.getAuthenticatedUserGroups();\n+        org.activiti.engine.task.Task internalTask = taskService.createTaskQuery().taskCandidateOrAssigned(authenticatedUserId,\n+                userGroups).taskId(taskId).singleResult();\n+        if (internalTask == null) {\n+            throw new NotFoundException(\"Unable to find task for the given id: \" + taskId + \" for user: \" + authenticatedUserId + \" (with groups: \" + userGroups + \" & with roles: \" + userRoles + \")\");\n         }\n-        throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n+        return taskService.getIdentityLinksForTask(taskId);\n     }\n+    throw new IllegalStateException(\"There is no authenticated user, we need a user authenticated to find tasks\");\n+}\n \n }\n",
            "diff_size": 18
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/915/TaskRuntimeImpl.java\nindex 1dec98789a..f28c786f5d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/915/TaskRuntimeImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/915/TaskRuntimeImpl.java\n@@ -153,9 +153,9 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         if (!task.getAssignee().equals(authenticatedUserId)) {\n             throw new IllegalStateException(\"You cannot complete the task if you are not assigned to it\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-                \n+\n         taskService.complete(completeTaskPayload.getTaskId(),\n                 completeTaskPayload.getVariables(), true);\n \n@@ -435,13 +435,13 @@ public class TaskRuntimeImpl implements TaskRuntime {\n         taskRuntimeHelper.assertHasAccessToTask(saveTaskPayload.getTaskId());\n \n         taskRuntimeHelper.handleSaveTaskPayload(saveTaskPayload);\n-        \n+\n         taskService.setVariablesLocal(saveTaskPayload.getTaskId(),\n                 saveTaskPayload.getVariables());\n     }\n \n-\n     private List<IdentityLink> getIdentityLinks(String taskId) {\n+\n         String authenticatedUserId = securityManager.getAuthenticatedUserId();\n         if (authenticatedUserId != null && !authenticatedUserId.isEmpty()) {\n             List<String> userRoles = securityManager.getAuthenticatedUserRoles();\n",
            "diff_size": 5
        }
    ]
}