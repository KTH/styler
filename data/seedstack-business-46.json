{
    "error_id": "46",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.spi;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "13",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/46/BaseDtoInfoResolver.java\nindex 154c51b571..168ca13d6e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/46/BaseDtoInfoResolver.java\n@@ -5,34 +5,35 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.spi;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n+package org .seedstack.business.spi;import\n \n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import org.seedstack.business.domain.AggregateRoot;\n-import org.seedstack.business.domain.DomainRegistry;\n-import org.seedstack.business.domain.Factory;\n-import org.seedstack.business.domain.Producible;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.business.internal.utils.MethodMatcher;\n-import org.seedstack.shed.reflect.ReflectUtils;\n+static com.google.common.base.Preconditions.checkNotNull;\n \n-/**\n+ import java.lang.reflect.Method;\n+ import java.util.Arrays;\n+ import java.util.Optional;\n+ import org.seedstack.business.domain.AggregateRoot;\n+ import org.seedstack.business.domain.DomainRegistry;\n+ import org.seedstack.business.domain.Factory;\n+ import org.seedstack.business.domain.Producible;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.business.internal.utils.MethodMatcher;\n+ import org.seedstack.shed.reflect.ReflectUtils;\n+\n+ /**\n  * An helper base class that can be extended to create an implementation of {@link\n  * DtoInfoResolver}.\n  */\n-public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n-    private final DomainRegistry domainRegistry;\n+ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n+     private final DomainRegistry domainRegistry;\n \n-    protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n-        this.domainRegistry = domainRegistry;\n-    }\n+     protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n+         this.domainRegistry = domainRegistry;\n+     }\n \n-    /**\n+     /**\n      * Implements the logic to create an aggregate identifier, using a factory if the identifier class\n      * implements {@link Producible}.\n      *\n@@ -42,29 +43,29 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <I>              the type of the aggregate root identifier.\n      * @return the identifier.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n-        if (id != null) {\n-            if (aggregateIdClass.isAssignableFrom(id.getClass())) {\n-                return id;\n-            } else {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n-                        .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            }\n-        } else {\n-            if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            } else {\n-                return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n-                        .create(parameters);\n-            }\n-        }\n-    }\n+     @SuppressWarnings(\"unchecked\")\n+     protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n+         if (id != null) {\n+             if (aggregateIdClass.isAssignableFrom(id.getClass())) {\n+                 return id;\n+             } else {\n+                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n+                         .put(\"dtoIdClass\", id.getClass()\n+                                 .getName())\n+                         .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+             }\n+         } else {\n+             if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n+                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n+                         .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+             } else {\n+                 return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n+                         .create(parameters);\n+             }\n+         }\n+     }\n \n-    /**\n+     /**\n      * Implements the logic to create an aggregate.\n      *\n      * @param aggregateClass the aggregate class.\n@@ -72,47 +73,48 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <A>            the type of the aggregate root.\n      * @return the aggregate root.\n      */\n-    protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n-        checkNotNull(aggregateClass);\n-        checkNotNull(parameters);\n+     protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n+         checkNotNull(aggregateClass);\n+         checkNotNull(parameters);\n \n-        Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n+         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n \n-        // Find the method in the factory which match the signature determined with the previously\n-        // extracted parameters\n-        Method factoryMethod;\n-        boolean useDefaultFactory = false;\n-        try {\n-            factoryMethod = MethodMatcher.findMatchingMethod(factory.getClass(), aggregateClass, parameters);\n-            if (factoryMethod == null) {\n-                useDefaultFactory = true;\n-            }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"parameters\", Arrays.toString(parameters));\n-        }\n+         // Find the method in the factory which match the signature determined with the previously\n+         // extracted parameters\n+         Method factoryMethod;\n+         boolean useDefaultFactory = false;\n+         try {\n+             factoryMethod = MethodMatcher.findMatchingMethod(factory.getClass(), aggregateClass, parameters);\n+             if (factoryMethod == null) {\n+                 useDefaultFactory = true;\n+             }\n+         } catch (Exception e) {\n+             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n+                     .put(\"aggregateClass\", aggregateClass.getName())\n+                     .put(\"parameters\", Arrays.toString(parameters));\n+         }\n \n-        // Invoke the factory to create the aggregate root\n-        try {\n-            if (useDefaultFactory) {\n-                return factory.create(parameters);\n-            } else {\n-                if (parameters.length == 0) {\n-                    return ReflectUtils.invoke(factoryMethod, factory);\n-                } else {\n-                    return ReflectUtils.invoke(factoryMethod, factory, parameters);\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n-                            .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n-        }\n-    }\n-}\n+         // Invoke the factory to create the aggregate root\n+         try {\n+             if (useDefaultFactory) {\n+                 return factory.create(parameters);\n+             } else {\n+                 if (parameters.length == 0) {\n+                     return ReflectUtils.invoke(factoryMethod, factory);\n+                 } else {\n+                     return ReflectUtils.invoke(factoryMethod, factory, parameters);\n+                 }\n+             }\n+         } catch (Exception e) {\n+             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n+                     .put(\"aggregateClass\", aggregateClass.getName())\n+                     .put(\"factoryClass\", factory.getClass()\n+                             .getName())\n+                     .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n+                             .map(Method::getName)\n+                             .orElse(\"create\"))\n+                     .put(\"parameters\", Arrays.toString(parameters));\n+         }\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/46/BaseDtoInfoResolver.java\nindex 154c51b571..097617f68d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/46/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 81.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/46/BaseDtoInfoResolver.java\nindex 154c51b571..ce92a6bda9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/46/BaseDtoInfoResolver.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -27,8 +28,7 @@ import org.seedstack.shed.reflect.ReflectUtils;\n  */\n public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n     private final DomainRegistry domainRegistry;\n-\n-    protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n+protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n         this.domainRegistry = domainRegistry;\n     }\n \n@@ -50,8 +50,7 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             } else {\n                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n                         .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+                                .getName()).put(\"aggregateIdClass\", aggregateIdClass.getName());\n             }\n         } else {\n             if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n@@ -77,8 +76,7 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n         checkNotNull(parameters);\n \n         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n-\n-        // Find the method in the factory which match the signature determined with the previously\n+// Find the method in the factory which match the signature determined with the previously\n         // extracted parameters\n         Method factoryMethod;\n         boolean useDefaultFactory = false;\n@@ -108,11 +106,9 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n                     .put(\"aggregateClass\", aggregateClass.getName())\n                     .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n+                            .getName()).put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n                             .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n+                            .orElse(\"create\")).put(\"parameters\", Arrays.toString(parameters));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/46/BaseDtoInfoResolver.java\nindex 154c51b571..967dc9f561 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/46/BaseDtoInfoResolver.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.spi;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.Optional;\n@@ -25,9 +24,13 @@ import org.seedstack.shed.reflect.ReflectUtils;\n  * An helper base class that can be extended to create an implementation of {@link\n  * DtoInfoResolver}.\n  */\n+\n+\n public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n+\n     private final DomainRegistry domainRegistry;\n \n+\n     protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n         this.domainRegistry = domainRegistry;\n     }\n@@ -42,24 +45,22 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <I>              the type of the aggregate root identifier.\n      * @return the identifier.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n     protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n         if (id != null) {\n             if (aggregateIdClass.isAssignableFrom(id.getClass())) {\n                 return id;\n             } else {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n-                        .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID).put(\"dtoIdClass\", id.getClass().getName())\n+.put(\"aggregateIdClass\", aggregateIdClass.getName());\n             }\n         } else {\n-            if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+            if (! Producible.class\n+                .isAssignableFrom(aggregateIdClass)) {\n+                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE).put(\"aggregateIdClass\", aggregateIdClass.getName());\n             } else {\n-                return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n-                        .create(parameters);\n+                return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class)).create(parameters);\n             }\n         }\n     }\n@@ -72,14 +73,16 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <A>            the type of the aggregate root.\n      * @return the aggregate root.\n      */\n+\n+\n     protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n         checkNotNull(aggregateClass);\n         checkNotNull(parameters);\n-\n         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n \n         // Find the method in the factory which match the signature determined with the previously\n         // extracted parameters\n+\n         Method factoryMethod;\n         boolean useDefaultFactory = false;\n         try {\n@@ -87,10 +90,11 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n             if (factoryMethod == null) {\n                 useDefaultFactory = true;\n             }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"parameters\", Arrays.toString(parameters));\n+        }\n+\n+catch(Exception e) {\n+            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD).put(\"aggregateClass\", aggregateClass.getName())\n+.put(\"parameters\", Arrays.toString(parameters));\n         }\n \n         // Invoke the factory to create the aggregate root\n@@ -104,15 +108,15 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n                     return ReflectUtils.invoke(factoryMethod, factory, parameters);\n                 }\n             }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n-                            .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n+        }\n+\n+catch(Exception e) {\n+            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD).put(\"aggregateClass\", aggregateClass.getName())\n+.put(\"factoryClass\", factory.getClass().getName())\n+.put(\"factoryMethod\",\n+Optional.ofNullable(factoryMethod).map(Method::getName)\n+.orElse(\"create\"))\n+.put(\"parameters\", Arrays.toString(parameters));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "13",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'catch rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/46/BaseDtoInfoResolver.java\nindex 154c51b571..168ca13d6e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/46/BaseDtoInfoResolver.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/46/BaseDtoInfoResolver.java\n@@ -5,34 +5,35 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.spi;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n+package org .seedstack.business.spi;import\n \n-import java.lang.reflect.Method;\n-import java.util.Arrays;\n-import java.util.Optional;\n-import org.seedstack.business.domain.AggregateRoot;\n-import org.seedstack.business.domain.DomainRegistry;\n-import org.seedstack.business.domain.Factory;\n-import org.seedstack.business.domain.Producible;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.business.internal.utils.MethodMatcher;\n-import org.seedstack.shed.reflect.ReflectUtils;\n+static com.google.common.base.Preconditions.checkNotNull;\n \n-/**\n+ import java.lang.reflect.Method;\n+ import java.util.Arrays;\n+ import java.util.Optional;\n+ import org.seedstack.business.domain.AggregateRoot;\n+ import org.seedstack.business.domain.DomainRegistry;\n+ import org.seedstack.business.domain.Factory;\n+ import org.seedstack.business.domain.Producible;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.business.internal.utils.MethodMatcher;\n+ import org.seedstack.shed.reflect.ReflectUtils;\n+\n+ /**\n  * An helper base class that can be extended to create an implementation of {@link\n  * DtoInfoResolver}.\n  */\n-public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n-    private final DomainRegistry domainRegistry;\n+ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n+     private final DomainRegistry domainRegistry;\n \n-    protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n-        this.domainRegistry = domainRegistry;\n-    }\n+     protected BaseDtoInfoResolver(DomainRegistry domainRegistry) {\n+         this.domainRegistry = domainRegistry;\n+     }\n \n-    /**\n+     /**\n      * Implements the logic to create an aggregate identifier, using a factory if the identifier class\n      * implements {@link Producible}.\n      *\n@@ -42,29 +43,29 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <I>              the type of the aggregate root identifier.\n      * @return the identifier.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n-        if (id != null) {\n-            if (aggregateIdClass.isAssignableFrom(id.getClass())) {\n-                return id;\n-            } else {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n-                        .put(\"dtoIdClass\", id.getClass()\n-                                .getName())\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            }\n-        } else {\n-            if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n-                throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n-                        .put(\"aggregateIdClass\", aggregateIdClass.getName());\n-            } else {\n-                return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n-                        .create(parameters);\n-            }\n-        }\n-    }\n+     @SuppressWarnings(\"unchecked\")\n+     protected <I> I createIdentifier(Class<I> aggregateIdClass, I id, Object... parameters) {\n+         if (id != null) {\n+             if (aggregateIdClass.isAssignableFrom(id.getClass())) {\n+                 return id;\n+             } else {\n+                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_INVALID)\n+                         .put(\"dtoIdClass\", id.getClass()\n+                                 .getName())\n+                         .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+             }\n+         } else {\n+             if (!Producible.class.isAssignableFrom(aggregateIdClass)) {\n+                 throw BusinessException.createNew(BusinessErrorCode.RESOLVED_DTO_ID_IS_NOT_PRODUCIBLE)\n+                         .put(\"aggregateIdClass\", aggregateIdClass.getName());\n+             } else {\n+                 return (I) domainRegistry.getFactory(aggregateIdClass.asSubclass(Producible.class))\n+                         .create(parameters);\n+             }\n+         }\n+     }\n \n-    /**\n+     /**\n      * Implements the logic to create an aggregate.\n      *\n      * @param aggregateClass the aggregate class.\n@@ -72,47 +73,48 @@ public abstract class BaseDtoInfoResolver implements DtoInfoResolver {\n      * @param <A>            the type of the aggregate root.\n      * @return the aggregate root.\n      */\n-    protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n-        checkNotNull(aggregateClass);\n-        checkNotNull(parameters);\n+     protected <A extends AggregateRoot<?>> A createFromFactory(Class<A> aggregateClass, Object... parameters) {\n+         checkNotNull(aggregateClass);\n+         checkNotNull(parameters);\n \n-        Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n+         Factory<A> factory = domainRegistry.getFactory(aggregateClass);\n \n-        // Find the method in the factory which match the signature determined with the previously\n-        // extracted parameters\n-        Method factoryMethod;\n-        boolean useDefaultFactory = false;\n-        try {\n-            factoryMethod = MethodMatcher.findMatchingMethod(factory.getClass(), aggregateClass, parameters);\n-            if (factoryMethod == null) {\n-                useDefaultFactory = true;\n-            }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"parameters\", Arrays.toString(parameters));\n-        }\n+         // Find the method in the factory which match the signature determined with the previously\n+         // extracted parameters\n+         Method factoryMethod;\n+         boolean useDefaultFactory = false;\n+         try {\n+             factoryMethod = MethodMatcher.findMatchingMethod(factory.getClass(), aggregateClass, parameters);\n+             if (factoryMethod == null) {\n+                 useDefaultFactory = true;\n+             }\n+         } catch (Exception e) {\n+             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_FIND_FACTORY_METHOD)\n+                     .put(\"aggregateClass\", aggregateClass.getName())\n+                     .put(\"parameters\", Arrays.toString(parameters));\n+         }\n \n-        // Invoke the factory to create the aggregate root\n-        try {\n-            if (useDefaultFactory) {\n-                return factory.create(parameters);\n-            } else {\n-                if (parameters.length == 0) {\n-                    return ReflectUtils.invoke(factoryMethod, factory);\n-                } else {\n-                    return ReflectUtils.invoke(factoryMethod, factory, parameters);\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n-                    .put(\"aggregateClass\", aggregateClass.getName())\n-                    .put(\"factoryClass\", factory.getClass()\n-                            .getName())\n-                    .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n-                            .map(Method::getName)\n-                            .orElse(\"create\"))\n-                    .put(\"parameters\", Arrays.toString(parameters));\n-        }\n-    }\n-}\n+         // Invoke the factory to create the aggregate root\n+         try {\n+             if (useDefaultFactory) {\n+                 return factory.create(parameters);\n+             } else {\n+                 if (parameters.length == 0) {\n+                     return ReflectUtils.invoke(factoryMethod, factory);\n+                 } else {\n+                     return ReflectUtils.invoke(factoryMethod, factory, parameters);\n+                 }\n+             }\n+         } catch (Exception e) {\n+             throw BusinessException.wrap(e, BusinessErrorCode.UNABLE_TO_INVOKE_FACTORY_METHOD)\n+                     .put(\"aggregateClass\", aggregateClass.getName())\n+                     .put(\"factoryClass\", factory.getClass()\n+                             .getName())\n+                     .put(\"factoryMethod\", Optional.ofNullable(factoryMethod)\n+                             .map(Method::getName)\n+                             .orElse(\"create\"))\n+                     .put(\"parameters\", Arrays.toString(parameters));\n+         }\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 96
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}