{
    "error_id": "136",
    "information": {
        "errors": [
            {
                "line": "88",
                "severity": "warning",
                "message": "trailing whitespaces",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t},\n\t\t\t\ttype\n\t\t\t);\t\n\t\t}\n\t\t\n\t\treturn new Decision<>(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/136/DateRangeParser.java\nindex e499a1395f..e99fa70c51 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/136/DateRangeParser.java\n@@ -21,12 +21,12 @@ public class DateRangeParser extends Parser<CDateRange> {\n \tprivate boolean onlyQuarters = true;\n \tprivate int maxValue = Integer.MIN_VALUE;\n \tprivate int minValue = Integer.MAX_VALUE;\n-\t\n+\n \t@Override\n \tprotected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n \t\treturn DateRangeParser.parseISORange(value);\n \t}\n-\t\n+\n \t@Override\n \tprotected void registerValue(CDateRange v) {\n \t\tif(!v.isSingleQuarter()) {\n@@ -54,7 +54,7 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\tDateFormats.parseToLocalDate(parts[1])\n \t\t);\n \t}\n-\t\n+\n \t@Override\n \tprotected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n \t\tif(onlyQuarters) {\n@@ -85,9 +85,9 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\t\t}\n \t\t\t\t},\n \t\t\t\ttype\n-\t\t\t);\t\n+\t\t\t\t);\n \t\t}\n-\t\t\n+\n \t\treturn new Decision<>(\n \t\t\tnew NoopTransformer<>(),\n \t\t\tnew DateRangeTypeDateRange()\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/136/DateRangeParser.java\nindex e499a1395f..01c79ad621 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/136/DateRangeParser.java\n@@ -18,79 +18,79 @@ import org.apache.commons.lang3.StringUtils;\n \n public class DateRangeParser extends Parser<CDateRange> {\n \n-\tprivate boolean onlyQuarters = true;\n-\tprivate int maxValue = Integer.MIN_VALUE;\n-\tprivate int minValue = Integer.MAX_VALUE;\n-\t\n-\t@Override\n-\tprotected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n-\t\treturn DateRangeParser.parseISORange(value);\n-\t}\n-\t\n-\t@Override\n-\tprotected void registerValue(CDateRange v) {\n-\t\tif(!v.isSingleQuarter()) {\n-\t\t\tonlyQuarters = false;\n-\t\t}\n-\t\tif(v.getMaxValue() > maxValue) {\n-\t\t\tmaxValue = v.getMaxValue();\n-\t\t}\n-\t\tif(v.getMinValue() < minValue) {\n-\t\t\tminValue = v.getMinValue();\n-\t\t}\n-\t}\n+    private boolean onlyQuarters = true;\n+    private int maxValue = Integer.MIN_VALUE;\n+    private int minValue = Integer.MAX_VALUE;\n \n-\tpublic static CDateRange parseISORange(String value) throws ParsingException {\n-\t\tif(value==null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tString[] parts = StringUtils.split(value, '/');\n-\t\tif(parts.length!=2) {\n-\t\t\tthrow ParsingException.of(value, \"daterange\");\n-\t\t}\n+    @Override\n+    protected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n+        return DateRangeParser.parseISORange(value);\n+    }\n \n-\t\treturn CDateRange.of(\n-\t\t\t\tDateFormats.parseToLocalDate(parts[0]),\n-\t\t\t\tDateFormats.parseToLocalDate(parts[1])\n-\t\t);\n-\t}\n-\t\n-\t@Override\n-\tprotected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n-\t\tif(onlyQuarters) {\n-\t\t\tDateRangeTypeQuarter type = new DateRangeTypeQuarter();\n-\t\t\treturn new Decision<>(\n-\t\t\t\tnew Transformer<CDateRange, Integer>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Integer transform(CDateRange value) {\n-\t\t\t\t\t\treturn ((CDateRange)value).getMinValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\ttype\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue - minValue <PackedUnsigned1616.MAX_VALUE) {\n-\t\t\tDateRangeTypePacked type = new DateRangeTypePacked();\n-\t\t\ttype.setMinValue(minValue);\n-\t\t\ttype.setMaxValue(maxValue);\n-\t\t\treturn new Decision<>(\n-\t\t\t\tnew Transformer<CDateRange, Integer>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Integer transform(CDateRange value) {\n-\t\t\t\t\t\tCDateRange v = (CDateRange) value;\n-\t\t\t\t\t\tif(v.getMaxValue()>Integer.MAX_VALUE || v.getMinValue()<Integer.MIN_VALUE) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(value+\" is out of range\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\treturn PackedUnsigned1616.pack(v.getMinValue()-minValue, v.getMaxValue()-minValue);\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\ttype\n-\t\t\t);\t\n-\t\t}\n-\t\t\n-\t\treturn new Decision<>(\n-\t\t\tnew NoopTransformer<>(),\n-\t\t\tnew DateRangeTypeDateRange()\n-\t\t);\n-\t}\n+    @Override\n+    protected void registerValue(CDateRange v) {\n+        if (!v.isSingleQuarter()) {\n+            onlyQuarters = false;\n+        }\n+        if (v.getMaxValue() > maxValue) {\n+            maxValue = v.getMaxValue();\n+        }\n+        if (v.getMinValue() < minValue) {\n+            minValue = v.getMinValue();\n+        }\n+    }\n+\n+    public static CDateRange parseISORange(String value) throws ParsingException {\n+        if (value == null) {\n+            return null;\n+        }\n+        String[] parts = StringUtils.split(value, '/');\n+        if (parts.length != 2) {\n+            throw ParsingException.of(value, \"daterange\");\n+        }\n+\n+        return CDateRange.of(\n+            DateFormats.parseToLocalDate(parts[0]),\n+            DateFormats.parseToLocalDate(parts[1])\n+        );\n+    }\n+\n+    @Override\n+    protected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n+        if (onlyQuarters) {\n+            DateRangeTypeQuarter type = new DateRangeTypeQuarter();\n+            return new Decision<>(\n+                new Transformer<CDateRange, Integer>() {\n+                    @Override\n+                    public Integer transform(CDateRange value) {\n+                        return ((CDateRange) value).getMinValue();\n+                    }\n+                },\n+                type\n+            );\n+        }\n+        if (maxValue - minValue < PackedUnsigned1616.MAX_VALUE) {\n+            DateRangeTypePacked type = new DateRangeTypePacked();\n+            type.setMinValue(minValue);\n+            type.setMaxValue(maxValue);\n+            return new Decision<>(\n+                new Transformer<CDateRange, Integer>() {\n+                    @Override\n+                    public Integer transform(CDateRange value) {\n+                        CDateRange v = (CDateRange) value;\n+                        if (v.getMaxValue() > Integer.MAX_VALUE || v.getMinValue() < Integer.MIN_VALUE) {\n+                            throw new IllegalArgumentException(value + \" is out of range\");\n+                        }\n+                        return PackedUnsigned1616.pack(v.getMinValue() - minValue, v.getMaxValue() - minValue);\n+                    }\n+                },\n+                type\n+            );\n+        }\n+\n+        return new Decision<>(\n+            new NoopTransformer<>(),\n+            new DateRangeTypeDateRange()\n+        );\n+    }\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/136/DateRangeParser.java\nindex e499a1395f..a49f21b873 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/136/DateRangeParser.java\n@@ -51,8 +51,7 @@ public class DateRangeParser extends Parser<CDateRange> {\n \n \t\treturn CDateRange.of(\n \t\t\t\tDateFormats.parseToLocalDate(parts[0]),\n-\t\t\t\tDateFormats.parseToLocalDate(parts[1])\n-\t\t);\n+\t\t\t\tDateFormats.parseToLocalDate(parts[1]));\n \t}\n \t\n \t@Override\n@@ -69,7 +68,7 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\ttype\n \t\t\t);\n \t\t}\n-\t\tif(maxValue - minValue <PackedUnsigned1616.MAX_VALUE) {\n+\t\tif(maxValue - minValue<PackedUnsigned1616.MAX_VALUE) {\n \t\t\tDateRangeTypePacked type = new DateRangeTypePacked();\n \t\t\ttype.setMinValue(minValue);\n \t\t\ttype.setMaxValue(maxValue);\n@@ -85,12 +84,12 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\t\t}\n \t\t\t\t},\n \t\t\t\ttype\n-\t\t\t);\t\n-\t\t}\n+\t\t\t);\n+\t}\n \t\t\n \t\treturn new Decision<>(\n-\t\t\tnew NoopTransformer<>(),\n+\tnew NoopTransformer<>(),\n \t\t\tnew DateRangeTypeDateRange()\n \t\t);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 38, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 42, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 38, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 34, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 38, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 42, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 42, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 46, expected level should be one of the following: 24, 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 42, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 42, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 38, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 34, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/136/DateRangeParser.java\nindex e499a1395f..942ca7459f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/136/DateRangeParser.java\n@@ -1,7 +1,6 @@\n package com.bakdata.conquery.models.types.parser.specific;\n \n import javax.annotation.Nonnull;\n-\n import com.bakdata.conquery.models.common.daterange.CDateRange;\n import com.bakdata.conquery.models.exceptions.ParsingException;\n import com.bakdata.conquery.models.preproc.DateFormats;\n@@ -18,79 +17,73 @@ import org.apache.commons.lang3.StringUtils;\n \n public class DateRangeParser extends Parser<CDateRange> {\n \n-\tprivate boolean onlyQuarters = true;\n-\tprivate int maxValue = Integer.MIN_VALUE;\n-\tprivate int minValue = Integer.MAX_VALUE;\n-\t\n-\t@Override\n-\tprotected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n-\t\treturn DateRangeParser.parseISORange(value);\n-\t}\n-\t\n-\t@Override\n-\tprotected void registerValue(CDateRange v) {\n-\t\tif(!v.isSingleQuarter()) {\n-\t\t\tonlyQuarters = false;\n-\t\t}\n-\t\tif(v.getMaxValue() > maxValue) {\n-\t\t\tmaxValue = v.getMaxValue();\n-\t\t}\n-\t\tif(v.getMinValue() < minValue) {\n-\t\t\tminValue = v.getMinValue();\n-\t\t}\n-\t}\n+    private boolean onlyQuarters = true;\n+    private int maxValue = Integer.MIN_VALUE;\n+    private int minValue = Integer.MAX_VALUE;\n+    @Override\n+    protected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n+        return DateRangeParser.parseISORange(value);\n+    }\n+\n+    @Override\n+    protected void registerValue(CDateRange v) {\n+        if(!v.isSingleQuarter()) {\n+            onlyQuarters = false;\n+        }\n+\n+        if(v.getMaxValue() > maxValue) {\n+            maxValue = v.getMaxValue();\n+        }\n+\n+        if(v.getMinValue()<minValue) {\n+            minValue = v.getMinValue();\n+        }\n+    }\n+\n+    public static CDateRange parseISORange(String value) throws ParsingException {\n+        if(value == null) {\n+            return null;\n+        }\n+\n+        String[] parts = StringUtils.split(value, '/');\n+        if(parts.length != 2) {\n+            throw ParsingException.of(value, \"daterange\");\n+        }\n+        return CDateRange.of(\n+            DateFormats.parseToLocalDate(parts[0]),\n+            DateFormats.parseToLocalDate(parts[1])\n+        );\n+    }\n+\n+    @Override\n+    protected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n+        if(onlyQuarters) {\n+            DateRangeTypeQuarter type = new DateRangeTypeQuarter();\n+            return new Decision<>(new Transformer<CDateRange, Integer>() {\n+\n+                                      @Override\n+                                      public Integer transform(CDateRange value) {\n+                                          return ((CDateRange)value).getMinValue();\n+                                      }\n+                                  }, type);\n+        }\n \n-\tpublic static CDateRange parseISORange(String value) throws ParsingException {\n-\t\tif(value==null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\tString[] parts = StringUtils.split(value, '/');\n-\t\tif(parts.length!=2) {\n-\t\t\tthrow ParsingException.of(value, \"daterange\");\n-\t\t}\n+        if(maxValue - minValue<PackedUnsigned1616.MAX_VALUE) {\n+            DateRangeTypePacked type = new DateRangeTypePacked();\n+            type.setMinValue(minValue);\n+            type.setMaxValue(maxValue);\n+            return new Decision<>(new Transformer<CDateRange, Integer>() {\n \n-\t\treturn CDateRange.of(\n-\t\t\t\tDateFormats.parseToLocalDate(parts[0]),\n-\t\t\t\tDateFormats.parseToLocalDate(parts[1])\n-\t\t);\n-\t}\n-\t\n-\t@Override\n-\tprotected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n-\t\tif(onlyQuarters) {\n-\t\t\tDateRangeTypeQuarter type = new DateRangeTypeQuarter();\n-\t\t\treturn new Decision<>(\n-\t\t\t\tnew Transformer<CDateRange, Integer>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Integer transform(CDateRange value) {\n-\t\t\t\t\t\treturn ((CDateRange)value).getMinValue();\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\ttype\n-\t\t\t);\n-\t\t}\n-\t\tif(maxValue - minValue <PackedUnsigned1616.MAX_VALUE) {\n-\t\t\tDateRangeTypePacked type = new DateRangeTypePacked();\n-\t\t\ttype.setMinValue(minValue);\n-\t\t\ttype.setMaxValue(maxValue);\n-\t\t\treturn new Decision<>(\n-\t\t\t\tnew Transformer<CDateRange, Integer>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Integer transform(CDateRange value) {\n-\t\t\t\t\t\tCDateRange v = (CDateRange) value;\n-\t\t\t\t\t\tif(v.getMaxValue()>Integer.MAX_VALUE || v.getMinValue()<Integer.MIN_VALUE) {\n-\t\t\t\t\t\t\tthrow new IllegalArgumentException(value+\" is out of range\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\treturn PackedUnsigned1616.pack(v.getMinValue()-minValue, v.getMaxValue()-minValue);\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\ttype\n-\t\t\t);\t\n-\t\t}\n-\t\t\n-\t\treturn new Decision<>(\n-\t\t\tnew NoopTransformer<>(),\n-\t\t\tnew DateRangeTypeDateRange()\n-\t\t);\n-\t}\n-}\n+                                      @Override\n+                                      public Integer transform(CDateRange value) {\n+                                          CDateRange v = (CDateRange)value;\n+                                          if(v.getMaxValue() > Integer.MAX_VALUE || v.getMinValue()<Integer.MIN_VALUE) {\n+                                              throw new IllegalArgumentException(value+\" is out of range\");\n+                                          }\n+                                          return PackedUnsigned1616.pack(v.getMinValue() - minValue, v.getMaxValue() - minValue);\n+                                      }\n+                                  }, type);\n+        }\n+        return new Decision<>(new NoopTransformer<>(), new DateRangeTypeDateRange());\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/136/DateRangeParser.java\nindex e499a1395f..e99fa70c51 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/136/DateRangeParser.java\n@@ -21,12 +21,12 @@ public class DateRangeParser extends Parser<CDateRange> {\n \tprivate boolean onlyQuarters = true;\n \tprivate int maxValue = Integer.MIN_VALUE;\n \tprivate int minValue = Integer.MAX_VALUE;\n-\t\n+\n \t@Override\n \tprotected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n \t\treturn DateRangeParser.parseISORange(value);\n \t}\n-\t\n+\n \t@Override\n \tprotected void registerValue(CDateRange v) {\n \t\tif(!v.isSingleQuarter()) {\n@@ -54,7 +54,7 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\tDateFormats.parseToLocalDate(parts[1])\n \t\t);\n \t}\n-\t\n+\n \t@Override\n \tprotected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n \t\tif(onlyQuarters) {\n@@ -85,9 +85,9 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\t\t}\n \t\t\t\t},\n \t\t\t\ttype\n-\t\t\t);\t\n+\t\t\t\t);\n \t\t}\n-\t\t\n+\n \t\treturn new Decision<>(\n \t\t\tnew NoopTransformer<>(),\n \t\t\tnew DateRangeTypeDateRange()\n",
            "diff_size": 5
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/136/DateRangeParser.java\nindex e499a1395f..2f65666476 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/136/DateRangeParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/136/DateRangeParser.java\n@@ -21,12 +21,12 @@ public class DateRangeParser extends Parser<CDateRange> {\n \tprivate boolean onlyQuarters = true;\n \tprivate int maxValue = Integer.MIN_VALUE;\n \tprivate int minValue = Integer.MAX_VALUE;\n-\t\n+\n \t@Override\n \tprotected CDateRange parseValue(@Nonnull String value) throws ParsingException {\n \t\treturn DateRangeParser.parseISORange(value);\n \t}\n-\t\n+\n \t@Override\n \tprotected void registerValue(CDateRange v) {\n \t\tif(!v.isSingleQuarter()) {\n@@ -54,7 +54,7 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\tDateFormats.parseToLocalDate(parts[1])\n \t\t);\n \t}\n-\t\n+\n \t@Override\n \tprotected Decision<CDateRange, ?, ? extends CType<CDateRange, ?>> decideType() {\n \t\tif(onlyQuarters) {\n@@ -85,9 +85,9 @@ public class DateRangeParser extends Parser<CDateRange> {\n \t\t\t\t\t}\n \t\t\t\t},\n \t\t\t\ttype\n-\t\t\t);\t\n+\t\t\t);\n \t\t}\n-\t\t\n+\n \t\treturn new Decision<>(\n \t\t\tnew NoopTransformer<>(),\n \t\t\tnew DateRangeTypeDateRange()\n",
            "diff_size": 5
        }
    ]
}