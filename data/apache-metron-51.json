{
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "127",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 115).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    request.source(builder);\n\n    org.elasticsearch.action.search.SearchResponse response = transportClient.getHighLevelClient().search(request);\n    SearchHits hits = response.getHits();\n    List<T> results = new ArrayList<>();\n    for (SearchHit hit : hits) {",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-metron/errored/1/51/ElasticsearchRetrieveLatestDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-metron/intellij/51/ElasticsearchRetrieveLatestDao.java\nindex ff1189c793..a997a717dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-metron/errored/1/51/ElasticsearchRetrieveLatestDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-metron/intellij/51/ElasticsearchRetrieveLatestDao.java\n@@ -85,7 +85,7 @@ public class ElasticsearchRetrieveLatestDao implements RetrieveLatestDao {\n   }\n \n   <T> Optional<T> searchByGuid(String guid, String sensorType,\n-      Function<SearchHit, Optional<T>> callback) throws IOException {\n+                               Function<SearchHit, Optional<T>> callback) throws IOException {\n     Collection<String> sensorTypes = sensorType != null ? Collections.singleton(sensorType) : null;\n     List<T> results = searchByGuids(Collections.singleton(guid), sensorTypes, callback);\n     if (results.size() > 0) {\n@@ -101,7 +101,7 @@ public class ElasticsearchRetrieveLatestDao implements RetrieveLatestDao {\n    * If more than one hit happens, the first one will be returned.\n    */\n   <T> List<T> searchByGuids(Collection<String> guids, Collection<String> sensorTypes,\n-      Function<SearchHit, Optional<T>> callback) throws IOException {\n+                            Function<SearchHit, Optional<T>> callback) throws IOException {\n     if (guids == null || guids.isEmpty()) {\n       return Collections.emptyList();\n     }\n@@ -124,7 +124,8 @@ public class ElasticsearchRetrieveLatestDao implements RetrieveLatestDao {\n     builder.size(guids.size());\n     request.source(builder);\n \n-    org.elasticsearch.action.search.SearchResponse response = transportClient.getHighLevelClient().search(request);\n+    org.elasticsearch.action.search.SearchResponse response =\n+        transportClient.getHighLevelClient().search(request);\n     SearchHits hits = response.getHits();\n     List<T> results = new ArrayList<>();\n     for (SearchHit hit : hits) {\n@@ -149,6 +150,7 @@ public class ElasticsearchRetrieveLatestDao implements RetrieveLatestDao {\n \n   /**\n    * Returns the source type based on a given doc type.\n+   *\n    * @param docType The document type.\n    * @return The source type.\n    */\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}