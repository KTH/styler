{
    "error_id": "465",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "100",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  private boolean regionAndAZMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n    if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion()) &&\n          myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n    }\n    return false;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/465/ZoneAwareServerListFilterExt.java\nindex 4f25e5ffb0..6a47228bca 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/465/ZoneAwareServerListFilterExt.java\n@@ -60,16 +60,16 @@ public class ZoneAwareServerListFilterExt implements ServerListFilterExt {\n \n   private boolean regionAndAZMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n     if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n-      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion()) &&\n-          myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n-    }\n-    return false;\n-  }\n+      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion())\n+          && myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n+ }\n+ return false;\n+}\n \n-  private boolean regionMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n-    if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n-      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion());\n-    }\n-    return false;\n+private boolean regionMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n+  if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n+    return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion());\n   }\n+  return false;\n+}\n }\n",
            "diff_size": 12
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "column": "100",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/465/ZoneAwareServerListFilterExt.java\nindex 4f25e5ffb0..09444db11b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/465/ZoneAwareServerListFilterExt.java\n@@ -60,8 +60,7 @@ public class ZoneAwareServerListFilterExt implements ServerListFilterExt {\n \n   private boolean regionAndAZMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n     if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n-      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion()) &&\n-          myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n+      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion()) && myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n     }\n     return false;\n   }\n@@ -72,4 +71,4 @@ public class ZoneAwareServerListFilterExt implements ServerListFilterExt {\n     }\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/465/ZoneAwareServerListFilterExt.java\nindex 4f25e5ffb0..6a47228bca 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/465/ZoneAwareServerListFilterExt.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/465/ZoneAwareServerListFilterExt.java\n@@ -60,16 +60,16 @@ public class ZoneAwareServerListFilterExt implements ServerListFilterExt {\n \n   private boolean regionAndAZMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n     if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n-      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion()) &&\n-          myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n-    }\n-    return false;\n-  }\n+      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion())\n+          && myself.getDataCenterInfo().getAvailableZone().equals(target.getDataCenterInfo().getAvailableZone());\n+ }\n+ return false;\n+}\n \n-  private boolean regionMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n-    if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n-      return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion());\n-    }\n-    return false;\n+private boolean regionMatch(MicroserviceInstance myself, MicroserviceInstance target) {\n+  if (myself.getDataCenterInfo() != null && target.getDataCenterInfo() != null) {\n+    return myself.getDataCenterInfo().getRegion().equals(target.getDataCenterInfo().getRegion());\n   }\n+  return false;\n+}\n }\n",
            "diff_size": 12
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "63",
                    "column": "100",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}