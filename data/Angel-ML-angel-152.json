{
    "error_id": "152",
    "information": {
        "errors": [
            {
                "line": "67",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private Serialize func;\n\n    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n      super(matrixId, partKey, false);\n      this.rowIds = rowIds;\n      this.func = func;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/152/MFUpdateParam.java\nindex ea745198b6..cd4537db45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/152/MFUpdateParam.java\n@@ -64,71 +64,71 @@ public class MFUpdateParam extends UpdateParam {\n     private int[] rowIds;\n     private Serialize func;\n \n-    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n-      this.func = func;\n-    }\n-\n-    public MFPartitionUpdateParam() {\n-      super();\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId : rowIds) {\n-        buf.writeInt(rowId);\n-      }\n-\n-      byte[] bytes = func.getClass().getName().getBytes();\n-      buf.writeInt(bytes.length);\n-      buf.writeBytes(bytes);\n-      func.serialize(buf);\n-    }\n-\n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowIdNum = buf.readInt();\n-      int[] rowIds = new int[rowIdNum];\n-      for (int i = 0; i < rowIdNum; i++) {\n-        rowIds[i] = buf.readInt();\n-      }\n-      this.rowIds = rowIds;\n-\n-      int size = buf.readInt();\n-      byte[] bytes = new byte[size];\n-      buf.readBytes(bytes);\n-      try {\n-        this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n-      } catch (ReflectiveOperationException e) {\n-        throw new RuntimeException(e);\n-      }\n-      this.func.deserialize(buf);\n-    }\n-\n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + (4 + rowIds.length * 4)\n-          + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n-    }\n-\n-    public int[] getRowIds() {\n-      return this.rowIds;\n-    }\n-\n-    public Serialize getFunc() {\n-      return this.func;\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n-          func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n-    }\n-\n-  }\n+    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize\n+      func){ super(matrixId, partKey, false);\n+     this.rowIds = rowIds;\n+     this.func = func;\n+   }\n+\n+   public MFPartitionUpdateParam() {\n+     super();\n+   }\n+\n+   @Override\n+   public void serialize(ByteBuf buf) {\n+     super.serialize(buf);\n+     buf.writeInt(rowIds.length);\n+     for (int rowId : rowIds) {\n+       buf.writeInt(rowId);\n+     }\n+\n+     byte[] bytes = func.getClass().getName().getBytes();\n+     buf.writeInt(bytes.length);\n+     buf.writeBytes(bytes);\n+     func.serialize(buf);\n+   }\n+\n+   @Override\n+   public void deserialize(ByteBuf buf) {\n+     super.deserialize(buf);\n+     int rowIdNum = buf.readInt();\n+     int[] rowIds = new int[rowIdNum];\n+     for (int i = 0; i < rowIdNum; i++) {\n+       rowIds[i] = buf.readInt();\n+     }\n+     this.rowIds = rowIds;\n+\n+     int size = buf.readInt();\n+     byte[] bytes = new byte[size];\n+     buf.readBytes(bytes);\n+     try {\n+       this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n+     } catch (ReflectiveOperationException e) {\n+       throw new RuntimeException(e);\n+     }\n+     this.func.deserialize(buf);\n+   }\n+\n+   @Override\n+   public int bufferLen() {\n+     return super.bufferLen() + (4 + rowIds.length * 4)\n+         + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n+   }\n+\n+   public int[] getRowIds() {\n+     return this.rowIds;\n+   }\n+\n+   public Serialize getFunc() {\n+     return this.func;\n+   }\n+\n+   @Override\n+   public String toString() {\n+     return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n+         func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+   }\n+\n+ }\n \n }\n",
            "diff_size": 66
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/152/MFUpdateParam.java\nindex ea745198b6..b79602c0e8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/152/MFUpdateParam.java\n@@ -31,104 +31,105 @@ import java.util.List;\n  */\n public class MFUpdateParam extends UpdateParam {\n \n-  private final int[] rowIds;\n-  private final Serialize func;\n-\n-  public MFUpdateParam(int matrixId, int[] rowIds, Serialize func) {\n-    super(matrixId, false);\n-    this.rowIds = rowIds;\n-    this.func = func;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixPartitionRouter()\n-        .getPartitionKeyList(matrixId);\n-\n-    int size = partList.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : partList) {\n-      for (int rowId : rowIds) {\n-        if (rowId < part.getStartRow() || rowId >= part.getEndRow()) {\n-          throw new RuntimeException(\"Wrong rowId!\");\n+    private final int[] rowIds;\n+    private final Serialize func;\n+\n+    public MFUpdateParam(int matrixId, int[] rowIds, Serialize func) {\n+        super(matrixId, false);\n+        this.rowIds = rowIds;\n+        this.func = func;\n+    }\n+\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        List<PartitionKey> partList = PSAgentContext.get()\n+                .getMatrixPartitionRouter()\n+                .getPartitionKeyList(matrixId);\n+\n+        int size = partList.size();\n+        List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+        for (PartitionKey part : partList) {\n+            for (int rowId : rowIds) {\n+                if (rowId < part.getStartRow() || rowId >= part.getEndRow()) {\n+                    throw new RuntimeException(\"Wrong rowId!\");\n+                }\n+            }\n+            partParams.add(new MFPartitionUpdateParam(matrixId, part, rowIds, func));\n         }\n-      }\n-      partParams.add(new MFPartitionUpdateParam(matrixId, part, rowIds, func));\n+\n+        return partParams;\n     }\n \n-    return partParams;\n-  }\n+    public static class MFPartitionUpdateParam extends PartitionUpdateParam {\n+        private int[] rowIds;\n+        private Serialize func;\n \n-  public static class MFPartitionUpdateParam extends PartitionUpdateParam {\n-    private int[] rowIds;\n-    private Serialize func;\n+        public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds,\n+                                      Serialize func) {\n+            super(matrixId, partKey, false);\n+            this.rowIds = rowIds;\n+            this.func = func;\n+        }\n \n-    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n-      this.func = func;\n-    }\n+        public MFPartitionUpdateParam() {\n+            super();\n+        }\n \n-    public MFPartitionUpdateParam() {\n-      super();\n-    }\n+        @Override\n+        public void serialize(ByteBuf buf) {\n+            super.serialize(buf);\n+            buf.writeInt(rowIds.length);\n+            for (int rowId : rowIds) {\n+                buf.writeInt(rowId);\n+            }\n+\n+            byte[] bytes = func.getClass().getName().getBytes();\n+            buf.writeInt(bytes.length);\n+            buf.writeBytes(bytes);\n+            func.serialize(buf);\n+        }\n \n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId : rowIds) {\n-        buf.writeInt(rowId);\n-      }\n-\n-      byte[] bytes = func.getClass().getName().getBytes();\n-      buf.writeInt(bytes.length);\n-      buf.writeBytes(bytes);\n-      func.serialize(buf);\n-    }\n+        @Override\n+        public void deserialize(ByteBuf buf) {\n+            super.deserialize(buf);\n+            int rowIdNum = buf.readInt();\n+            int[] rowIds = new int[rowIdNum];\n+            for (int i = 0; i < rowIdNum; i++) {\n+                rowIds[i] = buf.readInt();\n+            }\n+            this.rowIds = rowIds;\n+\n+            int size = buf.readInt();\n+            byte[] bytes = new byte[size];\n+            buf.readBytes(bytes);\n+            try {\n+                this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n+            } catch (ReflectiveOperationException e) {\n+                throw new RuntimeException(e);\n+            }\n+            this.func.deserialize(buf);\n+        }\n \n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowIdNum = buf.readInt();\n-      int[] rowIds = new int[rowIdNum];\n-      for (int i = 0; i < rowIdNum; i++) {\n-        rowIds[i] = buf.readInt();\n-      }\n-      this.rowIds = rowIds;\n-\n-      int size = buf.readInt();\n-      byte[] bytes = new byte[size];\n-      buf.readBytes(bytes);\n-      try {\n-        this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n-      } catch (ReflectiveOperationException e) {\n-        throw new RuntimeException(e);\n-      }\n-      this.func.deserialize(buf);\n-    }\n+        @Override\n+        public int bufferLen() {\n+            return super.bufferLen() + (4 + rowIds.length * 4)\n+                    + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n+        }\n \n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + (4 + rowIds.length * 4)\n-          + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n-    }\n+        public int[] getRowIds() {\n+            return this.rowIds;\n+        }\n \n-    public int[] getRowIds() {\n-      return this.rowIds;\n-    }\n+        public Serialize getFunc() {\n+            return this.func;\n+        }\n \n-    public Serialize getFunc() {\n-      return this.func;\n-    }\n+        @Override\n+        public String toString() {\n+            return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n+                    func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+        }\n \n-    @Override\n-    public String toString() {\n-      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n-          func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n     }\n \n-  }\n-\n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/152/MFUpdateParam.java\nindex ea745198b6..9275aa576f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/152/MFUpdateParam.java\n@@ -111,8 +111,7 @@ public class MFUpdateParam extends UpdateParam {\n \n     @Override\n     public int bufferLen() {\n-      return super.bufferLen() + (4 + rowIds.length * 4)\n-          + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n+      return super.bufferLen() + (4 + rowIds.length * 4) + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n     }\n \n     public int[] getRowIds() {\n@@ -125,10 +124,8 @@ public class MFUpdateParam extends UpdateParam {\n \n     @Override\n     public String toString() {\n-      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n-          func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" + func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n     }\n-\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/152/MFUpdateParam.java\nindex ea745198b6..5e9ac7f05d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/152/MFUpdateParam.java\n@@ -21,7 +21,6 @@ import com.tencent.angel.PartitionKey;\n import com.tencent.angel.common.Serialize;\n import com.tencent.angel.psagent.PSAgentContext;\n import io.netty.buffer.ByteBuf;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -29,106 +28,106 @@ import java.util.List;\n /**\n  * `MFUpdateParam` is Parameter class for `MFUpdateFunc`\n  */\n-public class MFUpdateParam extends UpdateParam {\n \n-  private final int[] rowIds;\n-  private final Serialize func;\n+public class MFUpdateParam extends UpdateParam {\n+    private final int[] rowIds;\n+    private final Serialize func;\n \n-  public MFUpdateParam(int matrixId, int[] rowIds, Serialize func) {\n+    public MFUpdateParam(int matrixId, int[] rowIds, Serialize func) {\n     super(matrixId, false);\n     this.rowIds = rowIds;\n     this.func = func;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixPartitionRouter()\n-        .getPartitionKeyList(matrixId);\n+    }\n \n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+    List<PartitionKey> partList = PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId);\n     int size = partList.size();\n     List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n     for (PartitionKey part : partList) {\n-      for (int rowId : rowIds) {\n-        if (rowId < part.getStartRow() || rowId >= part.getEndRow()) {\n-          throw new RuntimeException(\"Wrong rowId!\");\n+        for (int rowId : rowIds) {\n+                                           if (rowId < part.getStartRow() || rowId >= part.getEndRow()) {\n+            throw new RuntimeException(\"Wrong rowId!\");\n+                                           }\n         }\n-      }\n-      partParams.add(new MFPartitionUpdateParam(matrixId, part, rowIds, func));\n+        partParams.add(new MFPartitionUpdateParam(matrixId, part, rowIds, func));\n     }\n-\n     return partParams;\n-  }\n+    }\n \n-  public static class MFPartitionUpdateParam extends PartitionUpdateParam {\n+    public static class MFPartitionUpdateParam extends PartitionUpdateParam {\n     private int[] rowIds;\n     private Serialize func;\n \n     public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n-      this.func = func;\n+        super(matrixId, partKey, false);\n+        this.rowIds = rowIds;\n+        this.func = func;\n     }\n \n     public MFPartitionUpdateParam() {\n-      super();\n+        super();\n     }\n \n     @Override\n     public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId : rowIds) {\n+        super.serialize(buf);\n+        buf.writeInt(rowIds.length);\n+        for (int rowId : rowIds) {\n         buf.writeInt(rowId);\n-      }\n+        }\n \n-      byte[] bytes = func.getClass().getName().getBytes();\n-      buf.writeInt(bytes.length);\n-      buf.writeBytes(bytes);\n-      func.serialize(buf);\n+        byte[] bytes = func.getClass().getName().getBytes();\n+        buf.writeInt(bytes.length);\n+        buf.writeBytes(bytes);\n+        func.serialize(buf);\n     }\n \n     @Override\n     public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowIdNum = buf.readInt();\n-      int[] rowIds = new int[rowIdNum];\n-      for (int i = 0; i < rowIdNum; i++) {\n+        super.deserialize(buf);\n+\n+        int rowIdNum = buf.readInt();\n+        int[] rowIds = new int[rowIdNum];\n+        for (int i = 0; i < rowIdNum; i++) {\n         rowIds[i] = buf.readInt();\n-      }\n-      this.rowIds = rowIds;\n+        }\n+\n+\n \n-      int size = buf.readInt();\n-      byte[] bytes = new byte[size];\n-      buf.readBytes(bytes);\n-      try {\n+        this.rowIds = rowIds;\n+\n+        int size = buf.readInt();\n+        byte[] bytes = new byte[size];\n+        buf.readBytes(bytes);\n+        try {\n         this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n-      } catch (ReflectiveOperationException e) {\n-        throw new RuntimeException(e);\n-      }\n-      this.func.deserialize(buf);\n+        } catch (ReflectiveOperationException e) {\n+          throw new RuntimeException(e);\n+        }\n+\n+\n+\n+        this.func.deserialize(buf);\n     }\n \n     @Override\n     public int bufferLen() {\n-      return super.bufferLen() + (4 + rowIds.length * 4)\n-          + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n+        return super.bufferLen() + (4 + rowIds.length * 4) + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n     }\n \n     public int[] getRowIds() {\n-      return this.rowIds;\n+        return this.rowIds;\n     }\n \n     public Serialize getFunc() {\n-      return this.func;\n+        return this.func;\n     }\n \n     @Override\n     public String toString() {\n-      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n-          func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+        return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" + func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+    }\n     }\n \n-  }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 67
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/152/MFUpdateParam.java\nindex ea745198b6..cd4537db45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/152/MFUpdateParam.java\n@@ -64,71 +64,71 @@ public class MFUpdateParam extends UpdateParam {\n     private int[] rowIds;\n     private Serialize func;\n \n-    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n-      this.func = func;\n-    }\n-\n-    public MFPartitionUpdateParam() {\n-      super();\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId : rowIds) {\n-        buf.writeInt(rowId);\n-      }\n-\n-      byte[] bytes = func.getClass().getName().getBytes();\n-      buf.writeInt(bytes.length);\n-      buf.writeBytes(bytes);\n-      func.serialize(buf);\n-    }\n-\n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowIdNum = buf.readInt();\n-      int[] rowIds = new int[rowIdNum];\n-      for (int i = 0; i < rowIdNum; i++) {\n-        rowIds[i] = buf.readInt();\n-      }\n-      this.rowIds = rowIds;\n-\n-      int size = buf.readInt();\n-      byte[] bytes = new byte[size];\n-      buf.readBytes(bytes);\n-      try {\n-        this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n-      } catch (ReflectiveOperationException e) {\n-        throw new RuntimeException(e);\n-      }\n-      this.func.deserialize(buf);\n-    }\n-\n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + (4 + rowIds.length * 4)\n-          + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n-    }\n-\n-    public int[] getRowIds() {\n-      return this.rowIds;\n-    }\n-\n-    public Serialize getFunc() {\n-      return this.func;\n-    }\n-\n-    @Override\n-    public String toString() {\n-      return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n-          func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n-    }\n-\n-  }\n+    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize\n+      func){ super(matrixId, partKey, false);\n+     this.rowIds = rowIds;\n+     this.func = func;\n+   }\n+\n+   public MFPartitionUpdateParam() {\n+     super();\n+   }\n+\n+   @Override\n+   public void serialize(ByteBuf buf) {\n+     super.serialize(buf);\n+     buf.writeInt(rowIds.length);\n+     for (int rowId : rowIds) {\n+       buf.writeInt(rowId);\n+     }\n+\n+     byte[] bytes = func.getClass().getName().getBytes();\n+     buf.writeInt(bytes.length);\n+     buf.writeBytes(bytes);\n+     func.serialize(buf);\n+   }\n+\n+   @Override\n+   public void deserialize(ByteBuf buf) {\n+     super.deserialize(buf);\n+     int rowIdNum = buf.readInt();\n+     int[] rowIds = new int[rowIdNum];\n+     for (int i = 0; i < rowIdNum; i++) {\n+       rowIds[i] = buf.readInt();\n+     }\n+     this.rowIds = rowIds;\n+\n+     int size = buf.readInt();\n+     byte[] bytes = new byte[size];\n+     buf.readBytes(bytes);\n+     try {\n+       this.func = (Serialize) Class.forName(new String(bytes)).newInstance();\n+     } catch (ReflectiveOperationException e) {\n+       throw new RuntimeException(e);\n+     }\n+     this.func.deserialize(buf);\n+   }\n+\n+   @Override\n+   public int bufferLen() {\n+     return super.bufferLen() + (4 + rowIds.length * 4)\n+         + (4 + func.getClass().getName().getBytes().length + func.bufferLen());\n+   }\n+\n+   public int[] getRowIds() {\n+     return this.rowIds;\n+   }\n+\n+   public Serialize getFunc() {\n+     return this.func;\n+   }\n+\n+   @Override\n+   public String toString() {\n+     return \"MFPartitionUpdateParam rowIds=\" + Arrays.toString(rowIds) + \", func=\" +\n+         func.getClass().getName() + \", toString()=\" + super.toString() + \"]\";\n+   }\n+\n+ }\n \n }\n",
            "diff_size": 66
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/152/MFUpdateParam.java\nindex ea745198b6..df6e9ef22a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/152/MFUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/152/MFUpdateParam.java\n@@ -62,9 +62,7 @@ public class MFUpdateParam extends UpdateParam {\n \n   public static class MFPartitionUpdateParam extends PartitionUpdateParam {\n     private int[] rowIds;\n-    private Serialize func;\n-\n-    public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n+    private Serialize func; public MFPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds, Serialize func) {\n       super(matrixId, partKey, false);\n       this.rowIds = rowIds;\n       this.func = func;\n",
            "diff_size": 3
        }
    ]
}