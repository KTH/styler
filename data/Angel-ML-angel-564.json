{
    "error_id": "564",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/564/IntCSRStorage.java\nindex 882fd18ae9..7b7d45b0e7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/564/IntCSRStorage.java\n@@ -24,73 +24,73 @@ import java.util.List;\n  * CSR storage with int values\n  */\n public class IntCSRStorage extends CSRStorage {\n-  int [] values;\n+    int[] values;\n \n-  private List<int[]> tempRowIds;\n-  private List<int[]> tempRowLens;\n-  private List<int[]> tempColumnIndices;\n+    private List<int[]> tempRowIds;\n+    private List<int[]> tempRowLens;\n+    private List<int[]> tempColumnIndices;\n \n-  public IntCSRStorage(int rowIdOffset) {\n-    super(rowIdOffset);\n-  }\n+    public IntCSRStorage(int rowIdOffset) {\n+        super(rowIdOffset);\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n-    super.serialize(output);\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        super.serialize(output);\n \n-    // Serialize values\n-    output.writeInt(values.length);\n-    for(int i = 0; i < values.length; i++) {\n-      output.writeInt(values[i]);\n+        // Serialize values\n+        output.writeInt(values.length);\n+        for (int i = 0; i < values.length; i++) {\n+            output.writeInt(values[i]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    super.deserialize(input);\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        super.deserialize(input);\n \n-    // Deserialize values\n-    int size = input.readInt();\n-    values = new int[size];\n-    for(int i = 0; i < size; i++) {\n-      values[i] = input.readInt();\n+        // Deserialize values\n+        int size = input.readInt();\n+        values = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            values[i] = input.readInt();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + 4 + values.length * 4;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + 4 + values.length * 4;\n+    }\n \n-  public int[] getValues() {\n-    return values;\n-  }\n+    public int[] getValues() {\n+        return values;\n+    }\n \n-  public void setValues(int[] values) {\n-    this.values = values;\n-  }\n+    public void setValues(int[] values) {\n+        this.values = values;\n+    }\n \n-  public List<int[]> getTempRowIds() {\n-    return tempRowIds;\n-  }\n+    public List<int[]> getTempRowIds() {\n+        return tempRowIds;\n+    }\n \n-  public void setTempRowIds(List<int[]> tempRowIds) {\n-    this.tempRowIds = tempRowIds;\n-  }\n+    public void setTempRowIds(List<int[]> tempRowIds) {\n+        this.tempRowIds = tempRowIds;\n+    }\n \n-  public List<int[]> getTempRowLens() {\n-    return tempRowLens;\n-  }\n+    public List<int[]> getTempRowLens() {\n+        return tempRowLens;\n+    }\n \n-  public void setTempRowLens(List<int[]> tempRowLens) {\n-    this.tempRowLens = tempRowLens;\n-  }\n+    public void setTempRowLens(List<int[]> tempRowLens) {\n+        this.tempRowLens = tempRowLens;\n+    }\n \n-  public List<int[]> getTempColumnIndices() {\n-    return tempColumnIndices;\n-  }\n+    public List<int[]> getTempColumnIndices() {\n+        return tempColumnIndices;\n+    }\n \n-  public void setTempColumnIndices(List<int[]> tempColumnIndices) {\n-    this.tempColumnIndices = tempColumnIndices;\n-  }\n+    public void setTempColumnIndices(List<int[]> tempColumnIndices) {\n+        this.tempColumnIndices = tempColumnIndices;\n+    }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/564/IntCSRStorage.java\nindex 882fd18ae9..1af44eefeb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/564/IntCSRStorage.java\n@@ -24,7 +24,7 @@ import java.util.List;\n  * CSR storage with int values\n  */\n public class IntCSRStorage extends CSRStorage {\n-  int [] values;\n+  int[] values;\n \n   private List<int[]> tempRowIds;\n   private List<int[]> tempRowLens;\n@@ -40,7 +40,7 @@ public class IntCSRStorage extends CSRStorage {\n \n     // Serialize values\n     output.writeInt(values.length);\n-    for(int i = 0; i < values.length; i++) {\n+    for (int i = 0; i < values.length; i++) {\n       output.writeInt(values[i]);\n     }\n   }\n@@ -52,7 +52,7 @@ public class IntCSRStorage extends CSRStorage {\n     // Deserialize values\n     int size = input.readInt();\n     values = new int[size];\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       values[i] = input.readInt();\n     }\n   }\n@@ -93,4 +93,4 @@ public class IntCSRStorage extends CSRStorage {\n   public void setTempColumnIndices(List<int[]> tempColumnIndices) {\n     this.tempColumnIndices = tempColumnIndices;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/564/IntCSRStorage.java\nindex 882fd18ae9..57101d2e32 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/564/IntCSRStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/564/IntCSRStorage.java\n@@ -23,74 +23,77 @@ import java.util.List;\n /**\n  * CSR storage with int values\n  */\n+\n public class IntCSRStorage extends CSRStorage {\n-  int [] values;\n \n-  private List<int[]> tempRowIds;\n-  private List<int[]> tempRowLens;\n-  private List<int[]> tempColumnIndices;\n+    int[] values;\n+    private List<int[]> tempRowIds;\n+    private List<int[]> tempRowLens;\n+    private List<int[]> tempColumnIndices;\n \n-  public IntCSRStorage(int rowIdOffset) {\n+    public IntCSRStorage(int rowIdOffset) {\n     super(rowIdOffset);\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n+    @Override\n+    public void serialize(ByteBuf output) {\n     super.serialize(output);\n \n     // Serialize values\n     output.writeInt(values.length);\n-    for(int i = 0; i < values.length; i++) {\n-      output.writeInt(values[i]);\n+    for (int i = 0; i < values.length; i++) {\n+        output.writeInt(values[i]);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n+    @Override\n+    public void deserialize(ByteBuf input) {\n     super.deserialize(input);\n \n     // Deserialize values\n+\n     int size = input.readInt();\n     values = new int[size];\n-    for(int i = 0; i < size; i++) {\n-      values[i] = input.readInt();\n+    for (int i = 0; i < size; i++) {\n+        values[i] = input.readInt();\n+    }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     return super.bufferLen() + 4 + values.length * 4;\n-  }\n+    }\n \n-  public int[] getValues() {\n+    public int[] getValues() {\n     return values;\n-  }\n+    }\n \n-  public void setValues(int[] values) {\n+    public void setValues(int[] values) {\n     this.values = values;\n-  }\n+    }\n \n-  public List<int[]> getTempRowIds() {\n+    public List<int[]> getTempRowIds() {\n     return tempRowIds;\n-  }\n+    }\n \n-  public void setTempRowIds(List<int[]> tempRowIds) {\n+    public void setTempRowIds(List<int[]> tempRowIds) {\n     this.tempRowIds = tempRowIds;\n-  }\n+    }\n \n-  public List<int[]> getTempRowLens() {\n+    public List<int[]> getTempRowLens() {\n     return tempRowLens;\n-  }\n+    }\n \n-  public void setTempRowLens(List<int[]> tempRowLens) {\n+    public void setTempRowLens(List<int[]> tempRowLens) {\n     this.tempRowLens = tempRowLens;\n-  }\n+    }\n \n-  public List<int[]> getTempColumnIndices() {\n+    public List<int[]> getTempColumnIndices() {\n     return tempColumnIndices;\n-  }\n+    }\n \n-  public void setTempColumnIndices(List<int[]> tempColumnIndices) {\n+    public void setTempColumnIndices(List<int[]> tempColumnIndices) {\n     this.tempColumnIndices = tempColumnIndices;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}