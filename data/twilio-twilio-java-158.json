{
    "error_id": "158",
    "information": {
        "errors": [
            {
                "line": "150",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/158/IpAddressReader.java\nindex f09aae622d..a7799fdce4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/158/IpAddressReader.java\n@@ -147,7 +147,7 @@ public class IpAddressReader extends Reader<IpAddress> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/158/IpAddressReader.java\nindex f09aae622d..5d835db0b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/158/IpAddressReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.api.v2010.account.sip.ipaccesscontrollist;\n@@ -70,7 +70,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n         Request request = new Request(\n             HttpMethod.GET,\n             Domains.API.toString(),\n-            \"/2010-04-01/Accounts/\" + this.pathAccountSid + \"/SIP/IpAccessControlLists/\" + this.pathIpAccessControlListSid + \"/IpAddresses.json\"\n+            \"/2010-04-01/Accounts/\" + this.pathAccountSid + \"/SIP/IpAccessControlLists/\" + this.pathIpAccessControlListSid +\n+                \"/IpAddresses.json\"\n         );\n \n         addQueryParams(request);\n@@ -147,7 +148,7 @@ public class IpAddressReader extends Reader<IpAddress> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/158/IpAddressReader.java\nindex f09aae622d..94b8cb10cf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/158/IpAddressReader.java\n@@ -29,6 +29,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param pathIpAccessControlListSid The IpAccessControlList Sid that\n      *                                   identifies the IpAddress resources to read\n      */\n+\n+\n     public IpAddressReader(final String pathIpAccessControlListSid) {\n         this.pathIpAccessControlListSid = pathIpAccessControlListSid;\n     }\n@@ -40,6 +42,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param pathIpAccessControlListSid The IpAccessControlList Sid that\n      *                                   identifies the IpAddress resources to read\n      */\n+\n+\n     public IpAddressReader(final String pathAccountSid,\n                            final String pathIpAccessControlListSid) {\n         this.pathAccountSid = pathAccountSid;\n@@ -52,6 +56,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param client TwilioRestClient with which to make the request\n      * @return IpAddress ResourceSet\n      */\n+\n+\n     @Override\n     public ResourceSet<IpAddress> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -63,6 +69,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param client TwilioRestClient with which to make the request\n      * @return IpAddress ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<IpAddress> firstPage(final TwilioRestClient client) {\n@@ -71,7 +79,7 @@ public class IpAddressReader extends Reader<IpAddress> {\n             HttpMethod.GET,\n             Domains.API.toString(),\n             \"/2010-04-01/Accounts/\" + this.pathAccountSid + \"/SIP/IpAccessControlLists/\" + this.pathIpAccessControlListSid + \"/IpAddresses.json\"\n-        );\n+                          );\n \n         addQueryParams(request);\n         return pageForRequest(client, request);\n@@ -84,15 +92,14 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param client TwilioRestClient with which to make the request\n      * @return IpAddress ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<IpAddress> getPage(final String targetUrl, final TwilioRestClient client) {\n+    public Page<IpAddress> getPage(final String targetUrl,\n+                                   final TwilioRestClient client) {\n         this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -103,13 +110,12 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n+\n     @Override\n     public Page<IpAddress> nextPage(final Page<IpAddress> page,\n                                     final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(Domains.API.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getNextPageUrl(Domains.API.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -120,13 +126,12 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n+\n     @Override\n     public Page<IpAddress> previousPage(final Page<IpAddress> page,\n                                         final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(Domains.API.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getPreviousPageUrl(Domains.API.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -137,9 +142,11 @@ public class IpAddressReader extends Reader<IpAddress> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<IpAddress> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<IpAddress> pageForRequest(final TwilioRestClient client,\n+                                           final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"IpAddress read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {\n@@ -147,15 +154,11 @@ public class IpAddressReader extends Reader<IpAddress> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n-        return Page.fromJson(\n-            \"ip_addresses\",\n-            response.getContent(),\n-            IpAddress.class,\n-            client.getObjectMapper()\n-        );\n+        return Page.fromJson(\"ip_addresses\", response.getContent(), IpAddress.class, client.getObjectMapper());\n     }\n \n     /**\n@@ -163,6 +166,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (getPageSize() != null) {\n             request.addQueryParam(\"PageSize\", Integer.toString(getPageSize()));\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/158/IpAddressReader.java\nindex f09aae622d..a7799fdce4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/158/IpAddressReader.java\n@@ -147,7 +147,7 @@ public class IpAddressReader extends Reader<IpAddress> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/158/IpAddressReader.java\nindex f09aae622d..1bb779209c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/158/IpAddressReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/158/IpAddressReader.java\n@@ -147,7 +147,8 @@ public class IpAddressReader extends Reader<IpAddress> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ]
}