{
    "error_id": "866",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 112).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * Filter elements that absolute value less than a specific value if need.\n   * @param x a float value\n   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n   */\n  public abstract TFloatVector filter(float x);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/866/TFloatVector.java\nindex 71f31c5f00..ecd34c5314 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/866/TFloatVector.java\n@@ -8,101 +8,123 @@ import com.tencent.angel.ml.math.TVector;\n  */\n public abstract class TFloatVector extends TVector {\n \n-  public TFloatVector() {\n-    super();\n-  }\n-\n-  public TFloatVector(TFloatVector other) {\n-    super(other);\n-  }\n-\n-  /**\n-   * Get all indexes of vector\n-   * @return all indexes of vector\n-   */\n-  public abstract int[] getIndices();\n-\n-  /**\n-   * Get all values of vector\n-   * @return all values of vector\n-   */\n-  public abstract float[] getValues();\n-\n-  /**\n-   * Get a vector element by a index\n-   * @param index element index\n-   * @return element value\n-   */\n-  public abstract float get(int index);\n-\n-  /**\n-   * Set a vector element\n-   * @param index element index\n-   * @param value element value\n-   */\n-  public abstract TFloatVector set(int index, float value);\n-\n-  /**\n-   * Plus a update value to a vector element\n-   * @param index element index\n-   * @param delta update value\n-   * @return this\n-   */\n-  public abstract TFloatVector plusBy(int index, float delta );\n-\n-  /**\n-   * Filter elements that absolute value less than a specific value if need.\n-   * @param x a float value\n-   * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n-   */\n-  public abstract TFloatVector filter(float x);\n-\n-  /**\n-   * Times all elements by a int factor\n-   * @param x factor\n-   * @return a new vector\n-   */\n-  public abstract TFloatVector times(float x);\n-\n-  /**\n-   * Times all elements by a int factor\n-   * @param x factor\n-   * @return this\n-   */\n-  public abstract TFloatVector timesBy(float x);\n-\n-  /**\n-   * Plus the vector with a update vector that has same dimension\n-   * @param other update vector\n-   * @param x factor\n-   * @return a new result vector\n-   */\n-  public abstract TVector plus(TAbstractVector other, float x);\n-\n-  /**\n-   * Plus the vector with a update vector that has same dimension\n-   * @param other update vector\n-   * @param x factor\n-   * @return this\n-   */\n-  public abstract TFloatVector plusBy(TAbstractVector other, float x);\n-\n-  @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n-\n-  @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n-\n-  @Override\n-  public TVector times(double x) { return  times((float)x); }\n-\n-  @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n-\n-  @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n-\n-  @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n+    public TFloatVector() {\n+        super();\n+    }\n+\n+    public TFloatVector(TFloatVector other) {\n+        super(other);\n+    }\n+\n+    /**\n+     * Get all indexes of vector\n+     *\n+     * @return all indexes of vector\n+     */\n+    public abstract int[] getIndices();\n+\n+    /**\n+     * Get all values of vector\n+     *\n+     * @return all values of vector\n+     */\n+    public abstract float[] getValues();\n+\n+    /**\n+     * Get a vector element by a index\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public abstract float get(int index);\n+\n+    /**\n+     * Set a vector element\n+     *\n+     * @param index element index\n+     * @param value element value\n+     */\n+    public abstract TFloatVector set(int index, float value);\n+\n+    /**\n+     * Plus a update value to a vector element\n+     *\n+     * @param index element index\n+     * @param delta update value\n+     * @return this\n+     */\n+    public abstract TFloatVector plusBy(int index, float delta);\n+\n+    /**\n+     * Filter elements that absolute value less than a specific value if need.\n+     *\n+     * @param x a float value\n+     * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n+     */\n+    public abstract TFloatVector filter(float x);\n+\n+    /**\n+     * Times all elements by a int factor\n+     *\n+     * @param x factor\n+     * @return a new vector\n+     */\n+    public abstract TFloatVector times(float x);\n+\n+    /**\n+     * Times all elements by a int factor\n+     *\n+     * @param x factor\n+     * @return this\n+     */\n+    public abstract TFloatVector timesBy(float x);\n+\n+    /**\n+     * Plus the vector with a update vector that has same dimension\n+     *\n+     * @param other update vector\n+     * @param x     factor\n+     * @return a new result vector\n+     */\n+    public abstract TVector plus(TAbstractVector other, float x);\n+\n+    /**\n+     * Plus the vector with a update vector that has same dimension\n+     *\n+     * @param other update vector\n+     * @param x     factor\n+     * @return this\n+     */\n+    public abstract TFloatVector plusBy(TAbstractVector other, float x);\n+\n+    @Override\n+    public TVector plusBy(int index, double delta) {\n+        return plusBy(index, (float) delta);\n+    }\n+\n+    @Override\n+    public TVector filter(double x) {\n+        return filter((float) x);\n+    }\n+\n+    @Override\n+    public TVector times(double x) {\n+        return times((float) x);\n+    }\n+\n+    @Override\n+    public TVector timesBy(double x) {\n+        return timesBy((float) x);\n+    }\n+\n+    @Override\n+    public TVector plus(TAbstractVector other, double x) {\n+        return plus(other, (float) x);\n+    }\n+\n+    @Override\n+    public TVector plusBy(TAbstractVector other, double x) {\n+        return plusBy(other, (float) x);\n+    }\n \n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/866/TFloatVector.java\nindex 71f31c5f00..7dcd702591 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/866/TFloatVector.java\n@@ -48,7 +48,7 @@ public abstract class TFloatVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(int index, float delta );\n+  public abstract TFloatVector plusBy(int index, float delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n@@ -88,21 +88,33 @@ public abstract class TFloatVector extends TVector {\n   public abstract TFloatVector plusBy(TAbstractVector other, float x);\n \n   @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n+  public TVector plusBy(int index, double delta) {\n+  return plusBy(index, (float) delta);\n+  }\n \n   @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n+  public TVector filter(double x) {\n+  return filter((float) x);\n+  }\n \n   @Override\n-  public TVector times(double x) { return  times((float)x); }\n+  public TVector times(double x) {\n+  return times((float) x);\n+  }\n \n   @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n+  public TVector timesBy(double x) {\n+  return timesBy((float) x);\n+  }\n \n   @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n+  public TVector plus(TAbstractVector other, double x) {\n+  return plus(other, (float) x);\n+  }\n \n   @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n+  public TVector plusBy(TAbstractVector other, double x) {\n+  return plusBy(other, (float) x);\n+  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 25.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 40.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 57.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 65.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 81.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 90.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 99.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/866/TFloatVector.java\nindex 71f31c5f00..77233feef8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/866/TFloatVector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/866/TFloatVector.java\n@@ -6,41 +6,46 @@ import com.tencent.angel.ml.math.TVector;\n /**\n  * Base class of float vector.\n  */\n+\n public abstract class TFloatVector extends TVector {\n \n-  public TFloatVector() {\n+    public TFloatVector() {\n     super();\n-  }\n+    }\n \n-  public TFloatVector(TFloatVector other) {\n+    public TFloatVector(TFloatVector other) {\n     super(other);\n-  }\n+    }\n \n   /**\n    * Get all indexes of vector\n    * @return all indexes of vector\n    */\n-  public abstract int[] getIndices();\n+\n+    public abstract int[] getIndices();\n \n   /**\n    * Get all values of vector\n    * @return all values of vector\n    */\n-  public abstract float[] getValues();\n+\n+    public abstract float[] getValues();\n \n   /**\n    * Get a vector element by a index\n    * @param index element index\n    * @return element value\n    */\n-  public abstract float get(int index);\n+\n+    public abstract float get(int index);\n \n   /**\n    * Set a vector element\n    * @param index element index\n    * @param value element value\n    */\n-  public abstract TFloatVector set(int index, float value);\n+\n+    public abstract TFloatVector set(int index, float value);\n \n   /**\n    * Plus a update value to a vector element\n@@ -48,28 +53,32 @@ public abstract class TFloatVector extends TVector {\n    * @param delta update value\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(int index, float delta );\n+\n+    public abstract TFloatVector plusBy(int index, float delta);\n \n   /**\n    * Filter elements that absolute value less than a specific value if need.\n    * @param x a float value\n    * @return If over half part elements are filtered, return a new sparse int vector, otherwise just return this\n    */\n-  public abstract TFloatVector filter(float x);\n+\n+    public abstract TFloatVector filter(float x);\n \n   /**\n    * Times all elements by a int factor\n    * @param x factor\n    * @return a new vector\n    */\n-  public abstract TFloatVector times(float x);\n+\n+    public abstract TFloatVector times(float x);\n \n   /**\n    * Times all elements by a int factor\n    * @param x factor\n    * @return this\n    */\n-  public abstract TFloatVector timesBy(float x);\n+\n+    public abstract TFloatVector timesBy(float x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n@@ -77,7 +86,8 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return a new result vector\n    */\n-  public abstract TVector plus(TAbstractVector other, float x);\n+\n+    public abstract TVector plus(TAbstractVector other, float x);\n \n   /**\n    * Plus the vector with a update vector that has same dimension\n@@ -85,24 +95,36 @@ public abstract class TFloatVector extends TVector {\n    * @param x factor\n    * @return this\n    */\n-  public abstract TFloatVector plusBy(TAbstractVector other, float x);\n-\n-  @Override\n-  public TVector plusBy(int index, double delta) { return  plusBy(index, (float) delta);}\n-\n-  @Override\n-  public TVector filter(double x) { return  filter((float)x); }\n-\n-  @Override\n-  public TVector times(double x) { return  times((float)x); }\n-\n-  @Override\n-  public TVector timesBy(double x) { return  timesBy((float) x); }\n-\n-  @Override\n-  public TVector plus(TAbstractVector other, double x) { return  plus(other, (float) x); }\n-\n-  @Override\n-  public TVector plusBy(TAbstractVector other, double x) { return  plusBy(other, (float) x); }\n \n-}\n+    public abstract TFloatVector plusBy(TAbstractVector other, float x);\n+\n+    @Override\n+    public TVector plusBy(int index, double delta) {\n+    return plusBy(index, (float) delta);\n+    }\n+\n+    @Override\n+    public TVector filter(double x) {\n+    return filter((float) x);\n+    }\n+\n+    @Override\n+    public TVector times(double x) {\n+    return times((float) x);\n+    }\n+\n+    @Override\n+    public TVector timesBy(double x) {\n+    return timesBy((float) x);\n+    }\n+\n+    @Override\n+    public TVector plus(TAbstractVector other, double x) {\n+    return plus(other, (float) x);\n+    }\n+\n+    @Override\n+    public TVector plusBy(TAbstractVector other, double x) {\n+    return plusBy(other, (float) x);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 74
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}