{
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "90",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 134).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    private SiteSection findPageSection(String viewId) {\n        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/69/Navigation.java\nindex bdbd019410..ab3a52fd6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/69/Navigation.java\n@@ -87,6 +87,7 @@ public class Navigation implements Serializable {\n     }\n \n     private SiteSection findPageSection(String viewId) {\n-        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n+        return Arrays.stream(SiteSection.\n+    values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/69/Navigation.java\nindex bdbd019410..561fa4507d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/69/Navigation.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.navigation;\n \n /*\n@@ -28,65 +29,64 @@ import javax.inject.Named;\n \n /**\n  * PageMap\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @ApplicationScoped\n @Named\n public class Navigation implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    private Map<String, String> pageTitleMap = new HashMap<String, String>();\n-    private Map<String, SiteSection> pageSectionMap = new HashMap<String, SiteSection>();\n+  private static final long serialVersionUID = 1L;\n+  private Map<String, String> pageTitleMap = new HashMap<String, String>();\n+  private Map<String, SiteSection> pageSectionMap = new HashMap<String, SiteSection>();\n \n-    /**\n-     * Gets the page Title for the given View ID\n-     * \n-     * @param viewId\n-     * @return The page title\n-     */\n-    @Nonnull\n-    public String getPageTitle(@Nonnull String viewId) {\n-        String ret = pageTitleMap.computeIfAbsent(viewId, this::findPageTitle);\n-        return ret;\n-    }\n+  /**\n+   * Gets the page Title for the given View ID\n+   *\n+   * @param viewId\n+   * @return The page title\n+   */\n+  @Nonnull\n+  public String getPageTitle(@Nonnull String viewId) {\n+    String ret = pageTitleMap.computeIfAbsent(viewId, this::findPageTitle);\n+    return ret;\n+  }\n \n-    /**\n-     * Get the section name for the given view ID\n-     * \n-     * @param viewId\n-     * @return\n-     */\n-    @Nonnull\n-    public SiteSection getSiteSection(@Nonnull String viewId) {\n-        SiteSection ret = pageSectionMap.get(viewId);\n-        if (ret == null) {\n-            ret = findPageSection(viewId);\n-            pageSectionMap.put(viewId, ret);\n-        }\n-        return ret;\n+  /**\n+   * Get the section name for the given view ID\n+   *\n+   * @param viewId\n+   * @return\n+   */\n+  @Nonnull\n+  public SiteSection getSiteSection(@Nonnull String viewId) {\n+    SiteSection ret = pageSectionMap.get(viewId);\n+    if (ret == null) {\n+      ret = findPageSection(viewId);\n+      pageSectionMap.put(viewId, ret);\n     }\n+    return ret;\n+  }\n \n-    /**\n-     * \n-     * @return\n-     */\n-    @Nonnull\n-    public String getSection() {\n-        return getSiteSection(FacesContext.getCurrentInstance().getViewRoot().getViewId()).name();\n-    }\n+  /**\n+   * @return\n+   */\n+  @Nonnull\n+  public String getSection() {\n+    return getSiteSection(FacesContext.getCurrentInstance().getViewRoot().getViewId()).name();\n+  }\n \n-    /**\n-     * @param viewId\n-     * @return\n-     */\n-    private String findPageTitle(String viewId) {\n-        // TODO Auto-generated method stub\n-        return \"\";\n-    }\n+  /**\n+   * @param viewId\n+   * @return\n+   */\n+  private String findPageTitle(String viewId) {\n+    // TODO Auto-generated method stub\n+    return \"\";\n+  }\n \n-    private SiteSection findPageSection(String viewId) {\n-        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n-    }\n+  private SiteSection findPageSection(String viewId) {\n+    return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst()\n+      .orElse(SiteSection.unknown);\n+  }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/69/Navigation.java\nindex bdbd019410..1709b113c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/69/Navigation.java\n@@ -89,4 +89,4 @@ public class Navigation implements Serializable {\n     private SiteSection findPageSection(String viewId) {\n         return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/69/Navigation.java\nindex bdbd019410..3f9664eabf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/69/Navigation.java\n@@ -16,11 +16,12 @@ package com.intuit.tank.navigation;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.Arrays;\n import java.util.HashMap;\n import java.util.Map;\n-\n import javax.annotation.Nonnull;\n import javax.enterprise.context.ApplicationScoped;\n import javax.faces.context.FacesContext;\n@@ -32,6 +33,7 @@ import javax.inject.Named;\n  * @author dangleton\n  * \n  */\n+\n @ApplicationScoped\n @Named\n public class Navigation implements Serializable {\n@@ -46,6 +48,7 @@ public class Navigation implements Serializable {\n      * @param viewId\n      * @return The page title\n      */\n+\n     @Nonnull\n     public String getPageTitle(@Nonnull String viewId) {\n         String ret = pageTitleMap.computeIfAbsent(viewId, this::findPageTitle);\n@@ -58,6 +61,8 @@ public class Navigation implements Serializable {\n      * @param viewId\n      * @return\n      */\n+\n+\n     @Nonnull\n     public SiteSection getSiteSection(@Nonnull String viewId) {\n         SiteSection ret = pageSectionMap.get(viewId);\n@@ -72,6 +77,8 @@ public class Navigation implements Serializable {\n      * \n      * @return\n      */\n+\n+\n     @Nonnull\n     public String getSection() {\n         return getSiteSection(FacesContext.getCurrentInstance().getViewRoot().getViewId()).name();\n@@ -81,12 +88,14 @@ public class Navigation implements Serializable {\n      * @param viewId\n      * @return\n      */\n+\n     private String findPageTitle(String viewId) {\n         // TODO Auto-generated method stub\n         return \"\";\n     }\n \n     private SiteSection findPageSection(String viewId) {\n-        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n+        return Arrays.stream(SiteSection.values()).filter(section-> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/69/Navigation.java\nindex bdbd019410..ab3a52fd6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/69/Navigation.java\n@@ -87,6 +87,7 @@ public class Navigation implements Serializable {\n     }\n \n     private SiteSection findPageSection(String viewId) {\n-        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n+        return Arrays.stream(SiteSection.\n+    values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/69/Navigation.java\nindex bdbd019410..7545ac69da 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/69/Navigation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/69/Navigation.java\n@@ -87,6 +87,10 @@ public class Navigation implements Serializable {\n     }\n \n     private SiteSection findPageSection(String viewId) {\n-        return Arrays.stream(SiteSection.values()).filter(section -> section.isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n-    }\n-}\n+        return Arrays.stream(SiteSection.values()).filter(section->\n+                section\n+    .\n+    isMatch(viewId)).findFirst().orElse(SiteSection.unknown);\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 7
        }
    ]
}