{
    "error_id": "504",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/504/MatrixMeta.java\nindex ca2189ac60..296895878d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/504/MatrixMeta.java\n@@ -1,401 +1,401 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.ml.matrix;\r\n-\r\n-import com.tencent.angel.conf.MatrixConf;\r\n-import com.tencent.angel.ps.ParameterServerId;\r\n-import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\r\n-import com.tencent.angel.ps.storage.partition.IServerPartition;\r\n-import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\r\n-import com.tencent.angel.ps.storage.vector.element.IElement;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-/**\r\n- * The meta of matrix.\r\n- */\r\n-public class MatrixMeta {\r\n-\r\n-  /**\r\n-   * Matrix basic parameters\r\n-   */\r\n-  private final MatrixContext matrixContext;\r\n-\r\n-  /**\r\n-   * Matrix partitions parameters\r\n-   */\r\n-  private final Map<Integer, PartitionMeta> partitionMetas;\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param matrixContext matrix context\r\n-   * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix id\r\n-   *\r\n-   * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row num.\r\n-   *\r\n-   * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets col num.\r\n-   *\r\n-   * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get number of non-zero elements\r\n-   *\r\n-   * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get index range end\r\n-   *\r\n-   * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets name.\r\n-   *\r\n-   * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row type.\r\n-   *\r\n-   * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @param value the default value\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n-    }\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is average.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is hogwild.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets staleness.\r\n-   *\r\n-   * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n-  }\r\n-\r\n-  /**\r\n-   * Get partitions meta\r\n-   *\r\n-   * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix context\r\n-   *\r\n-   * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n-  }\r\n-\r\n-  /**\r\n-   * Add meta for a partition\r\n-   *\r\n-   * @param id partition id\r\n-   * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get meta for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getPss();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for the whole matrix\r\n-   *\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n-    }\r\n-    return new ArrayList<>(pss);\r\n-  }\r\n-\r\n-  /**\r\n-   * Set the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.setPss(psIds);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the master stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getMasterPs();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix attributes\r\n-   *\r\n-   * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block row number for the matrix\r\n-   *\r\n-   * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block column number for the matrix\r\n-   *\r\n-   * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n-    }\r\n-\r\n-    return sb.toString();\r\n-  }\r\n-\r\n-  /**\r\n-   * Remove the stored ps for all partitions\r\n-   *\r\n-   * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Add the stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.addReplicationPS(psId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get estimate sparsity\r\n-   *\r\n-   * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix value type class\r\n-   *\r\n-   * @return null if this parameter is not set\r\n-   * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition class\r\n-   *\r\n-   * @return matrix server partition class\r\n-   * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition storage class\r\n-   *\r\n-   * @return matrix server partition storage class, null means not set by user\r\n-   * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PS Matrix initialization function\r\n-   * @return PS Matrix initialization function\r\n-   */\r\n-  public PSMatrixInit getInitFunc() {\r\n-    return matrixContext.getInitFunc();\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+\n+package com.tencent.angel.ml.matrix;\n+\n+import com.tencent.angel.conf.MatrixConf;\n+import com.tencent.angel.ps.ParameterServerId;\n+import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\n+import com.tencent.angel.ps.storage.partition.IServerPartition;\n+import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\n+import com.tencent.angel.ps.storage.vector.element.IElement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * The meta of matrix.\n+ */\n+public class MatrixMeta {\n+\n+  /**\n+   * Matrix basic parameters\n+   */\n+  private final MatrixContext matrixContext;\n+\n+  /**\n+   * Matrix partitions parameters\n+   */\n+  private final Map<Integer, PartitionMeta> partitionMetas;\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param mContext matrix context\n+   */\n+  public MatrixMeta(MatrixContext mContext) {\n+    this(mContext, new HashMap<>());\n+  }\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param matrixContext matrix context\n+   * @param partitionMetas matrix partitions meta\n+   */\n+  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\n+    this.matrixContext = matrixContext;\n+    this.partitionMetas = partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix id\n+   *\n+   * @return the id\n+   */\n+  public int getId() {\n+    return matrixContext.getMatrixId();\n+  }\n+\n+  /**\n+   * Gets row num.\n+   *\n+   * @return the row num\n+   */\n+  public int getRowNum() {\n+    return matrixContext.getRowNum();\n+  }\n+\n+  /**\n+   * Gets col num.\n+   *\n+   * @return the col num\n+   */\n+  public long getColNum() {\n+    return matrixContext.getColNum();\n+  }\n+\n+  /**\n+   * Get number of non-zero elements\n+   *\n+   * @return number of non-zero elements\n+   */\n+  public long getValidIndexNum() {\n+    return matrixContext.getValidIndexNum();\n+  }\n+\n+  /**\n+   * get index range start\n+   */\n+  public long getIndexStart() {\n+    return matrixContext.getIndexStart();\n+  }\n+\n+  /**\n+   * Get index range end\n+   *\n+   * @return index range end\n+   */\n+  public long getIndexEnd() {\n+    return matrixContext.getIndexEnd();\n+  }\n+\n+  /**\n+   * Gets name.\n+   *\n+   * @return the name\n+   */\n+  public String getName() {\n+    return matrixContext.getName();\n+  }\n+\n+  /**\n+   * Gets row type.\n+   *\n+   * @return the row type\n+   */\n+  public RowType getRowType() {\n+    return matrixContext.getRowType();\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @param value the default value\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key, String value) {\n+    if (!matrixContext.getAttributes().containsKey(key)) {\n+      return value;\n+    }\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key) {\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Is average.\n+   *\n+   * @return the result\n+   */\n+  public boolean isAverage() {\n+    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\n+    return Boolean.parseBoolean(average);\n+  }\n+\n+  /**\n+   * Is hogwild.\n+   *\n+   * @return the result\n+   */\n+  public boolean isHogwild() {\n+    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\n+    return Boolean.parseBoolean(hogwild);\n+  }\n+\n+  /**\n+   * Gets staleness.\n+   *\n+   * @return the staleness\n+   */\n+  public int getStaleness() {\n+    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\n+  }\n+\n+  /**\n+   * Get partitions meta\n+   *\n+   * @return all partitions meta\n+   */\n+  public Map<Integer, PartitionMeta> getPartitionMetas() {\n+    return partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix context\n+   *\n+   * @return matrix context\n+   */\n+  public MatrixContext getMatrixContext() {\n+    return matrixContext;\n+  }\n+\n+  /**\n+   * Add meta for a partition\n+   *\n+   * @param id partition id\n+   * @param meta partition meta\n+   */\n+  public void addPartitionMeta(int id, PartitionMeta meta) {\n+    partitionMetas.put(id, meta);\n+  }\n+\n+  /**\n+   * Get meta for a partition\n+   *\n+   * @param partId partition id\n+   * @return partition meta\n+   */\n+  public PartitionMeta getPartitionMeta(int partId) {\n+    return partitionMetas.get(partId);\n+  }\n+\n+  /**\n+   * Get the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getPss();\n+  }\n+\n+  /**\n+   * Get the stored pss for the whole matrix\n+   *\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss() {\n+    Set<ParameterServerId> pss = new HashSet<>();\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      pss.add(partMeta.getMasterPs());\n+    }\n+    return new ArrayList<>(pss);\n+  }\n+\n+  /**\n+   * Set the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @param psIds the stored pss\n+   */\n+  public void setPss(int partId, List<ParameterServerId> psIds) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.setPss(psIds);\n+  }\n+\n+  /**\n+   * Get the master stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @return the master stored ps\n+   */\n+  public ParameterServerId getMasterPs(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getMasterPs();\n+  }\n+\n+  /**\n+   * Get matrix attributes\n+   *\n+   * @return matrix attributes\n+   */\n+  public Map<String, String> getAttributes() {\n+    return matrixContext.getAttributes();\n+  }\n+\n+  /**\n+   * Get the block row number for the matrix\n+   *\n+   * @return the block row number for the matrix\n+   */\n+  public int getBlockRowNum() {\n+    return matrixContext.getMaxRowNumInBlock();\n+  }\n+\n+  /**\n+   * Get the block column number for the matrix\n+   *\n+   * @return the block column number for the matrix\n+   */\n+  public long getBlockColNum() {\n+    return matrixContext.getMaxColNumInBlock();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\n+    sb.append(\"partitions:\").append(\"\\n\");\n+    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\n+    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\n+    int size = parts.size();\n+    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\n+    for (int i = 0; i < size; i++) {\n+      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\n+          .append(\"\\n\");\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Remove the stored ps for all partitions\n+   *\n+   * @param psId ps id\n+   */\n+  public void removePs(ParameterServerId psId) {\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      partMeta.removePs(psId);\n+    }\n+  }\n+\n+  /**\n+   * Add the stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @param psId ps id\n+   */\n+  public void addPs(int partId, ParameterServerId psId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.addReplicationPS(psId);\n+  }\n+\n+  /**\n+   * Get estimate sparsity\n+   *\n+   * @return estimate sparsity\n+   */\n+  public double getEstSparsity() {\n+    return matrixContext.getEstSparsity();\n+  }\n+\n+  /**\n+   * Get matrix value type class\n+   *\n+   * @return null if this parameter is not set\n+   * @throws ClassNotFoundException if value class is not found\n+   */\n+  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\n+    return matrixContext.getValueType();\n+  }\n+\n+  /**\n+   * Get matrix server partition class\n+   *\n+   * @return matrix server partition class\n+   * @throws ClassNotFoundException if server partition class is not found\n+   */\n+  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionClass();\n+  }\n+\n+  /**\n+   * Get matrix server partition storage class\n+   *\n+   * @return matrix server partition storage class, null means not set by user\n+   * @throws ClassNotFoundException if server partition storage class is not found\n+   */\n+  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\n+      throws ClassNotFoundException {\n+    return matrixContext.getPartitionStorageClass();\n+  }\n+\n+  /**\n+   * Get PS Matrix initialization function\n+   * @return PS Matrix initialization function\n+   */\n+  public PSMatrixInit getInitFunc() {\n+    return matrixContext.getInitFunc();\n+  }\n+}\n",
            "diff_size": 401
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/504/MatrixMeta.java\nindex ca2189ac60..2ba058c2d8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/504/MatrixMeta.java\n@@ -36,366 +36,368 @@ import java.util.Set;\n  */\r\n public class MatrixMeta {\r\n \r\n-  /**\r\n-   * Matrix basic parameters\r\n-   */\r\n-  private final MatrixContext matrixContext;\r\n-\r\n-  /**\r\n-   * Matrix partitions parameters\r\n-   */\r\n-  private final Map<Integer, PartitionMeta> partitionMetas;\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param matrixContext matrix context\r\n-   * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix id\r\n-   *\r\n-   * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row num.\r\n-   *\r\n-   * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets col num.\r\n-   *\r\n-   * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get number of non-zero elements\r\n-   *\r\n-   * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get index range end\r\n-   *\r\n-   * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets name.\r\n-   *\r\n-   * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row type.\r\n-   *\r\n-   * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @param value the default value\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n-    }\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is average.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is hogwild.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets staleness.\r\n-   *\r\n-   * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n-  }\r\n-\r\n-  /**\r\n-   * Get partitions meta\r\n-   *\r\n-   * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix context\r\n-   *\r\n-   * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n-  }\r\n-\r\n-  /**\r\n-   * Add meta for a partition\r\n-   *\r\n-   * @param id partition id\r\n-   * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get meta for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getPss();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for the whole matrix\r\n-   *\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n-    }\r\n-    return new ArrayList<>(pss);\r\n-  }\r\n-\r\n-  /**\r\n-   * Set the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.setPss(psIds);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the master stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getMasterPs();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix attributes\r\n-   *\r\n-   * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block row number for the matrix\r\n-   *\r\n-   * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block column number for the matrix\r\n-   *\r\n-   * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n-    }\r\n-\r\n-    return sb.toString();\r\n-  }\r\n-\r\n-  /**\r\n-   * Remove the stored ps for all partitions\r\n-   *\r\n-   * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Add the stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.addReplicationPS(psId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get estimate sparsity\r\n-   *\r\n-   * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix value type class\r\n-   *\r\n-   * @return null if this parameter is not set\r\n-   * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition class\r\n-   *\r\n-   * @return matrix server partition class\r\n-   * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition storage class\r\n-   *\r\n-   * @return matrix server partition storage class, null means not set by user\r\n-   * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PS Matrix initialization function\r\n-   * @return PS Matrix initialization function\r\n-   */\r\n-  public PSMatrixInit getInitFunc() {\r\n-    return matrixContext.getInitFunc();\r\n-  }\r\n+    /**\r\n+     * Matrix basic parameters\r\n+     */\r\n+    private final MatrixContext matrixContext;\r\n+\r\n+    /**\r\n+     * Matrix partitions parameters\r\n+     */\r\n+    private final Map<Integer, PartitionMeta> partitionMetas;\r\n+\r\n+    /**\r\n+     * Create a MatrixMeta\r\n+     *\r\n+     * @param mContext matrix context\r\n+     */\r\n+    public MatrixMeta(MatrixContext mContext) {\r\n+        this(mContext, new HashMap<>());\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a MatrixMeta\r\n+     *\r\n+     * @param matrixContext  matrix context\r\n+     * @param partitionMetas matrix partitions meta\r\n+     */\r\n+    public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n+        this.matrixContext = matrixContext;\r\n+        this.partitionMetas = partitionMetas;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix id\r\n+     *\r\n+     * @return the id\r\n+     */\r\n+    public int getId() {\r\n+        return matrixContext.getMatrixId();\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets row num.\r\n+     *\r\n+     * @return the row num\r\n+     */\r\n+    public int getRowNum() {\r\n+        return matrixContext.getRowNum();\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets col num.\r\n+     *\r\n+     * @return the col num\r\n+     */\r\n+    public long getColNum() {\r\n+        return matrixContext.getColNum();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get number of non-zero elements\r\n+     *\r\n+     * @return number of non-zero elements\r\n+     */\r\n+    public long getValidIndexNum() {\r\n+        return matrixContext.getValidIndexNum();\r\n+    }\r\n+\r\n+    /**\r\n+     * get index range start\r\n+     */\r\n+    public long getIndexStart() {\r\n+        return matrixContext.getIndexStart();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get index range end\r\n+     *\r\n+     * @return index range end\r\n+     */\r\n+    public long getIndexEnd() {\r\n+        return matrixContext.getIndexEnd();\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets name.\r\n+     *\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return matrixContext.getName();\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets row type.\r\n+     *\r\n+     * @return the row type\r\n+     */\r\n+    public RowType getRowType() {\r\n+        return matrixContext.getRowType();\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets attribute.\r\n+     *\r\n+     * @param key   the key\r\n+     * @param value the default value\r\n+     * @return the attribute\r\n+     */\r\n+    public String getAttribute(String key, String value) {\r\n+        if (!matrixContext.getAttributes().containsKey(key)) {\r\n+            return value;\r\n+        }\r\n+        return matrixContext.getAttributes().get(key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets attribute.\r\n+     *\r\n+     * @param key the key\r\n+     * @return the attribute\r\n+     */\r\n+    public String getAttribute(String key) {\r\n+        return matrixContext.getAttributes().get(key);\r\n+    }\r\n+\r\n+    /**\r\n+     * Is average.\r\n+     *\r\n+     * @return the result\r\n+     */\r\n+    public boolean isAverage() {\r\n+        String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n+        return Boolean.parseBoolean(average);\r\n+    }\r\n+\r\n+    /**\r\n+     * Is hogwild.\r\n+     *\r\n+     * @return the result\r\n+     */\r\n+    public boolean isHogwild() {\r\n+        String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n+        return Boolean.parseBoolean(hogwild);\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets staleness.\r\n+     *\r\n+     * @return the staleness\r\n+     */\r\n+    public int getStaleness() {\r\n+        return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n+    }\r\n+\r\n+    /**\r\n+     * Get partitions meta\r\n+     *\r\n+     * @return all partitions meta\r\n+     */\r\n+    public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n+        return partitionMetas;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix context\r\n+     *\r\n+     * @return matrix context\r\n+     */\r\n+    public MatrixContext getMatrixContext() {\r\n+        return matrixContext;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add meta for a partition\r\n+     *\r\n+     * @param id   partition id\r\n+     * @param meta partition meta\r\n+     */\r\n+    public void addPartitionMeta(int id, PartitionMeta meta) {\r\n+        partitionMetas.put(id, meta);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get meta for a partition\r\n+     *\r\n+     * @param partId partition id\r\n+     * @return partition meta\r\n+     */\r\n+    public PartitionMeta getPartitionMeta(int partId) {\r\n+        return partitionMetas.get(partId);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the stored pss for a partition\r\n+     *\r\n+     * @param partId partition id\r\n+     * @return the stored pss\r\n+     */\r\n+    public List<ParameterServerId> getPss(int partId) {\r\n+        PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n+        if (partitionMeta == null) {\r\n+            return null;\r\n+        }\r\n+        return partitionMeta.getPss();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the stored pss for the whole matrix\r\n+     *\r\n+     * @return the stored pss\r\n+     */\r\n+    public List<ParameterServerId> getPss() {\r\n+        Set<ParameterServerId> pss = new HashSet<>();\r\n+        for (PartitionMeta partMeta : partitionMetas.values()) {\r\n+            pss.add(partMeta.getMasterPs());\r\n+        }\r\n+        return new ArrayList<>(pss);\r\n+    }\r\n+\r\n+    /**\r\n+     * Set the stored pss for a partition\r\n+     *\r\n+     * @param partId partition id\r\n+     * @param psIds  the stored pss\r\n+     */\r\n+    public void setPss(int partId, List<ParameterServerId> psIds) {\r\n+        PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n+        if (partitionMeta == null) {\r\n+            return;\r\n+        }\r\n+        partitionMeta.setPss(psIds);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the master stored ps for the partition\r\n+     *\r\n+     * @param partId partition id\r\n+     * @return the master stored ps\r\n+     */\r\n+    public ParameterServerId getMasterPs(int partId) {\r\n+        PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n+        if (partitionMeta == null) {\r\n+            return null;\r\n+        }\r\n+        return partitionMeta.getMasterPs();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix attributes\r\n+     *\r\n+     * @return matrix attributes\r\n+     */\r\n+    public Map<String, String> getAttributes() {\r\n+        return matrixContext.getAttributes();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the block row number for the matrix\r\n+     *\r\n+     * @return the block row number for the matrix\r\n+     */\r\n+    public int getBlockRowNum() {\r\n+        return matrixContext.getMaxRowNumInBlock();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the block column number for the matrix\r\n+     *\r\n+     * @return the block column number for the matrix\r\n+     */\r\n+    public long getBlockColNum() {\r\n+        return matrixContext.getMaxColNumInBlock();\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        StringBuilder sb = new StringBuilder();\r\n+        sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n+        sb.append(\"partitions:\").append(\"\\n\");\r\n+        List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n+        parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n+        int size = parts.size();\r\n+        sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n+        for (int i = 0; i < size; i++) {\r\n+            sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\")\r\n+                    .append(parts.get(i))\r\n+                    .append(\"\\n\");\r\n+        }\r\n+\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove the stored ps for all partitions\r\n+     *\r\n+     * @param psId ps id\r\n+     */\r\n+    public void removePs(ParameterServerId psId) {\r\n+        for (PartitionMeta partMeta : partitionMetas.values()) {\r\n+            partMeta.removePs(psId);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Add the stored ps for the partition\r\n+     *\r\n+     * @param partId partition id\r\n+     * @param psId   ps id\r\n+     */\r\n+    public void addPs(int partId, ParameterServerId psId) {\r\n+        PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n+        if (partitionMeta == null) {\r\n+            return;\r\n+        }\r\n+        partitionMeta.addReplicationPS(psId);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get estimate sparsity\r\n+     *\r\n+     * @return estimate sparsity\r\n+     */\r\n+    public double getEstSparsity() {\r\n+        return matrixContext.getEstSparsity();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix value type class\r\n+     *\r\n+     * @return null if this parameter is not set\r\n+     * @throws ClassNotFoundException if value class is not found\r\n+     */\r\n+    public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n+        return matrixContext.getValueType();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix server partition class\r\n+     *\r\n+     * @return matrix server partition class\r\n+     * @throws ClassNotFoundException if server partition class is not found\r\n+     */\r\n+    public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n+        return matrixContext.getPartitionClass();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix server partition storage class\r\n+     *\r\n+     * @return matrix server partition storage class, null means not set by user\r\n+     * @throws ClassNotFoundException if server partition storage class is not found\r\n+     */\r\n+    public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n+            throws ClassNotFoundException {\r\n+        return matrixContext.getPartitionStorageClass();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get PS Matrix initialization function\r\n+     *\r\n+     * @return PS Matrix initialization function\r\n+     */\r\n+    public PSMatrixInit getInitFunc() {\r\n+        return matrixContext.getInitFunc();\r\n+    }\r\n }\r\n",
            "diff_size": 364
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/504/MatrixMeta.java\nindex ca2189ac60..75f600ec50 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/504/MatrixMeta.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.ml.matrix;\r\n \r\n import com.tencent.angel.conf.MatrixConf;\r\n@@ -387,8 +386,8 @@ public class MatrixMeta {\n    * @throws ClassNotFoundException if server partition storage class is not found\r\n    */\r\n   public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n+      throws ClassNotFoundException {\n+  return matrixContext.getPartitionStorageClass();\r\n   }\r\n \r\n   /**\r\n@@ -398,4 +397,4 @@ public class MatrixMeta {\n   public PSMatrixInit getInitFunc() {\r\n     return matrixContext.getInitFunc();\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 43.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 56.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 67.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 78.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 88.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 98.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 108.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 116.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 126.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 136.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 146.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 158.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 172.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 182.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 193.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 204.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 214.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 224.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 235.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 246.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 257.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 271.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "279",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 286.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "294",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 301.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "309",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 315.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "319",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 325.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 335.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 361.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "367",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 374.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 388.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "392",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 399.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "403",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 410.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "414",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 421.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "425",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 430.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/504/MatrixMeta.java\nindex ca2189ac60..d7fa4db506 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/504/MatrixMeta.java\n@@ -16,125 +16,136 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.ml.matrix;\r\n-\r\n-import com.tencent.angel.conf.MatrixConf;\r\n-import com.tencent.angel.ps.ParameterServerId;\r\n-import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\r\n-import com.tencent.angel.ps.storage.partition.IServerPartition;\r\n-import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\r\n-import com.tencent.angel.ps.storage.vector.element.IElement;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n+package com.tencent.angel.ml.matrix;\n+\n+import com.tencent.angel.conf.MatrixConf;\n+import com.tencent.angel.ps.ParameterServerId;\n+import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\n+import com.tencent.angel.ps.storage.partition.IServerPartition;\n+import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\n+import com.tencent.angel.ps.storage.vector.element.IElement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\r\n \r\n /**\r\n  * The meta of matrix.\r\n- */\r\n+ */\n+\n public class MatrixMeta {\r\n \r\n   /**\r\n    * Matrix basic parameters\r\n-   */\r\n-  private final MatrixContext matrixContext;\r\n+   */\n+    private final MatrixContext matrixContext;\r\n \r\n   /**\r\n    * Matrix partitions parameters\r\n-   */\r\n-  private final Map<Integer, PartitionMeta> partitionMetas;\r\n+   */\n+    private final Map<Integer, PartitionMeta> partitionMetas;\r\n \r\n   /**\r\n    * Create a MatrixMeta\r\n    *\r\n    * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n-  }\r\n+   */\n+\n+    public MatrixMeta(MatrixContext mContext) {\n+    this(mContext, new HashMap<>());\n+    }\r\n \r\n   /**\r\n    * Create a MatrixMeta\r\n    *\r\n    * @param matrixContext matrix context\r\n    * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n-  }\r\n+   */\n+\n+    public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\n+    this.matrixContext = matrixContext;\n+    this.partitionMetas = partitionMetas;\n+    }\r\n \r\n   /**\r\n    * Get matrix id\r\n    *\r\n    * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n-  }\r\n+   */\n+\n+    public int getId() {\n+    return matrixContext.getMatrixId();\n+    }\r\n \r\n   /**\r\n    * Gets row num.\r\n    *\r\n    * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n-  }\r\n+   */\n+\n+    public int getRowNum() {\n+    return matrixContext.getRowNum();\n+    }\r\n \r\n   /**\r\n    * Gets col num.\r\n    *\r\n    * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n-  }\r\n+   */\n+\n+    public long getColNum() {\n+    return matrixContext.getColNum();\n+    }\r\n \r\n   /**\r\n    * Get number of non-zero elements\r\n    *\r\n    * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n-  }\r\n+   */\n+\n+    public long getValidIndexNum() {\n+    return matrixContext.getValidIndexNum();\n+    }\r\n \r\n   /**\r\n    * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n-  }\r\n+   */\n+\n+    public long getIndexStart() {\n+    return matrixContext.getIndexStart();\n+    }\r\n \r\n   /**\r\n    * Get index range end\r\n    *\r\n    * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n-  }\r\n+   */\n+\n+    public long getIndexEnd() {\n+    return matrixContext.getIndexEnd();\n+    }\r\n \r\n   /**\r\n    * Gets name.\r\n    *\r\n    * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n-  }\r\n+   */\n+\n+    public String getName() {\n+    return matrixContext.getName();\n+    }\r\n \r\n   /**\r\n    * Gets row type.\r\n    *\r\n    * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n-  }\r\n+   */\n+\n+    public RowType getRowType() {\n+    return matrixContext.getRowType();\n+    }\r\n \r\n   /**\r\n    * Gets attribute.\r\n@@ -142,260 +153,282 @@ public class MatrixMeta {\n    * @param key the key\r\n    * @param value the default value\r\n    * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n+   */\n+\n+    public String getAttribute(String key, String value) {\n+    if (!matrixContext.getAttributes().containsKey(key)) {\n+        return value;\n+    }\n+    return matrixContext.getAttributes().get(key);\n     }\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n \r\n   /**\r\n    * Gets attribute.\r\n    *\r\n    * @param key the key\r\n    * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n+   */\n+\n+    public String getAttribute(String key) {\n+    return matrixContext.getAttributes().get(key);\n+    }\r\n \r\n   /**\r\n    * Is average.\r\n    *\r\n    * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n-  }\r\n+   */\n+\n+    public boolean isAverage() {\n+    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\n+    return Boolean.parseBoolean(average);\n+    }\r\n \r\n   /**\r\n    * Is hogwild.\r\n    *\r\n    * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n-  }\r\n+   */\n+\n+    public boolean isHogwild() {\n+    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\n+    return Boolean.parseBoolean(hogwild);\n+    }\r\n \r\n   /**\r\n    * Gets staleness.\r\n    *\r\n    * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n-  }\r\n+   */\n+\n+    public int getStaleness() {\n+    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\n+    }\r\n \r\n   /**\r\n    * Get partitions meta\r\n    *\r\n    * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n-  }\r\n+   */\n+\n+    public Map<Integer, PartitionMeta> getPartitionMetas() {\n+    return partitionMetas;\n+    }\r\n \r\n   /**\r\n    * Get matrix context\r\n    *\r\n    * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n-  }\r\n+   */\n+\n+    public MatrixContext getMatrixContext() {\n+    return matrixContext;\n+    }\r\n \r\n   /**\r\n    * Add meta for a partition\r\n    *\r\n    * @param id partition id\r\n    * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n-  }\r\n+   */\n+\n+    public void addPartitionMeta(int id, PartitionMeta meta) {\n+    partitionMetas.put(id, meta);\n+    }\r\n \r\n   /**\r\n    * Get meta for a partition\r\n    *\r\n    * @param partId partition id\r\n    * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n-  }\r\n+   */\n+\n+    public PartitionMeta getPartitionMeta(int partId) {\n+    return partitionMetas.get(partId);\n+    }\r\n \r\n   /**\r\n    * Get the stored pss for a partition\r\n    *\r\n    * @param partId partition id\r\n    * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n+   */\n+\n+    public List<ParameterServerId> getPss(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+        return null;\n+    }\n+    return partitionMeta.getPss();\n     }\r\n-    return partitionMeta.getPss();\r\n-  }\r\n \r\n   /**\r\n    * Get the stored pss for the whole matrix\r\n    *\r\n    * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n+   */\n+\n+    public List<ParameterServerId> getPss() {\n+    Set<ParameterServerId> pss = new HashSet<>();\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+        pss.add(partMeta.getMasterPs());\n+    }\n+    return new ArrayList<>(pss);\n     }\r\n-    return new ArrayList<>(pss);\r\n-  }\r\n \r\n   /**\r\n    * Set the stored pss for a partition\r\n    *\r\n    * @param partId partition id\r\n    * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n+   */\n+\n+    public void setPss(int partId, List<ParameterServerId> psIds) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+        return;\n+    }\n+    partitionMeta.setPss(psIds);\n     }\r\n-    partitionMeta.setPss(psIds);\r\n-  }\r\n \r\n   /**\r\n    * Get the master stored ps for the partition\r\n    *\r\n    * @param partId partition id\r\n    * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n+   */\n+\n+    public ParameterServerId getMasterPs(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+        return null;\n+    }\n+    return partitionMeta.getMasterPs();\n     }\r\n-    return partitionMeta.getMasterPs();\r\n-  }\r\n \r\n   /**\r\n    * Get matrix attributes\r\n    *\r\n    * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n-  }\r\n+   */\n+\n+    public Map<String, String> getAttributes() {\n+    return matrixContext.getAttributes();\n+    }\r\n \r\n   /**\r\n    * Get the block row number for the matrix\r\n    *\r\n    * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n-  }\r\n+   */\n+\n+    public int getBlockRowNum() {\n+    return matrixContext.getMaxRowNumInBlock();\n+    }\r\n \r\n   /**\r\n    * Get the block column number for the matrix\r\n    *\r\n    * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n+   */\n+\n+    public long getBlockColNum() {\n+    return matrixContext.getMaxColNumInBlock();\n+    }\n+\n+    @Override\n+    public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\n+    sb.append(\"partitions:\").append(\"\\n\");\n+    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\n+    parts.sort((PartitionMeta p1, PartitionMeta p2)-> p1.getPartId() - p2.getPartId());\n+\n+    int size = parts.size();\n+    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\n+    for (int i = 0; i < size; i++) {\n+        sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i)).append(\"\\n\");\n+    }\n+    return sb.toString();\n     }\r\n \r\n-    return sb.toString();\r\n-  }\r\n-\r\n   /**\r\n    * Remove the stored ps for all partitions\r\n    *\r\n    * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n+   */\n+\n+    public void removePs(ParameterServerId psId) {\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+        partMeta.removePs(psId);\n+    }\n     }\r\n-  }\r\n \r\n   /**\r\n    * Add the stored ps for the partition\r\n    *\r\n    * @param partId partition id\r\n    * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n+   */\n+\n+    public void addPs(int partId, ParameterServerId psId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+        return;\n+    }\n+    partitionMeta.addReplicationPS(psId);\n     }\r\n-    partitionMeta.addReplicationPS(psId);\r\n-  }\r\n \r\n   /**\r\n    * Get estimate sparsity\r\n    *\r\n    * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n-  }\r\n+   */\n+\n+    public double getEstSparsity() {\n+    return matrixContext.getEstSparsity();\n+    }\r\n \r\n   /**\r\n    * Get matrix value type class\r\n    *\r\n    * @return null if this parameter is not set\r\n    * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n-  }\r\n+   */\n+\n+    public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\n+    return matrixContext.getValueType();\n+    }\r\n \r\n   /**\r\n    * Get matrix server partition class\r\n    *\r\n    * @return matrix server partition class\r\n    * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n-  }\r\n+   */\n+\n+    public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionClass();\n+    }\r\n \r\n   /**\r\n    * Get matrix server partition storage class\r\n    *\r\n    * @return matrix server partition storage class, null means not set by user\r\n    * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n+   */\n+\n+    public Class<? extends IServerPartitionStorage> getPartitionStorageClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionStorageClass();\n+    }\r\n \r\n   /**\r\n    * Get PS Matrix initialization function\r\n    * @return PS Matrix initialization function\r\n-   */\r\n-  public PSMatrixInit getInitFunc() {\r\n-    return matrixContext.getInitFunc();\r\n-  }\r\n-}\r\n+   */\n+\n+    public PSMatrixInit getInitFunc() {\n+    return matrixContext.getInitFunc();\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 238
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/504/MatrixMeta.java\nindex ca2189ac60..296895878d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/504/MatrixMeta.java\n@@ -1,401 +1,401 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.ml.matrix;\r\n-\r\n-import com.tencent.angel.conf.MatrixConf;\r\n-import com.tencent.angel.ps.ParameterServerId;\r\n-import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\r\n-import com.tencent.angel.ps.storage.partition.IServerPartition;\r\n-import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\r\n-import com.tencent.angel.ps.storage.vector.element.IElement;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-/**\r\n- * The meta of matrix.\r\n- */\r\n-public class MatrixMeta {\r\n-\r\n-  /**\r\n-   * Matrix basic parameters\r\n-   */\r\n-  private final MatrixContext matrixContext;\r\n-\r\n-  /**\r\n-   * Matrix partitions parameters\r\n-   */\r\n-  private final Map<Integer, PartitionMeta> partitionMetas;\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param matrixContext matrix context\r\n-   * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix id\r\n-   *\r\n-   * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row num.\r\n-   *\r\n-   * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets col num.\r\n-   *\r\n-   * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get number of non-zero elements\r\n-   *\r\n-   * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get index range end\r\n-   *\r\n-   * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets name.\r\n-   *\r\n-   * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row type.\r\n-   *\r\n-   * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @param value the default value\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n-    }\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is average.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is hogwild.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets staleness.\r\n-   *\r\n-   * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n-  }\r\n-\r\n-  /**\r\n-   * Get partitions meta\r\n-   *\r\n-   * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix context\r\n-   *\r\n-   * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n-  }\r\n-\r\n-  /**\r\n-   * Add meta for a partition\r\n-   *\r\n-   * @param id partition id\r\n-   * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get meta for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getPss();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for the whole matrix\r\n-   *\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n-    }\r\n-    return new ArrayList<>(pss);\r\n-  }\r\n-\r\n-  /**\r\n-   * Set the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.setPss(psIds);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the master stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getMasterPs();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix attributes\r\n-   *\r\n-   * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block row number for the matrix\r\n-   *\r\n-   * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block column number for the matrix\r\n-   *\r\n-   * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n-    }\r\n-\r\n-    return sb.toString();\r\n-  }\r\n-\r\n-  /**\r\n-   * Remove the stored ps for all partitions\r\n-   *\r\n-   * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Add the stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.addReplicationPS(psId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get estimate sparsity\r\n-   *\r\n-   * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix value type class\r\n-   *\r\n-   * @return null if this parameter is not set\r\n-   * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition class\r\n-   *\r\n-   * @return matrix server partition class\r\n-   * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition storage class\r\n-   *\r\n-   * @return matrix server partition storage class, null means not set by user\r\n-   * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PS Matrix initialization function\r\n-   * @return PS Matrix initialization function\r\n-   */\r\n-  public PSMatrixInit getInitFunc() {\r\n-    return matrixContext.getInitFunc();\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+\n+package com.tencent.angel.ml.matrix;\n+\n+import com.tencent.angel.conf.MatrixConf;\n+import com.tencent.angel.ps.ParameterServerId;\n+import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\n+import com.tencent.angel.ps.storage.partition.IServerPartition;\n+import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\n+import com.tencent.angel.ps.storage.vector.element.IElement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * The meta of matrix.\n+ */\n+public class MatrixMeta {\n+\n+  /**\n+   * Matrix basic parameters\n+   */\n+  private final MatrixContext matrixContext;\n+\n+  /**\n+   * Matrix partitions parameters\n+   */\n+  private final Map<Integer, PartitionMeta> partitionMetas;\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param mContext matrix context\n+   */\n+  public MatrixMeta(MatrixContext mContext) {\n+    this(mContext, new HashMap<>());\n+  }\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param matrixContext matrix context\n+   * @param partitionMetas matrix partitions meta\n+   */\n+  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\n+    this.matrixContext = matrixContext;\n+    this.partitionMetas = partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix id\n+   *\n+   * @return the id\n+   */\n+  public int getId() {\n+    return matrixContext.getMatrixId();\n+  }\n+\n+  /**\n+   * Gets row num.\n+   *\n+   * @return the row num\n+   */\n+  public int getRowNum() {\n+    return matrixContext.getRowNum();\n+  }\n+\n+  /**\n+   * Gets col num.\n+   *\n+   * @return the col num\n+   */\n+  public long getColNum() {\n+    return matrixContext.getColNum();\n+  }\n+\n+  /**\n+   * Get number of non-zero elements\n+   *\n+   * @return number of non-zero elements\n+   */\n+  public long getValidIndexNum() {\n+    return matrixContext.getValidIndexNum();\n+  }\n+\n+  /**\n+   * get index range start\n+   */\n+  public long getIndexStart() {\n+    return matrixContext.getIndexStart();\n+  }\n+\n+  /**\n+   * Get index range end\n+   *\n+   * @return index range end\n+   */\n+  public long getIndexEnd() {\n+    return matrixContext.getIndexEnd();\n+  }\n+\n+  /**\n+   * Gets name.\n+   *\n+   * @return the name\n+   */\n+  public String getName() {\n+    return matrixContext.getName();\n+  }\n+\n+  /**\n+   * Gets row type.\n+   *\n+   * @return the row type\n+   */\n+  public RowType getRowType() {\n+    return matrixContext.getRowType();\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @param value the default value\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key, String value) {\n+    if (!matrixContext.getAttributes().containsKey(key)) {\n+      return value;\n+    }\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key) {\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Is average.\n+   *\n+   * @return the result\n+   */\n+  public boolean isAverage() {\n+    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\n+    return Boolean.parseBoolean(average);\n+  }\n+\n+  /**\n+   * Is hogwild.\n+   *\n+   * @return the result\n+   */\n+  public boolean isHogwild() {\n+    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\n+    return Boolean.parseBoolean(hogwild);\n+  }\n+\n+  /**\n+   * Gets staleness.\n+   *\n+   * @return the staleness\n+   */\n+  public int getStaleness() {\n+    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\n+  }\n+\n+  /**\n+   * Get partitions meta\n+   *\n+   * @return all partitions meta\n+   */\n+  public Map<Integer, PartitionMeta> getPartitionMetas() {\n+    return partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix context\n+   *\n+   * @return matrix context\n+   */\n+  public MatrixContext getMatrixContext() {\n+    return matrixContext;\n+  }\n+\n+  /**\n+   * Add meta for a partition\n+   *\n+   * @param id partition id\n+   * @param meta partition meta\n+   */\n+  public void addPartitionMeta(int id, PartitionMeta meta) {\n+    partitionMetas.put(id, meta);\n+  }\n+\n+  /**\n+   * Get meta for a partition\n+   *\n+   * @param partId partition id\n+   * @return partition meta\n+   */\n+  public PartitionMeta getPartitionMeta(int partId) {\n+    return partitionMetas.get(partId);\n+  }\n+\n+  /**\n+   * Get the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getPss();\n+  }\n+\n+  /**\n+   * Get the stored pss for the whole matrix\n+   *\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss() {\n+    Set<ParameterServerId> pss = new HashSet<>();\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      pss.add(partMeta.getMasterPs());\n+    }\n+    return new ArrayList<>(pss);\n+  }\n+\n+  /**\n+   * Set the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @param psIds the stored pss\n+   */\n+  public void setPss(int partId, List<ParameterServerId> psIds) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.setPss(psIds);\n+  }\n+\n+  /**\n+   * Get the master stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @return the master stored ps\n+   */\n+  public ParameterServerId getMasterPs(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getMasterPs();\n+  }\n+\n+  /**\n+   * Get matrix attributes\n+   *\n+   * @return matrix attributes\n+   */\n+  public Map<String, String> getAttributes() {\n+    return matrixContext.getAttributes();\n+  }\n+\n+  /**\n+   * Get the block row number for the matrix\n+   *\n+   * @return the block row number for the matrix\n+   */\n+  public int getBlockRowNum() {\n+    return matrixContext.getMaxRowNumInBlock();\n+  }\n+\n+  /**\n+   * Get the block column number for the matrix\n+   *\n+   * @return the block column number for the matrix\n+   */\n+  public long getBlockColNum() {\n+    return matrixContext.getMaxColNumInBlock();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\n+    sb.append(\"partitions:\").append(\"\\n\");\n+    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\n+    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\n+    int size = parts.size();\n+    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\n+    for (int i = 0; i < size; i++) {\n+      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\n+          .append(\"\\n\");\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Remove the stored ps for all partitions\n+   *\n+   * @param psId ps id\n+   */\n+  public void removePs(ParameterServerId psId) {\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      partMeta.removePs(psId);\n+    }\n+  }\n+\n+  /**\n+   * Add the stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @param psId ps id\n+   */\n+  public void addPs(int partId, ParameterServerId psId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.addReplicationPS(psId);\n+  }\n+\n+  /**\n+   * Get estimate sparsity\n+   *\n+   * @return estimate sparsity\n+   */\n+  public double getEstSparsity() {\n+    return matrixContext.getEstSparsity();\n+  }\n+\n+  /**\n+   * Get matrix value type class\n+   *\n+   * @return null if this parameter is not set\n+   * @throws ClassNotFoundException if value class is not found\n+   */\n+  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\n+    return matrixContext.getValueType();\n+  }\n+\n+  /**\n+   * Get matrix server partition class\n+   *\n+   * @return matrix server partition class\n+   * @throws ClassNotFoundException if server partition class is not found\n+   */\n+  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionClass();\n+  }\n+\n+  /**\n+   * Get matrix server partition storage class\n+   *\n+   * @return matrix server partition storage class, null means not set by user\n+   * @throws ClassNotFoundException if server partition storage class is not found\n+   */\n+  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\n+      throws ClassNotFoundException {\n+    return matrixContext.getPartitionStorageClass();\n+  }\n+\n+  /**\n+   * Get PS Matrix initialization function\n+   * @return PS Matrix initialization function\n+   */\n+  public PSMatrixInit getInitFunc() {\n+    return matrixContext.getInitFunc();\n+  }\n+}\n",
            "diff_size": 401
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/504/MatrixMeta.java\nindex ca2189ac60..d65cfc2935 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/504/MatrixMeta.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/504/MatrixMeta.java\n@@ -1,401 +1,399 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/Apache-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- *\r\n- */\r\n-\r\n-\r\n-package com.tencent.angel.ml.matrix;\r\n-\r\n-import com.tencent.angel.conf.MatrixConf;\r\n-import com.tencent.angel.ps.ParameterServerId;\r\n-import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\r\n-import com.tencent.angel.ps.storage.partition.IServerPartition;\r\n-import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\r\n-import com.tencent.angel.ps.storage.vector.element.IElement;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Set;\r\n-\r\n-/**\r\n- * The meta of matrix.\r\n- */\r\n-public class MatrixMeta {\r\n-\r\n-  /**\r\n-   * Matrix basic parameters\r\n-   */\r\n-  private final MatrixContext matrixContext;\r\n-\r\n-  /**\r\n-   * Matrix partitions parameters\r\n-   */\r\n-  private final Map<Integer, PartitionMeta> partitionMetas;\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a MatrixMeta\r\n-   *\r\n-   * @param matrixContext matrix context\r\n-   * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix id\r\n-   *\r\n-   * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row num.\r\n-   *\r\n-   * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets col num.\r\n-   *\r\n-   * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get number of non-zero elements\r\n-   *\r\n-   * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n-  }\r\n-\r\n-  /**\r\n-   * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get index range end\r\n-   *\r\n-   * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets name.\r\n-   *\r\n-   * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets row type.\r\n-   *\r\n-   * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @param value the default value\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n-    }\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets attribute.\r\n-   *\r\n-   * @param key the key\r\n-   * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is average.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n-  }\r\n-\r\n-  /**\r\n-   * Is hogwild.\r\n-   *\r\n-   * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n-  }\r\n-\r\n-  /**\r\n-   * Gets staleness.\r\n-   *\r\n-   * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n-  }\r\n-\r\n-  /**\r\n-   * Get partitions meta\r\n-   *\r\n-   * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix context\r\n-   *\r\n-   * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n-  }\r\n-\r\n-  /**\r\n-   * Add meta for a partition\r\n-   *\r\n-   * @param id partition id\r\n-   * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get meta for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getPss();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the stored pss for the whole matrix\r\n-   *\r\n-   * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n-    }\r\n-    return new ArrayList<>(pss);\r\n-  }\r\n-\r\n-  /**\r\n-   * Set the stored pss for a partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.setPss(psIds);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the master stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getMasterPs();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix attributes\r\n-   *\r\n-   * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block row number for the matrix\r\n-   *\r\n-   * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the block column number for the matrix\r\n-   *\r\n-   * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n-    }\r\n-\r\n-    return sb.toString();\r\n-  }\r\n-\r\n-  /**\r\n-   * Remove the stored ps for all partitions\r\n-   *\r\n-   * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Add the stored ps for the partition\r\n-   *\r\n-   * @param partId partition id\r\n-   * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.addReplicationPS(psId);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get estimate sparsity\r\n-   *\r\n-   * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix value type class\r\n-   *\r\n-   * @return null if this parameter is not set\r\n-   * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition class\r\n-   *\r\n-   * @return matrix server partition class\r\n-   * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix server partition storage class\r\n-   *\r\n-   * @return matrix server partition storage class, null means not set by user\r\n-   * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PS Matrix initialization function\r\n-   * @return PS Matrix initialization function\r\n-   */\r\n-  public PSMatrixInit getInitFunc() {\r\n-    return matrixContext.getInitFunc();\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/Apache-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+package com.tencent.angel.ml.matrix;\n+\n+import com.tencent.angel.conf.MatrixConf;\n+import com.tencent.angel.ps.ParameterServerId;\n+import com.tencent.angel.ps.storage.matrix.PSMatrixInit;\n+import com.tencent.angel.ps.storage.partition.IServerPartition;\n+import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\n+import com.tencent.angel.ps.storage.vector.element.IElement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * The meta of matrix.\n+ */\n+public class MatrixMeta {\n+\n+  /**\n+   * Matrix basic parameters\n+   */\n+  private final MatrixContext matrixContext;\n+\n+  /**\n+   * Matrix partitions parameters\n+   */\n+  private final Map<Integer, PartitionMeta> partitionMetas;\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param mContext matrix context\n+   */\n+  public MatrixMeta(MatrixContext mContext) {\n+    this(mContext, new HashMap<>());\n+  }\n+\n+  /**\n+   * Create a MatrixMeta\n+   *\n+   * @param matrixContext matrix context\n+   * @param partitionMetas matrix partitions meta\n+   */\n+  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\n+    this.matrixContext = matrixContext;\n+    this.partitionMetas = partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix id\n+   *\n+   * @return the id\n+   */\n+  public int getId() {\n+    return matrixContext.getMatrixId();\n+  }\n+\n+  /**\n+   * Gets row num.\n+   *\n+   * @return the row num\n+   */\n+  public int getRowNum() {\n+    return matrixContext.getRowNum();\n+  }\n+\n+  /**\n+   * Gets col num.\n+   *\n+   * @return the col num\n+   */\n+  public long getColNum() {\n+    return matrixContext.getColNum();\n+  }\n+\n+  /**\n+   * Get number of non-zero elements\n+   *\n+   * @return number of non-zero elements\n+   */\n+  public long getValidIndexNum() {\n+    return matrixContext.getValidIndexNum();\n+  }\n+\n+  /**\n+   * get index range start\n+   */\n+  public long getIndexStart() {\n+    return matrixContext.getIndexStart();\n+  }\n+\n+  /**\n+   * Get index range end\n+   *\n+   * @return index range end\n+   */\n+  public long getIndexEnd() {\n+    return matrixContext.getIndexEnd();\n+  }\n+\n+  /**\n+   * Gets name.\n+   *\n+   * @return the name\n+   */\n+  public String getName() {\n+    return matrixContext.getName();\n+  }\n+\n+  /**\n+   * Gets row type.\n+   *\n+   * @return the row type\n+   */\n+  public RowType getRowType() {\n+    return matrixContext.getRowType();\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @param value the default value\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key, String value) {\n+    if (!matrixContext.getAttributes().containsKey(key)) {\n+      return value;\n+    }\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Gets attribute.\n+   *\n+   * @param key the key\n+   * @return the attribute\n+   */\n+  public String getAttribute(String key) {\n+    return matrixContext.getAttributes().get(key);\n+  }\n+\n+  /**\n+   * Is average.\n+   *\n+   * @return the result\n+   */\n+  public boolean isAverage() {\n+    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\n+    return Boolean.parseBoolean(average);\n+  }\n+\n+  /**\n+   * Is hogwild.\n+   *\n+   * @return the result\n+   */\n+  public boolean isHogwild() {\n+    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\n+    return Boolean.parseBoolean(hogwild);\n+  }\n+\n+  /**\n+   * Gets staleness.\n+   *\n+   * @return the staleness\n+   */\n+  public int getStaleness() {\n+    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\n+  }\n+\n+  /**\n+   * Get partitions meta\n+   *\n+   * @return all partitions meta\n+   */\n+  public Map<Integer, PartitionMeta> getPartitionMetas() {\n+    return partitionMetas;\n+  }\n+\n+  /**\n+   * Get matrix context\n+   *\n+   * @return matrix context\n+   */\n+  public MatrixContext getMatrixContext() {\n+    return matrixContext;\n+  }\n+\n+  /**\n+   * Add meta for a partition\n+   *\n+   * @param id partition id\n+   * @param meta partition meta\n+   */\n+  public void addPartitionMeta(int id, PartitionMeta meta) {\n+    partitionMetas.put(id, meta);\n+  }\n+\n+  /**\n+   * Get meta for a partition\n+   *\n+   * @param partId partition id\n+   * @return partition meta\n+   */\n+  public PartitionMeta getPartitionMeta(int partId) {\n+    return partitionMetas.get(partId);\n+  }\n+\n+  /**\n+   * Get the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getPss();\n+  }\n+\n+  /**\n+   * Get the stored pss for the whole matrix\n+   *\n+   * @return the stored pss\n+   */\n+  public List<ParameterServerId> getPss() {\n+    Set<ParameterServerId> pss = new HashSet<>();\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      pss.add(partMeta.getMasterPs());\n+    }\n+    return new ArrayList<>(pss);\n+  }\n+\n+  /**\n+   * Set the stored pss for a partition\n+   *\n+   * @param partId partition id\n+   * @param psIds the stored pss\n+   */\n+  public void setPss(int partId, List<ParameterServerId> psIds) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.setPss(psIds);\n+  }\n+\n+  /**\n+   * Get the master stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @return the master stored ps\n+   */\n+  public ParameterServerId getMasterPs(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getMasterPs();\n+  }\n+\n+  /**\n+   * Get matrix attributes\n+   *\n+   * @return matrix attributes\n+   */\n+  public Map<String, String> getAttributes() {\n+    return matrixContext.getAttributes();\n+  }\n+\n+  /**\n+   * Get the block row number for the matrix\n+   *\n+   * @return the block row number for the matrix\n+   */\n+  public int getBlockRowNum() {\n+    return matrixContext.getMaxRowNumInBlock();\n+  }\n+\n+  /**\n+   * Get the block column number for the matrix\n+   *\n+   * @return the block column number for the matrix\n+   */\n+  public long getBlockColNum() {\n+    return matrixContext.getMaxColNumInBlock();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\n+    sb.append(\"partitions:\").append(\"\\n\");\n+    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\n+    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\n+    int size = parts.size();\n+    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\n+    for (int i = 0; i < size; i++) {\n+      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\n+          .append(\"\\n\");\n+    }\n+\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Remove the stored ps for all partitions\n+   *\n+   * @param psId ps id\n+   */\n+  public void removePs(ParameterServerId psId) {\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      partMeta.removePs(psId);\n+    }\n+  }\n+\n+  /**\n+   * Add the stored ps for the partition\n+   *\n+   * @param partId partition id\n+   * @param psId ps id\n+   */\n+  public void addPs(int partId, ParameterServerId psId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.addReplicationPS(psId);\n+  }\n+\n+  /**\n+   * Get estimate sparsity\n+   *\n+   * @return estimate sparsity\n+   */\n+  public double getEstSparsity() {\n+    return matrixContext.getEstSparsity();\n+  }\n+\n+  /**\n+   * Get matrix value type class\n+   *\n+   * @return null if this parameter is not set\n+   * @throws ClassNotFoundException if value class is not found\n+   */\n+  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\n+    return matrixContext.getValueType();\n+  }\n+\n+  /**\n+   * Get matrix server partition class\n+   *\n+   * @return matrix server partition class\n+   * @throws ClassNotFoundException if server partition class is not found\n+   */\n+  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionClass();\n+  }\n+\n+  /**\n+   * Get matrix server partition storage class\n+   *\n+   * @return matrix server partition storage class, null means not set by user\n+   * @throws ClassNotFoundException if server partition storage class is not found\n+   */\n+  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\n+      throws ClassNotFoundException {\n+    return matrixContext.getPartitionStorageClass();\n+  }\n+\n+  /**\n+   * Get PS Matrix initialization function\n+   * @return PS Matrix initialization function\n+   */\n+  public PSMatrixInit getInitFunc() {\n+    return matrixContext.getInitFunc();\n+  }\n+}\n",
            "diff_size": 401
        }
    ]
}