{
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 94).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assertFalse(transformations.isEmpty());\n    transformations.forEach(\n        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "column": "21",
                    "severity": "error",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "48",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "49",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/31/TransformationDescriptorTest.java\nindex 0b98a614f4..5feee43a56 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler/31/TransformationDescriptorTest.java\n@@ -29,6 +29,9 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+        (name, t) ->assertEquals(\"transformer-\"+name ,t.getConsumerNameFactory().apply\n+      (\n+      )\n+        ));\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/31/TransformationDescriptorTest.java\nindex 0b98a614f4..08f1b2671a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/31/TransformationDescriptorTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.repository;\n \n import static org.junit.Assert.*;\n@@ -29,6 +30,7 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+        (name, t) -> assertEquals(\"transformer-\" + name,\n+            t.getConsumerNameFactory().apply()));\n   }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/31/TransformationDescriptorTest.java\nindex 0b98a614f4..d621e0efcd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/31/TransformationDescriptorTest.java\n@@ -31,4 +31,4 @@ public class TransformationDescriptorTest {\n     transformations.forEach(\n         (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/31/TransformationDescriptorTest.java\nindex 0b98a614f4..cc670527ae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/31/TransformationDescriptorTest.java\n@@ -16,19 +16,18 @@\n package cz.o2.proxima.repository;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.ConfigFactory;\n import java.util.Map;\n import org.junit.Test;\n \n+\n public class TransformationDescriptorTest {\n \n-  @Test\n-  public void testDefaultNamingOfTransfomationConsumers() {\n+    @Test\n+    public void testDefaultNamingOfTransfomationConsumers() {\n     Repository repo = Repository.of(ConfigFactory.load(\"test-reference.conf\").resolve());\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n-    transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n-  }\n-}\n+    transformations.forEach((name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "column": "21",
                    "severity": "error",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "48",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "49",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/31/TransformationDescriptorTest.java\nindex 0b98a614f4..5feee43a56 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/31/TransformationDescriptorTest.java\n@@ -29,6 +29,9 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+        (name, t) ->assertEquals(\"transformer-\"+name ,t.getConsumerNameFactory().apply\n+      (\n+      )\n+        ));\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "column": "51",
                    "severity": "error",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'.' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "column": "7",
                    "severity": "error",
                    "message": "'.' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'apply' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/31/TransformationDescriptorTest.java\nindex 0b98a614f4..a20f069cb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/31/TransformationDescriptorTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_three_grams/31/TransformationDescriptorTest.java\n@@ -29,6 +29,10 @@ public class TransformationDescriptorTest {\n     Map<String, TransformationDescriptor> transformations = repo.getTransformations();\n     assertFalse(transformations.isEmpty());\n     transformations.forEach(\n-        (name, t) -> assertEquals(\"transformer-\" + name, t.getConsumerNameFactory().apply()));\n+        (name, t) -> assertEquals(\"transformer-\" +name,t.getConsumerNameFactory()\n+      .\n+      apply\n+\n+        ()));\n   }\n }\n",
            "diff_size": 5
        }
    ]
}