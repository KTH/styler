{
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "297",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public void validateSuppliedId() {\n        getInstance(); // this will raise an EntityNotFound exception\n        // when id is invalid and conversation will not\n        // start\n        clearSlugs();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/18/VersionGroupHome.java\nindex 93ee8afb4b..cc4b1324bd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/18/VersionGroupHome.java\n@@ -294,9 +294,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n-        // start\n+        getInstance(); // this will raise an EntityNotFound exception// when id is invalid and conversation will not // start\n         clearSlugs();\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "299",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/18/VersionGroupHome.java\nindex 93ee8afb4b..c79d9d0a6a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/18/VersionGroupHome.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import java.io.Serializable;\n@@ -71,7 +72,7 @@ import static org.apache.commons.lang3.StringUtils.startsWithIgnoreCase;\n @Model\n @Transactional\n public class VersionGroupHome extends SlugHome<HIterationGroup>\n-        implements Serializable {\n+    implements Serializable {\n     private static final long serialVersionUID = 1L;\n     @Inject\n     @Any\n@@ -101,22 +102,22 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     @Inject\n     private VersionGroupDAO versionGroupDAO;\n     private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n+        new InMemoryListFilter<HPerson>() {\n \n-                private static final long serialVersionUID =\n-                        6521717110985363677L;\n+            private static final long serialVersionUID =\n+                6521717110985363677L;\n \n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n+            @Override\n+            protected List<HPerson> fetchAll() {\n+                return getInstanceMaintainers();\n+            }\n \n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n+            @Override\n+            protected boolean include(HPerson elem, String filter) {\n+                return containsIgnoreCase(elem.getName(),\n+                    filter);\n+            }\n+        };\n \n     public VersionGroupHome() {\n         setEntityClass(HIterationGroup.class);\n@@ -143,7 +144,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     public boolean validateSlug(String slug, String componentId) {\n         if (!isSlugAvailable(slug)) {\n             facesMessages.addToControl(componentId,\n-                    \"This Group ID is not available\");\n+                \"This Group ID is not available\");\n             return false;\n         }\n         return true;\n@@ -151,7 +152,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n \n     public boolean isSlugAvailable(String slug) {\n         return slugEntityServiceImpl.isSlugAvailable(slug,\n-                HIterationGroup.class);\n+            HIterationGroup.class);\n     }\n \n     @Override\n@@ -163,8 +164,9 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     @Transactional\n     public String persist() {\n         identity.checkPermission(getInstance(), \"update\");\n-        if (!validateSlug(getInstance().getSlug(), \"slug\"))\n+        if (!validateSlug(getInstance().getSlug(), \"slug\")) {\n             return null;\n+        }\n         if (authenticatedAccount != null) {\n             getInstance().addMaintainer(authenticatedAccount.getPerson());\n         }\n@@ -174,7 +176,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     @SuppressWarnings(\"deprecation\")\n     private void setMessage(String message) {\n         conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                message);\n+            message);\n     }\n \n     @Override\n@@ -196,7 +198,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n      */\n     @SuppressWarnings(\"deprecation\")\n     private String update(\n-            org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages) {\n+        org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages) {\n         if (this.conversationScopeMessages == null) {\n             this.conversationScopeMessages = conversationScopeMessages;\n         }\n@@ -210,7 +212,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         versionGroupDAO.makeTransient(getInstance());\n         versionGroupDAO.flush();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.group.notification.deleted\", slug));\n+            msgs.format(\"jsf.group.notification.deleted\", slug));\n         urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n     }\n \n@@ -220,7 +222,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         getInstance().getActiveLocales().remove(locale);\n         update();\n         setMessage(msgs.format(\"jsf.LanguageRemoveFromGroup\",\n-                locale.retrieveDisplayName()));\n+            locale.retrieveDisplayName()));\n     }\n \n     @Transactional\n@@ -229,7 +231,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         getInstance().getProjectIterations().remove(version);\n         update();\n         setMessage(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(),\n-                version.getProject().getSlug()));\n+            version.getProject().getSlug()));\n     }\n \n     @Transactional\n@@ -242,17 +244,17 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             maintainerFilter.reset();\n             super.update();\n             setMessage(msgs.format(\"jsf.MaintainerRemoveFromGroup\",\n-                    maintainer.getName()));\n+                maintainer.getName()));\n             if (maintainer.equals(authenticatedAccount.getPerson())) {\n                 urlUtil.redirectToInternal(\n-                        urlUtil.groupUrl(getInstance().getSlug()));\n+                    urlUtil.groupUrl(getInstance().getSlug()));\n             }\n         }\n     }\n \n     public List<HLocale> getInstanceActiveLocales() {\n         List<HLocale> activeLocales =\n-                Lists.newArrayList(getInstance().getActiveLocales());\n+            Lists.newArrayList(getInstance().getActiveLocales());\n         Collections.sort(activeLocales, ComparatorUtil.LOCALE_COMPARATOR);\n         return activeLocales;\n     }\n@@ -261,13 +263,13 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     protected HIterationGroup loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n         return (HIterationGroup) session.byNaturalId(HIterationGroup.class)\n-                .using(\"slug\", getSlug()).load();\n+            .using(\"slug\", getSlug()).load();\n     }\n     // sort by slug\n \n     public List<HProjectIteration> getSortedInstanceProjectIterations() {\n         List<HProjectIteration> list =\n-                Lists.newArrayList(getInstance().getProjectIterations());\n+            Lists.newArrayList(getInstance().getProjectIterations());\n         Collections.sort(list, ComparatorUtil.VERSION_PROJECT_NAME_COMPARATOR);\n         return list;\n     }\n@@ -306,7 +308,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n \n     @ViewScoped\n     public static class GroupMaintainerAutocomplete\n-            extends MaintainerAutocomplete {\n+        extends MaintainerAutocomplete {\n \n         private static final long serialVersionUID = 1150630837852918989L;\n         @Inject\n@@ -341,14 +343,14 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             versionGroupHome.update(conversationScopeMessages);\n             reset();\n             conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.MaintainerAddedToGroup\",\n-                            maintainer.getName()));\n+                msgs.format(\"jsf.MaintainerAddedToGroup\",\n+                    maintainer.getName()));\n         }\n     }\n \n     @ViewScoped\n     public static class VersionAutocomplete\n-            extends AbstractAutocomplete<HProjectIteration> {\n+        extends AbstractAutocomplete<HProjectIteration> {\n \n         private static final long serialVersionUID = 8022275695197571957L;\n         @Inject\n@@ -369,12 +371,12 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         @Override\n         public List<HProjectIteration> suggest() {\n             List<HProjectIteration> versionList = versionGroupServiceImpl\n-                    .searchLikeSlugOrProjectSlug(getQuery());\n+                .searchLikeSlugOrProjectSlug(getQuery());\n             return versionList.stream()\n-                    .filter(it -> it != null && !it.getGroups()\n-                            .contains(getInstance()) &&\n-                            identity.hasPermission(it, \"read\"))\n-                    .collect(Collectors.toList());\n+                .filter(it -> it != null && !it.getGroups()\n+                    .contains(getInstance()) &&\n+                    identity.hasPermission(it, \"read\"))\n+                .collect(Collectors.toList());\n         }\n \n         @Override\n@@ -386,13 +388,13 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             }\n             identity.checkPermission(getInstance(), \"update\");\n             HProjectIteration version =\n-                    projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n+                projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n             getInstance().getProjectIterations().add(version);\n             versionGroupHome.update(conversationScopeMessages);\n             reset();\n             conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n-                            version.getProject().getSlug()));\n+                msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n+                    version.getProject().getSlug()));\n         }\n     }\n \n@@ -422,25 +424,25 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             String query = getQuery();\n             HIterationGroup group = getInstance();\n             return localeServiceImpl\n-                    .getSupportedLocales()\n-                    .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n-                                    && (matchByLocaleCode(query, locale)\n-                                    || matchByDisplayName(query, locale)))\n-                    .collect(Collectors.toList());\n+                .getSupportedLocales()\n+                .stream()\n+                .filter(locale ->\n+                    !group.getActiveLocales().contains(locale)\n+                        && (matchByLocaleCode(query, locale)\n+                        || matchByDisplayName(query, locale)))\n+                .collect(Collectors.toList());\n         }\n \n         private boolean matchByDisplayName(String query, HLocale locale) {\n             return containsIgnoreCase(\n-                    locale.retrieveDisplayName(),\n-                    query);\n+                locale.retrieveDisplayName(),\n+                query);\n         }\n \n         private boolean matchByLocaleCode(String query, HLocale locale) {\n             return startsWithIgnoreCase(\n-                    locale.getLocaleId().getId(),\n-                    query);\n+                locale.getLocaleId().getId(),\n+                query);\n         }\n \n         /**\n@@ -461,8 +463,8 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             reset();\n             versionGroupHome.getMaintainerFilter().reset();\n             conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LanguageAddedToGroup\",\n-                            locale.retrieveDisplayName()));\n+                msgs.format(\"jsf.LanguageAddedToGroup\",\n+                    locale.retrieveDisplayName()));\n         }\n     }\n \n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/18/VersionGroupHome.java\nindex 93ee8afb4b..39e5ca4127 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/naturalize/18/VersionGroupHome.java\n@@ -294,7 +294,8 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n+        getInstance();\n+// this will raise an EntityNotFound exception\n         // when id is invalid and conversation will not\n         // start\n         clearSlugs();\n@@ -424,8 +425,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             return localeServiceImpl\n                     .getSupportedLocales()\n                     .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n+                    .filter(locale -> !group.getActiveLocales().contains(locale)\n                                     && (matchByLocaleCode(query, locale)\n                                     || matchByDisplayName(query, locale)))\n                     .collect(Collectors.toList());\n@@ -485,4 +485,4 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     public AbstractListFilter<HPerson> getMaintainerFilter() {\n         return this.maintainerFilter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "302",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/18/VersionGroupHome.java\nindex 93ee8afb4b..e28e3a2fd5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/18/VersionGroupHome.java\n@@ -66,57 +66,67 @@ import static org.apache.commons.lang3.StringUtils.startsWithIgnoreCase;\n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"versionGroupHome\")\n @ViewScoped\n @Model\n @Transactional\n public class VersionGroupHome extends SlugHome<HIterationGroup>\n-        implements Serializable {\n+    implements Serializable {\n     private static final long serialVersionUID = 1L;\n+\n     @Inject\n     @Any\n     private VersionGroupSlug versionGroupSlug;\n+\n     @Inject\n     @Authenticated\n     private HAccount authenticatedAccount;\n+\n     @Inject\n     private FacesMessages facesMessages;\n+\n     @Inject\n     private SlugEntityService slugEntityServiceImpl;\n+\n     @Inject\n     private Messages msgs;\n+\n     @Inject\n     @SuppressWarnings(\"deprecation\")\n     private org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages;\n+\n     @Inject\n     private ZanataIdentity identity;\n+\n     @Inject\n     private GroupMaintainerAutocomplete maintainerAutocomplete;\n+\n     @Inject\n     private VersionAutocomplete versionAutocomplete;\n+\n     @Inject\n     private GroupLocaleAutocomplete localeAutocomplete;\n+\n     @Inject\n     private UrlUtil urlUtil;\n+\n     @Inject\n     private VersionGroupDAO versionGroupDAO;\n-    private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n-\n-                private static final long serialVersionUID =\n-                        6521717110985363677L;\n+    private AbstractListFilter<HPerson> maintainerFilter = new InMemoryListFilter<HPerson>() {\n+                                                               private static final long serialVersionUID = 6521717110985363677L;\n \n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n+                                                               @Override\n+                                                               protected List<HPerson> fetchAll() {\n+                                                                   return getInstanceMaintainers();\n+                                                               }\n \n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n+                                                               @Override\n+                                                               protected boolean include(HPerson elem, String filter) {\n+                                                                   return containsIgnoreCase(elem.getName(), filter);\n+                                                               }\n+                                                           };\n \n     public VersionGroupHome() {\n         setEntityClass(HIterationGroup.class);\n@@ -142,16 +152,14 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n \n     public boolean validateSlug(String slug, String componentId) {\n         if (!isSlugAvailable(slug)) {\n-            facesMessages.addToControl(componentId,\n-                    \"This Group ID is not available\");\n+            facesMessages.addToControl(componentId, \"This Group ID is not available\");\n             return false;\n         }\n         return true;\n     }\n \n     public boolean isSlugAvailable(String slug) {\n-        return slugEntityServiceImpl.isSlugAvailable(slug,\n-                HIterationGroup.class);\n+        return slugEntityServiceImpl.isSlugAvailable(slug, HIterationGroup.class);\n     }\n \n     @Override\n@@ -173,8 +181,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n \n     @SuppressWarnings(\"deprecation\")\n     private void setMessage(String message) {\n-        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                message);\n+        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO, message);\n     }\n \n     @Override\n@@ -194,9 +201,9 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n      * @param conversationScopeMessages\n      * @return\n      */\n+\n     @SuppressWarnings(\"deprecation\")\n-    private String update(\n-            org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages) {\n+    private String update(org.zanata.seam.scope.ConversationScopeMessages conversationScopeMessages) {\n         if (this.conversationScopeMessages == null) {\n             this.conversationScopeMessages = conversationScopeMessages;\n         }\n@@ -210,7 +217,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         versionGroupDAO.makeTransient(getInstance());\n         versionGroupDAO.flush();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.group.notification.deleted\", slug));\n+msgs.format(\"jsf.group.notification.deleted\", slug));\n         urlUtil.redirectToInternal(urlUtil.dashboardUrl());\n     }\n \n@@ -220,7 +227,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         getInstance().getActiveLocales().remove(locale);\n         update();\n         setMessage(msgs.format(\"jsf.LanguageRemoveFromGroup\",\n-                locale.retrieveDisplayName()));\n+                               locale.retrieveDisplayName()));\n     }\n \n     @Transactional\n@@ -228,31 +235,30 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().getProjectIterations().remove(version);\n         update();\n-        setMessage(msgs.format(\"jsf.VersionRemoveFromGroup\", version.getSlug(),\n-                version.getProject().getSlug()));\n+        setMessage(msgs.format(\"jsf.VersionRemoveFromGroup\",\n+                               version.getSlug(),\n+                               version.getProject().getSlug()));\n     }\n \n     @Transactional\n     public void removeMaintainer(HPerson maintainer) {\n         identity.checkPermission(getInstance(), \"update\");\n-        if (getInstance().getMaintainers().size() <= 1) {\n+        if (getInstance().getMaintainers()\n+                         .size() <= 1) {\n             setMessage(msgs.get(\"jsf.group.NeedAtLeastOneMaintainer\"));\n         } else {\n             getInstance().removeMaintainer(maintainer);\n             maintainerFilter.reset();\n             super.update();\n-            setMessage(msgs.format(\"jsf.MaintainerRemoveFromGroup\",\n-                    maintainer.getName()));\n+            setMessage(msgs.format(\"jsf.MaintainerRemoveFromGroup\", maintainer.getName()));\n             if (maintainer.equals(authenticatedAccount.getPerson())) {\n-                urlUtil.redirectToInternal(\n-                        urlUtil.groupUrl(getInstance().getSlug()));\n+                urlUtil.redirectToInternal(urlUtil.groupUrl(getInstance().getSlug()));\n             }\n         }\n     }\n \n     public List<HLocale> getInstanceActiveLocales() {\n-        List<HLocale> activeLocales =\n-                Lists.newArrayList(getInstance().getActiveLocales());\n+        List<HLocale> activeLocales = Lists.newArrayList(getInstance().getActiveLocales());\n         Collections.sort(activeLocales, ComparatorUtil.LOCALE_COMPARATOR);\n         return activeLocales;\n     }\n@@ -260,14 +266,13 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     @Override\n     protected HIterationGroup loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n-        return (HIterationGroup) session.byNaturalId(HIterationGroup.class)\n-                .using(\"slug\", getSlug()).load();\n+        return (HIterationGroup) session.byNaturalId(HIterationGroup.class).using(\"slug\", getSlug())\n+                                                                           .load();\n     }\n     // sort by slug\n \n     public List<HProjectIteration> getSortedInstanceProjectIterations() {\n-        List<HProjectIteration> list =\n-                Lists.newArrayList(getInstance().getProjectIterations());\n+        List<HProjectIteration> list = Lists.newArrayList(getInstance().getProjectIterations());\n         Collections.sort(list, ComparatorUtil.VERSION_PROJECT_NAME_COMPARATOR);\n         return list;\n     }\n@@ -305,14 +310,15 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     @ViewScoped\n-    public static class GroupMaintainerAutocomplete\n-            extends MaintainerAutocomplete {\n-\n+    public static class GroupMaintainerAutocomplete extends MaintainerAutocomplete {\n         private static final long serialVersionUID = 1150630837852918989L;\n+\n         @Inject\n         private VersionGroupHome versionGroupHome;\n+\n         @Inject\n         private ZanataIdentity identity;\n+\n         @Inject\n         private Messages msgs;\n \n@@ -328,6 +334,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         /**\n          * Action when an item is selected\n          */\n+\n         @Override\n         @Transactional\n         @SuppressWarnings(\"deprecation\")\n@@ -341,40 +348,38 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             versionGroupHome.update(conversationScopeMessages);\n             reset();\n             conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.MaintainerAddedToGroup\",\n-                            maintainer.getName()));\n+msgs.format(\"jsf.MaintainerAddedToGroup\", maintainer.getName()));\n         }\n     }\n \n     @ViewScoped\n-    public static class VersionAutocomplete\n-            extends AbstractAutocomplete<HProjectIteration> {\n-\n+    public static class VersionAutocomplete extends AbstractAutocomplete<HProjectIteration> {\n         private static final long serialVersionUID = 8022275695197571957L;\n+\n         @Inject\n         private ProjectIterationDAO projectIterationDAO;\n+\n         @Inject\n         private VersionGroupService versionGroupServiceImpl;\n+\n         @Inject\n         private VersionGroupHome versionGroupHome;\n+\n         @Inject\n         private ZanataIdentity identity;\n+\n         @Inject\n         private Messages msgs;\n-\n         private HIterationGroup getInstance() {\n             return versionGroupHome.getInstance();\n         }\n \n         @Override\n         public List<HProjectIteration> suggest() {\n-            List<HProjectIteration> versionList = versionGroupServiceImpl\n-                    .searchLikeSlugOrProjectSlug(getQuery());\n-            return versionList.stream()\n-                    .filter(it -> it != null && !it.getGroups()\n-                            .contains(getInstance()) &&\n-                            identity.hasPermission(it, \"read\"))\n-                    .collect(Collectors.toList());\n+            List<HProjectIteration> versionList = versionGroupServiceImpl.searchLikeSlugOrProjectSlug(getQuery());\n+            return versionList.stream().filter(it -> it != null && !it.getGroups().contains(getInstance())\n+                && identity.hasPermission(it, \"read\"))\n+                                       .collect(Collectors.toList());\n         }\n \n         @Override\n@@ -385,28 +390,28 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n                 return;\n             }\n             identity.checkPermission(getInstance(), \"update\");\n-            HProjectIteration version =\n-                    projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n+            HProjectIteration version = projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n             getInstance().getProjectIterations().add(version);\n             versionGroupHome.update(conversationScopeMessages);\n             reset();\n-            conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n-                            version.getProject().getSlug()));\n+            conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO, msgs.format(\"jsf.VersionAddedToGroup\",\n+                                                                                         version.getSlug(),\n+                                                                                         version.getProject().getSlug()));\n         }\n     }\n \n     @ViewScoped\n     public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n-\n         private static final long serialVersionUID = -4325912450531279919L;\n+\n         @Inject\n         private VersionGroupHome versionGroupHome;\n+\n         @Inject\n         private ZanataIdentity identity;\n+\n         @Inject\n         private Messages msgs;\n-\n         private HIterationGroup getInstance() {\n             return versionGroupHome.getInstance();\n         }\n@@ -421,26 +426,19 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         public List<HLocale> suggest() {\n             String query = getQuery();\n             HIterationGroup group = getInstance();\n-            return localeServiceImpl\n-                    .getSupportedLocales()\n-                    .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n-                                    && (matchByLocaleCode(query, locale)\n-                                    || matchByDisplayName(query, locale)))\n-                    .collect(Collectors.toList());\n+            return localeServiceImpl.getSupportedLocales().stream()\n+                                                          .filter(locale -> !group.getActiveLocales().contains(locale) &&\n+                                                              (matchByLocaleCode(query, locale)\n+                                                              || matchByDisplayName(query, locale)))\n+                                                          .collect(Collectors.toList());\n         }\n \n         private boolean matchByDisplayName(String query, HLocale locale) {\n-            return containsIgnoreCase(\n-                    locale.retrieveDisplayName(),\n-                    query);\n+            return containsIgnoreCase(locale.retrieveDisplayName(), query);\n         }\n \n         private boolean matchByLocaleCode(String query, HLocale locale) {\n-            return startsWithIgnoreCase(\n-                    locale.getLocaleId().getId(),\n-                    query);\n+            return startsWithIgnoreCase(locale.getLocaleId().getId(), query);\n         }\n \n         /**\n@@ -461,8 +459,8 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n             reset();\n             versionGroupHome.getMaintainerFilter().reset();\n             conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LanguageAddedToGroup\",\n-                            locale.retrieveDisplayName()));\n+msgs.format(\"jsf.LanguageAddedToGroup\",\n+           locale.retrieveDisplayName()));\n         }\n     }\n \n@@ -485,4 +483,4 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     public AbstractListFilter<HPerson> getMaintainerFilter() {\n         return this.maintainerFilter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 108
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/18/VersionGroupHome.java\nindex 93ee8afb4b..cc4b1324bd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/18/VersionGroupHome.java\n@@ -294,9 +294,7 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n     }\n \n     public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n-        // start\n+        getInstance(); // this will raise an EntityNotFound exception// when id is invalid and conversation will not // start\n         clearSlugs();\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "296",
                    "column": "38",
                    "severity": "error",
                    "message": "'{' at column 38 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "296",
                    "column": "38",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/18/VersionGroupHome.java\nindex 93ee8afb4b..878d891914 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/18/VersionGroupHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/18/VersionGroupHome.java\n@@ -293,196 +293,197 @@ public class VersionGroupHome extends SlugHome<HIterationGroup>\n         return getSlug();\n     }\n \n-    public void validateSuppliedId() {\n-        getInstance(); // this will raise an EntityNotFound exception\n-        // when id is invalid and conversation will not\n-        // start\n-        clearSlugs();\n-    }\n+    public void validateSuppliedId() {getInstance(\n+    )\n+    ; // this will raise an EntityNotFound exception\n+    // when id is invalid and conversation will not\n+    // start\n+    clearSlugs();\n+}\n \n-    public boolean canViewProject(HProjectIteration version) {\n-        return identity.hasPermission(version, \"read\");\n-    }\n+public boolean canViewProject(HProjectIteration version) {\n+    return identity.hasPermission(version, \"read\");\n+}\n \n-    @ViewScoped\n-    public static class GroupMaintainerAutocomplete\n-            extends MaintainerAutocomplete {\n+@ViewScoped\n+public static class GroupMaintainerAutocomplete\n+        extends MaintainerAutocomplete {\n \n-        private static final long serialVersionUID = 1150630837852918989L;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n+    private static final long serialVersionUID = 1150630837852918989L;\n+    @Inject\n+    private VersionGroupHome versionGroupHome;\n+    @Inject\n+    private ZanataIdentity identity;\n+    @Inject\n+    private Messages msgs;\n \n-        @Override\n-        protected List<HPerson> getMaintainers() {\n-            return versionGroupHome.getInstanceMaintainers();\n-        }\n+    @Override\n+    protected List<HPerson> getMaintainers() {\n+        return versionGroupHome.getInstanceMaintainers();\n+    }\n \n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n+    private HIterationGroup getInstance() {\n+        return versionGroupHome.getInstance();\n+    }\n \n-        /**\n+    /**\n          * Action when an item is selected\n          */\n-        @Override\n-        @Transactional\n-        @SuppressWarnings(\"deprecation\")\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HPerson maintainer = personDAO.findByUsername(getSelectedItem());\n-            getInstance().getMaintainers().add(maintainer);\n-            versionGroupHome.update(conversationScopeMessages);\n-            reset();\n-            conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.MaintainerAddedToGroup\",\n-                            maintainer.getName()));\n+    @Override\n+    @Transactional\n+    @SuppressWarnings(\"deprecation\")\n+    public void onSelectItemAction() {\n+        if (StringUtils.isEmpty(getSelectedItem())) {\n+            return;\n         }\n+        identity.checkPermission(getInstance(), \"update\");\n+        HPerson maintainer = personDAO.findByUsername(getSelectedItem());\n+        getInstance().getMaintainers().add(maintainer);\n+        versionGroupHome.update(conversationScopeMessages);\n+        reset();\n+        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n+                msgs.format(\"jsf.MaintainerAddedToGroup\",\n+                        maintainer.getName()));\n     }\n+}\n \n-    @ViewScoped\n-    public static class VersionAutocomplete\n-            extends AbstractAutocomplete<HProjectIteration> {\n-\n-        private static final long serialVersionUID = 8022275695197571957L;\n-        @Inject\n-        private ProjectIterationDAO projectIterationDAO;\n-        @Inject\n-        private VersionGroupService versionGroupServiceImpl;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n-\n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n+@ViewScoped\n+public static class VersionAutocomplete\n+        extends AbstractAutocomplete<HProjectIteration> {\n \n-        @Override\n-        public List<HProjectIteration> suggest() {\n-            List<HProjectIteration> versionList = versionGroupServiceImpl\n-                    .searchLikeSlugOrProjectSlug(getQuery());\n-            return versionList.stream()\n-                    .filter(it -> it != null && !it.getGroups()\n-                            .contains(getInstance()) &&\n-                            identity.hasPermission(it, \"read\"))\n-                    .collect(Collectors.toList());\n-        }\n+    private static final long serialVersionUID = 8022275695197571957L;\n+    @Inject\n+    private ProjectIterationDAO projectIterationDAO;\n+    @Inject\n+    private VersionGroupService versionGroupServiceImpl;\n+    @Inject\n+    private VersionGroupHome versionGroupHome;\n+    @Inject\n+    private ZanataIdentity identity;\n+    @Inject\n+    private Messages msgs;\n \n-        @Override\n-        @Transactional\n-        @SuppressWarnings(\"deprecation\")\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HProjectIteration version =\n-                    projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n-            getInstance().getProjectIterations().add(version);\n-            versionGroupHome.update(conversationScopeMessages);\n-            reset();\n-            conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n-                            version.getProject().getSlug()));\n+    private HIterationGroup getInstance() {\n+        return versionGroupHome.getInstance();\n+    }\n+\n+    @Override\n+    public List<HProjectIteration> suggest() {\n+        List<HProjectIteration> versionList = versionGroupServiceImpl\n+                .searchLikeSlugOrProjectSlug(getQuery());\n+        return versionList.stream()\n+                .filter(it -> it != null && !it.getGroups()\n+                        .contains(getInstance()) &&\n+                        identity.hasPermission(it, \"read\"))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    @SuppressWarnings(\"deprecation\")\n+    public void onSelectItemAction() {\n+        if (StringUtils.isEmpty(getSelectedItem())) {\n+            return;\n         }\n+        identity.checkPermission(getInstance(), \"update\");\n+        HProjectIteration version =\n+                projectIterationDAO.findById(Long.valueOf(getSelectedItem()));\n+        getInstance().getProjectIterations().add(version);\n+        versionGroupHome.update(conversationScopeMessages);\n+        reset();\n+        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n+                msgs.format(\"jsf.VersionAddedToGroup\", version.getSlug(),\n+                        version.getProject().getSlug()));\n     }\n+}\n \n-    @ViewScoped\n-    public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n+@ViewScoped\n+public static class GroupLocaleAutocomplete extends LocaleAutocomplete {\n \n-        private static final long serialVersionUID = -4325912450531279919L;\n-        @Inject\n-        private VersionGroupHome versionGroupHome;\n-        @Inject\n-        private ZanataIdentity identity;\n-        @Inject\n-        private Messages msgs;\n+    private static final long serialVersionUID = -4325912450531279919L;\n+    @Inject\n+    private VersionGroupHome versionGroupHome;\n+    @Inject\n+    private ZanataIdentity identity;\n+    @Inject\n+    private Messages msgs;\n \n-        private HIterationGroup getInstance() {\n-            return versionGroupHome.getInstance();\n-        }\n+    private HIterationGroup getInstance() {\n+        return versionGroupHome.getInstance();\n+    }\n \n-        @Override\n-        protected Set<HLocale> getLocales() {\n-            // not used because overriding List<HLocale> suggest()\n-            return null;\n-        }\n+    @Override\n+    protected Set<HLocale> getLocales() {\n+        // not used because overriding List<HLocale> suggest()\n+        return null;\n+    }\n \n-        @Override\n-        public List<HLocale> suggest() {\n-            String query = getQuery();\n-            HIterationGroup group = getInstance();\n-            return localeServiceImpl\n-                    .getSupportedLocales()\n-                    .stream()\n-                    .filter(locale ->\n-                            !group.getActiveLocales().contains(locale)\n-                                    && (matchByLocaleCode(query, locale)\n-                                    || matchByDisplayName(query, locale)))\n-                    .collect(Collectors.toList());\n-        }\n+    @Override\n+    public List<HLocale> suggest() {\n+        String query = getQuery();\n+        HIterationGroup group = getInstance();\n+        return localeServiceImpl\n+                .getSupportedLocales()\n+                .stream()\n+                .filter(locale ->\n+                        !group.getActiveLocales().contains(locale)\n+                                && (matchByLocaleCode(query, locale)\n+                                || matchByDisplayName(query, locale)))\n+                .collect(Collectors.toList());\n+    }\n \n-        private boolean matchByDisplayName(String query, HLocale locale) {\n-            return containsIgnoreCase(\n-                    locale.retrieveDisplayName(),\n-                    query);\n-        }\n+    private boolean matchByDisplayName(String query, HLocale locale) {\n+        return containsIgnoreCase(\n+                locale.retrieveDisplayName(),\n+                query);\n+    }\n \n-        private boolean matchByLocaleCode(String query, HLocale locale) {\n-            return startsWithIgnoreCase(\n-                    locale.getLocaleId().getId(),\n-                    query);\n-        }\n+    private boolean matchByLocaleCode(String query, HLocale locale) {\n+        return startsWithIgnoreCase(\n+                locale.getLocaleId().getId(),\n+                query);\n+    }\n \n-        /**\n+    /**\n          * Action when an item is selected\n          */\n \n-        @Override\n-        @Transactional\n-        @SuppressWarnings(\"deprecation\")\n-        public void onSelectItemAction() {\n-            if (StringUtils.isEmpty(getSelectedItem())) {\n-                return;\n-            }\n-            identity.checkPermission(getInstance(), \"update\");\n-            HLocale locale = localeServiceImpl.getByLocaleId(getSelectedItem());\n-            getInstance().getActiveLocales().add(locale);\n-            versionGroupHome.update();\n-            reset();\n-            versionGroupHome.getMaintainerFilter().reset();\n-            conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LanguageAddedToGroup\",\n-                            locale.retrieveDisplayName()));\n+    @Override\n+    @Transactional\n+    @SuppressWarnings(\"deprecation\")\n+    public void onSelectItemAction() {\n+        if (StringUtils.isEmpty(getSelectedItem())) {\n+            return;\n         }\n+        identity.checkPermission(getInstance(), \"update\");\n+        HLocale locale = localeServiceImpl.getByLocaleId(getSelectedItem());\n+        getInstance().getActiveLocales().add(locale);\n+        versionGroupHome.update();\n+        reset();\n+        versionGroupHome.getMaintainerFilter().reset();\n+        conversationScopeMessages.setMessage(FacesMessage.SEVERITY_INFO,\n+                msgs.format(\"jsf.LanguageAddedToGroup\",\n+                        locale.retrieveDisplayName()));\n     }\n+}\n \n-    public VersionGroupSlug getVersionGroupSlug() {\n-        return this.versionGroupSlug;\n-    }\n+public VersionGroupSlug getVersionGroupSlug() {\n+    return this.versionGroupSlug;\n+}\n \n-    public GroupMaintainerAutocomplete getMaintainerAutocomplete() {\n-        return this.maintainerAutocomplete;\n-    }\n+public GroupMaintainerAutocomplete getMaintainerAutocomplete() {\n+    return this.maintainerAutocomplete;\n+}\n \n-    public VersionAutocomplete getVersionAutocomplete() {\n-        return this.versionAutocomplete;\n-    }\n+public VersionAutocomplete getVersionAutocomplete() {\n+    return this.versionAutocomplete;\n+}\n \n-    public GroupLocaleAutocomplete getLocaleAutocomplete() {\n-        return this.localeAutocomplete;\n-    }\n+public GroupLocaleAutocomplete getLocaleAutocomplete() {\n+    return this.localeAutocomplete;\n+}\n \n-    public AbstractListFilter<HPerson> getMaintainerFilter() {\n-        return this.maintainerFilter;\n-    }\n+public AbstractListFilter<HPerson> getMaintainerFilter() {\n+    return this.maintainerFilter;\n+}\n }\n",
            "diff_size": 195
        }
    ]
}