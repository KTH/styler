{
    "error_id": "341",
    "information": {
        "errors": [
            {
                "line": "52",
                "column": "50",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  private boolean isAllSameMapper() {\n    for (ArgumentMapper mapper : mappers) {\n      if (mapper instanceof ConsumerArgumentSame &&\n          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n        continue;\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/341/ConsumerArgumentsMapperCreator.java\nindex e5b0cf1914..e5156b0ea1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/341/ConsumerArgumentsMapperCreator.java\n@@ -49,72 +49,71 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n-        continue;\n-      }\n-\n-      return false;\n-    }\n-\n-    return true;\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+    continue;\n   }\n \n-  public ConsumerArgumentsMapper createArgumentsMapper() {\n-    doCreateArgumentsMapper();\n+  return false;\n+}\n \n-    // if all mappers are SameMapper, then no need any mapper\n-    if (unknownConsumerParams == 0\n-        && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n-        && isAllSameMapper()) {\n-      return new ArgumentsMapperDirectReuse();\n-    }\n+return true;\n+}\n \n-    return new ArgumentsMapperCommon(mappers, swaggerParameters.size());\n-  }\n+public ConsumerArgumentsMapper createArgumentsMapper() {\n+  doCreateArgumentsMapper();\n \n-  @Override\n-  protected void processUnknownParameter(String parameterName) {\n-    // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n-    LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n-        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-    unknownConsumerParams++;\n+  // if all mappers are SameMapper, then no need any mapper\n+  if (unknownConsumerParams == 0\n+      && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n+      && isAllSameMapper()) {\n+    return new ArgumentsMapperDirectReuse();\n   }\n \n-  @Override\n-  protected ArgumentMapper createKnownParameterMapper(int consumerParamIdx, Integer swaggerIdx) {\n-    return new ConsumerArgumentSame(consumerParamIdx, swaggerIdx);\n-  }\n+  return new ArgumentsMapperCommon(mappers, swaggerParameters.size());\n+}\n \n-  @Override\n-  protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n-      int swaggerBodyIdx) {\n-    return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n-  }\n+@Override\n+protected void processUnknownParameter(String parameterName) {\n+  // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n+  LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n+      parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n+  unknownConsumerParams++;\n+}\n+\n+@Override\n+protected ArgumentMapper createKnownParameterMapper(int consumerParamIdx, Integer swaggerIdx) {\n+  return new ConsumerArgumentSame(consumerParamIdx, swaggerIdx);\n+}\n+\n+@Override\n+protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n+    int swaggerBodyIdx) {\n+  return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n+}\n \n-  protected void processBeanParameter(int consumerParamIdx, java.lang.reflect.Parameter consumerParameter) {\n-    ConsumerBeanParamMapper mapper = new ConsumerBeanParamMapper(consumerParamIdx);\n-    JavaType consumerType = TypeFactory.defaultInstance().constructType(consumerParameter.getParameterizedType());\n-    for (BeanPropertyDefinition propertyDefinition : serializationConfig.introspect(consumerType).findProperties()) {\n-      String parameterName = collectParameterName(providerMethod, propertyDefinition);\n-      Integer swaggerIdx = findAndClearSwaggerParameterIndex(parameterName);\n-      if (swaggerIdx == null) {\n-        // unknown field, ignore it\n-        LOGGER.warn(\n-            \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n-            parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-        continue;\n-      }\n-\n-      Getter<Object, Object> getter;\n-      if (propertyDefinition.hasGetter()) {\n-        getter = LambdaMetafactoryUtils.createLambda(propertyDefinition.getGetter().getAnnotated(), Getter.class);\n-      } else {\n-        getter = LambdaMetafactoryUtils.createGetter(propertyDefinition.getField().getAnnotated());\n-      }\n-\n-      mapper.addField(swaggerIdx, getter);\n+protected void processBeanParameter(int consumerParamIdx, java.lang.reflect.Parameter consumerParameter) {\n+  ConsumerBeanParamMapper mapper = new ConsumerBeanParamMapper(consumerParamIdx);\n+  JavaType consumerType = TypeFactory.defaultInstance().constructType(consumerParameter.getParameterizedType());\n+  for (BeanPropertyDefinition propertyDefinition : serializationConfig.introspect(consumerType).findProperties()) {\n+    String parameterName = collectParameterName(providerMethod, propertyDefinition);\n+    Integer swaggerIdx = findAndClearSwaggerParameterIndex(parameterName);\n+    if (swaggerIdx == null) {\n+      // unknown field, ignore it\n+      LOGGER.warn(\n+          \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n+          parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n+      continue;\n     }\n-    mappers.add(mapper);\n+\n+    Getter<Object, Object> getter;\n+    if (propertyDefinition.hasGetter()) {\n+      getter = LambdaMetafactoryUtils.createLambda(propertyDefinition.getGetter().getAnnotated(), Getter.class);\n+    } else {\n+      getter = LambdaMetafactoryUtils.createGetter(propertyDefinition.getField().getAnnotated());\n+    }\n+\n+    mapper.addField(swaggerIdx, getter);\n   }\n+  mappers.add(mapper);\n+}\n }\n",
            "diff_size": 80
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "52",
                    "column": "50",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/341/ConsumerArgumentsMapperCreator.java\nindex e5b0cf1914..e969463df3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/341/ConsumerArgumentsMapperCreator.java\n@@ -42,8 +42,8 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   private int unknownConsumerParams = 0;\n \n   public ConsumerArgumentsMapperCreator(SerializationConfig serializationConfig,\n-      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n-      Method consumerMethod, SwaggerOperation swaggerOperation) {\n+                                        Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n+                                        Method consumerMethod, SwaggerOperation swaggerOperation) {\n     super(serializationConfig, contextFactorys, consumerMethod, swaggerOperation);\n   }\n \n@@ -88,7 +88,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   @Override\n   protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n-      int swaggerBodyIdx) {\n+                                                        int swaggerBodyIdx) {\n     return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/341/ConsumerArgumentsMapperCreator.java\nindex e5b0cf1914..a5eada4637 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/341/ConsumerArgumentsMapperCreator.java\n@@ -42,16 +42,14 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   private int unknownConsumerParams = 0;\n \n   public ConsumerArgumentsMapperCreator(SerializationConfig serializationConfig,\n-      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n-      Method consumerMethod, SwaggerOperation swaggerOperation) {\n+      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys, Method consumerMethod, SwaggerOperation swaggerOperation) {\n     super(serializationConfig, contextFactorys, consumerMethod, swaggerOperation);\n   }\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n-        continue;\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+  continue;\n       }\n \n       return false;\n@@ -66,7 +64,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n     // if all mappers are SameMapper, then no need any mapper\n     if (unknownConsumerParams == 0\n         && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n-        && isAllSameMapper()) {\n+    && isAllSameMapper()) {\n       return new ArgumentsMapperDirectReuse();\n     }\n \n@@ -77,8 +75,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   protected void processUnknownParameter(String parameterName) {\n     // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n     LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n-        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-    unknownConsumerParams++;\n+        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName()); unknownConsumerParams++;\n   }\n \n   @Override\n@@ -103,7 +100,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n         LOGGER.warn(\n             \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n             parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-        continue;\n+continue;\n       }\n \n       Getter<Object, Object> getter;\n@@ -117,4 +114,4 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n     }\n     mappers.add(mapper);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/341/ConsumerArgumentsMapperCreator.java\nindex e5b0cf1914..e5156b0ea1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/341/ConsumerArgumentsMapperCreator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/341/ConsumerArgumentsMapperCreator.java\n@@ -49,72 +49,71 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n-        continue;\n-      }\n-\n-      return false;\n-    }\n-\n-    return true;\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+    continue;\n   }\n \n-  public ConsumerArgumentsMapper createArgumentsMapper() {\n-    doCreateArgumentsMapper();\n+  return false;\n+}\n \n-    // if all mappers are SameMapper, then no need any mapper\n-    if (unknownConsumerParams == 0\n-        && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n-        && isAllSameMapper()) {\n-      return new ArgumentsMapperDirectReuse();\n-    }\n+return true;\n+}\n \n-    return new ArgumentsMapperCommon(mappers, swaggerParameters.size());\n-  }\n+public ConsumerArgumentsMapper createArgumentsMapper() {\n+  doCreateArgumentsMapper();\n \n-  @Override\n-  protected void processUnknownParameter(String parameterName) {\n-    // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n-    LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n-        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-    unknownConsumerParams++;\n+  // if all mappers are SameMapper, then no need any mapper\n+  if (unknownConsumerParams == 0\n+      && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n+      && isAllSameMapper()) {\n+    return new ArgumentsMapperDirectReuse();\n   }\n \n-  @Override\n-  protected ArgumentMapper createKnownParameterMapper(int consumerParamIdx, Integer swaggerIdx) {\n-    return new ConsumerArgumentSame(consumerParamIdx, swaggerIdx);\n-  }\n+  return new ArgumentsMapperCommon(mappers, swaggerParameters.size());\n+}\n \n-  @Override\n-  protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n-      int swaggerBodyIdx) {\n-    return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n-  }\n+@Override\n+protected void processUnknownParameter(String parameterName) {\n+  // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n+  LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n+      parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n+  unknownConsumerParams++;\n+}\n+\n+@Override\n+protected ArgumentMapper createKnownParameterMapper(int consumerParamIdx, Integer swaggerIdx) {\n+  return new ConsumerArgumentSame(consumerParamIdx, swaggerIdx);\n+}\n+\n+@Override\n+protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n+    int swaggerBodyIdx) {\n+  return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n+}\n \n-  protected void processBeanParameter(int consumerParamIdx, java.lang.reflect.Parameter consumerParameter) {\n-    ConsumerBeanParamMapper mapper = new ConsumerBeanParamMapper(consumerParamIdx);\n-    JavaType consumerType = TypeFactory.defaultInstance().constructType(consumerParameter.getParameterizedType());\n-    for (BeanPropertyDefinition propertyDefinition : serializationConfig.introspect(consumerType).findProperties()) {\n-      String parameterName = collectParameterName(providerMethod, propertyDefinition);\n-      Integer swaggerIdx = findAndClearSwaggerParameterIndex(parameterName);\n-      if (swaggerIdx == null) {\n-        // unknown field, ignore it\n-        LOGGER.warn(\n-            \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n-            parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-        continue;\n-      }\n-\n-      Getter<Object, Object> getter;\n-      if (propertyDefinition.hasGetter()) {\n-        getter = LambdaMetafactoryUtils.createLambda(propertyDefinition.getGetter().getAnnotated(), Getter.class);\n-      } else {\n-        getter = LambdaMetafactoryUtils.createGetter(propertyDefinition.getField().getAnnotated());\n-      }\n-\n-      mapper.addField(swaggerIdx, getter);\n+protected void processBeanParameter(int consumerParamIdx, java.lang.reflect.Parameter consumerParameter) {\n+  ConsumerBeanParamMapper mapper = new ConsumerBeanParamMapper(consumerParamIdx);\n+  JavaType consumerType = TypeFactory.defaultInstance().constructType(consumerParameter.getParameterizedType());\n+  for (BeanPropertyDefinition propertyDefinition : serializationConfig.introspect(consumerType).findProperties()) {\n+    String parameterName = collectParameterName(providerMethod, propertyDefinition);\n+    Integer swaggerIdx = findAndClearSwaggerParameterIndex(parameterName);\n+    if (swaggerIdx == null) {\n+      // unknown field, ignore it\n+      LOGGER.warn(\n+          \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n+          parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n+      continue;\n     }\n-    mappers.add(mapper);\n+\n+    Getter<Object, Object> getter;\n+    if (propertyDefinition.hasGetter()) {\n+      getter = LambdaMetafactoryUtils.createLambda(propertyDefinition.getGetter().getAnnotated(), Getter.class);\n+    } else {\n+      getter = LambdaMetafactoryUtils.createGetter(propertyDefinition.getField().getAnnotated());\n+    }\n+\n+    mapper.addField(swaggerIdx, getter);\n   }\n+  mappers.add(mapper);\n+}\n }\n",
            "diff_size": 80
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "52",
                    "column": "50",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}