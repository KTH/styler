{
    "error_id": "157",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 3 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t0\n\t\t\t);\n\t\t} catch(NumberFormatException e) {\n\t\t\treturn null;\n\t\t}\n\t\t",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 3 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/157/NumberTypeGuesser.java\nindex f7fa11fbf8..29a9d8dc70 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/157/NumberTypeGuesser.java\n@@ -16,7 +16,7 @@ import lombok.RequiredArgsConstructor;\n \n @RequiredArgsConstructor\n public class NumberTypeGuesser implements TypeGuesser {\n-\t\n+\n \tprivate final StringParser p;\n \n \t@Override\n@@ -37,17 +37,17 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t\t\trange = range.span(new IntegerRange(intValue, intValue));\n \t\t\t\tnumberParser.addLine(intValue);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t//do not use a number type if the range is much larger than the number if distinct values\n \t\t\t//e.g. if the column contains only 0 and 5M\n \t\t\tint span = range.getMax() - range.getMin() + 1;\n \t\t\tif(span > p.getStrings().size()) {\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\t\n+\n \t\t\tDecision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n \t\t\tp.setLineCounts(decision.getType());\n-\t\t\t\n+\n \t\t\treturn new Guess(\n \t\t\t\tthis,\n \t\t\t\tnew StringTypeNumber(range, decision.getType()),\n@@ -63,8 +63,8 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t} catch(NumberFormatException e) {\n \t\t\treturn null;\n \t\t}\n-\t\t\n-\t\t\n+\n+\n \t}\n \n }\n",
            "diff_size": 6
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/157/NumberTypeGuesser.java\nindex f7fa11fbf8..25fb06a0ab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/157/NumberTypeGuesser.java\n@@ -16,55 +16,55 @@ import lombok.RequiredArgsConstructor;\n \n @RequiredArgsConstructor\n public class NumberTypeGuesser implements TypeGuesser {\n-\t\n-\tprivate final StringParser p;\n \n-\t@Override\n-\tpublic Guess createGuess() {\n-\t\t//check if the remaining strings are all numbers\n-\t\ttry {\n-\t\t\tRange<Integer> range = new IntegerRange(0, 0);\n-\t\t\tVarIntParser numberParser = new VarIntParser();\n-\t\t\tint[] intMap = new int[p.getStrings().size()];\n-\t\t\tArrays.fill(intMap, -1);\n-\t\t\tfor(Entry<String, Integer> e : p.getStrings().entrySet()) {\n-\t\t\t\tint intValue = Integer.parseInt(e.getKey());\n-\t\t\t\t//check that there are no leading zeroes that we would destroy\n-\t\t\t\tif(e.getKey().startsWith(\"0\") && !e.getKey().equals(\"0\")) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tintMap[e.getValue()] = intValue;\n-\t\t\t\trange = range.span(new IntegerRange(intValue, intValue));\n-\t\t\t\tnumberParser.addLine(intValue);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//do not use a number type if the range is much larger than the number if distinct values\n-\t\t\t//e.g. if the column contains only 0 and 5M\n-\t\t\tint span = range.getMax() - range.getMin() + 1;\n-\t\t\tif(span > p.getStrings().size()) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\t\n-\t\t\tDecision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n-\t\t\tp.setLineCounts(decision.getType());\n-\t\t\t\n-\t\t\treturn new Guess(\n-\t\t\t\tthis,\n-\t\t\t\tnew StringTypeNumber(range, decision.getType()),\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn decision.getTransformer().transform(intMap[value]);\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tdecision.getType().estimateMemoryConsumption(),\n-\t\t\t\t0\n-\t\t\t);\n-\t\t} catch(NumberFormatException e) {\n-\t\t\treturn null;\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    private final StringParser p;\n+\n+    @Override\n+    public Guess createGuess() {\n+        //check if the remaining strings are all numbers\n+        try {\n+            Range<Integer> range = new IntegerRange(0, 0);\n+            VarIntParser numberParser = new VarIntParser();\n+            int[] intMap = new int[p.getStrings().size()];\n+            Arrays.fill(intMap, -1);\n+            for (Entry<String, Integer> e : p.getStrings().entrySet()) {\n+                int intValue = Integer.parseInt(e.getKey());\n+                //check that there are no leading zeroes that we would destroy\n+                if (e.getKey().startsWith(\"0\") && !e.getKey().equals(\"0\")) {\n+                    return null;\n+                }\n+                intMap[e.getValue()] = intValue;\n+                range = range.span(new IntegerRange(intValue, intValue));\n+                numberParser.addLine(intValue);\n+            }\n+\n+            //do not use a number type if the range is much larger than the number if distinct values\n+            //e.g. if the column contains only 0 and 5M\n+            int span = range.getMax() - range.getMin() + 1;\n+            if (span > p.getStrings().size()) {\n+                return null;\n+            }\n+\n+            Decision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n+            p.setLineCounts(decision.getType());\n+\n+            return new Guess(\n+                this,\n+                new StringTypeNumber(range, decision.getType()),\n+                new Transformer<Integer, Number>() {\n+                    @Override\n+                    public Number transform(@NonNull Integer value) {\n+                        return decision.getTransformer().transform(intMap[value]);\n+                    }\n+                },\n+                decision.getType().estimateMemoryConsumption(),\n+                0\n+            );\n+        } catch (NumberFormatException e) {\n+            return null;\n+        }\n+\n+\n+    }\n \n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 33, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 33, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 84, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/157/NumberTypeGuesser.java\nindex f7fa11fbf8..8620cc7228 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/157/NumberTypeGuesser.java\n@@ -2,7 +2,6 @@ package com.bakdata.conquery.models.types.parser.specific.string;\n \n import java.util.Arrays;\n import java.util.Map.Entry;\n-\n import com.bakdata.conquery.models.common.Range;\n import com.bakdata.conquery.models.common.Range.IntegerRange;\n import com.bakdata.conquery.models.types.parser.Decision;\n@@ -10,61 +9,52 @@ import com.bakdata.conquery.models.types.parser.Transformer;\n import com.bakdata.conquery.models.types.parser.specific.VarIntParser;\n import com.bakdata.conquery.models.types.specific.StringTypeNumber;\n import com.bakdata.conquery.models.types.specific.VarIntType;\n-\n import lombok.NonNull;\n import lombok.RequiredArgsConstructor;\n \n @RequiredArgsConstructor\n public class NumberTypeGuesser implements TypeGuesser {\n-\t\n-\tprivate final StringParser p;\n \n-\t@Override\n-\tpublic Guess createGuess() {\n-\t\t//check if the remaining strings are all numbers\n-\t\ttry {\n-\t\t\tRange<Integer> range = new IntegerRange(0, 0);\n-\t\t\tVarIntParser numberParser = new VarIntParser();\n-\t\t\tint[] intMap = new int[p.getStrings().size()];\n-\t\t\tArrays.fill(intMap, -1);\n-\t\t\tfor(Entry<String, Integer> e : p.getStrings().entrySet()) {\n-\t\t\t\tint intValue = Integer.parseInt(e.getKey());\n-\t\t\t\t//check that there are no leading zeroes that we would destroy\n-\t\t\t\tif(e.getKey().startsWith(\"0\") && !e.getKey().equals(\"0\")) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tintMap[e.getValue()] = intValue;\n-\t\t\t\trange = range.span(new IntegerRange(intValue, intValue));\n-\t\t\t\tnumberParser.addLine(intValue);\n-\t\t\t}\n-\t\t\t\n-\t\t\t//do not use a number type if the range is much larger than the number if distinct values\n-\t\t\t//e.g. if the column contains only 0 and 5M\n-\t\t\tint span = range.getMax() - range.getMin() + 1;\n-\t\t\tif(span > p.getStrings().size()) {\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t\t\n-\t\t\tDecision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n-\t\t\tp.setLineCounts(decision.getType());\n-\t\t\t\n-\t\t\treturn new Guess(\n-\t\t\t\tthis,\n-\t\t\t\tnew StringTypeNumber(range, decision.getType()),\n-\t\t\t\tnew Transformer<Integer, Number>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Number transform(@NonNull Integer value) {\n-\t\t\t\t\t\treturn decision.getTransformer().transform(intMap[value]);\n-\t\t\t\t\t}\n-\t\t\t\t},\n-\t\t\t\tdecision.getType().estimateMemoryConsumption(),\n-\t\t\t\t0\n-\t\t\t);\n-\t\t} catch(NumberFormatException e) {\n-\t\t\treturn null;\n-\t\t}\n-\t\t\n-\t\t\n-\t}\n+    private final StringParser p;\n+    @Override\n+    public Guess createGuess() {\n+        //check if the remaining strings are all numbers\n+        try {\n+            Range<Integer> range = new IntegerRange(0, 0);\n+            VarIntParser numberParser = new VarIntParser();\n+            int[] intMap = new int[p.getStrings().size()];\n+            Arrays.fill(intMap, -1);\n+            for(Entry<String, Integer> e : p.getStrings().entrySet()) {\n+                int intValue = Integer.parseInt(e.getKey());\n+                //check that there are no leading zeroes that we would destroy\n+                if(e.getKey().startsWith(\"0\") && !e.getKey().equals(\"0\")) {\n+                    return null;\n+                }\n+                intMap[e.getValue()] = intValue;\n+                range = range.span(new IntegerRange(intValue, intValue));\n+                numberParser.addLine(intValue);\n+            }\n+            \n+            //do not use a number type if the range is much larger than the number if distinct values\n+            //e.g. if the column contains only 0 and 5M\n+\n+            int span = range.getMax()- range.getMin()+ 1;\n+            if(span > p.getStrings().size()) {\n+                return null;\n+            }\n+\n+            Decision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n+            p.setLineCounts(decision.getType());\n+            return new Guess(this, new StringTypeNumber(range, decision.getType()), new Transformer<Integer, Number>() {\n \n-}\n+                                 @Override\n+                                 public Number transform(@NonNull Integer value) {\n+                                     return decision.getTransformer().transform(intMap[value]);\n+                                 }\n+                                                                                    }, decision.getType().estimateMemoryConsumption(), 0);\n+        }\n+        catch (NumberFormatException e) {\n+            return null;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 3 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'catch lparen' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/157/NumberTypeGuesser.java\nindex f7fa11fbf8..710d02c8d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/157/NumberTypeGuesser.java\n@@ -16,7 +16,7 @@ import lombok.RequiredArgsConstructor;\n \n @RequiredArgsConstructor\n public class NumberTypeGuesser implements TypeGuesser {\n-\t\n+\n \tprivate final StringParser p;\n \n \t@Override\n@@ -37,17 +37,17 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t\t\trange = range.span(new IntegerRange(intValue, intValue));\n \t\t\t\tnumberParser.addLine(intValue);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t//do not use a number type if the range is much larger than the number if distinct values\n \t\t\t//e.g. if the column contains only 0 and 5M\n \t\t\tint span = range.getMax() - range.getMin() + 1;\n \t\t\tif(span > p.getStrings().size()) {\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\t\n+\n \t\t\tDecision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n \t\t\tp.setLineCounts(decision.getType());\n-\t\t\t\n+\n \t\t\treturn new Guess(\n \t\t\t\tthis,\n \t\t\t\tnew StringTypeNumber(range, decision.getType()),\n@@ -60,11 +60,12 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t\t\tdecision.getType().estimateMemoryConsumption(),\n \t\t\t\t0\n \t\t\t);\n-\t\t} catch(NumberFormatException e) {\n+\t\t}catch\n+\t(NumberFormatException e) {\n \t\t\treturn null;\n \t\t}\n-\t\t\n-\t\t\n+\n+\n \t}\n \n }\n",
            "diff_size": 8
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "63",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 3 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/157/NumberTypeGuesser.java\nindex f7fa11fbf8..29a9d8dc70 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/157/NumberTypeGuesser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/157/NumberTypeGuesser.java\n@@ -16,7 +16,7 @@ import lombok.RequiredArgsConstructor;\n \n @RequiredArgsConstructor\n public class NumberTypeGuesser implements TypeGuesser {\n-\t\n+\n \tprivate final StringParser p;\n \n \t@Override\n@@ -37,17 +37,17 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t\t\trange = range.span(new IntegerRange(intValue, intValue));\n \t\t\t\tnumberParser.addLine(intValue);\n \t\t\t}\n-\t\t\t\n+\n \t\t\t//do not use a number type if the range is much larger than the number if distinct values\n \t\t\t//e.g. if the column contains only 0 and 5M\n \t\t\tint span = range.getMax() - range.getMin() + 1;\n \t\t\tif(span > p.getStrings().size()) {\n \t\t\t\treturn null;\n \t\t\t}\n-\t\t\t\n+\n \t\t\tDecision<Integer, Number, VarIntType> decision = numberParser.findBestType();\n \t\t\tp.setLineCounts(decision.getType());\n-\t\t\t\n+\n \t\t\treturn new Guess(\n \t\t\t\tthis,\n \t\t\t\tnew StringTypeNumber(range, decision.getType()),\n@@ -63,8 +63,8 @@ public class NumberTypeGuesser implements TypeGuesser {\n \t\t} catch(NumberFormatException e) {\n \t\t\treturn null;\n \t\t}\n-\t\t\n-\t\t\n+\n+\n \t}\n \n }\n",
            "diff_size": 6
        }
    ]
}