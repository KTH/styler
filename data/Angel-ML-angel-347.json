{
    "error_id": "347",
    "information": {
        "errors": [
            {
                "line": "95",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Test\n  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n    UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n    w2Client.update(func).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/347/UpdateFuncTest.java\nindex 28f4158f74..9ac7bb8c18 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/347/UpdateFuncTest.java\n@@ -91,8 +91,7 @@ public class UpdateFuncTest {\n     }\n   }\n \n-  @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n+  @Test public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/347/UpdateFuncTest.java\nindex 28f4158f74..d5dfc7d5a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/347/UpdateFuncTest.java\n@@ -39,440 +39,444 @@ import java.util.concurrent.ExecutionException;\n \n public class UpdateFuncTest {\n \n-  private static final org.apache.commons.logging.Log LOG = LogFactory.getLog(UpdateFuncTest.class);\n-\n-  private static MatrixClient w2Client = null;\n-  private static double[] localArray0 = null;\n-  private static double[] localArray1 = null;\n-  private static double delta = 1e-6;\n-  private static int dim = -1;\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @BeforeClass\n-  public static void setup() throws Exception {\n-    LocalClusterHelper.setup();\n-    w2Client = MatrixClientFactory.get(\"w2\", 0);\n-    // row 0 is a random uniform\n-    w2Client.update(new RandomUniform(w2Client.getMatrixId(), 0, 0.0, 1.0)).get();\n-    // row 1 is a random normal\n-    w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();\n-    // row 2 is filled with 1.0\n-    w2Client.update(new Fill(w2Client.getMatrixId(), 2, 1.0)).get();\n-\n-    localArray0 = pull(w2Client, 0);\n-    localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n-  }\n-\n-  @Test\n-  public void testAbs() throws InvalidParameterException, InterruptedException, ExecutionException {\n-    UpdateFunc func = new Abs(w2Client.getMatrixId(), 1, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testAdd() throws InvalidParameterException, InterruptedException, ExecutionException {\n-    UpdateFunc func = new Add(w2Client.getMatrixId(), 0, 1, 3);\n-    w2Client.update(func).get();\n-\n-    double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n-    for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n-    UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n-    w2Client.update(func).get();\n-\n-    double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n-    for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testAxpy() throws Exception {\n-    w2Client.update(new Fill(w2Client.getMatrixId(), 3, 1.0)).get();\n-    UpdateFunc func = new Axpy(w2Client.getMatrixId(), 0, 3, -2.0);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testCeil() throws Exception {\n-    UpdateFunc func = new Ceil(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testCopy() throws Exception {\n-    UpdateFunc func = new Copy(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i], delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testDiv() throws Exception {\n-    UpdateFunc func = new Div(w2Client.getMatrixId(), 1, 0, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n-    }\n-  }\n-\n-  @Test\n-  public void testDivS() throws Exception {\n-    UpdateFunc func = new DivS(w2Client.getMatrixId(), 0, 3, -1.0);\n-    w2Client.update(func).get();\n+    private static final org.apache.commons.logging.Log LOG =\n+            LogFactory.getLog(UpdateFuncTest.class);\n+\n+    private static MatrixClient w2Client = null;\n+    private static double[] localArray0 = null;\n+    private static double[] localArray1 = null;\n+    private static double delta = 1e-6;\n+    private static int dim = -1;\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n+    }\n+\n+    @BeforeClass\n+    public static void setup() throws Exception {\n+        LocalClusterHelper.setup();\n+        w2Client = MatrixClientFactory.get(\"w2\", 0);\n+        // row 0 is a random uniform\n+        w2Client.update(new RandomUniform(w2Client.getMatrixId(), 0, 0.0, 1.0)).get();\n+        // row 1 is a random normal\n+        w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();\n+        // row 2 is filled with 1.0\n+        w2Client.update(new Fill(w2Client.getMatrixId(), 2, 1.0)).get();\n+\n+        localArray0 = pull(w2Client, 0);\n+        localArray1 = pull(w2Client, 1);\n+        dim = localArray1.length;\n+    }\n+\n+    @Test\n+    public void testAbs()\n+            throws InvalidParameterException, InterruptedException, ExecutionException {\n+        UpdateFunc func = new Abs(w2Client.getMatrixId(), 1, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testAdd()\n+            throws InvalidParameterException, InterruptedException, ExecutionException {\n+        UpdateFunc func = new Add(w2Client.getMatrixId(), 0, 1, 3);\n+        w2Client.update(func).get();\n+\n+        double[] addResult = pull(w2Client, 3);\n+        assert (addResult.length == dim);\n+        for (int i = 0; i < addResult.length; i++) {\n+            Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testAddS()\n+            throws InvalidParameterException, InterruptedException, ExecutionException {\n+        UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n+        w2Client.update(func).get();\n+\n+        double[] addResult = pull(w2Client, 3);\n+        assert (addResult.length == dim);\n+        for (int i = 0; i < addResult.length; i++) {\n+            Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testAxpy() throws Exception {\n+        w2Client.update(new Fill(w2Client.getMatrixId(), 3, 1.0)).get();\n+        UpdateFunc func = new Axpy(w2Client.getMatrixId(), 0, 3, -2.0);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testCeil() throws Exception {\n+        UpdateFunc func = new Ceil(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testCopy() throws Exception {\n+        UpdateFunc func = new Copy(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i], delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testDiv() throws Exception {\n+        UpdateFunc func = new Div(w2Client.getMatrixId(), 1, 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testDivS() throws Exception {\n+        UpdateFunc func = new DivS(w2Client.getMatrixId(), 0, 3, -1.0);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testExp() throws Exception {\n-    UpdateFunc func = new Exp(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testExp() throws Exception {\n+        UpdateFunc func = new Exp(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testExpm1() throws Exception {\n+        UpdateFunc func = new Expm1(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testExpm1() throws Exception {\n-    UpdateFunc func = new Expm1(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testFill() throws Exception {\n+        UpdateFunc func = new Fill(w2Client.getMatrixId(), 3, -1.0);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], -1.0, delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testFill() throws Exception {\n-    UpdateFunc func = new Fill(w2Client.getMatrixId(), 3, -1.0);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testFloor() throws Exception {\n+        UpdateFunc func = new Floor(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], -1.0, delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testFloor() throws Exception {\n-    UpdateFunc func = new Floor(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testIncrement() throws Exception {\n+        UpdateFunc func = new Increment(w2Client.getMatrixId(), 3, localArray1);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testIncrement() throws Exception {\n-    UpdateFunc func = new Increment(w2Client.getMatrixId(), 3, localArray1);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testCompress() throws Exception {\n+\n+        UpdateFunc func = new CompressUpdateFunc(w2Client.getMatrixId(), 5, localArray1, 8);\n+        w2Client.update(func).get();\n+\n+        int maxPoint = (int) Math.pow(2, 8 - 1) - 1;\n+        double maxMaxAbs = 0.0;\n+        for (int i = 0; i < localArray1.length; i++) {\n+            maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]) : maxMaxAbs;\n+        }\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n+        double[] result = pull(w2Client, 5);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testCompress() throws Exception {\n+    @Test\n+    public void testLog() throws Exception {\n+        UpdateFunc func = new Log(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n \n-    UpdateFunc func = new CompressUpdateFunc(w2Client.getMatrixId(), 5, localArray1, 8);\n-    w2Client.update(func).get();\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testLog1p() throws Exception {\n+        UpdateFunc func = new Log1p(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n \n-    int maxPoint = (int) Math.pow(2, 8 - 1) - 1;\n-    double maxMaxAbs = 0.0;\n-    for (int i = 0; i < localArray1.length; i++) {\n-      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]): maxMaxAbs;\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n+        }\n     }\n \n-    double[] result = pull(w2Client, 5);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n+    @Test\n+    public void testLog10() throws Exception {\n+        UpdateFunc func = new Log10(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testLog() throws Exception {\n-    UpdateFunc func = new Log(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testMaxA() throws Exception {\n+        w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n+        UpdateFunc func = new MaxA(w2Client.getMatrixId(), 3, localArray1);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testLog1p() throws Exception {\n-    UpdateFunc func = new Log1p(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testMaxV() throws Exception {\n+        UpdateFunc func = new MaxV(w2Client.getMatrixId(), 0, 1, 3);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testLog10() throws Exception {\n-    UpdateFunc func = new Log10(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testMinA() throws Exception {\n+        w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n+        UpdateFunc func = new MinA(w2Client.getMatrixId(), 3, localArray1);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMaxA() throws Exception {\n-    w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n-    UpdateFunc func = new MaxA(w2Client.getMatrixId(), 3, localArray1);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testMinV() throws Exception {\n+        UpdateFunc func = new MinV(w2Client.getMatrixId(), 0, 1, 3);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testMul() throws Exception {\n+        UpdateFunc func = new Mul(w2Client.getMatrixId(), 0, 1, 3);\n+        w2Client.update(func).get();\n+\n+        double[] addResult = pull(w2Client, 3);\n+        assert (addResult.length == dim);\n+        for (int i = 0; i < addResult.length; i++) {\n+            Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMaxV() throws Exception {\n-    UpdateFunc func = new MaxV(w2Client.getMatrixId(), 0, 1, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testMulS() throws Exception {\n+        UpdateFunc func = new MulS(w2Client.getMatrixId(), 0, 3, -1.0);\n+        w2Client.update(func).get();\n+\n+        double[] addResult = pull(w2Client, 3);\n+        assert (addResult.length == dim);\n+        for (int i = 0; i < addResult.length; i++) {\n+            Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n+        }\n+    }\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n+    @Test\n+    public void testPow() throws Exception {\n+        UpdateFunc func = new Pow(w2Client.getMatrixId(), 0, 3, 3.0);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMinA() throws Exception {\n-    w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n-    UpdateFunc func = new MinA(w2Client.getMatrixId(), 3, localArray1);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testPut() throws Exception {\n+        UpdateFunc func = new Push(w2Client.getMatrixId(), 3, localArray0);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i], delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMinV() throws Exception {\n-    UpdateFunc func = new MinV(w2Client.getMatrixId(), 0, 1, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testRound() throws Exception {\n+        UpdateFunc func = new Round(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n \n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMul() throws Exception {\n-    UpdateFunc func = new Mul(w2Client.getMatrixId(), 0, 1, 3);\n-    w2Client.update(func).get();\n+    @Test\n+    public void testScale() throws Exception {\n+        w2Client.update(new Push(w2Client.getMatrixId(), 3, localArray0)).get();\n+        UpdateFunc func = new Scale(w2Client.getMatrixId(), 3, 2.0);\n+        w2Client.update(func).get();\n \n-    double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n-    for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testMulS() throws Exception {\n-    UpdateFunc func = new MulS(w2Client.getMatrixId(), 0, 3, -1.0);\n-    w2Client.update(func).get();\n-\n-    double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n-    for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n+    @Test\n+    public void testSignum() throws Exception {\n+        UpdateFunc func = new Signum(w2Client.getMatrixId(), 1, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n+        }\n     }\n-  }\n \n-  @Test\n-  public void testPow() throws Exception {\n-    UpdateFunc func = new Pow(w2Client.getMatrixId(), 0, 3, 3.0);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n-    }\n-  }\n+    @Test\n+    public void testSqrt() throws Exception {\n+        UpdateFunc func = new Sqrt(w2Client.getMatrixId(), 0, 3);\n+        w2Client.update(func).get();\n+\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n+        }\n+    }\n \n-  @Test\n-  public void testPut() throws Exception {\n-    UpdateFunc func = new Push(w2Client.getMatrixId(), 3, localArray0);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i], delta);\n-    }\n-  }\n+    @Test\n+    public void testSub() throws Exception {\n+        UpdateFunc func = new Sub(w2Client.getMatrixId(), 0, 1, 3);\n+        w2Client.update(func).get();\n \n-  @Test\n-  public void testRound() throws Exception {\n-    UpdateFunc func = new Round(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n-    }\n-  }\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n+        }\n+    }\n \n-  @Test\n-  public void testScale() throws Exception {\n-    w2Client.update(new Push(w2Client.getMatrixId(), 3, localArray0)).get();\n-    UpdateFunc func = new Scale(w2Client.getMatrixId(), 3, 2.0);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n-    }\n-  }\n+    @Test\n+    public void testSubS() throws Exception {\n+        UpdateFunc func = new SubS(w2Client.getMatrixId(), 0, 3, -1.1);\n+        w2Client.update(func).get();\n \n-  @Test\n-  public void testSignum() throws Exception {\n-    UpdateFunc func = new Signum(w2Client.getMatrixId(), 1, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n-    }\n-  }\n+        double[] result = pull(w2Client, 3);\n+        assert (result.length == dim);\n+        for (int i = 0; i < result.length; i++) {\n+            Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n+        }\n+    }\n \n-  @Test\n-  public void testSqrt() throws Exception {\n-    UpdateFunc func = new Sqrt(w2Client.getMatrixId(), 0, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n-    }\n-  }\n+    public void testBeyondPart() throws Exception {\n+        // in different part\n+        UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 9, 2.0);\n+        try {\n+            w2Client.update(func).get();\n+        } catch (Exception e) {\n+            System.out.println(\"test exception\" + e.getMessage());\n+        }\n+    }\n \n-  @Test\n-  public void testSub() throws Exception {\n-    UpdateFunc func = new Sub(w2Client.getMatrixId(), 0, 1, 3);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n-    }\n-  }\n+    private static void printMatrix(MatrixClient client, int rowId) {\n+        double[] arr = pull(client, rowId);\n+        System.out.println(Arrays.toString(arr));\n+    }\n \n-  @Test\n-  public void testSubS() throws Exception {\n-    UpdateFunc func = new SubS(w2Client.getMatrixId(), 0, 3, -1.1);\n-    w2Client.update(func).get();\n-\n-    double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n-    for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n-    }\n-  }\n \n-  public void testBeyondPart() throws Exception {\n-    // in different part\n-    UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 9, 2.0);\n-    try {\n-      w2Client.update(func).get();\n-    } catch (Exception e) {\n-      System.out.println(\"test exception\" + e.getMessage());\n+    private static double[] pull(MatrixClient client, int rowId) {\n+        GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n+        return ((DenseDoubleVector) rowResult.getRow()).getValues();\n     }\n-  }\n-\n-  private static void printMatrix(MatrixClient client, int rowId) {\n-    double[] arr = pull(client, rowId);\n-    System.out.println(Arrays.toString(arr));\n-  }\n \n-\n-  private static double[] pull(MatrixClient client, int rowId) {\n-    GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseDoubleVector)rowResult.getRow()).getValues();\n-  }\n-\n-  @AfterClass\n-  public static void stop() throws Exception{\n-    LocalClusterHelper.cleanup();\n-  }\n+    @AfterClass\n+    public static void stop() throws Exception {\n+        LocalClusterHelper.cleanup();\n+    }\n }\n",
            "diff_size": 459
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/347/UpdateFuncTest.java\nindex 28f4158f74..feee4bcc13 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/347/UpdateFuncTest.java\n@@ -64,7 +64,7 @@ public class UpdateFuncTest {\n \n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n@@ -472,7 +472,7 @@ public class UpdateFuncTest {\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/347/UpdateFuncTest.java\nindex 28f4158f74..9e6200bf57 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/347/UpdateFuncTest.java\n@@ -33,26 +33,23 @@ import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n-\n import java.util.Arrays;\n import java.util.concurrent.ExecutionException;\n \n public class UpdateFuncTest {\n-\n-  private static final org.apache.commons.logging.Log LOG = LogFactory.getLog(UpdateFuncTest.class);\n-\n-  private static MatrixClient w2Client = null;\n-  private static double[] localArray0 = null;\n-  private static double[] localArray1 = null;\n-  private static double delta = 1e-6;\n-  private static int dim = -1;\n-\n-  static {\n+    private static final org.apache.commons.logging.Log LOG = LogFactory.getLog(UpdateFuncTest.class);\n+    private static MatrixClient w2Client = null;\n+    private static double[] localArray0 = null;\n+    private static double[] localArray1 = null;\n+    private static double delta = 1e-6;\n+    private static int dim = -1;\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @BeforeClass\n-  public static void setup() throws Exception {\n+    @BeforeClass\n+    public static void setup() throws Exception {\n     LocalClusterHelper.setup();\n     w2Client = MatrixClientFactory.get(\"w2\", 0);\n     // row 0 is a random uniform\n@@ -61,418 +58,386 @@ public class UpdateFuncTest {\n     w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();\n     // row 2 is filled with 1.0\n     w2Client.update(new Fill(w2Client.getMatrixId(), 2, 1.0)).get();\n-\n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n-  }\n+    dim = localArray1.length;\n+    }\n \n-  @Test\n-  public void testAbs() throws InvalidParameterException, InterruptedException, ExecutionException {\n+    @Test\n+    public void testAbs() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Abs(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n+        Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testAdd() throws InvalidParameterException, InterruptedException, ExecutionException {\n+    @Test\n+    public void testAdd() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Add(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n+        Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n+    @Test\n+    public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n+        Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testAxpy() throws Exception {\n+    @Test\n+    public void testAxpy() throws Exception {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 1.0)).get();\n     UpdateFunc func = new Axpy(w2Client.getMatrixId(), 0, 3, -2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n+        Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testCeil() throws Exception {\n+    @Test\n+    public void testCeil() throws Exception {\n     UpdateFunc func = new Ceil(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testCopy() throws Exception {\n+    @Test\n+    public void testCopy() throws Exception {\n     UpdateFunc func = new Copy(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i], delta);\n+        Assert.assertEquals(result[i], localArray0[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testDiv() throws Exception {\n+    @Test\n+    public void testDiv() throws Exception {\n     UpdateFunc func = new Div(w2Client.getMatrixId(), 1, 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n+        Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testDivS() throws Exception {\n+    @Test\n+    public void testDivS() throws Exception {\n     UpdateFunc func = new DivS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n+        Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testExp() throws Exception {\n+    @Test\n+    public void testExp() throws Exception {\n     UpdateFunc func = new Exp(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testExpm1() throws Exception {\n+    @Test\n+    public void testExpm1() throws Exception {\n     UpdateFunc func = new Expm1(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testFill() throws Exception {\n+    @Test\n+    public void testFill() throws Exception {\n     UpdateFunc func = new Fill(w2Client.getMatrixId(), 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], -1.0, delta);\n+        Assert.assertEquals(result[i], -1.0, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testFloor() throws Exception {\n+    @Test\n+    public void testFloor() throws Exception {\n     UpdateFunc func = new Floor(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testIncrement() throws Exception {\n+    @Test\n+    public void testIncrement() throws Exception {\n     UpdateFunc func = new Increment(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n+        Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n+    }\n     }\n-  }\n-\n-  @Test\n-  public void testCompress() throws Exception {\n \n+    @Test\n+    public void testCompress() throws Exception {\n     UpdateFunc func = new CompressUpdateFunc(w2Client.getMatrixId(), 5, localArray1, 8);\n     w2Client.update(func).get();\n \n     int maxPoint = (int) Math.pow(2, 8 - 1) - 1;\n     double maxMaxAbs = 0.0;\n     for (int i = 0; i < localArray1.length; i++) {\n-      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]): maxMaxAbs;\n+        maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]) : maxMaxAbs;\n     }\n \n     double[] result = pull(w2Client, 5);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n+        Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testLog() throws Exception {\n+    @Test\n+    public void testLog() throws Exception {\n     UpdateFunc func = new Log(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testLog1p() throws Exception {\n+    @Test\n+    public void testLog1p() throws Exception {\n     UpdateFunc func = new Log1p(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testLog10() throws Exception {\n+    @Test\n+    public void testLog10() throws Exception {\n     UpdateFunc func = new Log10(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMaxA() throws Exception {\n+    @Test\n+    public void testMaxA() throws Exception {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MaxA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n+        Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMaxV() throws Exception {\n+    @Test\n+    public void testMaxV() throws Exception {\n     UpdateFunc func = new MaxV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMinA() throws Exception {\n+    @Test\n+    public void testMinA() throws Exception {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MinA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n+        Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMinV() throws Exception {\n+    @Test\n+    public void testMinV() throws Exception {\n     UpdateFunc func = new MinV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMul() throws Exception {\n+    @Test\n+    public void testMul() throws Exception {\n     UpdateFunc func = new Mul(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n+        Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testMulS() throws Exception {\n+    @Test\n+    public void testMulS() throws Exception {\n     UpdateFunc func = new MulS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n-      Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n+        Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testPow() throws Exception {\n+    @Test\n+    public void testPow() throws Exception {\n     UpdateFunc func = new Pow(w2Client.getMatrixId(), 0, 3, 3.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n+        Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testPut() throws Exception {\n+    @Test\n+    public void testPut() throws Exception {\n     UpdateFunc func = new Push(w2Client.getMatrixId(), 3, localArray0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i], delta);\n+        Assert.assertEquals(result[i], localArray0[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testRound() throws Exception {\n+    @Test\n+    public void testRound() throws Exception {\n     UpdateFunc func = new Round(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testScale() throws Exception {\n+    @Test\n+    public void testScale() throws Exception {\n     w2Client.update(new Push(w2Client.getMatrixId(), 3, localArray0)).get();\n     UpdateFunc func = new Scale(w2Client.getMatrixId(), 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n+        Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testSignum() throws Exception {\n+    @Test\n+    public void testSignum() throws Exception {\n     UpdateFunc func = new Signum(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n+        Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testSqrt() throws Exception {\n+    @Test\n+    public void testSqrt() throws Exception {\n     UpdateFunc func = new Sqrt(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n+        Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testSub() throws Exception {\n+    @Test\n+    public void testSub() throws Exception {\n     UpdateFunc func = new Sub(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n+        Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testSubS() throws Exception {\n+    @Test\n+    public void testSubS() throws Exception {\n     UpdateFunc func = new SubS(w2Client.getMatrixId(), 0, 3, -1.1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n-      Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n+        Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n+    }\n     }\n-  }\n \n-  public void testBeyondPart() throws Exception {\n+    public void testBeyondPart() throws Exception {\n     // in different part\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 9, 2.0);\n     try {\n-      w2Client.update(func).get();\n+        w2Client.update(func).get();\n     } catch (Exception e) {\n       System.out.println(\"test exception\" + e.getMessage());\n     }\n-  }\n+    }\n \n-  private static void printMatrix(MatrixClient client, int rowId) {\n+    private static void printMatrix(MatrixClient client, int rowId) {\n     double[] arr = pull(client, rowId);\n     System.out.println(Arrays.toString(arr));\n-  }\n-\n+    }\n \n-  private static double[] pull(MatrixClient client, int rowId) {\n+    private static double[] pull(MatrixClient client, int rowId) {\n     GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseDoubleVector)rowResult.getRow()).getValues();\n-  }\n+    return ((DenseDoubleVector) rowResult.getRow()).getValues();\n+    }\n \n-  @AfterClass\n-  public static void stop() throws Exception{\n+    @AfterClass\n+    public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 251
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/347/UpdateFuncTest.java\nindex 28f4158f74..9ac7bb8c18 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/347/UpdateFuncTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/347/UpdateFuncTest.java\n@@ -91,8 +91,7 @@ public class UpdateFuncTest {\n     }\n   }\n \n-  @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n+  @Test public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n \n",
            "diff_size": 2
        }
    ]
}