{
    "error_id": "149",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.assembler;\n\nimport com.google.common.reflect.TypeToken;\nimport com.google.inject.Key;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/149/DefaultAssemblerCollector.java\nindex b762aae4c4..b0637163a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/149/DefaultAssemblerCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.common.reflect.TypeToken;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/149/DefaultAssemblerCollector.java\nindex b762aae4c4..a46d8d21b7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/149/DefaultAssemblerCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.common.reflect.TypeToken;\n@@ -35,7 +36,7 @@ class DefaultAssemblerCollector {\n     private final Collection<Class<? extends Assembler>> defaultAssemblersClasses;\n \n     DefaultAssemblerCollector(Application application, Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n+                              Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n         this.application = application;\n         this.bindings = bindings;\n         this.defaultAssemblersClasses = defaultAssemblersClasses;\n@@ -60,7 +61,7 @@ class DefaultAssemblerCollector {\n             DtoOf dtoOf = dtoClass.getAnnotation(DtoOf.class);\n             if (dtoOf != null) {\n                 if (dtoOf.value().length == 1) {\n-                    Type[] params = new Type[]{dtoOf.value()[0], dtoClass};\n+                    Type[] params = new Type[] {dtoOf.value()[0], dtoClass};\n                     autoAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(\n                             bindings,\n                             application.getConfiguration(dtoClass),\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'DEFAULT_ASSEMBLER_KEY' has incorrect indentation level 8, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "column": "48",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'DEFAULT_ASSEMBLER_KEY' has incorrect indentation level 8, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/149/DefaultAssemblerCollector.java\nindex b762aae4c4..436af0fb5b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/149/DefaultAssemblerCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.common.reflect.TypeToken;\n@@ -34,9 +35,8 @@ class DefaultAssemblerCollector {\n     private final Map<Key<?>, Class<?>> bindings;\n     private final Collection<Class<? extends Assembler>> defaultAssemblersClasses;\n \n-    DefaultAssemblerCollector(Application application, Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n-        this.application = application;\n+    DefaultAssemblerCollector(Application application, Map<Key<?>, Class<?>> bindings, Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n+    this.application = application;\n         this.bindings = bindings;\n         this.defaultAssemblersClasses = defaultAssemblersClasses;\n     }\n@@ -61,22 +61,12 @@ class DefaultAssemblerCollector {\n             if (dtoOf != null) {\n                 if (dtoOf.value().length == 1) {\n                     Type[] params = new Type[]{dtoOf.value()[0], dtoClass};\n-                    autoAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(\n-                            bindings,\n-                            application.getConfiguration(dtoClass),\n-                            DEFAULT_ASSEMBLER_KEY,\n-                            dtoClass,\n-                            TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))\n-                    ).orElse(null));\n-                } else if (dtoOf.value().length > 1) {\n+                    autoAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(bindings, application.getConfiguration(dtoClass),\n+        DEFAULT_ASSEMBLER_KEY, dtoClass, TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))).orElse(null));\n+                } else if (dtoOf.value().length> 1) {\n                     Type[] params = {Tuples.typeOfTuple(dtoOf.value()), dtoClass};\n-                    autoTupleAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(\n-                            bindings,\n-                            application.getConfiguration(dtoClass),\n-                            DEFAULT_ASSEMBLER_KEY,\n-                            dtoClass,\n-                            TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))\n-                    ).orElse(null));\n+                    autoTupleAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(bindings, application.getConfiguration(dtoClass),\n+        DEFAULT_ASSEMBLER_KEY, dtoClass, TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))).orElse(null));\n                 }\n             }\n         }\n@@ -88,15 +78,12 @@ class DefaultAssemblerCollector {\n             Class<?> aggregateType = TypeToken.of(defaultAssemblersClass)\n                     .resolveType(defaultAssemblersClass.getTypeParameters()[0])\n                     .getRawType();\n-\n-            if (aggregateType.isAssignableFrom(Tuple.class) && !autoTupleAssemblerGenerics.isEmpty()) {\n-                bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass,\n-                        autoTupleAssemblerGenerics));\n-\n-            } else if (!aggregateType.isAssignableFrom(Tuple.class) && !autoAssemblerGenerics.isEmpty()) {\n+if (aggregateType.isAssignableFrom(Tuple.class) && !autoTupleAssemblerGenerics.isEmpty()) {\n+                bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass, autoTupleAssemblerGenerics));\n+    } else if (!aggregateType.isAssignableFrom(Tuple.class) && !autoAssemblerGenerics.isEmpty()) {\n                 bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass, autoAssemblerGenerics));\n             }\n         }\n         return bs;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'application' has incorrect indentation level 24, expected level should be 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 27, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 27, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'application' has incorrect indentation level 31, expected level should be 35.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/149/DefaultAssemblerCollector.java\nindex b762aae4c4..532851b673 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/149/DefaultAssemblerCollector.java\n@@ -28,14 +28,17 @@ import org.seedstack.seed.core.internal.guice.GenericBindingStrategy;\n /**\n  * Collects the binding strategies for default assemblers.\n  */\n+\n+\n class DefaultAssemblerCollector {\n+\n     private static final String DEFAULT_ASSEMBLER_KEY = \"defaultAssembler\";\n     private final Application application;\n     private final Map<Key<?>, Class<?>> bindings;\n     private final Collection<Class<? extends Assembler>> defaultAssemblersClasses;\n \n-    DefaultAssemblerCollector(Application application, Map<Key<?>, Class<?>> bindings,\n-            Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n+\n+    DefaultAssemblerCollector(Application application, Map<Key<?>, Class<?>> bindings, Collection<Class<? extends Assembler>> defaultAssemblersClasses) {\n         this.application = application;\n         this.bindings = bindings;\n         this.defaultAssemblersClasses = defaultAssemblersClasses;\n@@ -49,54 +52,47 @@ class DefaultAssemblerCollector {\n      * @return collection of default assembler binding strategies\n      * @}DtoOf.\n      */\n+\n     Collection<BindingStrategy> collect(Collection<Class<?>> dtoClasses) {\n         // Contains pairs of aggregateClass/dtoClass\n-        Map<Type[], Key<?>> autoAssemblerGenerics = new HashMap<>();\n+        Map<Type [], Key<?>> autoAssemblerGenerics = new HashMap<>();\n         // Contains pairs of aggregateTuple/dtoClass\n-        Map<Type[], Key<?>> autoTupleAssemblerGenerics = new HashMap<>();\n+\n+        Map<Type [], Key<?>> autoTupleAssemblerGenerics = new HashMap<>();\n \n         // Extract pair of aggregateClass/dtoClass\n-        for (Class<?> dtoClass : dtoClasses) {\n+        for(Class<?> dtoClass : dtoClasses) {\n             DtoOf dtoOf = dtoClass.getAnnotation(DtoOf.class);\n             if (dtoOf != null) {\n                 if (dtoOf.value().length == 1) {\n-                    Type[] params = new Type[]{dtoOf.value()[0], dtoClass};\n-                    autoAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(\n-                            bindings,\n-                            application.getConfiguration(dtoClass),\n+                    Type[] params = new Type [] {dtoOf.value()[0], dtoClass};\n+                    autoAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(bindings,\n+                        application.getConfiguration(dtoClass),\n                             DEFAULT_ASSEMBLER_KEY,\n-                            dtoClass,\n-                            TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))\n-                    ).orElse(null));\n+                                dtoClass,\n+                                    TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))).orElse(null));\n                 } else if (dtoOf.value().length > 1) {\n-                    Type[] params = {Tuples.typeOfTuple(dtoOf.value()), dtoClass};\n-                    autoTupleAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(\n-                            bindings,\n-                            application.getConfiguration(dtoClass),\n-                            DEFAULT_ASSEMBLER_KEY,\n-                            dtoClass,\n-                            TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))\n-                    ).orElse(null));\n-                }\n+                           Type[] params = {Tuples.typeOfTuple(dtoOf.value()), dtoClass};\n+                           autoTupleAssemblerGenerics.put(params, BusinessUtils.resolveDefaultQualifier(bindings,\n+                               application.getConfiguration(dtoClass),\n+                                   DEFAULT_ASSEMBLER_KEY,\n+                                       dtoClass,\n+                                           TypeLiteral.get(Types.newParameterizedType(Assembler.class, params))).orElse(null));\n+                       }\n             }\n         }\n-\n         Collection<BindingStrategy> bs = new ArrayList<>();\n         // Each pairs of aggregateClass/dtoClass or aggregateTuple/dtoClass is bind to all the\n         // default assemblers\n-        for (Class<? extends Assembler> defaultAssemblersClass : defaultAssemblersClasses) {\n-            Class<?> aggregateType = TypeToken.of(defaultAssemblersClass)\n-                    .resolveType(defaultAssemblersClass.getTypeParameters()[0])\n-                    .getRawType();\n-\n-            if (aggregateType.isAssignableFrom(Tuple.class) && !autoTupleAssemblerGenerics.isEmpty()) {\n-                bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass,\n-                        autoTupleAssemblerGenerics));\n-\n-            } else if (!aggregateType.isAssignableFrom(Tuple.class) && !autoAssemblerGenerics.isEmpty()) {\n-                bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass, autoAssemblerGenerics));\n-            }\n+        for(Class<? extends Assembler> defaultAssemblersClass : defaultAssemblersClasses) {\n+            Class<?> aggregateType = TypeToken.of(defaultAssemblersClass).resolveType(defaultAssemblersClass.getTypeParameters()[0])\n+.getRawType();\n+            if (aggregateType.isAssignableFrom(Tuple.class) && ! autoTupleAssemblerGenerics.isEmpty()) {\n+                bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass, autoTupleAssemblerGenerics));\n+            } else if (! aggregateType.isAssignableFrom(Tuple.class) && ! autoAssemblerGenerics.isEmpty()) {\n+                       bs.add(new GenericBindingStrategy<>(Assembler.class, defaultAssemblersClass, autoAssemblerGenerics));\n+                   }\n         }\n         return bs;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/149/DefaultAssemblerCollector.java\nindex b762aae4c4..b0637163a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/149/DefaultAssemblerCollector.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/149/DefaultAssemblerCollector.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler;\n \n import com.google.common.reflect.TypeToken;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}