{
    "error_id": "192",
    "information": {
        "errors": [
            {
                "line": "113",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @SuppressWarnings(\"unchecked\")\n  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n      Type type) {\n    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/192/SwaggerGeneratorUtils.java\nindex 4d8e1361ba..0f9ef14ca3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/192/SwaggerGeneratorUtils.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.generator;\n \n import java.lang.annotation.Annotation;\n@@ -210,7 +211,8 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+                                                             Map<String, List<Annotation>> methodAnnotationMap,\n+                                                             String parameterName) {\n     List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n     if (methodAnnotations == null) {\n       methodAnnotations = Collections.emptyList();\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/192/SwaggerGeneratorUtils.java\nindex 4d8e1361ba..90d2da10c2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/192/SwaggerGeneratorUtils.java\n@@ -112,7 +112,7 @@ public final class SwaggerGeneratorUtils {\n   @SuppressWarnings(\"unchecked\")\n   public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n       Type type) {\n-    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n+  return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n   public static ResponseTypeProcessor findResponseTypeProcessor(Type type) {\n@@ -179,7 +179,7 @@ public final class SwaggerGeneratorUtils {\n     }\n \n     String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n+    + \"solution:\\n\"\n             + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n             + \"    <plugin>\\n\"\n             + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n@@ -245,4 +245,4 @@ public final class SwaggerGeneratorUtils {\n \n     return processor.getHttpParameterType(parameterAnnotation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "113",
                    "column": "36",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "113",
                    "column": "47",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "113",
                    "column": "65",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "113",
                    "column": "84",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "113",
                    "column": "86",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "114",
                    "column": "31",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/192/SwaggerGeneratorUtils.java\nindex 4d8e1361ba..7d4bd19aaa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/192/SwaggerGeneratorUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/192/SwaggerGeneratorUtils.java\n@@ -110,139 +110,139 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n-    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n+  public static <SWAGGER_PARAMETER,ANNOTATION>ParameterProcessor <SWAGGER_PARAMETER ,ANNOTATION>\n+      findParameterProcessors (Type type) {\n+ return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n+}\n+\n+public static ResponseTypeProcessor findResponseTypeProcessor(Type type) {\n+  ResponseTypeProcessor processor = responseTypeProcessors.get(type);\n+  if (processor != null) {\n+    return processor;\n   }\n \n-  public static ResponseTypeProcessor findResponseTypeProcessor(Type type) {\n-    ResponseTypeProcessor processor = responseTypeProcessors.get(type);\n-    if (processor != null) {\n-      return processor;\n-    }\n+  if (type instanceof ParameterizedType) {\n+    return responseTypeProcessors.getOrDefault(((ParameterizedType) type).getRawType(), defaultResponseTypeProcessor);\n+  }\n \n-    if (type instanceof ParameterizedType) {\n-      return responseTypeProcessors.getOrDefault(((ParameterizedType) type).getRawType(), defaultResponseTypeProcessor);\n-    }\n+  return defaultResponseTypeProcessor;\n+}\n \n-    return defaultResponseTypeProcessor;\n-  }\n+public static boolean isContextParameter(Type type) {\n+  return contextTypes.contains(type);\n+}\n \n-  public static boolean isContextParameter(Type type) {\n-    return contextTypes.contains(type);\n+public static Annotation[] collectAnnotations(BeanPropertyDefinition propertyDefinition) {\n+  List<Annotation> annotations = new ArrayList<>();\n+  if (propertyDefinition.getField() != null) {\n+    Collections.addAll(annotations, propertyDefinition.getField().getAnnotated().getAnnotations());\n   }\n-\n-  public static Annotation[] collectAnnotations(BeanPropertyDefinition propertyDefinition) {\n-    List<Annotation> annotations = new ArrayList<>();\n-    if (propertyDefinition.getField() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getField().getAnnotated().getAnnotations());\n-    }\n-    if (propertyDefinition.getGetter() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getGetter().getAnnotated().getAnnotations());\n-    }\n-    if (propertyDefinition.getSetter() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getSetter().getAnnotated().getAnnotations());\n-    }\n-    return annotations.toArray(new Annotation[annotations.size()]);\n+  if (propertyDefinition.getGetter() != null) {\n+    Collections.addAll(annotations, propertyDefinition.getGetter().getAnnotated().getAnnotations());\n   }\n-\n-  public static String collectParameterName(java.lang.reflect.Parameter methodParameter) {\n-    return collectParameterName(methodParameter.getDeclaringExecutable(), methodParameter.getAnnotations(),\n-        methodParameter.isNamePresent() ? methodParameter.getName() : null);\n+  if (propertyDefinition.getSetter() != null) {\n+    Collections.addAll(annotations, propertyDefinition.getSetter().getAnnotated().getAnnotations());\n   }\n+  return annotations.toArray(new Annotation[annotations.size()]);\n+}\n \n-  public static String collectParameterName(Method method, BeanPropertyDefinition propertyDefinition) {\n-    Annotation[] annotations = collectAnnotations(propertyDefinition);\n-    return collectParameterName(method, annotations, propertyDefinition.getName());\n-  }\n+public static String collectParameterName(java.lang.reflect.Parameter methodParameter) {\n+  return collectParameterName(methodParameter.getDeclaringExecutable(), methodParameter.getAnnotations(),\n+      methodParameter.isNamePresent() ? methodParameter.getName() : null);\n+}\n \n-  public static String collectParameterName(Executable executable, Annotation[] annotations, String defaultName) {\n-    // 1.annotations\n-    //   it's ambiguous to use different name in different annotation\n-    //   so we only read the first available name\n-    for (Annotation annotation : annotations) {\n-      ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(annotation.annotationType());\n-      if (processor == null) {\n-        continue;\n-      }\n+public static String collectParameterName(Method method, BeanPropertyDefinition propertyDefinition) {\n+  Annotation[] annotations = collectAnnotations(propertyDefinition);\n+  return collectParameterName(method, annotations, propertyDefinition.getName());\n+}\n \n-      String name = processor.getParameterName(annotation);\n-      if (StringUtils.isNotEmpty(name)) {\n-        return name;\n-      }\n+public static String collectParameterName(Executable executable, Annotation[] annotations, String defaultName) {\n+  // 1.annotations\n+  //   it's ambiguous to use different name in different annotation\n+  //   so we only read the first available name\n+  for (Annotation annotation : annotations) {\n+    ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(annotation.annotationType());\n+    if (processor == null) {\n+      continue;\n     }\n \n-    // 2.use signature name\n-    // ensure present parameter name\n-    if (StringUtils.isNotEmpty(defaultName)) {\n-      return defaultName;\n+    String name = processor.getParameterName(annotation);\n+    if (StringUtils.isNotEmpty(name)) {\n+      return name;\n     }\n+  }\n \n-    String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n-            + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n-            + \"    <plugin>\\n\"\n-            + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n-            + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\"\n-            + \"      <configuration>\\n\"\n-            + \"        <compilerArgument>-parameters</compilerArgument>\\n\"\n-            + \"      </configuration>\\n\"\n-            + \"    </plugin>\",\n-        executable.getDeclaringClass().getName(), executable.getName());\n-    throw new IllegalStateException(msg);\n+  // 2.use signature name\n+  // ensure present parameter name\n+  if (StringUtils.isNotEmpty(defaultName)) {\n+    return defaultName;\n   }\n \n-  public static Type collectGenericType(List<Annotation> annotations, Type defaultType) {\n-    Type genericType = null;\n-    for (Annotation annotation : annotations) {\n-      ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(annotation.annotationType());\n-      if (processor == null) {\n-        continue;\n-      }\n+  String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n+          + \"solution:\\n\"\n+          + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n+          + \"    <plugin>\\n\"\n+          + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n+          + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\"\n+          + \"      <configuration>\\n\"\n+          + \"        <compilerArgument>-parameters</compilerArgument>\\n\"\n+          + \"      </configuration>\\n\"\n+          + \"    </plugin>\",\n+      executable.getDeclaringClass().getName(), executable.getName());\n+  throw new IllegalStateException(msg);\n+}\n \n-      Type type = processor.getGenericType(annotation);\n-      if (type != null) {\n-        genericType = type;\n-      }\n+public static Type collectGenericType(List<Annotation> annotations, Type defaultType) {\n+  Type genericType = null;\n+  for (Annotation annotation : annotations) {\n+    ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(annotation.annotationType());\n+    if (processor == null) {\n+      continue;\n     }\n \n-    return genericType != null ? genericType : defaultType;\n-  }\n-\n-  public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n-    List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n-    if (methodAnnotations == null) {\n-      methodAnnotations = Collections.emptyList();\n+    Type type = processor.getGenericType(annotation);\n+    if (type != null) {\n+      genericType = type;\n     }\n+  }\n \n-    List<Annotation> annotations = new ArrayList<>();\n-    Collections.addAll(annotations, parameterAnnotations);\n-    annotations.addAll(methodAnnotations);\n+  return genericType != null ? genericType : defaultType;\n+}\n \n-    return annotations;\n+public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n+    Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+  List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n+  if (methodAnnotations == null) {\n+    methodAnnotations = Collections.emptyList();\n   }\n \n-  public static HttpParameterType collectHttpParameterType(List<Annotation> annotations, Type genericType) {\n-    // use the last available type\n-    for (int idx = annotations.size() - 1; idx >= 0; idx--) {\n-      Annotation annotation = annotations.get(idx);\n-      HttpParameterType httpParameterType = collectHttpParameterType(annotation, annotation.annotationType());\n-      if (httpParameterType != null) {\n-        return httpParameterType;\n-      }\n-    }\n+  List<Annotation> annotations = new ArrayList<>();\n+  Collections.addAll(annotations, parameterAnnotations);\n+  annotations.addAll(methodAnnotations);\n \n-    // try by parameter type\n-    return collectHttpParameterType((Annotation) null, genericType);\n-  }\n+  return annotations;\n+}\n \n-  private static HttpParameterType collectHttpParameterType(Annotation parameterAnnotation, Type type) {\n-    ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(type);\n-    if (processor == null) {\n-      return null;\n+public static HttpParameterType collectHttpParameterType(List<Annotation> annotations, Type genericType) {\n+  // use the last available type\n+  for (int idx = annotations.size() - 1; idx >= 0; idx--) {\n+    Annotation annotation = annotations.get(idx);\n+    HttpParameterType httpParameterType = collectHttpParameterType(annotation, annotation.annotationType());\n+    if (httpParameterType != null) {\n+      return httpParameterType;\n     }\n+  }\n \n-    return processor.getHttpParameterType(parameterAnnotation);\n+  // try by parameter type\n+  return collectHttpParameterType((Annotation) null, genericType);\n+}\n+\n+private static HttpParameterType collectHttpParameterType(Annotation parameterAnnotation, Type type) {\n+  ParameterProcessor<Parameter, Annotation> processor = findParameterProcessors(type);\n+  if (processor == null) {\n+    return null;\n   }\n+\n+  return processor.getHttpParameterType(parameterAnnotation);\n+}\n }\n",
            "diff_size": 148
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}