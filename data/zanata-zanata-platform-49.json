{
    "error_id": "49",
    "information": {
        "errors": [
            {
                "line": "117",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                        \"from HAccount as a where lower(a.username) like lower(:username)\");\n        query.setParameter(\"username\", userName);\n        if(maxResults > 0) {\n            query.setMaxResults(maxResults);\n        }\n        query.setFirstResult(firstResult);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/49/AccountDAO.java\nindex b39c06efa2..f793932ace 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/49/AccountDAO.java\n@@ -114,7 +114,7 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n                 getSession().createQuery(\n                         \"from HAccount as a where lower(a.username) like lower(:username)\");\n         query.setParameter(\"username\", userName);\n-        if(maxResults > 0) {\n+        if (maxResults > 0) {\n             query.setMaxResults(maxResults);\n         }\n         query.setFirstResult(firstResult);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/49/AccountDAO.java\nindex b39c06efa2..70de3d52b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/49/AccountDAO.java\n@@ -1,16 +1,17 @@\n /**\n  * Copyright (c) 2010 Red Hat, Inc.\n- *\n+ * <p>\n  * This software is licensed to you under the GNU General Public License,\n  * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n  * implied, including the implied warranties of MERCHANTABILITY or FITNESS FOR A\n  * PARTICULAR PURPOSE. You should have received a copy of GPLv2 along with this\n  * software; if not, see http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n+ * <p>\n  * Red Hat trademarks are not licensed under GPLv2. No permission is granted to\n  * use or replicate Red Hat trademarks that are incorporated in this software or\n  * its documentation.\n  */\n+\n package org.zanata.dao;\n \n import java.security.SecureRandom;\n@@ -42,7 +43,8 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n         super(HAccount.class, session);\n     }\n \n-    public @Nullable HAccount getEnabledByUsername(String username) {\n+    public @Nullable\n+    HAccount getEnabledByUsername(String username) {\n         Criteria cr = getSession().createCriteria(HAccount.class);\n         cr.add(Restrictions.eq(\"username\", username));\n         cr.add(Restrictions.eq(\"enabled\", true));\n@@ -50,7 +52,8 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n         return (HAccount) cr.uniqueResult();\n     }\n \n-    public @Nullable HAccount getByUsername(String username) {\n+    public @Nullable\n+    HAccount getByUsername(String username) {\n         Criteria cr = getSession().createCriteria(HAccount.class);\n         cr.add(Restrictions.eq(\"username\", username));\n         cr.setCacheRegion(REGION).setCacheable(true).setComment(\"AccountDAO.getByUsername\");\n@@ -71,15 +74,15 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n \n     public HAccount getByUsernameAndEmail(String username, String email) {\n         return (HAccount) getSession()\n-                .createQuery(\n-                        \"from HAccount acc where acc.username = :username and acc.person.email = :email\")\n-                .setString(\"username\", username).setString(\"email\", email)\n-                .setComment(\"AccountDAO.getByUsernameAndEmail\").uniqueResult();\n+            .createQuery(\n+                \"from HAccount acc where acc.username = :username and acc.person.email = :email\")\n+            .setString(\"username\", username).setString(\"email\", email)\n+            .setComment(\"AccountDAO.getByUsernameAndEmail\").uniqueResult();\n     }\n \n     public HAccount getByApiKey(String apikey) {\n         return (HAccount) getSession().createCriteria(HAccount.class)\n-                .add(Restrictions.eq(\"apiKey\", apikey)).uniqueResult();\n+            .add(Restrictions.eq(\"apiKey\", apikey)).uniqueResult();\n     }\n \n     public void createApiKey(HAccount account) {\n@@ -108,13 +111,13 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n \n     // TODO: use hibernate search\n     public List<HAccount> searchQuery(String searchQuery, int maxResults,\n-            int firstResult) {\n+                                      int firstResult) {\n         String userName = \"%\" + searchQuery + \"%\";\n         Query query =\n-                getSession().createQuery(\n-                        \"from HAccount as a where lower(a.username) like lower(:username)\");\n+            getSession().createQuery(\n+                \"from HAccount as a where lower(a.username) like lower(:username)\");\n         query.setParameter(\"username\", userName);\n-        if(maxResults > 0) {\n+        if (maxResults > 0) {\n             query.setMaxResults(maxResults);\n         }\n         query.setFirstResult(firstResult);\n@@ -126,10 +129,10 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n \n     public List<String> getUserNames(String filter, int offset, int maxResults) {\n         Query query = createFilteredQuery(\n-                \"select distinct acc.username from HAccount acc \", filter)\n-                .setMaxResults(maxResults)\n-                .setFirstResult(offset)\n-                .setComment(\"accountDAO.getUserNames\");\n+            \"select distinct acc.username from HAccount acc \", filter)\n+            .setMaxResults(maxResults)\n+            .setFirstResult(offset)\n+            .setComment(\"accountDAO.getUserNames\");\n         @SuppressWarnings(\"unchecked\")\n         List<String> list = query.list();\n         return list;\n@@ -137,17 +140,17 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n \n     public int getUserCount(String filter) {\n         return ((Long) createFilteredQuery(\n-                \"select count(*) from HAccount acc \", filter)\n-                .setComment(\"accountDAO.getUserCount\").uniqueResult())\n-                .intValue();\n+            \"select count(*) from HAccount acc \", filter)\n+            .setComment(\"accountDAO.getUserCount\").uniqueResult())\n+            .intValue();\n     }\n \n     private Query createFilteredQuery(String queryBase, String filter) {\n         if (!StringUtils.isEmpty(filter)) {\n             queryBase += \"inner join acc.person as person \" +\n-                    \"where lower(acc.username) like :filter \" +\n-                    \"OR lower(person.email) like :filter \" +\n-                    \"OR lower(person.name) like :filter\";\n+                \"where lower(acc.username) like :filter \" +\n+                \"OR lower(person.email) like :filter \" +\n+                \"OR lower(person.name) like :filter\";\n         }\n         Query query = getSession().createQuery(queryBase).setCacheable(true);\n         if (!StringUtils.isEmpty(filter)) {\n@@ -158,9 +161,9 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n \n     public HAccount getByCredentialsId(String credentialsId) {\n         Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select c.account from HCredentials c where c.user = :id\");\n+            getSession()\n+                .createQuery(\n+                    \"select c.account from HCredentials c where c.user = :id\");\n         query.setParameter(\"id\", credentialsId);\n         query.setComment(\"AccountDAO.getByCredentialsId\");\n         return (HAccount) query.uniqueResult();\n@@ -176,8 +179,8 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n      */\n     public List<HAccount> getAllMergedAccounts(HAccount mergedInto) {\n         Query query =\n-                getSession().createQuery(\n-                        \"from HAccount as a where a.mergedInto = :mergedInto\");\n+            getSession().createQuery(\n+                \"from HAccount as a where a.mergedInto = :mergedInto\");\n         query.setParameter(\"mergedInto\", mergedInto);\n         query.setComment(\"AccountDAO.getAllMergedAccounts\");\n         @SuppressWarnings(\"unchecked\")\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/49/AccountDAO.java\nindex b39c06efa2..70a1034092 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/49/AccountDAO.java\n@@ -16,19 +16,18 @@ package org.zanata.dao;\n import java.security.SecureRandom;\n import java.util.List;\n import java.util.Optional;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.hibernate.Criteria;\n import org.hibernate.Query;\n import org.hibernate.Session;\n import org.hibernate.criterion.Restrictions;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.enterprise.context.RequestScoped;\n import org.zanata.model.HAccount;\n import org.zanata.util.PasswordUtil;\n \n+\n @RequestScoped\n public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n     public static final String REGION = \"Account\";\n@@ -42,7 +41,8 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n         super(HAccount.class, session);\n     }\n \n-    public @Nullable HAccount getEnabledByUsername(String username) {\n+    public @Nullable\n+    HAccount getEnabledByUsername(String username) {\n         Criteria cr = getSession().createCriteria(HAccount.class);\n         cr.add(Restrictions.eq(\"username\", username));\n         cr.add(Restrictions.eq(\"enabled\", true));\n@@ -50,7 +50,8 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n         return (HAccount) cr.uniqueResult();\n     }\n \n-    public @Nullable HAccount getByUsername(String username) {\n+    public @Nullable\n+    HAccount getByUsername(String username) {\n         Criteria cr = getSession().createCriteria(HAccount.class);\n         cr.add(Restrictions.eq(\"username\", username));\n         cr.setCacheRegion(REGION).setCacheable(true).setComment(\"AccountDAO.getByUsername\");\n@@ -62,24 +63,24 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n     }\n \n     public HAccount getByEmail(String email) {\n-        return (HAccount) getSession()\n-            .createQuery(\n-                \"from HAccount acc where acc.person.email = :email\")\n-            .setString(\"email\", email)\n-            .setComment(\"AccountDAO.getByEmail\").uniqueResult();\n+        return (HAccount) getSession().createQuery(\"from HAccount acc where acc.person.email = :email\")\n+                                      .setString(\"email\", email)\n+                                      .setComment(\"AccountDAO.getByEmail\")\n+                                      .uniqueResult();\n     }\n \n     public HAccount getByUsernameAndEmail(String username, String email) {\n-        return (HAccount) getSession()\n-                .createQuery(\n-                        \"from HAccount acc where acc.username = :username and acc.person.email = :email\")\n-                .setString(\"username\", username).setString(\"email\", email)\n-                .setComment(\"AccountDAO.getByUsernameAndEmail\").uniqueResult();\n+        return (HAccount) getSession().createQuery(\"from HAccount acc where acc.username = :username and acc.person.email = :email\")\n+                                      .setString(\"username\", username)\n+                                      .setString(\"email\", email)\n+                                      .setComment(\"AccountDAO.getByUsernameAndEmail\")\n+                                      .uniqueResult();\n     }\n \n     public HAccount getByApiKey(String apikey) {\n         return (HAccount) getSession().createCriteria(HAccount.class)\n-                .add(Restrictions.eq(\"apiKey\", apikey)).uniqueResult();\n+                                      .add(Restrictions.eq(\"apiKey\", apikey))\n+                                      .uniqueResult();\n     }\n \n     public void createApiKey(HAccount account) {\n@@ -107,14 +108,12 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n     // }\n \n     // TODO: use hibernate search\n-    public List<HAccount> searchQuery(String searchQuery, int maxResults,\n-            int firstResult) {\n+\n+    public List<HAccount> searchQuery(String searchQuery, int maxResults, int firstResult) {\n         String userName = \"%\" + searchQuery + \"%\";\n-        Query query =\n-                getSession().createQuery(\n-                        \"from HAccount as a where lower(a.username) like lower(:username)\");\n+        Query query = getSession().createQuery(\"from HAccount as a where lower(a.username) like lower(:username)\");\n         query.setParameter(\"username\", userName);\n-        if(maxResults > 0) {\n+        if (maxResults > 0) {\n             query.setMaxResults(maxResults);\n         }\n         query.setFirstResult(firstResult);\n@@ -125,31 +124,27 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n     }\n \n     public List<String> getUserNames(String filter, int offset, int maxResults) {\n-        Query query = createFilteredQuery(\n-                \"select distinct acc.username from HAccount acc \", filter)\n-                .setMaxResults(maxResults)\n-                .setFirstResult(offset)\n-                .setComment(\"accountDAO.getUserNames\");\n+        Query query = createFilteredQuery(\"select distinct acc.username from HAccount acc \",\n+filter).setMaxResults(maxResults)\n+      .setFirstResult(offset)\n+      .setComment(\"accountDAO.getUserNames\");\n         @SuppressWarnings(\"unchecked\")\n         List<String> list = query.list();\n         return list;\n     }\n \n     public int getUserCount(String filter) {\n-        return ((Long) createFilteredQuery(\n-                \"select count(*) from HAccount acc \", filter)\n-                .setComment(\"accountDAO.getUserCount\").uniqueResult())\n-                .intValue();\n+        return ((Long) createFilteredQuery(\"select count(*) from HAccount acc \", filter).setComment(\"accountDAO.getUserCount\")\n+                                                                                        .uniqueResult()).intValue();\n     }\n \n     private Query createFilteredQuery(String queryBase, String filter) {\n         if (!StringUtils.isEmpty(filter)) {\n-            queryBase += \"inner join acc.person as person \" +\n-                    \"where lower(acc.username) like :filter \" +\n-                    \"OR lower(person.email) like :filter \" +\n-                    \"OR lower(person.name) like :filter\";\n+            queryBase += \"inner join acc.person as person \" + \"where lower(acc.username) like :filter \"\n+            + \"OR lower(person.email) like :filter \" + \"OR lower(person.name) like :filter\";\n         }\n-        Query query = getSession().createQuery(queryBase).setCacheable(true);\n+        Query query = getSession().createQuery(queryBase)\n+                                  .setCacheable(true);\n         if (!StringUtils.isEmpty(filter)) {\n             query.setParameter(\"filter\", \"%\" + filter.toLowerCase() + \"%\");\n         }\n@@ -157,10 +152,7 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n     }\n \n     public HAccount getByCredentialsId(String credentialsId) {\n-        Query query =\n-                getSession()\n-                        .createQuery(\n-                                \"select c.account from HCredentials c where c.user = :id\");\n+        Query query = getSession().createQuery(\"select c.account from HCredentials c where c.user = :id\");\n         query.setParameter(\"id\", credentialsId);\n         query.setComment(\"AccountDAO.getByCredentialsId\");\n         return (HAccount) query.uniqueResult();\n@@ -174,14 +166,13 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n      * @return A list of accounts that in the past were merged into the given\n      *         account.\n      */\n+\n     public List<HAccount> getAllMergedAccounts(HAccount mergedInto) {\n-        Query query =\n-                getSession().createQuery(\n-                        \"from HAccount as a where a.mergedInto = :mergedInto\");\n+        Query query = getSession().createQuery(\"from HAccount as a where a.mergedInto = :mergedInto\");\n         query.setParameter(\"mergedInto\", mergedInto);\n         query.setComment(\"AccountDAO.getAllMergedAccounts\");\n         @SuppressWarnings(\"unchecked\")\n         List<HAccount> list = query.list();\n         return list;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/49/AccountDAO.java\nindex b39c06efa2..f793932ace 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/49/AccountDAO.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/49/AccountDAO.java\n@@ -114,7 +114,7 @@ public class AccountDAO extends AbstractDAOImpl<HAccount, Long> {\n                 getSession().createQuery(\n                         \"from HAccount as a where lower(a.username) like lower(:username)\");\n         query.setParameter(\"username\", userName);\n-        if(maxResults > 0) {\n+        if (maxResults > 0) {\n             query.setMaxResults(maxResults);\n         }\n         query.setFirstResult(firstResult);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "117",
                    "column": "9",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}