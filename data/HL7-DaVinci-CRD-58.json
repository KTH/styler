{
    "error_id": "58",
    "information": {
        "errors": [
            {
                "line": "49",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 155).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n    // setAllowCredentials(true) is important, otherwise:\n    // The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n    configuration.setAllowCredentials(true);\n    // setAllowedHeaders is important! Without it, OPTIONS preflight request\n    // will fail with 403 Invalid CORS request",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/58/SecurityConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/intellij/58/SecurityConfig.java\nindex 9014fe22b0..de010be22f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/58/SecurityConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/intellij/58/SecurityConfig.java\n@@ -37,6 +37,7 @@ class SecurityConfig extends WebSecurityConfigurerAdapter {\n   /**\n    * The CORS preflight must be accepted here or it will get rejected by the\n    * Auth filter.  General CORS settings can be set here.\n+   *\n    * @return CORS configuration object\n    */\n   @Bean\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 40.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/58/SecurityConfig.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/codebuff/58/SecurityConfig.java\nindex 9014fe22b0..d9ce9bf255 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/errored/1/58/SecurityConfig.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/HL7-DaVinci-CRD/codebuff/58/SecurityConfig.java\n@@ -5,12 +5,10 @@ import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;\n import org.keycloak.adapters.springsecurity.KeycloakSecurityComponents;\n import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;\n import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n-\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n@@ -22,29 +20,28 @@ import org.springframework.security.web.authentication.session.SessionAuthentica\n import org.springframework.web.cors.CorsConfiguration;\n import org.springframework.web.cors.CorsConfigurationSource;\n import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n \n @Configuration\n-@EnableWebSecurity\n-class SecurityConfig extends WebSecurityConfigurerAdapter {\n+@EnableWebSecurity class SecurityConfig extends WebSecurityConfigurerAdapter {\n \n-  @Autowired\n-  private YamlConfig myConfig;\n+    @Autowired\n+    private YamlConfig myConfig;\n \n   /**\n    * The CORS preflight must be accepted here or it will get rejected by the\n    * Auth filter.  General CORS settings can be set here.\n    * @return CORS configuration object\n    */\n-  @Bean\n-  public CorsConfigurationSource corsConfigurationSource() {\n+\n+\n+    @Bean\n+    public CorsConfigurationSource corsConfigurationSource() {\n     final CorsConfiguration configuration = new CorsConfiguration();\n     configuration.setAllowedOrigins(ImmutableList.of(\"*\"));\n-    configuration.setAllowedMethods(ImmutableList.of(\"HEAD\",\n-        \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n+    configuration.setAllowedMethods(ImmutableList.of(\"HEAD\", \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n     // setAllowCredentials(true) is important, otherwise:\n     // The value of the 'Access-Control-Allow-Origin' header in the response must not be the wildcard '*' when the request's credentials mode is 'include'.\n     configuration.setAllowCredentials(true);\n@@ -54,23 +51,19 @@ class SecurityConfig extends WebSecurityConfigurerAdapter {\n     final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n     source.registerCorsConfiguration(\"/**\", configuration);\n     return source;\n-  }\n+    }\n \n-  @Override\n-  protected void configure(HttpSecurity http) throws Exception {\n+\n+    @Override\n+    protected void configure(HttpSecurity http) throws Exception {\n     List<String> antMatcher = new ArrayList<>();\n     http.cors();\n     if (myConfig.getCheckJwt()) {\n-      antMatcher.add(\"/cds-services/order-review-crd\");\n+        antMatcher.add(\"/cds-services/order-review-crd\");\n     }\n-\n     http.csrf().disable();\n-\n     for (String matcher : antMatcher) {\n-      http.addFilter(new JWTAuthorizationFilter(authenticationManager()))\n-          .antMatcher(matcher);\n+        http.addFilter(new JWTAuthorizationFilter(authenticationManager())).antMatcher(matcher);\n+    }\n     }\n-\n-  }\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}