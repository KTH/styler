{
    "error_id": "712",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/712/PSModelLoader.java\nindex 5454564efb..b9c67b3352 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/712/PSModelLoader.java\n@@ -31,190 +31,193 @@ import java.nio.IntBuffer;\n import java.util.ArrayList;\n \n public class PSModelLoader {\n-  private static final Log LOG = LogFactory.getLog(PSModelLoader.class);\n-\n-  private static FileSystem infs;\n-  private static int maxEndCol = 0;\n-  private static int maxEndRow = 0;\n-  private static ArrayList<PartFile> partFiles = new ArrayList<PartFile>();\n-\n-  static class PartFile {\n-    FileStatus status;\n-    int startrow;\n-    int endrow;\n-    int startcol;\n-    int endcol;\n-  }\n-\n-  private static void loadDoubleVector(PartFile part, double[] resultArray) throws IOException {\n-    LOG.info(\"open file \" + part.status.getPath());\n-\n-    FSDataInputStream fin = infs.open(part.status.getPath());\n-    fin.readInt();\n-    fin.readInt();\n-\n-    // read partition header\n-    int startRow = fin.readInt();\n-    int startCol = fin.readInt();\n-    int endRow = fin.readInt();\n-    int endCol = fin.readInt();\n-    String rowType = fin.readUTF();\n-    LOG.info(\"rowType \" + rowType + \", partition range is [\" + startRow + \", \" + startCol + \"] to [\"\n-        + endRow + \", \" + endCol + \"]\");\n-\n-    int rowNum = fin.readInt();\n-    System.out.println(\"rowNum \" + rowNum);\n-\n-    switch (rowType) {\n-      case \"T_DOUBLE_SPARSE\": {\n-        for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = fin.readInt();\n-          int startPos = rowIndex * maxEndCol + startCol;\n-          for (int k = 0; k < rowLen; k++) {\n-            int colIndex = fin.readInt();\n-            resultArray[startPos + colIndex] = fin.readDouble();\n-          }\n-        }\n-        break;\n-      }\n-\n-      case \"T_DOUBLE_DENSE\": {\n-        byte[] data = new byte[8 * (endCol - startCol)];\n-        for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          System.out.println(\"rowIndex: \" + rowIndex);\n-          int rowLen = endCol - startCol;\n-          fin.read(data, 0, data.length);\n-          // DoubleBuffer dBuffer = ByteBuffer\n-          // .wrap(data, 0, data.length)\n-          // .order(ByteOrder.nativeOrder()).asDoubleBuffer();\n-          DoubleBuffer dBuffer = ByteBuffer.wrap(data, 0, data.length).asDoubleBuffer();\n-\n-          int startPos = rowIndex * maxEndCol + startCol;\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            resultArray[startPos + k] = dBuffer.get();\n-            if (k < 10) {\n-              System.out.println(\"resultArray: \" + resultArray[startPos + k]);\n+    private static final Log LOG = LogFactory.getLog(PSModelLoader.class);\n+\n+    private static FileSystem infs;\n+    private static int maxEndCol = 0;\n+    private static int maxEndRow = 0;\n+    private static ArrayList<PartFile> partFiles = new ArrayList<PartFile>();\n+\n+    static class PartFile {\n+        FileStatus status;\n+        int startrow;\n+        int endrow;\n+        int startcol;\n+        int endcol;\n+    }\n+\n+    private static void loadDoubleVector(PartFile part, double[] resultArray) throws IOException {\n+        LOG.info(\"open file \" + part.status.getPath());\n+\n+        FSDataInputStream fin = infs.open(part.status.getPath());\n+        fin.readInt();\n+        fin.readInt();\n+\n+        // read partition header\n+        int startRow = fin.readInt();\n+        int startCol = fin.readInt();\n+        int endRow = fin.readInt();\n+        int endCol = fin.readInt();\n+        String rowType = fin.readUTF();\n+        LOG.info(\"rowType \" + rowType + \", partition range is [\" + startRow + \", \" + startCol +\n+                \"] to [\"\n+                + endRow + \", \" + endCol + \"]\");\n+\n+        int rowNum = fin.readInt();\n+        System.out.println(\"rowNum \" + rowNum);\n+\n+        switch (rowType) {\n+            case \"T_DOUBLE_SPARSE\": {\n+                for (int j = 0; j < rowNum; j++) {\n+                    int rowIndex = fin.readInt();\n+                    int rowLen = fin.readInt();\n+                    int startPos = rowIndex * maxEndCol + startCol;\n+                    for (int k = 0; k < rowLen; k++) {\n+                        int colIndex = fin.readInt();\n+                        resultArray[startPos + colIndex] = fin.readDouble();\n+                    }\n+                }\n+                break;\n+            }\n+\n+            case \"T_DOUBLE_DENSE\": {\n+                byte[] data = new byte[8 * (endCol - startCol)];\n+                for (int j = 0; j < rowNum; j++) {\n+                    int rowIndex = fin.readInt();\n+                    System.out.println(\"rowIndex: \" + rowIndex);\n+                    int rowLen = endCol - startCol;\n+                    fin.read(data, 0, data.length);\n+                    // DoubleBuffer dBuffer = ByteBuffer\n+                    // .wrap(data, 0, data.length)\n+                    // .order(ByteOrder.nativeOrder()).asDoubleBuffer();\n+                    DoubleBuffer dBuffer = ByteBuffer.wrap(data, 0, data.length).asDoubleBuffer();\n+\n+                    int startPos = rowIndex * maxEndCol + startCol;\n+\n+                    for (int k = 0; k < rowLen; k++) {\n+                        resultArray[startPos + k] = dBuffer.get();\n+                        if (k < 10) {\n+                            System.out.println(\"resultArray: \" + resultArray[startPos + k]);\n+                        }\n+                    }\n+                }\n+                break;\n+            }\n+\n+            case \"T_INT_SPARSE\": {\n+                for (int j = 0; j < rowNum; j++) {\n+                    int rowIndex = fin.readInt();\n+                    int rowLen = fin.readInt();\n+                    int startPos = rowIndex * maxEndCol + startCol;\n+                    for (int k = 0; k < rowLen; k++) {\n+                        int colIndex = fin.readInt();\n+                        resultArray[startPos + colIndex] = fin.readInt();\n+                    }\n+                }\n+                break;\n+            }\n+\n+            case \"T_INT_DENSE\": {\n+                byte[] data = new byte[4 * (endCol - startCol)];\n+                for (int j = 0; j < rowNum; j++) {\n+                    int rowIndex = fin.readInt();\n+                    int rowLen = endCol - startCol;\n+                    fin.read(data, 0, data.length);\n+                    IntBuffer iBuffer =\n+                            ByteBuffer.wrap(data, 0, data.length).order(ByteOrder.nativeOrder())\n+                                    .asIntBuffer();\n+\n+                    int startPos = rowIndex * maxEndCol + startCol;\n+\n+                    for (int k = 0; k < rowLen; k++) {\n+                        resultArray[startPos + k] = iBuffer.get();\n+                    }\n+\n+                    for (int k = 0; k < rowLen; k++) {\n+                        LOG.info(\"Array[\" + String.valueOf(k) + \": \" + String.valueOf(resultArray));\n+                    }\n+                }\n+                break;\n             }\n-          }\n         }\n-        break;\n-      }\n-\n-      case \"T_INT_SPARSE\": {\n-        for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = fin.readInt();\n-          int startPos = rowIndex * maxEndCol + startCol;\n-          for (int k = 0; k < rowLen; k++) {\n-            int colIndex = fin.readInt();\n-            resultArray[startPos + colIndex] = fin.readInt();\n-          }\n+        fin.close();\n+    }\n+\n+    public static void init(String inputStr, String modelName) throws IOException {\n+        LOG.info(\"init PSModelLoader form \" + inputStr);\n+        Path inputPath = new Path(inputStr);\n+        Configuration conf = new Configuration();\n+        infs = inputPath.getFileSystem(conf);\n+\n+        PathFilter psFilter = new PathFilter() {\n+            @Override\n+            public boolean accept(Path path) {\n+                return path.getName().contains(\"ParameterServer_\");\n+            }\n+        };\n+\n+        FileStatus[] psFolders;\n+        psFolders = infs.listStatus(inputPath, psFilter);\n+\n+        if (psFolders.length == 0) {\n+            LOG.info(\"no validate filr in \" + inputStr);\n         }\n-        break;\n-      }\n-\n-      case \"T_INT_DENSE\": {\n-        byte[] data = new byte[4 * (endCol - startCol)];\n-        for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = endCol - startCol;\n-          fin.read(data, 0, data.length);\n-          IntBuffer iBuffer =\n-              ByteBuffer.wrap(data, 0, data.length).order(ByteOrder.nativeOrder()).asIntBuffer();\n-\n-          int startPos = rowIndex * maxEndCol + startCol;\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            resultArray[startPos + k] = iBuffer.get();\n-          }\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            LOG.info(\"Array[\" + String.valueOf(k) + \": \" + String.valueOf(resultArray));\n-          }\n+\n+        for (int i = 0; i < psFolders.length; i++) {\n+            LOG.info(psFolders[i].getPath().toString());\n         }\n-        break;\n-      }\n-    }\n-    fin.close();\n-  }\n-\n-  public static void init(String inputStr, String modelName) throws IOException {\n-    LOG.info(\"init PSModelLoader form \" + inputStr);\n-    Path inputPath = new Path(inputStr);\n-    Configuration conf = new Configuration();\n-    infs = inputPath.getFileSystem(conf);\n-\n-    PathFilter psFilter = new PathFilter() {\n-      @Override\n-      public boolean accept(Path path) {\n-        return path.getName().contains(\"ParameterServer_\");\n-      }\n-    };\n-\n-    FileStatus[] psFolders;\n-    psFolders = infs.listStatus(inputPath, psFilter);\n-\n-    if (psFolders.length == 0) {\n-      LOG.info(\"no validate filr in \" + inputStr);\n-    }\n \n-    for (int i = 0; i < psFolders.length; i++) {\n-      LOG.info(psFolders[i].getPath().toString());\n-    }\n+        for (int i = 0; i < psFolders.length; i++) {\n+            Path modelPath = new Path(inputStr + \"/ParameterServer_\" + i + \"/\" + modelName);\n+            LOG.info(\"load vectors from \" + modelPath.getName());\n+            FileStatus[] parts = infs.listStatus(modelPath);\n \n-    for (int i = 0; i < psFolders.length; i++) {\n-      Path modelPath = new Path(inputStr + \"/ParameterServer_\" + i + \"/\" + modelName);\n-      LOG.info(\"load vectors from \" + modelPath.getName());\n-      FileStatus[] parts = infs.listStatus(modelPath);\n+            for (int j = 0; j < parts.length; j++) {\n+                PartFile part = new PartFile();\n+                part.status = parts[j];\n+                FSDataInputStream fin = infs.open(parts[j].getPath());\n \n-      for (int j = 0; j < parts.length; j++) {\n-        PartFile part = new PartFile();\n-        part.status = parts[j];\n-        FSDataInputStream fin = infs.open(parts[j].getPath());\n+                int matrixId = fin.readInt();\n+                int partSize = fin.readInt();\n+                part.startrow = fin.readInt();\n+                part.startcol = fin.readInt();\n+                part.endrow = fin.readInt();\n+                part.endcol = fin.readInt();\n \n-        int matrixId = fin.readInt();\n-        int partSize = fin.readInt();\n-        part.startrow = fin.readInt();\n-        part.startcol = fin.readInt();\n-        part.endrow = fin.readInt();\n-        part.endcol = fin.readInt();\n+                partFiles.add(part);\n \n-        partFiles.add(part);\n+                if (maxEndCol < part.endcol) {\n+                    maxEndCol = part.endcol;\n+                }\n \n-        if (maxEndCol < part.endcol) {\n-          maxEndCol = part.endcol;\n-        }\n+                if (maxEndRow < part.endrow) {\n+                    maxEndRow = part.endrow;\n+                }\n \n-        if (maxEndRow < part.endrow) {\n-          maxEndRow = part.endrow;\n+                fin.close();\n+            }\n         }\n-\n-        fin.close();\n-      }\n+        System.out\n+                .println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0,\n+                        maxEndCol));\n     }\n-    System.out\n-        .println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0, maxEndCol));\n-  }\n-\n-  public static SparseDoubleVector loadVector(String inputDir, String vectorName)\n-      throws IOException {\n-    init(inputDir, vectorName);\n-    double[] vectorArray = new double[maxEndCol * maxEndRow];\n-    for (int i = 0; i < partFiles.size(); i++) {\n-      PartFile part = partFiles.get(i);\n-      loadDoubleVector(part, vectorArray);\n-    }\n-    // DenseDoubleVector vector = new DenseDoubleVector(vectorArray.length, vectorArray);\n-    SparseDoubleVector vector = new SparseDoubleVector(vectorArray.length);\n-    for (int i = 0; i < vectorArray.length; i++) {\n-      if (vectorArray[i] != 0) {\n-        vector.set(i, vectorArray[i]);\n-      }\n+\n+    public static SparseDoubleVector loadVector(String inputDir, String vectorName)\n+            throws IOException {\n+        init(inputDir, vectorName);\n+        double[] vectorArray = new double[maxEndCol * maxEndRow];\n+        for (int i = 0; i < partFiles.size(); i++) {\n+            PartFile part = partFiles.get(i);\n+            loadDoubleVector(part, vectorArray);\n+        }\n+        // DenseDoubleVector vector = new DenseDoubleVector(vectorArray.length, vectorArray);\n+        SparseDoubleVector vector = new SparseDoubleVector(vectorArray.length);\n+        for (int i = 0; i < vectorArray.length; i++) {\n+            if (vectorArray[i] != 0) {\n+                vector.set(i, vectorArray[i]);\n+            }\n+        }\n+        return vector;\n     }\n-    return vector;\n-  }\n \n }\n",
            "diff_size": 226
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/712/PSModelLoader.java\nindex 5454564efb..be8a0c1602 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/712/PSModelLoader.java\n@@ -64,8 +64,7 @@ public class PSModelLoader {\n \n     int rowNum = fin.readInt();\n     System.out.println(\"rowNum \" + rowNum);\n-\n-    switch (rowType) {\n+switch (rowType) {\n       case \"T_DOUBLE_SPARSE\": {\n         for (int j = 0; j < rowNum; j++) {\n           int rowIndex = fin.readInt();\n@@ -153,8 +152,7 @@ public class PSModelLoader {\n         return path.getName().contains(\"ParameterServer_\");\n       }\n     };\n-\n-    FileStatus[] psFolders;\n+FileStatus[] psFolders;\n     psFolders = infs.listStatus(inputPath, psFilter);\n \n     if (psFolders.length == 0) {\n@@ -195,13 +193,12 @@ public class PSModelLoader {\n         fin.close();\n       }\n     }\n-    System.out\n-        .println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0, maxEndCol));\n+    System.out.println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0, maxEndCol));\n   }\n \n   public static SparseDoubleVector loadVector(String inputDir, String vectorName)\n       throws IOException {\n-    init(inputDir, vectorName);\n+  init(inputDir, vectorName);\n     double[] vectorArray = new double[maxEndCol * maxEndRow];\n     for (int i = 0; i < partFiles.size(); i++) {\n       PartFile part = partFiles.get(i);\n@@ -217,4 +214,4 @@ public class PSModelLoader {\n     return vector;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 35, indentation should be the same level as line 93.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/712/PSModelLoader.java\nindex 5454564efb..38dc18a896 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/712/PSModelLoader.java\n@@ -16,13 +16,11 @@\n \n package com.tencent.angel.ml.algorithm.utils;\n \n-\n import com.tencent.angel.ml.math.vector.SparseDoubleVector;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.*;\n-\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.ByteOrder;\n@@ -31,190 +29,180 @@ import java.nio.IntBuffer;\n import java.util.ArrayList;\n \n public class PSModelLoader {\n-  private static final Log LOG = LogFactory.getLog(PSModelLoader.class);\n-\n-  private static FileSystem infs;\n-  private static int maxEndCol = 0;\n-  private static int maxEndRow = 0;\n-  private static ArrayList<PartFile> partFiles = new ArrayList<PartFile>();\n+    private static final Log LOG = LogFactory.getLog(PSModelLoader.class);\n+    private static FileSystem infs;\n+    private static int maxEndCol = 0;\n+    private static int maxEndRow = 0;\n+    private static ArrayList<PartFile> partFiles = new ArrayList<PartFile>();\n+    static class PartFile {\n \n-  static class PartFile {\n     FileStatus status;\n+\n     int startrow;\n+\n     int endrow;\n+\n     int startcol;\n+\n     int endcol;\n-  }\n \n-  private static void loadDoubleVector(PartFile part, double[] resultArray) throws IOException {\n-    LOG.info(\"open file \" + part.status.getPath());\n+    }\n \n+    private static void loadDoubleVector(PartFile part, double[] resultArray) throws IOException {\n+    LOG.info(\"open file \" + part.status.getPath());\n     FSDataInputStream fin = infs.open(part.status.getPath());\n     fin.readInt();\n     fin.readInt();\n \n     // read partition header\n+\n     int startRow = fin.readInt();\n     int startCol = fin.readInt();\n     int endRow = fin.readInt();\n     int endCol = fin.readInt();\n     String rowType = fin.readUTF();\n-    LOG.info(\"rowType \" + rowType + \", partition range is [\" + startRow + \", \" + startCol + \"] to [\"\n-        + endRow + \", \" + endCol + \"]\");\n+    LOG.info(\"rowType \" + rowType + \", partition range is [\" + startRow + \", \" + startCol + \"] to [\" + endRow + \", \" + endCol + \"]\");\n \n     int rowNum = fin.readInt();\n     System.out.println(\"rowNum \" + rowNum);\n-\n     switch (rowType) {\n-      case \"T_DOUBLE_SPARSE\": {\n+        case \"T_DOUBLE_SPARSE\": {\n         for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = fin.readInt();\n-          int startPos = rowIndex * maxEndCol + startCol;\n-          for (int k = 0; k < rowLen; k++) {\n-            int colIndex = fin.readInt();\n-            resultArray[startPos + colIndex] = fin.readDouble();\n-          }\n+                                    int rowIndex = fin.readInt();\n+                                    int rowLen = fin.readInt();\n+                                    int startPos = rowIndex * maxEndCol + startCol;\n+                                    for (int k = 0; k < rowLen; k++) {\n+                                             int colIndex = fin.readInt();\n+                                             resultArray[startPos + colIndex] = fin.readDouble();\n+                                    }\n         }\n         break;\n-      }\n+        }\n \n-      case \"T_DOUBLE_DENSE\": {\n+        case \"T_DOUBLE_DENSE\": {\n         byte[] data = new byte[8 * (endCol - startCol)];\n         for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          System.out.println(\"rowIndex: \" + rowIndex);\n-          int rowLen = endCol - startCol;\n-          fin.read(data, 0, data.length);\n+                                   int rowIndex = fin.readInt();\n+                                   System.out.println(\"rowIndex: \" + rowIndex);\n+\n+                                   int rowLen = endCol - startCol;\n+                                   fin.read(data, 0, data.length);\n           // DoubleBuffer dBuffer = ByteBuffer\n           // .wrap(data, 0, data.length)\n           // .order(ByteOrder.nativeOrder()).asDoubleBuffer();\n-          DoubleBuffer dBuffer = ByteBuffer.wrap(data, 0, data.length).asDoubleBuffer();\n-\n-          int startPos = rowIndex * maxEndCol + startCol;\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            resultArray[startPos + k] = dBuffer.get();\n-            if (k < 10) {\n-              System.out.println(\"resultArray: \" + resultArray[startPos + k]);\n-            }\n-          }\n+                                   DoubleBuffer dBuffer = ByteBuffer.wrap(data, 0, data.length).asDoubleBuffer();\n+                                   int startPos = rowIndex * maxEndCol + startCol;\n+                                   for (int k = 0; k < rowLen; k++) {\n+                                             resultArray[startPos + k] = dBuffer.get();\n+                                             if (k < 10) {\n+                                       System.out.println(\"resultArray: \" + resultArray[startPos + k]);\n+                                             }\n+                                   }\n         }\n         break;\n-      }\n+        }\n \n-      case \"T_INT_SPARSE\": {\n+        case \"T_INT_SPARSE\": {\n         for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = fin.readInt();\n-          int startPos = rowIndex * maxEndCol + startCol;\n-          for (int k = 0; k < rowLen; k++) {\n-            int colIndex = fin.readInt();\n-            resultArray[startPos + colIndex] = fin.readInt();\n-          }\n+                                 int rowIndex = fin.readInt();\n+                                 int rowLen = fin.readInt();\n+                                 int startPos = rowIndex * maxEndCol + startCol;\n+                                 for (int k = 0; k < rowLen; k++) {\n+                                             int colIndex = fin.readInt();\n+                                             resultArray[startPos + colIndex] = fin.readInt();\n+                                 }\n         }\n         break;\n-      }\n+        }\n \n-      case \"T_INT_DENSE\": {\n+        case \"T_INT_DENSE\": {\n         byte[] data = new byte[4 * (endCol - startCol)];\n         for (int j = 0; j < rowNum; j++) {\n-          int rowIndex = fin.readInt();\n-          int rowLen = endCol - startCol;\n-          fin.read(data, 0, data.length);\n-          IntBuffer iBuffer =\n-              ByteBuffer.wrap(data, 0, data.length).order(ByteOrder.nativeOrder()).asIntBuffer();\n-\n-          int startPos = rowIndex * maxEndCol + startCol;\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            resultArray[startPos + k] = iBuffer.get();\n-          }\n-\n-          for (int k = 0; k < rowLen; k++) {\n-            LOG.info(\"Array[\" + String.valueOf(k) + \": \" + String.valueOf(resultArray));\n-          }\n+                                int rowIndex = fin.readInt();\n+                                int rowLen = endCol - startCol;\n+                                fin.read(data, 0, data.length);\n+                                IntBuffer iBuffer = ByteBuffer.wrap(data, 0, data.length).order(ByteOrder.nativeOrder()).asIntBuffer();\n+                                int startPos = rowIndex * maxEndCol + startCol;\n+                                for (int k = 0; k < rowLen; k++) {\n+                                             resultArray[startPos + k] = iBuffer.get();\n+                                }\n+\n+                                for (int k = 0; k < rowLen; k++) {\n+                                             LOG.info(\"Array[\" + String.valueOf(k) + \": \" + String.valueOf(resultArray));\n+                                }\n         }\n         break;\n-      }\n+        }\n     }\n     fin.close();\n-  }\n+    }\n \n-  public static void init(String inputStr, String modelName) throws IOException {\n+    public static void init(String inputStr, String modelName) throws IOException {\n     LOG.info(\"init PSModelLoader form \" + inputStr);\n     Path inputPath = new Path(inputStr);\n     Configuration conf = new Configuration();\n     infs = inputPath.getFileSystem(conf);\n-\n     PathFilter psFilter = new PathFilter() {\n-      @Override\n-      public boolean accept(Path path) {\n-        return path.getName().contains(\"ParameterServer_\");\n-      }\n-    };\n \n+\n+@Override\n+public boolean accept(Path path) {\n+                              return path.getName().contains(\"ParameterServer_\");\n+}\n+};\n     FileStatus[] psFolders;\n     psFolders = infs.listStatus(inputPath, psFilter);\n-\n     if (psFolders.length == 0) {\n-      LOG.info(\"no validate filr in \" + inputStr);\n+        LOG.info(\"no validate filr in \" + inputStr);\n     }\n \n     for (int i = 0; i < psFolders.length; i++) {\n-      LOG.info(psFolders[i].getPath().toString());\n+        LOG.info(psFolders[i].getPath().toString());\n     }\n \n     for (int i = 0; i < psFolders.length; i++) {\n-      Path modelPath = new Path(inputStr + \"/ParameterServer_\" + i + \"/\" + modelName);\n-      LOG.info(\"load vectors from \" + modelPath.getName());\n-      FileStatus[] parts = infs.listStatus(modelPath);\n-\n-      for (int j = 0; j < parts.length; j++) {\n-        PartFile part = new PartFile();\n-        part.status = parts[j];\n-        FSDataInputStream fin = infs.open(parts[j].getPath());\n-\n-        int matrixId = fin.readInt();\n-        int partSize = fin.readInt();\n-        part.startrow = fin.readInt();\n-        part.startcol = fin.readInt();\n-        part.endrow = fin.readInt();\n-        part.endcol = fin.readInt();\n-\n-        partFiles.add(part);\n-\n-        if (maxEndCol < part.endcol) {\n-          maxEndCol = part.endcol;\n+        Path modelPath = new Path(inputStr + \"/ParameterServer_\" + i + \"/\" + modelName);\n+        LOG.info(\"load vectors from \" + modelPath.getName());\n+        FileStatus[] parts = infs.listStatus(modelPath);\n+        for (int j = 0; j < parts.length; j++) {\n+                                                   PartFile part = new PartFile();\n+                                                   part.status = parts[j];\n+                                                   FSDataInputStream fin = infs.open(parts[j].getPath());\n+                                                   int matrixId = fin.readInt();\n+                                                   int partSize = fin.readInt();\n+                                                   part.startrow = fin.readInt();\n+                                                   part.startcol = fin.readInt();\n+                                                   part.endrow = fin.readInt();\n+                                                   part.endcol = fin.readInt();\n+                                                   partFiles.add(part);\n+                                                   if (maxEndCol < part.endcol) {\n+            maxEndCol = part.endcol;\n+                                                   }\n+\n+                                                   if (maxEndRow < part.endrow) {\n+            maxEndRow = part.endrow;\n+                                                   }\n+                                                   fin.close();\n         }\n-\n-        if (maxEndRow < part.endrow) {\n-          maxEndRow = part.endrow;\n-        }\n-\n-        fin.close();\n-      }\n     }\n-    System.out\n-        .println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0, maxEndCol));\n-  }\n+    System.out.println(String.format(\"matrix row:[%d, %d], col:[%d, %d]\", 0, maxEndRow, 0, maxEndCol));\n+    }\n \n-  public static SparseDoubleVector loadVector(String inputDir, String vectorName)\n-      throws IOException {\n+    public static SparseDoubleVector loadVector(String inputDir, String vectorName) throws IOException {\n     init(inputDir, vectorName);\n     double[] vectorArray = new double[maxEndCol * maxEndRow];\n     for (int i = 0; i < partFiles.size(); i++) {\n-      PartFile part = partFiles.get(i);\n-      loadDoubleVector(part, vectorArray);\n+        PartFile part = partFiles.get(i);\n+        loadDoubleVector(part, vectorArray);\n     }\n     // DenseDoubleVector vector = new DenseDoubleVector(vectorArray.length, vectorArray);\n+\n     SparseDoubleVector vector = new SparseDoubleVector(vectorArray.length);\n     for (int i = 0; i < vectorArray.length; i++) {\n-      if (vectorArray[i] != 0) {\n+        if (vectorArray[i] != 0) {\n         vector.set(i, vectorArray[i]);\n-      }\n+        }\n     }\n     return vector;\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 133
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 15.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/712/PSModelLoader.java\nindex 5454564efb..07bf7c1463 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/712/PSModelLoader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/712/PSModelLoader.java\n@@ -12,9 +12,7 @@\n  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n- */\n-\n-package com.tencent.angel.ml.algorithm.utils;\n+ */ package com.tencent.angel.ml.algorithm.utils;\n \n \n import com.tencent.angel.ml.math.vector.SparseDoubleVector;\n",
            "diff_size": 3
        }
    ]
}