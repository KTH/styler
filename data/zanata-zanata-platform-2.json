{
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "372",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            toTargetHeader.setDocument(doc);\n            transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n                    MergeType.IMPORT); // return\n            // value\n            // not\n            // needed",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/2/ResourceUtils.java\nindex 80b340aeb3..7d9abcf64e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/2/ResourceUtils.java\n@@ -369,7 +369,9 @@ public class ResourceUtils implements Serializable {\n             toTargetHeader.setTargetLanguage(locale);\n             toTargetHeader.setDocument(doc);\n             transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n-                    MergeType.IMPORT); // return\n+\n+            MergeType\n+            . IMPORT); // return\n             // value\n             // not\n             // needed\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/2/ResourceUtils.java\nindex 80b340aeb3..ed79ecbe8b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/2/ResourceUtils.java\n@@ -82,7 +82,7 @@ import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n @RequestScoped\n public class ResourceUtils implements Serializable {\n     private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ResourceUtils.class);\n+        org.slf4j.LoggerFactory.getLogger(ResourceUtils.class);\n     private static final long serialVersionUID = -969189290416018542L;\n \n     /**\n@@ -93,27 +93,27 @@ public class ResourceUtils implements Serializable {\n     private static final String ZANATA_TAG = \"#zanata\";\n     private static final String PO_DATE_FORMAT = \"yyyy-MM-dd hh:mmZ\";\n     private static final String PO_DEFAULT_CONTENT_TYPE =\n-            \"text/plain; charset=UTF-8\";\n+        \"text/plain; charset=UTF-8\";\n \n     /**\n      * PO Header entries\n      */\n     private static final String LAST_TRANSLATOR_HDR = \"Last-Translator\";\n     private static final String PO_REVISION_DATE_HDR =\n-            HeaderFields.KEY_PoRevisionDate;\n+        HeaderFields.KEY_PoRevisionDate;\n     private static final String LANGUAGE_TEAM_HDR =\n-            HeaderFields.KEY_LanguageTeam;\n+        HeaderFields.KEY_LanguageTeam;\n     private static final String X_GENERATOR_HDR = \"X-Generator\";\n     private static final String LANGUAGE_HDR = HeaderFields.KEY_Language;\n     private static final String CONTENT_TYPE_HDR = HeaderFields.KEY_ContentType;\n     private static final String PLURAL_FORMS_HDR = \"Plural-Forms\";\n     // TODO we should need only one regex, with a capture group for nplurals\n     private static final Pattern PLURAL_FORM_PATTERN =\n-            Pattern.compile(\"nplurals=[0-9]+;\\\\s?plural=*\");\n+        Pattern.compile(\"nplurals=[0-9]+;\\\\s?plural=*\");\n     private static final Pattern NPLURALS_TAG_PATTERN =\n-            Pattern.compile(\"nplurals=\");\n+        Pattern.compile(\"nplurals=\");\n     private static final Pattern NPLURALS_PATTERN =\n-            Pattern.compile(\"nplurals=[0-9]+\");\n+        Pattern.compile(\"nplurals=[0-9]+\");\n     private static final String PLURALS_FILE = \"pluralforms.properties\";\n     private static final int DEFAULT_NPLURALS = 1;\n     private static final String DEFAULT_PLURAL_FORM = \"nplurals=1; plural=0\";\n@@ -121,7 +121,7 @@ public class ResourceUtils implements Serializable {\n     private Properties pluralForms;\n     public static final String COPIED_BY_ZANATA_NAME = \"Copied by Zanata\";\n     public static final String COPIED_BY_ZANATA_NAME_EMAIL =\n-            \"copied-by-zanata@zanata.org\";\n+        \"copied-by-zanata@zanata.org\";\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     @Inject\n     private EntityManager entityManager;\n@@ -134,7 +134,7 @@ public class ResourceUtils implements Serializable {\n             if (pluralForms == null) {\n                 pluralForms = new Properties();\n                 pluralForms.load(this.getClass().getClassLoader()\n-                        .getResourceAsStream(PLURALS_FILE));\n+                    .getResourceAsStream(PLURALS_FILE));\n             }\n         } catch (IOException e) {\n             log.error(\"There was an error loading plural forms.\", e);\n@@ -154,20 +154,20 @@ public class ResourceUtils implements Serializable {\n      * @return\n      */\n     boolean transferFromTextFlows(List<TextFlow> from, HDocument to,\n-            Set<String> enabledExtensions, int nextDocRev) {\n+                                  Set<String> enabledExtensions, int nextDocRev) {\n         boolean changed = false;\n         to.getTextFlows().clear();\n         Set<String> incomingIds = new HashSet<String>();\n         Set<String> previousIds =\n-                new HashSet<String>(to.getAllTextFlows().keySet());\n+            new HashSet<String>(to.getAllTextFlows().keySet());\n         int count = 0;\n         for (TextFlow tf : from) {\n             if (!incomingIds.add(tf.getId())) {\n                 Response response = Response.status(Status.BAD_REQUEST).entity(\n-                        \"encountered TextFlow with duplicate ID \" + tf.getId())\n-                        .build();\n+                    \"encountered TextFlow with duplicate ID \" + tf.getId())\n+                    .build();\n                 log.warn(\n-                        \"encountered TextFlow with duplicate ID {}\", tf.getId());\n+                    \"encountered TextFlow with duplicate ID {}\", tf.getId());\n                 throw new WebApplicationException(response);\n             }\n             HTextFlow textFlow;\n@@ -184,7 +184,7 @@ public class ResourceUtils implements Serializable {\n                     textFlow.setRevision(nextDocRev);\n                     changed = true;\n                     for (HTextFlowTarget targ : textFlow.getTargets()\n-                            .values()) {\n+                        .values()) {\n                         // if (targ.getState() != ContentState.New)\n                         if (targ.getState().isTranslated()) {\n                             targ.setState(ContentState.NeedReview);\n@@ -230,8 +230,9 @@ public class ResourceUtils implements Serializable {\n                 textFlow.setObsolete(true);\n             }\n         }\n-        if (changed)\n+        if (changed) {\n             to.setRevision(nextDocRev);\n+        }\n         return changed;\n     }\n \n@@ -245,12 +246,12 @@ public class ResourceUtils implements Serializable {\n      * @return\n      */\n     public boolean transferFromResource(Resource from, HDocument to,\n-            Set<String> enabledExtensions, HLocale locale, int nextDocRev) {\n+                                        Set<String> enabledExtensions, HLocale locale, int nextDocRev) {\n         boolean changed = false;\n         changed |= transferFromResourceMetadata(from, to, enabledExtensions,\n-                locale, nextDocRev);\n+            locale, nextDocRev);\n         changed |= transferFromTextFlows(from.getTextFlows(), to,\n-                enabledExtensions, nextDocRev);\n+            enabledExtensions, nextDocRev);\n         return changed;\n     }\n \n@@ -264,8 +265,8 @@ public class ResourceUtils implements Serializable {\n      * @return\n      */\n     public boolean transferFromResourceMetadata(AbstractResourceMeta from,\n-            HDocument to, Set<String> enabledExtensions, HLocale locale,\n-            int nextDocRev) {\n+                                                HDocument to, Set<String> enabledExtensions, HLocale locale,\n+                                                int nextDocRev) {\n         boolean changed = false;\n         // name\n         if (!equals(from.getName(), to.getDocId())) {\n@@ -285,9 +286,10 @@ public class ResourceUtils implements Serializable {\n         }\n         // handle extensions\n         changed |= transferFromResourceExtensions(from.getExtensions(true), to,\n-                enabledExtensions);\n-        if (changed)\n+            enabledExtensions);\n+        if (changed) {\n             to.setRevision(nextDocRev);\n+        }\n         return changed;\n     }\n \n@@ -302,8 +304,8 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromResource\n      */\n     private boolean transferFromResourceExtensions(\n-            ExtensionSet<AbstractResourceMetaExtension> from, HDocument to,\n-            Set<String> enabledExtensions) {\n+        ExtensionSet<AbstractResourceMetaExtension> from, HDocument to,\n+        Set<String> enabledExtensions) {\n         boolean changed = false;\n         if (enabledExtensions.contains(PoHeader.ID)) {\n             PoHeader poHeaderExt = from.findByType(PoHeader.class);\n@@ -335,22 +337,22 @@ public class ResourceUtils implements Serializable {\n      * @see #transferToTranslationsResourceExtensions\n      */\n     public boolean transferFromTranslationsResourceExtensions(\n-            ExtensionSet<TranslationsResourceExtension> from, HDocument doc,\n-            Set<String> enabledExtensions, HLocale locale,\n-            MergeType mergeType) {\n+        ExtensionSet<TranslationsResourceExtension> from, HDocument doc,\n+        Set<String> enabledExtensions, HLocale locale,\n+        MergeType mergeType) {\n         boolean changed = false;\n         if (enabledExtensions.contains(PoTargetHeader.ID)) {\n             PoTargetHeader fromTargetHeader =\n-                    from.findByType(PoTargetHeader.class);\n+                from.findByType(PoTargetHeader.class);\n             if (fromTargetHeader != null) {\n                 log.debug(\"found PO header for locale: {}\", locale);\n                 try {\n                     changed = tryGetOrCreateTargetHeader(doc, locale, mergeType,\n-                            changed, fromTargetHeader);\n+                        changed, fromTargetHeader);\n                 } catch (org.hibernate.exception.ConstraintViolationException e) {\n                     entityManager.refresh(doc);\n                     changed = tryGetOrCreateTargetHeader(doc, locale, mergeType,\n-                            changed, fromTargetHeader);\n+                        changed, fromTargetHeader);\n                 }\n             } else {\n                 changed |= doc.getPoTargetHeaders().remove(locale) != null;\n@@ -360,8 +362,8 @@ public class ResourceUtils implements Serializable {\n     }\n \n     private boolean tryGetOrCreateTargetHeader(HDocument doc, HLocale locale,\n-            MergeType mergeType, boolean changed,\n-            PoTargetHeader fromTargetHeader) {\n+                                               MergeType mergeType, boolean changed,\n+                                               PoTargetHeader fromTargetHeader) {\n         HPoTargetHeader toTargetHeader = doc.getPoTargetHeaders().get(locale);\n         if (toTargetHeader == null) {\n             changed = true;\n@@ -369,7 +371,7 @@ public class ResourceUtils implements Serializable {\n             toTargetHeader.setTargetLanguage(locale);\n             toTargetHeader.setDocument(doc);\n             transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n-                    MergeType.IMPORT); // return\n+                MergeType.IMPORT); // return\n             // value\n             // not\n             // needed\n@@ -377,18 +379,18 @@ public class ResourceUtils implements Serializable {\n             entityManager.flush();\n         } else {\n             changed |= transferFromPoTargetHeader(fromTargetHeader,\n-                    toTargetHeader, mergeType);\n+                toTargetHeader, mergeType);\n         }\n         return changed;\n     }\n \n     private boolean transferFromTextFlowExtensions(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n+                                                   Set<String> enabledExtensions) {\n         boolean changed = false;\n         ExtensionSet<TextFlowExtension> extensions = from.getExtensions(true);\n         if (enabledExtensions.contains(PotEntryHeader.ID)) {\n             PotEntryHeader entryHeader =\n-                    extensions.findByType(PotEntryHeader.class);\n+                extensions.findByType(PotEntryHeader.class);\n             if (entryHeader != null) {\n                 HPotEntryData hEntryHeader = to.getPotEntryData();\n                 if (hEntryHeader == null) {\n@@ -398,7 +400,7 @@ public class ResourceUtils implements Serializable {\n                     log.debug(\"set potentryheader\");\n                 }\n                 changed |= transferFromPotEntryHeader(entryHeader, hEntryHeader,\n-                        from);\n+                    from);\n             }\n         }\n         if (enabledExtensions.contains(SimpleComment.ID)) {\n@@ -420,14 +422,14 @@ public class ResourceUtils implements Serializable {\n     }\n \n     /**\n-     * @see #transferToPotEntryHeader(HPotEntryData, PotEntryHeader)\n      * @param from\n      * @param to\n      * @param textFlow\n      * @return\n+     * @see #transferToPotEntryHeader(HPotEntryData, PotEntryHeader)\n      */\n     private boolean transferFromPotEntryHeader(PotEntryHeader from,\n-            HPotEntryData to, TextFlow textFlow) {\n+                                               HPotEntryData to, TextFlow textFlow) {\n         boolean changed = false;\n         if (!equals(from.getContext(), to.getContext())) {\n             changed = true;\n@@ -437,8 +439,8 @@ public class ResourceUtils implements Serializable {\n         // rhbz1012502 - should not store fuzzy tag in source document\n         if (flagList.contains(\"fuzzy\")) {\n             throw new WebApplicationException(String.format(\n-                    \"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\",\n-                    textFlow.getId(), textFlow.getContents()), 422);\n+                \"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\",\n+                textFlow.getId(), textFlow.getContents()), 422);\n         }\n         String flags = StringUtil.concat(flagList, ',');\n         if (flagList.isEmpty()) {\n@@ -469,7 +471,7 @@ public class ResourceUtils implements Serializable {\n      * @see #transferToPoTargetHeader\n      */\n     private boolean transferFromPoTargetHeader(PoTargetHeader from,\n-            HPoTargetHeader to, MergeType mergeType) {\n+                                               HPoTargetHeader to, MergeType mergeType) {\n         boolean changed = pushPoTargetComment(from, to, mergeType);\n         // TODO we should probably block PoHeader/POT-specific entries\n         // ie POT-Creation-Date, Project-Id-Version, Report-Msgid-Bugs-To\n@@ -489,7 +491,7 @@ public class ResourceUtils implements Serializable {\n      * @see #pullPoTargetComment\n      */\n     protected boolean pushPoTargetComment(PoTargetHeader fromHeader,\n-            HPoTargetHeader toHeader, MergeType mergeType) {\n+                                          HPoTargetHeader toHeader, MergeType mergeType) {\n         boolean changed = false;\n         HSimpleComment hComment = toHeader.getComment();\n         if (hComment == null) {\n@@ -502,32 +504,34 @@ public class ResourceUtils implements Serializable {\n             List<String> fromLines = splitLines(fromComment, ZANATA_TAG);\n             StringBuilder sb = new StringBuilder(fromComment.length());\n             switch (mergeType) {\n-            case IMPORT:\n-                for (String line : fromLines) {\n-                    if (sb.length() != 0)\n-                        sb.append(NEWLINE);\n-                    sb.append(line);\n-                    changed = true;\n-                }\n-                break;\n-\n-            default:\n-                // AUTO or anything else will merge comments\n-                // to merge, we just append new lines, skip old lines\n-                List<String> toLines = Collections.emptyList();\n-                if (toComment != null) {\n-                    sb.append(toComment);\n-                    toLines = splitLines(toComment, null);\n-                }\n-                for (String line : fromLines) {\n-                    if (!toLines.contains(line)) {\n-                        if (sb.length() != 0)\n+                case IMPORT:\n+                    for (String line : fromLines) {\n+                        if (sb.length() != 0) {\n                             sb.append(NEWLINE);\n+                        }\n                         sb.append(line);\n                         changed = true;\n                     }\n-                }\n-                break;\n+                    break;\n+\n+                default:\n+                    // AUTO or anything else will merge comments\n+                    // to merge, we just append new lines, skip old lines\n+                    List<String> toLines = Collections.emptyList();\n+                    if (toComment != null) {\n+                        sb.append(toComment);\n+                        toLines = splitLines(toComment, null);\n+                    }\n+                    for (String line : fromLines) {\n+                        if (!toLines.contains(line)) {\n+                            if (sb.length() != 0) {\n+                                sb.append(NEWLINE);\n+                            }\n+                            sb.append(line);\n+                            changed = true;\n+                        }\n+                    }\n+                    break;\n \n             }\n             if (changed) {\n@@ -594,7 +598,7 @@ public class ResourceUtils implements Serializable {\n     }\n \n     private boolean transferFromTextFlow(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n+                                         Set<String> enabledExtensions) {\n         boolean changed = false;\n         if (!equals(from.getContents(), to.getContents())) {\n             to.setContents(from.getContents());\n@@ -629,7 +633,7 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromPoTargetHeader\n      */\n     private void transferToPoTargetHeader(HPoTargetHeader from,\n-            PoTargetHeader to, List<HTextFlowTarget> hTargets, HLocale locale) {\n+                                          PoTargetHeader to, List<HTextFlowTarget> hTargets, HLocale locale) {\n         pullPoTargetComment(from, to, hTargets);\n         to.getEntries().addAll(this.headerToList(from.getEntries()));\n         populateHeaderEntries(to.getEntries(), hTargets, locale);\n@@ -638,8 +642,7 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Transforms a set of header entries from a String to a list of POJOs.\n      *\n-     * @param entries\n-     *            The header entries' string.\n+     * @param entries The header entries' string.\n      */\n     private List<HeaderEntry> headerToList(final String entries) {\n         return PoUtility.headerToList(entries);\n@@ -649,17 +652,14 @@ public class ResourceUtils implements Serializable {\n      * Populates a list of header entries with values stored in the system. For\n      * certain headers, the original value will remain if present.\n      *\n-     * @param headerEntries\n-     *            The header entries to be populated.\n-     * @param hTargets\n-     *            The Text Flow Targets that the header applies to.\n-     * @param locale\n-     *            The locale that is bein\n+     * @param headerEntries The header entries to be populated.\n+     * @param hTargets      The Text Flow Targets that the header applies to.\n+     * @param locale        The locale that is bein\n      */\n     private void populateHeaderEntries(final List<HeaderEntry> headerEntries,\n-            final List<HTextFlowTarget> hTargets, final HLocale locale) {\n+                                       final List<HTextFlowTarget> hTargets, final HLocale locale) {\n         final Map<String, HeaderEntry> containedHeaders =\n-                new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n+            new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n         HTextFlowTarget lastChangedTarget = getLastChangedTarget(hTargets);\n         // Collect the existing header entries\n         for (HeaderEntry entry : headerEntries) {\n@@ -667,11 +667,11 @@ public class ResourceUtils implements Serializable {\n         }\n         // Add / Replace headers\n         Date revisionDate =\n-                this.getRevisionDate(headerEntries, lastChangedTarget);\n+            this.getRevisionDate(headerEntries, lastChangedTarget);\n         HeaderEntry headerEntry = containedHeaders.get(PO_REVISION_DATE_HDR);\n         if (headerEntry == null) {\n             headerEntry = new HeaderEntry(PO_REVISION_DATE_HDR,\n-                    this.toPoHeaderString(revisionDate));\n+                this.toPoHeaderString(revisionDate));\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.toPoHeaderString(revisionDate));\n@@ -679,16 +679,16 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(LAST_TRANSLATOR_HDR);\n         if (headerEntry == null) {\n             headerEntry = new HeaderEntry(LAST_TRANSLATOR_HDR,\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n+                this.getLastTranslator(lastChangedTarget, headerEntries));\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n+                this.getLastTranslator(lastChangedTarget, headerEntries));\n         }\n         headerEntry = containedHeaders.get(LANGUAGE_TEAM_HDR);\n         if (headerEntry == null) {\n             headerEntry = new HeaderEntry(LANGUAGE_TEAM_HDR,\n-                    this.getLanguageTeam(locale));\n+                this.getLanguageTeam(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             // Keep the original value if provided\n@@ -696,7 +696,7 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(LANGUAGE_HDR);\n         if (headerEntry == null) {\n             headerEntry =\n-                    new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n+                new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.getLanguage(locale));\n@@ -704,7 +704,7 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(X_GENERATOR_HDR);\n         if (headerEntry == null) {\n             headerEntry =\n-                    new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n+                new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.getSystemVersion());\n@@ -712,7 +712,7 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(CONTENT_TYPE_HDR);\n         if (headerEntry == null) {\n             headerEntry =\n-                    new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n+                new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(PO_DEFAULT_CONTENT_TYPE);\n@@ -720,7 +720,7 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(PLURAL_FORMS_HDR);\n         if (headerEntry == null || isBlank(headerEntry.getValue())) {\n             headerEntry = new HeaderEntry(PLURAL_FORMS_HDR,\n-                    this.getPluralForms(locale));\n+                this.getPluralForms(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             // Keep the original if provided\n@@ -730,17 +730,16 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Finds and returns the Revision Date stored in a PO file's header entries.\n      *\n-     * @param headerEntries\n-     *            A single PO file's header entries.\n+     * @param headerEntries A single PO file's header entries.\n      * @return The Revision Date header value, or null if no such header is\n-     *         found or the date cannot be parsed.\n+     * found or the date cannot be parsed.\n      */\n     private Date getHeaderRevisionDate(final List<HeaderEntry> headerEntries) {\n         Date poFileRevisionDate = null;\n         for (HeaderEntry entry : headerEntries) {\n             if (entry.getKey().equalsIgnoreCase(PO_REVISION_DATE_HDR)) {\n                 SimpleDateFormat dateFormat =\n-                        new SimpleDateFormat(PO_DATE_FORMAT);\n+                    new SimpleDateFormat(PO_DATE_FORMAT);\n                 try {\n                     poFileRevisionDate = dateFormat.parse(entry.getValue());\n                 } catch (ParseException e) {\n@@ -753,7 +752,7 @@ public class ResourceUtils implements Serializable {\n     }\n \n     private String\n-            getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n+    getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n         for (HeaderEntry entry : headerEntries) {\n             if (entry.getKey().equalsIgnoreCase(LAST_TRANSLATOR_HDR)) {\n                 return entry.getValue();\n@@ -768,7 +767,7 @@ public class ResourceUtils implements Serializable {\n      * determine a suitable Revision date, a null value is returned.\n      */\n     private Date getRevisionDate(final List<HeaderEntry> headerEntries,\n-            final HTextFlowTarget lastTranslated) {\n+                                 final HTextFlowTarget lastTranslated) {\n         Date poFileRevisionDate = this.getHeaderRevisionDate(headerEntries);\n         Date translationsRevisionDate = null;\n         if (lastTranslated != null) {\n@@ -777,7 +776,7 @@ public class ResourceUtils implements Serializable {\n         if (translationsRevisionDate != null) {\n             if (poFileRevisionDate != null) {\n                 return translationsRevisionDate.after(poFileRevisionDate)\n-                        ? translationsRevisionDate : poFileRevisionDate;\n+                    ? translationsRevisionDate : poFileRevisionDate;\n             } else {\n                 return translationsRevisionDate;\n             }\n@@ -787,12 +786,11 @@ public class ResourceUtils implements Serializable {\n     }\n \n     /**\n-     * @param translations\n-     *            - List of HTextFlowTarget\n+     * @param translations - List of HTextFlowTarget\n      * @return last changed/updated HTextFlowTarget from the list\n      */\n     private HTextFlowTarget\n-            getLastChangedTarget(final List<HTextFlowTarget> translations) {\n+    getLastChangedTarget(final List<HTextFlowTarget> translations) {\n         Date lastUpdate = new Date(Long.MIN_VALUE);\n         HTextFlowTarget lastChanged = null;\n         for (HTextFlowTarget tft : translations) {\n@@ -808,14 +806,12 @@ public class ResourceUtils implements Serializable {\n      * Gets the last translator header value for a set of header entries and the\n      * last translated target.\n      *\n-     * @param lastTranslated\n-     *            The most currently translated target.\n-     * @param headerEntries\n-     *            The PO header entries.\n+     * @param lastTranslated The most currently translated target.\n+     * @param headerEntries  The PO header entries.\n      * @return A string with the value of the last translator.\n      */\n     private String getLastTranslator(final HTextFlowTarget lastTranslated,\n-            final List<HeaderEntry> headerEntries) {\n+                                     final List<HeaderEntry> headerEntries) {\n         Date headerRevisionDate = this.getHeaderRevisionDate(headerEntries);\n         String lastTranslator = this.getHeaderLastTranslator(headerEntries);\n         if (lastTranslated != null) {\n@@ -823,15 +819,15 @@ public class ResourceUtils implements Serializable {\n             Date lastModifiedDate = lastTranslated.getLastChanged();\n             if (lastTranslatedBy != null) {\n                 if (lastModifiedDate == null\n-                        || lastModifiedDate.after(headerRevisionDate)) {\n+                    || lastModifiedDate.after(headerRevisionDate)) {\n                     /**\n                      * Use translator details from last translated target if the\n                      * lastModifiedDate is null or if lastModifiedDate is after\n                      * date in header entries\n                      */\n                     lastTranslator =\n-                            generateLastTranslator(lastTranslatedBy.getName(),\n-                                    lastTranslatedBy.getEmail());\n+                        generateLastTranslator(lastTranslatedBy.getName(),\n+                            lastTranslatedBy.getEmail());\n                 }\n             } else {\n                 /**\n@@ -840,17 +836,15 @@ public class ResourceUtils implements Serializable {\n                  * Zanata\n                  */\n                 lastTranslator = generateLastTranslator(COPIED_BY_ZANATA_NAME,\n-                        COPIED_BY_ZANATA_NAME_EMAIL);\n+                    COPIED_BY_ZANATA_NAME_EMAIL);\n             }\n         }\n         return lastTranslator;\n     }\n \n     /**\n-     * @param name\n-     *            - name of person\n-     * @param email\n-     *            - email of person\n+     * @param name  - name of person\n+     * @param email - email of person\n      * @return {name} <{email}>\n      */\n     private String generateLastTranslator(String name, String email) {\n@@ -860,10 +854,9 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Returns a string representation of a Date for use in a PO file header.\n      *\n-     * @param aDate\n-     *            Date object to include in the Header\n+     * @param aDate Date object to include in the Header\n      * @return A string with the value of the date suitable for a PO file\n-     *         header.\n+     * header.\n      */\n     private String toPoHeaderString(Date aDate) {\n         if (aDate != null) {\n@@ -896,9 +889,9 @@ public class ResourceUtils implements Serializable {\n     private String getSystemVersion() {\n         try {\n             return ZANATA_GENERATOR_PREFIX + \" \"\n-                    + (ServiceLocator.instance()\n-                            .getInstance(ApplicationConfiguration.class))\n-                                    .getVersion();\n+                + (ServiceLocator.instance()\n+                .getInstance(ApplicationConfiguration.class))\n+                .getVersion();\n         } catch (Exception e) {\n             return ZANATA_GENERATOR_PREFIX + \" UNKNOWN\";\n         }\n@@ -925,20 +918,20 @@ public class ResourceUtils implements Serializable {\n \n     /**\n      * Returns the appropriate plural from for a given locale Id.\n-     *\n+     * <p>\n      * From HLocale.plurals if available, else from pluralforms.properties\n      *\n      * @return A default value if useDefault is True. Otherwise, null.\n      */\n     public String getPluralForms(LocaleId localeId, boolean checkDB,\n-            boolean useDefault) {\n+                                 boolean useDefault) {\n         if (checkDB) {\n             String dbPluralForms = getPluralFormsFromDB(localeId);\n             if (isNotEmpty(dbPluralForms)) {\n                 return dbPluralForms;\n             }\n         }\n-        final char[] alternateSeparators = { '.', '@' };\n+        final char[] alternateSeparators = {'.', '@'};\n         String javaLocale = localeId.toJavaName().toLowerCase();\n         // Replace all alternate separators for the \"_\" (Java) separator.\n         for (char sep : alternateSeparators) {\n@@ -974,10 +967,8 @@ public class ResourceUtils implements Serializable {\n      * HLocale.plurals if available, else 3) pluralforms.properties, else 4)\n      * assume no plural forms (nplurals=1)\n      *\n-     * @param poHeaders\n-     *            - HPoTargetHeader.entries\n-     * @param localeId\n-     *            - locale identifier\n+     * @param poHeaders - HPoTargetHeader.entries\n+     * @param localeId  - locale identifier\n      */\n     int getNumPlurals(@Nullable String poHeaders, LocaleId localeId) {\n         if (!isEmpty(poHeaders)) {\n@@ -992,27 +983,27 @@ public class ResourceUtils implements Serializable {\n                         log.debug(\"Unable to parse plurals\", e);\n                         // TODO return a warning to the user when uploading\n                         log.warn(\n-                                \"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n-                                localeId, poHeaders);\n+                            \"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n+                            localeId, poHeaders);\n                     }\n                 } else {\n                     // TODO return a warning to the user when uploading\n                     log.warn(\n-                            \"Empty plural forms header; using defaults for locale {}; headers: {}\",\n-                            localeId, poHeaders);\n+                        \"Empty plural forms header; using defaults for locale {}; headers: {}\",\n+                        localeId, poHeaders);\n                 }\n             } else {\n                 // otherwise (no header) use the locale default\n                 log.debug(\n-                        \"No plural forms header; using defaults for locale {}; headers: {}\",\n-                        localeId, poHeaders);\n+                    \"No plural forms header; using defaults for locale {}; headers: {}\",\n+                    localeId, poHeaders);\n             }\n         }\n         String localePluralForms = getPluralFormsForLocale(localeId);\n         if (localePluralForms == null) {\n             log.warn(\n-                    \"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\",\n-                    localeId, PLURALS_FILE, poHeaders);\n+                \"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\",\n+                localeId, PLURALS_FILE, poHeaders);\n             return DEFAULT_NPLURALS;\n         }\n         return extractNPlurals(localePluralForms);\n@@ -1032,11 +1023,9 @@ public class ResourceUtils implements Serializable {\n      * Returns HLocale.plurals if available, else value in\n      * pluralforms.properties\n      *\n-     * @param localeId\n-     *            id of the locale\n+     * @param localeId id of the locale\n      * @return the plural forms string\n-     * @throws RuntimeException\n-     *             if no plural forms are found\n+     * @throws RuntimeException if no plural forms are found\n      */\n     @Nullable\n     private String getPluralFormsForLocale(LocaleId localeId) {\n@@ -1073,31 +1062,29 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Process pluralforms string and return plural count.\n      *\n-     * @param pluralForms\n-     *            string to parse\n+     * @param pluralForms string to parse\n      */\n     int extractNPlurals(@Nonnull String pluralForms)\n-            throws NumberFormatException, PluralParseException {\n+        throws NumberFormatException, PluralParseException {\n         Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n         if (nPluralsMatcher.find()) {\n             String nPluralsString = nPluralsMatcher.group();\n             Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+                NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n             if (isNotEmpty(nPluralsString)) {\n                 return Integer.parseInt(nPluralsString);\n             }\n         }\n         throw new PluralParseException(\n-                \"can\\'t find valid nplurals in plural forms string: \"\n-                        + pluralForms);\n+            \"can\\'t find valid nplurals in plural forms string: \"\n+                + pluralForms);\n     }\n \n     /**\n      * Return if pluralForms is valid (positive value)\n      *\n-     * @param pluralForms\n-     *            string to check\n+     * @param pluralForms string to check\n      */\n     public boolean isValidPluralForms(@Nonnull String pluralForms) {\n         if (!PLURAL_FORM_PATTERN.matcher(pluralForms).find()) {\n@@ -1108,7 +1095,7 @@ public class ResourceUtils implements Serializable {\n         while (nPluralsMatcher.find()) {\n             nPluralsString = nPluralsMatcher.group();\n             Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+                NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n             break;\n         }\n@@ -1129,7 +1116,7 @@ public class ResourceUtils implements Serializable {\n      * @see #pushPoTargetComment\n      */\n     protected void pullPoTargetComment(HPoTargetHeader fromHeader,\n-            PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n+                                       PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n         StringBuilder sb = new StringBuilder();\n         HSimpleComment comment = fromHeader.getComment();\n         if (comment != null) {\n@@ -1152,8 +1139,9 @@ public class ResourceUtils implements Serializable {\n             }\n         }\n         for (TranslatorCredit credit : zanataCredits) {\n-            if (sb.length() != 0)\n+            if (sb.length() != 0) {\n                 sb.append(NEWLINE);\n+            }\n             sb.append(credit);\n             sb.append(' ');\n             sb.append(ZANATA_TAG);\n@@ -1174,7 +1162,7 @@ public class ResourceUtils implements Serializable {\n     }\n \n     public void transferToAbstractResourceMeta(HDocument from,\n-            AbstractResourceMeta to) {\n+                                               AbstractResourceMeta to) {\n         to.setContentType(from.getContentType());\n         to.setLang(from.getLocale().getLocaleId());\n         to.setName(from.getDocId());\n@@ -1185,8 +1173,8 @@ public class ResourceUtils implements Serializable {\n     }\n \n     public void transferToResourceExtensions(HDocument from,\n-            ExtensionSet<AbstractResourceMetaExtension> to,\n-            Set<String> enabledExtensions) {\n+                                             ExtensionSet<AbstractResourceMetaExtension> to,\n+                                             Set<String> enabledExtensions) {\n         if (enabledExtensions.contains(PoHeader.ID)) {\n             PoHeader poHeaderExt = new PoHeader();\n             if (from.getPoHeader() != null) {\n@@ -1201,13 +1189,13 @@ public class ResourceUtils implements Serializable {\n      * @param to\n      * @param enabledExtensions\n      * @param locale\n-     * @see #transferFromTranslationsResourceExtensions\n      * @return true only if extensions were found\n+     * @see #transferFromTranslationsResourceExtensions\n      */\n     public boolean transferToTranslationsResourceExtensions(HDocument from,\n-            ExtensionSet<TranslationsResourceExtension> to,\n-            Set<String> enabledExtensions, HLocale locale,\n-            List<HTextFlowTarget> hTargets) {\n+                                                            ExtensionSet<TranslationsResourceExtension> to,\n+                                                            Set<String> enabledExtensions, HLocale locale,\n+                                                            List<HTextFlowTarget> hTargets) {\n         boolean found = false;\n         if (enabledExtensions.contains(PoTargetHeader.ID)) {\n             log.debug(\"PoTargetHeader requested\");\n@@ -1224,39 +1212,39 @@ public class ResourceUtils implements Serializable {\n                 fromHeader.setEntries(\"\");\n             }\n             transferToPoTargetHeader(fromHeader, poTargetHeader, hTargets,\n-                    locale);\n+                locale);\n             to.add(poTargetHeader);\n         }\n         return found;\n     }\n \n     public void transferToTextFlowExtensions(HTextFlow from,\n-            ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n+                                             ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n         if (enabledExtensions.contains(PotEntryHeader.ID)\n-                && from.getPotEntryData() != null) {\n+            && from.getPotEntryData() != null) {\n             PotEntryHeader header = new PotEntryHeader();\n             transferToPotEntryHeader(from.getPotEntryData(), header);\n             log.debug(\"set header:{}\", from.getPotEntryData());\n             to.add(header);\n         }\n         if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n+            && from.getComment() != null) {\n             SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n+                new SimpleComment(from.getComment().getComment());\n             log.debug(\"set comment:{}\", from.getComment().getComment());\n             to.add(comment);\n         }\n     }\n \n     /**\n-     * @see #transferFromPotEntryHeader(org.zanata.rest.dto.extensions.gettext.PotEntryHeader,\n-     *      org.zanata.model.po.HPotEntryData,\n-     *      org.zanata.rest.dto.resource.TextFlow)\n      * @param from\n      * @param to\n+     * @see #transferFromPotEntryHeader(org.zanata.rest.dto.extensions.gettext.PotEntryHeader,\n+     * org.zanata.model.po.HPotEntryData,\n+     * org.zanata.rest.dto.resource.TextFlow)\n      */\n     private void transferToPotEntryHeader(HPotEntryData from,\n-            PotEntryHeader to) {\n+                                          PotEntryHeader to) {\n         to.setContext(from.getContext());\n         List<String> flags = new ArrayList<String>(0);\n         if (from.getFlags() != null) {\n@@ -1277,12 +1265,12 @@ public class ResourceUtils implements Serializable {\n      * @todo merge with {@link #transferToTextFlowTarget}\n      */\n     public void transferToTextFlowTargetExtensions(HTextFlowTarget from,\n-            ExtensionSet<TextFlowTargetExtension> to,\n-            Set<String> enabledExtensions) {\n+                                                   ExtensionSet<TextFlowTargetExtension> to,\n+                                                   Set<String> enabledExtensions) {\n         if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n+            && from.getComment() != null) {\n             SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n+                new SimpleComment(from.getComment().getComment());\n             to.add(comment);\n         }\n     }\n@@ -1311,13 +1299,13 @@ public class ResourceUtils implements Serializable {\n      */\n     @SuppressWarnings(\"deprecation\")\n     public void transferToTextFlowTarget(HTextFlowTarget from,\n-            TextFlowTarget to, boolean markTranslatedAsApproved) {\n+                                         TextFlowTarget to, boolean markTranslatedAsApproved) {\n         if (from.getTextFlow().isPlural()) {\n             to.setContents(from.getContents());\n         } else if (!from.getContents().isEmpty()) {\n             to.setContents(from.getContents().get(0));\n         } else {\n-            to.setContents(Collections.<String> emptyList());\n+            to.setContents(Collections.<String>emptyList());\n         }\n         // TODO rhbz953734 - at the moment we will map review state into old\n         // state for compatibility\n@@ -1327,22 +1315,22 @@ public class ResourceUtils implements Serializable {\n         HPerson translator = from.getTranslator();\n         if (translator != null) {\n             to.setTranslator(\n-                    new Person(translator.getEmail(), translator.getName()));\n+                new Person(translator.getEmail(), translator.getName()));\n         }\n     }\n \n     private static ContentState mapContentState(ContentState realState,\n-            boolean markTranslatedAsApproved) {\n+                                                boolean markTranslatedAsApproved) {\n         if (markTranslatedAsApproved) {\n             switch (realState) {\n-            case Translated:\n-                return ContentState.Approved;\n+                case Translated:\n+                    return ContentState.Approved;\n \n-            case Rejected:\n-                return ContentState.NeedReview;\n+                case Rejected:\n+                    return ContentState.NeedReview;\n \n-            default:\n-                return realState;\n+                default:\n+                    return realState;\n             }\n         }\n         return realState;\n@@ -1356,12 +1344,12 @@ public class ResourceUtils implements Serializable {\n         this.transferToResource(document, entity);\n         // handle extensions\n         this.transferToResourceExtensions(document, entity.getExtensions(true),\n-                extensions);\n+            extensions);\n         for (HTextFlow htf : document.getTextFlows()) {\n             TextFlow tf = new TextFlow(htf.getResId(),\n-                    document.getLocale().getLocaleId());\n+                document.getLocale().getLocaleId());\n             this.transferToTextFlowExtensions(htf, tf.getExtensions(true),\n-                    extensions);\n+                extensions);\n             this.transferToTextFlow(htf, tf);\n             entity.getTextFlows().add(tf);\n         }\n@@ -1374,24 +1362,23 @@ public class ResourceUtils implements Serializable {\n      * @param locale\n      * @param enabledExtensions\n      * @param hTargets\n-     * @param apiVersion\n-     *            TODO this will take api version in the future\n+     * @param apiVersion        TODO this will take api version in the future\n      * @return true only if some data was found (text flow targets, or some\n-     *         metadata extensions)\n+     * metadata extensions)\n      */\n     public boolean transferToTranslationsResource(TranslationsResource transRes,\n-            HDocument document, HLocale locale, Set<String> enabledExtensions,\n-            List<HTextFlowTarget> hTargets, boolean markTranslatedAsApproved) {\n+                                                  HDocument document, HLocale locale, Set<String> enabledExtensions,\n+                                                  List<HTextFlowTarget> hTargets, boolean markTranslatedAsApproved) {\n         boolean found = this.transferToTranslationsResourceExtensions(document,\n-                transRes.getExtensions(true), enabledExtensions, locale,\n-                hTargets);\n+            transRes.getExtensions(true), enabledExtensions, locale,\n+            hTargets);\n         for (HTextFlowTarget hTarget : hTargets) {\n             found = true;\n             TextFlowTarget target = new TextFlowTarget();\n             target.setResId(hTarget.getTextFlow().getResId());\n             this.transferToTextFlowTarget(hTarget, target, markTranslatedAsApproved);\n             this.transferToTextFlowTargetExtensions(hTarget,\n-                    target.getExtensions(true), enabledExtensions);\n+                target.getExtensions(true), enabledExtensions);\n             transRes.getTextFlowTargets().add(target);\n         }\n         return found;\n@@ -1401,20 +1388,19 @@ public class ResourceUtils implements Serializable {\n      * Ensures that any extensions sent with the current query are valid for\n      * this context.\n      *\n-     * @param requestedExt\n-     *            Extensions to be validated\n+     * @param requestedExt Extensions to be validated\n      */\n     public static void validateExtensions(Set<String> requestedExt) {\n         Set<String> validExtensions = ExtensionType.asStringSet();\n         if (!CollectionUtils.isSubCollection(requestedExt, validExtensions)) {\n             @SuppressWarnings(\"unchecked\")\n             Collection<String> invalidExtensions =\n-                    CollectionUtils.subtract(requestedExt, validExtensions);\n+                CollectionUtils.subtract(requestedExt, validExtensions);\n             Response response =\n-                    Response.status(Status.BAD_REQUEST)\n-                            .entity(\"Unsupported Extensions within this context: \"\n-                                    + StringUtils.join(invalidExtensions, \",\"))\n-                            .build();\n+                Response.status(Status.BAD_REQUEST)\n+                    .entity(\"Unsupported Extensions within this context: \"\n+                        + StringUtils.join(invalidExtensions, \",\"))\n+                    .build();\n             throw new WebApplicationException(response);\n         }\n     }\n",
            "diff_size": 221
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "368",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/2/ResourceUtils.java\nindex 80b340aeb3..c739fc00bf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/2/ResourceUtils.java\n@@ -31,7 +31,6 @@ import javax.persistence.EntityManager;\n import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.commons.collections.CollectionUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -78,11 +77,11 @@ import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.apache.commons.lang3.StringUtils.isNotEmpty;\n // TODO move plural logic out of ResourceUtils into a dedicated class\n \n+\n @Named(\"resourceUtils\")\n @RequestScoped\n public class ResourceUtils implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ResourceUtils.class);\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ResourceUtils.class);\n     private static final long serialVersionUID = -969189290416018542L;\n \n     /**\n@@ -92,39 +91,37 @@ public class ResourceUtils implements Serializable {\n     private static final String ZANATA_GENERATOR_PREFIX = \"Zanata\";\n     private static final String ZANATA_TAG = \"#zanata\";\n     private static final String PO_DATE_FORMAT = \"yyyy-MM-dd hh:mmZ\";\n-    private static final String PO_DEFAULT_CONTENT_TYPE =\n-            \"text/plain; charset=UTF-8\";\n+    private static final String PO_DEFAULT_CONTENT_TYPE = \"text/plain; charset=UTF-8\";\n \n     /**\n      * PO Header entries\n      */\n     private static final String LAST_TRANSLATOR_HDR = \"Last-Translator\";\n-    private static final String PO_REVISION_DATE_HDR =\n-            HeaderFields.KEY_PoRevisionDate;\n-    private static final String LANGUAGE_TEAM_HDR =\n-            HeaderFields.KEY_LanguageTeam;\n+    private static final String PO_REVISION_DATE_HDR = HeaderFields.KEY_PoRevisionDate;\n+    private static final String LANGUAGE_TEAM_HDR = HeaderFields.KEY_LanguageTeam;\n     private static final String X_GENERATOR_HDR = \"X-Generator\";\n     private static final String LANGUAGE_HDR = HeaderFields.KEY_Language;\n     private static final String CONTENT_TYPE_HDR = HeaderFields.KEY_ContentType;\n     private static final String PLURAL_FORMS_HDR = \"Plural-Forms\";\n     // TODO we should need only one regex, with a capture group for nplurals\n-    private static final Pattern PLURAL_FORM_PATTERN =\n-            Pattern.compile(\"nplurals=[0-9]+;\\\\s?plural=*\");\n-    private static final Pattern NPLURALS_TAG_PATTERN =\n-            Pattern.compile(\"nplurals=\");\n-    private static final Pattern NPLURALS_PATTERN =\n-            Pattern.compile(\"nplurals=[0-9]+\");\n+    private static final Pattern PLURAL_FORM_PATTERN = Pattern.compile(\"nplurals=[0-9]+;\\\\s?plural=*\");\n+    private static final Pattern NPLURALS_TAG_PATTERN = Pattern.compile(\"nplurals=\");\n+    private static final Pattern NPLURALS_PATTERN = Pattern.compile(\"nplurals=[0-9]+\");\n     private static final String PLURALS_FILE = \"pluralforms.properties\";\n     private static final int DEFAULT_NPLURALS = 1;\n     private static final String DEFAULT_PLURAL_FORM = \"nplurals=1; plural=0\";\n+\n     public static final int MAX_TARGET_CONTENTS = 6;\n     private Properties pluralForms;\n+\n     public static final String COPIED_BY_ZANATA_NAME = \"Copied by Zanata\";\n-    public static final String COPIED_BY_ZANATA_NAME_EMAIL =\n-            \"copied-by-zanata@zanata.org\";\n+\n+    public static final String COPIED_BY_ZANATA_NAME_EMAIL = \"copied-by-zanata@zanata.org\";\n+\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     @Inject\n     private EntityManager entityManager;\n+\n     @Inject\n     private LocaleDAO localeDAO;\n \n@@ -133,8 +130,9 @@ public class ResourceUtils implements Serializable {\n         try {\n             if (pluralForms == null) {\n                 pluralForms = new Properties();\n-                pluralForms.load(this.getClass().getClassLoader()\n-                        .getResourceAsStream(PLURALS_FILE));\n+                pluralForms.load(this.getClass()\n+                                     .getClassLoader()\n+                                     .getResourceAsStream(PLURALS_FILE));\n             }\n         } catch (IOException e) {\n             log.error(\"There was an error loading plural forms.\", e);\n@@ -153,21 +151,21 @@ public class ResourceUtils implements Serializable {\n      * @param to\n      * @return\n      */\n-    boolean transferFromTextFlows(List<TextFlow> from, HDocument to,\n+\n+    boolean transferFromTextFlows(List<TextFlow> from,\n+        HDocument to,\n             Set<String> enabledExtensions, int nextDocRev) {\n         boolean changed = false;\n         to.getTextFlows().clear();\n         Set<String> incomingIds = new HashSet<String>();\n-        Set<String> previousIds =\n-                new HashSet<String>(to.getAllTextFlows().keySet());\n+        Set<String> previousIds = new HashSet<String>(to.getAllTextFlows().keySet());\n         int count = 0;\n         for (TextFlow tf : from) {\n             if (!incomingIds.add(tf.getId())) {\n-                Response response = Response.status(Status.BAD_REQUEST).entity(\n-                        \"encountered TextFlow with duplicate ID \" + tf.getId())\n-                        .build();\n-                log.warn(\n-                        \"encountered TextFlow with duplicate ID {}\", tf.getId());\n+                Response response = Response.status(Status.BAD_REQUEST).entity(\"encountered TextFlow with duplicate ID \" + tf.getId())\n+                                                                       .build();\n+                log.warn(\"encountered TextFlow with duplicate ID {}\",\n+tf.getId());\n                 throw new WebApplicationException(response);\n             }\n             HTextFlow textFlow;\n@@ -183,8 +181,7 @@ public class ResourceUtils implements Serializable {\n                     // changed\n                     textFlow.setRevision(nextDocRev);\n                     changed = true;\n-                    for (HTextFlowTarget targ : textFlow.getTargets()\n-                            .values()) {\n+                    for (HTextFlowTarget targ : textFlow.getTargets().values()) {\n                         // if (targ.getState() != ContentState.New)\n                         if (targ.getState().isTranslated()) {\n                             targ.setState(ContentState.NeedReview);\n@@ -244,13 +241,14 @@ public class ResourceUtils implements Serializable {\n      * @param enabledExtensions\n      * @return\n      */\n-    public boolean transferFromResource(Resource from, HDocument to,\n-            Set<String> enabledExtensions, HLocale locale, int nextDocRev) {\n+\n+    public boolean transferFromResource(Resource from,\n+           HDocument to,\n+           Set<String> enabledExtensions,\n+           HLocale locale, int nextDocRev) {\n         boolean changed = false;\n-        changed |= transferFromResourceMetadata(from, to, enabledExtensions,\n-                locale, nextDocRev);\n-        changed |= transferFromTextFlows(from.getTextFlows(), to,\n-                enabledExtensions, nextDocRev);\n+        changed |= transferFromResourceMetadata(from, to, enabledExtensions, locale, nextDocRev);\n+        changed |= transferFromTextFlows(from.getTextFlows(), to, enabledExtensions, nextDocRev);\n         return changed;\n     }\n \n@@ -263,9 +261,11 @@ public class ResourceUtils implements Serializable {\n      * @param enabledExtensions\n      * @return\n      */\n+\n     public boolean transferFromResourceMetadata(AbstractResourceMeta from,\n-            HDocument to, Set<String> enabledExtensions, HLocale locale,\n-            int nextDocRev) {\n+           HDocument to,\n+           Set<String> enabledExtensions,\n+           HLocale locale, int nextDocRev) {\n         boolean changed = false;\n         // name\n         if (!equals(from.getName(), to.getDocId())) {\n@@ -284,8 +284,7 @@ public class ResourceUtils implements Serializable {\n             changed = true;\n         }\n         // handle extensions\n-        changed |= transferFromResourceExtensions(from.getExtensions(true), to,\n-                enabledExtensions);\n+        changed |= transferFromResourceExtensions(from.getExtensions(true), to, enabledExtensions);\n         if (changed)\n             to.setRevision(nextDocRev);\n         return changed;\n@@ -301,9 +300,9 @@ public class ResourceUtils implements Serializable {\n      * @return\n      * @see #transferFromResource\n      */\n-    private boolean transferFromResourceExtensions(\n-            ExtensionSet<AbstractResourceMetaExtension> from, HDocument to,\n-            Set<String> enabledExtensions) {\n+\n+    private boolean transferFromResourceExtensions(ExtensionSet<AbstractResourceMetaExtension> from,\n+            HDocument to, Set<String> enabledExtensions) {\n         boolean changed = false;\n         if (enabledExtensions.contains(PoHeader.ID)) {\n             PoHeader poHeaderExt = from.findByType(PoHeader.class);\n@@ -334,23 +333,21 @@ public class ResourceUtils implements Serializable {\n      * @return\n      * @see #transferToTranslationsResourceExtensions\n      */\n-    public boolean transferFromTranslationsResourceExtensions(\n-            ExtensionSet<TranslationsResourceExtension> from, HDocument doc,\n-            Set<String> enabledExtensions, HLocale locale,\n-            MergeType mergeType) {\n+\n+    public boolean transferFromTranslationsResourceExtensions(ExtensionSet<TranslationsResourceExtension> from,\n+           HDocument doc,\n+           Set<String> enabledExtensions,\n+           HLocale locale, MergeType mergeType) {\n         boolean changed = false;\n         if (enabledExtensions.contains(PoTargetHeader.ID)) {\n-            PoTargetHeader fromTargetHeader =\n-                    from.findByType(PoTargetHeader.class);\n+            PoTargetHeader fromTargetHeader = from.findByType(PoTargetHeader.class);\n             if (fromTargetHeader != null) {\n                 log.debug(\"found PO header for locale: {}\", locale);\n                 try {\n-                    changed = tryGetOrCreateTargetHeader(doc, locale, mergeType,\n-                            changed, fromTargetHeader);\n+                    changed = tryGetOrCreateTargetHeader(doc, locale, mergeType, changed, fromTargetHeader);\n                 } catch (org.hibernate.exception.ConstraintViolationException e) {\n                     entityManager.refresh(doc);\n-                    changed = tryGetOrCreateTargetHeader(doc, locale, mergeType,\n-                            changed, fromTargetHeader);\n+                    changed = tryGetOrCreateTargetHeader(doc, locale, mergeType, changed, fromTargetHeader);\n                 }\n             } else {\n                 changed |= doc.getPoTargetHeaders().remove(locale) != null;\n@@ -359,36 +356,32 @@ public class ResourceUtils implements Serializable {\n         return changed;\n     }\n \n-    private boolean tryGetOrCreateTargetHeader(HDocument doc, HLocale locale,\n-            MergeType mergeType, boolean changed,\n-            PoTargetHeader fromTargetHeader) {\n+    private boolean tryGetOrCreateTargetHeader(HDocument doc,\n+            HLocale locale,\n+            MergeType mergeType, boolean changed, PoTargetHeader fromTargetHeader) {\n         HPoTargetHeader toTargetHeader = doc.getPoTargetHeaders().get(locale);\n         if (toTargetHeader == null) {\n             changed = true;\n             toTargetHeader = new HPoTargetHeader();\n             toTargetHeader.setTargetLanguage(locale);\n             toTargetHeader.setDocument(doc);\n-            transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n-                    MergeType.IMPORT); // return\n+            transferFromPoTargetHeader(fromTargetHeader, toTargetHeader, MergeType.IMPORT); // return\n             // value\n             // not\n             // needed\n             entityManager.persist(toTargetHeader);\n             entityManager.flush();\n         } else {\n-            changed |= transferFromPoTargetHeader(fromTargetHeader,\n-                    toTargetHeader, mergeType);\n+            changed |= transferFromPoTargetHeader(fromTargetHeader, toTargetHeader, mergeType);\n         }\n         return changed;\n     }\n \n-    private boolean transferFromTextFlowExtensions(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n+    private boolean transferFromTextFlowExtensions(TextFlow from, HTextFlow to, Set<String> enabledExtensions) {\n         boolean changed = false;\n         ExtensionSet<TextFlowExtension> extensions = from.getExtensions(true);\n         if (enabledExtensions.contains(PotEntryHeader.ID)) {\n-            PotEntryHeader entryHeader =\n-                    extensions.findByType(PotEntryHeader.class);\n+            PotEntryHeader entryHeader = extensions.findByType(PotEntryHeader.class);\n             if (entryHeader != null) {\n                 HPotEntryData hEntryHeader = to.getPotEntryData();\n                 if (hEntryHeader == null) {\n@@ -397,8 +390,7 @@ public class ResourceUtils implements Serializable {\n                     to.setPotEntryData(hEntryHeader);\n                     log.debug(\"set potentryheader\");\n                 }\n-                changed |= transferFromPotEntryHeader(entryHeader, hEntryHeader,\n-                        from);\n+                changed |= transferFromPotEntryHeader(entryHeader, hEntryHeader, from);\n             }\n         }\n         if (enabledExtensions.contains(SimpleComment.ID)) {\n@@ -426,8 +418,8 @@ public class ResourceUtils implements Serializable {\n      * @param textFlow\n      * @return\n      */\n-    private boolean transferFromPotEntryHeader(PotEntryHeader from,\n-            HPotEntryData to, TextFlow textFlow) {\n+\n+    private boolean transferFromPotEntryHeader(PotEntryHeader from, HPotEntryData to, TextFlow textFlow) {\n         boolean changed = false;\n         if (!equals(from.getContext(), to.getContext())) {\n             changed = true;\n@@ -436,9 +428,7 @@ public class ResourceUtils implements Serializable {\n         List<String> flagList = from.getFlags();\n         // rhbz1012502 - should not store fuzzy tag in source document\n         if (flagList.contains(\"fuzzy\")) {\n-            throw new WebApplicationException(String.format(\n-                    \"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\",\n-                    textFlow.getId(), textFlow.getContents()), 422);\n+            throw new WebApplicationException(String.format(\"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\", textFlow.getId(), textFlow.getContents()), 422);\n         }\n         String flags = StringUtil.concat(flagList, ',');\n         if (flagList.isEmpty()) {\n@@ -468,8 +458,8 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromTranslationsResourceExtensions\n      * @see #transferToPoTargetHeader\n      */\n-    private boolean transferFromPoTargetHeader(PoTargetHeader from,\n-            HPoTargetHeader to, MergeType mergeType) {\n+\n+    private boolean transferFromPoTargetHeader(PoTargetHeader from, HPoTargetHeader to, MergeType mergeType) {\n         boolean changed = pushPoTargetComment(from, to, mergeType);\n         // TODO we should probably block PoHeader/POT-specific entries\n         // ie POT-Creation-Date, Project-Id-Version, Report-Msgid-Bugs-To\n@@ -488,8 +478,8 @@ public class ResourceUtils implements Serializable {\n      * @return\n      * @see #pullPoTargetComment\n      */\n-    protected boolean pushPoTargetComment(PoTargetHeader fromHeader,\n-            HPoTargetHeader toHeader, MergeType mergeType) {\n+\n+    protected boolean pushPoTargetComment(PoTargetHeader fromHeader, HPoTargetHeader toHeader, MergeType mergeType) {\n         boolean changed = false;\n         HSimpleComment hComment = toHeader.getComment();\n         if (hComment == null) {\n@@ -510,7 +500,6 @@ public class ResourceUtils implements Serializable {\n                     changed = true;\n                 }\n                 break;\n-\n             default:\n                 // AUTO or anything else will merge comments\n                 // to merge, we just append new lines, skip old lines\n@@ -528,7 +517,6 @@ public class ResourceUtils implements Serializable {\n                     }\n                 }\n                 break;\n-\n             }\n             if (changed) {\n                 hComment.setComment(sb.toString());\n@@ -545,6 +533,7 @@ public class ResourceUtils implements Serializable {\n      * @param tagToSkip\n      * @return\n      */\n+\n     static List<String> splitLines(String s, String tagToSkip) {\n         if (s.isEmpty()) {\n             return Collections.emptyList();\n@@ -593,8 +582,7 @@ public class ResourceUtils implements Serializable {\n         return a.equals(b);\n     }\n \n-    private boolean transferFromTextFlow(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n+    private boolean transferFromTextFlow(TextFlow from, HTextFlow to, Set<String> enabledExtensions) {\n         boolean changed = false;\n         if (!equals(from.getContents(), to.getContents())) {\n             to.setContents(from.getContents());\n@@ -628,8 +616,10 @@ public class ResourceUtils implements Serializable {\n      * @see #transferToTranslationsResourceExtensions\n      * @see #transferFromPoTargetHeader\n      */\n+\n     private void transferToPoTargetHeader(HPoTargetHeader from,\n-            PoTargetHeader to, List<HTextFlowTarget> hTargets, HLocale locale) {\n+            PoTargetHeader to,\n+            List<HTextFlowTarget> hTargets, HLocale locale) {\n         pullPoTargetComment(from, to, hTargets);\n         to.getEntries().addAll(this.headerToList(from.getEntries()));\n         populateHeaderEntries(to.getEntries(), hTargets, locale);\n@@ -641,6 +631,7 @@ public class ResourceUtils implements Serializable {\n      * @param entries\n      *            The header entries' string.\n      */\n+\n     private List<HeaderEntry> headerToList(final String entries) {\n         return PoUtility.headerToList(entries);\n     }\n@@ -656,22 +647,22 @@ public class ResourceUtils implements Serializable {\n      * @param locale\n      *            The locale that is bein\n      */\n+\n     private void populateHeaderEntries(final List<HeaderEntry> headerEntries,\n-            final List<HTextFlowTarget> hTargets, final HLocale locale) {\n-        final Map<String, HeaderEntry> containedHeaders =\n-                new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n+            final List<HTextFlowTarget> hTargets,\n+                final HLocale locale) {\n+        final Map<String, HeaderEntry> containedHeaders = new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n         HTextFlowTarget lastChangedTarget = getLastChangedTarget(hTargets);\n         // Collect the existing header entries\n         for (HeaderEntry entry : headerEntries) {\n             containedHeaders.put(entry.getKey(), entry);\n         }\n         // Add / Replace headers\n-        Date revisionDate =\n-                this.getRevisionDate(headerEntries, lastChangedTarget);\n+        Date revisionDate = this.getRevisionDate(headerEntries, lastChangedTarget);\n         HeaderEntry headerEntry = containedHeaders.get(PO_REVISION_DATE_HDR);\n         if (headerEntry == null) {\n             headerEntry = new HeaderEntry(PO_REVISION_DATE_HDR,\n-                    this.toPoHeaderString(revisionDate));\n+                this.toPoHeaderString(revisionDate));\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.toPoHeaderString(revisionDate));\n@@ -679,51 +670,47 @@ public class ResourceUtils implements Serializable {\n         headerEntry = containedHeaders.get(LAST_TRANSLATOR_HDR);\n         if (headerEntry == null) {\n             headerEntry = new HeaderEntry(LAST_TRANSLATOR_HDR,\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n+                this.getLastTranslator(lastChangedTarget, headerEntries));\n             headerEntries.add(headerEntry);\n         } else {\n-            headerEntry.setValue(\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n+            headerEntry.setValue(this.getLastTranslator(lastChangedTarget, headerEntries));\n         }\n         headerEntry = containedHeaders.get(LANGUAGE_TEAM_HDR);\n         if (headerEntry == null) {\n-            headerEntry = new HeaderEntry(LANGUAGE_TEAM_HDR,\n-                    this.getLanguageTeam(locale));\n+            headerEntry = new HeaderEntry(LANGUAGE_TEAM_HDR, this.getLanguageTeam(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             // Keep the original value if provided\n+\n         }\n         headerEntry = containedHeaders.get(LANGUAGE_HDR);\n         if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n+            headerEntry = new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.getLanguage(locale));\n         }\n         headerEntry = containedHeaders.get(X_GENERATOR_HDR);\n         if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n+            headerEntry = new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(this.getSystemVersion());\n         }\n         headerEntry = containedHeaders.get(CONTENT_TYPE_HDR);\n         if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n+            headerEntry = new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n             headerEntries.add(headerEntry);\n         } else {\n             headerEntry.setValue(PO_DEFAULT_CONTENT_TYPE);\n         }\n         headerEntry = containedHeaders.get(PLURAL_FORMS_HDR);\n         if (headerEntry == null || isBlank(headerEntry.getValue())) {\n-            headerEntry = new HeaderEntry(PLURAL_FORMS_HDR,\n-                    this.getPluralForms(locale));\n+            headerEntry = new HeaderEntry(PLURAL_FORMS_HDR, this.getPluralForms(locale));\n             headerEntries.add(headerEntry);\n         } else {\n             // Keep the original if provided\n+\n         }\n     }\n \n@@ -735,16 +722,17 @@ public class ResourceUtils implements Serializable {\n      * @return The Revision Date header value, or null if no such header is\n      *         found or the date cannot be parsed.\n      */\n+\n     private Date getHeaderRevisionDate(final List<HeaderEntry> headerEntries) {\n         Date poFileRevisionDate = null;\n         for (HeaderEntry entry : headerEntries) {\n             if (entry.getKey().equalsIgnoreCase(PO_REVISION_DATE_HDR)) {\n-                SimpleDateFormat dateFormat =\n-                        new SimpleDateFormat(PO_DATE_FORMAT);\n+                SimpleDateFormat dateFormat = new SimpleDateFormat(PO_DATE_FORMAT);\n                 try {\n                     poFileRevisionDate = dateFormat.parse(entry.getValue());\n                 } catch (ParseException e) {\n                     // found the header but date could not be parsed\n+\n                 }\n                 break;\n             }\n@@ -752,8 +740,7 @@ public class ResourceUtils implements Serializable {\n         return poFileRevisionDate;\n     }\n \n-    private String\n-            getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n+    private String getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n         for (HeaderEntry entry : headerEntries) {\n             if (entry.getKey().equalsIgnoreCase(LAST_TRANSLATOR_HDR)) {\n                 return entry.getValue();\n@@ -767,8 +754,9 @@ public class ResourceUtils implements Serializable {\n      * file's header and in the last translated target. If the system cannot\n      * determine a suitable Revision date, a null value is returned.\n      */\n+\n     private Date getRevisionDate(final List<HeaderEntry> headerEntries,\n-            final HTextFlowTarget lastTranslated) {\n+        final HTextFlowTarget lastTranslated) {\n         Date poFileRevisionDate = this.getHeaderRevisionDate(headerEntries);\n         Date translationsRevisionDate = null;\n         if (lastTranslated != null) {\n@@ -776,13 +764,13 @@ public class ResourceUtils implements Serializable {\n         }\n         if (translationsRevisionDate != null) {\n             if (poFileRevisionDate != null) {\n-                return translationsRevisionDate.after(poFileRevisionDate)\n-                        ? translationsRevisionDate : poFileRevisionDate;\n+                return translationsRevisionDate.after(poFileRevisionDate) ? translationsRevisionDate : poFileRevisionDate;\n             } else {\n                 return translationsRevisionDate;\n             }\n         } else {\n-            return poFileRevisionDate == null ? null : poFileRevisionDate;\n+            return poFileRevisionDate == null ? null\n+                : poFileRevisionDate;\n         }\n     }\n \n@@ -791,8 +779,8 @@ public class ResourceUtils implements Serializable {\n      *            - List of HTextFlowTarget\n      * @return last changed/updated HTextFlowTarget from the list\n      */\n-    private HTextFlowTarget\n-            getLastChangedTarget(final List<HTextFlowTarget> translations) {\n+\n+    private HTextFlowTarget getLastChangedTarget(final List<HTextFlowTarget> translations) {\n         Date lastUpdate = new Date(Long.MIN_VALUE);\n         HTextFlowTarget lastChanged = null;\n         for (HTextFlowTarget tft : translations) {\n@@ -814,24 +802,23 @@ public class ResourceUtils implements Serializable {\n      *            The PO header entries.\n      * @return A string with the value of the last translator.\n      */\n+\n     private String getLastTranslator(final HTextFlowTarget lastTranslated,\n-            final List<HeaderEntry> headerEntries) {\n+        final List<HeaderEntry> headerEntries) {\n         Date headerRevisionDate = this.getHeaderRevisionDate(headerEntries);\n         String lastTranslator = this.getHeaderLastTranslator(headerEntries);\n         if (lastTranslated != null) {\n             HPerson lastTranslatedBy = lastTranslated.getTranslator();\n             Date lastModifiedDate = lastTranslated.getLastChanged();\n             if (lastTranslatedBy != null) {\n-                if (lastModifiedDate == null\n-                        || lastModifiedDate.after(headerRevisionDate)) {\n+                if (lastModifiedDate == null || lastModifiedDate.after(headerRevisionDate)) {\n                     /**\n                      * Use translator details from last translated target if the\n                      * lastModifiedDate is null or if lastModifiedDate is after\n                      * date in header entries\n                      */\n-                    lastTranslator =\n-                            generateLastTranslator(lastTranslatedBy.getName(),\n-                                    lastTranslatedBy.getEmail());\n+                    lastTranslator = generateLastTranslator(lastTranslatedBy.getName(),\n+lastTranslatedBy.getEmail());\n                 }\n             } else {\n                 /**\n@@ -839,8 +826,7 @@ public class ResourceUtils implements Serializable {\n                  * without user (e.g upload, copyTrans), set translator to be\n                  * Zanata\n                  */\n-                lastTranslator = generateLastTranslator(COPIED_BY_ZANATA_NAME,\n-                        COPIED_BY_ZANATA_NAME_EMAIL);\n+                lastTranslator = generateLastTranslator(COPIED_BY_ZANATA_NAME, COPIED_BY_ZANATA_NAME_EMAIL);\n             }\n         }\n         return lastTranslator;\n@@ -853,8 +839,10 @@ public class ResourceUtils implements Serializable {\n      *            - email of person\n      * @return {name} <{email}>\n      */\n+\n     private String generateLastTranslator(String name, String email) {\n-        return name + \" <\" + email + \">\";\n+        return name + \" <\"\n+        + email + \">\";\n     }\n \n     /**\n@@ -865,6 +853,7 @@ public class ResourceUtils implements Serializable {\n      * @return A string with the value of the date suitable for a PO file\n      *         header.\n      */\n+\n     private String toPoHeaderString(Date aDate) {\n         if (aDate != null) {\n             SimpleDateFormat dateFormat = new SimpleDateFormat(PO_DATE_FORMAT);\n@@ -877,6 +866,7 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Returns the Language Team PO file header for a given locale.\n      */\n+\n     private String getLanguageTeam(final HLocale hLocale) {\n         return hLocale.retrieveDisplayName();\n     }\n@@ -886,6 +876,7 @@ public class ResourceUtils implements Serializable {\n      *\n      * @param locale\n      */\n+\n     String getLanguage(HLocale locale) {\n         return StringUtils.replace(locale.getLocaleId().toString(), \"-\", \"_\");\n     }\n@@ -893,12 +884,10 @@ public class ResourceUtils implements Serializable {\n     /**\n      * Returns the application version.\n      */\n+\n     private String getSystemVersion() {\n         try {\n-            return ZANATA_GENERATOR_PREFIX + \" \"\n-                    + (ServiceLocator.instance()\n-                            .getInstance(ApplicationConfiguration.class))\n-                                    .getVersion();\n+            return ZANATA_GENERATOR_PREFIX + \" \" + (ServiceLocator.instance().getInstance(ApplicationConfiguration.class)).getVersion();\n         } catch (Exception e) {\n             return ZANATA_GENERATOR_PREFIX + \" UNKNOWN\";\n         }\n@@ -908,6 +897,7 @@ public class ResourceUtils implements Serializable {\n      * Returns the appropriate plural form for a given Locale. Returns a default\n      * value if there is no plural form information for the provided locale.\n      */\n+\n     public String getPluralForms(HLocale locale) {\n         return getPluralForms(locale.getLocaleId());\n     }\n@@ -919,6 +909,7 @@ public class ResourceUtils implements Serializable {\n      *\n      * @see {@link ResourceUtils#getPluralForms(org.zanata.common.LocaleId, boolean, boolean)}\n      */\n+\n     public String getPluralForms(LocaleId localeId) {\n         return getPluralForms(localeId, true, true);\n     }\n@@ -930,8 +921,9 @@ public class ResourceUtils implements Serializable {\n      *\n      * @return A default value if useDefault is True. Otherwise, null.\n      */\n+\n     public String getPluralForms(LocaleId localeId, boolean checkDB,\n-            boolean useDefault) {\n+        boolean useDefault) {\n         if (checkDB) {\n             String dbPluralForms = getPluralFormsFromDB(localeId);\n             if (isNotEmpty(dbPluralForms)) {\n@@ -979,6 +971,7 @@ public class ResourceUtils implements Serializable {\n      * @param localeId\n      *            - locale identifier\n      */\n+\n     int getNumPlurals(@Nullable String poHeaders, LocaleId localeId) {\n         if (!isEmpty(poHeaders)) {\n             Properties headerList = loadHeaders(poHeaders);\n@@ -991,28 +984,26 @@ public class ResourceUtils implements Serializable {\n                     } catch (NumberFormatException | PluralParseException e) {\n                         log.debug(\"Unable to parse plurals\", e);\n                         // TODO return a warning to the user when uploading\n-                        log.warn(\n-                                \"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n-                                localeId, poHeaders);\n+                        log.warn(\"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n+localeId,\n+poHeaders);\n                     }\n                 } else {\n                     // TODO return a warning to the user when uploading\n-                    log.warn(\n-                            \"Empty plural forms header; using defaults for locale {}; headers: {}\",\n-                            localeId, poHeaders);\n+                    log.warn(\"Empty plural forms header; using defaults for locale {}; headers: {}\",\n+localeId,\n+poHeaders);\n                 }\n             } else {\n                 // otherwise (no header) use the locale default\n-                log.debug(\n-                        \"No plural forms header; using defaults for locale {}; headers: {}\",\n-                        localeId, poHeaders);\n+                log.debug(\"No plural forms header; using defaults for locale {}; headers: {}\",\n+localeId,\n+poHeaders);\n             }\n         }\n         String localePluralForms = getPluralFormsForLocale(localeId);\n         if (localePluralForms == null) {\n-            log.warn(\n-                    \"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\",\n-                    localeId, PLURALS_FILE, poHeaders);\n+            log.warn(\"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\", localeId, PLURALS_FILE, poHeaders);\n             return DEFAULT_NPLURALS;\n         }\n         return extractNPlurals(localePluralForms);\n@@ -1038,6 +1029,7 @@ public class ResourceUtils implements Serializable {\n      * @throws RuntimeException\n      *             if no plural forms are found\n      */\n+\n     @Nullable\n     private String getPluralFormsForLocale(LocaleId localeId) {\n         String pluralForms;\n@@ -1051,6 +1043,7 @@ public class ResourceUtils implements Serializable {\n     /**\n      * @return plural forms from HLocale, null if not found\n      */\n+\n     @Nullable\n     String getPluralFormsFromDB(LocaleId localeId) {\n         HLocale hLocale = localeDAO.findByLocaleId(localeId);\n@@ -1065,6 +1058,7 @@ public class ResourceUtils implements Serializable {\n      *\n      * @param localeId\n      */\n+\n     @Nullable\n     String getPluralFormsFromFile(@Nonnull LocaleId localeId) {\n         return getPluralForms(localeId, false, false);\n@@ -1076,21 +1070,18 @@ public class ResourceUtils implements Serializable {\n      * @param pluralForms\n      *            string to parse\n      */\n-    int extractNPlurals(@Nonnull String pluralForms)\n-            throws NumberFormatException, PluralParseException {\n+\n+    int extractNPlurals(@Nonnull String pluralForms) throws NumberFormatException, PluralParseException {\n         Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n         if (nPluralsMatcher.find()) {\n             String nPluralsString = nPluralsMatcher.group();\n-            Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+            Matcher nPluralsValueMatcher = NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n             if (isNotEmpty(nPluralsString)) {\n                 return Integer.parseInt(nPluralsString);\n             }\n         }\n-        throw new PluralParseException(\n-                \"can\\'t find valid nplurals in plural forms string: \"\n-                        + pluralForms);\n+        throw new PluralParseException(\"can\\'t find valid nplurals in plural forms string: \" + pluralForms);\n     }\n \n     /**\n@@ -1099,6 +1090,7 @@ public class ResourceUtils implements Serializable {\n      * @param pluralForms\n      *            string to check\n      */\n+\n     public boolean isValidPluralForms(@Nonnull String pluralForms) {\n         if (!PLURAL_FORM_PATTERN.matcher(pluralForms).find()) {\n             return false;\n@@ -1107,8 +1099,7 @@ public class ResourceUtils implements Serializable {\n         String nPluralsString = \"\";\n         while (nPluralsMatcher.find()) {\n             nPluralsString = nPluralsMatcher.group();\n-            Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+            Matcher nPluralsValueMatcher = NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n             break;\n         }\n@@ -1119,6 +1110,7 @@ public class ResourceUtils implements Serializable {\n             }\n         } catch (NumberFormatException e) {\n             // invalid string for integer\n+\n         }\n         return false;\n     }\n@@ -1128,8 +1120,8 @@ public class ResourceUtils implements Serializable {\n      * @param toHeader\n      * @see #pushPoTargetComment\n      */\n-    protected void pullPoTargetComment(HPoTargetHeader fromHeader,\n-            PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n+\n+    protected void pullPoTargetComment(HPoTargetHeader fromHeader, PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n         StringBuilder sb = new StringBuilder();\n         HSimpleComment comment = fromHeader.getComment();\n         if (comment != null) {\n@@ -1173,8 +1165,7 @@ public class ResourceUtils implements Serializable {\n         // to.setLang(from.get)\n     }\n \n-    public void transferToAbstractResourceMeta(HDocument from,\n-            AbstractResourceMeta to) {\n+    public void transferToAbstractResourceMeta(HDocument from, AbstractResourceMeta to) {\n         to.setContentType(from.getContentType());\n         to.setLang(from.getLocale().getLocaleId());\n         to.setName(from.getDocId());\n@@ -1185,8 +1176,7 @@ public class ResourceUtils implements Serializable {\n     }\n \n     public void transferToResourceExtensions(HDocument from,\n-            ExtensionSet<AbstractResourceMetaExtension> to,\n-            Set<String> enabledExtensions) {\n+           ExtensionSet<AbstractResourceMetaExtension> to, Set<String> enabledExtensions) {\n         if (enabledExtensions.contains(PoHeader.ID)) {\n             PoHeader poHeaderExt = new PoHeader();\n             if (from.getPoHeader() != null) {\n@@ -1204,10 +1194,11 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromTranslationsResourceExtensions\n      * @return true only if extensions were found\n      */\n+\n     public boolean transferToTranslationsResourceExtensions(HDocument from,\n-            ExtensionSet<TranslationsResourceExtension> to,\n-            Set<String> enabledExtensions, HLocale locale,\n-            List<HTextFlowTarget> hTargets) {\n+           ExtensionSet<TranslationsResourceExtension> to,\n+           Set<String> enabledExtensions,\n+           HLocale locale, List<HTextFlowTarget> hTargets) {\n         boolean found = false;\n         if (enabledExtensions.contains(PoTargetHeader.ID)) {\n             log.debug(\"PoTargetHeader requested\");\n@@ -1223,26 +1214,21 @@ public class ResourceUtils implements Serializable {\n                 fromHeader = new HPoTargetHeader();\n                 fromHeader.setEntries(\"\");\n             }\n-            transferToPoTargetHeader(fromHeader, poTargetHeader, hTargets,\n-                    locale);\n+            transferToPoTargetHeader(fromHeader, poTargetHeader, hTargets, locale);\n             to.add(poTargetHeader);\n         }\n         return found;\n     }\n \n-    public void transferToTextFlowExtensions(HTextFlow from,\n-            ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n-        if (enabledExtensions.contains(PotEntryHeader.ID)\n-                && from.getPotEntryData() != null) {\n+    public void transferToTextFlowExtensions(HTextFlow from, ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n+        if (enabledExtensions.contains(PotEntryHeader.ID) && from.getPotEntryData() != null) {\n             PotEntryHeader header = new PotEntryHeader();\n             transferToPotEntryHeader(from.getPotEntryData(), header);\n             log.debug(\"set header:{}\", from.getPotEntryData());\n             to.add(header);\n         }\n-        if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n-            SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n+        if (enabledExtensions.contains(SimpleComment.ID) && from.getComment() != null) {\n+            SimpleComment comment = new SimpleComment(from.getComment().getComment());\n             log.debug(\"set comment:{}\", from.getComment().getComment());\n             to.add(comment);\n         }\n@@ -1255,8 +1241,8 @@ public class ResourceUtils implements Serializable {\n      * @param from\n      * @param to\n      */\n-    private void transferToPotEntryHeader(HPotEntryData from,\n-            PotEntryHeader to) {\n+\n+    private void transferToPotEntryHeader(HPotEntryData from, PotEntryHeader to) {\n         to.setContext(from.getContext());\n         List<String> flags = new ArrayList<String>(0);\n         if (from.getFlags() != null) {\n@@ -1276,13 +1262,11 @@ public class ResourceUtils implements Serializable {\n      * @param enabledExtensions\n      * @todo merge with {@link #transferToTextFlowTarget}\n      */\n+\n     public void transferToTextFlowTargetExtensions(HTextFlowTarget from,\n-            ExtensionSet<TextFlowTargetExtension> to,\n-            Set<String> enabledExtensions) {\n-        if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n-            SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n+           ExtensionSet<TextFlowTargetExtension> to, Set<String> enabledExtensions) {\n+        if (enabledExtensions.contains(SimpleComment.ID) && from.getComment() != null) {\n+            SimpleComment comment = new SimpleComment(from.getComment().getComment());\n             to.add(comment);\n         }\n     }\n@@ -1309,9 +1293,10 @@ public class ResourceUtils implements Serializable {\n     /**\n      * @todo merge with {@link #transferToTextFlowTargetExtensions}\n      */\n+\n     @SuppressWarnings(\"deprecation\")\n-    public void transferToTextFlowTarget(HTextFlowTarget from,\n-            TextFlowTarget to, boolean markTranslatedAsApproved) {\n+    public void transferToTextFlowTarget(HTextFlowTarget from, TextFlowTarget to,\n+        boolean markTranslatedAsApproved) {\n         if (from.getTextFlow().isPlural()) {\n             to.setContents(from.getContents());\n         } else if (!from.getContents().isEmpty()) {\n@@ -1326,21 +1311,18 @@ public class ResourceUtils implements Serializable {\n         to.setTextFlowRevision(from.getTextFlowRevision());\n         HPerson translator = from.getTranslator();\n         if (translator != null) {\n-            to.setTranslator(\n-                    new Person(translator.getEmail(), translator.getName()));\n+            to.setTranslator(new Person(translator.getEmail(), translator.getName()));\n         }\n     }\n \n     private static ContentState mapContentState(ContentState realState,\n-            boolean markTranslatedAsApproved) {\n+        boolean markTranslatedAsApproved) {\n         if (markTranslatedAsApproved) {\n             switch (realState) {\n             case Translated:\n                 return ContentState.Approved;\n-\n             case Rejected:\n                 return ContentState.NeedReview;\n-\n             default:\n                 return realState;\n             }\n@@ -1355,13 +1337,10 @@ public class ResourceUtils implements Serializable {\n         Resource entity = new Resource(document.getDocId());\n         this.transferToResource(document, entity);\n         // handle extensions\n-        this.transferToResourceExtensions(document, entity.getExtensions(true),\n-                extensions);\n+        this.transferToResourceExtensions(document, entity.getExtensions(true), extensions);\n         for (HTextFlow htf : document.getTextFlows()) {\n-            TextFlow tf = new TextFlow(htf.getResId(),\n-                    document.getLocale().getLocaleId());\n-            this.transferToTextFlowExtensions(htf, tf.getExtensions(true),\n-                    extensions);\n+            TextFlow tf = new TextFlow(htf.getResId(), document.getLocale().getLocaleId());\n+            this.transferToTextFlowExtensions(htf, tf.getExtensions(true), extensions);\n             this.transferToTextFlow(htf, tf);\n             entity.getTextFlows().add(tf);\n         }\n@@ -1379,19 +1358,24 @@ public class ResourceUtils implements Serializable {\n      * @return true only if some data was found (text flow targets, or some\n      *         metadata extensions)\n      */\n+\n     public boolean transferToTranslationsResource(TranslationsResource transRes,\n-            HDocument document, HLocale locale, Set<String> enabledExtensions,\n-            List<HTextFlowTarget> hTargets, boolean markTranslatedAsApproved) {\n+           HDocument document,\n+           HLocale locale,\n+           Set<String> enabledExtensions,\n+           List<HTextFlowTarget> hTargets,\n+               boolean markTranslatedAsApproved) {\n         boolean found = this.transferToTranslationsResourceExtensions(document,\n-                transRes.getExtensions(true), enabledExtensions, locale,\n-                hTargets);\n+            transRes.getExtensions(true),\n+                enabledExtensions,\n+                    locale,\n+                        hTargets);\n         for (HTextFlowTarget hTarget : hTargets) {\n             found = true;\n             TextFlowTarget target = new TextFlowTarget();\n             target.setResId(hTarget.getTextFlow().getResId());\n             this.transferToTextFlowTarget(hTarget, target, markTranslatedAsApproved);\n-            this.transferToTextFlowTargetExtensions(hTarget,\n-                    target.getExtensions(true), enabledExtensions);\n+            this.transferToTextFlowTargetExtensions(hTarget, target.getExtensions(true), enabledExtensions);\n             transRes.getTextFlowTargets().add(target);\n         }\n         return found;\n@@ -1404,17 +1388,14 @@ public class ResourceUtils implements Serializable {\n      * @param requestedExt\n      *            Extensions to be validated\n      */\n+\n     public static void validateExtensions(Set<String> requestedExt) {\n         Set<String> validExtensions = ExtensionType.asStringSet();\n         if (!CollectionUtils.isSubCollection(requestedExt, validExtensions)) {\n             @SuppressWarnings(\"unchecked\")\n-            Collection<String> invalidExtensions =\n-                    CollectionUtils.subtract(requestedExt, validExtensions);\n-            Response response =\n-                    Response.status(Status.BAD_REQUEST)\n-                            .entity(\"Unsupported Extensions within this context: \"\n-                                    + StringUtils.join(invalidExtensions, \",\"))\n-                            .build();\n+            Collection<String> invalidExtensions = CollectionUtils.subtract(requestedExt, validExtensions);\n+            Response response = Response.status(Status.BAD_REQUEST).entity(\"Unsupported Extensions within this context: \" + StringUtils.join(invalidExtensions, \",\"))\n+                                                                   .build();\n             throw new WebApplicationException(response);\n         }\n     }\n@@ -1426,4 +1407,4 @@ public class ResourceUtils implements Serializable {\n             super(string);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 248
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1431",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/2/ResourceUtils.java\nindex 80b340aeb3..f1b1f51cf3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/2/ResourceUtils.java\n@@ -369,98 +369,99 @@ public class ResourceUtils implements Serializable {\n             toTargetHeader.setTargetLanguage(locale);\n             toTargetHeader.setDocument(doc);\n             transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n-                    MergeType.IMPORT); // return\n-            // value\n-            // not\n-            // needed\n-            entityManager.persist(toTargetHeader);\n-            entityManager.flush();\n-        } else {\n-            changed |= transferFromPoTargetHeader(fromTargetHeader,\n-                    toTargetHeader, mergeType);\n-        }\n-        return changed;\n-    }\n-\n-    private boolean transferFromTextFlowExtensions(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n-        boolean changed = false;\n-        ExtensionSet<TextFlowExtension> extensions = from.getExtensions(true);\n-        if (enabledExtensions.contains(PotEntryHeader.ID)) {\n-            PotEntryHeader entryHeader =\n-                    extensions.findByType(PotEntryHeader.class);\n-            if (entryHeader != null) {\n-                HPotEntryData hEntryHeader = to.getPotEntryData();\n-                if (hEntryHeader == null) {\n-                    changed = true;\n-                    hEntryHeader = new HPotEntryData();\n-                    to.setPotEntryData(hEntryHeader);\n-                    log.debug(\"set potentryheader\");\n-                }\n-                changed |= transferFromPotEntryHeader(entryHeader, hEntryHeader,\n-                        from);\n-            }\n-        }\n-        if (enabledExtensions.contains(SimpleComment.ID)) {\n-            SimpleComment comment = extensions.findByType(SimpleComment.class);\n-            if (comment != null) {\n-                HSimpleComment hComment = to.getComment();\n-                if (hComment == null) {\n-                    hComment = new HSimpleComment();\n-                }\n-                if (!equals(comment.getValue(), hComment.getComment())) {\n-                    changed = true;\n-                    hComment.setComment(comment.getValue());\n-                    to.setComment(hComment);\n-                    log.debug(\"set comment:{}\", comment.getValue());\n-                }\n-            }\n-        }\n-        return changed;\n-    }\n-\n-    /**\n+                    MergeType.IMPORT);\n+                    // return\n+                // value\n+             // not\n+             // needed\n+             entityManager.persist(toTargetHeader);\n+             entityManager.flush();\n+         } else {\n+             changed |= transferFromPoTargetHeader(fromTargetHeader,\n+                     toTargetHeader, mergeType);\n+         }\n+         return changed;\n+     }\n+\n+     private boolean transferFromTextFlowExtensions(TextFlow from, HTextFlow to,\n+             Set<String> enabledExtensions) {\n+         boolean changed = false;\n+         ExtensionSet<TextFlowExtension> extensions = from.getExtensions(true);\n+         if (enabledExtensions.contains(PotEntryHeader.ID)) {\n+             PotEntryHeader entryHeader =\n+                     extensions.findByType(PotEntryHeader.class);\n+             if (entryHeader != null) {\n+                 HPotEntryData hEntryHeader = to.getPotEntryData();\n+                 if (hEntryHeader == null) {\n+                     changed = true;\n+                     hEntryHeader = new HPotEntryData();\n+                     to.setPotEntryData(hEntryHeader);\n+                     log.debug(\"set potentryheader\");\n+                 }\n+                 changed |= transferFromPotEntryHeader(entryHeader, hEntryHeader,\n+                         from);\n+             }\n+         }\n+         if (enabledExtensions.contains(SimpleComment.ID)) {\n+             SimpleComment comment = extensions.findByType(SimpleComment.class);\n+             if (comment != null) {\n+                 HSimpleComment hComment = to.getComment();\n+                 if (hComment == null) {\n+                     hComment = new HSimpleComment();\n+                 }\n+                 if (!equals(comment.getValue(), hComment.getComment())) {\n+                     changed = true;\n+                     hComment.setComment(comment.getValue());\n+                     to.setComment(hComment);\n+                     log.debug(\"set comment:{}\", comment.getValue());\n+                 }\n+             }\n+         }\n+         return changed;\n+     }\n+\n+     /**\n      * @see #transferToPotEntryHeader(HPotEntryData, PotEntryHeader)\n      * @param from\n      * @param to\n      * @param textFlow\n      * @return\n      */\n-    private boolean transferFromPotEntryHeader(PotEntryHeader from,\n-            HPotEntryData to, TextFlow textFlow) {\n-        boolean changed = false;\n-        if (!equals(from.getContext(), to.getContext())) {\n-            changed = true;\n-            to.setContext(from.getContext());\n-        }\n-        List<String> flagList = from.getFlags();\n-        // rhbz1012502 - should not store fuzzy tag in source document\n-        if (flagList.contains(\"fuzzy\")) {\n-            throw new WebApplicationException(String.format(\n-                    \"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\",\n-                    textFlow.getId(), textFlow.getContents()), 422);\n-        }\n-        String flags = StringUtil.concat(flagList, ',');\n-        if (flagList.isEmpty()) {\n-            flags = null;\n-        }\n-        if (!equals(flags, to.getFlags())) {\n-            changed = true;\n-            to.setFlags(flags);\n-        }\n-        List<String> refList = from.getReferences();\n-        String refs = StringUtil.concat(from.getReferences(), ',');\n-        if (refList.isEmpty()) {\n-            refs = null;\n-        }\n-        if (!equals(refs, to.getReferences())) {\n-            changed = true;\n-            to.setReferences(refs);\n-        }\n-        return changed;\n-    }\n-\n-    /**\n+     private boolean transferFromPotEntryHeader(PotEntryHeader from,\n+             HPotEntryData to, TextFlow textFlow) {\n+         boolean changed = false;\n+         if (!equals(from.getContext(), to.getContext())) {\n+             changed = true;\n+             to.setContext(from.getContext());\n+         }\n+         List<String> flagList = from.getFlags();\n+         // rhbz1012502 - should not store fuzzy tag in source document\n+         if (flagList.contains(\"fuzzy\")) {\n+             throw new WebApplicationException(String.format(\n+                     \"Please remove fuzzy flags from document. First fuzzy flag was found on text flow %s with content %s\",\n+                     textFlow.getId(), textFlow.getContents()), 422);\n+         }\n+         String flags = StringUtil.concat(flagList, ',');\n+         if (flagList.isEmpty()) {\n+             flags = null;\n+         }\n+         if (!equals(flags, to.getFlags())) {\n+             changed = true;\n+             to.setFlags(flags);\n+         }\n+         List<String> refList = from.getReferences();\n+         String refs = StringUtil.concat(from.getReferences(), ',');\n+         if (refList.isEmpty()) {\n+             refs = null;\n+         }\n+         if (!equals(refs, to.getReferences())) {\n+             changed = true;\n+             to.setReferences(refs);\n+         }\n+         return changed;\n+     }\n+\n+     /**\n      * @param from\n      * @param to\n      * @param mergeType\n@@ -468,159 +469,159 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromTranslationsResourceExtensions\n      * @see #transferToPoTargetHeader\n      */\n-    private boolean transferFromPoTargetHeader(PoTargetHeader from,\n-            HPoTargetHeader to, MergeType mergeType) {\n-        boolean changed = pushPoTargetComment(from, to, mergeType);\n-        // TODO we should probably block PoHeader/POT-specific entries\n-        // ie POT-Creation-Date, Project-Id-Version, Report-Msgid-Bugs-To\n-        String entries = PoUtility.listToHeader(from.getEntries());\n-        if (!equals(entries, to.getEntries())) {\n-            to.setEntries(entries);\n-            changed = true;\n-        }\n-        return changed;\n-    }\n-\n-    /**\n+     private boolean transferFromPoTargetHeader(PoTargetHeader from,\n+             HPoTargetHeader to, MergeType mergeType) {\n+         boolean changed = pushPoTargetComment(from, to, mergeType);\n+         // TODO we should probably block PoHeader/POT-specific entries\n+         // ie POT-Creation-Date, Project-Id-Version, Report-Msgid-Bugs-To\n+         String entries = PoUtility.listToHeader(from.getEntries());\n+         if (!equals(entries, to.getEntries())) {\n+             to.setEntries(entries);\n+             changed = true;\n+         }\n+         return changed;\n+     }\n+\n+     /**\n      * @param fromHeader\n      * @param toHeader\n      * @param mergeType\n      * @return\n      * @see #pullPoTargetComment\n      */\n-    protected boolean pushPoTargetComment(PoTargetHeader fromHeader,\n-            HPoTargetHeader toHeader, MergeType mergeType) {\n-        boolean changed = false;\n-        HSimpleComment hComment = toHeader.getComment();\n-        if (hComment == null) {\n-            hComment = new HSimpleComment();\n-        }\n-        String fromComment = fromHeader.getComment();\n-        String toComment = hComment.getComment();\n-        if (!equals(fromComment, toComment)) {\n-            // skip #zanata lines\n-            List<String> fromLines = splitLines(fromComment, ZANATA_TAG);\n-            StringBuilder sb = new StringBuilder(fromComment.length());\n-            switch (mergeType) {\n-            case IMPORT:\n-                for (String line : fromLines) {\n-                    if (sb.length() != 0)\n-                        sb.append(NEWLINE);\n-                    sb.append(line);\n-                    changed = true;\n-                }\n-                break;\n-\n-            default:\n-                // AUTO or anything else will merge comments\n-                // to merge, we just append new lines, skip old lines\n-                List<String> toLines = Collections.emptyList();\n-                if (toComment != null) {\n-                    sb.append(toComment);\n-                    toLines = splitLines(toComment, null);\n-                }\n-                for (String line : fromLines) {\n-                    if (!toLines.contains(line)) {\n-                        if (sb.length() != 0)\n-                            sb.append(NEWLINE);\n-                        sb.append(line);\n-                        changed = true;\n-                    }\n-                }\n-                break;\n-\n-            }\n-            if (changed) {\n-                hComment.setComment(sb.toString());\n-                toHeader.setComment(hComment);\n-            }\n-        }\n-        return changed;\n-    }\n-\n-    /**\n+     protected boolean pushPoTargetComment(PoTargetHeader fromHeader,\n+             HPoTargetHeader toHeader, MergeType mergeType) {\n+         boolean changed = false;\n+         HSimpleComment hComment = toHeader.getComment();\n+         if (hComment == null) {\n+             hComment = new HSimpleComment();\n+         }\n+         String fromComment = fromHeader.getComment();\n+         String toComment = hComment.getComment();\n+         if (!equals(fromComment, toComment)) {\n+             // skip #zanata lines\n+             List<String> fromLines = splitLines(fromComment, ZANATA_TAG);\n+             StringBuilder sb = new StringBuilder(fromComment.length());\n+             switch (mergeType) {\n+             case IMPORT:\n+                 for (String line : fromLines) {\n+                     if (sb.length() != 0)\n+                         sb.append(NEWLINE);\n+                     sb.append(line);\n+                     changed = true;\n+                 }\n+                 break;\n+\n+             default:\n+                 // AUTO or anything else will merge comments\n+                 // to merge, we just append new lines, skip old lines\n+                 List<String> toLines = Collections.emptyList();\n+                 if (toComment != null) {\n+                     sb.append(toComment);\n+                     toLines = splitLines(toComment, null);\n+                 }\n+                 for (String line : fromLines) {\n+                     if (!toLines.contains(line)) {\n+                         if (sb.length() != 0)\n+                             sb.append(NEWLINE);\n+                         sb.append(line);\n+                         changed = true;\n+                     }\n+                 }\n+                 break;\n+\n+             }\n+             if (changed) {\n+                 hComment.setComment(sb.toString());\n+                 toHeader.setComment(hComment);\n+             }\n+         }\n+         return changed;\n+     }\n+\n+     /**\n      * splits s into lines, skipping any which contain tagToSkip\n      *\n      * @param s\n      * @param tagToSkip\n      * @return\n      */\n-    static List<String> splitLines(String s, String tagToSkip) {\n-        if (s.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n-        try {\n-            List<String> lineList = new ArrayList<String>(s.length() / 40);\n-            BufferedReader reader = new BufferedReader(new StringReader(s));\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                if (tagToSkip == null || !line.contains(tagToSkip)) {\n-                    lineList.add(line);\n-                }\n-            }\n-            return lineList;\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private boolean transferFromPoHeader(PoHeader from, HPoHeader to) {\n-        boolean changed = false;\n-        HSimpleComment comment = to.getComment();\n-        if (comment == null) {\n-            comment = new HSimpleComment();\n-        }\n-        if (!equals(from.getComment(), comment.getComment())) {\n-            changed = true;\n-            comment.setComment(from.getComment());\n-            to.setComment(comment);\n-        }\n-        String entries = PoUtility.listToHeader(from.getEntries());\n-        if (!equals(entries, to.getEntries())) {\n-            to.setEntries(entries);\n-            changed = true;\n-        }\n-        return changed;\n-    }\n-\n-    public static <T> boolean equals(T a, T b) {\n-        if (a == null && b == null) {\n-            return true;\n-        }\n-        if (a == null || b == null) {\n-            return false;\n-        }\n-        return a.equals(b);\n-    }\n-\n-    private boolean transferFromTextFlow(TextFlow from, HTextFlow to,\n-            Set<String> enabledExtensions) {\n-        boolean changed = false;\n-        if (!equals(from.getContents(), to.getContents())) {\n-            to.setContents(from.getContents());\n-            changed = true;\n-        }\n-        if (!equals(from.isPlural(), to.isPlural())) {\n-            to.setPlural(from.isPlural());\n-            changed = true;\n-        }\n-        // TODO from.getLang()\n-        transferFromTextFlowExtensions(from, to, enabledExtensions);\n-        return changed;\n-    }\n-\n-    public void transferToResource(HDocument from, Resource to) {\n-        transferToAbstractResourceMeta(from, to);\n-    }\n-\n-    private void transferToPoHeader(HPoHeader from, PoHeader to) {\n-        if (from.getComment() != null) {\n-            to.setComment(from.getComment().getComment());\n-        }\n-        to.getEntries().addAll(PoUtility.headerToList(from.getEntries()));\n-    }\n-\n-    /**\n+     static List<String> splitLines(String s, String tagToSkip) {\n+         if (s.isEmpty()) {\n+             return Collections.emptyList();\n+         }\n+         try {\n+             List<String> lineList = new ArrayList<String>(s.length() / 40);\n+             BufferedReader reader = new BufferedReader(new StringReader(s));\n+             String line;\n+             while ((line = reader.readLine()) != null) {\n+                 if (tagToSkip == null || !line.contains(tagToSkip)) {\n+                     lineList.add(line);\n+                 }\n+             }\n+             return lineList;\n+         } catch (IOException e) {\n+             throw new RuntimeException(e);\n+         }\n+     }\n+\n+     private boolean transferFromPoHeader(PoHeader from, HPoHeader to) {\n+         boolean changed = false;\n+         HSimpleComment comment = to.getComment();\n+         if (comment == null) {\n+             comment = new HSimpleComment();\n+         }\n+         if (!equals(from.getComment(), comment.getComment())) {\n+             changed = true;\n+             comment.setComment(from.getComment());\n+             to.setComment(comment);\n+         }\n+         String entries = PoUtility.listToHeader(from.getEntries());\n+         if (!equals(entries, to.getEntries())) {\n+             to.setEntries(entries);\n+             changed = true;\n+         }\n+         return changed;\n+     }\n+\n+     public static <T> boolean equals(T a, T b) {\n+         if (a == null && b == null) {\n+             return true;\n+         }\n+         if (a == null || b == null) {\n+             return false;\n+         }\n+         return a.equals(b);\n+     }\n+\n+     private boolean transferFromTextFlow(TextFlow from, HTextFlow to,\n+             Set<String> enabledExtensions) {\n+         boolean changed = false;\n+         if (!equals(from.getContents(), to.getContents())) {\n+             to.setContents(from.getContents());\n+             changed = true;\n+         }\n+         if (!equals(from.isPlural(), to.isPlural())) {\n+             to.setPlural(from.isPlural());\n+             changed = true;\n+         }\n+         // TODO from.getLang()\n+         transferFromTextFlowExtensions(from, to, enabledExtensions);\n+         return changed;\n+     }\n+\n+     public void transferToResource(HDocument from, Resource to) {\n+         transferToAbstractResourceMeta(from, to);\n+     }\n+\n+     private void transferToPoHeader(HPoHeader from, PoHeader to) {\n+         if (from.getComment() != null) {\n+             to.setComment(from.getComment().getComment());\n+         }\n+         to.getEntries().addAll(PoUtility.headerToList(from.getEntries()));\n+     }\n+\n+     /**\n      * @param from\n      * @param to\n      * @param hTargets\n@@ -628,24 +629,24 @@ public class ResourceUtils implements Serializable {\n      * @see #transferToTranslationsResourceExtensions\n      * @see #transferFromPoTargetHeader\n      */\n-    private void transferToPoTargetHeader(HPoTargetHeader from,\n-            PoTargetHeader to, List<HTextFlowTarget> hTargets, HLocale locale) {\n-        pullPoTargetComment(from, to, hTargets);\n-        to.getEntries().addAll(this.headerToList(from.getEntries()));\n-        populateHeaderEntries(to.getEntries(), hTargets, locale);\n-    }\n-\n-    /**\n+     private void transferToPoTargetHeader(HPoTargetHeader from,\n+             PoTargetHeader to, List<HTextFlowTarget> hTargets, HLocale locale) {\n+         pullPoTargetComment(from, to, hTargets);\n+         to.getEntries().addAll(this.headerToList(from.getEntries()));\n+         populateHeaderEntries(to.getEntries(), hTargets, locale);\n+     }\n+\n+     /**\n      * Transforms a set of header entries from a String to a list of POJOs.\n      *\n      * @param entries\n      *            The header entries' string.\n      */\n-    private List<HeaderEntry> headerToList(final String entries) {\n-        return PoUtility.headerToList(entries);\n-    }\n+     private List<HeaderEntry> headerToList(final String entries) {\n+         return PoUtility.headerToList(entries);\n+     }\n \n-    /**\n+     /**\n      * Populates a list of header entries with values stored in the system. For\n      * certain headers, the original value will remain if present.\n      *\n@@ -656,78 +657,78 @@ public class ResourceUtils implements Serializable {\n      * @param locale\n      *            The locale that is bein\n      */\n-    private void populateHeaderEntries(final List<HeaderEntry> headerEntries,\n-            final List<HTextFlowTarget> hTargets, final HLocale locale) {\n-        final Map<String, HeaderEntry> containedHeaders =\n-                new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n-        HTextFlowTarget lastChangedTarget = getLastChangedTarget(hTargets);\n-        // Collect the existing header entries\n-        for (HeaderEntry entry : headerEntries) {\n-            containedHeaders.put(entry.getKey(), entry);\n-        }\n-        // Add / Replace headers\n-        Date revisionDate =\n-                this.getRevisionDate(headerEntries, lastChangedTarget);\n-        HeaderEntry headerEntry = containedHeaders.get(PO_REVISION_DATE_HDR);\n-        if (headerEntry == null) {\n-            headerEntry = new HeaderEntry(PO_REVISION_DATE_HDR,\n-                    this.toPoHeaderString(revisionDate));\n-            headerEntries.add(headerEntry);\n-        } else {\n-            headerEntry.setValue(this.toPoHeaderString(revisionDate));\n-        }\n-        headerEntry = containedHeaders.get(LAST_TRANSLATOR_HDR);\n-        if (headerEntry == null) {\n-            headerEntry = new HeaderEntry(LAST_TRANSLATOR_HDR,\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n-            headerEntries.add(headerEntry);\n-        } else {\n-            headerEntry.setValue(\n-                    this.getLastTranslator(lastChangedTarget, headerEntries));\n-        }\n-        headerEntry = containedHeaders.get(LANGUAGE_TEAM_HDR);\n-        if (headerEntry == null) {\n-            headerEntry = new HeaderEntry(LANGUAGE_TEAM_HDR,\n-                    this.getLanguageTeam(locale));\n-            headerEntries.add(headerEntry);\n-        } else {\n-            // Keep the original value if provided\n-        }\n-        headerEntry = containedHeaders.get(LANGUAGE_HDR);\n-        if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n-            headerEntries.add(headerEntry);\n-        } else {\n-            headerEntry.setValue(this.getLanguage(locale));\n-        }\n-        headerEntry = containedHeaders.get(X_GENERATOR_HDR);\n-        if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n-            headerEntries.add(headerEntry);\n-        } else {\n-            headerEntry.setValue(this.getSystemVersion());\n-        }\n-        headerEntry = containedHeaders.get(CONTENT_TYPE_HDR);\n-        if (headerEntry == null) {\n-            headerEntry =\n-                    new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n-            headerEntries.add(headerEntry);\n-        } else {\n-            headerEntry.setValue(PO_DEFAULT_CONTENT_TYPE);\n-        }\n-        headerEntry = containedHeaders.get(PLURAL_FORMS_HDR);\n-        if (headerEntry == null || isBlank(headerEntry.getValue())) {\n-            headerEntry = new HeaderEntry(PLURAL_FORMS_HDR,\n-                    this.getPluralForms(locale));\n-            headerEntries.add(headerEntry);\n-        } else {\n-            // Keep the original if provided\n-        }\n-    }\n-\n-    /**\n+     private void populateHeaderEntries(final List<HeaderEntry> headerEntries,\n+             final List<HTextFlowTarget> hTargets, final HLocale locale) {\n+         final Map<String, HeaderEntry> containedHeaders =\n+                 new LinkedHashMap<String, HeaderEntry>(headerEntries.size());\n+         HTextFlowTarget lastChangedTarget = getLastChangedTarget(hTargets);\n+         // Collect the existing header entries\n+         for (HeaderEntry entry : headerEntries) {\n+             containedHeaders.put(entry.getKey(), entry);\n+         }\n+         // Add / Replace headers\n+         Date revisionDate =\n+                 this.getRevisionDate(headerEntries, lastChangedTarget);\n+         HeaderEntry headerEntry = containedHeaders.get(PO_REVISION_DATE_HDR);\n+         if (headerEntry == null) {\n+             headerEntry = new HeaderEntry(PO_REVISION_DATE_HDR,\n+                     this.toPoHeaderString(revisionDate));\n+             headerEntries.add(headerEntry);\n+         } else {\n+             headerEntry.setValue(this.toPoHeaderString(revisionDate));\n+         }\n+         headerEntry = containedHeaders.get(LAST_TRANSLATOR_HDR);\n+         if (headerEntry == null) {\n+             headerEntry = new HeaderEntry(LAST_TRANSLATOR_HDR,\n+                     this.getLastTranslator(lastChangedTarget, headerEntries));\n+             headerEntries.add(headerEntry);\n+         } else {\n+             headerEntry.setValue(\n+                     this.getLastTranslator(lastChangedTarget, headerEntries));\n+         }\n+         headerEntry = containedHeaders.get(LANGUAGE_TEAM_HDR);\n+         if (headerEntry == null) {\n+             headerEntry = new HeaderEntry(LANGUAGE_TEAM_HDR,\n+                     this.getLanguageTeam(locale));\n+             headerEntries.add(headerEntry);\n+         } else {\n+             // Keep the original value if provided\n+         }\n+         headerEntry = containedHeaders.get(LANGUAGE_HDR);\n+         if (headerEntry == null) {\n+             headerEntry =\n+                     new HeaderEntry(LANGUAGE_HDR, this.getLanguage(locale));\n+             headerEntries.add(headerEntry);\n+         } else {\n+             headerEntry.setValue(this.getLanguage(locale));\n+         }\n+         headerEntry = containedHeaders.get(X_GENERATOR_HDR);\n+         if (headerEntry == null) {\n+             headerEntry =\n+                     new HeaderEntry(X_GENERATOR_HDR, this.getSystemVersion());\n+             headerEntries.add(headerEntry);\n+         } else {\n+             headerEntry.setValue(this.getSystemVersion());\n+         }\n+         headerEntry = containedHeaders.get(CONTENT_TYPE_HDR);\n+         if (headerEntry == null) {\n+             headerEntry =\n+                     new HeaderEntry(CONTENT_TYPE_HDR, PO_DEFAULT_CONTENT_TYPE);\n+             headerEntries.add(headerEntry);\n+         } else {\n+             headerEntry.setValue(PO_DEFAULT_CONTENT_TYPE);\n+         }\n+         headerEntry = containedHeaders.get(PLURAL_FORMS_HDR);\n+         if (headerEntry == null || isBlank(headerEntry.getValue())) {\n+             headerEntry = new HeaderEntry(PLURAL_FORMS_HDR,\n+                     this.getPluralForms(locale));\n+             headerEntries.add(headerEntry);\n+         } else {\n+             // Keep the original if provided\n+         }\n+     }\n+\n+     /**\n      * Finds and returns the Revision Date stored in a PO file's header entries.\n      *\n      * @param headerEntries\n@@ -735,76 +736,76 @@ public class ResourceUtils implements Serializable {\n      * @return The Revision Date header value, or null if no such header is\n      *         found or the date cannot be parsed.\n      */\n-    private Date getHeaderRevisionDate(final List<HeaderEntry> headerEntries) {\n-        Date poFileRevisionDate = null;\n-        for (HeaderEntry entry : headerEntries) {\n-            if (entry.getKey().equalsIgnoreCase(PO_REVISION_DATE_HDR)) {\n-                SimpleDateFormat dateFormat =\n-                        new SimpleDateFormat(PO_DATE_FORMAT);\n-                try {\n-                    poFileRevisionDate = dateFormat.parse(entry.getValue());\n-                } catch (ParseException e) {\n-                    // found the header but date could not be parsed\n-                }\n-                break;\n-            }\n-        }\n-        return poFileRevisionDate;\n-    }\n-\n-    private String\n-            getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n-        for (HeaderEntry entry : headerEntries) {\n-            if (entry.getKey().equalsIgnoreCase(LAST_TRANSLATOR_HDR)) {\n-                return entry.getValue();\n-            }\n-        }\n-        return \"\";\n-    }\n-\n-    /**\n+     private Date getHeaderRevisionDate(final List<HeaderEntry> headerEntries) {\n+         Date poFileRevisionDate = null;\n+         for (HeaderEntry entry : headerEntries) {\n+             if (entry.getKey().equalsIgnoreCase(PO_REVISION_DATE_HDR)) {\n+                 SimpleDateFormat dateFormat =\n+                         new SimpleDateFormat(PO_DATE_FORMAT);\n+                 try {\n+                     poFileRevisionDate = dateFormat.parse(entry.getValue());\n+                 } catch (ParseException e) {\n+                     // found the header but date could not be parsed\n+                 }\n+                 break;\n+             }\n+         }\n+         return poFileRevisionDate;\n+     }\n+\n+     private String\n+             getHeaderLastTranslator(final List<HeaderEntry> headerEntries) {\n+         for (HeaderEntry entry : headerEntries) {\n+             if (entry.getKey().equalsIgnoreCase(LAST_TRANSLATOR_HDR)) {\n+                 return entry.getValue();\n+             }\n+         }\n+         return \"\";\n+     }\n+\n+     /**\n      * Returns a PO file's Revision Date based on the values stored in the\n      * file's header and in the last translated target. If the system cannot\n      * determine a suitable Revision date, a null value is returned.\n      */\n-    private Date getRevisionDate(final List<HeaderEntry> headerEntries,\n-            final HTextFlowTarget lastTranslated) {\n-        Date poFileRevisionDate = this.getHeaderRevisionDate(headerEntries);\n-        Date translationsRevisionDate = null;\n-        if (lastTranslated != null) {\n-            translationsRevisionDate = lastTranslated.getLastChanged();\n-        }\n-        if (translationsRevisionDate != null) {\n-            if (poFileRevisionDate != null) {\n-                return translationsRevisionDate.after(poFileRevisionDate)\n-                        ? translationsRevisionDate : poFileRevisionDate;\n-            } else {\n-                return translationsRevisionDate;\n-            }\n-        } else {\n-            return poFileRevisionDate == null ? null : poFileRevisionDate;\n-        }\n-    }\n-\n-    /**\n+     private Date getRevisionDate(final List<HeaderEntry> headerEntries,\n+             final HTextFlowTarget lastTranslated) {\n+         Date poFileRevisionDate = this.getHeaderRevisionDate(headerEntries);\n+         Date translationsRevisionDate = null;\n+         if (lastTranslated != null) {\n+             translationsRevisionDate = lastTranslated.getLastChanged();\n+         }\n+         if (translationsRevisionDate != null) {\n+             if (poFileRevisionDate != null) {\n+                 return translationsRevisionDate.after(poFileRevisionDate)\n+                         ? translationsRevisionDate : poFileRevisionDate;\n+             } else {\n+                 return translationsRevisionDate;\n+             }\n+         } else {\n+             return poFileRevisionDate == null ? null : poFileRevisionDate;\n+         }\n+     }\n+\n+     /**\n      * @param translations\n      *            - List of HTextFlowTarget\n      * @return last changed/updated HTextFlowTarget from the list\n      */\n-    private HTextFlowTarget\n-            getLastChangedTarget(final List<HTextFlowTarget> translations) {\n-        Date lastUpdate = new Date(Long.MIN_VALUE);\n-        HTextFlowTarget lastChanged = null;\n-        for (HTextFlowTarget tft : translations) {\n-            if (tft.getLastChanged().after(lastUpdate)) {\n-                lastChanged = tft;\n-                lastUpdate = tft.getLastChanged();\n-            }\n-        }\n-        return lastChanged;\n-    }\n-\n-    /**\n+     private HTextFlowTarget\n+             getLastChangedTarget(final List<HTextFlowTarget> translations) {\n+         Date lastUpdate = new Date(Long.MIN_VALUE);\n+         HTextFlowTarget lastChanged = null;\n+         for (HTextFlowTarget tft : translations) {\n+             if (tft.getLastChanged().after(lastUpdate)) {\n+                 lastChanged = tft;\n+                 lastUpdate = tft.getLastChanged();\n+             }\n+         }\n+         return lastChanged;\n+     }\n+\n+     /**\n      * Gets the last translator header value for a set of header entries and the\n      * last translated target.\n      *\n@@ -814,50 +815,50 @@ public class ResourceUtils implements Serializable {\n      *            The PO header entries.\n      * @return A string with the value of the last translator.\n      */\n-    private String getLastTranslator(final HTextFlowTarget lastTranslated,\n-            final List<HeaderEntry> headerEntries) {\n-        Date headerRevisionDate = this.getHeaderRevisionDate(headerEntries);\n-        String lastTranslator = this.getHeaderLastTranslator(headerEntries);\n-        if (lastTranslated != null) {\n-            HPerson lastTranslatedBy = lastTranslated.getTranslator();\n-            Date lastModifiedDate = lastTranslated.getLastChanged();\n-            if (lastTranslatedBy != null) {\n-                if (lastModifiedDate == null\n-                        || lastModifiedDate.after(headerRevisionDate)) {\n-                    /**\n+     private String getLastTranslator(final HTextFlowTarget lastTranslated,\n+             final List<HeaderEntry> headerEntries) {\n+         Date headerRevisionDate = this.getHeaderRevisionDate(headerEntries);\n+         String lastTranslator = this.getHeaderLastTranslator(headerEntries);\n+         if (lastTranslated != null) {\n+             HPerson lastTranslatedBy = lastTranslated.getTranslator();\n+             Date lastModifiedDate = lastTranslated.getLastChanged();\n+             if (lastTranslatedBy != null) {\n+                 if (lastModifiedDate == null\n+                         || lastModifiedDate.after(headerRevisionDate)) {\n+                     /**\n                      * Use translator details from last translated target if the\n                      * lastModifiedDate is null or if lastModifiedDate is after\n                      * date in header entries\n                      */\n-                    lastTranslator =\n-                            generateLastTranslator(lastTranslatedBy.getName(),\n-                                    lastTranslatedBy.getEmail());\n-                }\n-            } else {\n-                /**\n+                     lastTranslator =\n+                             generateLastTranslator(lastTranslatedBy.getName(),\n+                                     lastTranslatedBy.getEmail());\n+                 }\n+             } else {\n+                 /**\n                  * When last translated target is being created in Zanata\n                  * without user (e.g upload, copyTrans), set translator to be\n                  * Zanata\n                  */\n-                lastTranslator = generateLastTranslator(COPIED_BY_ZANATA_NAME,\n-                        COPIED_BY_ZANATA_NAME_EMAIL);\n-            }\n-        }\n-        return lastTranslator;\n-    }\n-\n-    /**\n+                 lastTranslator = generateLastTranslator(COPIED_BY_ZANATA_NAME,\n+                         COPIED_BY_ZANATA_NAME_EMAIL);\n+             }\n+         }\n+         return lastTranslator;\n+     }\n+\n+     /**\n      * @param name\n      *            - name of person\n      * @param email\n      *            - email of person\n      * @return {name} <{email}>\n      */\n-    private String generateLastTranslator(String name, String email) {\n-        return name + \" <\" + email + \">\";\n-    }\n+     private String generateLastTranslator(String name, String email) {\n+         return name + \" <\" + email + \">\";\n+     }\n \n-    /**\n+     /**\n      * Returns a string representation of a Date for use in a PO file header.\n      *\n      * @param aDate\n@@ -865,111 +866,111 @@ public class ResourceUtils implements Serializable {\n      * @return A string with the value of the date suitable for a PO file\n      *         header.\n      */\n-    private String toPoHeaderString(Date aDate) {\n-        if (aDate != null) {\n-            SimpleDateFormat dateFormat = new SimpleDateFormat(PO_DATE_FORMAT);\n-            return dateFormat.format(aDate);\n-        } else {\n-            return \"\";\n-        }\n-    }\n-\n-    /**\n+     private String toPoHeaderString(Date aDate) {\n+         if (aDate != null) {\n+             SimpleDateFormat dateFormat = new SimpleDateFormat(PO_DATE_FORMAT);\n+             return dateFormat.format(aDate);\n+         } else {\n+             return \"\";\n+         }\n+     }\n+\n+     /**\n      * Returns the Language Team PO file header for a given locale.\n      */\n-    private String getLanguageTeam(final HLocale hLocale) {\n-        return hLocale.retrieveDisplayName();\n-    }\n+     private String getLanguageTeam(final HLocale hLocale) {\n+         return hLocale.retrieveDisplayName();\n+     }\n \n-    /**\n+     /**\n      * Retrieves the language PO file header for a given locale.\n      *\n      * @param locale\n      */\n-    String getLanguage(HLocale locale) {\n-        return StringUtils.replace(locale.getLocaleId().toString(), \"-\", \"_\");\n-    }\n+     String getLanguage(HLocale locale) {\n+         return StringUtils.replace(locale.getLocaleId().toString(), \"-\", \"_\");\n+     }\n \n-    /**\n+     /**\n      * Returns the application version.\n      */\n-    private String getSystemVersion() {\n-        try {\n-            return ZANATA_GENERATOR_PREFIX + \" \"\n-                    + (ServiceLocator.instance()\n-                            .getInstance(ApplicationConfiguration.class))\n-                                    .getVersion();\n-        } catch (Exception e) {\n-            return ZANATA_GENERATOR_PREFIX + \" UNKNOWN\";\n-        }\n-    }\n-\n-    /**\n+     private String getSystemVersion() {\n+         try {\n+             return ZANATA_GENERATOR_PREFIX + \" \"\n+                     + (ServiceLocator.instance()\n+                             .getInstance(ApplicationConfiguration.class))\n+                                     .getVersion();\n+         } catch (Exception e) {\n+             return ZANATA_GENERATOR_PREFIX + \" UNKNOWN\";\n+         }\n+     }\n+\n+     /**\n      * Returns the appropriate plural form for a given Locale. Returns a default\n      * value if there is no plural form information for the provided locale.\n      */\n-    public String getPluralForms(HLocale locale) {\n-        return getPluralForms(locale.getLocaleId());\n-    }\n+     public String getPluralForms(HLocale locale) {\n+         return getPluralForms(locale.getLocaleId());\n+     }\n \n-    /**\n+     /**\n      * Returns the appropriate plural form for a given Locale Id. Returns a\n      * default value if there is no plural form information for the provided\n      * locale id.\n      *\n      * @see {@link ResourceUtils#getPluralForms(org.zanata.common.LocaleId, boolean, boolean)}\n      */\n-    public String getPluralForms(LocaleId localeId) {\n-        return getPluralForms(localeId, true, true);\n-    }\n+     public String getPluralForms(LocaleId localeId) {\n+         return getPluralForms(localeId, true, true);\n+     }\n \n-    /**\n+     /**\n      * Returns the appropriate plural from for a given locale Id.\n      *\n      * From HLocale.plurals if available, else from pluralforms.properties\n      *\n      * @return A default value if useDefault is True. Otherwise, null.\n      */\n-    public String getPluralForms(LocaleId localeId, boolean checkDB,\n-            boolean useDefault) {\n-        if (checkDB) {\n-            String dbPluralForms = getPluralFormsFromDB(localeId);\n-            if (isNotEmpty(dbPluralForms)) {\n-                return dbPluralForms;\n-            }\n-        }\n-        final char[] alternateSeparators = { '.', '@' };\n-        String javaLocale = localeId.toJavaName().toLowerCase();\n-        // Replace all alternate separators for the \"_\" (Java) separator.\n-        for (char sep : alternateSeparators) {\n-            javaLocale = javaLocale.replace(sep, '_');\n-        }\n-        if (pluralForms.containsKey(javaLocale)) {\n-            return pluralForms.getProperty(javaLocale);\n-        }\n-        // Try out every combination. e.g: for xxx_yyy_zzz, try xxx_yyyy_zzz,\n-        // then\n-        // xxx_yyy, then xxx\n-        while (javaLocale.indexOf('_') > 0) {\n-            javaLocale = javaLocale.substring(0, javaLocale.lastIndexOf('_'));\n-            if (pluralForms.containsKey(javaLocale)) {\n-                return pluralForms.getProperty(javaLocale);\n-            }\n-        }\n-        if (useDefault) {\n-            return DEFAULT_PLURAL_FORM;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public int getNumPlurals(HDocument document, HLocale hLocale) {\n-        HPoTargetHeader headers = document.getPoTargetHeaders().get(hLocale);\n-        String headerEntries = headers != null ? headers.getEntries() : \"\";\n-        return getNumPlurals(headerEntries, hLocale.getLocaleId());\n-    }\n-\n-    /**\n+     public String getPluralForms(LocaleId localeId, boolean checkDB,\n+             boolean useDefault) {\n+         if (checkDB) {\n+             String dbPluralForms = getPluralFormsFromDB(localeId);\n+             if (isNotEmpty(dbPluralForms)) {\n+                 return dbPluralForms;\n+             }\n+         }\n+         final char[] alternateSeparators = { '.', '@' };\n+         String javaLocale = localeId.toJavaName().toLowerCase();\n+         // Replace all alternate separators for the \"_\" (Java) separator.\n+         for (char sep : alternateSeparators) {\n+             javaLocale = javaLocale.replace(sep, '_');\n+         }\n+         if (pluralForms.containsKey(javaLocale)) {\n+             return pluralForms.getProperty(javaLocale);\n+         }\n+         // Try out every combination. e.g: for xxx_yyy_zzz, try xxx_yyyy_zzz,\n+         // then\n+         // xxx_yyy, then xxx\n+         while (javaLocale.indexOf('_') > 0) {\n+             javaLocale = javaLocale.substring(0, javaLocale.lastIndexOf('_'));\n+             if (pluralForms.containsKey(javaLocale)) {\n+                 return pluralForms.getProperty(javaLocale);\n+             }\n+         }\n+         if (useDefault) {\n+             return DEFAULT_PLURAL_FORM;\n+         } else {\n+             return null;\n+         }\n+     }\n+\n+     public int getNumPlurals(HDocument document, HLocale hLocale) {\n+         HPoTargetHeader headers = document.getPoTargetHeaders().get(hLocale);\n+         String headerEntries = headers != null ? headers.getEntries() : \"\";\n+         return getNumPlurals(headerEntries, hLocale.getLocaleId());\n+     }\n+\n+     /**\n      * return plural count info from 1) PO Header entry if available, else 2)\n      * HLocale.plurals if available, else 3) pluralforms.properties, else 4)\n      * assume no plural forms (nplurals=1)\n@@ -979,56 +980,56 @@ public class ResourceUtils implements Serializable {\n      * @param localeId\n      *            - locale identifier\n      */\n-    int getNumPlurals(@Nullable String poHeaders, LocaleId localeId) {\n-        if (!isEmpty(poHeaders)) {\n-            Properties headerList = loadHeaders(poHeaders);\n-            String pluralFormsHeader = headerList.getProperty(PLURAL_FORMS_HDR);\n-            if (pluralFormsHeader != null) {\n-                if (!pluralFormsHeader.isEmpty()) {\n-                    try {\n-                        // try to parse plurals from the header\n-                        return extractNPlurals(pluralFormsHeader);\n-                    } catch (NumberFormatException | PluralParseException e) {\n-                        log.debug(\"Unable to parse plurals\", e);\n-                        // TODO return a warning to the user when uploading\n-                        log.warn(\n-                                \"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n-                                localeId, poHeaders);\n-                    }\n-                } else {\n-                    // TODO return a warning to the user when uploading\n-                    log.warn(\n-                            \"Empty plural forms header; using defaults for locale {}; headers: {}\",\n-                            localeId, poHeaders);\n-                }\n-            } else {\n-                // otherwise (no header) use the locale default\n-                log.debug(\n-                        \"No plural forms header; using defaults for locale {}; headers: {}\",\n-                        localeId, poHeaders);\n-            }\n-        }\n-        String localePluralForms = getPluralFormsForLocale(localeId);\n-        if (localePluralForms == null) {\n-            log.warn(\n-                    \"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\",\n-                    localeId, PLURALS_FILE, poHeaders);\n-            return DEFAULT_NPLURALS;\n-        }\n-        return extractNPlurals(localePluralForms);\n-    }\n-\n-    private Properties loadHeaders(String poHeaders) {\n-        try {\n-            Properties headerList = new Properties();\n-            headerList.load(new StringReader(poHeaders));\n-            return headerList;\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    /**\n+     int getNumPlurals(@Nullable String poHeaders, LocaleId localeId) {\n+         if (!isEmpty(poHeaders)) {\n+             Properties headerList = loadHeaders(poHeaders);\n+             String pluralFormsHeader = headerList.getProperty(PLURAL_FORMS_HDR);\n+             if (pluralFormsHeader != null) {\n+                 if (!pluralFormsHeader.isEmpty()) {\n+                     try {\n+                         // try to parse plurals from the header\n+                         return extractNPlurals(pluralFormsHeader);\n+                     } catch (NumberFormatException | PluralParseException e) {\n+                         log.debug(\"Unable to parse plurals\", e);\n+                         // TODO return a warning to the user when uploading\n+                         log.warn(\n+                                 \"Error parsing plural forms header; using defaults for locale {}; headers: {}\",\n+                                 localeId, poHeaders);\n+                     }\n+                 } else {\n+                     // TODO return a warning to the user when uploading\n+                     log.warn(\n+                             \"Empty plural forms header; using defaults for locale {}; headers: {}\",\n+                             localeId, poHeaders);\n+                 }\n+             } else {\n+                 // otherwise (no header) use the locale default\n+                 log.debug(\n+                         \"No plural forms header; using defaults for locale {}; headers: {}\",\n+                         localeId, poHeaders);\n+             }\n+         }\n+         String localePluralForms = getPluralFormsForLocale(localeId);\n+         if (localePluralForms == null) {\n+             log.warn(\n+                     \"Assuming no plurals for locale {}; no plural info found in database or in {}; headers: {}\",\n+                     localeId, PLURALS_FILE, poHeaders);\n+             return DEFAULT_NPLURALS;\n+         }\n+         return extractNPlurals(localePluralForms);\n+     }\n+\n+     private Properties loadHeaders(String poHeaders) {\n+         try {\n+             Properties headerList = new Properties();\n+             headerList.load(new StringReader(poHeaders));\n+             return headerList;\n+         } catch (IOException e) {\n+             throw new RuntimeException(e);\n+         }\n+     }\n+\n+     /**\n      * Returns HLocale.plurals if available, else value in\n      * pluralforms.properties\n      *\n@@ -1038,165 +1039,165 @@ public class ResourceUtils implements Serializable {\n      * @throws RuntimeException\n      *             if no plural forms are found\n      */\n-    @Nullable\n-    private String getPluralFormsForLocale(LocaleId localeId) {\n-        String pluralForms;\n-        pluralForms = getPluralFormsFromDB(localeId);\n-        if (isEmpty(pluralForms)) {\n-            pluralForms = getPluralFormsFromFile(localeId);\n-        }\n-        return pluralForms;\n-    }\n-\n-    /**\n+     @Nullable\n+     private String getPluralFormsForLocale(LocaleId localeId) {\n+         String pluralForms;\n+         pluralForms = getPluralFormsFromDB(localeId);\n+         if (isEmpty(pluralForms)) {\n+             pluralForms = getPluralFormsFromFile(localeId);\n+         }\n+         return pluralForms;\n+     }\n+\n+     /**\n      * @return plural forms from HLocale, null if not found\n      */\n-    @Nullable\n-    String getPluralFormsFromDB(LocaleId localeId) {\n-        HLocale hLocale = localeDAO.findByLocaleId(localeId);\n-        if (hLocale != null && isNotEmpty(hLocale.getPluralForms())) {\n-            return hLocale.getPluralForms();\n-        }\n-        return null;\n-    }\n-\n-    /**\n+     @Nullable\n+     String getPluralFormsFromDB(LocaleId localeId) {\n+         HLocale hLocale = localeDAO.findByLocaleId(localeId);\n+         if (hLocale != null && isNotEmpty(hLocale.getPluralForms())) {\n+             return hLocale.getPluralForms();\n+         }\n+         return null;\n+     }\n+\n+     /**\n      * Get plural forms from pluralforms.properties\n      *\n      * @param localeId\n      */\n-    @Nullable\n-    String getPluralFormsFromFile(@Nonnull LocaleId localeId) {\n-        return getPluralForms(localeId, false, false);\n-    }\n+     @Nullable\n+     String getPluralFormsFromFile(@Nonnull LocaleId localeId) {\n+         return getPluralForms(localeId, false, false);\n+     }\n \n-    /**\n+     /**\n      * Process pluralforms string and return plural count.\n      *\n      * @param pluralForms\n      *            string to parse\n      */\n-    int extractNPlurals(@Nonnull String pluralForms)\n-            throws NumberFormatException, PluralParseException {\n-        Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n-        if (nPluralsMatcher.find()) {\n-            String nPluralsString = nPluralsMatcher.group();\n-            Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n-            nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n-            if (isNotEmpty(nPluralsString)) {\n-                return Integer.parseInt(nPluralsString);\n-            }\n-        }\n-        throw new PluralParseException(\n-                \"can\\'t find valid nplurals in plural forms string: \"\n-                        + pluralForms);\n-    }\n-\n-    /**\n+     int extractNPlurals(@Nonnull String pluralForms)\n+             throws NumberFormatException, PluralParseException {\n+         Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n+         if (nPluralsMatcher.find()) {\n+             String nPluralsString = nPluralsMatcher.group();\n+             Matcher nPluralsValueMatcher =\n+                     NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n+             if (isNotEmpty(nPluralsString)) {\n+                 return Integer.parseInt(nPluralsString);\n+             }\n+         }\n+         throw new PluralParseException(\n+                 \"can\\'t find valid nplurals in plural forms string: \"\n+                         + pluralForms);\n+     }\n+\n+     /**\n      * Return if pluralForms is valid (positive value)\n      *\n      * @param pluralForms\n      *            string to check\n      */\n-    public boolean isValidPluralForms(@Nonnull String pluralForms) {\n-        if (!PLURAL_FORM_PATTERN.matcher(pluralForms).find()) {\n-            return false;\n-        }\n-        Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n-        String nPluralsString = \"\";\n-        while (nPluralsMatcher.find()) {\n-            nPluralsString = nPluralsMatcher.group();\n-            Matcher nPluralsValueMatcher =\n-                    NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n-            nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n-            break;\n-        }\n-        try {\n-            if (isNotEmpty(nPluralsString)) {\n-                int count = Integer.parseInt(nPluralsString);\n-                return count >= 1 && count <= MAX_TARGET_CONTENTS;\n-            }\n-        } catch (NumberFormatException e) {\n-            // invalid string for integer\n-        }\n-        return false;\n-    }\n-\n-    /**\n+     public boolean isValidPluralForms(@Nonnull String pluralForms) {\n+         if (!PLURAL_FORM_PATTERN.matcher(pluralForms).find()) {\n+             return false;\n+         }\n+         Matcher nPluralsMatcher = NPLURALS_PATTERN.matcher(pluralForms);\n+         String nPluralsString = \"\";\n+         while (nPluralsMatcher.find()) {\n+             nPluralsString = nPluralsMatcher.group();\n+             Matcher nPluralsValueMatcher =\n+                     NPLURALS_TAG_PATTERN.matcher(nPluralsString);\n+             nPluralsString = nPluralsValueMatcher.replaceAll(\"\");\n+             break;\n+         }\n+         try {\n+             if (isNotEmpty(nPluralsString)) {\n+                 int count = Integer.parseInt(nPluralsString);\n+                 return count >= 1 && count <= MAX_TARGET_CONTENTS;\n+             }\n+         } catch (NumberFormatException e) {\n+             // invalid string for integer\n+         }\n+         return false;\n+     }\n+\n+     /**\n      * @param fromHeader\n      * @param toHeader\n      * @see #pushPoTargetComment\n      */\n-    protected void pullPoTargetComment(HPoTargetHeader fromHeader,\n-            PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n-        StringBuilder sb = new StringBuilder();\n-        HSimpleComment comment = fromHeader.getComment();\n-        if (comment != null) {\n-            sb.append(comment.getComment());\n-        }\n-        // generate #zanata credit comments\n-        // order by year, then alphabetically\n-        Set<TranslatorCredit> zanataCredits = new TreeSet<TranslatorCredit>();\n-        for (HTextFlowTarget tft : hTargets) {\n-            HPerson person = tft.getLastModifiedBy();\n-            if (person != null) {\n-                Calendar lastChanged = Calendar.getInstance();\n-                lastChanged.setTime(tft.getLastChanged());\n-                int year = lastChanged.get(Calendar.YEAR);\n-                TranslatorCredit credit = new TranslatorCredit();\n-                credit.setEmail(person.getEmail());\n-                credit.setName(person.getName());\n-                credit.setYear(year);\n-                zanataCredits.add(credit);\n-            }\n-        }\n-        for (TranslatorCredit credit : zanataCredits) {\n-            if (sb.length() != 0)\n-                sb.append(NEWLINE);\n-            sb.append(credit);\n-            sb.append(' ');\n-            sb.append(ZANATA_TAG);\n-        }\n-        toHeader.setComment(sb.toString());\n-    }\n-\n-    public void transferToTextFlow(HTextFlow from, TextFlow to) {\n-        if (from.isPlural()) {\n-            to.setContents(from.getContents());\n-        } else {\n-            to.setContents(from.getContents().get(0));\n-        }\n-        to.setRevision(from.getRevision());\n-        to.setPlural(from.isPlural());\n-        // TODO HTextFlow should have a lang\n-        // to.setLang(from.get)\n-    }\n-\n-    public void transferToAbstractResourceMeta(HDocument from,\n-            AbstractResourceMeta to) {\n-        to.setContentType(from.getContentType());\n-        to.setLang(from.getLocale().getLocaleId());\n-        to.setName(from.getDocId());\n-        // TODO ADD support within the hibernate model for multiple resource\n-        // types\n-        to.setType(ResourceType.FILE);\n-        to.setRevision(from.getRevision());\n-    }\n-\n-    public void transferToResourceExtensions(HDocument from,\n-            ExtensionSet<AbstractResourceMetaExtension> to,\n-            Set<String> enabledExtensions) {\n-        if (enabledExtensions.contains(PoHeader.ID)) {\n-            PoHeader poHeaderExt = new PoHeader();\n-            if (from.getPoHeader() != null) {\n-                transferToPoHeader(from.getPoHeader(), poHeaderExt);\n-                to.add(poHeaderExt);\n-            }\n-        }\n-    }\n-\n-    /**\n+     protected void pullPoTargetComment(HPoTargetHeader fromHeader,\n+             PoTargetHeader toHeader, List<HTextFlowTarget> hTargets) {\n+         StringBuilder sb = new StringBuilder();\n+         HSimpleComment comment = fromHeader.getComment();\n+         if (comment != null) {\n+             sb.append(comment.getComment());\n+         }\n+         // generate #zanata credit comments\n+         // order by year, then alphabetically\n+         Set<TranslatorCredit> zanataCredits = new TreeSet<TranslatorCredit>();\n+         for (HTextFlowTarget tft : hTargets) {\n+             HPerson person = tft.getLastModifiedBy();\n+             if (person != null) {\n+                 Calendar lastChanged = Calendar.getInstance();\n+                 lastChanged.setTime(tft.getLastChanged());\n+                 int year = lastChanged.get(Calendar.YEAR);\n+                 TranslatorCredit credit = new TranslatorCredit();\n+                 credit.setEmail(person.getEmail());\n+                 credit.setName(person.getName());\n+                 credit.setYear(year);\n+                 zanataCredits.add(credit);\n+             }\n+         }\n+         for (TranslatorCredit credit : zanataCredits) {\n+             if (sb.length() != 0)\n+                 sb.append(NEWLINE);\n+             sb.append(credit);\n+             sb.append(' ');\n+             sb.append(ZANATA_TAG);\n+         }\n+         toHeader.setComment(sb.toString());\n+     }\n+\n+     public void transferToTextFlow(HTextFlow from, TextFlow to) {\n+         if (from.isPlural()) {\n+             to.setContents(from.getContents());\n+         } else {\n+             to.setContents(from.getContents().get(0));\n+         }\n+         to.setRevision(from.getRevision());\n+         to.setPlural(from.isPlural());\n+         // TODO HTextFlow should have a lang\n+         // to.setLang(from.get)\n+     }\n+\n+     public void transferToAbstractResourceMeta(HDocument from,\n+             AbstractResourceMeta to) {\n+         to.setContentType(from.getContentType());\n+         to.setLang(from.getLocale().getLocaleId());\n+         to.setName(from.getDocId());\n+         // TODO ADD support within the hibernate model for multiple resource\n+         // types\n+         to.setType(ResourceType.FILE);\n+         to.setRevision(from.getRevision());\n+     }\n+\n+     public void transferToResourceExtensions(HDocument from,\n+             ExtensionSet<AbstractResourceMetaExtension> to,\n+             Set<String> enabledExtensions) {\n+         if (enabledExtensions.contains(PoHeader.ID)) {\n+             PoHeader poHeaderExt = new PoHeader();\n+             if (from.getPoHeader() != null) {\n+                 transferToPoHeader(from.getPoHeader(), poHeaderExt);\n+                 to.add(poHeaderExt);\n+             }\n+         }\n+     }\n+\n+     /**\n      * @param from\n      * @param to\n      * @param enabledExtensions\n@@ -1204,171 +1205,171 @@ public class ResourceUtils implements Serializable {\n      * @see #transferFromTranslationsResourceExtensions\n      * @return true only if extensions were found\n      */\n-    public boolean transferToTranslationsResourceExtensions(HDocument from,\n-            ExtensionSet<TranslationsResourceExtension> to,\n-            Set<String> enabledExtensions, HLocale locale,\n-            List<HTextFlowTarget> hTargets) {\n-        boolean found = false;\n-        if (enabledExtensions.contains(PoTargetHeader.ID)) {\n-            log.debug(\"PoTargetHeader requested\");\n-            PoTargetHeader poTargetHeader = new PoTargetHeader();\n-            HPoTargetHeader fromHeader = from.getPoTargetHeaders().get(locale);\n-            if (fromHeader != null) {\n-                found = true;\n-                log.debug(\"PoTargetHeader found\");\n-            } else {\n-                // If no header is found, use a default empty header for\n-                // generation\n-                // purposes\n-                fromHeader = new HPoTargetHeader();\n-                fromHeader.setEntries(\"\");\n-            }\n-            transferToPoTargetHeader(fromHeader, poTargetHeader, hTargets,\n-                    locale);\n-            to.add(poTargetHeader);\n-        }\n-        return found;\n-    }\n-\n-    public void transferToTextFlowExtensions(HTextFlow from,\n-            ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n-        if (enabledExtensions.contains(PotEntryHeader.ID)\n-                && from.getPotEntryData() != null) {\n-            PotEntryHeader header = new PotEntryHeader();\n-            transferToPotEntryHeader(from.getPotEntryData(), header);\n-            log.debug(\"set header:{}\", from.getPotEntryData());\n-            to.add(header);\n-        }\n-        if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n-            SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n-            log.debug(\"set comment:{}\", from.getComment().getComment());\n-            to.add(comment);\n-        }\n-    }\n-\n-    /**\n+     public boolean transferToTranslationsResourceExtensions(HDocument from,\n+             ExtensionSet<TranslationsResourceExtension> to,\n+             Set<String> enabledExtensions, HLocale locale,\n+             List<HTextFlowTarget> hTargets) {\n+         boolean found = false;\n+         if (enabledExtensions.contains(PoTargetHeader.ID)) {\n+             log.debug(\"PoTargetHeader requested\");\n+             PoTargetHeader poTargetHeader = new PoTargetHeader();\n+             HPoTargetHeader fromHeader = from.getPoTargetHeaders().get(locale);\n+             if (fromHeader != null) {\n+                 found = true;\n+                 log.debug(\"PoTargetHeader found\");\n+             } else {\n+                 // If no header is found, use a default empty header for\n+                 // generation\n+                 // purposes\n+                 fromHeader = new HPoTargetHeader();\n+                 fromHeader.setEntries(\"\");\n+             }\n+             transferToPoTargetHeader(fromHeader, poTargetHeader, hTargets,\n+                     locale);\n+             to.add(poTargetHeader);\n+         }\n+         return found;\n+     }\n+\n+     public void transferToTextFlowExtensions(HTextFlow from,\n+             ExtensionSet<TextFlowExtension> to, Set<String> enabledExtensions) {\n+         if (enabledExtensions.contains(PotEntryHeader.ID)\n+                 && from.getPotEntryData() != null) {\n+             PotEntryHeader header = new PotEntryHeader();\n+             transferToPotEntryHeader(from.getPotEntryData(), header);\n+             log.debug(\"set header:{}\", from.getPotEntryData());\n+             to.add(header);\n+         }\n+         if (enabledExtensions.contains(SimpleComment.ID)\n+                 && from.getComment() != null) {\n+             SimpleComment comment =\n+                     new SimpleComment(from.getComment().getComment());\n+             log.debug(\"set comment:{}\", from.getComment().getComment());\n+             to.add(comment);\n+         }\n+     }\n+\n+     /**\n      * @see #transferFromPotEntryHeader(org.zanata.rest.dto.extensions.gettext.PotEntryHeader,\n      *      org.zanata.model.po.HPotEntryData,\n      *      org.zanata.rest.dto.resource.TextFlow)\n      * @param from\n      * @param to\n      */\n-    private void transferToPotEntryHeader(HPotEntryData from,\n-            PotEntryHeader to) {\n-        to.setContext(from.getContext());\n-        List<String> flags = new ArrayList<String>(0);\n-        if (from.getFlags() != null) {\n-            flags = StringUtil.split(from.getFlags(), \",\");\n-        }\n-        to.getFlags().addAll(flags);\n-        List<String> refs = new ArrayList<String>(0);\n-        if (from.getReferences() != null) {\n-            refs = StringUtil.split(from.getReferences(), \",\");\n-        }\n-        to.getReferences().addAll(refs);\n-    }\n-\n-    /**\n+     private void transferToPotEntryHeader(HPotEntryData from,\n+             PotEntryHeader to) {\n+         to.setContext(from.getContext());\n+         List<String> flags = new ArrayList<String>(0);\n+         if (from.getFlags() != null) {\n+             flags = StringUtil.split(from.getFlags(), \",\");\n+         }\n+         to.getFlags().addAll(flags);\n+         List<String> refs = new ArrayList<String>(0);\n+         if (from.getReferences() != null) {\n+             refs = StringUtil.split(from.getReferences(), \",\");\n+         }\n+         to.getReferences().addAll(refs);\n+     }\n+\n+     /**\n      * @param from\n      * @param to\n      * @param enabledExtensions\n      * @todo merge with {@link #transferToTextFlowTarget}\n      */\n-    public void transferToTextFlowTargetExtensions(HTextFlowTarget from,\n-            ExtensionSet<TextFlowTargetExtension> to,\n-            Set<String> enabledExtensions) {\n-        if (enabledExtensions.contains(SimpleComment.ID)\n-                && from.getComment() != null) {\n-            SimpleComment comment =\n-                    new SimpleComment(from.getComment().getComment());\n-            to.add(comment);\n-        }\n-    }\n-\n-    public String encodeDocId(String id) {\n-        String other = StringUtils.replace(id, \"/\", \",\");\n-        try {\n-            other = URLEncoder.encode(other, \"UTF-8\");\n-            return StringUtils.replace(other, \"%2C\", \",\");\n-        } catch (UnsupportedEncodingException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    public String decodeDocId(String id) {\n-        try {\n-            String other = URLDecoder.decode(id, \"UTF-8\");\n-            return StringUtils.replace(other, \",\", \"/\");\n-        } catch (UnsupportedEncodingException e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    /**\n+     public void transferToTextFlowTargetExtensions(HTextFlowTarget from,\n+             ExtensionSet<TextFlowTargetExtension> to,\n+             Set<String> enabledExtensions) {\n+         if (enabledExtensions.contains(SimpleComment.ID)\n+                 && from.getComment() != null) {\n+             SimpleComment comment =\n+                     new SimpleComment(from.getComment().getComment());\n+             to.add(comment);\n+         }\n+     }\n+\n+     public String encodeDocId(String id) {\n+         String other = StringUtils.replace(id, \"/\", \",\");\n+         try {\n+             other = URLEncoder.encode(other, \"UTF-8\");\n+             return StringUtils.replace(other, \"%2C\", \",\");\n+         } catch (UnsupportedEncodingException e) {\n+             throw new RuntimeException(e);\n+         }\n+     }\n+\n+     public String decodeDocId(String id) {\n+         try {\n+             String other = URLDecoder.decode(id, \"UTF-8\");\n+             return StringUtils.replace(other, \",\", \"/\");\n+         } catch (UnsupportedEncodingException e) {\n+             throw new RuntimeException(e);\n+         }\n+     }\n+\n+     /**\n      * @todo merge with {@link #transferToTextFlowTargetExtensions}\n      */\n-    @SuppressWarnings(\"deprecation\")\n-    public void transferToTextFlowTarget(HTextFlowTarget from,\n-            TextFlowTarget to, boolean markTranslatedAsApproved) {\n-        if (from.getTextFlow().isPlural()) {\n-            to.setContents(from.getContents());\n-        } else if (!from.getContents().isEmpty()) {\n-            to.setContents(from.getContents().get(0));\n-        } else {\n-            to.setContents(Collections.<String> emptyList());\n-        }\n-        // TODO rhbz953734 - at the moment we will map review state into old\n-        // state for compatibility\n-        to.setState(mapContentState(from.getState(), markTranslatedAsApproved));\n-        to.setRevision(from.getVersionNum());\n-        to.setTextFlowRevision(from.getTextFlowRevision());\n-        HPerson translator = from.getTranslator();\n-        if (translator != null) {\n-            to.setTranslator(\n-                    new Person(translator.getEmail(), translator.getName()));\n-        }\n-    }\n-\n-    private static ContentState mapContentState(ContentState realState,\n-            boolean markTranslatedAsApproved) {\n-        if (markTranslatedAsApproved) {\n-            switch (realState) {\n-            case Translated:\n-                return ContentState.Approved;\n-\n-            case Rejected:\n-                return ContentState.NeedReview;\n-\n-            default:\n-                return realState;\n-            }\n-        }\n-        return realState;\n-    }\n-\n-    public Resource buildResource(HDocument document) {\n-        Set<String> extensions = new HashSet<String>();\n-        extensions.add(\"gettext\");\n-        extensions.add(\"comment\");\n-        Resource entity = new Resource(document.getDocId());\n-        this.transferToResource(document, entity);\n-        // handle extensions\n-        this.transferToResourceExtensions(document, entity.getExtensions(true),\n-                extensions);\n-        for (HTextFlow htf : document.getTextFlows()) {\n-            TextFlow tf = new TextFlow(htf.getResId(),\n-                    document.getLocale().getLocaleId());\n-            this.transferToTextFlowExtensions(htf, tf.getExtensions(true),\n-                    extensions);\n-            this.transferToTextFlow(htf, tf);\n-            entity.getTextFlows().add(tf);\n-        }\n-        return entity;\n-    }\n-\n-    /**\n+     @SuppressWarnings(\"deprecation\")\n+     public void transferToTextFlowTarget(HTextFlowTarget from,\n+             TextFlowTarget to, boolean markTranslatedAsApproved) {\n+         if (from.getTextFlow().isPlural()) {\n+             to.setContents(from.getContents());\n+         } else if (!from.getContents().isEmpty()) {\n+             to.setContents(from.getContents().get(0));\n+         } else {\n+             to.setContents(Collections.<String> emptyList());\n+         }\n+         // TODO rhbz953734 - at the moment we will map review state into old\n+         // state for compatibility\n+         to.setState(mapContentState(from.getState(), markTranslatedAsApproved));\n+         to.setRevision(from.getVersionNum());\n+         to.setTextFlowRevision(from.getTextFlowRevision());\n+         HPerson translator = from.getTranslator();\n+         if (translator != null) {\n+             to.setTranslator(\n+                     new Person(translator.getEmail(), translator.getName()));\n+         }\n+     }\n+\n+     private static ContentState mapContentState(ContentState realState,\n+             boolean markTranslatedAsApproved) {\n+         if (markTranslatedAsApproved) {\n+             switch (realState) {\n+             case Translated:\n+                 return ContentState.Approved;\n+\n+             case Rejected:\n+                 return ContentState.NeedReview;\n+\n+             default:\n+                 return realState;\n+             }\n+         }\n+         return realState;\n+     }\n+\n+     public Resource buildResource(HDocument document) {\n+         Set<String> extensions = new HashSet<String>();\n+         extensions.add(\"gettext\");\n+         extensions.add(\"comment\");\n+         Resource entity = new Resource(document.getDocId());\n+         this.transferToResource(document, entity);\n+         // handle extensions\n+         this.transferToResourceExtensions(document, entity.getExtensions(true),\n+                 extensions);\n+         for (HTextFlow htf : document.getTextFlows()) {\n+             TextFlow tf = new TextFlow(htf.getResId(),\n+                     document.getLocale().getLocaleId());\n+             this.transferToTextFlowExtensions(htf, tf.getExtensions(true),\n+                     extensions);\n+             this.transferToTextFlow(htf, tf);\n+             entity.getTextFlows().add(tf);\n+         }\n+         return entity;\n+     }\n+\n+     /**\n      * @param transRes\n      * @param document\n      * @param locale\n@@ -1379,51 +1380,52 @@ public class ResourceUtils implements Serializable {\n      * @return true only if some data was found (text flow targets, or some\n      *         metadata extensions)\n      */\n-    public boolean transferToTranslationsResource(TranslationsResource transRes,\n-            HDocument document, HLocale locale, Set<String> enabledExtensions,\n-            List<HTextFlowTarget> hTargets, boolean markTranslatedAsApproved) {\n-        boolean found = this.transferToTranslationsResourceExtensions(document,\n-                transRes.getExtensions(true), enabledExtensions, locale,\n-                hTargets);\n-        for (HTextFlowTarget hTarget : hTargets) {\n-            found = true;\n-            TextFlowTarget target = new TextFlowTarget();\n-            target.setResId(hTarget.getTextFlow().getResId());\n-            this.transferToTextFlowTarget(hTarget, target, markTranslatedAsApproved);\n-            this.transferToTextFlowTargetExtensions(hTarget,\n-                    target.getExtensions(true), enabledExtensions);\n-            transRes.getTextFlowTargets().add(target);\n-        }\n-        return found;\n-    }\n-\n-    /**\n+     public boolean transferToTranslationsResource(TranslationsResource transRes,\n+             HDocument document, HLocale locale, Set<String> enabledExtensions,\n+             List<HTextFlowTarget> hTargets, boolean markTranslatedAsApproved) {\n+         boolean found = this.transferToTranslationsResourceExtensions(document,\n+                 transRes.getExtensions(true), enabledExtensions, locale,\n+                 hTargets);\n+         for (HTextFlowTarget hTarget : hTargets) {\n+             found = true;\n+             TextFlowTarget target = new TextFlowTarget();\n+             target.setResId(hTarget.getTextFlow().getResId());\n+             this.transferToTextFlowTarget(hTarget, target, markTranslatedAsApproved);\n+             this.transferToTextFlowTargetExtensions(hTarget,\n+                     target.getExtensions(true), enabledExtensions);\n+             transRes.getTextFlowTargets().add(target);\n+         }\n+         return found;\n+     }\n+\n+     /**\n      * Ensures that any extensions sent with the current query are valid for\n      * this context.\n      *\n      * @param requestedExt\n      *            Extensions to be validated\n      */\n-    public static void validateExtensions(Set<String> requestedExt) {\n-        Set<String> validExtensions = ExtensionType.asStringSet();\n-        if (!CollectionUtils.isSubCollection(requestedExt, validExtensions)) {\n-            @SuppressWarnings(\"unchecked\")\n-            Collection<String> invalidExtensions =\n-                    CollectionUtils.subtract(requestedExt, validExtensions);\n-            Response response =\n-                    Response.status(Status.BAD_REQUEST)\n-                            .entity(\"Unsupported Extensions within this context: \"\n-                                    + StringUtils.join(invalidExtensions, \",\"))\n-                            .build();\n-            throw new WebApplicationException(response);\n-        }\n-    }\n-\n-    public static class PluralParseException extends RuntimeException {\n-        private static final long serialVersionUID = 1L;\n-\n-        public PluralParseException(String string) {\n-            super(string);\n-        }\n-    }\n-}\n+     public static void validateExtensions(Set<String> requestedExt) {\n+         Set<String> validExtensions = ExtensionType.asStringSet();\n+         if (!CollectionUtils.isSubCollection(requestedExt, validExtensions)) {\n+             @SuppressWarnings(\"unchecked\")\n+             Collection<String> invalidExtensions =\n+                     CollectionUtils.subtract(requestedExt, validExtensions);\n+             Response response =\n+                     Response.status(Status.BAD_REQUEST)\n+                             .entity(\"Unsupported Extensions within this context: \"\n+                                     + StringUtils.join(invalidExtensions, \",\"))\n+                             .build();\n+             throw new WebApplicationException(response);\n+         }\n+     }\n+\n+     public static class PluralParseException extends RuntimeException {\n+         private static final long serialVersionUID = 1L;\n+\n+         public PluralParseException(String string) {\n+             super(string);\n+         }\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 864
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/2/ResourceUtils.java\nindex 80b340aeb3..7d9abcf64e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/2/ResourceUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/2/ResourceUtils.java\n@@ -369,7 +369,9 @@ public class ResourceUtils implements Serializable {\n             toTargetHeader.setTargetLanguage(locale);\n             toTargetHeader.setDocument(doc);\n             transferFromPoTargetHeader(fromTargetHeader, toTargetHeader,\n-                    MergeType.IMPORT); // return\n+\n+            MergeType\n+            . IMPORT); // return\n             // value\n             // not\n             // needed\n",
            "diff_size": 3
        }
    ]
}