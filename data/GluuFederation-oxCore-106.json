{
    "error_id": "106",
    "information": {
        "errors": [
            {
                "line": "628",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "                result.add(attr.getKey() + \": \" + attr.getValue());\n            }\n            \n            return result.toArray(new String[result.size()]);\n        } catch (Exception ex) {\n            throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/106/CouchbaseEntryManager.java\nindex 720a327e42..c782de7c67 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler/106/CouchbaseEntryManager.java\n@@ -625,7 +625,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n             }\n-            \n+\n             return result.toArray(new String[result.size()]);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/106/CouchbaseEntryManager.java\nindex 720a327e42..01760500bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/intellij/106/CouchbaseEntryManager.java\n@@ -110,7 +110,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     @Override\n     protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+                                          List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (!isSchemaUpdate) {\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n@@ -118,7 +118,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n             if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n                 attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n+                    new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n             }\n         }\n     }\n@@ -233,13 +233,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n                             if (removeValues.size() > 0) {\n                                 MutationSpec removeModification = createModification(Mutation.DELETE, attributeName,\n-                                        removeValues.toArray(new String[removeValues.size()]));\n+                                    removeValues.toArray(new String[removeValues.size()]));\n                                 modifications.add(removeModification);\n                             }\n \n                             if (addValues.size() > 0) {\n                                 MutationSpec addModification = createModification(Mutation.DICT_ADD, attributeName,\n-                                        addValues.toArray(new String[addValues.size()]));\n+                                    addValues.toArray(new String[addValues.size()]));\n                                 modifications.add(addModification);\n                             }\n                         }\n@@ -313,7 +313,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     @Override\n     // TODO: Reuse findListViewResponse after changing method signature\n     public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int startIndex, int count, int pageLimit) {\n+                                   BatchOperation<T> batchOperation, int startIndex, int count, int pageLimit) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -342,10 +342,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         ParsedKey keyWithInum = null;\n         try {\n             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass,\n-                    propertiesAnnotations);\n+                propertiesAnnotations);\n             keyWithInum = toCouchbaseKey(baseDN);\n             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, startIndex, pageLimit, count,\n-                    defaultSort, batchOperationWraper, false, currentLdapReturnAttributes);\n+                defaultSort, batchOperationWraper, false, currentLdapReturnAttributes);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -359,14 +359,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n+            searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n \n         return entries;\n     }\n \n     @Override\n     public <T> ListViewResponse<T> findListViewResponse(String baseDN, Class<T> entryClass, Filter filter, int startIndex, int count, int pageLimit,\n-            String sortBy, SortOrder sortOrder, String[] ldapReturnAttributes) {\n+                                                        String sortBy, SortOrder sortOrder, String[] ldapReturnAttributes) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -395,9 +395,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             Sort requestedSort = buildSort(sortBy, sortOrder);\n \n             if (ArrayHelper.isEmpty(defaultSort)) {\n-                defaultSort = new Sort[] { requestedSort };\n+                defaultSort = new Sort[] {requestedSort};\n             } else {\n-                defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n+                defaultSort = ArrayHelper.arrayMerge(new Sort[] {requestedSort}, defaultSort);\n             }\n         }\n \n@@ -406,7 +406,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             keyWithInum = toCouchbaseKey(baseDN);\n             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, startIndex, pageLimit,\n-                    count, defaultSort, null, true, currentLdapReturnAttributes);\n+                count, defaultSort, null, true, currentLdapReturnAttributes);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n@@ -426,7 +426,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n+            searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n         result.setResult(entries);\n \n         return result;\n@@ -450,7 +450,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n             searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 1, 0, 1, null, null, false,\n-                    ldapReturnAttributes);\n+                ldapReturnAttributes);\n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n@@ -462,7 +462,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n-            JsonObject... searchResultEntries) {\n+                                         JsonObject... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n \n@@ -509,7 +509,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             if (attributeObject instanceof JsonArray) {\n                 attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n             } else {\n-                attributeValueStrings = new String[] { attributeObject.toString() };\n+                attributeValueStrings = new String[] {attributeObject.toString()};\n             }\n \n             AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n@@ -524,7 +524,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n             ListViewResponse<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n-                    SearchScope.SUB, 0, 0, 1, null, null, false);\n+                SearchScope.SUB, 0, 0, 1, null, null, false);\n             if ((searchResult == null) || (searchResult.getItemsPerPage() != 1)) {\n                 return false;\n             }\n@@ -557,7 +557,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n-        String[] ldapReturnAttributes = new String[] { \"\" }; // Don't load attributes\n+        String[] ldapReturnAttributes = new String[] {\"\"}; // Don't load attributes\n \n         // Find entries\n         Filter searchFilter;\n@@ -572,10 +572,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         try {\n             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n             operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 0, 100, 0, null,\n-                    batchOperationWraper, false, ldapReturnAttributes);\n+                batchOperationWraper, false, ldapReturnAttributes);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+                String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n@@ -625,7 +625,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n             }\n-            \n+\n             return result.toArray(new String[result.size()]);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/106/CouchbaseEntryManager.java\nindex 720a327e42..1204b0d217 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/naturalize/106/CouchbaseEntryManager.java\n@@ -625,9 +625,9 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n             }\n-            \n-            return result.toArray(new String[result.size()]);\n-        } catch (Exception ex) {\n+\n+return result.toArray(new String[result.size()]);\n+    } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n         }\n     }\n@@ -671,4 +671,4 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "306",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "337",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "357",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "396",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "416",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "439",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "452",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "565",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/106/CouchbaseEntryManager.java\nindex 720a327e42..e93f6e32e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/codebuff/106/CouchbaseEntryManager.java\n@@ -17,7 +17,6 @@ import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.gluu.persist.couchbase.model.ParsedKey;\n import org.gluu.persist.couchbase.operation.CouchbaseOperationService;\n import org.gluu.persist.couchbase.operation.impl.CouchbaseConnectionProvider;\n@@ -43,7 +42,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.xdi.util.ArrayHelper;\n import org.xdi.util.StringHelper;\n-\n import com.couchbase.client.core.message.kv.subdoc.multi.Mutation;\n import com.couchbase.client.java.document.json.JsonArray;\n import com.couchbase.client.java.document.json.JsonObject;\n@@ -57,15 +55,14 @@ import com.couchbase.client.java.subdoc.MutationSpec;\n  * @author Yuriy Movchan Date: 05/14/2018\n  */\n // TODO: Review meta_doc_id. We must have it in every JsonDocument\n+\n+\n public class CouchbaseEntryManager extends BaseEntryManager implements Serializable {\n \n     private static final long serialVersionUID = 2127241817126412574L;\n-\n     private static final Logger LOG = LoggerFactory.getLogger(CouchbaseConnectionProvider.class);\n-\n     private static final CouchbaseFilterConverter FILTER_CONVERTER = new CouchbaseFilterConverter();\n     private static final CouchbaseKeyConverter KEY_CONVERTER = new CouchbaseKeyConverter();\n-\n     private CouchbaseOperationsServiceImpl operationService;\n     private List<DeleteNotifier> subscribers;\n \n@@ -101,6 +98,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public <T> T merge(T entry) {\n         Class<?> entryClass = entry.getClass();\n         checkEntryClass(entryClass, true);\n+\n         if (isLdapSchemaEntry(entryClass)) {\n             throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n         } else {\n@@ -109,16 +107,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     }\n \n     @Override\n-    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap,\n-            List<AttributeDataModification> attributeDataModifications) {\n+    protected <T> void updateMergeChanges(T entry, boolean isSchemaUpdate, Class<?> entryClass, Map<String, AttributeData> attributesFromDbMap, List<AttributeDataModification> attributeDataModifications) {\n         // Update object classes if entry contains custom object classes\n         if (!isSchemaUpdate) {\n             String[] objectClasses = getObjectClasses(entry, entryClass);\n             String[] objectClassesFromDb = attributesFromDbMap.get(OBJECT_CLASS.toLowerCase()).getValues();\n-\n             if (!Arrays.equals(objectClassesFromDb, objectClasses)) {\n-                attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE,\n-                        new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n+                attributeDataModifications.add(new AttributeDataModification(AttributeModificationType.REPLACE, new AttributeData(OBJECT_CLASS, objectClasses), new AttributeData(OBJECT_CLASS, objectClassesFromDb)));\n             }\n         }\n     }\n@@ -127,14 +122,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public void remove(Object entry) {\n         Class<?> entryClass = entry.getClass();\n         checkEntryClass(entryClass, true);\n+\n         if (isLdapSchemaEntry(entryClass)) {\n             throw new UnsupportedOperationException(\"Server doesn't support dynamic schema modifications\");\n         }\n \n         Object dnValue = getDNValue(entry, entryClass);\n-\n         LOG.debug(\"LDAP entry to remove: '{}'\", dnValue.toString());\n-\n         remove(dnValue.toString());\n     }\n \n@@ -144,13 +138,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         for (AttributeData attribute : attributes) {\n             String attributeName = attribute.getName();\n             String[] attributeValues = attribute.getValues();\n-\n             if (ArrayHelper.isNotEmpty(attributeValues) && StringHelper.isNotEmpty(attributeValues[0])) {\n                 jsonObject.put(attributeName, attributeValues);\n             }\n         }\n \n         // Persist entry\n+\n         try {\n             boolean result = operationService.addEntry(toCouchbaseKey(dn).getKey(), jsonObject);\n             if (!result) {\n@@ -169,7 +163,6 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (AttributeDataModification attributeDataModification : attributeDataModifications) {\n                 AttributeData attribute = attributeDataModification.getAttribute();\n                 AttributeData oldAttribute = attributeDataModification.getOldAttribute();\n-\n                 String attributeName = null;\n                 String[] attributeValues = null;\n                 if (attribute != null) {\n@@ -196,23 +189,22 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n                         } else {\n                             String[] oldValues = ArrayHelper.arrayClone(oldAttributeValues);\n                             String[] newValues = ArrayHelper.arrayClone(attributeValues);\n-\n                             Arrays.sort(oldValues);\n                             Arrays.sort(newValues);\n \n                             boolean[] retainOldValues = new boolean[oldValues.length];\n                             Arrays.fill(retainOldValues, false);\n-\n                             List<String> addValues = new ArrayList<String>();\n                             List<String> removeValues = new ArrayList<String>();\n \n                             // Add new values\n                             for (String value : newValues) {\n                                 int idx = Arrays.binarySearch(oldValues, value, new Comparator<String>() {\n-                                    @Override\n-                                    public int compare(String o1, String o2) {\n-                                        return o1.toLowerCase().compareTo(o2.toLowerCase());\n-                                    }\n+\n+                                              @Override\n+                                              public int compare(String o1, String o2) {\n+                                                  return o1.toLowerCase().compareTo(o2.toLowerCase());\n+                                              }\n                                 });\n                                 if (idx >= 0) {\n                                     // Old values array contains new value. Retain\n@@ -225,6 +217,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n                             }\n \n                             // Remove values which we don't have in new values\n+\n                             for (int i = 0; i < oldValues.length; i++) {\n                                 if (!retainOldValues[i]) {\n                                     removeValues.add(oldValues[i]);\n@@ -232,14 +225,12 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n                             }\n \n                             if (removeValues.size() > 0) {\n-                                MutationSpec removeModification = createModification(Mutation.DELETE, attributeName,\n-                                        removeValues.toArray(new String[removeValues.size()]));\n+                                MutationSpec removeModification = createModification(Mutation.DELETE, attributeName, removeValues.toArray(new String[removeValues.size()]));\n                                 modifications.add(removeModification);\n                             }\n \n                             if (addValues.size() > 0) {\n-                                MutationSpec addModification = createModification(Mutation.DICT_ADD, attributeName,\n-                                        addValues.toArray(new String[addValues.size()]));\n+                                MutationSpec addModification = createModification(Mutation.DICT_ADD, attributeName, addValues.toArray(new String[addValues.size()]));\n                                 modifications.add(addModification);\n                             }\n                         }\n@@ -312,8 +303,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n     @Override\n     // TODO: Reuse findListViewResponse after changing method signature\n-    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes,\n-            BatchOperation<T> batchOperation, int startIndex, int count, int pageLimit) {\n+    public <T> List<T> findEntries(String baseDN, Class<T> entryClass, Filter filter, SearchScope scope, String[] ldapReturnAttributes, BatchOperation<T> batchOperation, int startIndex, int count, int pageLimit) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -328,6 +318,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -336,37 +327,34 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Prepare default sort\n-        Sort[] defaultSort = getDefaultSort(entryClass);\n \n+        Sort[] defaultSort = getDefaultSort(entryClass);\n         ListViewResponse<JsonObject> searchResult = null;\n         ParsedKey keyWithInum = null;\n         try {\n-            CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass,\n-                    propertiesAnnotations);\n+            CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation, this, entryClass, propertiesAnnotations);\n             keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, startIndex, pageLimit, count,\n-                    defaultSort, batchOperationWraper, false, currentLdapReturnAttributes);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), scope, startIndex, pageLimit, count, defaultSort, batchOperationWraper, false, currentLdapReturnAttributes);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         if (searchResult.getItemsPerPage() == 0) {\n             return new ArrayList<T>(0);\n         }\n \n-        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n+        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum, searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n \n         return entries;\n     }\n \n     @Override\n-    public <T> ListViewResponse<T> findListViewResponse(String baseDN, Class<T> entryClass, Filter filter, int startIndex, int count, int pageLimit,\n-            String sortBy, SortOrder sortOrder, String[] ldapReturnAttributes) {\n+    public <T> ListViewResponse<T> findListViewResponse(String baseDN, Class<T> entryClass, Filter filter, int startIndex, int count, int pageLimit, String sortBy, SortOrder sortOrder, String[] ldapReturnAttributes) {\n         if (StringHelper.isEmptyString(baseDN)) {\n             throw new MappingException(\"Base DN to find entries is null\");\n         }\n@@ -381,6 +369,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Find entries\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -389,15 +378,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Prepare default sort\n-        Sort[] defaultSort = getDefaultSort(entryClass);\n \n+        Sort[] defaultSort = getDefaultSort(entryClass);\n         if (StringHelper.isNotEmpty(sortBy)) {\n             Sort requestedSort = buildSort(sortBy, sortOrder);\n-\n             if (ArrayHelper.isEmpty(defaultSort)) {\n-                defaultSort = new Sort[] { requestedSort };\n+                defaultSort = new Sort[] {requestedSort};\n             } else {\n-                defaultSort = ArrayHelper.arrayMerge(new Sort[] { requestedSort }, defaultSort);\n+                defaultSort = ArrayHelper.arrayMerge(new Sort[] {requestedSort}, defaultSort);\n             }\n         }\n \n@@ -405,14 +393,14 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         ParsedKey keyWithInum = null;\n         try {\n             keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, startIndex, pageLimit,\n-                    count, defaultSort, null, true, currentLdapReturnAttributes);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, startIndex, pageLimit, count, defaultSort, null, true, currentLdapReturnAttributes);\n \n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entries with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         ListViewResponse<T> result = new ListViewResponse<T>();\n@@ -425,10 +413,8 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             return result;\n         }\n \n-        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum,\n-                searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n+        List<T> entries = createEntities(entryClass, propertiesAnnotations, keyWithInum, searchResult.getResult().toArray(new JsonObject[searchResult.getItemsPerPage()]));\n         result.setResult(entries);\n-\n         return result;\n     }\n \n@@ -439,6 +425,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         // Create filter\n+\n         Filter searchFilter;\n         if (objectClasses.length > 0) {\n             searchFilter = addObjectClassFilter(filter, objectClasses);\n@@ -449,23 +436,22 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         ListViewResponse<JsonObject> searchResult = null;\n         try {\n             ParsedKey keyWithInum = toCouchbaseKey(baseDN);\n-            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 1, 0, 1, null, null, false,\n-                    ldapReturnAttributes);\n+            searchResult = operationService.search(keyWithInum.getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 1, 0, 1, null, null, false, ldapReturnAttributes);\n+\n             if (searchResult == null) {\n                 throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter));\n             }\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to find entry with baseDN: %s, filter: %s\", baseDN, searchFilter),\n+                ex);\n         }\n \n         return (searchResult != null) && (searchResult.getItemsPerPage() > 0);\n     }\n \n-    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn,\n-            JsonObject... searchResultEntries) {\n+    protected <T> List<T> createEntities(Class<T> entryClass, List<PropertyAnnotation> propertiesAnnotations, ParsedKey baseDn, JsonObject... searchResultEntries) {\n         List<T> result = new ArrayList<T>(searchResultEntries.length);\n         Map<String, List<AttributeData>> entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n-\n         int count = 0;\n         for (int i = 0; i < searchResultEntries.length; i++) {\n             count++;\n@@ -478,10 +464,10 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             searchResultEntries[i] = null;\n \n             // Allow java to clean up temporary objects\n+\n             if (count >= 100) {\n                 List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n                 result.addAll(currentResult);\n-\n                 entriesAttributes = new LinkedHashMap<String, List<AttributeData>>(100);\n                 count = 0;\n             }\n@@ -489,7 +475,6 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n \n         List<T> currentResult = createEntities(entryClass, propertiesAnnotations, entriesAttributes);\n         result.addAll(currentResult);\n-\n         return result;\n     }\n \n@@ -501,15 +486,15 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         List<AttributeData> result = new ArrayList<AttributeData>();\n         for (String attributeName : entry.getNames()) {\n             Object attributeObject = entry.get(attributeName);\n-\n             String[] attributeValueStrings;\n             if (attributeObject == null) {\n                 attributeValueStrings = NO_STRINGS;\n             }\n+\n             if (attributeObject instanceof JsonArray) {\n                 attributeValueStrings = ((JsonArray) attributeObject).toList().toArray(NO_STRINGS);\n             } else {\n-                attributeValueStrings = new String[] { attributeObject.toString() };\n+                attributeValueStrings = new String[] {attributeObject.toString()};\n             }\n \n             AttributeData tmpAttribute = new AttributeData(attributeName, attributeValueStrings);\n@@ -523,8 +508,15 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n     public boolean authenticate(String userName, String password, String baseDN) {\n         try {\n             Filter filter = Filter.createEqualityFilter(CouchbaseOperationService.UID, userName);\n-            ListViewResponse<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(filter),\n-                    SearchScope.SUB, 0, 0, 1, null, null, false);\n+            ListViewResponse<JsonObject> searchResult = operationService.search(toCouchbaseKey(baseDN).getKey(),\n+                toCouchbaseFilter(filter),\n+                    SearchScope.SUB,\n+                        0,\n+                            0,\n+                                1,\n+                                    null,\n+                                        null,\n+                                            false);\n             if ((searchResult == null) || (searchResult.getItemsPerPage() != 1)) {\n                 return false;\n             }\n@@ -557,7 +549,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         // Check entry class\n         checkEntryClass(entryClass, false);\n         String[] objectClasses = getTypeObjectClasses(entryClass);\n-        String[] ldapReturnAttributes = new String[] { \"\" }; // Don't load attributes\n+        String[] ldapReturnAttributes = new String[] {\"\"}; // Don't load attributes\n \n         // Find entries\n         Filter searchFilter;\n@@ -568,14 +560,13 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         }\n \n         CountBatchOperation<T> batchOperation = new CountBatchOperation<T>();\n-\n         try {\n             CouchbaseBatchOperationWraper<T> batchOperationWraper = new CouchbaseBatchOperationWraper<T>(batchOperation);\n-            operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 0, 100, 0, null,\n-                    batchOperationWraper, false, ldapReturnAttributes);\n+            operationService.search(toCouchbaseKey(baseDN).getKey(), toCouchbaseFilter(searchFilter), SearchScope.SUB, 0, 100, 0, null, batchOperationWraper, false, ldapReturnAttributes);\n         } catch (Exception ex) {\n-            throw new EntryPersistenceException(\n-                    String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\", baseDN, searchFilter), ex);\n+            throw new EntryPersistenceException(String.format(\"Failed to calucalte count of entries with baseDN: %s, filter: %s\",\n+                baseDN,\n+                    searchFilter), ex);\n         }\n \n         return batchOperation.getCountEntries();\n@@ -593,15 +584,15 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             requestedSort = Sort.desc(Expression.path(sortBy));\n         } else if (SortOrder.ASCENDING == sortOrder) {\n             requestedSort = Sort.asc(Expression.path(sortBy));\n-        } else {\n+} else {\n             requestedSort = Sort.def(Expression.path(sortBy));\n         }\n+\n         return requestedSort;\n     }\n \n     protected <T> Sort[] getDefaultSort(Class<T> entryClass) {\n         String[] sortByProperties = getEntrySortBy(entryClass);\n-\n         if (ArrayHelper.isEmpty(sortByProperties)) {\n             return null;\n         }\n@@ -625,7 +616,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n             }\n-            \n+\n             return result.toArray(new String[result.size()]);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n@@ -657,6 +648,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         public int getCountEntries() {\n             return countEntries;\n         }\n+\n     }\n \n     @Override\n@@ -671,4 +663,4 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 95
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/106/CouchbaseEntryManager.java\nindex 720a327e42..c782de7c67 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_random/106/CouchbaseEntryManager.java\n@@ -625,7 +625,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n             }\n-            \n+\n             return result.toArray(new String[result.size()]);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/106/CouchbaseEntryManager.java\nindex 720a327e42..60444359d0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/errored/1/106/CouchbaseEntryManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/GluuFederation-oxCore/styler_three_grams/106/CouchbaseEntryManager.java\n@@ -624,9 +624,7 @@ public class CouchbaseEntryManager extends BaseEntryManager implements Serializa\n             List<String> result = new ArrayList<String>(map.size());\n             for (Entry<String, Object> attr : map.entrySet()) {\n                 result.add(attr.getKey() + \": \" + attr.getValue());\n-            }\n-            \n-            return result.toArray(new String[result.size()]);\n+                } returnresult.toArray(new String[result.size()]);\n         } catch (Exception ex) {\n             throw new EntryPersistenceException(String.format(\"Failed to find entry: %s\", dn), ex);\n         }\n",
            "diff_size": 3
        }
    ]
}