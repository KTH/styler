{
    "error_id": "103",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "39",
                "severity": "warning",
                "message": "';' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "  protected ReferenceConfig referenceConfig;\n\n  protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n\n  protected RoutingContext routingContext;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/103/EdgeInvocation.java\nindex 962c72ebf2..2f6d18bebe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/103/EdgeInvocation.java\n@@ -46,7 +46,7 @@ public class EdgeInvocation extends AbstractRestInvocation {\n \n   protected ReferenceConfig referenceConfig;\n \n-  protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n+  protected String versionRule = null; //DefinitionConst.VERSION_RULE_ALL;\n \n   protected RoutingContext routingContext;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "49",
                    "column": "39",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/103/EdgeInvocation.java\nindex 962c72ebf2..28726af24b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/103/EdgeInvocation.java\n@@ -51,7 +51,7 @@ public class EdgeInvocation extends AbstractRestInvocation {\n   protected RoutingContext routingContext;\n \n   public void init(String microserviceName, RoutingContext context, String path,\n-      List<HttpServerFilter> httpServerFilters) {\n+                   List<HttpServerFilter> httpServerFilters) {\n     this.microserviceName = microserviceName;\n     this.requestEx = new VertxServerRequestToHttpServletRequest(context, path);\n     this.responseEx = new VertxServerResponseToHttpServletResponse(context.response());\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "column": "41",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/103/EdgeInvocation.java\nindex 962c72ebf2..18242bc718 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/103/EdgeInvocation.java\n@@ -19,7 +19,6 @@ package org.apache.servicecomb.edge.core;\n \n import java.util.List;\n import java.util.concurrent.CompletableFuture;\n-\n import org.apache.servicecomb.common.rest.AbstractRestInvocation;\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.filter.HttpServerFilter;\n@@ -32,59 +31,55 @@ import org.apache.servicecomb.core.provider.consumer.ReactiveResponseExecutor;\n import org.apache.servicecomb.core.provider.consumer.ReferenceConfig;\n import org.apache.servicecomb.foundation.vertx.http.VertxServerRequestToHttpServletRequest;\n import org.apache.servicecomb.foundation.vertx.http.VertxServerResponseToHttpServletResponse;\n-\n import io.vertx.core.Context;\n import io.vertx.core.Vertx;\n import io.vertx.ext.web.RoutingContext;\n \n public class EdgeInvocation extends AbstractRestInvocation {\n-  public static final String EDGE_INVOCATION_CONTEXT = \"edgeInvocationContext\";\n+    public static final String EDGE_INVOCATION_CONTEXT = \"edgeInvocationContext\";\n \n-  protected String microserviceName;\n+    protected String microserviceName;\n \n-  protected MicroserviceReferenceConfig microserviceReferenceConfig;\n+    protected MicroserviceReferenceConfig microserviceReferenceConfig;\n \n-  protected ReferenceConfig referenceConfig;\n+    protected ReferenceConfig referenceConfig;\n \n-  protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n+    protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n \n-  protected RoutingContext routingContext;\n+    protected RoutingContext routingContext;\n \n-  public void init(String microserviceName, RoutingContext context, String path,\n-      List<HttpServerFilter> httpServerFilters) {\n+    public void init(String microserviceName, RoutingContext context, String path, List<HttpServerFilter> httpServerFilters) {\n     this.microserviceName = microserviceName;\n     this.requestEx = new VertxServerRequestToHttpServletRequest(context, path);\n     this.responseEx = new VertxServerResponseToHttpServletResponse(context.response());\n     this.routingContext = context;\n     this.httpServerFilters = httpServerFilters;\n     requestEx.setAttribute(RestConst.REST_REQUEST, requestEx);\n-  }\n+    }\n \n-  public void edgeInvoke() {\n+    public void edgeInvoke() {\n     Context currentContext = Vertx.currentContext();\n     findMicroserviceVersionMeta().whenComplete((r, e) -> {\n           // get back to the context so that registered handlers can work properly\n-          currentContext.runOnContext((event) -> {\n-            if (e != null) {\n-              sendFailResponse(e);\n-            } else {\n-              microserviceReferenceConfig = r;\n-              findRestOperation(microserviceReferenceConfig.getLatestMicroserviceMeta());\n-              scheduleInvocation();\n-            }\n-          });\n-        }\n-    );\n-  }\n-\n-  protected CompletableFuture<MicroserviceReferenceConfig> findMicroserviceVersionMeta() {\n-    return SCBEngine.getInstance()\n-        .createMicroserviceReferenceConfigAsync(microserviceName, chooseVersionRule());\n-  }\n-\n-  public void setVersionRule(String versionRule) {\n+        currentContext.runOnContext((event) -> {\n+                                                   if (e != null) {\n+                                        sendFailResponse(e);\n+                                                   } else {\n+                                                     microserviceReferenceConfig = r;\n+                                                     findRestOperation(microserviceReferenceConfig.getLatestMicroserviceMeta());\n+                                                     scheduleInvocation();\n+                                                   }\n+        });\n+    });\n+    }\n+\n+    protected CompletableFuture<MicroserviceReferenceConfig> findMicroserviceVersionMeta() {\n+    return SCBEngine.getInstance().createMicroserviceReferenceConfigAsync(microserviceName, chooseVersionRule());\n+    }\n+\n+    public void setVersionRule(String versionRule) {\n     this.versionRule = versionRule;\n-  }\n+    }\n \n   // another possible rule:\n   // path is: /msName/version/.....\n@@ -94,35 +89,37 @@ public class EdgeInvocation extends AbstractRestInvocation {\n   //   v2->2.0.0-3.0.0\n   // that means if a(1.x.x) bigger then b(1.y.y), then a compatible to b\n   //        but a(2.x.x) not compatible to b\n-  protected String chooseVersionRule() {\n+\n+    protected String chooseVersionRule() {\n     // this will use all instance of the microservice\n     // and this required all new version compatible to old version\n     return versionRule;\n-  }\n+    }\n \n-  @Override\n-  protected OperationLocator locateOperation(ServicePathManager servicePathManager) {\n+    @Override\n+    protected OperationLocator locateOperation(ServicePathManager servicePathManager) {\n     return servicePathManager.consumerLocateOperation(requestEx.getRequestURI(), requestEx.getMethod());\n-  }\n+    }\n+\n+    @Override\n+    protected void createInvocation() {\n+    ReferenceConfig referenceConfig = microserviceReferenceConfig.createReferenceConfig(restOperationMeta.getOperationMeta());\n \n-  @Override\n-  protected void createInvocation() {\n-    ReferenceConfig referenceConfig = microserviceReferenceConfig\n-        .createReferenceConfig(restOperationMeta.getOperationMeta());\n \n     this.invocation = InvocationFactory.forConsumer(referenceConfig,\n-        restOperationMeta.getOperationMeta(),\n-        restOperationMeta.getOperationMeta().buildBaseConsumerRuntimeType(),\n-        null);\n+restOperationMeta.getOperationMeta(),\n+restOperationMeta.getOperationMeta().buildBaseConsumerRuntimeType(),\n+                          null);\n     this.invocation.setSync(false);\n     this.invocation.setEdge(true);\n     this.invocation.getHandlerContext().put(EDGE_INVOCATION_CONTEXT, Vertx.currentContext());\n     this.invocation.setResponseExecutor(new ReactiveResponseExecutor());\n     this.routingContext.put(RestConst.REST_INVOCATION_CONTEXT, invocation);\n-  }\n+    }\n \n-  @Override\n-  protected void setContext() throws Exception {\n+    @Override\n+    protected void setContext() throws Exception {\n     // do not read InvocationContext from HTTP header, for security reason\n-  }\n-}\n+\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/103/EdgeInvocation.java\nindex 962c72ebf2..2f6d18bebe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/103/EdgeInvocation.java\n@@ -46,7 +46,7 @@ public class EdgeInvocation extends AbstractRestInvocation {\n \n   protected ReferenceConfig referenceConfig;\n \n-  protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n+  protected String versionRule = null; //DefinitionConst.VERSION_RULE_ALL;\n \n   protected RoutingContext routingContext;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/103/EdgeInvocation.java\nindex 962c72ebf2..2f6d18bebe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/103/EdgeInvocation.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/103/EdgeInvocation.java\n@@ -46,7 +46,7 @@ public class EdgeInvocation extends AbstractRestInvocation {\n \n   protected ReferenceConfig referenceConfig;\n \n-  protected String versionRule = null;//DefinitionConst.VERSION_RULE_ALL;\n+  protected String versionRule = null; //DefinitionConst.VERSION_RULE_ALL;\n \n   protected RoutingContext routingContext;\n \n",
            "diff_size": 1
        }
    ]
}