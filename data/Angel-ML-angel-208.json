{
    "error_id": "208",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/208/ServerIntFloatRow.java\nindex 4a1614398f..a2717124ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/208/ServerIntFloatRow.java\n@@ -38,449 +38,455 @@ import org.apache.commons.logging.LogFactory;\n  */\n public class ServerIntFloatRow extends ServerFloatRow {\n \n-  private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n-  /**\n-   * Just a view of \"row\" in ServerRow\n-   */\n-  private IntFloatVector intFloatRow;\n-  /**\n-   * Just a view of \"startCol\" in ServerRow\n-   */\n-  private transient int startColInt;\n-\n-  /**\n-   * Just a view of \"endCol\" in ServerRow\n-   */\n-  private transient int endColInt;\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-    this.startColInt = startCol;\n-    this.endColInt = endCol;\n-    this.intFloatRow = (IntFloatVector) row;\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a empty ServerIntFloatRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerIntFloatRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public float get(int index) {\n-    return intFloatRow.get(index - startColInt);\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(int index, float value) {\n-    intFloatRow.set(index - startColInt, value);\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public float[] get(int[] indices) {\n-    float[] values = new float[indices.length];\n-    for (int i = 0; i < indices.length; i++) {\n-      values[i] = intFloatRow.get(indices[i] - startColInt);\n+    private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n+    /**\n+     * Just a view of \"row\" in ServerRow\n+     */\n+    private IntFloatVector intFloatRow;\n+    /**\n+     * Just a view of \"startCol\" in ServerRow\n+     */\n+    private transient int startColInt;\n+\n+    /**\n+     * Just a view of \"endCol\" in ServerRow\n+     */\n+    private transient int endColInt;\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n+                             IntFloatVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+        this.startColInt = startCol;\n+        this.endColInt = endCol;\n+        this.intFloatRow = (IntFloatVector) row;\n     }\n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements values\n-   */\n-  public void set(int[] indices, float[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      intFloatRow.set(indices[i] - startColInt, values[i]);\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n+\n+    /**\n+     * Create a empty ServerIntFloatRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerIntFloatRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n     }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(int index, float value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements plus values\n-   */\n-  public void addTo(int[] indices, float[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public float get(int index) {\n+        return intFloatRow.get(index - startColInt);\n     }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private float[] getValues() {\n-    return intFloatRow.getStorage().getValues();\n-  }\n-\n-  /**\n-   * Get all element indices and values without lock, you must check the storage is sparse first use\n-   * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n-   *\n-   * @return all element values\n-   */\n-  public ObjectIterator<Int2FloatMap.Entry> getIter() {\n-    return intFloatRow.getStorage().entryIterator();\n-  }\n-\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-    try {\n-      switch (updateType) {\n-        case T_FLOAT_SPARSE:\n-        case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE:\n-        case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE:\n-        case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_DENSE:\n-        case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n-        case T_LONG_DENSE:\n-        case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n-        case T_INT_DENSE:\n-        case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(int index, float value) {\n+        intFloatRow.set(index - startColInt, value);\n+    }\n+\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public float[] get(int[] indices) {\n+        float[] values = new float[indices.length];\n+        for (int i = 0; i < indices.length; i++) {\n+            values[i] = intFloatRow.get(indices[i] - startColInt);\n         }\n-      }\n+        return values;\n+    }\n+\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(int[] indices, float[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            intFloatRow.set(indices[i] - startColInt, values[i]);\n+        }\n+    }\n \n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(int index, float value) {\n+        set(index, get(index) + value);\n     }\n-  }\n-\n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readFloat());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readFloat());\n-      }\n+\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(int[] indices, float[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n+        }\n     }\n-  }\n-\n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readLong());\n-      }\n+\n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private float[] getValues() {\n+        return intFloatRow.getStorage().getValues();\n     }\n-  }\n-\n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readInt());\n-      }\n+\n+    /**\n+     * Get all element indices and values without lock, you must check the storage is sparse first use\n+     * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n+     *\n+     * @return all element values\n+     */\n+    public ObjectIterator<Int2FloatMap.Entry> getIter() {\n+        return intFloatRow.getStorage().entryIterator();\n     }\n-  }\n-\n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readFloat());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readFloat());\n-      }\n+\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+        try {\n+            switch (updateType) {\n+                case T_FLOAT_SPARSE:\n+                case T_FLOAT_SPARSE_COMPONENT:\n+                    updateUseIntFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE:\n+                case T_LONG_SPARSE_COMPONENT:\n+                    updateUseIntLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE:\n+                case T_INT_SPARSE_COMPONENT:\n+                    updateUseIntIntSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_DENSE:\n+                case T_FLOAT_DENSE_COMPONENT:\n+                    updateUseIntFloatDense(buf, op);\n+                    break;\n+\n+                case T_LONG_DENSE:\n+                case T_LONG_DENSE_COMPONENT:\n+                    updateUseIntLongDense(buf, op);\n+                    break;\n+\n+                case T_INT_DENSE:\n+                case T_INT_DENSE_COMPONENT:\n+                    updateUseIntIntDense(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n+        }\n     }\n-  }\n-\n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readLong());\n-      }\n+\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, intFloatRow.get(i) + buf.readFloat());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, buf.readFloat());\n+            }\n+        }\n     }\n-  }\n-\n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readInt());\n-      }\n+\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, intFloatRow.get(i) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, buf.readLong());\n+            }\n+        }\n     }\n-  }\n \n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, intFloatRow.get(i) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, buf.readInt());\n+            }\n+        }\n+    }\n \n-  @Override\n-  public int size() {\n-    return intFloatRow.size();\n-  }\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intFloatRow.set(index, intFloatRow.get(index) + buf.readFloat());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(buf.readInt(), buf.readFloat());\n+            }\n+        }\n+    }\n \n-  public void mergeTo(IntFloatVector mergedRow) {\n-    startRead();\n-    try {\n-      if (isDense()) {\n-        float[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startColInt, values[i]);\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intFloatRow.set(index, intFloatRow.get(index) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(buf.readInt(), buf.readLong());\n+            }\n         }\n-      } else {\n-        ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n-        Int2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          mergedRow.set(entry.getIntKey() + startColInt, entry.getFloatValue());\n+    }\n+\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intFloatRow.set(index, intFloatRow.get(index) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(buf.readInt(), buf.readInt());\n+            }\n         }\n-      }\n-    } finally {\n-      endRead();\n     }\n-  }\n-\n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n-    if (useDenseSerialize()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeFloat(values[i]);\n-      }\n-    } else {\n-      ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n-      Int2FloatMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeInt(entry.getIntKey());\n-        buf.writeFloat(entry.getFloatValue());\n-      }\n+\n+\n+    @Override\n+    public int size() {\n+        return intFloatRow.size();\n     }\n-  }\n-\n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n-    startColInt = (int) startCol;\n-    endColInt = (int) endCol;\n-    intFloatRow = (IntFloatVector) row;\n-    if (useDenseSerialize()) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readFloat());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readFloat());\n-      }\n+\n+    public void mergeTo(IntFloatVector mergedRow) {\n+        startRead();\n+        try {\n+            if (isDense()) {\n+                float[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + startColInt, values[i]);\n+                }\n+            } else {\n+                ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n+                Int2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    mergedRow.set(entry.getIntKey() + startColInt, entry.getFloatValue());\n+                }\n+            }\n+        } finally {\n+            endRead();\n+        }\n     }\n-  }\n-\n-  @Override\n-  protected int getRowSpace() {\n-    if (useDenseSerialize()) {\n-      return 4 * size();\n-    } else {\n-      return 8 * size();\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        if (useDenseSerialize()) {\n+            float[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                buf.writeFloat(values[i]);\n+            }\n+        } else {\n+            ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n+            Int2FloatMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeInt(entry.getIntKey());\n+                buf.writeFloat(entry.getFloatValue());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        startColInt = (int) startCol;\n+        endColInt = (int) endCol;\n+        intFloatRow = (IntFloatVector) row;\n+        if (useDenseSerialize()) {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(i, buf.readFloat());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intFloatRow.set(buf.readInt(), buf.readFloat());\n+            }\n+        }\n     }\n-  }\n-\n-  @Override\n-  public ServerRow clone() {\n-    startRead();\n-    try {\n-      return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intFloatRow.clone());\n-    } finally {\n-      endRead();\n+\n+    @Override\n+    protected int getRowSpace() {\n+        if (useDenseSerialize()) {\n+            return 4 * size();\n+        } else {\n+            return 8 * size();\n+        }\n     }\n-  }\n-\n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n-    try {\n-      if (intFloatRow.isSparse()) {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n-                    intFloatRow.getStorage().getValues()));\n-      } else {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intFloatRow);\n-      }\n-    } finally {\n-      endRead();\n+\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n+                    intFloatRow.clone());\n+        } finally {\n+            endRead();\n+        }\n     }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(int index) {\n-    if (intFloatRow.isSparse()) {\n-      return intFloatRow.getStorage().hasKey(index - startColInt);\n-    } else {\n-      return intFloatRow.get(index - startColInt) != 0.0f;\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            if (intFloatRow.isSparse()) {\n+                return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt,\n+                        (int) estElemNum,\n+                        VFactory\n+                                .sortedFloatVector((endColInt - startColInt),\n+                                        intFloatRow.getStorage().getIndices(),\n+                                        intFloatRow.getStorage().getValues()));\n+            } else {\n+                return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt,\n+                        (int) estElemNum,\n+                        intFloatRow);\n+            }\n+        } finally {\n+            endRead();\n+        }\n     }\n-  }\n-\n-  public float initAndGet(int index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      float value = (float) func.action();\n-      set(index, value);\n-      return value;\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(int index) {\n+        if (intFloatRow.isSparse()) {\n+            return intFloatRow.getStorage().hasKey(index - startColInt);\n+        } else {\n+            return intFloatRow.get(index - startColInt) != 0.0f;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readInt(), func));\n+\n+    public float initAndGet(int index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            float value = (float) func.action();\n+            set(index, value);\n+            return value;\n         }\n-      } else {\n-        throw new IOException(this.getClass().getName() + \" only support int type index now\");\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readInt()));\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                throw new IOException(\n+                        this.getClass().getName() + \" only support int type index now\");\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeFloat(get(in.readInt()));\n+                }\n+            } else {\n+                throw new IOException(\n+                        this.getClass().getName() + \" only support int type index now\");\n+            }\n         }\n-      } else {\n-        throw new IOException(this.getClass().getName() + \" only support int type index now\");\n-      }\n     }\n-  }\n-\n-  @Override\n-  public void setSplit(Vector row) {\n-    super.setSplit(row);\n-    intFloatRow = (IntFloatVector) row;\n-  }\n-\n-  @Override\n-  public void elemUpdate(FloatElemUpdateFunc func) {\n-    if (isDense()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n-    } else {\n-      ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n-      Int2FloatMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        entry.setValue(func.update());\n-      }\n+\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+        intFloatRow = (IntFloatVector) row;\n+    }\n+\n+    @Override\n+    public void elemUpdate(FloatElemUpdateFunc func) {\n+        if (isDense()) {\n+            float[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = func.update();\n+            }\n+        } else {\n+            ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n+            Int2FloatMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                entry.setValue(func.update());\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 568
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "397",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/208/ServerIntFloatRow.java\nindex 4a1614398f..5c11481961 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/208/ServerIntFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -186,8 +185,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     return intFloatRow.getStorage().entryIterator();\n   }\n \n-\n-  @Override\n+@Override\n   public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n@@ -196,35 +194,28 @@ public class ServerIntFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -315,8 +306,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intFloatRow.size();\n   }\n@@ -391,24 +381,20 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     try {\n       return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n           intFloatRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (intFloatRow.isSparse()) {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n                     intFloatRow.getStorage().getValues()));\n-      } else {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intFloatRow);\n+  } else {\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intFloatRow);\n       }\n     } finally {\n       endRead();\n@@ -442,7 +428,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeFloat(initAndGet(in.readInt(), func));\n@@ -483,4 +469,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 83.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 93.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 120.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 131.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 146.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 160.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 171.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 184.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 195.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "392",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "403",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "407",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "414",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 421.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "440",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/208/ServerIntFloatRow.java\nindex 4a1614398f..ad9281c54e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/208/ServerIntFloatRow.java\n@@ -36,22 +36,22 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * The row with \"int\" index type and \"float\" value type in PS\n  */\n-public class ServerIntFloatRow extends ServerFloatRow {\n \n-  private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n+public class ServerIntFloatRow extends ServerFloatRow {\n+    private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n   /**\n    * Just a view of \"row\" in ServerRow\n    */\n-  private IntFloatVector intFloatRow;\n+    private IntFloatVector intFloatRow;\n   /**\n    * Just a view of \"startCol\" in ServerRow\n    */\n-  private transient int startColInt;\n+    private transient int startColInt;\n \n   /**\n    * Just a view of \"endCol\" in ServerRow\n    */\n-  private transient int endColInt;\n+    private transient int endColInt;\n \n   /**\n    * Create a new ServerIntDoubleRow\n@@ -62,13 +62,13 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatVector innerRow) {\n+\n+    public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntFloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n     this.intFloatRow = (IntFloatVector) row;\n-  }\n+    }\n \n   /**\n    * Create a new ServerIntDoubleRow\n@@ -79,18 +79,20 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n+\n+    public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n+    }\n \n   /**\n    * Create a empty ServerIntFloatRow\n    *\n    * @param rowType row type\n    */\n-  public ServerIntFloatRow(RowType rowType) {\n+\n+    public ServerIntFloatRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n-  }\n+    }\n \n   //////////////////////////////////////////////////////////////////////////////////////////////////\n   //Methods with out lock operation, you must call startWrite/startRead before using these methods\n@@ -103,9 +105,10 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @return element value\n    */\n-  public float get(int index) {\n+\n+    public float get(int index) {\n     return intFloatRow.get(index - startColInt);\n-  }\n+    }\n \n   /**\n    * Set a element value without lock operation\n@@ -113,9 +116,10 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element new value\n    */\n-  public void set(int index, float value) {\n+\n+    public void set(int index, float value) {\n     intFloatRow.set(index - startColInt, value);\n-  }\n+    }\n \n   /**\n    * Get a batch elements values without lock\n@@ -123,13 +127,14 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n-  public float[] get(int[] indices) {\n+\n+    public float[] get(int[] indices) {\n     float[] values = new float[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n-      values[i] = intFloatRow.get(indices[i] - startColInt);\n+        values[i] = intFloatRow.get(indices[i] - startColInt);\n     }\n     return values;\n-  }\n+    }\n \n   /**\n    * Set a batch elements values without lock\n@@ -137,12 +142,13 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n-  public void set(int[] indices, float[] values) {\n+\n+    public void set(int[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      intFloatRow.set(indices[i] - startColInt, values[i]);\n+        intFloatRow.set(indices[i] - startColInt, values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Add a element value without lock\n@@ -150,9 +156,10 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element plus value\n    */\n-  public void addTo(int index, float value) {\n+\n+    public void addTo(int index, float value) {\n     set(index, get(index) + value);\n-  }\n+    }\n \n   /**\n    * Add a batch elements values without lock\n@@ -160,21 +167,23 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n-  public void addTo(int[] indices, float[] values) {\n+\n+    public void addTo(int[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+        set(indices[i], get(indices[i]) + values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n    *\n    * @return all element values\n    */\n-  private float[] getValues() {\n+\n+    private float[] getValues() {\n     return intFloatRow.getStorage().getValues();\n-  }\n+    }\n \n   /**\n    * Get all element indices and values without lock, you must check the storage is sparse first use\n@@ -182,238 +191,225 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    *\n    * @return all element values\n    */\n-  public ObjectIterator<Int2FloatMap.Entry> getIter() {\n-    return intFloatRow.getStorage().entryIterator();\n-  }\n \n+    public ObjectIterator<Int2FloatMap.Entry> getIter() {\n+    return intFloatRow.getStorage().entryIterator();\n+    }\n \n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n-      switch (updateType) {\n+        switch (updateType) {\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n+            updateUseIntFloatSparse(buf, op);\n+            break;\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n+            updateUseIntLongSparse(buf, op);\n+            break;\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n+            updateUseIntIntSparse(buf, op);\n+            break;\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n+            updateUseIntFloatDense(buf, op);\n+            break;\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n+            updateUseIntLongDense(buf, op);\n+            break;\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n+            updateUseIntIntDense(buf, op);\n+            break;\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+            throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n-\n-      updateRowVersion();\n+        }\n+        updateRowVersion();\n     } finally {\n       endWrite();\n     }\n-  }\n+    }\n \n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readFloat());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 intFloatRow.set(i, intFloatRow.get(i) + buf.readFloat());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readFloat());\n+               intFloatRow.set(i, buf.readFloat());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readLong());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 intFloatRow.set(i, intFloatRow.get(i) + buf.readLong());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readLong());\n+               intFloatRow.set(i, buf.readLong());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, intFloatRow.get(i) + buf.readInt());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 intFloatRow.set(i, intFloatRow.get(i) + buf.readInt());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readInt());\n+               intFloatRow.set(i, buf.readInt());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readFloat());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 int index = buf.readInt();\n+                                 intFloatRow.set(index, intFloatRow.get(index) + buf.readFloat());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readFloat());\n+               intFloatRow.set(buf.readInt(), buf.readFloat());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readLong());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 int index = buf.readInt();\n+                                 intFloatRow.set(index, intFloatRow.get(index) + buf.readLong());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readLong());\n+               intFloatRow.set(buf.readInt(), buf.readLong());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intFloatRow.set(index, intFloatRow.get(index) + buf.readInt());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 int index = buf.readInt();\n+                                 intFloatRow.set(index, intFloatRow.get(index) + buf.readInt());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readInt());\n+               intFloatRow.set(buf.readInt(), buf.readInt());\n       }\n     }\n-  }\n-\n+    }\n \n-  @Override\n-  public int size() {\n+    @Override\n+    public int size() {\n     return intFloatRow.size();\n-  }\n+    }\n \n-  public void mergeTo(IntFloatVector mergedRow) {\n+    public void mergeTo(IntFloatVector mergedRow) {\n     startRead();\n     try {\n-      if (isDense()) {\n+        if (isDense()) {\n         float[] values = getValues();\n         for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startColInt, values[i]);\n+                           mergedRow.set(i + startColInt, values[i]);\n         }\n-      } else {\n-        ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n-        Int2FloatMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          mergedRow.set(entry.getIntKey() + startColInt, entry.getFloatValue());\n+        } else {\n+          ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n+          Int2FloatMap.Entry entry;\n+          while (iter.hasNext()) {\n+                   entry = iter.next();\n+                   mergedRow.set(entry.getIntKey() + startColInt, entry.getFloatValue());\n+          }\n         }\n-      }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n     if (useDenseSerialize()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeFloat(values[i]);\n-      }\n+        float[] values = getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                                 buf.writeFloat(values[i]);\n+        }\n     } else {\n       ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n       Int2FloatMap.Entry entry;\n       while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeInt(entry.getIntKey());\n-        buf.writeFloat(entry.getFloatValue());\n+               entry = iter.next();\n+               buf.writeInt(entry.getIntKey());\n+               buf.writeFloat(entry.getFloatValue());\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n     startColInt = (int) startCol;\n     endColInt = (int) endCol;\n     intFloatRow = (IntFloatVector) row;\n     if (useDenseSerialize()) {\n-      for (int i = 0; i < size; i++) {\n-        intFloatRow.set(i, buf.readFloat());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 intFloatRow.set(i, buf.readFloat());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intFloatRow.set(buf.readInt(), buf.readFloat());\n+               intFloatRow.set(buf.readInt(), buf.readFloat());\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  protected int getRowSpace() {\n+    @Override\n+    protected int getRowSpace() {\n     if (useDenseSerialize()) {\n-      return 4 * size();\n+        return 4 * size();\n     } else {\n       return 8 * size();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow clone() {\n+    @Override\n+    public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intFloatRow.clone());\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intFloatRow.clone());\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n+    @Override\n+    public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      if (intFloatRow.isSparse()) {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n-                    intFloatRow.getStorage().getValues()));\n-      } else {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intFloatRow);\n-      }\n+        if (intFloatRow.isSparse()) {\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedFloatVector((endColInt - startColInt),\n+                   intFloatRow.getStorage().getIndices(),\n+                   intFloatRow.getStorage().getValues()));\n+        } else {\n+          return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intFloatRow);\n+        }\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n   /**\n    * Check the vector contains the index or not\n@@ -421,66 +417,67 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n-  public boolean exist(int index) {\n+\n+    public boolean exist(int index) {\n     if (intFloatRow.isSparse()) {\n-      return intFloatRow.getStorage().hasKey(index - startColInt);\n+        return intFloatRow.getStorage().hasKey(index - startColInt);\n     } else {\n       return intFloatRow.get(index - startColInt) != 0.0f;\n     }\n-  }\n+    }\n \n-  public float initAndGet(int index, InitFunc func) {\n+    public float initAndGet(int index, InitFunc func) {\n     if (exist(index)) {\n-      return get(index);\n+        return get(index);\n     } else {\n       float value = (float) func.action();\n       set(index, value);\n       return value;\n     }\n-  }\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(initAndGet(in.readInt(), func));\n+        if (indexType == IndexType.INT) {\n+                          for (int i = 0; i < indexSize; i++) {\n+                                            out.writeFloat(initAndGet(in.readInt(), func));\n+                          }\n+        } else {\n+          throw new IOException(this.getClass().getName() + \" only support int type index now\");\n         }\n-      } else {\n-        throw new IOException(this.getClass().getName() + \" only support int type index now\");\n-      }\n     } else {\n       if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeFloat(get(in.readInt()));\n-        }\n+               for (int i = 0; i < indexSize; i++) {\n+                                          out.writeFloat(get(in.readInt()));\n+               }\n       } else {\n         throw new IOException(this.getClass().getName() + \" only support int type index now\");\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  public void setSplit(Vector row) {\n+    @Override\n+    public void setSplit(Vector row) {\n     super.setSplit(row);\n     intFloatRow = (IntFloatVector) row;\n-  }\n+    }\n \n-  @Override\n-  public void elemUpdate(FloatElemUpdateFunc func) {\n+    @Override\n+    public void elemUpdate(FloatElemUpdateFunc func) {\n     if (isDense()) {\n-      float[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n+        float[] values = getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                       values[i] = func.update();\n+        }\n     } else {\n       ObjectIterator<Int2FloatMap.Entry> iter = getIter();\n       Int2FloatMap.Entry entry;\n       while (iter.hasNext()) {\n-        entry = iter.next();\n-        entry.setValue(func.update());\n+               entry = iter.next();\n+               entry.setValue(func.update());\n       }\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 205
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/208/ServerIntFloatRow.java\nindex 4a1614398f..93a97a06f7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/208/ServerIntFloatRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/208/ServerIntFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n",
            "diff_size": 1
        }
    ]
}