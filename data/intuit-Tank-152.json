{
    "error_id": "152",
    "information": {
        "errors": [
            {
                "line": "96",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n        if (dir.exists()) {\n            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName())).collect(Collectors.toList());\n        }\n        return new ArrayList<FileData>();\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "97",
                    "column": "55",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "98",
                    "column": "15",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/152/FileSystemFileStorage.java\nindex 6380567915..f21dfa64a9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/152/FileSystemFileStorage.java\n@@ -93,7 +93,9 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n     public List<FileData> listFileData(String path) {\n         File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n         if (dir.exists()) {\n-            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName())).collect(Collectors.toList());\n+            return Arrays.stream(dir.listFiles()).filter(File::\n+                    isFile).map(f -> new FileData(path,f .getName())\n+            ) . collect(Collectors.toList());\n         }\n         return new ArrayList<FileData>();\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/152/FileSystemFileStorage.java\nindex 6380567915..6bda040a06 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/152/FileSystemFileStorage.java\n@@ -20,88 +20,88 @@ import org.apache.logging.log4j.Logger;\n \n /**\n  * FileStorage that writes to the file system.\n- * \n- * @author denisa\n  *\n+ * @author denisa\n  */\n public class FileSystemFileStorage implements FileStorage, Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-    private static final Logger LOG = LogManager.getLogger(FileSystemFileStorage.class);\n+  private static final long serialVersionUID = 1L;\n+  private static final Logger LOG = LogManager.getLogger(FileSystemFileStorage.class);\n \n-    private String basePath;\n-    private boolean compress = true;\n+  private String basePath;\n+  private boolean compress = true;\n \n-    /**\n-     * @param basePath\n-     */\n-    public FileSystemFileStorage(String basePath, boolean compress) {\n-        super();\n-        this.basePath = FilenameUtils.normalizeNoEndSeparator(basePath);\n-        this.compress = compress;\n-        File dir = new File(basePath);\n-        if (!dir.exists()) {\n-            LOG.info(\"Creating storage dir \" + dir.getAbsolutePath());\n-        }\n+  /**\n+   * @param basePath\n+   */\n+  public FileSystemFileStorage(String basePath, boolean compress) {\n+    super();\n+    this.basePath = FilenameUtils.normalizeNoEndSeparator(basePath);\n+    this.compress = compress;\n+    File dir = new File(basePath);\n+    if (!dir.exists()) {\n+      LOG.info(\"Creating storage dir \" + dir.getAbsolutePath());\n     }\n+  }\n \n-    @Override\n-    public void storeFileData(FileData fileData, InputStream in) {\n-        File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n-        if (!f.getParentFile().exists()) {\n-            f.getParentFile().mkdirs();\n-        }\n-        OutputStream out = null;\n-        try {\n-            out = new FileOutputStream(f);\n-            if (compress) {\n-                out = new GZIPOutputStream(out);\n-            }\n-            IOUtils.copy(in, out);\n-        } catch (Exception e) {\n-            LOG.error(\"Error storing file: \" + e, e);\n-            throw new RuntimeException(e);\n-        } finally {\n-            IOUtils.closeQuietly(out);\n-        }\n+  @Override\n+  public void storeFileData(FileData fileData, InputStream in) {\n+    File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n+    if (!f.getParentFile().exists()) {\n+      f.getParentFile().mkdirs();\n+    }\n+    OutputStream out = null;\n+    try {\n+      out = new FileOutputStream(f);\n+      if (compress) {\n+        out = new GZIPOutputStream(out);\n+      }\n+      IOUtils.copy(in, out);\n+    } catch (Exception e) {\n+      LOG.error(\"Error storing file: \" + e, e);\n+      throw new RuntimeException(e);\n+    } finally {\n+      IOUtils.closeQuietly(out);\n     }\n+  }\n \n-    @Override\n-    public InputStream readFileData(FileData fileData) {\n-        File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n-        InputStream ret = null;\n-        try {\n-            ret = new FileInputStream(f);\n-            if (compress) {\n-                ret = new GZIPInputStream(ret);\n-            }\n+  @Override\n+  public InputStream readFileData(FileData fileData) {\n+    File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n+    InputStream ret = null;\n+    try {\n+      ret = new FileInputStream(f);\n+      if (compress) {\n+        ret = new GZIPInputStream(ret);\n+      }\n \n-        } catch (Exception e) {\n-            LOG.error(\"Error storing file: \" + e, e);\n-            throw new RuntimeException(e);\n-        }\n-        return ret;\n+    } catch (Exception e) {\n+      LOG.error(\"Error storing file: \" + e, e);\n+      throw new RuntimeException(e);\n     }\n+    return ret;\n+  }\n \n-    @Override\n-    public boolean exists(FileData fileData) {\n-        File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n-        return f.exists();\n-    }\n+  @Override\n+  public boolean exists(FileData fileData) {\n+    File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n+    return f.exists();\n+  }\n \n-    @Override\n-    public List<FileData> listFileData(String path) {\n-        File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n-        if (dir.exists()) {\n-            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName())).collect(Collectors.toList());\n-        }\n-        return new ArrayList<FileData>();\n+  @Override\n+  public List<FileData> listFileData(String path) {\n+    File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n+    if (dir.exists()) {\n+      return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName()))\n+        .collect(Collectors.toList());\n     }\n+    return new ArrayList<FileData>();\n+  }\n \n-    @Override\n-    public boolean delete(FileData fileData) {\n-        File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n-        return f.delete();\n-    }\n+  @Override\n+  public boolean delete(FileData fileData) {\n+    File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n+    return f.delete();\n+  }\n \n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/152/FileSystemFileStorage.java\nindex 6380567915..a03bed283c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/152/FileSystemFileStorage.java\n@@ -104,4 +104,4 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n         return f.delete();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/152/FileSystemFileStorage.java\nindex 6380567915..6c72bc3b80 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/152/FileSystemFileStorage.java\n@@ -1,5 +1,7 @@\n package com.intuit.tank.storage;\n \n+\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -12,7 +14,6 @@ import java.util.List;\n import java.util.stream.Collectors;\n import java.util.zip.GZIPInputStream;\n import java.util.zip.GZIPOutputStream;\n-\n import org.apache.commons.io.FilenameUtils;\n import org.apache.commons.io.IOUtils;\n import org.apache.logging.log4j.LogManager;\n@@ -24,17 +25,19 @@ import org.apache.logging.log4j.Logger;\n  * @author denisa\n  *\n  */\n+\n public class FileSystemFileStorage implements FileStorage, Serializable {\n \n     private static final long serialVersionUID = 1L;\n     private static final Logger LOG = LogManager.getLogger(FileSystemFileStorage.class);\n-\n     private String basePath;\n     private boolean compress = true;\n \n     /**\n      * @param basePath\n      */\n+\n+\n     public FileSystemFileStorage(String basePath, boolean compress) {\n         super();\n         this.basePath = FilenameUtils.normalizeNoEndSeparator(basePath);\n@@ -66,6 +69,7 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n         }\n     }\n \n+\n     @Override\n     public InputStream readFileData(FileData fileData) {\n         File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n@@ -75,7 +79,6 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n             if (compress) {\n                 ret = new GZIPInputStream(ret);\n             }\n-\n         } catch (Exception e) {\n             LOG.error(\"Error storing file: \" + e, e);\n             throw new RuntimeException(e);\n@@ -83,25 +86,28 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n         return ret;\n     }\n \n+\n     @Override\n     public boolean exists(FileData fileData) {\n         File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n         return f.exists();\n     }\n \n+\n     @Override\n     public List<FileData> listFileData(String path) {\n         File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n         if (dir.exists()) {\n-            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName())).collect(Collectors.toList());\n+            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f-> new FileData(path, f.getName())).collect(Collectors.toList());\n         }\n         return new ArrayList<FileData>();\n     }\n \n+\n     @Override\n     public boolean delete(FileData fileData) {\n         File f = new File(FilenameUtils.normalize(basePath + \"/\" + fileData.getPath() + \"/\" + fileData.getFileName()));\n         return f.delete();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "97",
                    "column": "55",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "98",
                    "column": "15",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/152/FileSystemFileStorage.java\nindex 6380567915..f21dfa64a9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/152/FileSystemFileStorage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/152/FileSystemFileStorage.java\n@@ -93,7 +93,9 @@ public class FileSystemFileStorage implements FileStorage, Serializable {\n     public List<FileData> listFileData(String path) {\n         File dir = new File(FilenameUtils.normalize(basePath + \"/\" + path));\n         if (dir.exists()) {\n-            return Arrays.stream(dir.listFiles()).filter(File::isFile).map(f -> new FileData(path, f.getName())).collect(Collectors.toList());\n+            return Arrays.stream(dir.listFiles()).filter(File::\n+                    isFile).map(f -> new FileData(path,f .getName())\n+            ) . collect(Collectors.toList());\n         }\n         return new ArrayList<FileData>();\n     }\n",
            "diff_size": 3
        }
    ]
}