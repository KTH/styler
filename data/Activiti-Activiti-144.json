{
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "103",
                "column": "11",
                "severity": "error",
                "message": "'&&' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n      if (outgoingSequenceFlow.getTargetFlowElement() != null\n          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n      }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..e4e15c9363 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/144/IntermediateCatchEventActivityBehavior.java\n@@ -99,29 +99,28 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n     Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n     for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n-        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n-      }\n-    }\n+      if (outgoingSequenceFlow.getTargetFlowElement() != null && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+    eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n+  }\n+}\n \n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+CommandContext commandContext = Context.getCommandContext();\n+ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n \n-    // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+// Find the executions\n+List<ExecutionEntity> executionEntities = executionEntityManager\n+    .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n \n-    // Execute the cancel behaviour of the IntermediateCatchEvent\n-    for (ExecutionEntity executionEntity : executionEntities) {\n-      if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n-        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n-        if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n-          ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n-          eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n-        }\n-      }\n+// Execute the cancel behaviour of the IntermediateCatchEvent\n+for (ExecutionEntity executionEntity : executionEntities) {\n+  if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n+    IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n+    if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n+      ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n+      eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n     }\n   }\n+}\n+}\n \n }\n",
            "diff_size": 21
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "103",
                    "column": "21",
                    "severity": "error",
                    "message": "'&&' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..269f57fdfc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/144/IntermediateCatchEventActivityBehavior.java\n@@ -33,95 +33,95 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;\n \n public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  public void execute(DelegateExecution execution) {\n-    // Do nothing: waitstate behavior\n-  }\n-\n-  @Override\n-  public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n-    leaveIntermediateCatchEvent(execution);\n-  }\n-\n-  /**\n-   * Specific leave method for intermediate events: does a normal leave(), except\n-   * when behind an event based gateway. In that case, the other events are cancelled\n-   * (we're only supporting the exclusive event based gateway type currently).\n-   * and the process instance is continued through the triggered event.\n-   */\n-  public void leaveIntermediateCatchEvent(DelegateExecution execution) {\n-    EventGateway eventGateway = getPrecedingEventBasedGateway(execution);\n-    if (eventGateway != null) {\n-      deleteOtherEventsRelatedToEventBasedGateway(execution, eventGateway);\n+    private static final long serialVersionUID = 1L;\n+\n+    public void execute(DelegateExecution execution) {\n+        // Do nothing: waitstate behavior\n+    }\n+\n+    @Override\n+    public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n+        leaveIntermediateCatchEvent(execution);\n     }\n \n-    leave(execution); // Normal leave\n-  }\n-\n-  /**\n-   * Should be subclassed by the more specific types.\n-   * For an intermediate catch without type, it's simply leaving the event.\n-   */\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n-  }\n-\n-  protected EventGateway getPrecedingEventBasedGateway(DelegateExecution execution) {\n-    FlowElement currentFlowElement = execution.getCurrentFlowElement();\n-    if (currentFlowElement instanceof IntermediateCatchEvent) {\n-      IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) currentFlowElement;\n-      List<SequenceFlow> incomingSequenceFlow = intermediateCatchEvent.getIncomingFlows();\n-\n-      // If behind an event based gateway, there is only one incoming sequence flow that originates from said gateway\n-      if (incomingSequenceFlow != null && incomingSequenceFlow.size() == 1) {\n-        SequenceFlow sequenceFlow = incomingSequenceFlow.get(0);\n-        FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();\n-        if (sourceFlowElement instanceof EventGateway) {\n-          return (EventGateway) sourceFlowElement;\n+    /**\n+     * Specific leave method for intermediate events: does a normal leave(), except\n+     * when behind an event based gateway. In that case, the other events are cancelled\n+     * (we're only supporting the exclusive event based gateway type currently).\n+     * and the process instance is continued through the triggered event.\n+     */\n+    public void leaveIntermediateCatchEvent(DelegateExecution execution) {\n+        EventGateway eventGateway = getPrecedingEventBasedGateway(execution);\n+        if (eventGateway != null) {\n+            deleteOtherEventsRelatedToEventBasedGateway(execution, eventGateway);\n         }\n-      }\n \n+        leave(execution); // Normal leave\n     }\n-    return null;\n-  }\n-\n-  protected void deleteOtherEventsRelatedToEventBasedGateway(DelegateExecution execution, EventGateway eventGateway) {\n-\n-    // To clean up the other events behind the event based gateway, we must gather the\n-    // activity ids of said events and check the _sibling_ executions of the incoming execution.\n-    // Note that it can happen that there are multiple such execution in those activity ids,\n-    // (for example a parallel gw going twice to the event based gateway, kinda silly, but valid)\n-    // so we only take _one_ result of such a query for deletion.\n-\n-    // Gather all activity ids for the events after the event based gateway that need to be destroyed\n-    List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n-    Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n-    for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n-        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n-      }\n+\n+    /**\n+     * Should be subclassed by the more specific types.\n+     * For an intermediate catch without type, it's simply leaving the event.\n+     */\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n+        Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n     }\n \n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+    protected EventGateway getPrecedingEventBasedGateway(DelegateExecution execution) {\n+        FlowElement currentFlowElement = execution.getCurrentFlowElement();\n+        if (currentFlowElement instanceof IntermediateCatchEvent) {\n+            IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) currentFlowElement;\n+            List<SequenceFlow> incomingSequenceFlow = intermediateCatchEvent.getIncomingFlows();\n+\n+            // If behind an event based gateway, there is only one incoming sequence flow that originates from said gateway\n+            if (incomingSequenceFlow != null && incomingSequenceFlow.size() == 1) {\n+                SequenceFlow sequenceFlow = incomingSequenceFlow.get(0);\n+                FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();\n+                if (sourceFlowElement instanceof EventGateway) {\n+                    return (EventGateway) sourceFlowElement;\n+                }\n+            }\n \n-    // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+        }\n+        return null;\n+    }\n+\n+    protected void deleteOtherEventsRelatedToEventBasedGateway(DelegateExecution execution, EventGateway eventGateway) {\n+\n+        // To clean up the other events behind the event based gateway, we must gather the\n+        // activity ids of said events and check the _sibling_ executions of the incoming execution.\n+        // Note that it can happen that there are multiple such execution in those activity ids,\n+        // (for example a parallel gw going twice to the event based gateway, kinda silly, but valid)\n+        // so we only take _one_ result of such a query for deletion.\n+\n+        // Gather all activity ids for the events after the event based gateway that need to be destroyed\n+        List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n+        Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n+        for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n+            if (outgoingSequenceFlow.getTargetFlowElement() != null\n+                    && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+                eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n+            }\n+        }\n \n-    // Execute the cancel behaviour of the IntermediateCatchEvent\n-    for (ExecutionEntity executionEntity : executionEntities) {\n-      if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n-        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n-        if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n-          ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n-          eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n+        CommandContext commandContext = Context.getCommandContext();\n+        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+\n+        // Find the executions\n+        List<ExecutionEntity> executionEntities = executionEntityManager\n+                .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+\n+        // Execute the cancel behaviour of the IntermediateCatchEvent\n+        for (ExecutionEntity executionEntity : executionEntities) {\n+            if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n+                IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n+                if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n+                    ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n+                    eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..0a80db7c99 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/144/IntermediateCatchEventActivityBehavior.java\n@@ -99,8 +99,7 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n     Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n     for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+      if (outgoingSequenceFlow.getTargetFlowElement() != null && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n         eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n       }\n     }\n@@ -109,8 +108,7 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n \n     // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+    List<ExecutionEntity> executionEntities = executionEntityManager.findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n \n     // Execute the cancel behaviour of the IntermediateCatchEvent\n     for (ExecutionEntity executionEntity : executionEntities) {\n@@ -124,4 +122,4 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 53.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 78.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..606ff8fefe 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/144/IntermediateCatchEventActivityBehavior.java\n@@ -19,7 +19,6 @@ package org.activiti.engine.impl.bpmn.behavior;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import org.activiti.bpmn.model.EventGateway;\n import org.activiti.bpmn.model.FlowElement;\n import org.activiti.bpmn.model.IntermediateCatchEvent;\n@@ -31,18 +30,18 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntityManager;\n \n-public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n+public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n-  public void execute(DelegateExecution execution) {\n+    private static final long serialVersionUID = 1L;\n+    public void execute(DelegateExecution execution) {\n     // Do nothing: waitstate behavior\n-  }\n+    }\n \n-  @Override\n-  public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n+    @Override\n+    public void trigger(DelegateExecution execution, String signalName, Object signalData) {\n     leaveIntermediateCatchEvent(execution);\n-  }\n+    }\n \n   /**\n    * Specific leave method for intermediate events: does a normal leave(), except\n@@ -50,44 +49,44 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n    * (we're only supporting the exclusive event based gateway type currently).\n    * and the process instance is continued through the triggered event.\n    */\n-  public void leaveIntermediateCatchEvent(DelegateExecution execution) {\n+\n+    public void leaveIntermediateCatchEvent(DelegateExecution execution) {\n     EventGateway eventGateway = getPrecedingEventBasedGateway(execution);\n     if (eventGateway != null) {\n-      deleteOtherEventsRelatedToEventBasedGateway(execution, eventGateway);\n+        deleteOtherEventsRelatedToEventBasedGateway(execution, eventGateway);\n     }\n-\n     leave(execution); // Normal leave\n-  }\n+    }\n \n   /**\n    * Should be subclassed by the more specific types.\n    * For an intermediate catch without type, it's simply leaving the event.\n    */\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n+\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n     Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n-  }\n+                                                                                          DeleteReason.EVENT_BASED_GATEWAY_CANCEL);\n+    }\n \n-  protected EventGateway getPrecedingEventBasedGateway(DelegateExecution execution) {\n+    protected EventGateway getPrecedingEventBasedGateway(DelegateExecution execution) {\n     FlowElement currentFlowElement = execution.getCurrentFlowElement();\n     if (currentFlowElement instanceof IntermediateCatchEvent) {\n-      IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) currentFlowElement;\n-      List<SequenceFlow> incomingSequenceFlow = intermediateCatchEvent.getIncomingFlows();\n+        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) currentFlowElement;\n+        List<SequenceFlow> incomingSequenceFlow = intermediateCatchEvent.getIncomingFlows();\n \n       // If behind an event based gateway, there is only one incoming sequence flow that originates from said gateway\n-      if (incomingSequenceFlow != null && incomingSequenceFlow.size() == 1) {\n-        SequenceFlow sequenceFlow = incomingSequenceFlow.get(0);\n-        FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();\n-        if (sourceFlowElement instanceof EventGateway) {\n-          return (EventGateway) sourceFlowElement;\n+        if (incomingSequenceFlow != null && incomingSequenceFlow.size() == 1) {\n+            SequenceFlow sequenceFlow = incomingSequenceFlow.get(0);\n+            FlowElement sourceFlowElement = sequenceFlow.getSourceFlowElement();\n+            if (sourceFlowElement instanceof EventGateway) {\n+                                                                                  return (EventGateway) sourceFlowElement;\n+            }\n         }\n-      }\n-\n     }\n     return null;\n-  }\n+    }\n \n-  protected void deleteOtherEventsRelatedToEventBasedGateway(DelegateExecution execution, EventGateway eventGateway) {\n+    protected void deleteOtherEventsRelatedToEventBasedGateway(DelegateExecution execution, EventGateway eventGateway) {\n \n     // To clean up the other events behind the event based gateway, we must gather the\n     // activity ids of said events and check the _sibling_ executions of the incoming execution.\n@@ -99,29 +98,27 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n     Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n     for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n-        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n-      }\n+        if (outgoingSequenceFlow.getTargetFlowElement() != null && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+            eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n+        }\n     }\n \n     CommandContext commandContext = Context.getCommandContext();\n     ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n \n     // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+    List<ExecutionEntity> executionEntities = executionEntityManager.findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n \n     // Execute the cancel behaviour of the IntermediateCatchEvent\n     for (ExecutionEntity executionEntity : executionEntities) {\n-      if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n-        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n-        if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n-          ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n-          eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n+        if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n+            IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n+            if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n+            ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n+            eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n+            }\n         }\n-      }\n     }\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..e4e15c9363 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/144/IntermediateCatchEventActivityBehavior.java\n@@ -99,29 +99,28 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n     Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n     for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n-        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n-      }\n-    }\n+      if (outgoingSequenceFlow.getTargetFlowElement() != null && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+    eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n+  }\n+}\n \n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+CommandContext commandContext = Context.getCommandContext();\n+ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n \n-    // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+// Find the executions\n+List<ExecutionEntity> executionEntities = executionEntityManager\n+    .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n \n-    // Execute the cancel behaviour of the IntermediateCatchEvent\n-    for (ExecutionEntity executionEntity : executionEntities) {\n-      if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n-        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n-        if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n-          ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n-          eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n-        }\n-      }\n+// Execute the cancel behaviour of the IntermediateCatchEvent\n+for (ExecutionEntity executionEntity : executionEntities) {\n+  if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n+    IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n+    if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n+      ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n+      eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n     }\n   }\n+}\n+}\n \n }\n",
            "diff_size": 21
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/144/IntermediateCatchEventActivityBehavior.java\nindex 6202af5f97..e4e15c9363 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/144/IntermediateCatchEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/144/IntermediateCatchEventActivityBehavior.java\n@@ -99,29 +99,28 @@ public class IntermediateCatchEventActivityBehavior extends AbstractBpmnActivity\n     List<SequenceFlow> outgoingSequenceFlows = eventGateway.getOutgoingFlows();\n     Set<String> eventActivityIds = new HashSet<String>(outgoingSequenceFlows.size() - 1); // -1, the event being triggered does not need to be deleted\n     for (SequenceFlow outgoingSequenceFlow : outgoingSequenceFlows) {\n-      if (outgoingSequenceFlow.getTargetFlowElement() != null\n-          && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n-        eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n-      }\n-    }\n+      if (outgoingSequenceFlow.getTargetFlowElement() != null && !outgoingSequenceFlow.getTargetFlowElement().getId().equals(execution.getCurrentActivityId())) {\n+    eventActivityIds.add(outgoingSequenceFlow.getTargetFlowElement().getId());\n+  }\n+}\n \n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+CommandContext commandContext = Context.getCommandContext();\n+ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n \n-    // Find the executions\n-    List<ExecutionEntity> executionEntities = executionEntityManager\n-        .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n+// Find the executions\n+List<ExecutionEntity> executionEntities = executionEntityManager\n+    .findExecutionsByParentExecutionAndActivityIds(execution.getParentId(), eventActivityIds);\n \n-    // Execute the cancel behaviour of the IntermediateCatchEvent\n-    for (ExecutionEntity executionEntity : executionEntities) {\n-      if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n-        IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n-        if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n-          ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n-          eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n-        }\n-      }\n+// Execute the cancel behaviour of the IntermediateCatchEvent\n+for (ExecutionEntity executionEntity : executionEntities) {\n+  if (eventActivityIds.contains(executionEntity.getActivityId()) && execution.getCurrentFlowElement() instanceof IntermediateCatchEvent) {\n+    IntermediateCatchEvent intermediateCatchEvent = (IntermediateCatchEvent) execution.getCurrentFlowElement();\n+    if (intermediateCatchEvent.getBehavior() instanceof IntermediateCatchEventActivityBehavior) {\n+      ((IntermediateCatchEventActivityBehavior) intermediateCatchEvent.getBehavior()).eventCancelledByEventGateway(executionEntity);\n+      eventActivityIds.remove(executionEntity.getActivityId()); // We only need to delete ONE execution at the event.\n     }\n   }\n+}\n+}\n \n }\n",
            "diff_size": 21
        }
    ]
}