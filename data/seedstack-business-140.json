{
    "error_id": "140",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.utils;\n\nimport static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\nimport static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/140/PluginUtils.java\nindex 9c7a4d96eb..7cb2295b06 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/140/PluginUtils.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.utils;\n+\n+package org .seedstack.business.internal.utils;\n \n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/140/PluginUtils.java\nindex 9c7a4d96eb..81e677ff92 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/140/PluginUtils.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.utils;\n \n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n@@ -43,7 +44,7 @@ public final class PluginUtils {\n      * @param classpathScanRequestBuilder the Nuun classpath scan request builder.\n      * @param interfaces                  the interfaces.\n      * @return a map where the key is an interface and the value is a specification matching\n-     *         descendants of this interface.\n+     * descendants of this interface.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends Class<?>> Map<T, Specification<? extends T>> classpathRequestForDescendantTypesOf(\n@@ -104,7 +105,8 @@ public final class PluginUtils {\n      * @see BindingUtils#resolveBindingDefinitions(Class, Class, Class[])\n      */\n     public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface,\n-            Collection<Class<? extends T>> implementations, boolean overridingMode) {\n+                                                                                          Collection<Class<? extends T>> implementations,\n+                                                                                          boolean overridingMode) {\n         return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream()\n                 .filter(overridingMode ? isOverridingImplementation() : isOverridingImplementation().negate())\n                 .collect(Collectors.toList()));\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/140/PluginUtils.java\nindex 9c7a4d96eb..52ee9995b9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/140/PluginUtils.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.utils;\n \n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n@@ -31,8 +32,7 @@ import org.slf4j.LoggerFactory;\n public final class PluginUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PluginUtils.class);\n-\n-    private PluginUtils() {\n+private PluginUtils() {\n         // no instantiation allowed\n     }\n \n@@ -46,15 +46,13 @@ public final class PluginUtils {\n      *         descendants of this interface.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends Class<?>> Map<T, Specification<? extends T>> classpathRequestForDescendantTypesOf(\n-            ClasspathScanRequestBuilder classpathScanRequestBuilder, Collection<T> interfaces) {\n-        Map<T, Specification<? extends T>> specsByInterface = new HashMap<>();\n+    public static <T extends Class<?>> Map<T, Specification<? extends T>> classpathRequestForDescendantTypesOf(ClasspathScanRequestBuilder classpathScanRequestBuilder, Collection<T> interfaces) {\n+    Map<T, Specification<? extends T>> specsByInterface = new HashMap<>();\n         for (T anInterface : interfaces) {\n             LOGGER.trace(\"Request implementations of: {}\", anInterface.getName());\n-            Specification<Class<?>> spec = new SpecificationBuilder<>(\n-                    classIsDescendantOf(anInterface).and(classIsInterface().negate())\n+            Specification<Class<?>> spec = new SpecificationBuilder<>(classIsDescendantOf(anInterface).and(classIsInterface().negate())\n                             .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n-            classpathScanRequestBuilder.specification(spec);\n+        classpathScanRequestBuilder.specification(spec);\n             specsByInterface.put(anInterface, (Specification<? extends T>) spec);\n         }\n         return specsByInterface;\n@@ -77,15 +75,12 @@ public final class PluginUtils {\n      * @see BindingUtils#resolveBindingDefinitions(Class, Class, Class[])\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends Class> Map<Key<T>, ? extends T> associateInterfacesToImplementations(\n-            InitContext initContext, Collection<T> interfaces, Map<T, Specification<? extends T>> specsByInterface,\n-            boolean overridingMode) {\n-        Map<Key<T>, ? extends T> keyMap = new HashMap<>();\n+    public static <T extends Class> Map<Key<T>, ? extends T> associateInterfacesToImplementations(InitContext initContext, Collection<T> interfaces, Map<T, Specification<? extends T>> specsByInterface, boolean overridingMode) {\n+    Map<Key<T>, ? extends T> keyMap = new HashMap<>();\n         for (T anInterface : interfaces) {\n             keyMap.putAll(associateInterfaceToImplementations(anInterface, initContext.scannedTypesBySpecification()\n                     .get(specsByInterface.get(anInterface)), overridingMode));\n-\n-        }\n+            }\n         return keyMap;\n     }\n \n@@ -103,9 +98,8 @@ public final class PluginUtils {\n      * @return the map of interface/implementation to bind\n      * @see BindingUtils#resolveBindingDefinitions(Class, Class, Class[])\n      */\n-    public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface,\n-            Collection<Class<? extends T>> implementations, boolean overridingMode) {\n-        return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream()\n+    public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface, Collection<Class<? extends T>> implementations, boolean overridingMode) {\n+    return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream()\n                 .filter(overridingMode ? isOverridingImplementation() : isOverridingImplementation().negate())\n                 .collect(Collectors.toList()));\n     }\n@@ -117,4 +111,4 @@ public final class PluginUtils {\n                 .find(Overriding.class)\n                 .isPresent();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'initContext' has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "114",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "114",
                    "column": "22",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/140/PluginUtils.java\nindex 9c7a4d96eb..f164617181 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/140/PluginUtils.java\n@@ -8,9 +8,10 @@\n package org.seedstack.business.internal.utils;\n \n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n+\n import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n-import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n \n+import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n import com.google.inject.Key;\n import io.nuun.kernel.api.plugin.context.InitContext;\n import io.nuun.kernel.api.plugin.request.ClasspathScanRequestBuilder;\n@@ -28,10 +29,10 @@ import org.seedstack.shed.reflect.Annotations;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public final class PluginUtils {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(PluginUtils.class);\n-\n     private PluginUtils() {\n         // no instantiation allowed\n     }\n@@ -45,15 +46,14 @@ public final class PluginUtils {\n      * @return a map where the key is an interface and the value is a specification matching\n      *         descendants of this interface.\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends Class<?>> Map<T, Specification<? extends T>> classpathRequestForDescendantTypesOf(\n-            ClasspathScanRequestBuilder classpathScanRequestBuilder, Collection<T> interfaces) {\n+    public static <T extends Class<?>> Map<T, Specification<? extends T>> classpathRequestForDescendantTypesOf(ClasspathScanRequestBuilder classpathScanRequestBuilder, Collection<T> interfaces) {\n         Map<T, Specification<? extends T>> specsByInterface = new HashMap<>();\n-        for (T anInterface : interfaces) {\n+        for(T anInterface : interfaces) {\n             LOGGER.trace(\"Request implementations of: {}\", anInterface.getName());\n-            Specification<Class<?>> spec = new SpecificationBuilder<>(\n-                    classIsDescendantOf(anInterface).and(classIsInterface().negate())\n-                            .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+            Specification<Class<?>> spec = new SpecificationBuilder<>(classIsDescendantOf(anInterface).and(classIsInterface().negate())\n+.and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n             classpathScanRequestBuilder.specification(spec);\n             specsByInterface.put(anInterface, (Specification<? extends T>) spec);\n         }\n@@ -76,15 +76,14 @@ public final class PluginUtils {\n      * @return the map of interface/implementation to bind.\n      * @see BindingUtils#resolveBindingDefinitions(Class, Class, Class[])\n      */\n+\n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends Class> Map<Key<T>, ? extends T> associateInterfacesToImplementations(\n-            InitContext initContext, Collection<T> interfaces, Map<T, Specification<? extends T>> specsByInterface,\n-            boolean overridingMode) {\n+    public static <T extends Class> Map<Key<T>, ? extends T> associateInterfacesToImplementations(InitContext initContext, Collection<T> interfaces, Map<T, Specification<? extends T>> specsByInterface, boolean overridingMode) {\n         Map<Key<T>, ? extends T> keyMap = new HashMap<>();\n-        for (T anInterface : interfaces) {\n-            keyMap.putAll(associateInterfaceToImplementations(anInterface, initContext.scannedTypesBySpecification()\n-                    .get(specsByInterface.get(anInterface)), overridingMode));\n-\n+        for(T anInterface : interfaces) {\n+            keyMap.putAll(associateInterfaceToImplementations(anInterface,\n+                initContext.scannedTypesBySpecification().get(specsByInterface.get(anInterface)),\n+                    overridingMode));\n         }\n         return keyMap;\n     }\n@@ -103,18 +102,18 @@ public final class PluginUtils {\n      * @return the map of interface/implementation to bind\n      * @see BindingUtils#resolveBindingDefinitions(Class, Class, Class[])\n      */\n-    public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface,\n-            Collection<Class<? extends T>> implementations, boolean overridingMode) {\n-        return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream()\n-                .filter(overridingMode ? isOverridingImplementation() : isOverridingImplementation().negate())\n-                .collect(Collectors.toList()));\n+\n+\n+    public static <T> Map<Key<T>, Class<? extends T>> associateInterfaceToImplementations(Class<T> anInterface, Collection<Class<? extends T>> implementations, boolean overridingMode) {\n+        return BindingUtils.resolveBindingDefinitions(anInterface, implementations.stream().filter(overridingMode? isOverridingImplementation() : isOverridingImplementation().negate())\n+.collect(Collectors.toList()));\n     }\n \n+\n     private static Predicate<Class<?>> isOverridingImplementation() {\n-        return (item) -> Annotations.on(item)\n-                .traversingSuperclasses()\n-                .includingMetaAnnotations()\n-                .find(Overriding.class)\n-                .isPresent();\n+        return (item)-> Annotations.on(item).traversingSuperclasses()\n+.includingMetaAnnotations()\n+.find(Overriding.class)\n+.isPresent();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/140/PluginUtils.java\nindex 9c7a4d96eb..7cb2295b06 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/140/PluginUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/140/PluginUtils.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.utils;\n+\n+package org .seedstack.business.internal.utils;\n \n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}