{
    "error_id": "336",
    "information": {
        "errors": [
            {
                "line": "22",
                "severity": "error",
                "message": "No trailing whitespace allowed.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/**\n * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\n * \n * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\n * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\n * HBASE-4367, HBASE-4101, etc.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/336/HasThread.java\nindex 02a1d2b523..c3ce1989ee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/336/HasThread.java\n@@ -1,94 +1,94 @@\n-/**\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\r\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\r\n- * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\r\n- * copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- */\r\n-\r\n-package com.tencent.angel.utils;\r\n-\r\n-import java.lang.Thread.UncaughtExceptionHandler;\r\n-\r\n-/**\r\n- * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\r\n- * \r\n- * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\r\n- * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\r\n- * HBASE-4367, HBASE-4101, etc.\r\n- */\r\n-public abstract class HasThread implements Runnable {\r\n-  private final Thread thread;\r\n-\r\n-  public HasThread() {\r\n-    this.thread = new Thread(this);\r\n-  }\r\n-\r\n-  public HasThread(String name) {\r\n-    this.thread = new Thread(this, name);\r\n-  }\r\n-\r\n-  public Thread getThread() {\r\n-    return thread;\r\n-  }\r\n-\r\n-  public abstract void run();\r\n-\r\n-  // // Begin delegation to Thread\r\n-\r\n-  public final String getName() {\r\n-    return thread.getName();\r\n-  }\r\n-\r\n-  public void interrupt() {\r\n-    thread.interrupt();\r\n-  }\r\n-\r\n-  public final boolean isAlive() {\r\n-    return thread.isAlive();\r\n-  }\r\n-\r\n-  public boolean isInterrupted() {\r\n-    return thread.isInterrupted();\r\n-  }\r\n-\r\n-  public final void setDaemon(boolean on) {\r\n-    thread.setDaemon(on);\r\n-  }\r\n-\r\n-  public final void setName(String name) {\r\n-    thread.setName(name);\r\n-  }\r\n-\r\n-  public final void setPriority(int newPriority) {\r\n-    thread.setPriority(newPriority);\r\n-  }\r\n-\r\n-  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n-    thread.setUncaughtExceptionHandler(eh);\r\n-  }\r\n-\r\n-  public void start() {\r\n-    thread.start();\r\n-  }\r\n-\r\n-  public final void join() throws InterruptedException {\r\n-    thread.join();\r\n-  }\r\n-\r\n-  public final void join(long millis, int nanos) throws InterruptedException {\r\n-    thread.join(millis, nanos);\r\n-  }\r\n-\r\n-  public final void join(long millis) throws InterruptedException {\r\n-    thread.join(millis);\r\n-  }\r\n-  // // End delegation to Thread\r\n-}\r\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.tencent.angel.utils;\n+\n+import java.lang.Thread.UncaughtExceptionHandler;\n+\n+/**\n+ * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\n+ * \n+ * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\n+ * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\n+ * HBASE-4367, HBASE-4101, etc.\n+ */\n+public abstract class HasThread implements Runnable {\n+  private final Thread thread;\n+\n+  public HasThread() {\n+    this.thread = new Thread(this);\n+  }\n+\n+  public HasThread(String name) {\n+    this.thread = new Thread(this, name);\n+  }\n+\n+  public Thread getThread() {\n+    return thread;\n+  }\n+\n+  public abstract void run();\n+\n+  // // Begin delegation to Thread\n+\n+  public final String getName() {\n+    return thread.getName();\n+  }\n+\n+  public void interrupt() {\n+    thread.interrupt();\n+  }\n+\n+  public final boolean isAlive() {\n+    return thread.isAlive();\n+  }\n+\n+  public boolean isInterrupted() {\n+    return thread.isInterrupted();\n+  }\n+\n+  public final void setDaemon(boolean on) {\n+    thread.setDaemon(on);\n+  }\n+\n+  public final void setName(String name) {\n+    thread.setName(name);\n+  }\n+\n+  public final void setPriority(int newPriority) {\n+    thread.setPriority(newPriority);\n+  }\n+\n+  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\n+    thread.setUncaughtExceptionHandler(eh);\n+  }\n+\n+  public void start() {\n+    thread.start();\n+  }\n+\n+  public final void join() throws InterruptedException {\n+    thread.join();\n+  }\n+\n+  public final void join(long millis, int nanos) throws InterruptedException {\n+    thread.join(millis, nanos);\n+  }\n+\n+  public final void join(long millis) throws InterruptedException {\n+    thread.join(millis);\n+  }\n+  // // End delegation to Thread\n+}\n",
            "diff_size": 94
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/336/HasThread.java\nindex 02a1d2b523..b612171a1e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/336/HasThread.java\n@@ -4,9 +4,9 @@\n  * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\r\n  * \"License\"); you may not use this file except in compliance with the License. You may obtain a\r\n  * copy of the License at\r\n- *\r\n+ * <p>\r\n  * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n  * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n@@ -19,76 +19,76 @@ import java.lang.Thread.UncaughtExceptionHandler;\n \r\n /**\r\n  * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\r\n- * \r\n+ *\r\n  * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\r\n  * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\r\n  * HBASE-4367, HBASE-4101, etc.\r\n  */\r\n public abstract class HasThread implements Runnable {\r\n-  private final Thread thread;\r\n+    private final Thread thread;\r\n \r\n-  public HasThread() {\r\n-    this.thread = new Thread(this);\r\n-  }\r\n+    public HasThread() {\r\n+        this.thread = new Thread(this);\r\n+    }\r\n \r\n-  public HasThread(String name) {\r\n-    this.thread = new Thread(this, name);\r\n-  }\r\n+    public HasThread(String name) {\r\n+        this.thread = new Thread(this, name);\r\n+    }\r\n \r\n-  public Thread getThread() {\r\n-    return thread;\r\n-  }\r\n+    public Thread getThread() {\r\n+        return thread;\r\n+    }\r\n \r\n-  public abstract void run();\r\n+    public abstract void run();\r\n \r\n-  // // Begin delegation to Thread\r\n+    // // Begin delegation to Thread\r\n \r\n-  public final String getName() {\r\n-    return thread.getName();\r\n-  }\r\n+    public final String getName() {\r\n+        return thread.getName();\r\n+    }\r\n \r\n-  public void interrupt() {\r\n-    thread.interrupt();\r\n-  }\r\n+    public void interrupt() {\r\n+        thread.interrupt();\r\n+    }\r\n \r\n-  public final boolean isAlive() {\r\n-    return thread.isAlive();\r\n-  }\r\n+    public final boolean isAlive() {\r\n+        return thread.isAlive();\r\n+    }\r\n \r\n-  public boolean isInterrupted() {\r\n-    return thread.isInterrupted();\r\n-  }\r\n+    public boolean isInterrupted() {\r\n+        return thread.isInterrupted();\r\n+    }\r\n \r\n-  public final void setDaemon(boolean on) {\r\n-    thread.setDaemon(on);\r\n-  }\r\n+    public final void setDaemon(boolean on) {\r\n+        thread.setDaemon(on);\r\n+    }\r\n \r\n-  public final void setName(String name) {\r\n-    thread.setName(name);\r\n-  }\r\n+    public final void setName(String name) {\r\n+        thread.setName(name);\r\n+    }\r\n \r\n-  public final void setPriority(int newPriority) {\r\n-    thread.setPriority(newPriority);\r\n-  }\r\n+    public final void setPriority(int newPriority) {\r\n+        thread.setPriority(newPriority);\r\n+    }\r\n \r\n-  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n-    thread.setUncaughtExceptionHandler(eh);\r\n-  }\r\n+    public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n+        thread.setUncaughtExceptionHandler(eh);\r\n+    }\r\n \r\n-  public void start() {\r\n-    thread.start();\r\n-  }\r\n+    public void start() {\r\n+        thread.start();\r\n+    }\r\n \r\n-  public final void join() throws InterruptedException {\r\n-    thread.join();\r\n-  }\r\n+    public final void join() throws InterruptedException {\r\n+        thread.join();\r\n+    }\r\n \r\n-  public final void join(long millis, int nanos) throws InterruptedException {\r\n-    thread.join(millis, nanos);\r\n-  }\r\n+    public final void join(long millis, int nanos) throws InterruptedException {\r\n+        thread.join(millis, nanos);\r\n+    }\r\n \r\n-  public final void join(long millis) throws InterruptedException {\r\n-    thread.join(millis);\r\n-  }\r\n-  // // End delegation to Thread\r\n+    public final void join(long millis) throws InterruptedException {\r\n+        thread.join(millis);\r\n+    }\r\n+    // // End delegation to Thread\r\n }\r\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/336/HasThread.java\nindex 02a1d2b523..b36cc2d20b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/336/HasThread.java\n@@ -91,4 +91,4 @@ public abstract class HasThread implements Runnable {\n     thread.join(millis);\r\n   }\r\n   // // End delegation to Thread\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 47.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 91.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/336/HasThread.java\nindex 02a1d2b523..46f6086f5f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/336/HasThread.java\n@@ -13,8 +13,8 @@\n  * the License.\r\n  */\r\n \r\n-package com.tencent.angel.utils;\r\n-\r\n+package com.tencent.angel.utils;\n+\n import java.lang.Thread.UncaughtExceptionHandler;\r\n \r\n /**\r\n@@ -23,72 +23,73 @@ import java.lang.Thread.UncaughtExceptionHandler;\n  * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\r\n  * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\r\n  * HBASE-4367, HBASE-4101, etc.\r\n- */\r\n-public abstract class HasThread implements Runnable {\r\n-  private final Thread thread;\r\n-\r\n-  public HasThread() {\r\n-    this.thread = new Thread(this);\r\n-  }\r\n-\r\n-  public HasThread(String name) {\r\n-    this.thread = new Thread(this, name);\r\n-  }\r\n-\r\n-  public Thread getThread() {\r\n-    return thread;\r\n-  }\r\n-\r\n-  public abstract void run();\r\n-\r\n-  // // Begin delegation to Thread\r\n-\r\n-  public final String getName() {\r\n-    return thread.getName();\r\n-  }\r\n-\r\n-  public void interrupt() {\r\n-    thread.interrupt();\r\n-  }\r\n-\r\n-  public final boolean isAlive() {\r\n-    return thread.isAlive();\r\n-  }\r\n-\r\n-  public boolean isInterrupted() {\r\n-    return thread.isInterrupted();\r\n-  }\r\n-\r\n-  public final void setDaemon(boolean on) {\r\n-    thread.setDaemon(on);\r\n-  }\r\n-\r\n-  public final void setName(String name) {\r\n-    thread.setName(name);\r\n-  }\r\n-\r\n-  public final void setPriority(int newPriority) {\r\n-    thread.setPriority(newPriority);\r\n-  }\r\n-\r\n-  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n-    thread.setUncaughtExceptionHandler(eh);\r\n-  }\r\n-\r\n-  public void start() {\r\n-    thread.start();\r\n-  }\r\n-\r\n-  public final void join() throws InterruptedException {\r\n-    thread.join();\r\n-  }\r\n-\r\n-  public final void join(long millis, int nanos) throws InterruptedException {\r\n-    thread.join(millis, nanos);\r\n-  }\r\n-\r\n-  public final void join(long millis) throws InterruptedException {\r\n-    thread.join(millis);\r\n-  }\r\n-  // // End delegation to Thread\r\n-}\r\n+ */\n+\n+public abstract class HasThread implements Runnable {\n+    private final Thread thread;\n+\n+    public HasThread() {\n+    this.thread = new Thread(this);\n+    }\n+\n+    public HasThread(String name) {\n+    this.thread = new Thread(this, name);\n+    }\n+\n+    public Thread getThread() {\n+    return thread;\n+    }\n+\n+    public abstract void run();\r\n+\r\n+  // // Begin delegation to Thread\n+\n+    public final String getName() {\n+    return thread.getName();\n+    }\n+\n+    public void interrupt() {\n+    thread.interrupt();\n+    }\n+\n+    public final boolean isAlive() {\n+    return thread.isAlive();\n+    }\n+\n+    public boolean isInterrupted() {\n+    return thread.isInterrupted();\n+    }\n+\n+    public final void setDaemon(boolean on) {\n+    thread.setDaemon(on);\n+    }\n+\n+    public final void setName(String name) {\n+    thread.setName(name);\n+    }\n+\n+    public final void setPriority(int newPriority) {\n+    thread.setPriority(newPriority);\n+    }\n+\n+    public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\n+    thread.setUncaughtExceptionHandler(eh);\n+    }\n+\n+    public void start() {\n+    thread.start();\n+    }\n+\n+    public final void join() throws InterruptedException {\n+    thread.join();\n+    }\n+\n+    public final void join(long millis, int nanos) throws InterruptedException {\n+    thread.join(millis, nanos);\n+    }\n+\n+    public final void join(long millis) throws InterruptedException {\n+    thread.join(millis);\n+    }\r\n+  // // End delegation to Thread\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/336/HasThread.java\nindex 02a1d2b523..c3ce1989ee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/336/HasThread.java\n@@ -1,94 +1,94 @@\n-/**\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\r\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\r\n- * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\r\n- * copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- */\r\n-\r\n-package com.tencent.angel.utils;\r\n-\r\n-import java.lang.Thread.UncaughtExceptionHandler;\r\n-\r\n-/**\r\n- * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\r\n- * \r\n- * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\r\n- * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\r\n- * HBASE-4367, HBASE-4101, etc.\r\n- */\r\n-public abstract class HasThread implements Runnable {\r\n-  private final Thread thread;\r\n-\r\n-  public HasThread() {\r\n-    this.thread = new Thread(this);\r\n-  }\r\n-\r\n-  public HasThread(String name) {\r\n-    this.thread = new Thread(this, name);\r\n-  }\r\n-\r\n-  public Thread getThread() {\r\n-    return thread;\r\n-  }\r\n-\r\n-  public abstract void run();\r\n-\r\n-  // // Begin delegation to Thread\r\n-\r\n-  public final String getName() {\r\n-    return thread.getName();\r\n-  }\r\n-\r\n-  public void interrupt() {\r\n-    thread.interrupt();\r\n-  }\r\n-\r\n-  public final boolean isAlive() {\r\n-    return thread.isAlive();\r\n-  }\r\n-\r\n-  public boolean isInterrupted() {\r\n-    return thread.isInterrupted();\r\n-  }\r\n-\r\n-  public final void setDaemon(boolean on) {\r\n-    thread.setDaemon(on);\r\n-  }\r\n-\r\n-  public final void setName(String name) {\r\n-    thread.setName(name);\r\n-  }\r\n-\r\n-  public final void setPriority(int newPriority) {\r\n-    thread.setPriority(newPriority);\r\n-  }\r\n-\r\n-  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n-    thread.setUncaughtExceptionHandler(eh);\r\n-  }\r\n-\r\n-  public void start() {\r\n-    thread.start();\r\n-  }\r\n-\r\n-  public final void join() throws InterruptedException {\r\n-    thread.join();\r\n-  }\r\n-\r\n-  public final void join(long millis, int nanos) throws InterruptedException {\r\n-    thread.join(millis, nanos);\r\n-  }\r\n-\r\n-  public final void join(long millis) throws InterruptedException {\r\n-    thread.join(millis);\r\n-  }\r\n-  // // End delegation to Thread\r\n-}\r\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.tencent.angel.utils;\n+\n+import java.lang.Thread.UncaughtExceptionHandler;\n+\n+/**\n+ * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\n+ * \n+ * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\n+ * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\n+ * HBASE-4367, HBASE-4101, etc.\n+ */\n+public abstract class HasThread implements Runnable {\n+  private final Thread thread;\n+\n+  public HasThread() {\n+    this.thread = new Thread(this);\n+  }\n+\n+  public HasThread(String name) {\n+    this.thread = new Thread(this, name);\n+  }\n+\n+  public Thread getThread() {\n+    return thread;\n+  }\n+\n+  public abstract void run();\n+\n+  // // Begin delegation to Thread\n+\n+  public final String getName() {\n+    return thread.getName();\n+  }\n+\n+  public void interrupt() {\n+    thread.interrupt();\n+  }\n+\n+  public final boolean isAlive() {\n+    return thread.isAlive();\n+  }\n+\n+  public boolean isInterrupted() {\n+    return thread.isInterrupted();\n+  }\n+\n+  public final void setDaemon(boolean on) {\n+    thread.setDaemon(on);\n+  }\n+\n+  public final void setName(String name) {\n+    thread.setName(name);\n+  }\n+\n+  public final void setPriority(int newPriority) {\n+    thread.setPriority(newPriority);\n+  }\n+\n+  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\n+    thread.setUncaughtExceptionHandler(eh);\n+  }\n+\n+  public void start() {\n+    thread.start();\n+  }\n+\n+  public final void join() throws InterruptedException {\n+    thread.join();\n+  }\n+\n+  public final void join(long millis, int nanos) throws InterruptedException {\n+    thread.join(millis, nanos);\n+  }\n+\n+  public final void join(long millis) throws InterruptedException {\n+    thread.join(millis);\n+  }\n+  // // End delegation to Thread\n+}\n",
            "diff_size": 94
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/336/HasThread.java\nindex 02a1d2b523..fcb8e91c00 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/336/HasThread.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/336/HasThread.java\n@@ -1,94 +1,92 @@\n-/**\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\r\n- * agreements. See the NOTICE file distributed with this work for additional information regarding\r\n- * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance with the License. You may obtain a\r\n- * copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\r\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\r\n- * or implied. See the License for the specific language governing permissions and limitations under\r\n- * the License.\r\n- */\r\n-\r\n-package com.tencent.angel.utils;\r\n-\r\n-import java.lang.Thread.UncaughtExceptionHandler;\r\n-\r\n-/**\r\n- * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\r\n- * \r\n- * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\r\n- * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\r\n- * HBASE-4367, HBASE-4101, etc.\r\n- */\r\n-public abstract class HasThread implements Runnable {\r\n-  private final Thread thread;\r\n-\r\n-  public HasThread() {\r\n-    this.thread = new Thread(this);\r\n-  }\r\n-\r\n-  public HasThread(String name) {\r\n-    this.thread = new Thread(this, name);\r\n-  }\r\n-\r\n-  public Thread getThread() {\r\n-    return thread;\r\n-  }\r\n-\r\n-  public abstract void run();\r\n-\r\n-  // // Begin delegation to Thread\r\n-\r\n-  public final String getName() {\r\n-    return thread.getName();\r\n-  }\r\n-\r\n-  public void interrupt() {\r\n-    thread.interrupt();\r\n-  }\r\n-\r\n-  public final boolean isAlive() {\r\n-    return thread.isAlive();\r\n-  }\r\n-\r\n-  public boolean isInterrupted() {\r\n-    return thread.isInterrupted();\r\n-  }\r\n-\r\n-  public final void setDaemon(boolean on) {\r\n-    thread.setDaemon(on);\r\n-  }\r\n-\r\n-  public final void setName(String name) {\r\n-    thread.setName(name);\r\n-  }\r\n-\r\n-  public final void setPriority(int newPriority) {\r\n-    thread.setPriority(newPriority);\r\n-  }\r\n-\r\n-  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\r\n-    thread.setUncaughtExceptionHandler(eh);\r\n-  }\r\n-\r\n-  public void start() {\r\n-    thread.start();\r\n-  }\r\n-\r\n-  public final void join() throws InterruptedException {\r\n-    thread.join();\r\n-  }\r\n-\r\n-  public final void join(long millis, int nanos) throws InterruptedException {\r\n-    thread.join(millis, nanos);\r\n-  }\r\n-\r\n-  public final void join(long millis) throws InterruptedException {\r\n-    thread.join(millis);\r\n-  }\r\n-  // // End delegation to Thread\r\n-}\r\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package com.tencent.angel.utils;\n+\n+import java.lang.Thread.UncaughtExceptionHandler; /**\n+ * Abstract class which contains a Thread and delegates the common Thread methods to that instance.\n+ * \n+ * The purpose of this class is to workaround Sun JVM bug #6915621, in which something internal to\n+ * the JDK uses Thread.currentThread() as a monitor lock. This can produce deadlocks like\n+ * HBASE-4367, HBASE-4101, etc.\n+ */\n+public abstract class HasThread implements Runnable {\n+  private final Thread thread;\n+\n+  public HasThread() {\n+    this.thread = new Thread(this);\n+  }\n+\n+  public HasThread(String name) {\n+    this.thread = new Thread(this, name);\n+  }\n+\n+  public Thread getThread() {\n+    return thread;\n+  }\n+\n+  public abstract void run();\n+\n+  // // Begin delegation to Thread\n+\n+  public final String getName() {\n+    return thread.getName();\n+  }\n+\n+  public void interrupt() {\n+    thread.interrupt();\n+  }\n+\n+  public final boolean isAlive() {\n+    return thread.isAlive();\n+  }\n+\n+  public boolean isInterrupted() {\n+    return thread.isInterrupted();\n+  }\n+\n+  public final void setDaemon(boolean on) {\n+    thread.setDaemon(on);\n+  }\n+\n+  public final void setName(String name) {\n+    thread.setName(name);\n+  }\n+\n+  public final void setPriority(int newPriority) {\n+    thread.setPriority(newPriority);\n+  }\n+\n+  public void setUncaughtExceptionHandler(UncaughtExceptionHandler eh) {\n+    thread.setUncaughtExceptionHandler(eh);\n+  }\n+\n+  public void start() {\n+    thread.start();\n+  }\n+\n+  public final void join() throws InterruptedException {\n+    thread.join();\n+  }\n+\n+  public final void join(long millis, int nanos) throws InterruptedException {\n+    thread.join(millis, nanos);\n+  }\n+\n+  public final void join(long millis) throws InterruptedException {\n+    thread.join(millis);\n+  }\n+  // // End delegation to Thread\n+}\n",
            "diff_size": 94
        }
    ]
}