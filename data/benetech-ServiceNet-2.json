{
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line is longer than 125 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    @ConfidentialFilter\n    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult, Location location, DataImportReport report) {\n        if (geocodingResult == null) {\n            return;\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "column": "53",
                    "severity": "error",
                    "message": "'{' at column 53 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler/2/LocationBasedImportServiceImpl.java\nindex 7b2a743c3b..d3007da11f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler/2/LocationBasedImportServiceImpl.java\n@@ -49,136 +49,137 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n \n     @Override\n     @ConfidentialFilter\n-    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult, Location location, DataImportReport report) {\n-        if (geocodingResult == null) {\n-            return;\n-        }\n-        Set<GeocodingResult> filtered = geocodingResult.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(geo -> {\n-            Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n-\n-            geocodingFromDb.ifPresentOrElse(\n-                geocodingResultDTO -> {\n-                    geo.setId(geocodingResultDTO.getId());\n-                    em.merge(geo);\n-                },\n-                () -> em.persist(geo)\n-            );\n-        });\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n-        if (physicalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n-\n-        physicalAddress.setLocation(location);\n-        if (location.getPhysicalAddress() != null) {\n-            physicalAddress.setId(location.getPhysicalAddress().getId());\n-            em.merge(physicalAddress);\n-        } else {\n-            em.persist(physicalAddress);\n-        }\n-\n-        location.setPhysicalAddress(physicalAddress);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n-        if (postalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n-        postalAddress.setLocation(location);\n-        if (location.getPostalAddress() != null) {\n-            postalAddress.setId(location.getPostalAddress().getId());\n-            em.merge(postalAddress);\n-        } else {\n-            em.persist(postalAddress);\n-        }\n-\n-        location.setPostalAddress(postalAddress);\n-    }\n-\n-    @Override\n-    public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n-        if (schedule != null) {\n-            sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n-                .filter(x -> isValid(x, report, location.getExternalDbId()))\n-                .collect(Collectors.toSet()), location, schedule);\n-        }\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n-                                                         DataImportReport report) {\n-        if (schedules != null) {\n-            schedules.forEach(schedule -> {\n-                EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n-                schedule.setLocation(location);\n-            });\n-\n-            location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n-        }\n-    }\n-\n-    @Override\n-    public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n-        Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n-            && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-        createOrUpdateFilteredLangsForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n-        Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-        filtered.forEach(p -> p.setLocation(location));\n-        createOrUpdateFilteredPhonesForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n-        Location location, DataImportReport report) {\n-        Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(x -> {\n-            EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n-            x.setLocation(location);\n-        });\n-\n-        updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n-            StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n-                && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n-\n-    }\n-\n-    private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n-        langs.forEach(lang -> {\n-            EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n-            lang.setLocation(location);\n-        });\n-        sharedImportService.persistLangs(location.getLangs(), langs);\n-    }\n-\n-    private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n-        phones.forEach(phone -> {\n-            EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n-            phone.setLocation(location);\n-        });\n-        sharedImportService.persistPhones(location.getPhones(), phones);\n-    }\n+    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult,\n+        Location location, DataImportReport report) { if (\n+        geocodingResult == null) {\n+         return;\n+     }\n+     Set<GeocodingResult> filtered = geocodingResult.stream()\n+         .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n+         .collect(Collectors.toSet());\n+\n+     filtered.forEach(geo -> {\n+         Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n+\n+         geocodingFromDb.ifPresentOrElse(\n+             geocodingResultDTO -> {\n+                 geo.setId(geocodingResultDTO.getId());\n+                 em.merge(geo);\n+             },\n+             () -> em.persist(geo)\n+         );\n+     });\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n+     if (physicalAddress == null) {\n+         return;\n+     }\n+     EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n+\n+     physicalAddress.setLocation(location);\n+     if (location.getPhysicalAddress() != null) {\n+         physicalAddress.setId(location.getPhysicalAddress().getId());\n+         em.merge(physicalAddress);\n+     } else {\n+         em.persist(physicalAddress);\n+     }\n+\n+     location.setPhysicalAddress(physicalAddress);\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n+     if (postalAddress == null) {\n+         return;\n+     }\n+     EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n+     postalAddress.setLocation(location);\n+     if (location.getPostalAddress() != null) {\n+         postalAddress.setId(location.getPostalAddress().getId());\n+         em.merge(postalAddress);\n+     } else {\n+         em.persist(postalAddress);\n+     }\n+\n+     location.setPostalAddress(postalAddress);\n+ }\n+\n+ @Override\n+ public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n+     if (schedule != null) {\n+         sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n+             .filter(x -> isValid(x, report, location.getExternalDbId()))\n+             .collect(Collectors.toSet()), location, schedule);\n+     }\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n+                                                      DataImportReport report) {\n+     if (schedules != null) {\n+         schedules.forEach(schedule -> {\n+             EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n+             schedule.setLocation(location);\n+         });\n+\n+         location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n+     }\n+ }\n+\n+ @Override\n+ public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n+     Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n+         && isValid(x, report, location.getExternalDbId()))\n+         .collect(Collectors.toSet());\n+     createOrUpdateFilteredLangsForLocation(filtered, location);\n+ }\n+\n+ @Override\n+ public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n+     Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+         .collect(Collectors.toSet());\n+     filtered.forEach(p -> p.setLocation(location));\n+     createOrUpdateFilteredPhonesForLocation(filtered, location);\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n+     Location location, DataImportReport report) {\n+     Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n+         .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+         .collect(Collectors.toSet());\n+\n+     filtered.forEach(x -> {\n+         EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n+         x.setLocation(location);\n+     });\n+\n+     updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n+         StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n+             && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n+\n+ }\n+\n+ private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n+     langs.forEach(lang -> {\n+         EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n+         lang.setLocation(location);\n+     });\n+     sharedImportService.persistLangs(location.getLangs(), langs);\n+ }\n+\n+ private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n+     phones.forEach(phone -> {\n+         EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n+         phone.setLocation(location);\n+     });\n+     sharedImportService.persistPhones(location.getPhones(), phones);\n+ }\n \n }\n",
            "diff_size": 132
        },
        {
            "tool": "intellij",
            "errors": null,
            "diff": null
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/2/LocationBasedImportServiceImpl.java\nindex 7b2a743c3b..c3db8ed509 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/naturalize/2/LocationBasedImportServiceImpl.java\n@@ -118,9 +118,8 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n \n     @Override\n     @ConfidentialFilter\n-    public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n-                                                         DataImportReport report) {\n-        if (schedules != null) {\n+    public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location, DataImportReport report) {\n+    if (schedules != null) {\n             schedules.forEach(schedule -> {\n                 EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n                 schedule.setLocation(location);\n@@ -162,7 +161,6 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n         updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n             StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n                 && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n-\n     }\n \n     private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n@@ -181,4 +179,4 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n         sharedImportService.persistPhones(location.getPhones(), phones);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "column": "53",
                    "severity": "error",
                    "message": "'{' at column 53 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_random/2/LocationBasedImportServiceImpl.java\nindex 7b2a743c3b..d3007da11f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_random/2/LocationBasedImportServiceImpl.java\n@@ -49,136 +49,137 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n \n     @Override\n     @ConfidentialFilter\n-    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult, Location location, DataImportReport report) {\n-        if (geocodingResult == null) {\n-            return;\n-        }\n-        Set<GeocodingResult> filtered = geocodingResult.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(geo -> {\n-            Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n-\n-            geocodingFromDb.ifPresentOrElse(\n-                geocodingResultDTO -> {\n-                    geo.setId(geocodingResultDTO.getId());\n-                    em.merge(geo);\n-                },\n-                () -> em.persist(geo)\n-            );\n-        });\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n-        if (physicalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n-\n-        physicalAddress.setLocation(location);\n-        if (location.getPhysicalAddress() != null) {\n-            physicalAddress.setId(location.getPhysicalAddress().getId());\n-            em.merge(physicalAddress);\n-        } else {\n-            em.persist(physicalAddress);\n-        }\n-\n-        location.setPhysicalAddress(physicalAddress);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n-        if (postalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n-        postalAddress.setLocation(location);\n-        if (location.getPostalAddress() != null) {\n-            postalAddress.setId(location.getPostalAddress().getId());\n-            em.merge(postalAddress);\n-        } else {\n-            em.persist(postalAddress);\n-        }\n-\n-        location.setPostalAddress(postalAddress);\n-    }\n-\n-    @Override\n-    public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n-        if (schedule != null) {\n-            sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n-                .filter(x -> isValid(x, report, location.getExternalDbId()))\n-                .collect(Collectors.toSet()), location, schedule);\n-        }\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n-                                                         DataImportReport report) {\n-        if (schedules != null) {\n-            schedules.forEach(schedule -> {\n-                EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n-                schedule.setLocation(location);\n-            });\n-\n-            location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n-        }\n-    }\n-\n-    @Override\n-    public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n-        Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n-            && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-        createOrUpdateFilteredLangsForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n-        Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-        filtered.forEach(p -> p.setLocation(location));\n-        createOrUpdateFilteredPhonesForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n-        Location location, DataImportReport report) {\n-        Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(x -> {\n-            EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n-            x.setLocation(location);\n-        });\n-\n-        updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n-            StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n-                && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n-\n-    }\n-\n-    private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n-        langs.forEach(lang -> {\n-            EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n-            lang.setLocation(location);\n-        });\n-        sharedImportService.persistLangs(location.getLangs(), langs);\n-    }\n-\n-    private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n-        phones.forEach(phone -> {\n-            EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n-            phone.setLocation(location);\n-        });\n-        sharedImportService.persistPhones(location.getPhones(), phones);\n-    }\n+    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult,\n+        Location location, DataImportReport report) { if (\n+        geocodingResult == null) {\n+         return;\n+     }\n+     Set<GeocodingResult> filtered = geocodingResult.stream()\n+         .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n+         .collect(Collectors.toSet());\n+\n+     filtered.forEach(geo -> {\n+         Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n+\n+         geocodingFromDb.ifPresentOrElse(\n+             geocodingResultDTO -> {\n+                 geo.setId(geocodingResultDTO.getId());\n+                 em.merge(geo);\n+             },\n+             () -> em.persist(geo)\n+         );\n+     });\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n+     if (physicalAddress == null) {\n+         return;\n+     }\n+     EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n+\n+     physicalAddress.setLocation(location);\n+     if (location.getPhysicalAddress() != null) {\n+         physicalAddress.setId(location.getPhysicalAddress().getId());\n+         em.merge(physicalAddress);\n+     } else {\n+         em.persist(physicalAddress);\n+     }\n+\n+     location.setPhysicalAddress(physicalAddress);\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n+     if (postalAddress == null) {\n+         return;\n+     }\n+     EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n+     postalAddress.setLocation(location);\n+     if (location.getPostalAddress() != null) {\n+         postalAddress.setId(location.getPostalAddress().getId());\n+         em.merge(postalAddress);\n+     } else {\n+         em.persist(postalAddress);\n+     }\n+\n+     location.setPostalAddress(postalAddress);\n+ }\n+\n+ @Override\n+ public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n+     if (schedule != null) {\n+         sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n+             .filter(x -> isValid(x, report, location.getExternalDbId()))\n+             .collect(Collectors.toSet()), location, schedule);\n+     }\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n+                                                      DataImportReport report) {\n+     if (schedules != null) {\n+         schedules.forEach(schedule -> {\n+             EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n+             schedule.setLocation(location);\n+         });\n+\n+         location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n+     }\n+ }\n+\n+ @Override\n+ public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n+     Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n+         && isValid(x, report, location.getExternalDbId()))\n+         .collect(Collectors.toSet());\n+     createOrUpdateFilteredLangsForLocation(filtered, location);\n+ }\n+\n+ @Override\n+ public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n+     Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+         .collect(Collectors.toSet());\n+     filtered.forEach(p -> p.setLocation(location));\n+     createOrUpdateFilteredPhonesForLocation(filtered, location);\n+ }\n+\n+ @Override\n+ @ConfidentialFilter\n+ public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n+     Location location, DataImportReport report) {\n+     Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n+         .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+         .collect(Collectors.toSet());\n+\n+     filtered.forEach(x -> {\n+         EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n+         x.setLocation(location);\n+     });\n+\n+     updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n+         StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n+             && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n+\n+ }\n+\n+ private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n+     langs.forEach(lang -> {\n+         EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n+         lang.setLocation(location);\n+     });\n+     sharedImportService.persistLangs(location.getLangs(), langs);\n+ }\n+\n+ private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n+     phones.forEach(phone -> {\n+         EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n+         phone.setLocation(location);\n+     });\n+     sharedImportService.persistPhones(location.getPhones(), phones);\n+ }\n \n }\n",
            "diff_size": 132
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/2/LocationBasedImportServiceImpl.java\nindex 7b2a743c3b..e6d3a4d85c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/errored/1/2/LocationBasedImportServiceImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/benetech-ServiceNet/styler_three_grams/2/LocationBasedImportServiceImpl.java\n@@ -48,137 +48,139 @@ public class LocationBasedImportServiceImpl implements LocationBasedImportServic\n     private GeocodingResultService geocodingResultService;\n \n     @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateGeocodinResults(List<GeocodingResult> geocodingResult, Location location, DataImportReport report) {\n-        if (geocodingResult == null) {\n-            return;\n-        }\n-        Set<GeocodingResult> filtered = geocodingResult.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(geo -> {\n-            Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n-\n-            geocodingFromDb.ifPresentOrElse(\n-                geocodingResultDTO -> {\n-                    geo.setId(geocodingResultDTO.getId());\n-                    em.merge(geo);\n-                },\n-                () -> em.persist(geo)\n-            );\n-        });\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n-        if (physicalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n-\n-        physicalAddress.setLocation(location);\n-        if (location.getPhysicalAddress() != null) {\n-            physicalAddress.setId(location.getPhysicalAddress().getId());\n-            em.merge(physicalAddress);\n-        } else {\n-            em.persist(physicalAddress);\n-        }\n-\n-        location.setPhysicalAddress(physicalAddress);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n-        if (postalAddress == null) {\n-            return;\n-        }\n-        EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n-        postalAddress.setLocation(location);\n-        if (location.getPostalAddress() != null) {\n-            postalAddress.setId(location.getPostalAddress().getId());\n-            em.merge(postalAddress);\n-        } else {\n-            em.persist(postalAddress);\n-        }\n-\n-        location.setPostalAddress(postalAddress);\n-    }\n-\n-    @Override\n-    public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n-        if (schedule != null) {\n-            sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n-                .filter(x -> isValid(x, report, location.getExternalDbId()))\n-                .collect(Collectors.toSet()), location, schedule);\n-        }\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n-                                                         DataImportReport report) {\n-        if (schedules != null) {\n-            schedules.forEach(schedule -> {\n-                EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n-                schedule.setLocation(location);\n-            });\n-\n-            location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n-        }\n-    }\n-\n-    @Override\n-    public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n-        Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n-            && isValid(x, report, location.getExternalDbId()))\n-            .collect(Collectors.toSet());\n-        createOrUpdateFilteredLangsForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n-        Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-        filtered.forEach(p -> p.setLocation(location));\n-        createOrUpdateFilteredPhonesForLocation(filtered, location);\n-    }\n-\n-    @Override\n-    @ConfidentialFilter\n-    public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n-        Location location, DataImportReport report) {\n-        Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n-            .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n-            .collect(Collectors.toSet());\n-\n-        filtered.forEach(x -> {\n-            EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n-            x.setLocation(location);\n-        });\n-\n-        updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n-            StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n-                && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n-\n-    }\n-\n-    private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n-        langs.forEach(lang -> {\n-            EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n-            lang.setLocation(location);\n-        });\n-        sharedImportService.persistLangs(location.getLangs(), langs);\n-    }\n-\n-    private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n-        phones.forEach(phone -> {\n-            EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n-            phone.setLocation(location);\n-        });\n-        sharedImportService.persistPhones(location.getPhones(), phones);\n-    }\n-\n-}\n+    @ConfidentialFilter publicvoidcreateOrUpdateGeocodinResults(List<GeocodingResult>\n+\n+    geocodingResult, Location location, DataImportReport report) {\n+         if (geocodingResult == null) {\n+             return;\n+         }\n+         Set<GeocodingResult> filtered = geocodingResult.stream()\n+             .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()) && isValid(x, report, location.getExternalDbId()))\n+             .collect(Collectors.toSet());\n+\n+         filtered.forEach(geo -> {\n+             Optional<GeocodingResultDTO> geocodingFromDb = geocodingResultService.findOne(geo.getId());\n+\n+             geocodingFromDb.ifPresentOrElse(\n+                 geocodingResultDTO -> {\n+                     geo.setId(geocodingResultDTO.getId());\n+                     em.merge(geo);\n+                 },\n+                 () -> em.persist(geo)\n+             );\n+         });\n+     }\n+\n+     @Override\n+     @ConfidentialFilter\n+     public void createOrUpdatePhysicalAddress(PhysicalAddress physicalAddress, Location location, DataImportReport report) {\n+         if (physicalAddress == null) {\n+             return;\n+         }\n+         EntityValidator.validateAndFix(physicalAddress, location.getOrganization(), report, location.getExternalDbId());\n+\n+         physicalAddress.setLocation(location);\n+         if (location.getPhysicalAddress() != null) {\n+             physicalAddress.setId(location.getPhysicalAddress().getId());\n+             em.merge(physicalAddress);\n+         } else {\n+             em.persist(physicalAddress);\n+         }\n+\n+         location.setPhysicalAddress(physicalAddress);\n+     }\n+\n+     @Override\n+     @ConfidentialFilter\n+     public void createOrUpdatePostalAddress(PostalAddress postalAddress, Location location, DataImportReport report) {\n+         if (postalAddress == null) {\n+             return;\n+         }\n+         EntityValidator.validateAndFix(postalAddress, location.getOrganization(), report, location.getExternalDbId());\n+         postalAddress.setLocation(location);\n+         if (location.getPostalAddress() != null) {\n+             postalAddress.setId(location.getPostalAddress().getId());\n+             em.merge(postalAddress);\n+         } else {\n+             em.persist(postalAddress);\n+         }\n+\n+         location.setPostalAddress(postalAddress);\n+     }\n+\n+     @Override\n+     public void createOrUpdateOpeningHoursForLocation(RegularSchedule schedule, Location location, DataImportReport report) {\n+         if (schedule != null) {\n+             sharedImportService.createOrUpdateOpeningHours(schedule.getOpeningHours().stream()\n+                 .filter(x -> isValid(x, report, location.getExternalDbId()))\n+                 .collect(Collectors.toSet()), location, schedule);\n+         }\n+     }\n+\n+     @Override\n+     @ConfidentialFilter\n+     public void createOrUpdateHolidaySchedulesForLocation(Set<HolidaySchedule> schedules, Location location,\n+                                                          DataImportReport report) {\n+         if (schedules != null) {\n+             schedules.forEach(schedule -> {\n+                 EntityValidator.validateAndFix(schedule, location.getOrganization(), report, location.getExternalDbId());\n+                 schedule.setLocation(location);\n+             });\n+\n+             location.setHolidaySchedules(sharedImportService.createOrUpdateHolidaySchedules(schedules));\n+         }\n+     }\n+\n+     @Override\n+     public void createOrUpdateLangsForLocation(Set<Language> langs, Location location, DataImportReport report) {\n+         Set<Language> filtered = langs.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential())\n+             && isValid(x, report, location.getExternalDbId()))\n+             .collect(Collectors.toSet());\n+         createOrUpdateFilteredLangsForLocation(filtered, location);\n+     }\n+\n+     @Override\n+     public void createOrUpdatePhonesForLocation(Set<Phone> phones, Location location, DataImportReport report) {\n+         Set<Phone> filtered = phones.stream().filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+             .collect(Collectors.toSet());\n+         filtered.forEach(p -> p.setLocation(location));\n+         createOrUpdateFilteredPhonesForLocation(filtered, location);\n+     }\n+\n+     @Override\n+     @ConfidentialFilter\n+     public void createOrUpdateAccessibilities(Set<AccessibilityForDisabilities> accessibilities,\n+         Location location, DataImportReport report) {\n+         Set<AccessibilityForDisabilities> filtered = accessibilities.stream()\n+             .filter(x -> BooleanUtils.isNotTrue(x.getIsConfidential()))\n+             .collect(Collectors.toSet());\n+\n+         filtered.forEach(x -> {\n+             EntityValidator.validateAndFix(x, location.getOrganization(), report, location.getExternalDbId());\n+             x.setLocation(location);\n+         });\n+\n+         updateCollection(em, location.getAccessibilities(), filtered, (x1, x2) ->\n+             StringUtils.equals(x1.getAccessibility(), x2.getAccessibility())\n+                 && StringUtils.equals(x1.getDetails(), x2.getDetails()));\n+\n+     }\n+\n+     private void createOrUpdateFilteredLangsForLocation(Set<Language> langs, Location location) {\n+         langs.forEach(lang -> {\n+             EntityValidator.validateAndFix(lang, location.getOrganization(), null, \"\");\n+             lang.setLocation(location);\n+         });\n+         sharedImportService.persistLangs(location.getLangs(), langs);\n+     }\n+\n+     private void createOrUpdateFilteredPhonesForLocation(Set<Phone> phones, @Nonnull Location location) {\n+         phones.forEach(phone -> {\n+             EntityValidator.validateAndFix(phone, location.getOrganization(), null, \"\");\n+             phone.setLocation(location);\n+         });\n+         sharedImportService.persistPhones(location.getPhones(), phones);\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 136
        }
    ]
}