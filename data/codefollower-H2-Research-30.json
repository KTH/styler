{
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "399",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        try {\n            if (isDebugEnabled()) {\n                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n            }\n            setParameter(parameterIndex, ValueInt.get(x));\n        } catch (Exception e) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "399",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "400",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/30/JdbcPreparedStatement.java\nindex e5c98e9708..0d0812911f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/30/JdbcPreparedStatement.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.io.InputStream;\n@@ -56,7 +57,7 @@ import org.h2.value.ValueString;\n  * Represents a prepared statement.\n  */\n public class JdbcPreparedStatement extends JdbcStatement implements\n-        PreparedStatement, JdbcPreparedStatementBackwardsCompat {\n+    PreparedStatement, JdbcPreparedStatementBackwardsCompat {\n \n     protected CommandInterface command;\n     private ArrayList<Value[]> batchParameters;\n@@ -65,8 +66,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     private final Object generatedKeysRequest;\n \n     JdbcPreparedStatement(JdbcConnection conn, String sql, int id,\n-            int resultSetType, int resultSetConcurrency,\n-            boolean closeWithResultSet, Object generatedKeysRequest) {\n+                          int resultSetType, int resultSetConcurrency,\n+                          boolean closeWithResultSet, Object generatedKeysRequest) {\n         super(conn, id, resultSetType, resultSetConcurrency, closeWithResultSet);\n         this.generatedKeysRequest = conn.scopeGeneratedKeys() ? false : generatedKeysRequest;\n         setTrace(session.getTrace(), TraceObject.PREPARED_STATEMENT, id);\n@@ -119,7 +120,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                     }\n                 }\n                 resultSet = new JdbcResultSet(conn, this, command, result, id,\n-                        closedByResultSet, scrollable, updatable, cachedColumnLabelMap);\n+                    closedByResultSet, scrollable, updatable, cachedColumnLabelMap);\n             }\n             return resultSet;\n         } catch (Exception e) {\n@@ -132,15 +133,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * and returns the update count.\n      * If another result set exists for this statement, this will be closed\n      * (even if this statement fails).\n-     *\n+     * <p>\n      * If auto commit is on, this statement will be committed.\n      * If the statement is a DDL statement (create, drop, alter) and does not\n      * throw an exception, the current transaction (if any) is committed after\n      * executing the statement.\n      *\n      * @return the update count (number of row affected by an insert, update or\n-     *         delete, or 0 if no rows or the statement was a create, drop,\n-     *         commit or rollback)\n+     * delete, or 0 if no rows or the statement was a create, drop,\n+     * commit or rollback)\n      * @throws SQLException if this object is closed or invalid\n      */\n     @Override\n@@ -167,15 +168,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * and returns the update count.\n      * If another result set exists for this statement, this will be closed\n      * (even if this statement fails).\n-     *\n+     * <p>\n      * If auto commit is on, this statement will be committed.\n      * If the statement is a DDL statement (create, drop, alter) and does not\n      * throw an exception, the current transaction (if any) is committed after\n      * executing the statement.\n      *\n      * @return the update count (number of row affected by an insert, update or\n-     *         delete, or 0 if no rows or the statement was a create, drop,\n-     *         commit or rollback)\n+     * delete, or 0 if no rows or the statement was a create, drop,\n+     * commit or rollback)\n      * @throws SQLException if this object is closed or invalid\n      */\n     @Override\n@@ -201,7 +202,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 if (gk != null) {\n                     int id = getNextId(TraceObject.RESULT_SET);\n                     generatedKeys = new JdbcResultSet(conn, this, command, gk, id,\n-                            false, true, false);\n+                        false, true, false);\n                 }\n             } finally {\n                 setExecutingStatement(null);\n@@ -240,8 +241,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                         ResultInterface result = command.executeQuery(maxRows, scrollable);\n                         lazy = result.isLazy();\n                         resultSet = new JdbcResultSet(conn, this, command, result,\n-                                id, closedByResultSet, scrollable,\n-                                updatable, cachedColumnLabelMap);\n+                            id, closedByResultSet, scrollable,\n+                            updatable, cachedColumnLabelMap);\n                     } else {\n                         returnsResultSet = false;\n                         ResultWithGeneratedKeys result = command.executeUpdate(generatedKeysRequest);\n@@ -249,7 +250,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                         ResultInterface gk = result.getGeneratedKeys();\n                         if (gk != null) {\n                             generatedKeys = new JdbcResultSet(conn, this, command, gk, id,\n-                                    false, true, false);\n+                                false, true, false);\n                         }\n                     }\n                 } finally {\n@@ -370,14 +371,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets a parameter to null.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param sqlType the data type (Types.x)\n+     * @param sqlType        the data type (Types.x)\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNull(int parameterIndex, int sqlType) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\");\");\n+                debugCode(\"setNull(\" + parameterIndex + \", \" + sqlType + \");\");\n             }\n             setParameter(parameterIndex, ValueNull.INSTANCE);\n         } catch (Exception e) {\n@@ -389,14 +390,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setInt(int parameterIndex, int x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n+                debugCode(\"setInt(\" + parameterIndex + \", \" + x + \");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n             }\n             setParameter(parameterIndex, ValueInt.get(x));\n         } catch (Exception e) {\n@@ -408,7 +409,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -432,7 +433,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -451,7 +452,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -470,7 +471,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -489,7 +490,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -499,7 +500,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \");\");\n             }\n             setParameter(parameterIndex,\n-                    x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n+                x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -510,7 +511,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Objects of unknown classes are serialized (on the client side).\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -535,16 +536,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Objects of unknown classes are serialized (on the client side).\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value, null is allowed\n-     * @param targetSqlType the type as defined in java.sql.Types\n+     * @param x              the value, null is allowed\n+     * @param targetSqlType  the type as defined in java.sql.Types\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setObject(int parameterIndex, Object x, int targetSqlType)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \" + targetSqlType + \");\");\n             }\n             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n@@ -558,17 +559,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Objects of unknown classes are serialized (on the client side).\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value, null is allowed\n-     * @param targetSqlType the type as defined in java.sql.Types\n-     * @param scale is ignored\n+     * @param x              the value, null is allowed\n+     * @param targetSqlType  the type as defined in java.sql.Types\n+     * @param scale          is ignored\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setObject(int parameterIndex, Object x, int targetSqlType,\n-            int scale) throws SQLException {\n+                          int scale) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\", \"+scale+\");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \" + targetSqlType + \", \" + scale + \");\");\n             }\n             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n@@ -582,8 +583,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Objects of unknown classes are serialized (on the client side).\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value, null is allowed\n-     * @param targetSqlType the SQL type\n+     * @param x              the value, null is allowed\n+     * @param targetSqlType  the SQL type\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -604,9 +605,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Objects of unknown classes are serialized (on the client side).\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value, null is allowed\n-     * @param targetSqlType the SQL type\n-     * @param scaleOrLength is ignored\n+     * @param x              the value, null is allowed\n+     * @param targetSqlType  the SQL type\n+     * @param scaleOrLength  is ignored\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -614,7 +615,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \", \"\n-                        + scaleOrLength + \");\");\n+                    + scaleOrLength + \");\");\n             }\n             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n@@ -635,14 +636,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBoolean(\"+parameterIndex+\", \"+x+\");\");\n+                debugCode(\"setBoolean(\" + parameterIndex + \", \" + x + \");\");\n             }\n             setParameter(parameterIndex, ValueBoolean.get(x));\n         } catch (Exception e) {\n@@ -654,14 +655,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setByte(int parameterIndex, byte x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setByte(\"+parameterIndex+\", \"+x+\");\");\n+                debugCode(\"setByte(\" + parameterIndex + \", \" + x + \");\");\n             }\n             setParameter(parameterIndex, ValueByte.get(x));\n         } catch (Exception e) {\n@@ -673,14 +674,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setShort(int parameterIndex, short x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setShort(\"+parameterIndex+\", (short) \"+x+\");\");\n+                debugCode(\"setShort(\" + parameterIndex + \", (short) \" + x + \");\");\n             }\n             setParameter(parameterIndex, ValueShort.get(x));\n         } catch (Exception e) {\n@@ -692,14 +693,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setLong(int parameterIndex, long x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setLong(\"+parameterIndex+\", \"+x+\"L);\");\n+                debugCode(\"setLong(\" + parameterIndex + \", \" + x + \"L);\");\n             }\n             setParameter(parameterIndex, ValueLong.get(x));\n         } catch (Exception e) {\n@@ -711,14 +712,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setFloat(int parameterIndex, float x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setFloat(\"+parameterIndex+\", \"+x+\"f);\");\n+                debugCode(\"setFloat(\" + parameterIndex + \", \" + x + \"f);\");\n             }\n             setParameter(parameterIndex, ValueFloat.get(x));\n         } catch (Exception e) {\n@@ -730,14 +731,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setDouble(int parameterIndex, double x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setDouble(\"+parameterIndex+\", \"+x+\"d);\");\n+                debugCode(\"setDouble(\" + parameterIndex + \", \" + x + \"d);\");\n             }\n             setParameter(parameterIndex, ValueDouble.get(x));\n         } catch (Exception e) {\n@@ -758,8 +759,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * the local time zone.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param calendar the calendar\n+     * @param x              the value\n+     * @param calendar       the calendar\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -772,7 +773,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n                 setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                    LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -784,8 +785,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * the local time zone.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param calendar the calendar\n+     * @param x              the value\n+     * @param calendar       the calendar\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -798,7 +799,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n                 setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                    LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -810,8 +811,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * converted to the local time zone.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param calendar the calendar\n+     * @param x              the value\n+     * @param calendar       the calendar\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -824,7 +825,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n                 setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                    LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -839,7 +840,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     @Deprecated\n     @Override\n     public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+        throws SQLException {\n         throw unsupported(\"unicodeStream\");\n     }\n \n@@ -847,16 +848,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets a parameter to null.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param sqlType the data type (Types.x)\n-     * @param typeName this parameter is ignored\n+     * @param sqlType        the data type (Types.x)\n+     * @param typeName       this parameter is ignored\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNull(int parameterIndex, int sqlType, String typeName)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\", \"+quote(typeName)+\");\");\n+                debugCode(\"setNull(\" + parameterIndex + \", \" + sqlType + \", \" + quote(typeName) + \");\");\n             }\n             setNull(parameterIndex, sqlType);\n         } catch (Exception e) {\n@@ -868,14 +869,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as a Blob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBlob(int parameterIndex, Blob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -896,14 +897,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBlob(int parameterIndex, InputStream x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, -1);\n@@ -917,14 +918,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as a Clob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setClob(int parameterIndex, Clob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -945,14 +946,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setClob(int parameterIndex, Reader x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -971,14 +972,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as an Array.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setArray(int parameterIndex, Array x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setArray(\"+parameterIndex+\", x);\");\n+                debugCode(\"setArray(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -997,7 +998,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as a byte array.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -1018,16 +1019,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of bytes\n+     * @param x              the value\n+     * @param length         the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBinaryStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBinaryStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setBinaryStream(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, length);\n@@ -1043,13 +1044,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of bytes\n+     * @param x              the value\n+     * @param length         the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBinaryStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+        throws SQLException {\n         setBinaryStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1059,12 +1060,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBinaryStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n+        throws SQLException {\n         setBinaryStream(parameterIndex, x, -1);\n     }\n \n@@ -1074,13 +1075,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of bytes\n+     * @param x              the value\n+     * @param length         the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setAsciiStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+        throws SQLException {\n         setAsciiStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1090,16 +1091,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of bytes\n+     * @param x              the value\n+     * @param length         the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setAsciiStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setAsciiStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setAsciiStream(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(IOUtils.getAsciiReader(x), length);\n@@ -1115,12 +1116,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setAsciiStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n+        throws SQLException {\n         setAsciiStream(parameterIndex, x, -1);\n     }\n \n@@ -1130,13 +1131,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of characters\n+     * @param x              the value\n+     * @param length         the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setCharacterStream(int parameterIndex, Reader x, int length)\n-            throws SQLException {\n+        throws SQLException {\n         setCharacterStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1146,12 +1147,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n+        throws SQLException {\n         setCharacterStream(parameterIndex, x, -1);\n     }\n \n@@ -1161,16 +1162,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of characters\n+     * @param x              the value\n+     * @param length         the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setCharacterStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setCharacterStream(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1207,11 +1208,11 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             int id = getNextId(TraceObject.RESULT_SET_META_DATA);\n             if (isDebugEnabled()) {\n                 debugCodeAssign(\"ResultSetMetaData\",\n-                        TraceObject.RESULT_SET_META_DATA, id, \"getMetaData()\");\n+                    TraceObject.RESULT_SET_META_DATA, id, \"getMetaData()\");\n             }\n             String catalog = conn.getCatalog();\n             return new JdbcResultSetMetaData(\n-                    null, this, result, catalog, session.getTrace(), id);\n+                null, this, result, catalog, session.getTrace(), id);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1274,7 +1275,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             for (int i = 0; i < size; i++) {\n                 Value[] set = batchParameters.get(i);\n                 ArrayList<? extends ParameterInterface> parameters =\n-                        command.getParameters();\n+                    command.getParameters();\n                 for (int j = 0; j < set.length; j++) {\n                     Value value = set[j];\n                     ParameterInterface param = parameters.get(j);\n@@ -1315,7 +1316,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 }\n                 checkClosed();\n                 generatedKeys = new JdbcResultSet(conn, this, null, batchIdentities.getResult(), id, false, true,\n-                        false);\n+                    false);\n             } catch (Exception e) {\n                 throw logAndConvert(e);\n             }\n@@ -1332,7 +1333,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             debugCodeCall(\"addBatch\");\n             checkClosed();\n             ArrayList<? extends ParameterInterface> parameters =\n-                    command.getParameters();\n+                command.getParameters();\n             int size = parameters.size();\n             Value[] set = new Value[size];\n             for (int i = 0; i < size; i++) {\n@@ -1353,16 +1354,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql               ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public int executeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1373,16 +1374,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql               ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public long executeLargeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1393,17 +1394,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql           ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public int executeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                    quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1414,17 +1415,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql           ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public long executeLargeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                    quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1435,20 +1436,20 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql         ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public int executeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                    quoteArray(columnNames) + \");\");\n             }\n             throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+                ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1457,20 +1458,20 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql         ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public long executeLargeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                    quoteArray(columnNames) + \");\");\n             }\n             throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+                ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1479,19 +1480,19 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql               ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public boolean execute(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"execute(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n             }\n             throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+                ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1500,7 +1501,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql           ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n@@ -1519,19 +1520,19 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n-     * @param sql ignored\n+     * @param sql         ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n     @Override\n     public boolean execute(String sql, String[] columnNames)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"execute(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n             }\n             throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+                ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1548,11 +1549,11 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             int id = getNextId(TraceObject.PARAMETER_META_DATA);\n             if (isDebugEnabled()) {\n                 debugCodeAssign(\"ParameterMetaData\",\n-                        TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n+                    TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n             }\n             checkClosed();\n             return new JdbcParameterMetaData(\n-                    session.getTrace(), this, command, id);\n+                session.getTrace(), this, command, id);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1566,7 +1567,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n         ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n         if (parameterIndex < 0 || parameterIndex >= parameters.size()) {\n             throw DbException.getInvalidValueException(\"parameterIndex\",\n-                    parameterIndex + 1);\n+                parameterIndex + 1);\n         }\n         ParameterInterface param = parameters.get(parameterIndex);\n         // can only delete old temp files if they are not in the batch\n@@ -1585,7 +1586,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n@@ -1606,17 +1607,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of characters\n+     * @param x              the value\n+     * @param length         the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNCharacterStream(\"+\n-                    parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setNCharacterStream(\" +\n+                    parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1632,12 +1633,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n+        throws SQLException {\n         setNCharacterStream(parameterIndex, x, -1);\n     }\n \n@@ -1645,14 +1646,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as a Clob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNClob(int parameterIndex, NClob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -1673,14 +1674,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNClob(int parameterIndex, Reader x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, -1);\n@@ -1695,16 +1696,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * reader. The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of characters\n+     * @param x              the value\n+     * @param length         the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1720,16 +1721,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The stream may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of bytes\n+     * @param x              the value\n+     * @param length         the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setBlob(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, length);\n@@ -1745,16 +1746,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * The reader may be closed after executing the statement.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n-     * @param length the maximum number of characters\n+     * @param x              the value\n+     * @param length         the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setNClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+        throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x, \" + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1768,14 +1769,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * Sets the value of a parameter as a SQLXML.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n-     * @param x the value\n+     * @param x              the value\n      * @throws SQLException if this object is closed\n      */\n     @Override\n     public void setSQLXML(int parameterIndex, SQLXML x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setSQLXML(\"+parameterIndex+\", x);\");\n+                debugCode(\"setSQLXML(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/30/JdbcPreparedStatement.java\nindex e5c98e9708..c38b8b8a24 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/30/JdbcPreparedStatement.java\n@@ -149,14 +149,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             debugCodeCall(\"executeUpdate\");\n             checkClosed();\n             batchIdentities = null;\n-//<<<<<<< HEAD\n-//            try {\n-//                return executeUpdateInternal();\n-//            } finally {\n-//                afterWriting(); //\u56e0\u4e3a\u5728checkClosedForWrite\u4e2d\u6709\u53ef\u80fd\u89e6\u53d1org.h2.engine.Database.beforeWriting()\n-//            }\n-//=======\n-            return executeUpdateInternal();\n+//<<<<<<< HEA\n+return executeUpdateInternal();\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -396,7 +390,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     public void setInt(int parameterIndex, int x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n+                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\");\n+//\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n             }\n             setParameter(parameterIndex, ValueInt.get(x));\n         } catch (Exception e) {\n@@ -417,12 +412,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             if (isDebugEnabled()) {\n                 debugCode(\"setString(\" + parameterIndex + \", \" + quote(x) + \");\");\n             }\n-//<<<<<<< HEAD\n-//            //(Value)\u662f\u591a\u4f59\u7684\n-//            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);\n-//            setParameter(parameterIndex, v);\n-//=======\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n+//<<<<<<<\n+setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1402,8 +1393,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \" + quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1423,8 +1413,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" + quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1444,8 +1433,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n             }\n             throw DbException.get(\n                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n@@ -1466,8 +1454,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n             }\n             throw DbException.get(\n                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n@@ -1797,4 +1784,4 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     public String toString() {\n         return getTraceObjectName() + \": \" + command;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "413",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/30/JdbcPreparedStatement.java\nindex e5c98e9708..57bd2a1955 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/30/JdbcPreparedStatement.java\n@@ -26,7 +26,6 @@ import java.sql.Statement;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.HashMap;\n-\n import org.h2.api.ErrorCode;\n import org.h2.command.CommandInterface;\n import org.h2.expression.ParameterInterface;\n@@ -55,8 +54,10 @@ import org.h2.value.ValueString;\n /**\n  * Represents a prepared statement.\n  */\n-public class JdbcPreparedStatement extends JdbcStatement implements\n-        PreparedStatement, JdbcPreparedStatementBackwardsCompat {\n+\n+\n+public class JdbcPreparedStatement extends JdbcStatement implements PreparedStatement, JdbcPreparedStatementBackwardsCompat {\n+\n \n     protected CommandInterface command;\n     private ArrayList<Value[]> batchParameters;\n@@ -64,10 +65,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     private HashMap<String, Integer> cachedColumnLabelMap;\n     private final Object generatedKeysRequest;\n \n-    JdbcPreparedStatement(JdbcConnection conn, String sql, int id,\n-            int resultSetType, int resultSetConcurrency,\n-            boolean closeWithResultSet, Object generatedKeysRequest) {\n-        super(conn, id, resultSetType, resultSetConcurrency, closeWithResultSet);\n+    JdbcPreparedStatement(JdbcConnection conn, String sql, int id, int resultSetType, int resultSetConcurrency, boolean closeWithResultSet, Object generatedKeysRequest) {\n+        super(conn,\n+                 id,\n+                 resultSetType,\n+                 resultSetConcurrency,\n+                 closeWithResultSet);\n         this.generatedKeysRequest = conn.scopeGeneratedKeys() ? false : generatedKeysRequest;\n         setTrace(session.getTrace(), TraceObject.PREPARED_STATEMENT, id);\n         //\u8fd9\u91cc\u8981\u4e8b\u5148\u4fdd\u5b58\u597dCommandInterface\u7684\u5b9e\u4f8b\uff0c\u800cJdbcStatement\u4e0d\u9700\u8981\n@@ -82,6 +85,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *\n      * @param cachedColumnLabelMap the column map\n      */\n+\n+\n     void setCachedColumnLabelMap(HashMap<String, Integer> cachedColumnLabelMap) {\n         this.cachedColumnLabelMap = cachedColumnLabelMap;\n     }\n@@ -94,6 +99,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @return the result set\n      * @throws SQLException if this object is closed or invalid\n      */\n+\n     @Override\n     public ResultSet executeQuery() throws SQLException {\n         try {\n@@ -118,8 +124,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                         setExecutingStatement(null);\n                     }\n                 }\n-                resultSet = new JdbcResultSet(conn, this, command, result, id,\n-                        closedByResultSet, scrollable, updatable, cachedColumnLabelMap);\n+                resultSet = new JdbcResultSet(conn, this, command, result, id, closedByResultSet, scrollable, updatable, cachedColumnLabelMap);\n             }\n             return resultSet;\n         } catch (Exception e) {\n@@ -143,6 +148,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *         commit or rollback)\n      * @throws SQLException if this object is closed or invalid\n      */\n+\n     @Override\n     public int executeUpdate() throws SQLException {\n         try {\n@@ -178,6 +184,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *         commit or rollback)\n      * @throws SQLException if this object is closed or invalid\n      */\n+\n     @Override\n     public long executeLargeUpdate() throws SQLException {\n         try {\n@@ -200,8 +207,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                 ResultInterface gk = result.getGeneratedKeys();\n                 if (gk != null) {\n                     int id = getNextId(TraceObject.RESULT_SET);\n-                    generatedKeys = new JdbcResultSet(conn, this, command, gk, id,\n-                            false, true, false);\n+                    generatedKeys = new JdbcResultSet(conn, this, command, gk, id, false, true, false);\n                 }\n             } finally {\n                 setExecutingStatement(null);\n@@ -219,6 +225,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @return true if a result set is available, false if not\n      * @throws SQLException if this object is closed or invalid\n      */\n+\n     @Override\n     public boolean execute() throws SQLException {\n         try {\n@@ -239,17 +246,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n                         boolean updatable = resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;\n                         ResultInterface result = command.executeQuery(maxRows, scrollable);\n                         lazy = result.isLazy();\n-                        resultSet = new JdbcResultSet(conn, this, command, result,\n-                                id, closedByResultSet, scrollable,\n-                                updatable, cachedColumnLabelMap);\n+                        resultSet = new JdbcResultSet(conn, this, command, result, id, closedByResultSet, scrollable, updatable, cachedColumnLabelMap);\n                     } else {\n                         returnsResultSet = false;\n                         ResultWithGeneratedKeys result = command.executeUpdate(generatedKeysRequest);\n                         updateCount = result.getUpdateCount();\n                         ResultInterface gk = result.getGeneratedKeys();\n                         if (gk != null) {\n-                            generatedKeys = new JdbcResultSet(conn, this, command, gk, id,\n-                                    false, true, false);\n+                            generatedKeys = new JdbcResultSet(conn, this, command, gk, id, false, true, false);\n                         }\n                     }\n                 } finally {\n@@ -269,6 +273,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *\n      * @throws SQLException if this object is closed or invalid\n      */\n+\n     @Override\n     public void clearParameters() throws SQLException {\n         try {\n@@ -290,6 +295,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sql ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public ResultSet executeQuery(String sql) throws SQLException {\n         try {\n@@ -306,6 +312,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sql ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public void addBatch(String sql) throws SQLException {\n         try {\n@@ -322,6 +329,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sql ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public int executeUpdate(String sql) throws SQLException {\n         try {\n@@ -338,6 +346,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sql ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public long executeLargeUpdate(String sql) throws SQLException {\n         try {\n@@ -354,6 +363,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sql ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public boolean execute(String sql) throws SQLException {\n         try {\n@@ -373,11 +383,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param sqlType the data type (Types.x)\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setNull(int parameterIndex, int sqlType) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\");\");\n+                debugCode(\"setNull(\" + parameterIndex + \", \"\n+                + sqlType + \");\");\n             }\n             setParameter(parameterIndex, ValueNull.INSTANCE);\n         } catch (Exception e) {\n@@ -392,11 +404,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setInt(int parameterIndex, int x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n+                debugCode(\"setInt(\" + parameterIndex + \", \"\n+                + x + \");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n             }\n             setParameter(parameterIndex, ValueInt.get(x));\n         } catch (Exception e) {\n@@ -411,18 +425,21 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setString(int parameterIndex, String x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + parameterIndex + \", \" + quote(x) + \");\");\n+                debugCode(\"setString(\" + parameterIndex + \", \"\n+                + quote(x) + \");\");\n             }\n //<<<<<<< HEAD\n //            //(Value)\u662f\u591a\u4f59\u7684\n //            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);\n //            setParameter(parameterIndex, v);\n //=======\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n+            setParameter(parameterIndex,\n+                x == null ? ValueNull.INSTANCE : ValueString.get(x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -435,13 +452,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBigDecimal(\" + parameterIndex + \", \" + quoteBigDecimal(x) + \");\");\n+                debugCode(\"setBigDecimal(\" + parameterIndex + \", \"\n+                + quoteBigDecimal(x) + \");\");\n             }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueDecimal.get(x));\n+            setParameter(parameterIndex,\n+                x == null ? ValueNull.INSTANCE : ValueDecimal.get(x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -454,11 +474,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \");\");\n+                debugCode(\"setDate(\" + parameterIndex + \", \"\n+                + quoteDate(x) + \");\");\n             }\n             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromDate(conn, null, x));\n         } catch (Exception e) {\n@@ -473,11 +495,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \");\");\n+                debugCode(\"setTime(\" + parameterIndex + \", \"\n+                + quoteTime(x) + \");\");\n             }\n             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTime(conn, null, x));\n         } catch (Exception e) {\n@@ -492,14 +516,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \");\");\n+                debugCode(\"setTimestamp(\" + parameterIndex + \", \"\n+                + quoteTimestamp(x) + \");\");\n             }\n-            setParameter(parameterIndex,\n-                    x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n+            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -513,6 +538,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setObject(int parameterIndex, Object x) throws SQLException {\n         try {\n@@ -522,7 +548,8 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             if (x == null) {\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n-                setParameter(parameterIndex, DataType.convertToValue(session, x, Value.UNKNOWN));\n+                setParameter(parameterIndex,\n+                    DataType.convertToValue(session, x, Value.UNKNOWN));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -539,14 +566,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param targetSqlType the type as defined in java.sql.Types\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setObject(int parameterIndex, Object x, int targetSqlType)\n-            throws SQLException {\n+    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \"\n+                + targetSqlType + \");\");\n             }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+            setObjectWithType(parameterIndex,\n+                x,\n+                    DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -563,14 +593,20 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param scale is ignored\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setObject(int parameterIndex, Object x, int targetSqlType,\n-            int scale) throws SQLException {\n+    public void setObject(int parameterIndex,\n+        Object x,\n+            int targetSqlType, int scale) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\", \"+scale+\");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \"\n+                + targetSqlType + \", \"\n+                + scale + \");\");\n             }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+            setObjectWithType(parameterIndex,\n+                x,\n+                    DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -586,13 +622,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param targetSqlType the SQL type\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \"\n+                + DataType.sqlTypeToString(targetSqlType) + \");\");\n             }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+            setObjectWithType(parameterIndex,\n+                x,\n+                    DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -609,14 +649,18 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param scaleOrLength is ignored\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \", \"\n-                        + scaleOrLength + \");\");\n+                debugCode(\"setObject(\" + parameterIndex + \", x, \"\n+                + DataType.sqlTypeToString(targetSqlType) + \", \"\n+                + scaleOrLength + \");\");\n             }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+            setObjectWithType(parameterIndex,\n+                x,\n+                    DataType.convertSQLTypeToValueType(targetSqlType));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -638,11 +682,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBoolean(\"+parameterIndex+\", \"+x+\");\");\n+                debugCode(\"setBoolean(\" + parameterIndex + \", \"\n+                + x + \");\");\n             }\n             setParameter(parameterIndex, ValueBoolean.get(x));\n         } catch (Exception e) {\n@@ -657,11 +703,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setByte(int parameterIndex, byte x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setByte(\"+parameterIndex+\", \"+x+\");\");\n+                debugCode(\"setByte(\" + parameterIndex + \", \"\n+                + x + \");\");\n             }\n             setParameter(parameterIndex, ValueByte.get(x));\n         } catch (Exception e) {\n@@ -676,11 +724,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setShort(int parameterIndex, short x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setShort(\"+parameterIndex+\", (short) \"+x+\");\");\n+                debugCode(\"setShort(\" + parameterIndex + \", (short) \"\n+                + x + \");\");\n             }\n             setParameter(parameterIndex, ValueShort.get(x));\n         } catch (Exception e) {\n@@ -695,11 +745,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setLong(int parameterIndex, long x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setLong(\"+parameterIndex+\", \"+x+\"L);\");\n+                debugCode(\"setLong(\" + parameterIndex + \", \"\n+                + x + \"L);\");\n             }\n             setParameter(parameterIndex, ValueLong.get(x));\n         } catch (Exception e) {\n@@ -714,11 +766,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setFloat(int parameterIndex, float x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setFloat(\"+parameterIndex+\", \"+x+\"f);\");\n+                debugCode(\"setFloat(\" + parameterIndex + \", \"\n+                + x + \"f);\");\n             }\n             setParameter(parameterIndex, ValueFloat.get(x));\n         } catch (Exception e) {\n@@ -733,11 +787,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setDouble(int parameterIndex, double x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setDouble(\"+parameterIndex+\", \"+x+\"d);\");\n+                debugCode(\"setDouble(\" + parameterIndex + \", \"\n+                + x + \"d);\");\n             }\n             setParameter(parameterIndex, ValueDouble.get(x));\n         } catch (Exception e) {\n@@ -748,6 +804,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * [Not supported] Sets the value of a column as a reference.\n      */\n+\n     @Override\n     public void setRef(int parameterIndex, Ref x) throws SQLException {\n         throw unsupported(\"ref\");\n@@ -762,17 +819,18 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setDate(int parameterIndex, java.sql.Date x, Calendar calendar) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \", calendar);\");\n+                debugCode(\"setDate(\" + parameterIndex + \", \"\n+                + quoteDate(x) + \", calendar);\");\n             }\n             if (x == null) {\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                setParameter(parameterIndex, LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -788,17 +846,18 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setTime(int parameterIndex, java.sql.Time x, Calendar calendar) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \", calendar);\");\n+                debugCode(\"setTime(\" + parameterIndex + \", \"\n+                + quoteTime(x) + \", calendar);\");\n             }\n             if (x == null) {\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                setParameter(parameterIndex, LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -814,17 +873,18 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar calendar) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \", calendar);\");\n+                debugCode(\"setTimestamp(\" + parameterIndex + \", \"\n+                + quoteTimestamp(x) + \", calendar);\");\n             }\n             if (x == null) {\n                 setParameter(parameterIndex, ValueNull.INSTANCE);\n             } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+                setParameter(parameterIndex, LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n             }\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -836,10 +896,10 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *\n      * @deprecated since JDBC 2.0, use setCharacterStream\n      */\n+\n     @Deprecated\n     @Override\n-    public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {\n         throw unsupported(\"unicodeStream\");\n     }\n \n@@ -851,12 +911,14 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param typeName this parameter is ignored\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setNull(int parameterIndex, int sqlType, String typeName)\n-            throws SQLException {\n+    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\", \"+quote(typeName)+\");\");\n+                debugCode(\"setNull(\" + parameterIndex + \", \"\n+                + sqlType + \", \"\n+                + quote(typeName) + \");\");\n             }\n             setNull(parameterIndex, sqlType);\n         } catch (Exception e) {\n@@ -871,11 +933,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setBlob(int parameterIndex, Blob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -899,11 +962,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setBlob(int parameterIndex, InputStream x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, -1);\n@@ -920,11 +984,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setClob(int parameterIndex, Clob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -948,11 +1013,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setClob(int parameterIndex, Reader x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -974,11 +1040,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setArray(int parameterIndex, Array x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setArray(\"+parameterIndex+\", x);\");\n+                debugCode(\"setArray(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -1000,13 +1067,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setBytes(int parameterIndex, byte[] x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBytes(\" + parameterIndex + \", \" + quoteBytes(x) + \");\");\n+                debugCode(\"setBytes(\" + parameterIndex + \", \"\n+                + quoteBytes(x) + \");\");\n             }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueBytes.get(x));\n+            setParameter(parameterIndex,\n+                x == null ? ValueNull.INSTANCE : ValueBytes.get(x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1022,12 +1092,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBinaryStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setBinaryStream(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, length);\n@@ -1047,9 +1118,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {\n         setBinaryStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1062,9 +1133,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n+    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {\n         setBinaryStream(parameterIndex, x, -1);\n     }\n \n@@ -1078,9 +1149,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n+    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {\n         setAsciiStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1094,12 +1165,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setAsciiStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setAsciiStream(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(IOUtils.getAsciiReader(x), length);\n@@ -1118,9 +1190,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n+    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {\n         setAsciiStream(parameterIndex, x, -1);\n     }\n \n@@ -1134,9 +1206,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setCharacterStream(int parameterIndex, Reader x, int length)\n-            throws SQLException {\n+    public void setCharacterStream(int parameterIndex, Reader x, int length) throws SQLException {\n         setCharacterStream(parameterIndex, x, (long) length);\n     }\n \n@@ -1149,9 +1221,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n+    public void setCharacterStream(int parameterIndex, Reader x) throws SQLException {\n         setCharacterStream(parameterIndex, x, -1);\n     }\n \n@@ -1165,12 +1237,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+    public void setCharacterStream(int parameterIndex, Reader x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setCharacterStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setCharacterStream(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1183,6 +1256,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public void setURL(int parameterIndex, URL x) throws SQLException {\n         throw unsupported(\"url\");\n@@ -1195,6 +1269,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @return the meta data or null if this is not a query\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public ResultSetMetaData getMetaData() throws SQLException {\n         try {\n@@ -1207,11 +1282,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             int id = getNextId(TraceObject.RESULT_SET_META_DATA);\n             if (isDebugEnabled()) {\n                 debugCodeAssign(\"ResultSetMetaData\",\n-                        TraceObject.RESULT_SET_META_DATA, id, \"getMetaData()\");\n+                    TraceObject.RESULT_SET_META_DATA,\n+                        id,\n+                    \"getMetaData()\");\n             }\n             String catalog = conn.getCatalog();\n-            return new JdbcResultSetMetaData(\n-                    null, this, result, catalog, session.getTrace(), id);\n+            return new JdbcResultSetMetaData(null, this, result, catalog, session.getTrace(), id);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1220,6 +1296,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Clears the batch.\n      */\n+\n     @Override\n     public void clearBatch() throws SQLException {\n         try {\n@@ -1236,6 +1313,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * All result sets that where created by this statement\n      * become invalid after calling this method.\n      */\n+\n     @Override\n     public void close() throws SQLException {\n         try {\n@@ -1257,6 +1335,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *\n      * @return the array of update counts\n      */\n+\n     @Override\n     public int[] executeBatch() throws SQLException {\n         try {\n@@ -1273,8 +1352,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             checkClosed();\n             for (int i = 0; i < size; i++) {\n                 Value[] set = batchParameters.get(i);\n-                ArrayList<? extends ParameterInterface> parameters =\n-                        command.getParameters();\n+                ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n                 for (int j = 0; j < set.length; j++) {\n                     Value value = set[j];\n                     ParameterInterface param = parameters.get(j);\n@@ -1311,11 +1389,17 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n             try {\n                 int id = getNextId(TraceObject.RESULT_SET);\n                 if (isDebugEnabled()) {\n-                    debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getGeneratedKeys()\");\n+                    debugCodeAssign(\"ResultSet\",\n+                        TraceObject.RESULT_SET,\n+                            id,\n+                        \"getGeneratedKeys()\");\n                 }\n                 checkClosed();\n-                generatedKeys = new JdbcResultSet(conn, this, null, batchIdentities.getResult(), id, false, true,\n-                        false);\n+                generatedKeys = new JdbcResultSet(conn,\n+                    this,\n+                        null,\n+                            batchIdentities.getResult(),\n+                                id, false, true, false);\n             } catch (Exception e) {\n                 throw logAndConvert(e);\n             }\n@@ -1326,13 +1410,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * Adds the current settings to the batch.\n      */\n+\n     @Override\n     public void addBatch() throws SQLException {\n         try {\n             debugCodeCall(\"addBatch\");\n             checkClosed();\n-            ArrayList<? extends ParameterInterface> parameters =\n-                    command.getParameters();\n+            ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n             int size = parameters.size();\n             Value[] set = new Value[size];\n             for (int i = 0; i < size; i++) {\n@@ -1357,12 +1441,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public int executeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \"\n+                + autoGeneratedKeys + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1377,12 +1462,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public long executeLargeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+    public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \"\n+                + autoGeneratedKeys + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1397,13 +1483,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public int executeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n+    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \"\n+                + quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1418,13 +1504,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public long executeLargeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n+    public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \"\n+                + quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1439,16 +1525,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public int executeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n+    public int executeUpdate(String sql, String[] columnNames) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                debugCode(\"executeUpdate(\" + quote(sql) + \", \"\n+                + quoteArray(columnNames) + \");\");\n             }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1461,16 +1546,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public long executeLargeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n+    public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n+                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \"\n+                + quoteArray(columnNames) + \");\");\n             }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1483,15 +1567,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public boolean execute(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n+    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n+                debugCode(\"execute(\" + quote(sql) + \", \"\n+                + autoGeneratedKeys + \");\");\n             }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1504,11 +1588,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n     public boolean execute(String sql, int[] columnIndexes) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + quoteIntArray(columnIndexes) + \");\");\n+                debugCode(\"execute(\" + quote(sql) + \", \"\n+                + quoteIntArray(columnIndexes) + \");\");\n             }\n             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n@@ -1523,15 +1609,15 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n+\n     @Override\n-    public boolean execute(String sql, String[] columnNames)\n-            throws SQLException {\n+    public boolean execute(String sql, String[] columnNames) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n+                debugCode(\"execute(\" + quote(sql) + \", \"\n+                + quoteArray(columnNames) + \");\");\n             }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1542,17 +1628,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      *\n      * @return the meta data\n      */\n+\n     @Override\n     public ParameterMetaData getParameterMetaData() throws SQLException {\n         try {\n             int id = getNextId(TraceObject.PARAMETER_META_DATA);\n             if (isDebugEnabled()) {\n-                debugCodeAssign(\"ParameterMetaData\",\n-                        TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n+                debugCodeAssign(\"ParameterMetaData\", TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n             }\n             checkClosed();\n-            return new JdbcParameterMetaData(\n-                    session.getTrace(), this, command, id);\n+            return new JdbcParameterMetaData(session.getTrace(), this, command, id);\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1565,8 +1650,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n         parameterIndex--;\n         ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n         if (parameterIndex < 0 || parameterIndex >= parameters.size()) {\n-            throw DbException.getInvalidValueException(\"parameterIndex\",\n-                    parameterIndex + 1);\n+            throw DbException.getInvalidValueException(\"parameterIndex\", parameterIndex + 1);\n         }\n         ParameterInterface param = parameters.get(parameterIndex);\n         // can only delete old temp files if they are not in the batch\n@@ -1576,6 +1660,7 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * [Not supported] Sets the value of a parameter as a row id.\n      */\n+\n     @Override\n     public void setRowId(int parameterIndex, RowId x) throws SQLException {\n         throw unsupported(\"rowId\");\n@@ -1588,13 +1673,16 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setNString(int parameterIndex, String x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNString(\" + parameterIndex + \", \" + quote(x) + \");\");\n+                debugCode(\"setNString(\" + parameterIndex + \", \"\n+                + quote(x) + \");\");\n             }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n+            setParameter(parameterIndex,\n+                x == null ? ValueNull.INSTANCE : ValueString.get(x));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1610,13 +1698,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setNCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+    public void setNCharacterStream(int parameterIndex, Reader x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNCharacterStream(\"+\n-                    parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setNCharacterStream(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1635,9 +1723,9 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setNCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n+    public void setNCharacterStream(int parameterIndex, Reader x) throws SQLException {\n         setNCharacterStream(parameterIndex, x, -1);\n     }\n \n@@ -1648,11 +1736,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setNClob(int parameterIndex, NClob x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -1676,11 +1765,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setNClob(int parameterIndex, Reader x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, -1);\n@@ -1699,12 +1789,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+    public void setClob(int parameterIndex, Reader x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setClob(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1724,12 +1815,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setBlob(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n+    public void setBlob(int parameterIndex, InputStream x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setBlob(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createBlob(x, length);\n@@ -1749,12 +1841,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n-    public void setNClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n+    public void setNClob(int parameterIndex, Reader x, long length) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+                debugCode(\"setNClob(\" + parameterIndex + \", x, \"\n+                + length + \"L);\");\n             }\n             checkClosed();\n             Value v = conn.createClob(x, length);\n@@ -1771,11 +1864,12 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n+\n     @Override\n     public void setSQLXML(int parameterIndex, SQLXML x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setSQLXML(\"+parameterIndex+\", x);\");\n+                debugCode(\"setSQLXML(\" + parameterIndex + \", x);\");\n             }\n             checkClosed();\n             Value v;\n@@ -1793,8 +1887,10 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + command;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 304
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "399",
                    "column": "19",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "19",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "401",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/30/JdbcPreparedStatement.java\nindex e5c98e9708..92f5ff6b35 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/30/JdbcPreparedStatement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/30/JdbcPreparedStatement.java\n@@ -396,116 +396,116 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n     public void setInt(int parameterIndex, int x) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"setInt(\"+parameterIndex+\", \"+x+\");\"); //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n-            }\n-            setParameter(parameterIndex, ValueInt.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+        debugCode ( \"setInt(\" +parameterIndex+\", \"+x +\");\");\n+                //\u4f8b\u5982\u8f93\u51fa: /**/prep0.setInt(1, 50);\n+            } setParameter(parameterIndex, ValueInt.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setString(int parameterIndex, String x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setString(\" + parameterIndex + \", \" + quote(x) + \");\");\n-            }\n-//<<<<<<< HEAD\n-//            //(Value)\u662f\u591a\u4f59\u7684\n-//            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);\n-//            setParameter(parameterIndex, v);\n-//=======\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setString(int parameterIndex, String x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setString(\" + parameterIndex + \", \" + quote(x) + \");\");\n+             }\n+ //<<<<<<< HEAD\n+ //            //(Value)\u662f\u591a\u4f59\u7684\n+ //            Value v = x == null ? (Value) ValueNull.INSTANCE : ValueString.get(x);\n+ //            setParameter(parameterIndex, v);\n+ //=======\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBigDecimal(\" + parameterIndex + \", \" + quoteBigDecimal(x) + \");\");\n-            }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueDecimal.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBigDecimal(\" + parameterIndex + \", \" + quoteBigDecimal(x) + \");\");\n+             }\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueDecimal.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \");\");\n-            }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromDate(conn, null, x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setDate(int parameterIndex, java.sql.Date x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \");\");\n+             }\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromDate(conn, null, x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \");\");\n-            }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTime(conn, null, x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setTime(int parameterIndex, java.sql.Time x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \");\");\n+             }\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTime(conn, null, x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \");\");\n-            }\n-            setParameter(parameterIndex,\n-                    x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setTimestamp(int parameterIndex, java.sql.Timestamp x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \");\");\n+             }\n+             setParameter(parameterIndex,\n+                     x == null ? ValueNull.INSTANCE : LegacyDateTimeUtils.fromTimestamp(conn, null, x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      * Objects of unknown classes are serialized (on the client side).\n      *\n@@ -513,23 +513,23 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setObject(int parameterIndex, Object x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setObject(\" + parameterIndex + \", x);\");\n-            }\n-            if (x == null) {\n-                setParameter(parameterIndex, ValueNull.INSTANCE);\n-            } else {\n-                setParameter(parameterIndex, DataType.convertToValue(session, x, Value.UNKNOWN));\n-            }\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setObject(int parameterIndex, Object x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setObject(\" + parameterIndex + \", x);\");\n+             }\n+             if (x == null) {\n+                 setParameter(parameterIndex, ValueNull.INSTANCE);\n+             } else {\n+                 setParameter(parameterIndex, DataType.convertToValue(session, x, Value.UNKNOWN));\n+             }\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter. The object is converted, if required, to\n      * the specified data type before sending to the database.\n      * Objects of unknown classes are serialized (on the client side).\n@@ -539,20 +539,20 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param targetSqlType the type as defined in java.sql.Types\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setObject(int parameterIndex, Object x, int targetSqlType)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\");\");\n-            }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setObject(int parameterIndex, Object x, int targetSqlType)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\");\");\n+             }\n+             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter. The object is converted, if required, to\n      * the specified data type before sending to the database.\n      * Objects of unknown classes are serialized (on the client side).\n@@ -563,20 +563,20 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param scale is ignored\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setObject(int parameterIndex, Object x, int targetSqlType,\n-            int scale) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\", \"+scale+\");\");\n-            }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setObject(int parameterIndex, Object x, int targetSqlType,\n+             int scale) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setObject(\"+parameterIndex+\", x, \"+targetSqlType+\", \"+scale+\");\");\n+             }\n+             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter. The object is converted, if required, to\n      * the specified data type before sending to the database.\n      * Objects of unknown classes are serialized (on the client side).\n@@ -586,19 +586,19 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param targetSqlType the SQL type\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \");\");\n-            }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setObject(int parameterIndex, Object x, SQLType targetSqlType) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \");\");\n+             }\n+             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter. The object is converted, if required, to\n      * the specified data type before sending to the database.\n      * Objects of unknown classes are serialized (on the client side).\n@@ -609,151 +609,151 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param scaleOrLength is ignored\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \", \"\n-                        + scaleOrLength + \");\");\n-            }\n-            setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    private void setObjectWithType(int parameterIndex, Object x, int type) {\n-        if (x == null) {\n-            setParameter(parameterIndex, ValueNull.INSTANCE);\n-        } else {\n-            Value v = DataType.convertToValue(conn.getSession(), x, type);\n-            setParameter(parameterIndex, v.convertTo(type, conn));\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setObject(int parameterIndex, Object x, SQLType targetSqlType, int scaleOrLength) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setObject(\" + parameterIndex + \", x, \" + DataType.sqlTypeToString(targetSqlType) + \", \"\n+                         + scaleOrLength + \");\");\n+             }\n+             setObjectWithType(parameterIndex, x, DataType.convertSQLTypeToValueType(targetSqlType));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     private void setObjectWithType(int parameterIndex, Object x, int type) {\n+         if (x == null) {\n+             setParameter(parameterIndex, ValueNull.INSTANCE);\n+         } else {\n+             Value v = DataType.convertToValue(conn.getSession(), x, type);\n+             setParameter(parameterIndex, v.convertTo(type, conn));\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBoolean(\"+parameterIndex+\", \"+x+\");\");\n-            }\n-            setParameter(parameterIndex, ValueBoolean.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBoolean(int parameterIndex, boolean x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBoolean(\"+parameterIndex+\", \"+x+\");\");\n+             }\n+             setParameter(parameterIndex, ValueBoolean.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setByte(int parameterIndex, byte x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setByte(\"+parameterIndex+\", \"+x+\");\");\n-            }\n-            setParameter(parameterIndex, ValueByte.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setByte(int parameterIndex, byte x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setByte(\"+parameterIndex+\", \"+x+\");\");\n+             }\n+             setParameter(parameterIndex, ValueByte.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setShort(int parameterIndex, short x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setShort(\"+parameterIndex+\", (short) \"+x+\");\");\n-            }\n-            setParameter(parameterIndex, ValueShort.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setShort(int parameterIndex, short x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setShort(\"+parameterIndex+\", (short) \"+x+\");\");\n+             }\n+             setParameter(parameterIndex, ValueShort.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setLong(int parameterIndex, long x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setLong(\"+parameterIndex+\", \"+x+\"L);\");\n-            }\n-            setParameter(parameterIndex, ValueLong.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setLong(int parameterIndex, long x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setLong(\"+parameterIndex+\", \"+x+\"L);\");\n+             }\n+             setParameter(parameterIndex, ValueLong.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setFloat(int parameterIndex, float x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setFloat(\"+parameterIndex+\", \"+x+\"f);\");\n-            }\n-            setParameter(parameterIndex, ValueFloat.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setFloat(int parameterIndex, float x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setFloat(\"+parameterIndex+\", \"+x+\"f);\");\n+             }\n+             setParameter(parameterIndex, ValueFloat.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setDouble(int parameterIndex, double x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setDouble(\"+parameterIndex+\", \"+x+\"d);\");\n-            }\n-            setParameter(parameterIndex, ValueDouble.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setDouble(int parameterIndex, double x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setDouble(\"+parameterIndex+\", \"+x+\"d);\");\n+             }\n+             setParameter(parameterIndex, ValueDouble.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * [Not supported] Sets the value of a column as a reference.\n      */\n-    @Override\n-    public void setRef(int parameterIndex, Ref x) throws SQLException {\n-        throw unsupported(\"ref\");\n-    }\n+     @Override\n+     public void setRef(int parameterIndex, Ref x) throws SQLException {\n+         throw unsupported(\"ref\");\n+     }\n \n-    /**\n+     /**\n      * Sets the date using a specified time zone. The value will be converted to\n      * the local time zone.\n      *\n@@ -762,24 +762,24 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setDate(int parameterIndex, java.sql.Date x, Calendar calendar) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \", calendar);\");\n-            }\n-            if (x == null) {\n-                setParameter(parameterIndex, ValueNull.INSTANCE);\n-            } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n-            }\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setDate(int parameterIndex, java.sql.Date x, Calendar calendar) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setDate(\" + parameterIndex + \", \" + quoteDate(x) + \", calendar);\");\n+             }\n+             if (x == null) {\n+                 setParameter(parameterIndex, ValueNull.INSTANCE);\n+             } else {\n+                 setParameter(parameterIndex,\n+                         LegacyDateTimeUtils.fromDate(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+             }\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the time using a specified time zone. The value will be converted to\n      * the local time zone.\n      *\n@@ -788,24 +788,24 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setTime(int parameterIndex, java.sql.Time x, Calendar calendar) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \", calendar);\");\n-            }\n-            if (x == null) {\n-                setParameter(parameterIndex, ValueNull.INSTANCE);\n-            } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n-            }\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setTime(int parameterIndex, java.sql.Time x, Calendar calendar) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setTime(\" + parameterIndex + \", \" + quoteTime(x) + \", calendar);\");\n+             }\n+             if (x == null) {\n+                 setParameter(parameterIndex, ValueNull.INSTANCE);\n+             } else {\n+                 setParameter(parameterIndex,\n+                         LegacyDateTimeUtils.fromTime(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+             }\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the timestamp using a specified time zone. The value will be\n      * converted to the local time zone.\n      *\n@@ -814,36 +814,36 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param calendar the calendar\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar calendar) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \", calendar);\");\n-            }\n-            if (x == null) {\n-                setParameter(parameterIndex, ValueNull.INSTANCE);\n-            } else {\n-                setParameter(parameterIndex,\n-                        LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n-            }\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar calendar) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setTimestamp(\" + parameterIndex + \", \" + quoteTimestamp(x) + \", calendar);\");\n+             }\n+             if (x == null) {\n+                 setParameter(parameterIndex, ValueNull.INSTANCE);\n+             } else {\n+                 setParameter(parameterIndex,\n+                         LegacyDateTimeUtils.fromTimestamp(conn, calendar != null ? calendar.getTimeZone() : null, x));\n+             }\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * [Not supported] This feature is deprecated and not supported.\n      *\n      * @deprecated since JDBC 2.0, use setCharacterStream\n      */\n-    @Deprecated\n-    @Override\n-    public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n-        throw unsupported(\"unicodeStream\");\n-    }\n+     @Deprecated\n+     @Override\n+     public void setUnicodeStream(int parameterIndex, InputStream x, int length)\n+             throws SQLException {\n+         throw unsupported(\"unicodeStream\");\n+     }\n \n-    /**\n+     /**\n      * Sets a parameter to null.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n@@ -851,46 +851,46 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param typeName this parameter is ignored\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNull(int parameterIndex, int sqlType, String typeName)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\", \"+quote(typeName)+\");\");\n-            }\n-            setNull(parameterIndex, sqlType);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNull(int parameterIndex, int sqlType, String typeName)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNull(\"+parameterIndex+\", \"+sqlType+\", \"+quote(typeName)+\");\");\n+             }\n+             setNull(parameterIndex, sqlType);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Blob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBlob(int parameterIndex, Blob x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = conn.createBlob(x.getBinaryStream(), -1);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBlob(int parameterIndex, Blob x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = conn.createBlob(x.getBinaryStream(), -1);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Blob.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -899,47 +899,47 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBlob(int parameterIndex, InputStream x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createBlob(x, -1);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBlob(int parameterIndex, InputStream x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBlob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createBlob(x, -1);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Clob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setClob(int parameterIndex, Clob x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = conn.createClob(x.getCharacterStream(), -1);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setClob(int parameterIndex, Clob x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = conn.createClob(x.getCharacterStream(), -1);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Clob.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -948,71 +948,71 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setClob(int parameterIndex, Reader x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = conn.createClob(x, -1);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setClob(int parameterIndex, Reader x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setClob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = conn.createClob(x, -1);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as an Array.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setArray(int parameterIndex, Array x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setArray(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = DataType.convertToValue(session, x.getArray(), Value.ARRAY);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setArray(int parameterIndex, Array x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setArray(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = DataType.convertToValue(session, x.getArray(), Value.ARRAY);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a byte array.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBytes(int parameterIndex, byte[] x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBytes(\" + parameterIndex + \", \" + quoteBytes(x) + \");\");\n-            }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueBytes.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBytes(int parameterIndex, byte[] x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBytes(\" + parameterIndex + \", \" + quoteBytes(x) + \");\");\n+             }\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueBytes.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as an input stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1022,22 +1022,22 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBinaryStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createBlob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBinaryStream(int parameterIndex, InputStream x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBinaryStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createBlob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as an input stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1047,13 +1047,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n-        setBinaryStream(parameterIndex, x, (long) length);\n-    }\n+     @Override\n+     public void setBinaryStream(int parameterIndex, InputStream x, int length)\n+             throws SQLException {\n+         setBinaryStream(parameterIndex, x, (long) length);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as an input stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1062,13 +1062,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBinaryStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n-        setBinaryStream(parameterIndex, x, -1);\n-    }\n+     @Override\n+     public void setBinaryStream(int parameterIndex, InputStream x)\n+             throws SQLException {\n+         setBinaryStream(parameterIndex, x, -1);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as an ASCII stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1078,13 +1078,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x, int length)\n-            throws SQLException {\n-        setAsciiStream(parameterIndex, x, (long) length);\n-    }\n+     @Override\n+     public void setAsciiStream(int parameterIndex, InputStream x, int length)\n+             throws SQLException {\n+         setAsciiStream(parameterIndex, x, (long) length);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as an ASCII stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1094,22 +1094,22 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setAsciiStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(IOUtils.getAsciiReader(x), length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setAsciiStream(int parameterIndex, InputStream x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setAsciiStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(IOUtils.getAsciiReader(x), length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as an ASCII stream.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1118,13 +1118,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setAsciiStream(int parameterIndex, InputStream x)\n-            throws SQLException {\n-        setAsciiStream(parameterIndex, x, -1);\n-    }\n+     @Override\n+     public void setAsciiStream(int parameterIndex, InputStream x)\n+             throws SQLException {\n+         setAsciiStream(parameterIndex, x, -1);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as a character stream.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1134,13 +1134,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setCharacterStream(int parameterIndex, Reader x, int length)\n-            throws SQLException {\n-        setCharacterStream(parameterIndex, x, (long) length);\n-    }\n+     @Override\n+     public void setCharacterStream(int parameterIndex, Reader x, int length)\n+             throws SQLException {\n+         setCharacterStream(parameterIndex, x, (long) length);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as a character stream.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1149,13 +1149,13 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n-        setCharacterStream(parameterIndex, x, -1);\n-    }\n+     @Override\n+     public void setCharacterStream(int parameterIndex, Reader x)\n+             throws SQLException {\n+         setCharacterStream(parameterIndex, x, -1);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as a character stream.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1165,442 +1165,442 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setCharacterStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setCharacterStream(int parameterIndex, Reader x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setCharacterStream(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * [Not supported]\n      */\n-    @Override\n-    public void setURL(int parameterIndex, URL x) throws SQLException {\n-        throw unsupported(\"url\");\n-    }\n+     @Override\n+     public void setURL(int parameterIndex, URL x) throws SQLException {\n+         throw unsupported(\"url\");\n+     }\n \n-    /**\n+     /**\n      * Gets the result set metadata of the query returned when the statement is\n      * executed. If this is not a query, this method returns null.\n      *\n      * @return the meta data or null if this is not a query\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public ResultSetMetaData getMetaData() throws SQLException {\n-        try {\n-            debugCodeCall(\"getMetaData\");\n-            checkClosed();\n-            ResultInterface result = command.getMetaData();\n-            if (result == null) {\n-                return null;\n-            }\n-            int id = getNextId(TraceObject.RESULT_SET_META_DATA);\n-            if (isDebugEnabled()) {\n-                debugCodeAssign(\"ResultSetMetaData\",\n-                        TraceObject.RESULT_SET_META_DATA, id, \"getMetaData()\");\n-            }\n-            String catalog = conn.getCatalog();\n-            return new JdbcResultSetMetaData(\n-                    null, this, result, catalog, session.getTrace(), id);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public ResultSetMetaData getMetaData() throws SQLException {\n+         try {\n+             debugCodeCall(\"getMetaData\");\n+             checkClosed();\n+             ResultInterface result = command.getMetaData();\n+             if (result == null) {\n+                 return null;\n+             }\n+             int id = getNextId(TraceObject.RESULT_SET_META_DATA);\n+             if (isDebugEnabled()) {\n+                 debugCodeAssign(\"ResultSetMetaData\",\n+                         TraceObject.RESULT_SET_META_DATA, id, \"getMetaData()\");\n+             }\n+             String catalog = conn.getCatalog();\n+             return new JdbcResultSetMetaData(\n+                     null, this, result, catalog, session.getTrace(), id);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Clears the batch.\n      */\n-    @Override\n-    public void clearBatch() throws SQLException {\n-        try {\n-            debugCodeCall(\"clearBatch\");\n-            checkClosed();\n-            batchParameters = null;\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void clearBatch() throws SQLException {\n+         try {\n+             debugCodeCall(\"clearBatch\");\n+             checkClosed();\n+             batchParameters = null;\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Closes this statement.\n      * All result sets that where created by this statement\n      * become invalid after calling this method.\n      */\n-    @Override\n-    public void close() throws SQLException {\n-        try {\n-            super.close();\n-            batchParameters = null;\n-            batchIdentities = null;\n-            if (command != null) {\n-                command.close();\n-                command = null;\n-            }\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void close() throws SQLException {\n+         try {\n+             super.close();\n+             batchParameters = null;\n+             batchIdentities = null;\n+             if (command != null) {\n+                 command.close();\n+                 command = null;\n+             }\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Executes the batch.\n      * If one of the batched statements fails, this database will continue.\n      *\n      * @return the array of update counts\n      */\n-    @Override\n-    public int[] executeBatch() throws SQLException {\n-        try {\n-            debugCodeCall(\"executeBatch\");\n-            if (batchParameters == null) {\n-                // Empty batch is allowed, see JDK-4639504 and other issues\n-                batchParameters = Utils.newSmallArrayList();\n-            }\n-            batchIdentities = new MergedResult();\n-            int size = batchParameters.size();\n-            int[] result = new int[size];\n-            SQLException first = null;\n-            SQLException last = null;\n-            checkClosed();\n-            for (int i = 0; i < size; i++) {\n-                Value[] set = batchParameters.get(i);\n-                ArrayList<? extends ParameterInterface> parameters =\n-                        command.getParameters();\n-                for (int j = 0; j < set.length; j++) {\n-                    Value value = set[j];\n-                    ParameterInterface param = parameters.get(j);\n-                    param.setValue(value, false);\n-                }\n-                try {\n-                    result[i] = executeUpdateInternal();\n-                    // Cannot use own implementation, it returns batch identities\n-                    ResultSet rs = super.getGeneratedKeys();\n-                    batchIdentities.add(((JdbcResultSet) rs).result);\n-                } catch (Exception re) {\n-                    SQLException e = logAndConvert(re);\n-                    if (last == null) {\n-                        first = last = e;\n-                    } else {\n-                        last.setNextException(e);\n-                    }\n-                    result[i] = Statement.EXECUTE_FAILED;\n-                }\n-            }\n-            batchParameters = null;\n-            if (first != null) {\n-                throw new JdbcBatchUpdateException(first, result);\n-            }\n-            return result;\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    @Override\n-    public ResultSet getGeneratedKeys() throws SQLException {\n-        if (batchIdentities != null) {\n-            try {\n-                int id = getNextId(TraceObject.RESULT_SET);\n-                if (isDebugEnabled()) {\n-                    debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getGeneratedKeys()\");\n-                }\n-                checkClosed();\n-                generatedKeys = new JdbcResultSet(conn, this, null, batchIdentities.getResult(), id, false, true,\n-                        false);\n-            } catch (Exception e) {\n-                throw logAndConvert(e);\n-            }\n-        }\n-        return super.getGeneratedKeys();\n-    }\n-\n-    /**\n+     @Override\n+     public int[] executeBatch() throws SQLException {\n+         try {\n+             debugCodeCall(\"executeBatch\");\n+             if (batchParameters == null) {\n+                 // Empty batch is allowed, see JDK-4639504 and other issues\n+                 batchParameters = Utils.newSmallArrayList();\n+             }\n+             batchIdentities = new MergedResult();\n+             int size = batchParameters.size();\n+             int[] result = new int[size];\n+             SQLException first = null;\n+             SQLException last = null;\n+             checkClosed();\n+             for (int i = 0; i < size; i++) {\n+                 Value[] set = batchParameters.get(i);\n+                 ArrayList<? extends ParameterInterface> parameters =\n+                         command.getParameters();\n+                 for (int j = 0; j < set.length; j++) {\n+                     Value value = set[j];\n+                     ParameterInterface param = parameters.get(j);\n+                     param.setValue(value, false);\n+                 }\n+                 try {\n+                     result[i] = executeUpdateInternal();\n+                     // Cannot use own implementation, it returns batch identities\n+                     ResultSet rs = super.getGeneratedKeys();\n+                     batchIdentities.add(((JdbcResultSet) rs).result);\n+                 } catch (Exception re) {\n+                     SQLException e = logAndConvert(re);\n+                     if (last == null) {\n+                         first = last = e;\n+                     } else {\n+                         last.setNextException(e);\n+                     }\n+                     result[i] = Statement.EXECUTE_FAILED;\n+                 }\n+             }\n+             batchParameters = null;\n+             if (first != null) {\n+                 throw new JdbcBatchUpdateException(first, result);\n+             }\n+             return result;\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     @Override\n+     public ResultSet getGeneratedKeys() throws SQLException {\n+         if (batchIdentities != null) {\n+             try {\n+                 int id = getNextId(TraceObject.RESULT_SET);\n+                 if (isDebugEnabled()) {\n+                     debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getGeneratedKeys()\");\n+                 }\n+                 checkClosed();\n+                 generatedKeys = new JdbcResultSet(conn, this, null, batchIdentities.getResult(), id, false, true,\n+                         false);\n+             } catch (Exception e) {\n+                 throw logAndConvert(e);\n+             }\n+         }\n+         return super.getGeneratedKeys();\n+     }\n+\n+     /**\n      * Adds the current settings to the batch.\n      */\n-    @Override\n-    public void addBatch() throws SQLException {\n-        try {\n-            debugCodeCall(\"addBatch\");\n-            checkClosed();\n-            ArrayList<? extends ParameterInterface> parameters =\n-                    command.getParameters();\n-            int size = parameters.size();\n-            Value[] set = new Value[size];\n-            for (int i = 0; i < size; i++) {\n-                ParameterInterface param = parameters.get(i);\n-                param.checkSet();\n-                Value value = param.getParamValue();\n-                set[i] = value;\n-            }\n-            if (batchParameters == null) {\n-                batchParameters = Utils.newSmallArrayList();\n-            }\n-            batchParameters.add(set);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void addBatch() throws SQLException {\n+         try {\n+             debugCodeCall(\"addBatch\");\n+             checkClosed();\n+             ArrayList<? extends ParameterInterface> parameters =\n+                     command.getParameters();\n+             int size = parameters.size();\n+             Value[] set = new Value[size];\n+             for (int i = 0; i < size; i++) {\n+                 ParameterInterface param = parameters.get(i);\n+                 param.checkSet();\n+                 Value value = param.getParamValue();\n+                 set[i] = value;\n+             }\n+             if (batchParameters == null) {\n+                 batchParameters = Utils.newSmallArrayList();\n+             }\n+             batchParameters.add(set);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public int executeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n-            }\n-            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public int executeUpdate(String sql, int autoGeneratedKeys)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+             }\n+             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public long executeLargeUpdate(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n-            }\n-            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public long executeLargeUpdate(String sql, int autoGeneratedKeys)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeLargeUpdate(\"+quote(sql)+\", \"+autoGeneratedKeys+\");\");\n+             }\n+             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public int executeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n-            }\n-            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public int executeUpdate(String sql, int[] columnIndexes)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n+                                 quoteIntArray(columnIndexes) + \");\");\n+             }\n+             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public long executeLargeUpdate(String sql, int[] columnIndexes)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteIntArray(columnIndexes) + \");\");\n-            }\n-            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public long executeLargeUpdate(String sql, int[] columnIndexes)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n+                                 quoteIntArray(columnIndexes) + \");\");\n+             }\n+             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public int executeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n-            }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public int executeUpdate(String sql, String[] columnNames)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeUpdate(\" + quote(sql) + \", \" +\n+                                 quoteArray(columnNames) + \");\");\n+             }\n+             throw DbException.get(\n+                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public long executeLargeUpdate(String sql, String[] columnNames)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n-                                quoteArray(columnNames) + \");\");\n-            }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public long executeLargeUpdate(String sql, String[] columnNames)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"executeLargeUpdate(\" + quote(sql) + \", \" +\n+                                 quoteArray(columnNames) + \");\");\n+             }\n+             throw DbException.get(\n+                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param autoGeneratedKeys ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public boolean execute(String sql, int autoGeneratedKeys)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n-            }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public boolean execute(String sql, int autoGeneratedKeys)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"execute(\" + quote(sql) + \", \" + autoGeneratedKeys + \");\");\n+             }\n+             throw DbException.get(\n+                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnIndexes ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public boolean execute(String sql, int[] columnIndexes) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + quoteIntArray(columnIndexes) + \");\");\n-            }\n-            throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public boolean execute(String sql, int[] columnIndexes) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"execute(\" + quote(sql) + \", \" + quoteIntArray(columnIndexes) + \");\");\n+             }\n+             throw DbException.get(ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Calling this method is not legal on a PreparedStatement.\n      *\n      * @param sql ignored\n      * @param columnNames ignored\n      * @throws SQLException Unsupported Feature\n      */\n-    @Override\n-    public boolean execute(String sql, String[] columnNames)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"execute(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n-            }\n-            throw DbException.get(\n-                    ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public boolean execute(String sql, String[] columnNames)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"execute(\" + quote(sql) + \", \" + quoteArray(columnNames) + \");\");\n+             }\n+             throw DbException.get(\n+                     ErrorCode.METHOD_NOT_ALLOWED_FOR_PREPARED_STATEMENT);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Get the parameter meta data of this prepared statement.\n      *\n      * @return the meta data\n      */\n-    @Override\n-    public ParameterMetaData getParameterMetaData() throws SQLException {\n-        try {\n-            int id = getNextId(TraceObject.PARAMETER_META_DATA);\n-            if (isDebugEnabled()) {\n-                debugCodeAssign(\"ParameterMetaData\",\n-                        TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n-            }\n-            checkClosed();\n-            return new JdbcParameterMetaData(\n-                    session.getTrace(), this, command, id);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    // =============================================================\n-\n-    private void setParameter(int parameterIndex, Value value) {\n-        checkClosed();\n-        parameterIndex--;\n-        ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n-        if (parameterIndex < 0 || parameterIndex >= parameters.size()) {\n-            throw DbException.getInvalidValueException(\"parameterIndex\",\n-                    parameterIndex + 1);\n-        }\n-        ParameterInterface param = parameters.get(parameterIndex);\n-        // can only delete old temp files if they are not in the batch\n-        param.setValue(value, batchParameters == null);\n-    }\n-\n-    /**\n+     @Override\n+     public ParameterMetaData getParameterMetaData() throws SQLException {\n+         try {\n+             int id = getNextId(TraceObject.PARAMETER_META_DATA);\n+             if (isDebugEnabled()) {\n+                 debugCodeAssign(\"ParameterMetaData\",\n+                         TraceObject.PARAMETER_META_DATA, id, \"getParameterMetaData()\");\n+             }\n+             checkClosed();\n+             return new JdbcParameterMetaData(\n+                     session.getTrace(), this, command, id);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     // =============================================================\n+\n+     private void setParameter(int parameterIndex, Value value) {\n+         checkClosed();\n+         parameterIndex--;\n+         ArrayList<? extends ParameterInterface> parameters = command.getParameters();\n+         if (parameterIndex < 0 || parameterIndex >= parameters.size()) {\n+             throw DbException.getInvalidValueException(\"parameterIndex\",\n+                     parameterIndex + 1);\n+         }\n+         ParameterInterface param = parameters.get(parameterIndex);\n+         // can only delete old temp files if they are not in the batch\n+         param.setValue(value, batchParameters == null);\n+     }\n+\n+     /**\n      * [Not supported] Sets the value of a parameter as a row id.\n      */\n-    @Override\n-    public void setRowId(int parameterIndex, RowId x) throws SQLException {\n-        throw unsupported(\"rowId\");\n-    }\n+     @Override\n+     public void setRowId(int parameterIndex, RowId x) throws SQLException {\n+         throw unsupported(\"rowId\");\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNString(int parameterIndex, String x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNString(\" + parameterIndex + \", \" + quote(x) + \");\");\n-            }\n-            setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNString(int parameterIndex, String x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNString(\" + parameterIndex + \", \" + quote(x) + \");\");\n+             }\n+             setParameter(parameterIndex, x == null ? ValueNull.INSTANCE : ValueString.get(x));\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a character stream.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1610,23 +1610,23 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNCharacterStream(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNCharacterStream(\"+\n-                    parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNCharacterStream(int parameterIndex, Reader x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNCharacterStream(\"+\n+                     parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a character stream.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1635,39 +1635,39 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNCharacterStream(int parameterIndex, Reader x)\n-            throws SQLException {\n-        setNCharacterStream(parameterIndex, x, -1);\n-    }\n+     @Override\n+     public void setNCharacterStream(int parameterIndex, Reader x)\n+             throws SQLException {\n+         setNCharacterStream(parameterIndex, x, -1);\n+     }\n \n-    /**\n+     /**\n      * Sets the value of a parameter as a Clob.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNClob(int parameterIndex, NClob x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = conn.createClob(x.getCharacterStream(), -1);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNClob(int parameterIndex, NClob x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = conn.createClob(x.getCharacterStream(), -1);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Clob.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1676,21 +1676,21 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNClob(int parameterIndex, Reader x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(x, -1);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNClob(int parameterIndex, Reader x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNClob(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(x, -1);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Clob. This method does not close the\n      * reader. The reader may be closed after executing the statement.\n      *\n@@ -1699,22 +1699,22 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setClob(int parameterIndex, Reader x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Blob.\n      * This method does not close the stream.\n      * The stream may be closed after executing the statement.\n@@ -1724,22 +1724,22 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of bytes\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setBlob(int parameterIndex, InputStream x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setBlob(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createBlob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setBlob(int parameterIndex, InputStream x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setBlob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createBlob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a Clob.\n      * This method does not close the reader.\n      * The reader may be closed after executing the statement.\n@@ -1749,52 +1749,53 @@ public class JdbcPreparedStatement extends JdbcStatement implements\n      * @param length the maximum number of characters\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setNClob(int parameterIndex, Reader x, long length)\n-            throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setNClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n-            }\n-            checkClosed();\n-            Value v = conn.createClob(x, length);\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setNClob(int parameterIndex, Reader x, long length)\n+             throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setNClob(\"+parameterIndex+\", x, \"+length+\"L);\");\n+             }\n+             checkClosed();\n+             Value v = conn.createClob(x, length);\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * Sets the value of a parameter as a SQLXML.\n      *\n      * @param parameterIndex the parameter index (1, 2, ...)\n      * @param x the value\n      * @throws SQLException if this object is closed\n      */\n-    @Override\n-    public void setSQLXML(int parameterIndex, SQLXML x) throws SQLException {\n-        try {\n-            if (isDebugEnabled()) {\n-                debugCode(\"setSQLXML(\"+parameterIndex+\", x);\");\n-            }\n-            checkClosed();\n-            Value v;\n-            if (x == null) {\n-                v = ValueNull.INSTANCE;\n-            } else {\n-                v = conn.createClob(x.getCharacterStream(), -1);\n-            }\n-            setParameter(parameterIndex, v);\n-        } catch (Exception e) {\n-            throw logAndConvert(e);\n-        }\n-    }\n-\n-    /**\n+     @Override\n+     public void setSQLXML(int parameterIndex, SQLXML x) throws SQLException {\n+         try {\n+             if (isDebugEnabled()) {\n+                 debugCode(\"setSQLXML(\"+parameterIndex+\", x);\");\n+             }\n+             checkClosed();\n+             Value v;\n+             if (x == null) {\n+                 v = ValueNull.INSTANCE;\n+             } else {\n+                 v = conn.createClob(x.getCharacterStream(), -1);\n+             }\n+             setParameter(parameterIndex, v);\n+         } catch (Exception e) {\n+             throw logAndConvert(e);\n+         }\n+     }\n+\n+     /**\n      * INTERNAL\n      */\n-    @Override\n-    public String toString() {\n-        return getTraceObjectName() + \": \" + command;\n-    }\n-}\n+     @Override\n+     public String toString() {\n+         return getTraceObjectName() + \": \" + command;\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 974
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "399",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}