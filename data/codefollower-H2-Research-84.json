{
    "error_id": "84",
    "information": {
        "errors": [
            {
                "line": "52",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "/*\n         \u6709\u4e09\u79cd\u4ea7\u751fTableView\u7684\u65b9\u5f0f:\n\t1. CREATE VIEW\u8bed\u53e5\n\n\t\u5982: CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view COMMENT IS 'my view'(f1,f2) \n\t\t\tAS SELECT id,name FROM CreateViewTest",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "54",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/84/TableView.java\nindex 4d9c7ef9ad..3e1700ba27 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/84/TableView.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.table;\n \n import java.util.ArrayList;\n@@ -44,6 +45,7 @@ import org.h2.value.Value;\n \n /**\n  * A view is a virtual table that is defined by a query.\n+ *\n  * @author Thomas Mueller\n  * @author Nicolas Fortin, Atelier SIG, IRSTV FR CNRS 24888\n  */\n@@ -91,8 +93,8 @@ public class TableView extends Table {\n     private boolean isTableExpression;\n \n     public TableView(Schema schema, int id, String name, String querySQL,\n-            ArrayList<Parameter> params, Column[] columnTemplates, Session session,\n-            boolean allowRecursive, boolean literalsChecked, boolean isTableExpression, boolean isTemporary) {\n+                     ArrayList<Parameter> params, Column[] columnTemplates, Session session,\n+                     boolean allowRecursive, boolean literalsChecked, boolean isTableExpression, boolean isTemporary) {\n         super(schema, id, name, false, true);\n         setTemporary(isTemporary);\n         init(querySQL, params, columnTemplates, session, allowRecursive, literalsChecked, isTableExpression);\n@@ -102,15 +104,15 @@ public class TableView extends Table {\n      * Try to replace the SQL statement of the view and re-compile this and all\n      * dependent views.\n      *\n-     * @param querySQL the SQL statement\n+     * @param querySQL           the SQL statement\n      * @param newColumnTemplates the columns\n-     * @param session the session\n-     * @param recursive whether this is a recursive view\n-     * @param force if errors should be ignored\n-     * @param literalsChecked if literals have been checked\n+     * @param session            the session\n+     * @param recursive          whether this is a recursive view\n+     * @param force              if errors should be ignored\n+     * @param literalsChecked    if literals have been checked\n      */\n-    public void replace(String querySQL,  Column[] newColumnTemplates, Session session,\n-            boolean recursive, boolean force, boolean literalsChecked) {\n+    public void replace(String querySQL, Column[] newColumnTemplates, Session session,\n+                        boolean recursive, boolean force, boolean literalsChecked) {\n         String oldQuerySQL = this.querySQL;\n         Column[] oldColumnTemplates = this.columnTemplates;\n //<<<<<<< HEAD\n@@ -126,21 +128,22 @@ public class TableView extends Table {\n //=======\n         boolean oldRecursive = this.allowRecursive;\n         init(querySQL, null,\n-                newColumnTemplates == null ? this.columnTemplates\n-                        : newColumnTemplates,\n-                session, recursive, literalsChecked, isTableExpression);\n+            newColumnTemplates == null ? this.columnTemplates\n+                : newColumnTemplates,\n+            session, recursive, literalsChecked, isTableExpression);\n         DbException e = recompile(session, force, true);\n         if (e != null) {\n             init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive,\n-                    literalsChecked, isTableExpression);\n+                literalsChecked, isTableExpression);\n             recompile(session, true, false);\n             throw e;\n         }\n     }\n \n     private synchronized void init(String querySQL, ArrayList<Parameter> params,\n-            Column[] columnTemplates, Session session, boolean allowRecursive, boolean literalsChecked,\n-            boolean isTableExpression) {\n+                                   Column[] columnTemplates, Session session, boolean allowRecursive,\n+                                   boolean literalsChecked,\n+                                   boolean isTableExpression) {\n         this.querySQL = querySQL;\n         this.columnTemplates = columnTemplates;\n         this.allowRecursive = allowRecursive;\n@@ -172,14 +175,14 @@ public class TableView extends Table {\n     /**\n      * Re-compile the view query and all views that depend on this object.\n      *\n-     * @param session the session\n-     * @param force if exceptions should be ignored\n+     * @param session         the session\n+     * @param force           if exceptions should be ignored\n      * @param clearIndexCache if we need to clear view index cache\n      * @return the exception if re-compiling this or any dependent view failed\n-     *         (only when force is disabled)\n+     * (only when force is disabled)\n      */\n     public synchronized DbException recompile(Session session, boolean force,\n-            boolean clearIndexCache) {\n+                                              boolean clearIndexCache) {\n         try {\n             compileViewQuery(session, querySQL, false, getName());\n         } catch (DbException e) {\n@@ -297,7 +300,7 @@ public class TableView extends Table {\n                 }\n                 if (fromColumn != null) {\n                     Expression checkExpression = fromColumn.getColumn()\n-                            .getCheckConstraint(session, name);\n+                        .getCheckConstraint(session, name);\n                     if (checkExpression != null) {\n                         col.addCheckConstraint(session, checkExpression);\n                     }\n@@ -351,8 +354,8 @@ public class TableView extends Table {\n \n     @Override\n     public PlanItem getBestPlanItem(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+                                    TableFilter[] filters, int filter, SortOrder sortOrder,\n+                                    AllColumnsForPlan allColumnsSet) {\n         final CacheKey cacheKey = new CacheKey(masks, this);\n         Map<Object, ViewIndex> indexCache = session.getViewIndexCache(topQuery != null);\n         ViewIndex i = indexCache.get(cacheKey);\n@@ -377,7 +380,7 @@ public class TableView extends Table {\n             }\n         }\n         if (topQuery != null &&\n-                !topQuery.isEverything(ExpressionVisitor.QUERY_COMPARABLE_VISITOR)) {\n+            !topQuery.isEverything(ExpressionVisitor.QUERY_COMPARABLE_VISITOR)) {\n             return false;\n         }\n         return true;\n@@ -407,7 +410,7 @@ public class TableView extends Table {\n      * Generate \"CREATE\" SQL statement for the view.\n      *\n      * @param orReplace if true, then include the OR REPLACE clause\n-     * @param force if true, then include the FORCE clause\n+     * @param force     if true, then include the FORCE clause\n      * @return the SQL statement\n      */\n     public String getCreateSQL(boolean orReplace, boolean force) {\n@@ -415,7 +418,7 @@ public class TableView extends Table {\n     }\n \n     private String getCreateSQL(boolean orReplace, boolean force,\n-            String quotedName) {\n+                                String quotedName) {\n         StatementBuilder buff = new StatementBuilder(\"CREATE \");\n         if (orReplace) {\n             buff.append(\"OR REPLACE \");\n@@ -477,8 +480,8 @@ public class TableView extends Table {\n \n     @Override\n     public Index addIndex(Session session, String indexName, int indexId,\n-            IndexColumn[] cols, IndexType indexType, boolean create,\n-            String indexComment) {\n+                          IndexColumn[] cols, IndexType indexType, boolean create,\n+                          String indexComment) {\n         throw DbException.getUnsupportedException(\"VIEW\");\n     }\n \n@@ -564,12 +567,12 @@ public class TableView extends Table {\n \n     @Override\n     public Index getScanIndex(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+                              TableFilter[] filters, int filter, SortOrder sortOrder,\n+                              AllColumnsForPlan allColumnsSet) {\n         if (createException != null) {\n             String msg = createException.getMessage();\n             throw DbException.get(ErrorCode.VIEW_IS_INVALID_2,\n-                    createException, getSQL(), msg);\n+                createException, getSQL(), msg);\n         }\n         PlanItem item = getBestPlanItem(session, masks, filters, filter, sortOrder, allColumnsSet);\n         return item.getIndex();\n@@ -635,21 +638,21 @@ public class TableView extends Table {\n     /**\n      * Create a temporary view out of the given query.\n      *\n-     * @param session the session\n-     * @param owner the owner of the query\n-     * @param name the view name\n-     * @param query the query\n+     * @param session  the session\n+     * @param owner    the owner of the query\n+     * @param name     the view name\n+     * @param query    the query\n      * @param topQuery the top level query\n      * @return the view table\n      */\n     public static TableView createTempView(Session session, User owner,\n-            String name, Query query, Query topQuery) {\n+                                           String name, Query query, Query topQuery) {\n         Schema mainSchema = session.getDatabase().getSchema(Constants.SCHEMA_MAIN);\n         String querySQL = query.getPlanSQL();\n         TableView v = new TableView(mainSchema, 0, name,\n-                querySQL, query.getParameters(), null /* column templates */, session,\n-                false/* allow recursive */, true /* literals have already been checked when parsing original query */,\n-                false /* is table expression */, true/*temporary*/);\n+            querySQL, query.getParameters(), null /* column templates */, session,\n+            false/* allow recursive */, true /* literals have already been checked when parsing original query */,\n+            false /* is table expression */, true/*temporary*/);\n         if (v.createException != null) {\n             throw v.createException;\n         }\n@@ -800,31 +803,33 @@ public class TableView extends Table {\n     /**\n      * Create a view.\n      *\n-     * @param schema the schema\n-     * @param id the view id\n-     * @param name the view name\n-     * @param querySQL the query\n-     * @param parameters the parameters\n-     * @param columnTemplates the columns\n-     * @param session the session\n-     * @param literalsChecked whether literals in the query are checked\n+     * @param schema            the schema\n+     * @param id                the view id\n+     * @param name              the view name\n+     * @param querySQL          the query\n+     * @param parameters        the parameters\n+     * @param columnTemplates   the columns\n+     * @param session           the session\n+     * @param literalsChecked   whether literals in the query are checked\n      * @param isTableExpression if this is a table expression\n-     * @param isTemporary whether the view is persisted\n-     * @param db the database\n+     * @param isTemporary       whether the view is persisted\n+     * @param db                the database\n      * @return the view\n      */\n     public static TableView createTableViewMaybeRecursive(Schema schema, int id, String name, String querySQL,\n-            ArrayList<Parameter> parameters, Column[] columnTemplates, Session session,\n-            boolean literalsChecked, boolean isTableExpression, boolean isTemporary, Database db) {\n+                                                          ArrayList<Parameter> parameters, Column[] columnTemplates,\n+                                                          Session session,\n+                                                          boolean literalsChecked, boolean isTableExpression,\n+                                                          boolean isTemporary, Database db) {\n \n \n         Table recursiveTable = createShadowTableForRecursiveTableExpression(isTemporary, session, name,\n-                schema, Arrays.asList(columnTemplates), db);\n+            schema, Arrays.asList(columnTemplates), db);\n \n         List<Column> columnTemplateList;\n         String[] querySQLOutput = {null};\n         ArrayList<String> columnNames = new ArrayList<>();\n-        for (Column columnTemplate: columnTemplates) {\n+        for (Column columnTemplate : columnTemplates) {\n             columnNames.add(columnTemplate.getName());\n         }\n \n@@ -834,7 +839,7 @@ public class TableView extends Table {\n                 withQuery.setSession(session);\n             }\n             columnTemplateList = TableView.createQueryColumnTemplateList(columnNames.toArray(new String[1]),\n-                    (Query) withQuery, querySQLOutput);\n+                (Query) withQuery, querySQLOutput);\n \n         } finally {\n             destroyShadowTableForRecursiveExpression(isTemporary, session, recursiveTable);\n@@ -842,8 +847,8 @@ public class TableView extends Table {\n \n         // build with recursion turned on\n         TableView view = new TableView(schema, id, name, querySQL,\n-                parameters, columnTemplateList.toArray(columnTemplates), session,\n-                true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n+            parameters, columnTemplateList.toArray(columnTemplates), session,\n+            true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n \n         // is recursion really detected ? if not - recreate it without recursion flag\n         // and no recursive index\n@@ -861,8 +866,8 @@ public class TableView extends Table {\n                 session.removeLocalTempTable(view);\n             }\n             view = new TableView(schema, id, name, querySQL, parameters,\n-                    columnTemplates, session,\n-                    false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n+                columnTemplates, session,\n+                false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n         }\n \n         return view;\n@@ -873,16 +878,16 @@ public class TableView extends Table {\n      * Creates a list of column templates from a query (usually from WITH query,\n      * but could be any query)\n      *\n-     * @param cols - an optional list of column names (can be specified by WITH\n-     *            clause overriding usual select names)\n-     * @param theQuery - the query object we want the column list for\n+     * @param cols           - an optional list of column names (can be specified by WITH\n+     *                       clause overriding usual select names)\n+     * @param theQuery       - the query object we want the column list for\n      * @param querySQLOutput - array of length 1 to receive extra 'output' field\n-     *            in addition to return value - containing the SQL query of the\n-     *            Query object\n+     *                       in addition to return value - containing the SQL query of the\n+     *                       Query object\n      * @return a list of column object returned by withQuery\n      */\n     public static List<Column> createQueryColumnTemplateList(String[] cols,\n-            Query theQuery, String[] querySQLOutput) {\n+                                                             Query theQuery, String[] querySQLOutput) {\n         List<Column> columnTemplateList = new ArrayList<>();\n         theQuery.prepare();\n         // String array of length 1 is to receive extra 'output' field in addition to\n@@ -897,7 +902,7 @@ public class TableView extends Table {\n             // expression\n             String columnName = columnNamer.getColumnName(columnExp, i, cols);\n             columnTemplateList.add(new Column(columnName,\n-                    columnExp.getType()));\n+                columnExp.getType()));\n \n         }\n         return columnTemplateList;\n@@ -906,16 +911,17 @@ public class TableView extends Table {\n     /**\n      * Create a table for a recursive query.\n      *\n-     * @param isTemporary whether the table is persisted\n+     * @param isTemporary   whether the table is persisted\n      * @param targetSession the session\n-     * @param cteViewName the name\n-     * @param schema the schema\n-     * @param columns the columns\n-     * @param db the database\n+     * @param cteViewName   the name\n+     * @param schema        the schema\n+     * @param columns       the columns\n+     * @param db            the database\n      * @return the table\n      */\n     public static Table createShadowTableForRecursiveTableExpression(boolean isTemporary, Session targetSession,\n-            String cteViewName, Schema schema, List<Column> columns, Database db) {\n+                                                                     String cteViewName, Schema schema,\n+                                                                     List<Column> columns, Database db) {\n \n         // create table data object\n         CreateTableData recursiveTableData = new CreateTableData();\n@@ -946,12 +952,12 @@ public class TableView extends Table {\n     /**\n      * Remove a table for a recursive query.\n      *\n-     * @param isTemporary whether the table is persisted\n-     * @param targetSession the session\n+     * @param isTemporary    whether the table is persisted\n+     * @param targetSession  the session\n      * @param recursiveTable the table\n      */\n     public static void destroyShadowTableForRecursiveExpression(boolean isTemporary, Session targetSession,\n-            Table recursiveTable) {\n+                                                                Table recursiveTable) {\n         if (recursiveTable != null) {\n             if (!isTemporary) {\n                 recursiveTable.lock(targetSession, true, true);\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/84/TableView.java\nindex 4d9c7ef9ad..5bf283c42f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/84/TableView.java\n@@ -109,26 +109,16 @@ public class TableView extends Table {\n      * @param force if errors should be ignored\n      * @param literalsChecked if literals have been checked\n      */\n-    public void replace(String querySQL,  Column[] newColumnTemplates, Session session,\n+    public void replace(String querySQL, Column[] newColumnTemplates, Session session,\n             boolean recursive, boolean force, boolean literalsChecked) {\n         String oldQuerySQL = this.querySQL;\n         Column[] oldColumnTemplates = this.columnTemplates;\n //<<<<<<< HEAD\n-//        boolean oldRecursive = this.recursive;\n-//        // init\u91cc\u6267\u884c\u4e86\u4e00\u6b21initColumnsAndTables\uff0c\u867d\u7136\u6267\u884c\u4e86\u4e24\u6b21initColumnsAndTables\uff0c\u4f46\u662finit\u4e2d\u8fd8\u5efa\u7acb\u4e86ViewIndex\n-//        // \u6240\u4ee5\u8fd9\u91cc\u662f\u5fc5\u987b\u8c03\u7528init\u7684\n-//        init(querySQL, null, columnTemplates, session, recursive);\n-//        // recompile\u91cc\u53c8\u6267\u884c\u4e86\u4e00\u6b21initColumnsAndTables\n-//        DbException e = recompile(session, force, true);\n-//        if (e != null) {\n-//            // \u5982\u679c\u5931\u8d25\u4e86\uff0c\u6309\u539f\u6765\u7684\u91cd\u65b0\u6765\u8fc7\n-//            init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive);\n-//=======\n-        boolean oldRecursive = this.allowRecursive;\n+//    \n+boolean oldRecursive = this.allowRecursive;\n         init(querySQL, null,\n                 newColumnTemplates == null ? this.columnTemplates\n-                        : newColumnTemplates,\n-                session, recursive, literalsChecked, isTableExpression);\n+                        : newColumnTemplates, session, recursive, literalsChecked, isTableExpression);\n         DbException e = recompile(session, force, true);\n         if (e != null) {\n             init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive,\n@@ -226,31 +216,9 @@ public class TableView extends Table {\n         removeCurrentViewFromOtherTables();\n         setTableExpression(isTableExpression);\n         try {\n-//<<<<<<< HEAD\n-//            Query query = compileViewQuery(session, querySQL); //\u91cd\u65b0\u5bf9select\u8bed\u53e5\u8fdb\u884c\u89e3\u6790\u548cprepare\n-//            this.querySQL = query.getPlanSQL();\n-//            tables = New.arrayList(query.getTables());\n-//            ArrayList<Expression> expressions = query.getExpressions();\n-//            ArrayList<Column> list = New.arrayList();\n-//            \n-//    \t\t//select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u591a\u7684\u60c5\u51b5\uff0c\u591a\u51fa\u6765\u7684\u6309select\u5b57\u6bb5\u539f\u6765\u7684\u7b97\n-//    \t\t//\u8fd9\u91cc\u5b9e\u9645\u662ff1\u3001name\n-//    \t\t//sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1) \" //\n-//    \t\t//\t\t+ \"AS SELECT id,name FROM CreateViewTest\";\n-//\n-//    \t\t//select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u5c11\u7684\u60c5\u51b5\uff0cview\u4e2d\u5c11\u7684\u5b57\u6bb5\u88ab\u5ffd\u7565\n-//    \t\t//\u8fd9\u91cc\u5b9e\u9645\u662ff1\uff0c\u800cf2\u88ab\u5ffd\u7565\u4e86\uff0c\u4e5f\u4e0d\u63d0\u793a\u9519\u8bef\n-//    \t\t//sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n-//    \t\t//\t\t+ \"AS SELECT id FROM CreateViewTest\";\n-//\n-//    \t\t//\u4e0d\u7ba1\u52a0\u4e0d\u52a0FORCE\uff0c\u8ddf\u4e0a\u9762\u4e5f\u4e00\u6837\n-//    \t\t//sql = \"CREATE OR REPLACE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n-//    \t\t//\t\t+ \"AS SELECT id FROM CreateViewTest\";\n-//            \n-//            //expressions.size\u6709\u53ef\u80fd\u5927\u4e8equery.getColumnCount()\uff0c\u56e0\u4e3aquery.getColumnCount()\u4e0d\u5305\u542bgroup by\u7b49\u989d\u5916\u52a0\u8fdb\u6765\u7684\u8868\u8fbe\u5f0f\n-//            for (int i = 0, count = query.getColumnCount(); i < count; i++) {\n-//=======\n-            Query compiledQuery = compileViewQuery(session, querySQL, literalsChecked, getName());\n+    //<<<<<<< HEAD\n+//            Query query = comp\n+Query compiledQuery = compileViewQuery(session, querySQL, literalsChecked, getName());\n             this.querySQL = compiledQuery.getPlanSQL();\n             tables = new ArrayList<>(compiledQuery.getTables());\n             ArrayList<Expression> expressions = compiledQuery.getExpressions();\n@@ -648,8 +616,7 @@ public class TableView extends Table {\n         String querySQL = query.getPlanSQL();\n         TableView v = new TableView(mainSchema, 0, name,\n                 querySQL, query.getParameters(), null /* column templates */, session,\n-                false/* allow recursive */, true /* literals have already been checked when parsing original query */,\n-                false /* is table expression */, true/*temporary*/);\n+        false/* allow recursive */, true/* literals have already been checked when parsing original query */, false/* is table expression */, true/*temporary*/);\n         if (v.createException != null) {\n             throw v.createException;\n         }\n@@ -816,15 +783,13 @@ public class TableView extends Table {\n     public static TableView createTableViewMaybeRecursive(Schema schema, int id, String name, String querySQL,\n             ArrayList<Parameter> parameters, Column[] columnTemplates, Session session,\n             boolean literalsChecked, boolean isTableExpression, boolean isTemporary, Database db) {\n-\n-\n-        Table recursiveTable = createShadowTableForRecursiveTableExpression(isTemporary, session, name,\n+    Table recursiveTable = createShadowTableForRecursiveTableExpression(isTemporary, session, name,\n                 schema, Arrays.asList(columnTemplates), db);\n \n         List<Column> columnTemplateList;\n         String[] querySQLOutput = {null};\n         ArrayList<String> columnNames = new ArrayList<>();\n-        for (Column columnTemplate: columnTemplates) {\n+        for (Column columnTemplate : columnTemplates) {\n             columnNames.add(columnTemplate.getName());\n         }\n \n@@ -835,15 +800,14 @@ public class TableView extends Table {\n             }\n             columnTemplateList = TableView.createQueryColumnTemplateList(columnNames.toArray(new String[1]),\n                     (Query) withQuery, querySQLOutput);\n-\n-        } finally {\n+    } finally {\n             destroyShadowTableForRecursiveExpression(isTemporary, session, recursiveTable);\n         }\n \n         // build with recursion turned on\n         TableView view = new TableView(schema, id, name, querySQL,\n                 parameters, columnTemplateList.toArray(columnTemplates), session,\n-                true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n+        true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n \n         // is recursion really detected ? if not - recreate it without recursion flag\n         // and no recursive index\n@@ -862,10 +826,9 @@ public class TableView extends Table {\n             }\n             view = new TableView(schema, id, name, querySQL, parameters,\n                     columnTemplates, session,\n-                    false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n+        false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n         }\n-\n-        return view;\n+return view;\n     }\n \n \n@@ -898,8 +861,7 @@ public class TableView extends Table {\n             String columnName = columnNamer.getColumnName(columnExp, i, cols);\n             columnTemplateList.add(new Column(columnName,\n                     columnExp.getType()));\n-\n-        }\n+    }\n         return columnTemplateList;\n     }\n \n@@ -956,8 +918,7 @@ public class TableView extends Table {\n             if (!isTemporary) {\n                 recursiveTable.lock(targetSession, true, true);\n                 targetSession.getDatabase().removeSchemaObject(targetSession, recursiveTable);\n-\n-            } else {\n+    } else {\n                 targetSession.removeLocalTempTable(recursiveTable);\n             }\n \n@@ -965,4 +926,4 @@ public class TableView extends Table {\n             targetSession.getDatabase().unlockMeta(targetSession);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/84/TableView.java\nindex 4d9c7ef9ad..7477a809b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/84/TableView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/84/TableView.java\n@@ -10,7 +10,6 @@ import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n-\n import org.h2.api.ErrorCode;\n import org.h2.command.Prepared;\n import org.h2.command.ddl.CreateTableData;\n@@ -49,32 +48,33 @@ import org.h2.value.Value;\n  */\n /*\n          \u6709\u4e09\u79cd\u4ea7\u751fTableView\u7684\u65b9\u5f0f:\n-\t1. CREATE VIEW\u8bed\u53e5\n+    1. CREATE VIEW\u8bed\u53e5\n \n-\t\u5982: CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view COMMENT IS 'my view'(f1,f2) \n-\t\t\tAS SELECT id,name FROM CreateViewTest\n+    \u5982: CREATE OR REPLACE FORCE VIEW IF NOT EXISTS my_view COMMENT IS 'my view'(f1,f2) \n+            AS SELECT id,name FROM CreateViewTest\n \n \n-\t2. \u5d4c\u5165\u5728FROM\u4e2d\u7684\u4e34\u65f6\u89c6\u56fe\n+    2. \u5d4c\u5165\u5728FROM\u4e2d\u7684\u4e34\u65f6\u89c6\u56fe\n \n-\t\u5982: select id,name from (select id,name from CreateViewTest)\n+    \u5982: select id,name from (select id,name from CreateViewTest)\n \n \n-\t3. WITH RECURSIVE\u8bed\u53e5\n+    3. WITH RECURSIVE\u8bed\u53e5\n \n-\t\u5982: WITH RECURSIVE my_tmp_table(f1,f2) \n-\t\t\tAS (select id,name from CreateViewTest UNION ALL select 1, 2) \n-\t\t\t\tselect f1, f2 from my_tmp_table\n-\tRECURSIVE\u8fd9\u4e2a\u5173\u952e\u5b57\u662f\u53ef\u9009\u7684\n+    \u5982: WITH RECURSIVE my_tmp_table(f1,f2) \n+            AS (select id,name from CreateViewTest UNION ALL select 1, 2) \n+                select f1, f2 from my_tmp_table\n+    RECURSIVE\u8fd9\u4e2a\u5173\u952e\u5b57\u662f\u53ef\u9009\u7684\n \n \n-\t\u53ea\u67092\u53ef\u4ee5\u5e26Parameters\uff0c\u5b83\u662f\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u8c03\u7528: org.h2.table.TableView.createTempView(Session, User, String, Query, Query)\n-\t\u53ea\u67093\u7684recursive\u662ftrue \n+    \u53ea\u67092\u53ef\u4ee5\u5e26Parameters\uff0c\u5b83\u662f\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u8c03\u7528: org.h2.table.TableView.createTempView(Session, User, String, Query, Query)\n+    \u53ea\u67093\u7684recursive\u662ftrue \n  */\n+\n+\n public class TableView extends Table {\n \n     private static final long ROW_COUNT_APPROXIMATION = 100;\n-\n     private String querySQL;\n     private ArrayList<Table> tables;\n     private Column[] columnTemplates;\n@@ -90,9 +90,7 @@ public class TableView extends Table {\n     private boolean isRecursiveQueryDetected;\n     private boolean isTableExpression;\n \n-    public TableView(Schema schema, int id, String name, String querySQL,\n-            ArrayList<Parameter> params, Column[] columnTemplates, Session session,\n-            boolean allowRecursive, boolean literalsChecked, boolean isTableExpression, boolean isTemporary) {\n+    public TableView(Schema schema, int id, String name, String querySQL, ArrayList<Parameter> params, Column[] columnTemplates, Session session, boolean allowRecursive, boolean literalsChecked, boolean isTableExpression, boolean isTemporary) {\n         super(schema, id, name, false, true);\n         setTemporary(isTemporary);\n         init(querySQL, params, columnTemplates, session, allowRecursive, literalsChecked, isTableExpression);\n@@ -109,8 +107,9 @@ public class TableView extends Table {\n      * @param force if errors should be ignored\n      * @param literalsChecked if literals have been checked\n      */\n-    public void replace(String querySQL,  Column[] newColumnTemplates, Session session,\n-            boolean recursive, boolean force, boolean literalsChecked) {\n+\n+\n+    public void replace(String querySQL, Column[] newColumnTemplates, Session session, boolean recursive, boolean force, boolean literalsChecked) {\n         String oldQuerySQL = this.querySQL;\n         Column[] oldColumnTemplates = this.columnTemplates;\n //<<<<<<< HEAD\n@@ -125,22 +124,16 @@ public class TableView extends Table {\n //            init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive);\n //=======\n         boolean oldRecursive = this.allowRecursive;\n-        init(querySQL, null,\n-                newColumnTemplates == null ? this.columnTemplates\n-                        : newColumnTemplates,\n-                session, recursive, literalsChecked, isTableExpression);\n+        init(querySQL, null, newColumnTemplates == null ? this.columnTemplates : newColumnTemplates, session, recursive, literalsChecked, isTableExpression);\n         DbException e = recompile(session, force, true);\n         if (e != null) {\n-            init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive,\n-                    literalsChecked, isTableExpression);\n+            init(oldQuerySQL, null, oldColumnTemplates, session, oldRecursive, literalsChecked, isTableExpression);\n             recompile(session, true, false);\n             throw e;\n         }\n     }\n \n-    private synchronized void init(String querySQL, ArrayList<Parameter> params,\n-            Column[] columnTemplates, Session session, boolean allowRecursive, boolean literalsChecked,\n-            boolean isTableExpression) {\n+    private synchronized void init(String querySQL, ArrayList<Parameter> params, Column[] columnTemplates, Session session, boolean allowRecursive, boolean literalsChecked, boolean isTableExpression) {\n         this.querySQL = querySQL;\n         this.columnTemplates = columnTemplates;\n         this.allowRecursive = allowRecursive;\n@@ -178,8 +171,9 @@ public class TableView extends Table {\n      * @return the exception if re-compiling this or any dependent view failed\n      *         (only when force is disabled)\n      */\n-    public synchronized DbException recompile(Session session, boolean force,\n-            boolean clearIndexCache) {\n+\n+\n+    public synchronized DbException recompile(Session session, boolean force, boolean clearIndexCache) {\n         try {\n             compileViewQuery(session, querySQL, false, getName());\n         } catch (DbException e) {\n@@ -191,8 +185,8 @@ public class TableView extends Table {\n //        \n //        //\u5982\u4e0b:\n //        //CREATE OR REPLACE FORCE VIEW my_view(f1,f2) AS SELECT id,name FROM CreateViewTest\n-//\t\t//CREATE OR REPLACE FORCE VIEW view1 AS SELECT f1 FROM my_view\n-//\t\t//CREATE OR REPLACE FORCE VIEW view2 AS SELECT f2 FROM my_view\n+//      //CREATE OR REPLACE FORCE VIEW view1 AS SELECT f1 FROM my_view\n+//      //CREATE OR REPLACE FORCE VIEW view2 AS SELECT f2 FROM my_view\n //        //view1\u548cview2\u662f\u5efa\u7acb\u5728my_view\u8fd9\u4e2a\u89c6\u56fe\u4e4b\u4e0a\uff0c\u5f53\u8981recompile my_view\u65f6\uff0c\u56e0\u4e3aview1\u548cview2\u4f9d\u8d56\u4e86my_view\n //        //\u6240\u4ee5\u8981\u5bf9\u4ed6\u4eec\u91cd\u65b0recompile\uff0c\u8fd9\u91ccgetViews()\u8fd4\u56deview1\u548cview2\n //        ArrayList<TableView> views = getViews();\n@@ -207,7 +201,7 @@ public class TableView extends Table {\n //                    return e;\n //                }\n //=======\n-        ArrayList<TableView> dependentViews = new ArrayList<>(getDependentViews());\n+        ArrayList<TableView> dependentViews = new ArrayList< >(getDependentViews());\n         initColumnsAndTables(session, false);\n         for (TableView v : dependentViews) {\n             DbException e = v.recompile(session, force, false);\n@@ -233,30 +227,30 @@ public class TableView extends Table {\n //            ArrayList<Expression> expressions = query.getExpressions();\n //            ArrayList<Column> list = New.arrayList();\n //            \n-//    \t\t//select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u591a\u7684\u60c5\u51b5\uff0c\u591a\u51fa\u6765\u7684\u6309select\u5b57\u6bb5\u539f\u6765\u7684\u7b97\n-//    \t\t//\u8fd9\u91cc\u5b9e\u9645\u662ff1\u3001name\n-//    \t\t//sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1) \" //\n-//    \t\t//\t\t+ \"AS SELECT id,name FROM CreateViewTest\";\n+//          //select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u591a\u7684\u60c5\u51b5\uff0c\u591a\u51fa\u6765\u7684\u6309select\u5b57\u6bb5\u539f\u6765\u7684\u7b97\n+//          //\u8fd9\u91cc\u5b9e\u9645\u662ff1\u3001name\n+//          //sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1) \" //\n+//          //      + \"AS SELECT id,name FROM CreateViewTest\";\n //\n-//    \t\t//select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u5c11\u7684\u60c5\u51b5\uff0cview\u4e2d\u5c11\u7684\u5b57\u6bb5\u88ab\u5ffd\u7565\n-//    \t\t//\u8fd9\u91cc\u5b9e\u9645\u662ff1\uff0c\u800cf2\u88ab\u5ffd\u7565\u4e86\uff0c\u4e5f\u4e0d\u63d0\u793a\u9519\u8bef\n-//    \t\t//sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n-//    \t\t//\t\t+ \"AS SELECT id FROM CreateViewTest\";\n+//          //select\u5b57\u6bb5\u4e2a\u6570\u6bd4view\u5b57\u6bb5\u5c11\u7684\u60c5\u51b5\uff0cview\u4e2d\u5c11\u7684\u5b57\u6bb5\u88ab\u5ffd\u7565\n+//          //\u8fd9\u91cc\u5b9e\u9645\u662ff1\uff0c\u800cf2\u88ab\u5ffd\u7565\u4e86\uff0c\u4e5f\u4e0d\u63d0\u793a\u9519\u8bef\n+//          //sql = \"CREATE OR REPLACE FORCE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n+//          //      + \"AS SELECT id FROM CreateViewTest\";\n //\n-//    \t\t//\u4e0d\u7ba1\u52a0\u4e0d\u52a0FORCE\uff0c\u8ddf\u4e0a\u9762\u4e5f\u4e00\u6837\n-//    \t\t//sql = \"CREATE OR REPLACE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n-//    \t\t//\t\t+ \"AS SELECT id FROM CreateViewTest\";\n+//          //\u4e0d\u7ba1\u52a0\u4e0d\u52a0FORCE\uff0c\u8ddf\u4e0a\u9762\u4e5f\u4e00\u6837\n+//          //sql = \"CREATE OR REPLACE VIEW my_view COMMENT IS 'my view'(f1, f2) \" //\n+//          //      + \"AS SELECT id FROM CreateViewTest\";\n //            \n //            //expressions.size\u6709\u53ef\u80fd\u5927\u4e8equery.getColumnCount()\uff0c\u56e0\u4e3aquery.getColumnCount()\u4e0d\u5305\u542bgroup by\u7b49\u989d\u5916\u52a0\u8fdb\u6765\u7684\u8868\u8fbe\u5f0f\n //            for (int i = 0, count = query.getColumnCount(); i < count; i++) {\n //=======\n             Query compiledQuery = compileViewQuery(session, querySQL, literalsChecked, getName());\n             this.querySQL = compiledQuery.getPlanSQL();\n-            tables = new ArrayList<>(compiledQuery.getTables());\n+            tables = new ArrayList< >(compiledQuery.getTables());\n             ArrayList<Expression> expressions = compiledQuery.getExpressions();\n             ColumnNamer columnNamer = new ColumnNamer(session);\n             final int count = compiledQuery.getColumnCount();\n-            ArrayList<Column> list = new ArrayList<>(count);\n+            ArrayList<Column> list = new ArrayList< >(count);\n             for (int i = 0; i < count; i++) {\n                 Expression expr = expressions.get(i);\n                 String name = null;\n@@ -296,8 +290,7 @@ public class TableView extends Table {\n                     }\n                 }\n                 if (fromColumn != null) {\n-                    Expression checkExpression = fromColumn.getColumn()\n-                            .getCheckConstraint(session, name);\n+                    Expression checkExpression = fromColumn.getColumn().getCheckConstraint(session, name);\n                     if (checkExpression != null) {\n                         col.addCheckConstraint(session, checkExpression);\n                     }\n@@ -345,14 +338,14 @@ public class TableView extends Table {\n      *\n      * @return true if it is\n      */\n+\n+\n     public boolean isInvalid() {\n         return createException != null;\n     }\n \n     @Override\n-    public PlanItem getBestPlanItem(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+    public PlanItem getBestPlanItem(Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder, AllColumnsForPlan allColumnsSet) {\n         final CacheKey cacheKey = new CacheKey(masks, this);\n         Map<Object, ViewIndex> indexCache = session.getViewIndexCache(topQuery != null);\n         ViewIndex i = indexCache.get(cacheKey);\n@@ -376,13 +369,13 @@ public class TableView extends Table {\n                 return false;\n             }\n         }\n-        if (topQuery != null &&\n-                !topQuery.isEverything(ExpressionVisitor.QUERY_COMPARABLE_VISITOR)) {\n+        if (topQuery != null && !topQuery.isEverything(ExpressionVisitor.QUERY_COMPARABLE_VISITOR)) {\n             return false;\n         }\n         return true;\n     }\n \n+\n     public Query getTopQuery() {\n         return topQuery;\n     }\n@@ -397,7 +390,6 @@ public class TableView extends Table {\n         return getCreateSQL(false, true, quotedName);\n     }\n \n-\n     @Override\n     public String getCreateSQL() {\n         return getCreateSQL(false, true);\n@@ -410,12 +402,13 @@ public class TableView extends Table {\n      * @param force if true, then include the FORCE clause\n      * @return the SQL statement\n      */\n+\n+\n     public String getCreateSQL(boolean orReplace, boolean force) {\n         return getCreateSQL(orReplace, force, getSQL());\n     }\n \n-    private String getCreateSQL(boolean orReplace, boolean force,\n-            String quotedName) {\n+    private String getCreateSQL(boolean orReplace, boolean force, String quotedName) {\n         StatementBuilder buff = new StatementBuilder(\"CREATE \");\n         if (orReplace) {\n             buff.append(\"OR REPLACE \");\n@@ -452,6 +445,7 @@ public class TableView extends Table {\n     @Override\n     public void checkRename() {\n         // ok\n+\n     }\n \n     @Override\n@@ -463,11 +457,13 @@ public class TableView extends Table {\n     @Override\n     public void close(Session session) {\n         // nothing to do\n+\n     }\n \n     @Override\n     public void unlock(Session s) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -476,9 +472,7 @@ public class TableView extends Table {\n     }\n \n     @Override\n-    public Index addIndex(Session session, String indexName, int indexId,\n-            IndexColumn[] cols, IndexType indexType, boolean create,\n-            String indexComment) {\n+    public Index addIndex(Session session, String indexName, int indexId, IndexColumn[] cols, IndexType indexType, boolean create, String indexComment) {\n         throw DbException.getUnsupportedException(\"VIEW\");\n     }\n \n@@ -539,6 +533,8 @@ public class TableView extends Table {\n      *\n      * @param database the database\n      */\n+\n+\n     public static void clearIndexCaches(Database database) {\n         for (Session s : database.getSessions(true)) {\n             s.clearViewIndexCache();\n@@ -553,6 +549,7 @@ public class TableView extends Table {\n         return super.getSQL();\n     }\n \n+\n     public String getQuery() {\n         return querySQL;\n     }\n@@ -563,13 +560,13 @@ public class TableView extends Table {\n     }\n \n     @Override\n-    public Index getScanIndex(Session session, int[] masks,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            AllColumnsForPlan allColumnsSet) {\n+    public Index getScanIndex(Session session, int[] masks, TableFilter[] filters, int filter, SortOrder sortOrder, AllColumnsForPlan allColumnsSet) {\n         if (createException != null) {\n             String msg = createException.getMessage();\n             throw DbException.get(ErrorCode.VIEW_IS_INVALID_2,\n-                    createException, getSQL(), msg);\n+                                  createException,\n+                                  getSQL(),\n+                                  msg);\n         }\n         PlanItem item = getBestPlanItem(session, masks, filters, filter, sortOrder, allColumnsSet);\n         return item.getIndex();\n@@ -628,6 +625,7 @@ public class TableView extends Table {\n         this.owner = owner;\n     }\n \n+\n     public User getOwner() {\n         return owner;\n     }\n@@ -642,14 +640,17 @@ public class TableView extends Table {\n      * @param topQuery the top level query\n      * @return the view table\n      */\n-    public static TableView createTempView(Session session, User owner,\n-            String name, Query query, Query topQuery) {\n+\n+\n+    public static TableView createTempView(Session session, User owner, String name, Query query, Query topQuery) {\n         Schema mainSchema = session.getDatabase().getSchema(Constants.SCHEMA_MAIN);\n         String querySQL = query.getPlanSQL();\n-        TableView v = new TableView(mainSchema, 0, name,\n-                querySQL, query.getParameters(), null /* column templates */, session,\n-                false/* allow recursive */, true /* literals have already been checked when parsing original query */,\n-                false /* is table expression */, true/*temporary*/);\n+        TableView v = new TableView(mainSchema, 0,\n+            name,\n+                querySQL,\n+                    query.getParameters(),\n+                        null /* column templates */,\n+                            session, false/* allow recursive */, true /* literals have already been checked when parsing original query */, false /* is table expression */, true/*temporary*/);\n         if (v.createException != null) {\n             throw v.createException;\n         }\n@@ -679,6 +680,8 @@ public class TableView extends Table {\n      * @param additionalParameters additional parameters\n      * @return the index of the first parameter\n      */\n+\n+\n     public int getParameterOffset(ArrayList<Parameter> additionalParameters) {\n         int result = topQuery == null ? -1 : getMaxParameterIndex(topQuery.getParameters());\n         if (additionalParameters != null) {\n@@ -695,6 +698,7 @@ public class TableView extends Table {\n         return result;\n     }\n \n+\n     public boolean isRecursive() {\n         return allowRecursive;\n     }\n@@ -707,6 +711,7 @@ public class TableView extends Table {\n         return viewQuery.isEverything(ExpressionVisitor.DETERMINISTIC_VISITOR);\n     }\n \n+\n     public void setRecursiveResult(ResultInterface value) {\n         if (recursiveResult != null) {\n             recursiveResult.close();\n@@ -714,6 +719,7 @@ public class TableView extends Table {\n         this.recursiveResult = value;\n     }\n \n+\n     public ResultInterface getRecursiveResult() {\n         return recursiveResult;\n     }\n@@ -733,6 +739,7 @@ public class TableView extends Table {\n     /**\n      * The key of the index cache for views.\n      */\n+\n     private static final class CacheKey {\n \n         private final int[] masks;\n@@ -769,6 +776,7 @@ public class TableView extends Table {\n             }\n             return Arrays.equals(masks, other.masks);\n         }\n+\n     }\n \n     /**\n@@ -776,6 +784,8 @@ public class TableView extends Table {\n      *\n      * @return true if yes\n      */\n+\n+\n     public boolean isRecursiveQueryDetected() {\n         return isRecursiveQueryDetected;\n     }\n@@ -783,6 +793,7 @@ public class TableView extends Table {\n     /**\n      * Does exception indicate query recursion?\n      */\n+\n     private boolean isRecursiveQueryExceptionDetected(DbException exception) {\n         if (exception == null) {\n             return false;\n@@ -790,9 +801,11 @@ public class TableView extends Table {\n         if (exception.getErrorCode() != ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1) {\n             return false;\n         }\n-        return exception.getMessage().contains(\"\\\"\" + this.getName() + \"\\\"\");\n+        return exception.getMessage().contains(\"\\\"\" +\n+this.getName() + \"\\\"\");\n     }\n \n+\n     public List<Table> getTables() {\n         return tables;\n     }\n@@ -813,37 +826,35 @@ public class TableView extends Table {\n      * @param db the database\n      * @return the view\n      */\n-    public static TableView createTableViewMaybeRecursive(Schema schema, int id, String name, String querySQL,\n-            ArrayList<Parameter> parameters, Column[] columnTemplates, Session session,\n-            boolean literalsChecked, boolean isTableExpression, boolean isTemporary, Database db) {\n-\n \n-        Table recursiveTable = createShadowTableForRecursiveTableExpression(isTemporary, session, name,\n-                schema, Arrays.asList(columnTemplates), db);\n \n+    public static TableView createTableViewMaybeRecursive(Schema schema, int id, String name, String querySQL, ArrayList<Parameter> parameters, Column[] columnTemplates, Session session, boolean literalsChecked, boolean isTableExpression, boolean isTemporary, Database db) {\n+        Table recursiveTable = createShadowTableForRecursiveTableExpression(isTemporary,\n+            session,\n+                name,\n+                    schema,\n+                        Arrays.asList(columnTemplates),\n+                            db);\n         List<Column> columnTemplateList;\n-        String[] querySQLOutput = {null};\n-        ArrayList<String> columnNames = new ArrayList<>();\n-        for (Column columnTemplate: columnTemplates) {\n+        String[] querySQLOutput = { null };\n+        ArrayList<String> columnNames = new ArrayList< >();\n+        for (Column columnTemplate : columnTemplates) {\n             columnNames.add(columnTemplate.getName());\n         }\n-\n         try {\n             Prepared withQuery = session.prepare(querySQL, false, false);\n             if (!isTemporary) {\n                 withQuery.setSession(session);\n             }\n             columnTemplateList = TableView.createQueryColumnTemplateList(columnNames.toArray(new String[1]),\n-                    (Query) withQuery, querySQLOutput);\n-\n+                                                                         (Query) withQuery,\n+                                                                         querySQLOutput);\n         } finally {\n             destroyShadowTableForRecursiveExpression(isTemporary, session, recursiveTable);\n         }\n \n         // build with recursion turned on\n-        TableView view = new TableView(schema, id, name, querySQL,\n-                parameters, columnTemplateList.toArray(columnTemplates), session,\n-                true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n+        TableView view = new TableView(schema, id, name, querySQL, parameters, columnTemplateList.toArray(columnTemplates), session, true/* try recursive */, literalsChecked, isTableExpression, isTemporary);\n \n         // is recursion really detected ? if not - recreate it without recursion flag\n         // and no recursive index\n@@ -860,11 +871,8 @@ public class TableView extends Table {\n             } else {\n                 session.removeLocalTempTable(view);\n             }\n-            view = new TableView(schema, id, name, querySQL, parameters,\n-                    columnTemplates, session,\n-                    false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n+            view = new TableView(schema, id, name, querySQL, parameters, columnTemplates, session, false/* detected not recursive */, literalsChecked, isTableExpression, isTemporary);\n         }\n-\n         return view;\n     }\n \n@@ -881,9 +889,10 @@ public class TableView extends Table {\n      *            Query object\n      * @return a list of column object returned by withQuery\n      */\n-    public static List<Column> createQueryColumnTemplateList(String[] cols,\n-            Query theQuery, String[] querySQLOutput) {\n-        List<Column> columnTemplateList = new ArrayList<>();\n+\n+\n+    public static List<Column> createQueryColumnTemplateList(String[] cols, Query theQuery, String[] querySQLOutput) {\n+        List<Column> columnTemplateList = new ArrayList< >();\n         theQuery.prepare();\n         // String array of length 1 is to receive extra 'output' field in addition to\n         // return value\n@@ -896,9 +905,7 @@ public class TableView extends Table {\n             // (if found) otherwise use column name derived from column\n             // expression\n             String columnName = columnNamer.getColumnName(columnExp, i, cols);\n-            columnTemplateList.add(new Column(columnName,\n-                    columnExp.getType()));\n-\n+            columnTemplateList.add(new Column(columnName, columnExp.getType()));\n         }\n         return columnTemplateList;\n     }\n@@ -914,13 +921,14 @@ public class TableView extends Table {\n      * @param db the database\n      * @return the table\n      */\n-    public static Table createShadowTableForRecursiveTableExpression(boolean isTemporary, Session targetSession,\n-            String cteViewName, Schema schema, List<Column> columns, Database db) {\n+\n+\n+    public static Table createShadowTableForRecursiveTableExpression(boolean isTemporary, Session targetSession, String cteViewName, Schema schema, List<Column> columns, Database db) {\n \n         // create table data object\n         CreateTableData recursiveTableData = new CreateTableData();\n         recursiveTableData.id = db.allocateObjectId();\n-        recursiveTableData.columns = new ArrayList<>(columns);\n+        recursiveTableData.columns = new ArrayList< >(columns);\n         recursiveTableData.tableName = cteViewName;\n         recursiveTableData.temporary = isTemporary;\n         recursiveTableData.persistData = true;\n@@ -930,7 +938,6 @@ public class TableView extends Table {\n \n         // this gets a meta table lock that is not released\n         Table recursiveTable = schema.createTable(recursiveTableData);\n-\n         if (!isTemporary) {\n             // this unlock is to prevent lock leak from schema.createTable()\n             db.unlockMeta(targetSession);\n@@ -950,13 +957,14 @@ public class TableView extends Table {\n      * @param targetSession the session\n      * @param recursiveTable the table\n      */\n-    public static void destroyShadowTableForRecursiveExpression(boolean isTemporary, Session targetSession,\n-            Table recursiveTable) {\n+\n+\n+    public static void destroyShadowTableForRecursiveExpression(boolean isTemporary,\n+        Session targetSession, Table recursiveTable) {\n         if (recursiveTable != null) {\n             if (!isTemporary) {\n                 recursiveTable.lock(targetSession, true, true);\n                 targetSession.getDatabase().removeSchemaObject(targetSession, recursiveTable);\n-\n             } else {\n                 targetSession.removeLocalTempTable(recursiveTable);\n             }\n@@ -965,4 +973,5 @@ public class TableView extends Table {\n             targetSession.getDatabase().unlockMeta(targetSession);\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 148
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "52",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}