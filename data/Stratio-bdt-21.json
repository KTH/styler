{
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "655",
                "severity": "error",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param numberOfCookies number of cookies that must be saved\n     */\n    @Then(\"^I have '(.+?)' selenium cookies saved$\")\n    public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n        Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/21/ThenGSpec.java\nindex fd7c9fa3bc..daef32c97c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/21/ThenGSpec.java\n@@ -652,6 +652,7 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param numberOfCookies number of cookies that must be saved\n      */\n+\n     @Then(\"^I have '(.+?)' selenium cookies saved$\")\n     public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n         Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/21/ThenGSpec.java\nindex fd7c9fa3bc..a804a40f8e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/21/ThenGSpec.java\n@@ -73,20 +73,29 @@ public class ThenGSpec extends BaseGSpec {\n      * @param exceptionMsg\n      */\n     @Then(\"^an exception '(.+?)' thrown( with class '(.+?)'( and message like '(.+?)')?)?\")\n-    public void assertExceptionNotThrown(String exception, String foo, String clazz, String bar, String exceptionMsg)\n-            throws ClassNotFoundException {\n+    public void assertExceptionNotThrown(String exception, String foo,\n+                                         String clazz, String bar,\n+                                         String exceptionMsg)\n+        throws ClassNotFoundException {\n         List<Exception> exceptions = commonspec.getExceptions();\n         if (\"IS NOT\".equals(exception)) {\n-            assertThat(exceptions).as(\"Captured exception list is not empty\").isEmpty();\n+            assertThat(exceptions).as(\"Captured exception list is not empty\")\n+                .isEmpty();\n         } else {\n-            assertThat(exceptions).as(\"Captured exception list is empty\").isNotEmpty();\n+            assertThat(exceptions).as(\"Captured exception list is empty\")\n+                .isNotEmpty();\n             Exception ex = exceptions.get(exceptions.size() - 1);\n             if ((clazz != null) && (exceptionMsg != null)) {\n-                assertThat(ex.toString()).as(\"Unexpected last exception class\").contains(clazz);\n-                assertThat(ex.toString()).as(\"Unexpected last exception message\").contains(exceptionMsg);\n+                assertThat(ex.toString()).as(\"Unexpected last exception class\")\n+                    .contains(clazz);\n+                assertThat(ex.toString())\n+                    .as(\"Unexpected last exception message\")\n+                    .contains(exceptionMsg);\n \n             } else if (clazz != null) {\n-                assertThat(exceptions.get(exceptions.size() - 1).getClass().getSimpleName()).as(\"Unexpected last exception class\").isEqualTo(clazz);\n+                assertThat(exceptions.get(exceptions.size() - 1).getClass()\n+                    .getSimpleName()).as(\"Unexpected last exception class\")\n+                    .isEqualTo(clazz);\n             }\n \n             commonspec.getExceptions().clear();\n@@ -100,7 +109,9 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' exists$\")\n     public void assertKeyspaceOnCassandraExists(String keyspace) {\n-        assertThat(commonspec.getCassandraClient().getKeyspaces()).as(\"The keyspace \" + keyspace + \" exists on cassandra\").contains(keyspace);\n+        assertThat(commonspec.getCassandraClient().getKeyspaces())\n+            .as(\"The keyspace \" + keyspace + \" exists on cassandra\")\n+            .contains(keyspace);\n     }\n \n     /**\n@@ -110,7 +121,9 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' does not exist$\")\n     public void assertKeyspaceOnCassandraDoesNotExist(String keyspace) {\n-        assertThat(commonspec.getCassandraClient().getKeyspaces()).as(\"The keyspace \" + keyspace + \" does not exist on cassandra\").doesNotContain(keyspace);\n+        assertThat(commonspec.getCassandraClient().getKeyspaces())\n+            .as(\"The keyspace \" + keyspace + \" does not exist on cassandra\")\n+            .doesNotContain(keyspace);\n     }\n \n     /**\n@@ -120,8 +133,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @param tableName\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)'$\")\n-    public void assertTableExistsOnCassandraKeyspace(String keyspace, String tableName) {\n-        assertThat(commonspec.getCassandraClient().getTables(keyspace)).as(\"The table \" + tableName + \"exists on cassandra\").contains(tableName);\n+    public void assertTableExistsOnCassandraKeyspace(String keyspace,\n+                                                     String tableName) {\n+        assertThat(commonspec.getCassandraClient().getTables(keyspace))\n+            .as(\"The table \" + tableName + \"exists on cassandra\")\n+            .contains(tableName);\n     }\n \n     /**\n@@ -131,8 +147,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @param tableName\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' does not contain a table '(.+?)'$\")\n-    public void assertTableDoesNotExistOnCassandraKeyspace(String keyspace, String tableName) {\n-        assertThat(commonspec.getCassandraClient().getTables(keyspace)).as(\"The table \" + tableName + \"exists on cassandra\").doesNotContain(tableName);\n+    public void assertTableDoesNotExistOnCassandraKeyspace(String keyspace,\n+                                                           String tableName) {\n+        assertThat(commonspec.getCassandraClient().getTables(keyspace))\n+            .as(\"The table \" + tableName + \"exists on cassandra\")\n+            .doesNotContain(tableName);\n     }\n \n     /**\n@@ -143,11 +162,16 @@ public class ThenGSpec extends BaseGSpec {\n      * @param numberRows\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)' with '(.+?)' rows$\")\n-    public void assertRowNumberOfTableOnCassandraKeyspace(String keyspace, String tableName, String numberRows) {\n+    public void assertRowNumberOfTableOnCassandraKeyspace(String keyspace,\n+                                                          String tableName,\n+                                                          String numberRows) {\n         Long numberRowsLong = Long.parseLong(numberRows);\n         commonspec.getCassandraClient().useKeyspace(keyspace);\n-        assertThat(commonspec.getCassandraClient().executeQuery(\"SELECT COUNT(*) FROM \" + tableName + \";\").all().get(0).getLong(0)).as(\"The table \" + tableName + \"exists on cassandra\").\n-                isEqualTo(numberRowsLong);\n+        assertThat(commonspec.getCassandraClient()\n+            .executeQuery(\"SELECT COUNT(*) FROM \" + tableName + \";\").all()\n+            .get(0).getLong(0))\n+            .as(\"The table \" + tableName + \"exists on cassandra\").\n+            isEqualTo(numberRowsLong);\n     }\n \n     /**\n@@ -159,43 +183,57 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws InterruptedException\n      */\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)' with values:$\")\n-    public void assertValuesOfTable(String keyspace, String tableName, DataTable data) throws InterruptedException {\n+    public void assertValuesOfTable(String keyspace, String tableName,\n+                                    DataTable data)\n+        throws InterruptedException {\n         //  USE of Keyspace\n         commonspec.getCassandraClient().useKeyspace(keyspace);\n         // Obtain the types and column names of the datatable\n         // to return in a hashmap,\n-        Map<String, String> dataTableColumns = extractColumnNamesAndTypes(data.raw().get(0));\n+        Map<String, String> dataTableColumns =\n+            extractColumnNamesAndTypes(data.raw().get(0));\n         // check if the table has columns\n         String query = \"SELECT * FROM \" + tableName + \" LIMIT 1;\";\n-        com.datastax.driver.core.ResultSet res = commonspec.getCassandraClient().executeQuery(query);\n+        com.datastax.driver.core.ResultSet res =\n+            commonspec.getCassandraClient().executeQuery(query);\n         equalsColumns(res.getColumnDefinitions(), dataTableColumns);\n         //receiving the string from the select with the columns\n         // that belong to the dataTable\n-        List<String> selectQueries = giveQueriesList(data, tableName, columnNames(data.raw().get(0)));\n+        List<String> selectQueries =\n+            giveQueriesList(data, tableName, columnNames(data.raw().get(0)));\n         //Check the data  of cassandra with different queries\n         int index = 1;\n         for (String execQuery : selectQueries) {\n             res = commonspec.getCassandraClient().executeQuery(execQuery);\n             List<Row> resAsList = res.all();\n-            assertThat(resAsList.size()).as(\"The query \" + execQuery + \" not return any result on Cassandra\").isGreaterThan(0);\n+            assertThat(resAsList.size()).as(\"The query \" + execQuery +\n+                \" not return any result on Cassandra\").isGreaterThan(0);\n             assertThat(resAsList.get(0).toString()\n-                    .substring(VALUE_SUBSTRING)).as(\"The resultSet is not as expected\").isEqualTo(data.raw().get(index).toString().replace(\"'\", \"\"));\n+                .substring(VALUE_SUBSTRING))\n+                .as(\"The resultSet is not as expected\")\n+                .isEqualTo(data.raw().get(index).toString().replace(\"'\", \"\"));\n             index++;\n         }\n     }\n \n     @SuppressWarnings(\"rawtypes\")\n-    private void equalsColumns(ColumnDefinitions resCols, Map<String, String> dataTableColumns) {\n+    private void equalsColumns(ColumnDefinitions resCols,\n+                               Map<String, String> dataTableColumns) {\n         Iterator it = dataTableColumns.entrySet().iterator();\n         while (it.hasNext()) {\n             Map.Entry e = (Map.Entry) it.next();\n-            assertThat(resCols.toString()).as(\"The table not contains the column.\").contains(e.getKey().toString());\n+            assertThat(resCols.toString())\n+                .as(\"The table not contains the column.\")\n+                .contains(e.getKey().toString());\n             DataType type = resCols.getType(e.getKey().toString());\n-            assertThat(type.getName().toString()).as(\"The column type is not equals.\").isEqualTo(e.getValue().toString());\n+            assertThat(type.getName().toString())\n+                .as(\"The column type is not equals.\")\n+                .isEqualTo(e.getValue().toString());\n         }\n     }\n \n-    private List<String> giveQueriesList(DataTable data, String tableName, String colNames) {\n+    private List<String> giveQueriesList(DataTable data, String tableName,\n+                                         String colNames) {\n         List<String> queryList = new ArrayList<String>();\n         for (int i = 1; i < data.raw().size(); i++) {\n             String query = \"SELECT \" + colNames + \" FROM \" + tableName;\n@@ -228,10 +266,12 @@ public class ThenGSpec extends BaseGSpec {\n             String[] aux = s.split(\"-\");\n             columnNamesForQuery.append(aux[0]).append(\",\");\n         }\n-        return columnNamesForQuery.toString().substring(0, columnNamesForQuery.length() - 1);\n+        return columnNamesForQuery.toString()\n+            .substring(0, columnNamesForQuery.length() - 1);\n     }\n \n-    private Map<String, String> extractColumnNamesAndTypes(List<String> firstRow) {\n+    private Map<String, String> extractColumnNamesAndTypes(\n+        List<String> firstRow) {\n         HashMap<String, String> columns = new HashMap<String, String>();\n         for (String s : firstRow) {\n             String[] aux = s.split(\"-\");\n@@ -249,10 +289,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param data\n      */\n     @Then(\"^a Mongo dataBase '(.+?)' contains a table '(.+?)' with values:\")\n-    public void assertValuesOfTableMongo(String dataBase, String tableName, DataTable data) {\n+    public void assertValuesOfTableMongo(String dataBase, String tableName,\n+                                         DataTable data) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n-        ArrayList<DBObject> result = (ArrayList<DBObject>) commonspec.getMongoDBClient().readFromMongoDBCollection(\n-                tableName, data);\n+        ArrayList<DBObject> result =\n+            (ArrayList<DBObject>) commonspec.getMongoDBClient()\n+                .readFromMongoDBCollection(\n+                    tableName, data);\n         DBObjectsAssert.assertThat(result).containedInMongoDBResult(data);\n \n     }\n@@ -264,10 +307,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param tableName\n      */\n     @Then(\"^a Mongo dataBase '(.+?)' doesnt contains a table '(.+?)'$\")\n-    public void aMongoDataBaseContainsaTable(String database, String tableName) {\n+    public void aMongoDataBaseContainsaTable(String database,\n+                                             String tableName) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(database);\n-        Set<String> collectionsNames = commonspec.getMongoDBClient().getMongoDBCollections();\n-        assertThat(collectionsNames).as(\"The Mongo dataBase contains the table\").doesNotContain(tableName);\n+        Set<String> collectionsNames =\n+            commonspec.getMongoDBClient().getMongoDBCollections();\n+        assertThat(collectionsNames).as(\"The Mongo dataBase contains the table\")\n+            .doesNotContain(tableName);\n     }\n \n     /**\n@@ -278,15 +324,20 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as text$\")\n     public void assertSeleniumTextOnElementPresent(Integer index, String text) {\n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String elementText = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n+        assertThat(commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String elementText =\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n         if (!elementText.startsWith(\"regex:\")) {\n             //We are verifying that a web element contains a string\n             assertThat(elementText.matches(\"(.*)\" + text + \"(.*)\")).isTrue();\n         } else {\n             //We are verifying that a web element contains a regex\n-            assertThat(elementText.matches(text.substring(text.indexOf(\"regex:\") + 6, text.length()))).isTrue();\n+            assertThat(elementText.matches(\n+                text.substring(text.indexOf(\"regex:\") + 6, text.length())))\n+                .isTrue();\n         }\n     }\n \n@@ -297,7 +348,8 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^this text exists '(.+?)'$\")\n     public void assertSeleniumTextInSource(String text) {\n-        assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\").contains(text);\n+        assertThat(this.commonspec, commonspec.getDriver())\n+            .as(\"Expected text not found at page\").contains(text);\n     }\n \n     /**\n@@ -313,8 +365,12 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^'(\\\\d+?)' elements? exists? with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExists(Integer expectedCount, String method, String element) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n-        List<WebElement> wel = commonspec.locateElement(method, element, expectedCount);\n+    public void assertSeleniumNElementExists(Integer expectedCount,\n+                                             String method, String element)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n+        List<WebElement> wel =\n+            commonspec.locateElement(method, element, expectedCount);\n         PreviousWebElements pwel = new PreviousWebElements(wel);\n         commonspec.setPreviousWebElements(pwel);\n     }\n@@ -337,8 +393,14 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, '(\\\\d+?)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout,\n+                                                      Integer wait,\n+                                                      Integer expectedCount,\n+                                                      String method,\n+                                                      String element)\n+        throws InterruptedException, ClassNotFoundException,\n+        NoSuchFieldException, SecurityException, IllegalArgumentException,\n+        IllegalAccessException {\n         List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n@@ -350,7 +412,8 @@ public class ThenGSpec extends BaseGSpec {\n         }\n \n         PreviousWebElements pwel = new PreviousWebElements(wel);\n-        assertThat(this.commonspec, pwel).as(\"Element count doesnt match\").hasSize(expectedCount);\n+        assertThat(this.commonspec, pwel).as(\"Element count doesnt match\")\n+            .hasSize(expectedCount);\n         commonspec.setPreviousWebElements(pwel);\n \n     }\n@@ -367,26 +430,35 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws InterruptedException\n      */\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, the command output '(.+?)' contains '(.+?)'( with exit status '(.+?)')?$\")\n-    public void assertCommandExistsOnTimeOut(Integer timeout, Integer wait, String command, String search, String foo, Integer exitStatus) throws Exception {\n+    public void assertCommandExistsOnTimeOut(Integer timeout, Integer wait,\n+                                             String command, String search,\n+                                             String foo, Integer exitStatus)\n+        throws Exception {\n         Boolean found = false;\n         AssertionError ex = null;\n-        command = \"set -o pipefail && alias grep='grep --color=never' && \" + command;\n+        command =\n+            \"set -o pipefail && alias grep='grep --color=never' && \" + command;\n         for (int i = 0; (i <= timeout); i += wait) {\n             if (found) {\n                 break;\n             }\n             commonspec.getLogger().debug(\"Checking output value\");\n             commonspec.getRemoteSSHConnection().runCommand(command);\n-            commonspec.setCommandResult(commonspec.getRemoteSSHConnection().getResult());\n+            commonspec.setCommandResult(\n+                commonspec.getRemoteSSHConnection().getResult());\n             try {\n                 if (exitStatus != null) {\n-                    assertThat(commonspec.getRemoteSSHConnection().getExitStatus()).isEqualTo(exitStatus);\n+                    assertThat(\n+                        commonspec.getRemoteSSHConnection().getExitStatus())\n+                        .isEqualTo(exitStatus);\n                 }\n-                assertThat(commonspec.getCommandResult()).as(\"Contains \" + search + \".\").contains(search);\n+                assertThat(commonspec.getCommandResult())\n+                    .as(\"Contains \" + search + \".\").contains(search);\n                 found = true;\n                 timeout = i;\n             } catch (AssertionError e) {\n-                commonspec.getLogger().info(\"Command output don't found yet after \" + i + \" seconds\");\n+                commonspec.getLogger().info(\n+                    \"Command output don't found yet after \" + i + \" seconds\");\n                 Thread.sleep(wait * 1000);\n                 ex = e;\n             }\n@@ -394,7 +466,8 @@ public class ThenGSpec extends BaseGSpec {\n         if (!found) {\n             throw (ex);\n         }\n-        commonspec.getLogger().info(\"Command output found after \" + timeout + \" seconds\");\n+        commonspec.getLogger()\n+            .info(\"Command output found after \" + timeout + \" seconds\");\n     }\n \n \n@@ -406,10 +479,13 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) displayed$\")\n     public void assertSeleniumIsDisplayed(Integer index, Boolean isDisplayed) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\n-                \"Unexpected element display property\").isEqualTo(isDisplayed);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).isDisplayed()).as(\n+            \"Unexpected element display property\").isEqualTo(isDisplayed);\n     }\n \n     /**\n@@ -420,10 +496,13 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) enabled$\")\n     public void assertSeleniumIsEnabled(Integer index, Boolean isEnabled) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n-                .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).isEnabled())\n+            .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n     }\n \n     /**\n@@ -434,10 +513,13 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) selected$\")\n     public void assertSeleniumIsSelected(Integer index, Boolean isSelected) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\n-                \"Unexpected element selected property\").isEqualTo(isSelected);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).isSelected()).as(\n+            \"Unexpected element selected property\").isEqualTo(isSelected);\n     }\n \n     /**\n@@ -448,12 +530,17 @@ public class ThenGSpec extends BaseGSpec {\n      * @param value\n      */\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as '(.+?)'$\")\n-    public void assertSeleniumHasAttributeValue(Integer index, String attribute, String value) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getAttribute(attribute);\n+    public void assertSeleniumHasAttributeValue(Integer index, String attribute,\n+                                                String value) {\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String val =\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).getAttribute(attribute);\n         assertThat(this.commonspec, val).as(\"Attribute not found\").isNotNull();\n-        assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\").matches(value);\n+        assertThat(this.commonspec, val)\n+            .as(\"Unexpected value for specified attribute\").matches(value);\n     }\n \n     /**\n@@ -485,37 +572,49 @@ public class ThenGSpec extends BaseGSpec {\n \n         String webURL = commonspec.getWebHost() + commonspec.getWebPort();\n \n-        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n-                .endsWith(webURL.toLowerCase() + url);\n+        assertThat(commonspec.getDriver().getCurrentUrl())\n+            .as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n+            .endsWith(webURL.toLowerCase() + url);\n     }\n \n     @Then(\"^the service response must contain the text '(.*?)'$\")\n-    public void assertResponseMessage(String expectedText) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertResponseMessage(String expectedText)\n+        throws ClassNotFoundException, NoSuchFieldException, SecurityException,\n+        IllegalArgumentException, IllegalAccessException {\n         Pattern pattern = CommonG.matchesOrContains(expectedText);\n-        assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n+        assertThat(commonspec.getResponse().getResponse())\n+            .containsPattern(pattern);\n     }\n \n     @Then(\"^the service response status must be '(.*?)'( and its response length must be '(.*?)' | and its response must contain the text '(.*?)')?$\")\n-    public void assertResponseStatusLength(Integer expectedStatus, String foo, Integer expectedLength, String expectedText) {\n+    public void assertResponseStatusLength(Integer expectedStatus, String foo,\n+                                           Integer expectedLength,\n+                                           String expectedText) {\n         if (foo != null) {\n             if (foo.contains(\"length\")) {\n-                assertThat(Optional.of(commonspec.getResponse())).hasValueSatisfying(r -> {\n-                    assertThat(r.getStatusCode()).isEqualTo(expectedStatus);\n-                    assertThat((new JSONArray(r.getResponse())).length()).isEqualTo(expectedLength);\n-                });\n+                assertThat(Optional.of(commonspec.getResponse()))\n+                    .hasValueSatisfying(r -> {\n+                        assertThat(r.getStatusCode()).isEqualTo(expectedStatus);\n+                        assertThat((new JSONArray(r.getResponse())).length())\n+                            .isEqualTo(expectedLength);\n+                    });\n             } else if (foo.contains(\"text\")) {\n-                WritableAssertionInfo assertionInfo = new WritableAssertionInfo();\n+                WritableAssertionInfo assertionInfo =\n+                    new WritableAssertionInfo();\n                 Pattern pattern = CommonG.matchesOrContains(expectedText);\n-                assertThat(Optional.of(commonspec.getResponse())).hasValueSatisfying(r -> {\n-                    assertThat(r.getStatusCode()).isEqualTo(expectedStatus);\n-                    assertThat(r.getResponse()).containsPattern(pattern);\n-                });\n+                assertThat(Optional.of(commonspec.getResponse()))\n+                    .hasValueSatisfying(r -> {\n+                        assertThat(r.getStatusCode()).isEqualTo(expectedStatus);\n+                        assertThat(r.getResponse()).containsPattern(pattern);\n+                    });\n             }\n         } else {\n             try {\n-                assertThat(commonspec.getResponse().getStatusCode()).isEqualTo(expectedStatus);\n+                assertThat(commonspec.getResponse().getStatusCode())\n+                    .isEqualTo(expectedStatus);\n             } catch (AssertionError e) {\n-                commonspec.getLogger().warn(\"Response: {}\", commonspec.getResponse().getResponse());\n+                commonspec.getLogger().warn(\"Response: {}\",\n+                    commonspec.getResponse().getResponse());\n                 throw e;\n             }\n         }\n@@ -540,7 +639,8 @@ public class ThenGSpec extends BaseGSpec {\n     public void resultsMustBe(DataTable expectedResults) throws Exception {\n \n         String type = commonspec.getResultsType();\n-        assertThat(type).isNotEqualTo(\"\").overridingErrorMessage(\"It's necessary to define the result type\");\n+        assertThat(type).isNotEqualTo(\"\")\n+            .overridingErrorMessage(\"It's necessary to define the result type\");\n         switch (type) {\n             case \"cassandra\":\n                 commonspec.resultsMustBeCassandra(expectedResults);\n@@ -555,7 +655,8 @@ public class ThenGSpec extends BaseGSpec {\n                 commonspec.resultsMustBeCSV(expectedResults);\n                 break;\n             default:\n-                commonspec.getLogger().warn(\"default switch branch on results check\");\n+                commonspec.getLogger()\n+                    .warn(\"default switch branch on results check\");\n         }\n     }\n \n@@ -566,7 +667,8 @@ public class ThenGSpec extends BaseGSpec {\n      **/\n     @Then(\"^the command output contains '(.+?)'$\")\n     public void findShellOutput(String search) throws Exception {\n-        assertThat(commonspec.getCommandResult()).as(\"Contains \" + search + \".\").contains(search);\n+        assertThat(commonspec.getCommandResult()).as(\"Contains \" + search + \".\")\n+            .contains(search);\n     }\n \n     /**\n@@ -576,7 +678,8 @@ public class ThenGSpec extends BaseGSpec {\n      **/\n     @Then(\"^the command output does not contain '(.+?)'$\")\n     public void notFindShellOutput(String search) throws Exception {\n-        assertThat(commonspec.getCommandResult()).as(\"NotContains \" + search + \".\").doesNotContain(search);\n+        assertThat(commonspec.getCommandResult())\n+            .as(\"NotContains \" + search + \".\").doesNotContain(search);\n     }\n \n     /**\n@@ -589,7 +692,9 @@ public class ThenGSpec extends BaseGSpec {\n     @Deprecated\n     @Then(\"^the command exit status is '(.+?)'$\")\n     public void checkShellExitStatus(int expectedExitStatus) throws Exception {\n-        assertThat(commonspec.getCommandExitStatus()).as(\"Is equal to \" + expectedExitStatus + \".\").isEqualTo(expectedExitStatus);\n+        assertThat(commonspec.getCommandExitStatus())\n+            .as(\"Is equal to \" + expectedExitStatus + \".\")\n+            .isEqualTo(expectedExitStatus);\n     }\n \n     /**\n@@ -597,7 +702,8 @@ public class ThenGSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium cookies in context$\")\n     public void saveSeleniumCookies() throws Exception {\n-        commonspec.setSeleniumCookies(commonspec.getDriver().manage().getCookies());\n+        commonspec\n+            .setSeleniumCookies(commonspec.getDriver().manage().getCookies());\n     }\n \n \n@@ -606,8 +712,9 @@ public class ThenGSpec extends BaseGSpec {\n      **/\n     @Then(\"^I save selenium dcos acs auth cookie in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(\"dcos-acs-auth-cookie\")) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -623,9 +730,11 @@ public class ThenGSpec extends BaseGSpec {\n      * Get dcos-auth-cookie\n      **/\n     @Then(\"^I save selenium cookie '(.+?)' in variable '(.+?)'$\")\n-    public void getDcosAcsAuthCookie(String cookieName, String envVar) throws Exception {\n-        if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+    public void getDcosAcsAuthCookie(String cookieName, String envVar)\n+        throws Exception {\n+        if (commonspec.getSeleniumCookies() != null &&\n+            commonspec.getSeleniumCookies().size() != 0) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -644,9 +753,11 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^The cookie '(.+?)' exists in the saved cookies$\")\n     public void checkIfCookieExists(String cookieName) {\n-        Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n+        Assertions.assertThat(commonspec.cookieExists(cookieName))\n+            .isEqualTo(true);\n \n     }\n+\n     /**\n      * Check if the length of the cookie set match with the number of cookies thas must be saved\n      *\n@@ -654,7 +765,8 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^I have '(.+?)' selenium cookies saved$\")\n     public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n-        Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n+        Assertions.assertThat(commonspec.getSeleniumCookies().size())\n+            .isEqualTo(numberOfCookies);\n     }\n \n     /**\n@@ -665,7 +777,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param table  data table in which each row stores one expression\n      */\n     @Then(\"^'(.+?)' matches the following cases:$\")\n-    public void matchWithExpresion(String envVar, DataTable table) throws Exception {\n+    public void matchWithExpresion(String envVar, DataTable table)\n+        throws Exception {\n         String jsonString = ThreadProperty.get(envVar);\n \n         for (DataTableRow row : table.getGherkinRows()) {\n@@ -673,7 +786,8 @@ public class ThenGSpec extends BaseGSpec {\n             String condition = row.getCells().get(1);\n             String result = row.getCells().get(2);\n \n-            String value = commonspec.getJSONPathString(jsonString, expression, null);\n+            String value =\n+                commonspec.getJSONPathString(jsonString, expression, null);\n             commonspec.evaluateJSONElementOperation(value, condition, result);\n         }\n     }\n@@ -687,26 +801,38 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Then(\"^I add a new DCOS label with key '(.+?)' and value '(.+?)' to the service '(.+?)'?$\")\n-    public void sendAppendRequest(String key, String value, String service) throws Exception {\n-        commonspec.runCommandAndGetResult(\"touch \" + service + \".json && dcos marathon app show \" + service + \" > /dcos/\" + service + \".json\");\n+    public void sendAppendRequest(String key, String value, String service)\n+        throws Exception {\n+        commonspec.runCommandAndGetResult(\n+            \"touch \" + service + \".json && dcos marathon app show \" + service +\n+                \" > /dcos/\" + service + \".json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \".json\");\n \n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n-        String myValue = commonspec.getJSONPathString(configFile, \".labels\", \"0\");\n-        String myJson = commonspec.updateMarathonJson(commonspec.removeJSONPathElement(configFile, \"$.labels\"));\n+        String myValue =\n+            commonspec.getJSONPathString(configFile, \".labels\", \"0\");\n+        String myJson = commonspec.updateMarathonJson(\n+            commonspec.removeJSONPathElement(configFile, \"$.labels\"));\n \n-        String newValue = myValue.replaceFirst(\"\\\\{\", \"{\\\"\" + key + \"\\\": \\\"\" + value + \"\\\", \");\n+        String newValue = myValue\n+            .replaceFirst(\"\\\\{\", \"{\\\"\" + key + \"\\\": \\\"\" + value + \"\\\", \");\n         newValue = \"\\\"labels\\\":\" + newValue;\n-        String myFinalJson = myJson.replaceFirst(\"\\\\{\", \"{\" + newValue.replace(\"\\\\n\", \"\\\\\\\\n\") + \",\");\n+        String myFinalJson = myJson\n+            .replaceFirst(\"\\\\{\", \"{\" + newValue.replace(\"\\\\n\", \"\\\\\\\\n\") + \",\");\n         if (myFinalJson.contains(\"uris\")) {\n             String test = myFinalJson.replaceAll(\"\\\"uris\\\"\", \"\\\"none\\\"\");\n-            commonspec.runCommandAndGetResult(\"echo '\" + test + \"' > /dcos/final\" + service + \".json\");\n+            commonspec.runCommandAndGetResult(\n+                \"echo '\" + test + \"' > /dcos/final\" + service + \".json\");\n         } else {\n-            commonspec.runCommandAndGetResult(\"echo '\" + myFinalJson + \"' > /dcos/final\" + service + \".json\");\n+            commonspec.runCommandAndGetResult(\n+                \"echo '\" + myFinalJson + \"' > /dcos/final\" + service + \".json\");\n         }\n-        commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \".json\");\n+        commonspec.runCommandAndGetResult(\n+            \"dcos marathon app update \" + service + \" < /dcos/final\" + service +\n+                \".json\");\n \n-        commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n+        commonspec.setCommandExitStatus(\n+            commonspec.getRemoteSSHConnection().getExitStatus());\n     }\n \n     /**\n@@ -716,18 +842,22 @@ public class ThenGSpec extends BaseGSpec {\n      * @param document expected content of znode\n      */\n     @Then(\"^the zNode '(.+?)' exists( and contains '(.+?)')?$\")\n-    public void checkZnodeExists(String zNode, String foo, String document) throws Exception {\n+    public void checkZnodeExists(String zNode, String foo, String document)\n+        throws Exception {\n         if (document == null) {\n             String breakpoint = commonspec.getZookeeperSecClient().zRead(zNode);\n             assert breakpoint.equals(\"\") : \"The zNode does not exist\";\n         } else {\n-            assert commonspec.getZookeeperSecClient().zRead(zNode).contains(document) : \"The zNode does not exist or the content does not match\";\n+            assert commonspec.getZookeeperSecClient().zRead(zNode)\n+                .contains(document) :\n+                \"The zNode does not exist or the content does not match\";\n         }\n     }\n \n     @Then(\"^the zNode '(.+?)' does not exist\")\n     public void checkZnodeNotExist(String zNode) throws Exception {\n-        assert !commonspec.getZookeeperSecClient().exists(zNode) : \"The zNode exists\";\n+        assert !commonspec.getZookeeperSecClient().exists(zNode) :\n+            \"The zNode exists\";\n     }\n \n     /**\n@@ -736,8 +866,10 @@ public class ThenGSpec extends BaseGSpec {\n      * @param topic_name name of topic\n      */\n     @Then(\"^A kafka topic named '(.+?)' exists\")\n-    public void kafkaTopicExist(String topic_name) throws KeeperException, InterruptedException {\n-        assert commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name) : \"There is no topic with that name\";\n+    public void kafkaTopicExist(String topic_name)\n+        throws KeeperException, InterruptedException {\n+        assert commonspec.getKafkaUtils().getZkUtils()\n+            .pathExists(\"/\" + topic_name) : \"There is no topic with that name\";\n     }\n \n     /**\n@@ -746,8 +878,10 @@ public class ThenGSpec extends BaseGSpec {\n      * @param topic_name name of topic\n      */\n     @Then(\"^A kafka topic named '(.+?)' does not exist\")\n-    public void kafkaTopicNotExist(String topic_name) throws KeeperException, InterruptedException {\n-        assert !commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name) : \"There is a topic with that name\";\n+    public void kafkaTopicNotExist(String topic_name)\n+        throws KeeperException, InterruptedException {\n+        assert !commonspec.getKafkaUtils().getZkUtils()\n+            .pathExists(\"/\" + topic_name) : \"There is a topic with that name\";\n     }\n \n \n@@ -760,18 +894,26 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Then(\"^I modify marathon environment variable '(.+?)' with value '(.+?)' for service '(.+?)'?$\")\n-    public void setMarathonProperty(String key, String value, String service) throws Exception {\n-        commonspec.runCommandAndGetResult(\"touch \" + service + \"-env.json && dcos marathon app show \" + service + \" > /dcos/\" + service + \"-env.json\");\n+    public void setMarathonProperty(String key, String value, String service)\n+        throws Exception {\n+        commonspec.runCommandAndGetResult(\n+            \"touch \" + service + \"-env.json && dcos marathon app show \" +\n+                service + \" > /dcos/\" + service + \"-env.json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \"-env.json\");\n \n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n-        String myJson1 = commonspec.replaceJSONPathElement(configFile, key, value);\n+        String myJson1 =\n+            commonspec.replaceJSONPathElement(configFile, key, value);\n         String myJson4 = commonspec.updateMarathonJson(myJson1);\n         String myJson = myJson4.replaceAll(\"\\\"uris\\\"\", \"\\\"none\\\"\");\n \n-        commonspec.runCommandAndGetResult(\"echo '\" + myJson + \"' > /dcos/final\" + service + \"-env.json\");\n-        commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \"-env.json\");\n-        commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n+        commonspec.runCommandAndGetResult(\n+            \"echo '\" + myJson + \"' > /dcos/final\" + service + \"-env.json\");\n+        commonspec.runCommandAndGetResult(\n+            \"dcos marathon app update \" + service + \" < /dcos/final\" + service +\n+                \"-env.json\");\n+        commonspec.setCommandExitStatus(\n+            commonspec.getRemoteSSHConnection().getExitStatus());\n     }\n \n     /**\n@@ -782,8 +924,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Then(\"^The number of partitions in topic '(.+?)' should be '(.+?)''?$\")\n-    public void checkNumberOfPartitions(String topic_name, int numOfPartitions) throws Exception {\n-        Assertions.assertThat(commonspec.getKafkaUtils().getPartitions(topic_name)).isEqualTo(numOfPartitions);\n+    public void checkNumberOfPartitions(String topic_name, int numOfPartitions)\n+        throws Exception {\n+        Assertions\n+            .assertThat(commonspec.getKafkaUtils().getPartitions(topic_name))\n+            .isEqualTo(numOfPartitions);\n \n     }\n \n@@ -794,7 +939,8 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^An elasticsearch index named '(.+?)' exists\")\n     public void elasticSearchIndexExist(String indexName) {\n-        assert (commonspec.getElasticSearchClient().indexExists(indexName)) : \"There is no index with that name\";\n+        assert (commonspec.getElasticSearchClient().indexExists(indexName)) :\n+            \"There is no index with that name\";\n     }\n \n     /**\n@@ -804,7 +950,8 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^An elasticsearch index named '(.+?)' does not exist\")\n     public void elasticSearchIndexDoesNotExist(String indexName) {\n-        assert !commonspec.getElasticSearchClient().indexExists(indexName) : \"There is an index with that name\";\n+        assert !commonspec.getElasticSearchClient().indexExists(indexName) :\n+            \"There is an index with that name\";\n     }\n \n     /**\n@@ -815,14 +962,20 @@ public class ThenGSpec extends BaseGSpec {\n      * @param columnValue\n      */\n     @Then(\"^The Elasticsearch index named '(.+?)' and mapping '(.+?)' contains a column named '(.+?)' with the value '(.+?)'$\")\n-    public void elasticSearchIndexContainsDocument(String indexName, String mappingName, String columnName, String columnValue) throws Exception {\n-        Assertions.assertThat((commonspec.getElasticSearchClient().searchSimpleFilterElasticsearchQuery(\n+    public void elasticSearchIndexContainsDocument(String indexName,\n+                                                   String mappingName,\n+                                                   String columnName,\n+                                                   String columnValue)\n+        throws Exception {\n+        Assertions.assertThat((commonspec.getElasticSearchClient()\n+            .searchSimpleFilterElasticsearchQuery(\n                 indexName,\n                 mappingName,\n                 columnName,\n                 columnValue,\n                 \"equals\"\n-        ).size()) > 0).isTrue().withFailMessage(\"The index does not contain that document\");\n+            ).size()) > 0).isTrue()\n+            .withFailMessage(\"The index does not contain that document\");\n     }\n \n     /*\n@@ -833,7 +986,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      */\n     @Then(\"^'(?s)(.+?)' ((?!.*with).+?) '(.+?)'$\")\n-    public void checkValue(String envVar, String operation, String value) throws Exception {\n+    public void checkValue(String envVar, String operation, String value)\n+        throws Exception {\n         switch (operation.toLowerCase()) {\n             case \"is\":\n                 Assertions.assertThat(envVar).isEqualTo(value);\n@@ -843,16 +997,20 @@ public class ThenGSpec extends BaseGSpec {\n                 break;\n             case \"is higher than\":\n                 if (envVar.matches(\"^-?\\\\d+$\") && value.matches(\"^-?\\\\d+$\")) {\n-                    Assertions.assertThat(Integer.parseInt(envVar)).isGreaterThan(Integer.parseInt(value));\n+                    Assertions.assertThat(Integer.parseInt(envVar))\n+                        .isGreaterThan(Integer.parseInt(value));\n                 } else {\n-                    Fail.fail(\"A number should be provided in order to perform a valid comparison.\");\n+                    Fail.fail(\n+                        \"A number should be provided in order to perform a valid comparison.\");\n                 }\n                 break;\n             case \"is lower than\":\n                 if (envVar.matches(\"^-?\\\\d+$\") && value.matches(\"^-?\\\\d+$\")) {\n-                    Assertions.assertThat(Integer.parseInt(envVar)).isLessThan(Integer.parseInt(value));\n+                    Assertions.assertThat(Integer.parseInt(envVar))\n+                        .isLessThan(Integer.parseInt(value));\n                 } else {\n-                    Fail.fail(\"A number should be provided in order to perform a valid comparison.\");\n+                    Fail.fail(\n+                        \"A number should be provided in order to perform a valid comparison.\");\n                 }\n                 break;\n             case \"contains\":\n@@ -865,23 +1023,29 @@ public class ThenGSpec extends BaseGSpec {\n                 Assertions.assertThat(envVar).isNotEqualTo(value);\n                 break;\n             default:\n-                Fail.fail(\"Not a valid comparison. Valid ones are: is | matches | is higher than | is lower than | contains | does not contain | is different from\");\n+                Fail.fail(\n+                    \"Not a valid comparison. Valid ones are: is | matches | is higher than | is lower than | contains | does not contain | is different from\");\n         }\n     }\n \n     @Then(\"^The kafka topic '(.*?)' has a message containing '(.*?)'$\")\n     public void checkMessages(String topic, String content) {\n-        assert commonspec.getKafkaUtils().readTopicFromBeginning(topic).contains(content) : \"Topic does not exist or the content does not match\";\n+        assert commonspec.getKafkaUtils().readTopicFromBeginning(topic)\n+            .contains(content) :\n+            \"Topic does not exist or the content does not match\";\n     }\n \n     @Then(\"^The kafka topic '(.*?)' has a message that contains '(.*?)'$\")\n     public void checkMessagesContent(String topic, String content) {\n-        assert commonspec.getKafkaUtils().checkMessageContent(topic, content) : \"Topic does not exist or the content does not match\";\n+        assert commonspec.getKafkaUtils().checkMessageContent(topic, content) :\n+            \"Topic does not exist or the content does not match\";\n     }\n \n     @Then(\"^The kafka topic '(.*?)' has '(.+?)' messages$\")\n     public void checkMessageOfTopicLentgh(String topic, int numberOfMessages) {\n-        Assertions.assertThat(commonspec.getKafkaUtils().checkTopicMessagesLenght(topic)).isEqualTo(numberOfMessages);\n+        Assertions.assertThat(\n+            commonspec.getKafkaUtils().checkTopicMessagesLenght(topic))\n+            .isEqualTo(numberOfMessages);\n     }\n \n     /**\n@@ -892,9 +1056,12 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^I save content of element in index '(\\\\d+?)' in environment variable '(.+?)'$\")\n     public void saveContentWebElementInEnvVar(Integer index, String envVar) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        String text = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements())\n+            .as(\"There are less found elements than required\")\n+            .hasAtLeast(index);\n+        String text =\n+            commonspec.getPreviousWebElements().getPreviousWebElements()\n+                .get(index).getText();\n         ThreadProperty.set(envVar, text);\n     }\n \n@@ -907,7 +1074,10 @@ public class ThenGSpec extends BaseGSpec {\n     @Then(\"^the LDAP entry contains the attribute '(.+?)' with the value '(.+?)'$\")\n     public void ldapEntryContains(String attributeName, String expectedValue) {\n         if (this.commonspec.getPreviousLdapResults().isPresent()) {\n-            Assertions.assertThat(this.commonspec.getPreviousLdapResults().get().getEntry().getAttribute(attributeName).getStringValues()).contains(expectedValue);\n+            Assertions.assertThat(\n+                this.commonspec.getPreviousLdapResults().get().getEntry()\n+                    .getAttribute(attributeName).getStringValues())\n+                .contains(expectedValue);\n         } else {\n             fail(\"No previous LDAP results were stored in memory\");\n         }\n@@ -924,17 +1094,22 @@ public class ThenGSpec extends BaseGSpec {\n         Connection myConnection = this.commonspec.getConnection();\n \n         //query checks table existence, existence table name in system table  pg_tables\n-        String query = \"SELECT * FROM pg_tables WHERE tablename = \" + \"\\'\" + tableName + \"\\'\" + \";\";\n+        String query =\n+            \"SELECT * FROM pg_tables WHERE tablename = \" + \"\\'\" + tableName +\n+                \"\\'\" + \";\";\n         try {\n             myStatement = myConnection.createStatement();\n             java.sql.ResultSet rs = myStatement.executeQuery(query);\n             //if there are no data row\n             if (rs.next() == false) {\n-                Assertions.assertThat(rs.next()).as(\"there are no table \" + tableName).isTrue();\n+                Assertions.assertThat(rs.next())\n+                    .as(\"there are no table \" + tableName).isTrue();\n             } else {\n                 //data exist\n                 String resultTableName = rs.getString(2);\n-                assertThat(resultTableName).as(\"there are incorrect table name \" + tableName).contains(tableName);\n+                assertThat(resultTableName)\n+                    .as(\"there are incorrect table name \" + tableName)\n+                    .contains(tableName);\n             }\n             rs.close();\n             myStatement.close();\n@@ -955,16 +1130,20 @@ public class ThenGSpec extends BaseGSpec {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n \n-        String query = \"SELECT * FROM pg_tables WHERE tablename = \" + \"\\'\" + tableName + \"\\'\" + \";\";\n+        String query =\n+            \"SELECT * FROM pg_tables WHERE tablename = \" + \"\\'\" + tableName +\n+                \"\\'\" + \";\";\n         try {\n             myStatement = myConnection.createStatement();\n             java.sql.ResultSet rs = myStatement.executeQuery(query);\n             //if there are no data row, table doesn't exists\n             if (rs.next() == false) {\n-                Assertions.assertThat(rs.next()).as(\"table exists \" + tableName).isFalse();\n+                Assertions.assertThat(rs.next()).as(\"table exists \" + tableName)\n+                    .isFalse();\n             } else {\n                 String resultTableName = rs.getString(2);\n-                assertThat(resultTableName).as(\"table exists \" + tableName).isEqualToIgnoringCase(tableName);\n+                assertThat(resultTableName).as(\"table exists \" + tableName)\n+                    .isEqualToIgnoringCase(tableName);\n             }\n             rs.close();\n             myStatement.close();\n@@ -982,7 +1161,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      */\n     @Then(\"^I check that table '(.+?)' is iqual to$\")\n-    public void comparetable(String tableName, DataTable dataTable) throws Exception {\n+    public void comparetable(String tableName, DataTable dataTable)\n+        throws Exception {\n         Statement myStatement = null;\n         java.sql.ResultSet rs = null;\n \n@@ -1017,7 +1197,8 @@ public class ThenGSpec extends BaseGSpec {\n             }\n             sqlTable.addAll(sqlTableAux);\n \n-            assertThat(sqlTable).as(\"Not equal elements!\").isEqualTo(tablePattern);\n+            assertThat(sqlTable).as(\"Not equal elements!\")\n+                .isEqualTo(tablePattern);\n             rs.close();\n             myStatement.close();\n         } catch (Exception e) {\n@@ -1059,7 +1240,8 @@ public class ThenGSpec extends BaseGSpec {\n             ThreadProperty.remove(\"queryresponse\" + i);\n         }\n \n-        assertThat(tablePattern).as(\"response is not equal to the expected\").isEqualTo(sqlTable);\n+        assertThat(tablePattern).as(\"response is not equal to the expected\")\n+            .isEqualTo(sqlTable);\n     }\n \n     /**\n@@ -1068,7 +1250,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Then(\"^'(.+?)' '(.+?)' exists$\")\n-    public void checkObjectExists(String objetType, String objectName) throws Exception {\n+    public void checkObjectExists(String objetType, String objectName)\n+        throws Exception {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n \n@@ -1076,47 +1259,68 @@ public class ThenGSpec extends BaseGSpec {\n \n         switch (objetType) {\n             case \"Database\":\n-                query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" +\n+                        objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Table\":\n-                query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query = \"SELECT tablename FROM pg_tables WHERE tablename = \" +\n+                    \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"View\":\n-                query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" +\n+                        objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Sequence\":\n-                query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Foreign Data Wrapper\":\n-                query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Foreign Server\":\n-                query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Function\":\n-                query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Schema\":\n-                query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Domain\":\n-                query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT domain_name from information_schema.domains WHERE domain_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Type\":\n-                query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Column\":\n-                query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"select column_name from information_schema.columns WHERE column_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             default:\n@@ -1129,11 +1333,15 @@ public class ThenGSpec extends BaseGSpec {\n             ResultSet rs = myStatement.executeQuery(query);\n             //if there are no data row\n             if (rs.next() == false) {\n-                assertThat(rs.next()).as(\"there are no \" + objetType + \": \" + objectName).isTrue();\n+                assertThat(rs.next())\n+                    .as(\"there are no \" + objetType + \": \" + objectName)\n+                    .isTrue();\n             } else {\n                 //data exist\n                 String resultName = rs.getString(1);\n-                assertThat(resultName).as(\"there are incorrect \" + objetType + \" name: \" + objectName).contains(objectName);\n+                assertThat(resultName)\n+                    .as(\"there are incorrect \" + objetType + \" name: \" +\n+                        objectName).contains(objectName);\n             }\n             rs.close();\n             myStatement.close();\n@@ -1143,7 +1351,8 @@ public class ThenGSpec extends BaseGSpec {\n     }\n \n     @Then(\"^'(.+?)' '(.+?)' doesn't exists$\")\n-    public void checkObjectNoExists(String objetType, String objectName) throws Exception {\n+    public void checkObjectNoExists(String objetType, String objectName)\n+        throws Exception {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n \n@@ -1151,47 +1360,68 @@ public class ThenGSpec extends BaseGSpec {\n \n         switch (objetType) {\n             case \"Database\":\n-                query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" +\n+                        objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Table\":\n-                query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query = \"SELECT tablename FROM pg_tables WHERE tablename = \" +\n+                    \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"View\":\n-                query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" +\n+                        objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Sequence\":\n-                query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Foreign Data Wrapper\":\n-                query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Foreign Server\":\n-                query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Function\":\n-                query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Schema\":\n-                query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Domain\":\n-                query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT domain_name from information_schema.domains WHERE domain_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Type\":\n-                query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             case \"Column\":\n-                query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n+                query =\n+                    \"select column_name from information_schema.columns WHERE column_name = \" +\n+                        \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n \n             default:\n@@ -1204,10 +1434,12 @@ public class ThenGSpec extends BaseGSpec {\n             ResultSet rs = myStatement.executeQuery(query);\n             //if there are no data row, table doesn't exists\n             if (rs.next() == false) {\n-                assertThat(rs.next()).as(objectName + \" exists \" + objectName).isFalse();\n+                assertThat(rs.next()).as(objectName + \" exists \" + objectName)\n+                    .isFalse();\n             } else {\n                 String resultName = rs.getString(1);\n-                assertThat(resultName).as(objectName + \" exists \" + objectName).isEqualToIgnoringCase(objectName);\n+                assertThat(resultName).as(objectName + \" exists \" + objectName)\n+                    .isEqualToIgnoringCase(objectName);\n             }\n             rs.close();\n             myStatement.close();\n@@ -1219,13 +1451,15 @@ public class ThenGSpec extends BaseGSpec {\n     /**\n      * Check service status has value specified\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param status    status expected\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param status  status expected\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' status in cluster '(.+?)' is '(suspended|running|deploying)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n-    public void serviceStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n+    public void serviceStatusCheck(String service, String cluster,\n+                                   String status, String foo, Integer totalWait,\n+                                   Integer interval) throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n@@ -1235,27 +1469,33 @@ public class ThenGSpec extends BaseGSpec {\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger().info(\n+                    \"Service status not found yet after \" + i + \" seconds\");\n                 i = i + interval;\n                 response = commonspec.retrieveServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" +\n+                response).matches(response);\n \n     }\n \n     /**\n      * Check service health status has value specified\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param status    health status expected\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param status  health status expected\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' health status in cluster '(.+?)' is '(unhealthy|healthy|unknown)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n-    public void serviceHealthStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n+    public void serviceHealthStatusCheck(String service, String cluster,\n+                                         String status, String foo,\n+                                         Integer totalWait, Integer interval)\n+        throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n@@ -1265,14 +1505,19 @@ public class ThenGSpec extends BaseGSpec {\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service health status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger().info(\n+                    \"Service health status not found yet after \" + i +\n+                        \" seconds\");\n                 i = i + interval;\n-                response = commonspec.retrieveHealthServiceStatus(service, cluster);\n+                response =\n+                    commonspec.retrieveHealthServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" +\n+                response).matches(response);\n     }\n \n     @Then(\"^I save metabase selenium cookies in context$\")\n@@ -1281,8 +1526,10 @@ public class ThenGSpec extends BaseGSpec {\n         int i = 0;\n \n         while (!found && i < 3) {\n-            if (this.commonspec.getDriver().manage().getCookies().toString().contains(\"metabase\")) {\n-                this.commonspec.setSeleniumCookies(this.commonspec.getDriver().manage().getCookies());\n+            if (this.commonspec.getDriver().manage().getCookies().toString()\n+                .contains(\"metabase\")) {\n+                this.commonspec.setSeleniumCookies(\n+                    this.commonspec.getDriver().manage().getCookies());\n                 found = true;\n             } else {\n                 Thread.sleep(2000);\n@@ -1292,7 +1539,8 @@ public class ThenGSpec extends BaseGSpec {\n \n         if (!found) {\n             seleniumSnapshot();\n-            throw new Exception (\"It has not been possible to save Metabase cookies\");\n+            throw new Exception(\n+                \"It has not been possible to save Metabase cookies\");\n         }\n     }\n \n",
            "diff_size": 443
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "342",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "798",
                    "column": "15",
                    "severity": "error",
                    "message": "'assert' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "996",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1078",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1081",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1084",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1087",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1090",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1093",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1096",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1099",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1102",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1105",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1108",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1111",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1142",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1145",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1148",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1151",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1154",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1157",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1160",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1163",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1166",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1169",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1172",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1175",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/21/ThenGSpec.java\nindex fd7c9fa3bc..f4371394be 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/21/ThenGSpec.java\n@@ -337,9 +337,9 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws ClassNotFoundException\n      */\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, '(\\\\d+?)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n-        List<WebElement> wel = null;\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount, String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+\n+    List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n             if (wel.size() == expectedCount) {\n@@ -647,7 +647,8 @@ public class ThenGSpec extends BaseGSpec {\n         Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n \n     }\n-    /**\n+\n+/**\n      * Check if the length of the cookie set match with the number of cookies thas must be saved\n      *\n      * @param numberOfCookies number of cookies that must be saved\n@@ -794,7 +795,7 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^An elasticsearch index named '(.+?)' exists\")\n     public void elasticSearchIndexExist(String indexName) {\n-        assert (commonspec.getElasticSearchClient().indexExists(indexName)) : \"There is no index with that name\";\n+        assert(commonspec.getElasticSearchClient().indexExists(indexName)) : \"There is no index with that name\";\n     }\n \n     /**\n@@ -941,7 +942,6 @@ public class ThenGSpec extends BaseGSpec {\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-\n     }\n \n \n@@ -993,9 +993,7 @@ public class ThenGSpec extends BaseGSpec {\n         List<String> tablePattern = new ArrayList<String>();\n         //comparison is by lists of string\n         tablePattern = dataTable.asList(String.class);\n-\n-\n-        Connection myConnection = this.commonspec.getConnection();\n+Connection myConnection = this.commonspec.getConnection();\n         String query = \"SELECT * FROM \" + tableName + \" order by \" + \"id\" + \";\";\n         try {\n             myStatement = myConnection.createStatement();\n@@ -1042,8 +1040,7 @@ public class ThenGSpec extends BaseGSpec {\n      */\n     @Then(\"^I check that result is:$\")\n     public void comparetable(DataTable dataTable) throws Exception {\n-\n-        //from Cucumber Datatable, the pattern to verify\n+    //from Cucumber Datatable, the pattern to verify\n         List<String> tablePattern = new ArrayList<String>();\n         tablePattern = dataTable.asList(String.class);\n         //the result from select\n@@ -1078,51 +1075,40 @@ public class ThenGSpec extends BaseGSpec {\n             case \"Database\":\n                 query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Table\":\n+    case \"Table\":\n                 query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"View\":\n+    case \"View\":\n                 query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Sequence\":\n+    case \"Sequence\":\n                 query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Foreign Data Wrapper\":\n+    case \"Foreign Data Wrapper\":\n                 query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Foreign Server\":\n+    case \"Foreign Server\":\n                 query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Function\":\n+    case \"Function\":\n                 query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Schema\":\n+    case \"Schema\":\n                 query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Domain\":\n+    case \"Domain\":\n                 query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Type\":\n+    case \"Type\":\n                 query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Column\":\n+    case \"Column\":\n                 query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            default:\n+    default:\n                 query = \"SELECT 1;\";\n                 break;\n-        }\n+    }\n \n         try {\n             myStatement = myConnection.createStatement();\n@@ -1153,51 +1139,40 @@ public class ThenGSpec extends BaseGSpec {\n             case \"Database\":\n                 query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Table\":\n+    case \"Table\":\n                 query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"View\":\n+    case \"View\":\n                 query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Sequence\":\n+    case \"Sequence\":\n                 query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Foreign Data Wrapper\":\n+    case \"Foreign Data Wrapper\":\n                 query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Foreign Server\":\n+    case \"Foreign Server\":\n                 query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Function\":\n+    case \"Function\":\n                 query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Schema\":\n+    case \"Schema\":\n                 query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Domain\":\n+    case \"Domain\":\n                 query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Type\":\n+    case \"Type\":\n                 query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            case \"Column\":\n+    case \"Column\":\n                 query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n-            default:\n+    default:\n                 query = \"SELECT 1;\";\n                 break;\n-        }\n+    }\n \n         try {\n             myStatement = myConnection.createStatement();\n@@ -1292,9 +1267,8 @@ public class ThenGSpec extends BaseGSpec {\n \n         if (!found) {\n             seleniumSnapshot();\n-            throw new Exception (\"It has not been possible to save Metabase cookies\");\n+            throw new Exception(\"It has not been possible to save Metabase cookies\");\n         }\n     }\n \n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "771",
                    "column": "41",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "773",
                    "column": "86",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "780",
                    "column": "15",
                    "severity": "error",
                    "message": "'assert' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "780",
                    "column": "64",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "792",
                    "column": "84",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "804",
                    "column": "15",
                    "severity": "error",
                    "message": "'assert' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "804",
                    "column": "84",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "854",
                    "column": "76",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "866",
                    "column": "15",
                    "severity": "error",
                    "message": "'assert' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "866",
                    "column": "74",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "932",
                    "column": "90",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "938",
                    "column": "78",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/21/ThenGSpec.java\nindex fd7c9fa3bc..a9a635f66f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/21/ThenGSpec.java\n@@ -34,7 +34,6 @@ import org.json.JSONArray;\n import org.ldaptive.LdapAttribute;\n import org.openqa.selenium.Cookie;\n import org.openqa.selenium.WebElement;\n-\n import java.sql.Connection;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n@@ -43,6 +42,7 @@ import java.util.*;\n import java.util.regex.Pattern;\n \n import static com.stratio.qa.assertions.Assertions.assertThat;\n+\n import static org.testng.AssertJUnit.fail;\n \n /**\n@@ -50,6 +50,8 @@ import static org.testng.AssertJUnit.fail;\n  *\n  * @see <a href=\"ThenGSpec-annotations.html\">Then Steps &amp; Matching Regex</a>\n  */\n+\n+\n public class ThenGSpec extends BaseGSpec {\n \n     public static final int VALUE_SUBSTRING = 3;\n@@ -59,6 +61,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param spec\n      */\n+\n+\n     public ThenGSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n@@ -72,9 +76,10 @@ public class ThenGSpec extends BaseGSpec {\n      * @param bar\n      * @param exceptionMsg\n      */\n+\n+\n     @Then(\"^an exception '(.+?)' thrown( with class '(.+?)'( and message like '(.+?)')?)?\")\n-    public void assertExceptionNotThrown(String exception, String foo, String clazz, String bar, String exceptionMsg)\n-            throws ClassNotFoundException {\n+    public void assertExceptionNotThrown(String exception, String foo, String clazz, String bar, String exceptionMsg) throws ClassNotFoundException {\n         List<Exception> exceptions = commonspec.getExceptions();\n         if (\"IS NOT\".equals(exception)) {\n             assertThat(exceptions).as(\"Captured exception list is not empty\").isEmpty();\n@@ -84,11 +89,9 @@ public class ThenGSpec extends BaseGSpec {\n             if ((clazz != null) && (exceptionMsg != null)) {\n                 assertThat(ex.toString()).as(\"Unexpected last exception class\").contains(clazz);\n                 assertThat(ex.toString()).as(\"Unexpected last exception message\").contains(exceptionMsg);\n-\n             } else if (clazz != null) {\n                 assertThat(exceptions.get(exceptions.size() - 1).getClass().getSimpleName()).as(\"Unexpected last exception class\").isEqualTo(clazz);\n             }\n-\n             commonspec.getExceptions().clear();\n         }\n     }\n@@ -98,6 +101,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param keyspace\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' exists$\")\n     public void assertKeyspaceOnCassandraExists(String keyspace) {\n         assertThat(commonspec.getCassandraClient().getKeyspaces()).as(\"The keyspace \" + keyspace + \" exists on cassandra\").contains(keyspace);\n@@ -108,6 +113,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param keyspace\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' does not exist$\")\n     public void assertKeyspaceOnCassandraDoesNotExist(String keyspace) {\n         assertThat(commonspec.getCassandraClient().getKeyspaces()).as(\"The keyspace \" + keyspace + \" does not exist on cassandra\").doesNotContain(keyspace);\n@@ -119,6 +126,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param keyspace\n      * @param tableName\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)'$\")\n     public void assertTableExistsOnCassandraKeyspace(String keyspace, String tableName) {\n         assertThat(commonspec.getCassandraClient().getTables(keyspace)).as(\"The table \" + tableName + \"exists on cassandra\").contains(tableName);\n@@ -130,6 +139,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param keyspace\n      * @param tableName\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' does not contain a table '(.+?)'$\")\n     public void assertTableDoesNotExistOnCassandraKeyspace(String keyspace, String tableName) {\n         assertThat(commonspec.getCassandraClient().getTables(keyspace)).as(\"The table \" + tableName + \"exists on cassandra\").doesNotContain(tableName);\n@@ -142,12 +153,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param tableName\n      * @param numberRows\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)' with '(.+?)' rows$\")\n     public void assertRowNumberOfTableOnCassandraKeyspace(String keyspace, String tableName, String numberRows) {\n         Long numberRowsLong = Long.parseLong(numberRows);\n         commonspec.getCassandraClient().useKeyspace(keyspace);\n-        assertThat(commonspec.getCassandraClient().executeQuery(\"SELECT COUNT(*) FROM \" + tableName + \";\").all().get(0).getLong(0)).as(\"The table \" + tableName + \"exists on cassandra\").\n-                isEqualTo(numberRowsLong);\n+        assertThat(commonspec.getCassandraClient().executeQuery(\"SELECT COUNT(*) FROM \" + tableName + \";\").all().get(0).getLong(0)).as(\"The table \" + tableName + \"exists on cassandra\").isEqualTo(numberRowsLong);\n     }\n \n     /**\n@@ -158,6 +170,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param data\n      * @throws InterruptedException\n      */\n+\n+\n     @Then(\"^a Cassandra keyspace '(.+?)' contains a table '(.+?)' with values:$\")\n     public void assertValuesOfTable(String keyspace, String tableName, DataTable data) throws InterruptedException {\n         //  USE of Keyspace\n@@ -178,12 +192,12 @@ public class ThenGSpec extends BaseGSpec {\n             res = commonspec.getCassandraClient().executeQuery(execQuery);\n             List<Row> resAsList = res.all();\n             assertThat(resAsList.size()).as(\"The query \" + execQuery + \" not return any result on Cassandra\").isGreaterThan(0);\n-            assertThat(resAsList.get(0).toString()\n-                    .substring(VALUE_SUBSTRING)).as(\"The resultSet is not as expected\").isEqualTo(data.raw().get(index).toString().replace(\"'\", \"\"));\n+            assertThat(resAsList.get(0).toString().substring(VALUE_SUBSTRING)).as(\"The resultSet is not as expected\").isEqualTo(data.raw().get(index).toString().replace(\"'\", \"\"));\n             index++;\n         }\n     }\n \n+\n     @SuppressWarnings(\"rawtypes\")\n     private void equalsColumns(ColumnDefinitions resCols, Map<String, String> dataTableColumns) {\n         Iterator it = dataTableColumns.entrySet().iterator();\n@@ -217,7 +231,6 @@ public class ThenGSpec extends BaseGSpec {\n         }\n         condition.append(columnNames[columnNames.length - 1]).append(\" =\");\n         condition.append(\" \").append(values.get(values.size() - 1));\n-\n         condition.append(\" ALLOW FILTERING\");\n         return condition.toString();\n     }\n@@ -248,13 +261,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param tableName\n      * @param data\n      */\n+\n+\n     @Then(\"^a Mongo dataBase '(.+?)' contains a table '(.+?)' with values:\")\n     public void assertValuesOfTableMongo(String dataBase, String tableName, DataTable data) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(dataBase);\n-        ArrayList<DBObject> result = (ArrayList<DBObject>) commonspec.getMongoDBClient().readFromMongoDBCollection(\n-                tableName, data);\n+        ArrayList<DBObject> result = (ArrayList<DBObject>) commonspec.getMongoDBClient().readFromMongoDBCollection(tableName, data);\n         DBObjectsAssert.assertThat(result).containedInMongoDBResult(data);\n-\n     }\n \n     /**\n@@ -263,6 +276,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param database\n      * @param tableName\n      */\n+\n+\n     @Then(\"^a Mongo dataBase '(.+?)' doesnt contains a table '(.+?)'$\")\n     public void aMongoDataBaseContainsaTable(String database, String tableName) {\n         commonspec.getMongoDBClient().connectToMongoDBDataBase(database);\n@@ -276,10 +291,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @param index\n      * @param text\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as text$\")\n     public void assertSeleniumTextOnElementPresent(Integer index, String text) {\n-        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String elementText = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText().replace(\"\\n\", \" \").replace(\"\\r\", \" \");\n         if (!elementText.startsWith(\"regex:\")) {\n             //We are verifying that a web element contains a string\n@@ -295,6 +311,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param text\n      */\n+\n+\n     @Then(\"^this text exists '(.+?)'$\")\n     public void assertSeleniumTextInSource(String text) {\n         assertThat(this.commonspec, commonspec.getDriver()).as(\"Expected text not found at page\").contains(text);\n@@ -312,6 +330,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @Then(\"^'(\\\\d+?)' elements? exists? with '([^:]*?):(.+?)'$\")\n     public void assertSeleniumNElementExists(Integer expectedCount, String method, String element) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = commonspec.locateElement(method, element, expectedCount);\n@@ -336,9 +356,10 @@ public class ThenGSpec extends BaseGSpec {\n      * @throws NoSuchFieldException\n      * @throws ClassNotFoundException\n      */\n+\n+\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, '(\\\\d+?)' elements exists with '([^:]*?):(.+?)'$\")\n-    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount,\n-                                                      String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n+    public void assertSeleniumNElementExistsOnTimeOut(Integer timeout, Integer wait, Integer expectedCount, String method, String element) throws InterruptedException, ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         List<WebElement> wel = null;\n         for (int i = 0; i < timeout; i += wait) {\n             wel = commonspec.locateElement(method, element, -1);\n@@ -352,7 +373,6 @@ public class ThenGSpec extends BaseGSpec {\n         PreviousWebElements pwel = new PreviousWebElements(wel);\n         assertThat(this.commonspec, pwel).as(\"Element count doesnt match\").hasSize(expectedCount);\n         commonspec.setPreviousWebElements(pwel);\n-\n     }\n \n     /**\n@@ -366,6 +386,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param search\n      * @throws InterruptedException\n      */\n+\n+\n     @Then(\"^in less than '(\\\\d+?)' seconds, checking each '(\\\\d+?)' seconds, the command output '(.+?)' contains '(.+?)'( with exit status '(.+?)')?$\")\n     public void assertCommandExistsOnTimeOut(Integer timeout, Integer wait, String command, String search, String foo, Integer exitStatus) throws Exception {\n         Boolean found = false;\n@@ -391,6 +413,7 @@ public class ThenGSpec extends BaseGSpec {\n                 ex = e;\n             }\n         }\n+\n         if (!found) {\n             throw (ex);\n         }\n@@ -404,12 +427,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param index\n      * @param isDisplayed\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) displayed$\")\n     public void assertSeleniumIsDisplayed(Integer index, Boolean isDisplayed) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\n-                \"Unexpected element display property\").isEqualTo(isDisplayed);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isDisplayed()).as(\"Unexpected element display property\").isEqualTo(isDisplayed);\n     }\n \n     /**\n@@ -418,12 +442,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param index\n      * @param isEnabled\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) enabled$\")\n     public void assertSeleniumIsEnabled(Integer index, Boolean isEnabled) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled())\n-                .as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isEnabled()).as(\"Unexpected element enabled property\").isEqualTo(isEnabled);\n     }\n \n     /**\n@@ -432,12 +457,13 @@ public class ThenGSpec extends BaseGSpec {\n      * @param index\n      * @param isSelected\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+?)' (IS|IS NOT) selected$\")\n     public void assertSeleniumIsSelected(Integer index, Boolean isSelected) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\n-                \"Unexpected element selected property\").isEqualTo(isSelected);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n+        assertThat(this.commonspec, commonspec.getPreviousWebElements().getPreviousWebElements().get(index).isSelected()).as(\"Unexpected element selected property\").isEqualTo(isSelected);\n     }\n \n     /**\n@@ -447,10 +473,12 @@ public class ThenGSpec extends BaseGSpec {\n      * @param attribute\n      * @param value\n      */\n+\n+\n     @Then(\"^the element on index '(\\\\d+?)' has '(.+?)' as '(.+?)'$\")\n     public void assertSeleniumHasAttributeValue(Integer index, String attribute, String value) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String val = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getAttribute(attribute);\n         assertThat(this.commonspec, val).as(\"Attribute not found\").isNotNull();\n         assertThat(this.commonspec, val).as(\"Unexpected value for specified attribute\").matches(value);\n@@ -461,6 +489,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^I take a snapshot$\")\n     public void seleniumSnapshot() throws Exception {\n         commonspec.captureEvidence(commonspec.getDriver(), \"screenCapture\");\n@@ -472,9 +502,10 @@ public class ThenGSpec extends BaseGSpec {\n      * @param url\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^we are in page '(.+?)'$\")\n     public void checkURL(String url) throws Exception {\n-\n         if (commonspec.getWebHost() == null) {\n             throw new Exception(\"Web host has not been set\");\n         }\n@@ -484,17 +515,17 @@ public class ThenGSpec extends BaseGSpec {\n         }\n \n         String webURL = commonspec.getWebHost() + commonspec.getWebPort();\n-\n-        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url)\n-                .endsWith(webURL.toLowerCase() + url);\n+        assertThat(commonspec.getDriver().getCurrentUrl()).as(\"We are not in the expected url: \" + webURL.toLowerCase() + url).endsWith(webURL.toLowerCase() + url);\n     }\n \n+\n     @Then(\"^the service response must contain the text '(.*?)'$\")\n     public void assertResponseMessage(String expectedText) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException {\n         Pattern pattern = CommonG.matchesOrContains(expectedText);\n         assertThat(commonspec.getResponse().getResponse()).containsPattern(pattern);\n     }\n \n+\n     @Then(\"^the service response status must be '(.*?)'( and its response length must be '(.*?)' | and its response must contain the text '(.*?)')?$\")\n     public void assertResponseStatusLength(Integer expectedStatus, String foo, Integer expectedLength, String expectedText) {\n         if (foo != null) {\n@@ -515,7 +546,8 @@ public class ThenGSpec extends BaseGSpec {\n             try {\n                 assertThat(commonspec.getResponse().getStatusCode()).isEqualTo(expectedStatus);\n             } catch (AssertionError e) {\n-                commonspec.getLogger().warn(\"Response: {}\", commonspec.getResponse().getResponse());\n+                commonspec.getLogger().warn(\"Response: {}\",\n+                    commonspec.getResponse().getResponse());\n                 throw e;\n             }\n         }\n@@ -536,9 +568,10 @@ public class ThenGSpec extends BaseGSpec {\n      *                        IMPORTANT: There no should be no existing columns\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^There are results found with:$\")\n     public void resultsMustBe(DataTable expectedResults) throws Exception {\n-\n         String type = commonspec.getResultsType();\n         assertThat(type).isNotEqualTo(\"\").overridingErrorMessage(\"It's necessary to define the result type\");\n         switch (type) {\n@@ -564,6 +597,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param search\n      **/\n+\n+\n     @Then(\"^the command output contains '(.+?)'$\")\n     public void findShellOutput(String search) throws Exception {\n         assertThat(commonspec.getCommandResult()).as(\"Contains \" + search + \".\").contains(search);\n@@ -574,6 +609,8 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param search\n      **/\n+\n+\n     @Then(\"^the command output does not contain '(.+?)'$\")\n     public void notFindShellOutput(String search) throws Exception {\n         assertThat(commonspec.getCommandResult()).as(\"NotContains \" + search + \".\").doesNotContain(search);\n@@ -586,6 +623,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @deprecated Success exit status is directly checked in the \"execute remote command\" method, so this is not\n      * needed anymore.\n      **/\n+\n+\n     @Deprecated\n     @Then(\"^the command exit status is '(.+?)'$\")\n     public void checkShellExitStatus(int expectedExitStatus) throws Exception {\n@@ -595,6 +634,8 @@ public class ThenGSpec extends BaseGSpec {\n     /**\n      * Save cookie in context for future references\n      **/\n+\n+\n     @Then(\"^I save selenium cookies in context$\")\n     public void saveSeleniumCookies() throws Exception {\n         commonspec.setSeleniumCookies(commonspec.getDriver().manage().getCookies());\n@@ -604,10 +645,12 @@ public class ThenGSpec extends BaseGSpec {\n     /**\n      * Get dcos-auth-cookie\n      **/\n+\n+\n     @Then(\"^I save selenium dcos acs auth cookie in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String envVar) throws Exception {\n         if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(\"dcos-acs-auth-cookie\")) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -622,10 +665,12 @@ public class ThenGSpec extends BaseGSpec {\n     /**\n      * Get dcos-auth-cookie\n      **/\n+\n+\n     @Then(\"^I save selenium cookie '(.+?)' in variable '(.+?)'$\")\n     public void getDcosAcsAuthCookie(String cookieName, String envVar) throws Exception {\n         if (commonspec.getSeleniumCookies() != null && commonspec.getSeleniumCookies().size() != 0) {\n-            for (Cookie cookie: commonspec.getSeleniumCookies()) {\n+            for (Cookie cookie : commonspec.getSeleniumCookies()) {\n                 if (cookie.getName().contains(cookieName)) {\n                     //It's this cookie where we have to extract the value\n                     ThreadProperty.set(envVar, cookie.getValue());\n@@ -642,16 +687,19 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param cookieName string with the name of the cookie\n      */\n+\n+\n     @Then(\"^The cookie '(.+?)' exists in the saved cookies$\")\n     public void checkIfCookieExists(String cookieName) {\n         Assertions.assertThat(commonspec.cookieExists(cookieName)).isEqualTo(true);\n-\n     }\n     /**\n      * Check if the length of the cookie set match with the number of cookies thas must be saved\n      *\n      * @param numberOfCookies number of cookies that must be saved\n      */\n+\n+\n     @Then(\"^I have '(.+?)' selenium cookies saved$\")\n     public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n         Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n@@ -664,15 +712,15 @@ public class ThenGSpec extends BaseGSpec {\n      * @param envVar environment variable where JSON is stored\n      * @param table  data table in which each row stores one expression\n      */\n+\n+\n     @Then(\"^'(.+?)' matches the following cases:$\")\n     public void matchWithExpresion(String envVar, DataTable table) throws Exception {\n         String jsonString = ThreadProperty.get(envVar);\n-\n         for (DataTableRow row : table.getGherkinRows()) {\n             String expression = row.getCells().get(0);\n             String condition = row.getCells().get(1);\n             String result = row.getCells().get(2);\n-\n             String value = commonspec.getJSONPathString(jsonString, expression, null);\n             commonspec.evaluateJSONElementOperation(value, condition, result);\n         }\n@@ -686,15 +734,15 @@ public class ThenGSpec extends BaseGSpec {\n      * @param service\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^I add a new DCOS label with key '(.+?)' and value '(.+?)' to the service '(.+?)'?$\")\n     public void sendAppendRequest(String key, String value, String service) throws Exception {\n         commonspec.runCommandAndGetResult(\"touch \" + service + \".json && dcos marathon app show \" + service + \" > /dcos/\" + service + \".json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \".json\");\n-\n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n         String myValue = commonspec.getJSONPathString(configFile, \".labels\", \"0\");\n         String myJson = commonspec.updateMarathonJson(commonspec.removeJSONPathElement(configFile, \"$.labels\"));\n-\n         String newValue = myValue.replaceFirst(\"\\\\{\", \"{\\\"\" + key + \"\\\": \\\"\" + value + \"\\\", \");\n         newValue = \"\\\"labels\\\":\" + newValue;\n         String myFinalJson = myJson.replaceFirst(\"\\\\{\", \"{\" + newValue.replace(\"\\\\n\", \"\\\\\\\\n\") + \",\");\n@@ -705,7 +753,6 @@ public class ThenGSpec extends BaseGSpec {\n             commonspec.runCommandAndGetResult(\"echo '\" + myFinalJson + \"' > /dcos/final\" + service + \".json\");\n         }\n         commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \".json\");\n-\n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n     }\n \n@@ -715,19 +762,22 @@ public class ThenGSpec extends BaseGSpec {\n      * @param zNode    path at zookeeper\n      * @param document expected content of znode\n      */\n+\n+\n     @Then(\"^the zNode '(.+?)' exists( and contains '(.+?)')?$\")\n     public void checkZnodeExists(String zNode, String foo, String document) throws Exception {\n         if (document == null) {\n             String breakpoint = commonspec.getZookeeperSecClient().zRead(zNode);\n-            assert breakpoint.equals(\"\") : \"The zNode does not exist\";\n+            assert breakpoint.equals(\"\"): \"The zNode does not exist\";\n         } else {\n-            assert commonspec.getZookeeperSecClient().zRead(zNode).contains(document) : \"The zNode does not exist or the content does not match\";\n+            assert commonspec.getZookeeperSecClient().zRead(zNode).contains(document): \"The zNode does not exist or the content does not match\";\n         }\n     }\n \n+\n     @Then(\"^the zNode '(.+?)' does not exist\")\n     public void checkZnodeNotExist(String zNode) throws Exception {\n-        assert !commonspec.getZookeeperSecClient().exists(zNode) : \"The zNode exists\";\n+        assert!commonspec.getZookeeperSecClient().exists(zNode): \"The zNode exists\";\n     }\n \n     /**\n@@ -735,9 +785,11 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param topic_name name of topic\n      */\n+\n+\n     @Then(\"^A kafka topic named '(.+?)' exists\")\n     public void kafkaTopicExist(String topic_name) throws KeeperException, InterruptedException {\n-        assert commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name) : \"There is no topic with that name\";\n+        assert commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name): \"There is no topic with that name\";\n     }\n \n     /**\n@@ -745,9 +797,11 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param topic_name name of topic\n      */\n+\n+\n     @Then(\"^A kafka topic named '(.+?)' does not exist\")\n     public void kafkaTopicNotExist(String topic_name) throws KeeperException, InterruptedException {\n-        assert !commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name) : \"There is a topic with that name\";\n+        assert!commonspec.getKafkaUtils().getZkUtils().pathExists(\"/\" + topic_name): \"There is a topic with that name\";\n     }\n \n \n@@ -759,16 +813,16 @@ public class ThenGSpec extends BaseGSpec {\n      * @param service\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^I modify marathon environment variable '(.+?)' with value '(.+?)' for service '(.+?)'?$\")\n     public void setMarathonProperty(String key, String value, String service) throws Exception {\n         commonspec.runCommandAndGetResult(\"touch \" + service + \"-env.json && dcos marathon app show \" + service + \" > /dcos/\" + service + \"-env.json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \"-env.json\");\n-\n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n         String myJson1 = commonspec.replaceJSONPathElement(configFile, key, value);\n         String myJson4 = commonspec.updateMarathonJson(myJson1);\n         String myJson = myJson4.replaceAll(\"\\\"uris\\\"\", \"\\\"none\\\"\");\n-\n         commonspec.runCommandAndGetResult(\"echo '\" + myJson + \"' > /dcos/final\" + service + \"-env.json\");\n         commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \"-env.json\");\n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n@@ -781,10 +835,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @param numOfPartitions Number of partitions\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^The number of partitions in topic '(.+?)' should be '(.+?)''?$\")\n     public void checkNumberOfPartitions(String topic_name, int numOfPartitions) throws Exception {\n         Assertions.assertThat(commonspec.getKafkaUtils().getPartitions(topic_name)).isEqualTo(numOfPartitions);\n-\n     }\n \n     /**\n@@ -792,9 +847,11 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param indexName\n      */\n+\n+\n     @Then(\"^An elasticsearch index named '(.+?)' exists\")\n     public void elasticSearchIndexExist(String indexName) {\n-        assert (commonspec.getElasticSearchClient().indexExists(indexName)) : \"There is no index with that name\";\n+        assert (commonspec.getElasticSearchClient().indexExists(indexName)): \"There is no index with that name\";\n     }\n \n     /**\n@@ -802,9 +859,11 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param indexName\n      */\n+\n+\n     @Then(\"^An elasticsearch index named '(.+?)' does not exist\")\n     public void elasticSearchIndexDoesNotExist(String indexName) {\n-        assert !commonspec.getElasticSearchClient().indexExists(indexName) : \"There is an index with that name\";\n+        assert!commonspec.getElasticSearchClient().indexExists(indexName): \"There is an index with that name\";\n     }\n \n     /**\n@@ -814,15 +873,11 @@ public class ThenGSpec extends BaseGSpec {\n      * @param columnName\n      * @param columnValue\n      */\n+\n+\n     @Then(\"^The Elasticsearch index named '(.+?)' and mapping '(.+?)' contains a column named '(.+?)' with the value '(.+?)'$\")\n     public void elasticSearchIndexContainsDocument(String indexName, String mappingName, String columnName, String columnValue) throws Exception {\n-        Assertions.assertThat((commonspec.getElasticSearchClient().searchSimpleFilterElasticsearchQuery(\n-                indexName,\n-                mappingName,\n-                columnName,\n-                columnValue,\n-                \"equals\"\n-        ).size()) > 0).isTrue().withFailMessage(\"The index does not contain that document\");\n+        Assertions.assertThat((commonspec.getElasticSearchClient().searchSimpleFilterElasticsearchQuery(indexName, mappingName, columnName, columnValue, \"equals\").size()) > 0).isTrue().withFailMessage(\"The index does not contain that document\");\n     }\n \n     /*\n@@ -832,6 +887,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param value\n      *\n      */\n+\n+\n     @Then(\"^'(?s)(.+?)' ((?!.*with).+?) '(.+?)'$\")\n     public void checkValue(String envVar, String operation, String value) throws Exception {\n         switch (operation.toLowerCase()) {\n@@ -869,16 +926,19 @@ public class ThenGSpec extends BaseGSpec {\n         }\n     }\n \n+\n     @Then(\"^The kafka topic '(.*?)' has a message containing '(.*?)'$\")\n     public void checkMessages(String topic, String content) {\n-        assert commonspec.getKafkaUtils().readTopicFromBeginning(topic).contains(content) : \"Topic does not exist or the content does not match\";\n+        assert commonspec.getKafkaUtils().readTopicFromBeginning(topic).contains(content): \"Topic does not exist or the content does not match\";\n     }\n \n+\n     @Then(\"^The kafka topic '(.*?)' has a message that contains '(.*?)'$\")\n     public void checkMessagesContent(String topic, String content) {\n-        assert commonspec.getKafkaUtils().checkMessageContent(topic, content) : \"Topic does not exist or the content does not match\";\n+        assert commonspec.getKafkaUtils().checkMessageContent(topic, content): \"Topic does not exist or the content does not match\";\n     }\n \n+\n     @Then(\"^The kafka topic '(.*?)' has '(.+?)' messages$\")\n     public void checkMessageOfTopicLentgh(String topic, int numberOfMessages) {\n         Assertions.assertThat(commonspec.getKafkaUtils().checkTopicMessagesLenght(topic)).isEqualTo(numberOfMessages);\n@@ -890,10 +950,12 @@ public class ThenGSpec extends BaseGSpec {\n      * @param index  position of the element in the array of webElements found\n      * @param envVar name of the thread environment variable where to store the text\n      */\n+\n+\n     @Then(\"^I save content of element in index '(\\\\d+?)' in environment variable '(.+?)'$\")\n     public void saveContentWebElementInEnvVar(Integer index, String envVar) {\n-        assertThat(this.commonspec, commonspec.getPreviousWebElements()).as(\"There are less found elements than required\")\n-                .hasAtLeast(index);\n+        assertThat(this.commonspec,\n+            commonspec.getPreviousWebElements()).as(\"There are less found elements than required\").hasAtLeast(index);\n         String text = commonspec.getPreviousWebElements().getPreviousWebElements().get(index).getText();\n         ThreadProperty.set(envVar, text);\n     }\n@@ -904,6 +966,8 @@ public class ThenGSpec extends BaseGSpec {\n      * @param attributeName The name of the attribute to look for in the LdapEntry\n      * @param expectedValue The expected value of the attribute\n      */\n+\n+\n     @Then(\"^the LDAP entry contains the attribute '(.+?)' with the value '(.+?)'$\")\n     public void ldapEntryContains(String attributeName, String expectedValue) {\n         if (this.commonspec.getPreviousLdapResults().isPresent()) {\n@@ -918,6 +982,8 @@ public class ThenGSpec extends BaseGSpec {\n      * checks table existence\n      *\n      */\n+\n+\n     @Then(\"^table '(.+?)' exists$\")\n     public void checkTable(String tableName) throws Exception {\n         Statement myStatement = null;\n@@ -941,7 +1007,6 @@ public class ThenGSpec extends BaseGSpec {\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n-\n     }\n \n \n@@ -950,11 +1015,12 @@ public class ThenGSpec extends BaseGSpec {\n      * checks table existence negative case\n      *\n      */\n+\n+\n     @Then(\"^table '(.+?)' doesn't exists$\")\n     public void checkTableFalse(String tableName) throws Exception {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n-\n         String query = \"SELECT * FROM pg_tables WHERE tablename = \" + \"\\'\" + tableName + \"\\'\" + \";\";\n         try {\n             myStatement = myConnection.createStatement();\n@@ -981,6 +1047,8 @@ public class ThenGSpec extends BaseGSpec {\n      * by default: order by id\n      *\n      */\n+\n+\n     @Then(\"^I check that table '(.+?)' is iqual to$\")\n     public void comparetable(String tableName, DataTable dataTable) throws Exception {\n         Statement myStatement = null;\n@@ -993,8 +1061,6 @@ public class ThenGSpec extends BaseGSpec {\n         List<String> tablePattern = new ArrayList<String>();\n         //comparison is by lists of string\n         tablePattern = dataTable.asList(String.class);\n-\n-\n         Connection myConnection = this.commonspec.getConnection();\n         String query = \"SELECT * FROM \" + tableName + \" order by \" + \"id\" + \";\";\n         try {\n@@ -1016,7 +1082,6 @@ public class ThenGSpec extends BaseGSpec {\n                 }\n             }\n             sqlTable.addAll(sqlTableAux);\n-\n             assertThat(sqlTable).as(\"Not equal elements!\").isEqualTo(tablePattern);\n             rs.close();\n             myStatement.close();\n@@ -1030,6 +1095,8 @@ public class ThenGSpec extends BaseGSpec {\n      * closes opened database\n      *\n      */\n+\n+\n     @Then(\"^I close database connection$\")\n     public void closeDatabase() throws Exception {\n         this.commonspec.getConnection().close();\n@@ -1040,6 +1107,8 @@ public class ThenGSpec extends BaseGSpec {\n      * checks the result from select\n      *\n      */\n+\n+\n     @Then(\"^I check that result is:$\")\n     public void comparetable(DataTable dataTable) throws Exception {\n \n@@ -1054,11 +1123,9 @@ public class ThenGSpec extends BaseGSpec {\n             String ip_value = ThreadProperty.get(\"queryresponse\" + i);\n             sqlTable.add(i, ip_value);\n         }\n-\n         for (int i = 0; ThreadProperty.get(\"queryresponse\" + i) != null; i++) {\n             ThreadProperty.remove(\"queryresponse\" + i);\n         }\n-\n         assertThat(tablePattern).as(\"response is not equal to the expected\").isEqualTo(sqlTable);\n     }\n \n@@ -1067,63 +1134,51 @@ public class ThenGSpec extends BaseGSpec {\n      * @param objectName\n      * @throws Exception\n      */\n+\n+\n     @Then(\"^'(.+?)' '(.+?)' exists$\")\n     public void checkObjectExists(String objetType, String objectName) throws Exception {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n-\n         String query;\n-\n         switch (objetType) {\n             case \"Database\":\n                 query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Table\":\n                 query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"View\":\n                 query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Sequence\":\n                 query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Foreign Data Wrapper\":\n                 query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Foreign Server\":\n                 query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Function\":\n                 query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Schema\":\n                 query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Domain\":\n                 query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Type\":\n                 query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Column\":\n                 query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             default:\n                 query = \"SELECT 1;\";\n                 break;\n         }\n-\n         try {\n             myStatement = myConnection.createStatement();\n             ResultSet rs = myStatement.executeQuery(query);\n@@ -1142,63 +1197,50 @@ public class ThenGSpec extends BaseGSpec {\n         }\n     }\n \n+\n     @Then(\"^'(.+?)' '(.+?)' doesn't exists$\")\n     public void checkObjectNoExists(String objetType, String objectName) throws Exception {\n         Statement myStatement = null;\n         Connection myConnection = this.commonspec.getConnection();\n-\n         String query;\n-\n         switch (objetType) {\n             case \"Database\":\n                 query = \"SELECT datname FROM pg_database WHERE datname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Table\":\n                 query = \"SELECT tablename FROM pg_tables WHERE tablename = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"View\":\n                 query = \"SELECT viewname FROM pg_views WHERE viewname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Sequence\":\n                 query = \"SELECT sequence_name FROM information_schema.sequences WHERE sequence_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Foreign Data Wrapper\":\n                 query = \"SELECT foreign_data_wrapper_name FROM information_schema.foreign_data_wrappers WHERE foreign_data_wrapper_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Foreign Server\":\n                 query = \"SELECT foreign_server_name FROM information_schema.foreign_servers WHERE foreign_server_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Function\":\n                 query = \"SELECT p.proname FROM pg_catalog.pg_proc p JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace WHERE p.proname = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Schema\":\n                 query = \"SELECT schema_name from information_schema.schemata join pg_namespace on schema_name = nspname where schema_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Domain\":\n                 query = \"SELECT domain_name from information_schema.domains WHERE domain_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Type\":\n                 query = \"SELECT user_defined_type_name FROM information_schema.user_defined_types WHERE user_defined_type_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             case \"Column\":\n                 query = \"select column_name from information_schema.columns WHERE column_name = \" + \"\\'\" + objectName + \"\\'\" + \";\";\n                 break;\n-\n             default:\n                 query = \"SELECT 1;\";\n                 break;\n         }\n-\n         try {\n             myStatement = myConnection.createStatement();\n             ResultSet rs = myStatement.executeQuery(query);\n@@ -1224,14 +1266,14 @@ public class ThenGSpec extends BaseGSpec {\n      * @param status    status expected\n      * @throws Exception exception     *\n      */\n+\n+\n     @Then(\"^service '(.+?)' status in cluster '(.+?)' is '(suspended|running|deploying)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n     public void serviceStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n-\n         response = commonspec.retrieveServiceStatus(service, cluster);\n-\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n@@ -1241,9 +1283,7 @@ public class ThenGSpec extends BaseGSpec {\n                 matched = status.matches(response);\n             }\n         }\n-\n         assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n-\n     }\n \n     /**\n@@ -1254,14 +1294,14 @@ public class ThenGSpec extends BaseGSpec {\n      * @param status    health status expected\n      * @throws Exception exception     *\n      */\n+\n+\n     @Then(\"^service '(.+?)' health status in cluster '(.+?)' is '(unhealthy|healthy|unknown)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n     public void serviceHealthStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n-\n         response = commonspec.retrieveHealthServiceStatus(service, cluster);\n-\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n@@ -1271,15 +1311,14 @@ public class ThenGSpec extends BaseGSpec {\n                 matched = status.matches(response);\n             }\n         }\n-\n         assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n     }\n \n+\n     @Then(\"^I save metabase selenium cookies in context$\")\n     public void saveMetabaseSeleniumCookies() throws Exception {\n         boolean found = false;\n         int i = 0;\n-\n         while (!found && i < 3) {\n             if (this.commonspec.getDriver().manage().getCookies().toString().contains(\"metabase\")) {\n                 this.commonspec.setSeleniumCookies(this.commonspec.getDriver().manage().getCookies());\n@@ -1292,9 +1331,7 @@ public class ThenGSpec extends BaseGSpec {\n \n         if (!found) {\n             seleniumSnapshot();\n-            throw new Exception (\"It has not been possible to save Metabase cookies\");\n+            throw new Exception(\"It has not been possible to save Metabase cookies\");\n         }\n     }\n-\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 230
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/21/ThenGSpec.java\nindex fd7c9fa3bc..daef32c97c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/21/ThenGSpec.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/21/ThenGSpec.java\n@@ -652,6 +652,7 @@ public class ThenGSpec extends BaseGSpec {\n      *\n      * @param numberOfCookies number of cookies that must be saved\n      */\n+\n     @Then(\"^I have '(.+?)' selenium cookies saved$\")\n     public void getSeleniumCookiesSize(int numberOfCookies) throws Exception {\n         Assertions.assertThat(commonspec.getSeleniumCookies().size()).isEqualTo(numberOfCookies);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "655",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}