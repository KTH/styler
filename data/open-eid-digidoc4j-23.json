{
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "67",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": " * ASIC container parser from input stream\n */\npublic class AsicStreamContainerParser extends AsicContainerParser{\n\n  private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n  private ZipInputStream zipInputStream;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..6e584528bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/23/AsicStreamContainerParser.java\n@@ -26,7 +26,7 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n+public class AsicStreamContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n   private ZipInputStream zipInputStream;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..58968a9e40 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/23/AsicStreamContainerParser.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -26,13 +26,13 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n+public class AsicStreamContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n   private ZipInputStream zipInputStream;\n \n   /**\n-   * @param inputStream input stream\n+   * @param inputStream   input stream\n    * @param configuration configuration\n    */\n   public AsicStreamContainerParser(InputStream inputStream, Configuration configuration) {\n@@ -50,9 +50,9 @@ public class AsicStreamContainerParser extends AsicContainerParser{\n     logger.debug(\"Parsing zip stream\");\n     try {\n       ZipEntry entry;\n-        while ((entry = zipInputStream.getNextEntry()) != null) {\n-          parseEntry(entry);\n-        }\n+      while ((entry = zipInputStream.getNextEntry()) != null) {\n+        parseEntry(entry);\n+      }\n     } catch (IOException e) {\n       logger.error(\"Error reading asic container stream: \" + e.getMessage());\n       throw new TechnicalException(\"Error reading asic container stream: \", e);\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..df6f02bcb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/23/AsicStreamContainerParser.java\n@@ -26,7 +26,7 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n+public class AsicStreamContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n   private ZipInputStream zipInputStream;\n@@ -50,10 +50,10 @@ public class AsicStreamContainerParser extends AsicContainerParser{\n     logger.debug(\"Parsing zip stream\");\n     try {\n       ZipEntry entry;\n-        while ((entry = zipInputStream.getNextEntry()) != null) {\n+while ((entry = zipInputStream.getNextEntry()) != null) {\n           parseEntry(entry);\n         }\n-    } catch (IOException e) {\n+  } catch (IOException e) {\n       logger.error(\"Error reading asic container stream: \" + e.getMessage());\n       throw new TechnicalException(\"Error reading asic container stream: \", e);\n     } finally {\n@@ -79,4 +79,4 @@ public class AsicStreamContainerParser extends AsicContainerParser{\n   protected InputStream getZipEntryInputStream(ZipEntry entry) {\n     return zipInputStream;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..c75e06fb71 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/23/AsicStreamContainerParser.java\n@@ -14,7 +14,6 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n-\n import org.apache.commons.io.IOUtils;\n import org.digidoc4j.Configuration;\n import org.digidoc4j.DataFile;\n@@ -26,32 +25,36 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n-  private ZipInputStream zipInputStream;\n+\n+public class AsicStreamContainerParser extends AsicContainerParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n+    private ZipInputStream zipInputStream;\n \n   /**\n    * @param inputStream input stream\n    * @param configuration configuration\n    */\n-  public AsicStreamContainerParser(InputStream inputStream, Configuration configuration) {\n+\n+\n+    public AsicStreamContainerParser(InputStream inputStream, Configuration configuration) {\n     super(configuration);\n     zipInputStream = new ZipInputStream(inputStream);\n-  }\n+    }\n \n-  @Override\n-  protected void parseContainer() {\n+    @Override\n+    protected void parseContainer() {\n     parseZipStream();\n     updateDataFilesMimeType();\n-  }\n+    }\n \n-  private void parseZipStream() {\n+    private void parseZipStream() {\n     logger.debug(\"Parsing zip stream\");\n     try {\n-      ZipEntry entry;\n+        ZipEntry entry;\n         while ((entry = zipInputStream.getNextEntry()) != null) {\n-          parseEntry(entry);\n+        parseEntry(entry);\n         }\n     } catch (IOException e) {\n       logger.error(\"Error reading asic container stream: \" + e.getMessage());\n@@ -59,24 +62,25 @@ public class AsicStreamContainerParser extends AsicContainerParser{\n     } finally {\n       IOUtils.closeQuietly(zipInputStream);\n     }\n-  }\n+    }\n \n-  private void updateDataFilesMimeType() {\n+    private void updateDataFilesMimeType() {\n     for (DataFile dataFile : getDataFiles().values()) {\n-      String fileName = dataFile.getName();\n-      String mimeType = MimeTypeUtil.mimeTypeOf(getDataFileMimeType(fileName)).getMimeTypeString();\n-      dataFile.setMediaType(mimeType);\n+        String fileName = dataFile.getName();\n+        String mimeType = MimeTypeUtil.mimeTypeOf(getDataFileMimeType(fileName)).getMimeTypeString();\n+        dataFile.setMediaType(mimeType);\n+    }\n     }\n-  }\n \n-  @Override\n-  protected void extractManifest(ZipEntry entry) {\n+    @Override\n+    protected void extractManifest(ZipEntry entry) {\n     AsicEntry asicEntry = extractAsicEntry(entry);\n     parseManifestEntry(asicEntry.getContent());\n-  }\n+    }\n \n-  @Override\n-  protected InputStream getZipEntryInputStream(ZipEntry entry) {\n+    @Override\n+    protected InputStream getZipEntryInputStream(ZipEntry entry) {\n     return zipInputStream;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..6e584528bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/23/AsicStreamContainerParser.java\n@@ -26,7 +26,7 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n+public class AsicStreamContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n   private ZipInputStream zipInputStream;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "column": "68",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/23/AsicStreamContainerParser.java\nindex 8e8fb78fbe..403086a29c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/23/AsicStreamContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/23/AsicStreamContainerParser.java\n@@ -26,57 +26,55 @@ import org.slf4j.LoggerFactory;\n /**\n  * ASIC container parser from input stream\n  */\n-public class AsicStreamContainerParser extends AsicContainerParser{\n+public class AsicStreamContainerParser extends AsicContainerParser {private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n+private ZipInputStream zipInputStream;\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicStreamContainerParser.class);\n-  private ZipInputStream zipInputStream;\n-\n-  /**\n+/**\n    * @param inputStream input stream\n    * @param configuration configuration\n    */\n-  public AsicStreamContainerParser(InputStream inputStream, Configuration configuration) {\n-    super(configuration);\n-    zipInputStream = new ZipInputStream(inputStream);\n-  }\n+public AsicStreamContainerParser(InputStream inputStream, Configuration configuration) {\n+  super(configuration);\n+  zipInputStream = new ZipInputStream(inputStream);\n+}\n \n-  @Override\n-  protected void parseContainer() {\n-    parseZipStream();\n-    updateDataFilesMimeType();\n-  }\n+@Override\n+protected void parseContainer() {\n+  parseZipStream();\n+  updateDataFilesMimeType();\n+}\n \n-  private void parseZipStream() {\n-    logger.debug(\"Parsing zip stream\");\n-    try {\n-      ZipEntry entry;\n-        while ((entry = zipInputStream.getNextEntry()) != null) {\n-          parseEntry(entry);\n-        }\n-    } catch (IOException e) {\n-      logger.error(\"Error reading asic container stream: \" + e.getMessage());\n-      throw new TechnicalException(\"Error reading asic container stream: \", e);\n-    } finally {\n-      IOUtils.closeQuietly(zipInputStream);\n-    }\n+private void parseZipStream() {\n+  logger.debug(\"Parsing zip stream\");\n+  try {\n+    ZipEntry entry;\n+      while ((entry = zipInputStream.getNextEntry()) != null) {\n+        parseEntry(entry);\n+      }\n+  } catch (IOException e) {\n+    logger.error(\"Error reading asic container stream: \" + e.getMessage());\n+    throw new TechnicalException(\"Error reading asic container stream: \", e);\n+  } finally {\n+    IOUtils.closeQuietly(zipInputStream);\n   }\n+}\n \n-  private void updateDataFilesMimeType() {\n-    for (DataFile dataFile : getDataFiles().values()) {\n-      String fileName = dataFile.getName();\n-      String mimeType = MimeTypeUtil.mimeTypeOf(getDataFileMimeType(fileName)).getMimeTypeString();\n-      dataFile.setMediaType(mimeType);\n-    }\n+private void updateDataFilesMimeType() {\n+  for (DataFile dataFile : getDataFiles().values()) {\n+    String fileName = dataFile.getName();\n+    String mimeType = MimeTypeUtil.mimeTypeOf(getDataFileMimeType(fileName)).getMimeTypeString();\n+    dataFile.setMediaType(mimeType);\n   }\n+}\n \n-  @Override\n-  protected void extractManifest(ZipEntry entry) {\n-    AsicEntry asicEntry = extractAsicEntry(entry);\n-    parseManifestEntry(asicEntry.getContent());\n-  }\n+@Override\n+protected void extractManifest(ZipEntry entry) {\n+  AsicEntry asicEntry = extractAsicEntry(entry);\n+  parseManifestEntry(asicEntry.getContent());\n+}\n \n-  @Override\n-  protected InputStream getZipEntryInputStream(ZipEntry entry) {\n-    return zipInputStream;\n-  }\n+@Override\n+protected InputStream getZipEntryInputStream(ZipEntry entry) {\n+  return zipInputStream;\n+}\n }\n",
            "diff_size": 45
        }
    ]
}