{
    "error_id": "202",
    "information": {
        "errors": [
            {
                "line": "123",
                "severity": "error",
                "message": "Block comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 99.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
            }
        ]
    },
    "source_code": "        // association.getTargetRef() + \"' of association element \",\n        // association.getId());\n    /*\n     * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n     * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n     * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/202/AbstractBpmnParseHandler.java\nindex caea654cd6..62caf83103 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/202/AbstractBpmnParseHandler.java\n@@ -120,7 +120,7 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n         // bpmnModel.addProblem(\"Invalid reference targetRef '\" +\n         // association.getTargetRef() + \"' of association element \",\n         // association.getId());\n-    /*\n+        /*\n      * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n      * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n      * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/202/AbstractBpmnParseHandler.java\nindex caea654cd6..6d3dbceb29 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/202/AbstractBpmnParseHandler.java\n@@ -49,7 +49,7 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n                       BaseElement element) {\n         T baseElement = (T) element;\n         executeParse(bpmnParse,\n-                     baseElement);\n+                baseElement);\n     }\n \n     protected abstract void executeParse(BpmnParse bpmnParse,\n@@ -88,7 +88,7 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n         for (Artifact artifact : artifacts) {\n             if (artifact instanceof Association) {\n                 createAssociation(bpmnParse,\n-                                  (Association) artifact);\n+                        (Association) artifact);\n             }\n         }\n     }\n@@ -120,10 +120,10 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n         // bpmnModel.addProblem(\"Invalid reference targetRef '\" +\n         // association.getTargetRef() + \"' of association element \",\n         // association.getId());\n-    /*\n-     * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n-     * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n-     * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n-     */\n+        /*\n+         * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n+         * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n+         * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n+         */\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 0, indentation should be the same level as line 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 8, indentation should be the same level as line 92.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 89.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/202/AbstractBpmnParseHandler.java\nindex caea654cd6..b4beb824bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/202/AbstractBpmnParseHandler.java\n@@ -19,7 +19,6 @@ package org.activiti.engine.impl.bpmn.parser.handler;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.Set;\n-\n import org.activiti.bpmn.model.ActivitiListener;\n import org.activiti.bpmn.model.Artifact;\n import org.activiti.bpmn.model.Association;\n@@ -34,6 +33,7 @@ import org.activiti.engine.delegate.ExecutionListener;\n import org.activiti.engine.impl.bpmn.parser.BpmnParse;\n import org.activiti.engine.parse.BpmnParseHandler;\n \n+\n public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements BpmnParseHandler {\n \n     public Set<Class<? extends BaseElement>> getHandledTypes() {\n@@ -45,62 +45,52 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n     protected abstract Class<? extends BaseElement> getHandledType();\n \n     @SuppressWarnings(\"unchecked\")\n-    public void parse(BpmnParse bpmnParse,\n-                      BaseElement element) {\n-        T baseElement = (T) element;\n-        executeParse(bpmnParse,\n-                     baseElement);\n+    public void parse(BpmnParse bpmnParse, BaseElement element) {\n+    T baseElement = (T) element;\n+    executeParse(bpmnParse, baseElement);\n     }\n \n-    protected abstract void executeParse(BpmnParse bpmnParse,\n-                                         T element);\n-\n-    protected ExecutionListener createExecutionListener(BpmnParse bpmnParse,\n-                                                        ActivitiListener activitiListener) {\n-        ExecutionListener executionListener = null;\n-\n-        if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(activitiListener.getImplementationType())) {\n-            executionListener = bpmnParse.getListenerFactory().createClassDelegateExecutionListener(activitiListener);\n-        } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {\n-            executionListener = bpmnParse.getListenerFactory().createExpressionExecutionListener(activitiListener);\n-        } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {\n-            executionListener = bpmnParse.getListenerFactory().createDelegateExpressionExecutionListener(activitiListener);\n-        }\n-        return executionListener;\n+    protected abstract void executeParse(BpmnParse bpmnParse, T element);\n+    protected ExecutionListener createExecutionListener(BpmnParse bpmnParse, ActivitiListener activitiListener) {\n+    ExecutionListener executionListener = null;\n+    if (ImplementationType.IMPLEMENTATION_TYPE_CLASS.equalsIgnoreCase(activitiListener.getImplementationType())) {\n+        executionListener = bpmnParse.getListenerFactory().createClassDelegateExecutionListener(activitiListener);\n+    } else if (ImplementationType.IMPLEMENTATION_TYPE_EXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {\n+      executionListener = bpmnParse.getListenerFactory().createExpressionExecutionListener(activitiListener);\n+    } else if (ImplementationType.IMPLEMENTATION_TYPE_DELEGATEEXPRESSION.equalsIgnoreCase(activitiListener.getImplementationType())) {\n+      executionListener = bpmnParse.getListenerFactory().createDelegateExpressionExecutionListener(activitiListener);\n+           }\n+    return executionListener;\n     }\n \n-    protected String getPrecedingEventBasedGateway(BpmnParse bpmnParse,\n-                                                   IntermediateCatchEvent event) {\n-        String eventBasedGatewayId = null;\n-        for (SequenceFlow sequenceFlow : event.getIncomingFlows()) {\n-            FlowElement sourceElement = bpmnParse.getBpmnModel().getFlowElement(sequenceFlow.getSourceRef());\n-            if (sourceElement instanceof EventGateway) {\n-                eventBasedGatewayId = sourceElement.getId();\n-                break;\n-            }\n+    protected String getPrecedingEventBasedGateway(BpmnParse bpmnParse, IntermediateCatchEvent event) {\n+    String eventBasedGatewayId = null;\n+    for (SequenceFlow sequenceFlow : event.getIncomingFlows()) {\n+        FlowElement sourceElement = bpmnParse.getBpmnModel().getFlowElement(sequenceFlow.getSourceRef());\n+        if (sourceElement instanceof EventGateway) {\n+            eventBasedGatewayId = sourceElement.getId();\n+            break;\n         }\n-        return eventBasedGatewayId;\n+    }\n+    return eventBasedGatewayId;\n     }\n \n-    protected void processArtifacts(BpmnParse bpmnParse,\n-                                    Collection<Artifact> artifacts) {\n+    protected void processArtifacts(BpmnParse bpmnParse, Collection<Artifact> artifacts) {\n         // associations\n-        for (Artifact artifact : artifacts) {\n-            if (artifact instanceof Association) {\n-                createAssociation(bpmnParse,\n-                                  (Association) artifact);\n-            }\n+for (Artifact artifact : artifacts) {\n+        if (artifact instanceof Association) {\n+            createAssociation(bpmnParse, (Association) artifact);\n         }\n+}\n     }\n \n-    protected void createAssociation(BpmnParse bpmnParse,\n-                                     Association association) {\n-        BpmnModel bpmnModel = bpmnParse.getBpmnModel();\n-        if (bpmnModel.getArtifact(association.getSourceRef()) != null || bpmnModel.getArtifact(association.getTargetRef()) != null) {\n+    protected void createAssociation(BpmnParse bpmnParse, Association association) {\n+    BpmnModel bpmnModel = bpmnParse.getBpmnModel();\n+    if (bpmnModel.getArtifact(association.getSourceRef()) != null || bpmnModel.getArtifact(association.getTargetRef()) != null) {\n \n             // connected to a text annotation so skipping it\n-            return;\n-        }\n+        return;\n+    }\n \n         // ActivityImpl sourceActivity =\n         // parentScope.findActivity(association.getSourceRef());\n@@ -126,4 +116,5 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n      * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n      */\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/202/AbstractBpmnParseHandler.java\nindex caea654cd6..62caf83103 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/202/AbstractBpmnParseHandler.java\n@@ -120,7 +120,7 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n         // bpmnModel.addProblem(\"Invalid reference targetRef '\" +\n         // association.getTargetRef() + \"' of association element \",\n         // association.getId());\n-    /*\n+        /*\n      * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n      * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n      * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/202/AbstractBpmnParseHandler.java\nindex caea654cd6..2288fc7972 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/202/AbstractBpmnParseHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/202/AbstractBpmnParseHandler.java\n@@ -120,10 +120,9 @@ public abstract class AbstractBpmnParseHandler<T extends BaseElement> implements\n         // bpmnModel.addProblem(\"Invalid reference targetRef '\" +\n         // association.getTargetRef() + \"' of association element \",\n         // association.getId());\n-    /*\n+        /*\n      * } else { if (sourceActivity.getProperty(\"type\").equals(\"compensationBoundaryCatch\" )) { Object isForCompensation = targetActivity.getProperty(PROPERTYNAME_IS_FOR_COMPENSATION); if\n      * (isForCompensation == null || !(Boolean) isForCompensation) { logger.warn( \"compensation boundary catch must be connected to element with isForCompensation=true\" ); } else { ActivityImpl\n      * compensatedActivity = sourceActivity.getParentActivity(); compensatedActivity.setProperty(BpmnParse .PROPERTYNAME_COMPENSATION_HANDLER_ID, targetActivity.getId()); } } }\n-     */\n-    }\n+     */}\n }\n",
            "diff_size": 3
        }
    ]
}