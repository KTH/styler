{
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "83",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public Contracts ofContributor(final Contributor contributor) {\n        if(this.contributor.username().equals(contributor.username())\n            && this.contributor.provider().equals(contributor.provider())\n        ) {\n            return this;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/54/ContributorContracts.java\nindex b903af2c85..f849ec3fc3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/54/ContributorContracts.java\n@@ -80,7 +80,7 @@ public final class ContributorContracts implements Contracts {\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n+        if (this.contributor.username().equals(contributor.username())\n             && this.contributor.provider().equals(contributor.provider())\n         ) {\n             return this;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/54/ContributorContracts.java\nindex b903af2c85..854f98da77 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/54/ContributorContracts.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core.contracts;\n \n import com.selfxdsd.api.Contract;\n@@ -36,13 +37,14 @@ import java.util.stream.Collectors;\n  * this class <b>just represents</b> the contracts.\n  * The actual filtering has to be done in an upper layer,\n  * so we can take care of e.g. pagination.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n- * @since 0.0.1\n  * @todo #110:30min Implement and unit testContributorContracts.addContract.\n- *  A Contract added via this method can only belong to the Contributor who\n- *  owns these Contracts. Check ProjectContracts.addContract(...) for a\n- *  similar example.\n+ * A Contract added via this method can only belong to the Contributor who\n+ * owns these Contracts. Check ProjectContracts.addContract(...) for a\n+ * similar example.\n+ * @since 0.0.1\n  */\n public final class ContributorContracts implements Contracts {\n \n@@ -58,8 +60,9 @@ public final class ContributorContracts implements Contracts {\n \n     /**\n      * Constructor.\n+     *\n      * @param contributor Contributor.\n-     * @param contracts Contributor's contracts.\n+     * @param contracts   Contributor's contracts.\n      */\n     public ContributorContracts(\n         final Contributor contributor,\n@@ -80,15 +83,15 @@ public final class ContributorContracts implements Contracts {\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n+        if (this.contributor.username().equals(contributor.username())\n             && this.contributor.provider().equals(contributor.provider())\n         ) {\n             return this;\n         }\n         throw new IllegalStateException(\n             \"Already seeing the contracts of Contributor \"\n-          + this.contributor.username() + \", working at \"\n-          + this.contributor.provider() + \" .\"\n+                + this.contributor.username() + \", working at \"\n+                + this.contributor.provider() + \" .\"\n         );\n     }\n \n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "'final' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/54/ContributorContracts.java\nindex b903af2c85..1bde97dc46 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/54/ContributorContracts.java\n@@ -71,38 +71,30 @@ public final class ContributorContracts implements Contracts {\n \n     @Override\n     public Contracts ofProject(final int projectId) {\n-        final List<Contract> ofProject = this.contracts\n-            .stream()\n-            .filter(contract -> contract.project().projectId() == projectId)\n-            .collect(Collectors.toList());\n-        return new ProjectContracts(projectId, ofProject, null);\n+        final List<Contract> ofProject = this.contracts.stream().filter(contract -> contract.project().projectId() == projectId).collect(Collectors.toList());\n+return new ProjectContracts(projectId, ofProject, null);\n     }\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n-            && this.contributor.provider().equals(contributor.provider())\n-        ) {\n+        if(this.contributor.username().equals(contributor.username())&& this.contributor.provider().equals(contributor.provider())) {\n             return this;\n         }\n         throw new IllegalStateException(\n-            \"Already seeing the contracts of Contributor \"\n-          + this.contributor.username() + \", working at \"\n-          + this.contributor.provider() + \" .\"\n-        );\n+            \"Already seeing the contracts of Contributor \" + this.contributor.username() + \", working at \" + this.contributor.provider() + \" .\");\n     }\n \n     @Override\n     public Contract addContract(final int projectId,\n-                                final String contributorUsername,\n+final String contributorUsername,\n                                 final String contributorProvider,\n                                 final BigDecimal hourlyRate,\n                                 final String role) {\n-        throw new UnsupportedOperationException(\"Not yet implemented\");\n+    throw new UnsupportedOperationException(\"Not yet implemented\");\n     }\n \n     @Override\n     public Iterator<Contract> iterator() {\n         return this.contracts.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 79, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 75, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/54/ContributorContracts.java\nindex b903af2c85..cdaed4f784 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/54/ContributorContracts.java\n@@ -25,7 +25,6 @@ package com.selfxdsd.core.contracts;\n import com.selfxdsd.api.Contract;\n import com.selfxdsd.api.Contracts;\n import com.selfxdsd.api.Contributor;\n-\n import java.math.BigDecimal;\n import java.util.Iterator;\n import java.util.List;\n@@ -44,16 +43,22 @@ import java.util.stream.Collectors;\n  *  owns these Contracts. Check ProjectContracts.addContract(...) for a\n  *  similar example.\n  */\n+\n+\n public final class ContributorContracts implements Contracts {\n \n     /**\n      * The Contributor.\n      */\n+\n+\n     private final Contributor contributor;\n \n     /**\n      * The contributor's contracts.\n      */\n+\n+\n     private final List<Contract> contracts;\n \n     /**\n@@ -61,48 +66,40 @@ public final class ContributorContracts implements Contracts {\n      * @param contributor Contributor.\n      * @param contracts Contributor's contracts.\n      */\n-    public ContributorContracts(\n-        final Contributor contributor,\n-        final List<Contract> contracts\n-    ) {\n+\n+\n+    public ContributorContracts(final Contributor contributor, final List<Contract> contracts) {\n         this.contributor = contributor;\n         this.contracts = contracts;\n     }\n \n     @Override\n     public Contracts ofProject(final int projectId) {\n-        final List<Contract> ofProject = this.contracts\n-            .stream()\n-            .filter(contract -> contract.project().projectId() == projectId)\n-            .collect(Collectors.toList());\n+        final List<Contract> ofProject = this.contracts.stream().filter(contract-> contract.project().projectId()== projectId).collect(Collectors.toList());\n         return new ProjectContracts(projectId, ofProject, null);\n     }\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n-            && this.contributor.provider().equals(contributor.provider())\n-        ) {\n-            return this;\n-        }\n+        if(this.contributor.username().equals(contributor.username())&&\n+               this.contributor.provider().equals(contributor.provider())) {\n+                                                                               return this;\n+                                                                           }\n         throw new IllegalStateException(\n-            \"Already seeing the contracts of Contributor \"\n-          + this.contributor.username() + \", working at \"\n-          + this.contributor.provider() + \" .\"\n-        );\n+            \"Already seeing the contracts of Contributor \" + this.contributor.username() + \", working at \" + this.contributor.provider() + \" .\");\n     }\n \n     @Override\n     public Contract addContract(final int projectId,\n                                 final String contributorUsername,\n                                 final String contributorProvider,\n-                                final BigDecimal hourlyRate,\n-                                final String role) {\n-        throw new UnsupportedOperationException(\"Not yet implemented\");\n+                                final BigDecimal hourlyRate, final String role) {\n+        throw new UnsupportedOperationException(\n+            \"Not yet implemented\");\n     }\n \n     @Override\n     public Iterator<Contract> iterator() {\n         return this.contracts.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/54/ContributorContracts.java\nindex b903af2c85..f849ec3fc3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/54/ContributorContracts.java\n@@ -80,7 +80,7 @@ public final class ContributorContracts implements Contracts {\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n+        if (this.contributor.username().equals(contributor.username())\n             && this.contributor.provider().equals(contributor.provider())\n         ) {\n             return this;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/54/ContributorContracts.java\nindex b903af2c85..7e0d8bb51a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/54/ContributorContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/54/ContributorContracts.java\n@@ -80,7 +80,8 @@ public final class ContributorContracts implements Contracts {\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        if(this.contributor.username().equals(contributor.username())\n+        if\n+        ( this.contributor.username().equals(contributor.username())\n             && this.contributor.provider().equals(contributor.provider())\n         ) {\n             return this;\n",
            "diff_size": 2
        }
    ]
}