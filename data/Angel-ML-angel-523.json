{
    "error_id": "523",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/523/IntArrayElement.java\nindex cd3115d7d2..f5ae404aab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/523/IntArrayElement.java\n@@ -28,66 +28,66 @@ import java.io.IOException;\n  */\n public class IntArrayElement implements IElement {\n \n-  private int[] data;\n+    private int[] data;\n \n-  public IntArrayElement(int[] data) {\n-    this.data = data;\n-  }\n+    public IntArrayElement(int[] data) {\n+        this.data = data;\n+    }\n \n-  public int[] getData() {\n-    return data;\n-  }\n+    public int[] getData() {\n+        return data;\n+    }\n \n-  public void setData(int[] data) {\n-    this.data = data;\n-  }\n+    public void setData(int[] data) {\n+        this.data = data;\n+    }\n \n-  @Override\n-  public IntArrayElement deepClone() {\n-    int[] newData = new int[data.length];\n-    System.arraycopy(data, 0, newData, 0, data.length);\n-    return new IntArrayElement(newData);\n-  }\n+    @Override\n+    public IntArrayElement deepClone() {\n+        int[] newData = new int[data.length];\n+        System.arraycopy(data, 0, newData, 0, data.length);\n+        return new IntArrayElement(newData);\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n-    output.writeInt(data.length);\n-    for (int i = 0; i < data.length; i++) {\n-      output.writeInt(data[i]);\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        output.writeInt(data.length);\n+        for (int i = 0; i < data.length; i++) {\n+            output.writeInt(data[i]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    data = new int[input.readInt()];\n-    for (int i = 0; i < data.length; i++) {\n-      data[i] = input.readInt();\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        data = new int[input.readInt()];\n+        for (int i = 0; i < data.length; i++) {\n+            data[i] = input.readInt();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    return 4 + data.length * 4;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return 4 + data.length * 4;\n+    }\n \n-  @Override\n-  public void serialize(DataOutputStream output) throws IOException {\n-    output.writeInt(data.length);\n-    for (int i = 0; i < data.length; i++) {\n-      output.writeInt(data[i]);\n+    @Override\n+    public void serialize(DataOutputStream output) throws IOException {\n+        output.writeInt(data.length);\n+        for (int i = 0; i < data.length; i++) {\n+            output.writeInt(data[i]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(DataInputStream input) throws IOException {\n-    data = new int[input.readInt()];\n-    for (int i = 0; i < data.length; i++) {\n-      data[i] = input.readInt();\n+    @Override\n+    public void deserialize(DataInputStream input) throws IOException {\n+        data = new int[input.readInt()];\n+        for (int i = 0; i < data.length; i++) {\n+            data[i] = input.readInt();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int dataLen() {\n-    return bufferLen();\n-  }\n+    @Override\n+    public int dataLen() {\n+        return bufferLen();\n+    }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/523/IntArrayElement.java\nindex cd3115d7d2..50b926449b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/523/IntArrayElement.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.element;\n \n import io.netty.buffer.ByteBuf;\n@@ -90,4 +89,4 @@ public class IntArrayElement implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/523/IntArrayElement.java\nindex cd3115d7d2..166cffe47b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/523/IntArrayElement.java\n@@ -26,68 +26,69 @@ import java.io.IOException;\n /**\n  * The complex object that contains a integer array, it can be stored in PS\n  */\n-public class IntArrayElement implements IElement {\n \n-  private int[] data;\n+public class IntArrayElement implements IElement {\n+    private int[] data;\n \n-  public IntArrayElement(int[] data) {\n+    public IntArrayElement(int[] data) {\n     this.data = data;\n-  }\n+    }\n \n-  public int[] getData() {\n+    public int[] getData() {\n     return data;\n-  }\n+    }\n \n-  public void setData(int[] data) {\n+    public void setData(int[] data) {\n     this.data = data;\n-  }\n+    }\n \n-  @Override\n-  public IntArrayElement deepClone() {\n+    @Override\n+    public IntArrayElement deepClone() {\n     int[] newData = new int[data.length];\n     System.arraycopy(data, 0, newData, 0, data.length);\n     return new IntArrayElement(newData);\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n+    @Override\n+    public void serialize(ByteBuf output) {\n     output.writeInt(data.length);\n     for (int i = 0; i < data.length; i++) {\n-      output.writeInt(data[i]);\n+        output.writeInt(data[i]);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n+    @Override\n+    public void deserialize(ByteBuf input) {\n     data = new int[input.readInt()];\n     for (int i = 0; i < data.length; i++) {\n-      data[i] = input.readInt();\n+        data[i] = input.readInt();\n+    }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     return 4 + data.length * 4;\n-  }\n+    }\n \n-  @Override\n-  public void serialize(DataOutputStream output) throws IOException {\n+    @Override\n+    public void serialize(DataOutputStream output) throws IOException {\n     output.writeInt(data.length);\n     for (int i = 0; i < data.length; i++) {\n-      output.writeInt(data[i]);\n+        output.writeInt(data[i]);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(DataInputStream input) throws IOException {\n+    @Override\n+    public void deserialize(DataInputStream input) throws IOException {\n     data = new int[input.readInt()];\n     for (int i = 0; i < data.length; i++) {\n-      data[i] = input.readInt();\n+        data[i] = input.readInt();\n+    }\n     }\n-  }\n \n-  @Override\n-  public int dataLen() {\n+    @Override\n+    public int dataLen() {\n     return bufferLen();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/523/IntArrayElement.java\nindex cd3115d7d2..d4903cf521 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/523/IntArrayElement.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/523/IntArrayElement.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.element;\n \n import io.netty.buffer.ByteBuf;\n",
            "diff_size": 1
        }
    ]
}