{
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.specification;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/52/ComparableSpecification.java\nindex 607df6cc8c..d9b4741411 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/52/ComparableSpecification.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.specification;\n+\n+package org .seedstack.business.specification;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/52/ComparableSpecification.java\nindex 607df6cc8c..4d7b448f78 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/52/ComparableSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/52/ComparableSpecification.java\nindex 607df6cc8c..f9d77e1d88 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/52/ComparableSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -79,4 +80,4 @@ public abstract class ComparableSpecification<T extends Comparable<? super T>> i\n     private T asLong(Number expectedValue) {\n         return (T) Long.valueOf(expectedValue.longValue());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'STATIC_INIT' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'static initialization' child has incorrect indentation level 112, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'static initialization' child has incorrect indentation level 112, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'static initialization' child has incorrect indentation level 112, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'static initialization' child has incorrect indentation level 112, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/52/ComparableSpecification.java\nindex 607df6cc8c..88ca5d2585 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/52/ComparableSpecification.java\n@@ -8,7 +8,6 @@\n package org.seedstack.business.specification;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n-\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -18,15 +17,17 @@ import java.util.Set;\n  *\n  * @param <T> the type of the compared value.\n  */\n-public abstract class ComparableSpecification<T extends Comparable<? super T>> implements Specification<T> {\n \n-    private static final Set<Class<?>> convertibleToLong = new HashSet<>();\n \n+public abstract class ComparableSpecification<T extends Comparable<?\n+                                                                      super T>> implements Specification<T> {\n+\n+    private static final Set<Class<?>> convertibleToLong = new HashSet<>();\n     static {\n-        convertibleToLong.add(Integer.class);\n-        convertibleToLong.add(Short.class);\n-        convertibleToLong.add(Character.class);\n-        convertibleToLong.add(Byte.class);\n+                                                                                                                convertibleToLong.add(Integer.class);\n+                                                                                                                convertibleToLong.add(Short.class);\n+                                                                                                                convertibleToLong.add(Character.class);\n+                                                                                                                convertibleToLong.add(Byte.class);\n     }\n \n     private final T expectedValue;\n@@ -37,6 +38,8 @@ public abstract class ComparableSpecification<T extends Comparable<? super T>> i\n      *\n      * @param expectedValue the value used to do the comparison against.\n      */\n+\n+\n     protected ComparableSpecification(T expectedValue) {\n         checkNotNull(expectedValue, \"Expected value cannot be null\");\n         Class<? extends Comparable> expectedValueClass = expectedValue.getClass();\n@@ -45,13 +48,15 @@ public abstract class ComparableSpecification<T extends Comparable<? super T>> i\n         } else {\n             this.expectedValue = expectedValue;\n         }\n-        this.expectedValueClass = this.expectedValue.getClass();\n+        this.expectedValueClass = this\n+            .expectedValue\n+.getClass();\n     }\n \n     @Override\n     public boolean isSatisfiedBy(T candidate) {\n         Class<? extends Comparable> candidateClass = candidate.getClass();\n-        if (!candidateClass.equals(expectedValueClass) && convertibleToLong.contains(candidateClass)) {\n+        if (! candidateClass.equals(expectedValueClass) && convertibleToLong.contains(candidateClass)) {\n             return isExpected(asLong((Number) candidate).compareTo(expectedValue));\n         } else {\n             return isExpected(candidate.compareTo(expectedValue));\n@@ -63,6 +68,8 @@ public abstract class ComparableSpecification<T extends Comparable<? super T>> i\n      *\n      * @return the value used to do the comparison against.\n      */\n+\n+\n     public T getExpectedValue() {\n         return expectedValue;\n     }\n@@ -73,10 +80,10 @@ public abstract class ComparableSpecification<T extends Comparable<? super T>> i\n      * @param compareToResult the result returned by {@link Comparable#compareTo(Object)}\n      * @return true if the result is expected, false otherwise.\n      */\n-    protected abstract boolean isExpected(int compareToResult);\n \n-    @SuppressWarnings(\"unchecked\")\n-    private T asLong(Number expectedValue) {\n+\n+    protected abstract boolean isExpected(int compareToResult);\n+    @SuppressWarnings(\"unchecked\") private T asLong(Number expectedValue) {\n         return (T) Long.valueOf(expectedValue.longValue());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/52/ComparableSpecification.java\nindex 607df6cc8c..d9b4741411 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/52/ComparableSpecification.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/52/ComparableSpecification.java\n@@ -5,7 +5,8 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.specification;\n+\n+package org .seedstack.business.specification;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}