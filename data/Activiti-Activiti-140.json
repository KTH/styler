{
    "error_id": "140",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.api.runtime.model.impl;\n\nimport java.util.Objects;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/140/BPMNSequenceFlowImpl.java\nindex da4dec2845..62a6be47a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/140/BPMNSequenceFlowImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import java.util.Objects;\n@@ -84,7 +85,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     public void setTargetActivityType(String targetActivityType) {\n         this.targetActivityType = targetActivityType;\n     }\n-    \n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/140/BPMNSequenceFlowImpl.java\nindex da4dec2845..5674627076 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/140/BPMNSequenceFlowImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import java.util.Objects;\n@@ -32,8 +33,8 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     }\n \n     public BPMNSequenceFlowImpl(String elementId,\n-                            String sourceActivityElementId,\n-                            String targetActivityElementId) {\n+                                String sourceActivityElementId,\n+                                String targetActivityElementId) {\n         this.setElementId(elementId);\n         this.sourceActivityElementId = sourceActivityElementId;\n         this.targetActivityElementId = targetActivityElementId;\n@@ -84,7 +85,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     public void setTargetActivityType(String targetActivityType) {\n         this.targetActivityType = targetActivityType;\n     }\n-    \n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n@@ -95,27 +96,27 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n         }\n         BPMNSequenceFlowImpl that = (BPMNSequenceFlowImpl) o;\n         return Objects.equals(getElementId(),\n-                              that.getElementId()) &&\n+                that.getElementId()) &&\n                 Objects.equals(sourceActivityElementId,\n-                               that.getSourceActivityElementId()) &&\n+                        that.getSourceActivityElementId()) &&\n                 Objects.equals(sourceActivityType,\n-                               that.getSourceActivityType()) &&\n+                        that.getSourceActivityType()) &&\n                 Objects.equals(sourceActivityName,\n-                               that.getSourceActivityName()) &&\n+                        that.getSourceActivityName()) &&\n                 Objects.equals(targetActivityElementId,\n-                               that.getTargetActivityElementId()) &&\n+                        that.getTargetActivityElementId()) &&\n                 Objects.equals(targetActivityType,\n-                                  that.getTargetActivityType()) &&\n+                        that.getTargetActivityType()) &&\n                 Objects.equals(targetActivityName,\n-                                  that.getTargetActivityName());\n+                        that.getTargetActivityName());\n     }\n \n     @Override\n     public int hashCode() {\n \n         return Objects.hash(getElementId(),\n-                            sourceActivityElementId,\n-                            targetActivityElementId);\n+                sourceActivityElementId,\n+                targetActivityElementId);\n     }\n \n     @Override\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "22",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 258).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 306).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 354).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 365).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 389).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/140/BPMNSequenceFlowImpl.java\nindex da4dec2845..adbb74f8a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/140/BPMNSequenceFlowImpl.java\n@@ -16,27 +16,30 @@\n package org.activiti.api.runtime.model.impl;\n \n import java.util.Objects;\n-\n import org.activiti.api.process.model.BPMNSequenceFlow;\n \n+\n public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenceFlow {\n \n     private String sourceActivityElementId;\n+\n     private String sourceActivityName;\n+\n     private String sourceActivityType;\n+\n     private String targetActivityElementId;\n+\n     private String targetActivityName;\n+\n     private String targetActivityType;\n \n     public BPMNSequenceFlowImpl() {\n     }\n \n-    public BPMNSequenceFlowImpl(String elementId,\n-                            String sourceActivityElementId,\n-                            String targetActivityElementId) {\n-        this.setElementId(elementId);\n-        this.sourceActivityElementId = sourceActivityElementId;\n-        this.targetActivityElementId = targetActivityElementId;\n+    public BPMNSequenceFlowImpl(String elementId, String sourceActivityElementId, String targetActivityElementId) {\n+    this.setElementId(elementId);\n+    this.sourceActivityElementId = sourceActivityElementId;\n+    this.targetActivityElementId = targetActivityElementId;\n     }\n \n     @Override\n@@ -50,7 +53,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     }\n \n     public void setSourceActivityName(String sourceActivityName) {\n-        this.sourceActivityName = sourceActivityName;\n+    this.sourceActivityName = sourceActivityName;\n     }\n \n     @Override\n@@ -59,7 +62,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     }\n \n     public void setSourceActivityType(String sourceActivityType) {\n-        this.sourceActivityType = sourceActivityType;\n+    this.sourceActivityType = sourceActivityType;\n     }\n \n     @Override\n@@ -73,7 +76,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     }\n \n     public void setTargetActivityName(String targetActivityName) {\n-        this.targetActivityName = targetActivityName;\n+    this.targetActivityName = targetActivityName;\n     }\n \n     @Override\n@@ -82,37 +85,31 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     }\n \n     public void setTargetActivityType(String targetActivityType) {\n-        this.targetActivityType = targetActivityType;\n+    this.targetActivityType = targetActivityType;\n     }\n-    \n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n+\n         BPMNSequenceFlowImpl that = (BPMNSequenceFlowImpl) o;\n-        return Objects.equals(getElementId(),\n-                              that.getElementId()) &&\n-                Objects.equals(sourceActivityElementId,\n-                               that.getSourceActivityElementId()) &&\n-                Objects.equals(sourceActivityType,\n-                               that.getSourceActivityType()) &&\n-                Objects.equals(sourceActivityName,\n-                               that.getSourceActivityName()) &&\n-                Objects.equals(targetActivityElementId,\n-                               that.getTargetActivityElementId()) &&\n-                Objects.equals(targetActivityType,\n-                                  that.getTargetActivityType()) &&\n-                Objects.equals(targetActivityName,\n-                                  that.getTargetActivityName());\n+        return Objects.equals(getElementId(), that.getElementId()) && Objects.equals(sourceActivityElementId,\n+                                                                                     that.getSourceActivityElementId()) && Objects.equals(sourceActivityType,\n+                                                                                                                                          that.getSourceActivityType()) && Objects.equals(sourceActivityName,\n+                                                                                                                                                                                          that.getSourceActivityName()) && Objects.equals(targetActivityElementId,\n+                                                                                                                                                                                                                                          that.getTargetActivityElementId()) && Objects.equals(targetActivityType,\n+                                                                                                                                                                                                                                                                                               that.getTargetActivityType()) && Objects.equals(targetActivityName,\n+                                                                                                                                                                                                                                                                                                                                               that.getTargetActivityName());\n     }\n \n     @Override\n     public int hashCode() {\n-\n         return Objects.hash(getElementId(),\n                             sourceActivityElementId,\n                             targetActivityElementId);\n@@ -120,13 +117,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n \n     @Override\n     public String toString() {\n-        return \"SequenceFlowImpl{\" +\n-                \"sourceActivityElementId='\" + sourceActivityElementId + '\\'' +\n-                \", sourceActivityName='\" + sourceActivityName + '\\'' +\n-                \", sourceActivityType='\" + sourceActivityType + '\\'' +\n-                \", targetActivityElementId='\" + targetActivityElementId + '\\'' +\n-                \", targetActivityName='\" + targetActivityName + '\\'' +\n-                \", targetActivityType='\" + targetActivityType + '\\'' +\n-                '}';\n+        return \"SequenceFlowImpl{\" + \"sourceActivityElementId='\" + sourceActivityElementId + '\\'' + \", sourceActivityName='\" + sourceActivityName + '\\'' + \", sourceActivityType='\" + sourceActivityType + '\\'' + \", targetActivityElementId='\" + targetActivityElementId + '\\'' + \", targetActivityName='\" + targetActivityName + '\\'' + \", targetActivityType='\" + targetActivityType + '\\'' + '}';\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/140/BPMNSequenceFlowImpl.java\nindex da4dec2845..62a6be47a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/140/BPMNSequenceFlowImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import java.util.Objects;\n@@ -84,7 +85,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     public void setTargetActivityType(String targetActivityType) {\n         this.targetActivityType = targetActivityType;\n     }\n-    \n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/140/BPMNSequenceFlowImpl.java\nindex da4dec2845..62a6be47a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/140/BPMNSequenceFlowImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/140/BPMNSequenceFlowImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import java.util.Objects;\n@@ -84,7 +85,7 @@ public class BPMNSequenceFlowImpl extends BPMNElementImpl implements BPMNSequenc\n     public void setTargetActivityType(String targetActivityType) {\n         this.targetActivityType = targetActivityType;\n     }\n-    \n+\n     @Override\n     public boolean equals(Object o) {\n         if (this == o) {\n",
            "diff_size": 2
        }
    ]
}