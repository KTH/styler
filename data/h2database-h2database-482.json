{
    "error_id": "482",
    "information": {
        "errors": [
            {
                "line": "240",
                "column": "77",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\n        String temp = directory + \"/temp.db\";\n        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n            try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                FileUtils.delete(temp);\n                try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/482/ChangeFileEncryption.java\nindex 110a50c064..59b571f8d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/482/ChangeFileEncryption.java\n@@ -237,7 +237,7 @@ public class ChangeFileEncryption extends Tool {\n         }\n \n         String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n+        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n             try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                 FileUtils.delete(temp);\n                 try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/482/ChangeFileEncryption.java\nindex 110a50c064..3931e0f33e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/482/ChangeFileEncryption.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.tools;\n \n import java.io.IOException;\n@@ -29,282 +30,294 @@ import org.h2.util.Tool;\n  * <br />\n  * This tool can not be used to change a password of a user.\n  * The database must be closed before using this tool.\n+ *\n  * @h2.resource\n  */\n public class ChangeFileEncryption extends Tool {\n \n-    private String directory;\n-    private String cipherType;\n-    private byte[] decrypt;\n-    private byte[] encrypt;\n-    private byte[] decryptKey;\n-    private byte[] encryptKey;\n+  private String directory;\n+  private String cipherType;\n+  private byte[] decrypt;\n+  private byte[] encrypt;\n+  private byte[] decryptKey;\n+  private byte[] encryptKey;\n \n-    /**\n-     * Options are case sensitive. Supported options are:\n-     * <table>\n-     * <tr><td>[-help] or [-?]</td>\n-     * <td>Print the list of options</td></tr>\n-     * <tr><td>[-cipher type]</td>\n-     * <td>The encryption type (AES)</td></tr>\n-     * <tr><td>[-dir &lt;dir&gt;]</td>\n-     * <td>The database directory (default: .)</td></tr>\n-     * <tr><td>[-db &lt;database&gt;]</td>\n-     * <td>Database name (all databases if not set)</td></tr>\n-     * <tr><td>[-decrypt &lt;pwd&gt;]</td>\n-     * <td>The decryption password (if not set: not yet encrypted)</td></tr>\n-     * <tr><td>[-encrypt &lt;pwd&gt;]</td>\n-     * <td>The encryption password (if not set: do not encrypt)</td></tr>\n-     * <tr><td>[-quiet]</td>\n-     * <td>Do not print progress information</td></tr>\n-     * </table>\n-     * @h2.resource\n-     *\n-     * @param args the command line arguments\n-     */\n-    public static void main(String... args) {\n-        try {\n-            new ChangeFileEncryption().runTool(args);\n-        } catch (SQLException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(1);\n-        }\n+  /**\n+   * Options are case sensitive. Supported options are:\n+   * <table>\n+   * <tr><td>[-help] or [-?]</td>\n+   * <td>Print the list of options</td></tr>\n+   * <tr><td>[-cipher type]</td>\n+   * <td>The encryption type (AES)</td></tr>\n+   * <tr><td>[-dir &lt;dir&gt;]</td>\n+   * <td>The database directory (default: .)</td></tr>\n+   * <tr><td>[-db &lt;database&gt;]</td>\n+   * <td>Database name (all databases if not set)</td></tr>\n+   * <tr><td>[-decrypt &lt;pwd&gt;]</td>\n+   * <td>The decryption password (if not set: not yet encrypted)</td></tr>\n+   * <tr><td>[-encrypt &lt;pwd&gt;]</td>\n+   * <td>The encryption password (if not set: do not encrypt)</td></tr>\n+   * <tr><td>[-quiet]</td>\n+   * <td>Do not print progress information</td></tr>\n+   * </table>\n+   *\n+   * @param args the command line arguments\n+   * @h2.resource\n+   */\n+  public static void main(String... args) {\n+    try {\n+      new ChangeFileEncryption().runTool(args);\n+    } catch (SQLException ex) {\n+      ex.printStackTrace(System.err);\n+      System.exit(1);\n     }\n+  }\n \n-    @Override\n-    public void runTool(String... args) throws SQLException {\n-        String dir = \".\";\n-        String cipher = null;\n-        char[] decryptPassword = null;\n-        char[] encryptPassword = null;\n-        String db = null;\n-        boolean quiet = false;\n-        for (int i = 0; args != null && i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.equals(\"-dir\")) {\n-                dir = args[++i];\n-            } else if (arg.equals(\"-cipher\")) {\n-                cipher = args[++i];\n-            } else if (arg.equals(\"-db\")) {\n-                db = args[++i];\n-            } else if (arg.equals(\"-decrypt\")) {\n-                decryptPassword = args[++i].toCharArray();\n-            } else if (arg.equals(\"-encrypt\")) {\n-                encryptPassword = args[++i].toCharArray();\n-            } else if (arg.equals(\"-quiet\")) {\n-                quiet = true;\n-            } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n-                showUsage();\n-                return;\n-            } else {\n-                showUsageAndThrowUnsupportedOption(arg);\n-            }\n-        }\n-        if ((encryptPassword == null && decryptPassword == null) || cipher == null) {\n-            showUsage();\n-            throw new SQLException(\n-                    \"Encryption or decryption password not set, or cipher not set\");\n-        }\n-        try {\n-            process(dir, db, cipher, decryptPassword, encryptPassword, quiet);\n-        } catch (Exception e) {\n-            throw DbException.toSQLException(e);\n-        }\n+  @Override\n+  public void runTool(String... args) throws SQLException {\n+    String dir = \".\";\n+    String cipher = null;\n+    char[] decryptPassword = null;\n+    char[] encryptPassword = null;\n+    String db = null;\n+    boolean quiet = false;\n+    for (int i = 0; args != null && i < args.length; i++) {\n+      String arg = args[i];\n+      if (arg.equals(\"-dir\")) {\n+        dir = args[++i];\n+      } else if (arg.equals(\"-cipher\")) {\n+        cipher = args[++i];\n+      } else if (arg.equals(\"-db\")) {\n+        db = args[++i];\n+      } else if (arg.equals(\"-decrypt\")) {\n+        decryptPassword = args[++i].toCharArray();\n+      } else if (arg.equals(\"-encrypt\")) {\n+        encryptPassword = args[++i].toCharArray();\n+      } else if (arg.equals(\"-quiet\")) {\n+        quiet = true;\n+      } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n+        showUsage();\n+        return;\n+      } else {\n+        showUsageAndThrowUnsupportedOption(arg);\n+      }\n     }\n-\n-    /**\n-     * Get the file encryption key for a given password.\n-     *\n-     * @param password the password as a char array\n-     * @return the encryption key\n-     */\n-    private static byte[] getFileEncryptionKey(char[] password) {\n-        if (password == null) {\n-            return null;\n-        }\n-        // the clone is to avoid the unhelpful array cleaning\n-        return SHA256.getKeyPasswordHash(\"file\", password.clone());\n+    if ((encryptPassword == null && decryptPassword == null) ||\n+        cipher == null) {\n+      showUsage();\n+      throw new SQLException(\n+          \"Encryption or decryption password not set, or cipher not set\");\n     }\n-\n-    /**\n-     * Changes the password for a database. The passwords must be supplied as\n-     * char arrays and are cleaned in this method. The database must be closed\n-     * before calling this method.\n-     *\n-     * @param dir the directory (. for the current directory)\n-     * @param db the database name (null for all databases)\n-     * @param cipher the cipher (AES)\n-     * @param decryptPassword the decryption password as a char array\n-     * @param encryptPassword the encryption password as a char array\n-     * @param quiet don't print progress information\n-     */\n-    public static void execute(String dir, String db, String cipher,\n-            char[] decryptPassword, char[] encryptPassword, boolean quiet)\n-            throws SQLException {\n-        try {\n-            new ChangeFileEncryption().process(dir, db, cipher,\n-                    decryptPassword, encryptPassword, quiet);\n-        } catch (Exception e) {\n-            throw DbException.toSQLException(e);\n-        }\n+    try {\n+      process(dir, db, cipher, decryptPassword, encryptPassword, quiet);\n+    } catch (Exception e) {\n+      throw DbException.toSQLException(e);\n     }\n+  }\n \n-    private void process(String dir, String db, String cipher,\n-            char[] decryptPassword, char[] encryptPassword, boolean quiet)\n-            throws SQLException {\n-        dir = FileLister.getDir(dir);\n-        ChangeFileEncryption change = new ChangeFileEncryption();\n-        if (encryptPassword != null) {\n-            for (char c : encryptPassword) {\n-                if (c == ' ') {\n-                    throw new SQLException(\"The file password may not contain spaces\");\n-                }\n-            }\n-            change.encryptKey = FilePathEncrypt.getPasswordBytes(encryptPassword);\n-            change.encrypt = getFileEncryptionKey(encryptPassword);\n-        }\n-        if (decryptPassword != null) {\n-            change.decryptKey = FilePathEncrypt.getPasswordBytes(decryptPassword);\n-            change.decrypt = getFileEncryptionKey(decryptPassword);\n-        }\n-        change.out = out;\n-        change.directory = dir;\n-        change.cipherType = cipher;\n+  /**\n+   * Get the file encryption key for a given password.\n+   *\n+   * @param password the password as a char array\n+   * @return the encryption key\n+   */\n+  private static byte[] getFileEncryptionKey(char[] password) {\n+    if (password == null) {\n+      return null;\n+    }\n+    // the clone is to avoid the unhelpful array cleaning\n+    return SHA256.getKeyPasswordHash(\"file\", password.clone());\n+  }\n \n-        ArrayList<String> files = FileLister.getDatabaseFiles(dir, db, true);\n-        FileLister.tryUnlockDatabase(files, \"encryption\");\n-        files = FileLister.getDatabaseFiles(dir, db, false);\n-        if (files.isEmpty() && !quiet) {\n-            printNoDatabaseFilesFound(dir, db);\n-        }\n-        // first, test only if the file can be renamed\n-        // (to find errors with locked files early)\n-        for (String fileName : files) {\n-            String temp = dir + \"/temp.db\";\n-            FileUtils.delete(temp);\n-            FileUtils.move(fileName, temp);\n-            FileUtils.move(temp, fileName);\n-        }\n-        // if this worked, the operation will (hopefully) be successful\n-        // TODO changeFileEncryption: this is a workaround!\n-        // make the operation atomic (all files or none)\n-        for (String fileName : files) {\n-            // don't process a lob directory, just the files in the directory.\n-            if (!FileUtils.isDirectory(fileName)) {\n-                change.process(fileName, quiet, decryptPassword);\n-            }\n-        }\n+  /**\n+   * Changes the password for a database. The passwords must be supplied as\n+   * char arrays and are cleaned in this method. The database must be closed\n+   * before calling this method.\n+   *\n+   * @param dir             the directory (. for the current directory)\n+   * @param db              the database name (null for all databases)\n+   * @param cipher          the cipher (AES)\n+   * @param decryptPassword the decryption password as a char array\n+   * @param encryptPassword the encryption password as a char array\n+   * @param quiet           don't print progress information\n+   */\n+  public static void execute(String dir, String db, String cipher,\n+                             char[] decryptPassword, char[] encryptPassword,\n+                             boolean quiet)\n+      throws SQLException {\n+    try {\n+      new ChangeFileEncryption().process(dir, db, cipher,\n+          decryptPassword, encryptPassword, quiet);\n+    } catch (Exception e) {\n+      throw DbException.toSQLException(e);\n     }\n+  }\n \n-    private void process(String fileName, boolean quiet, char[] decryptPassword) throws SQLException {\n-        if (fileName.endsWith(Constants.SUFFIX_MV_FILE)) {\n-            try {\n-                copyMvStore(fileName, quiet, decryptPassword);\n-            } catch (IOException e) {\n-                throw DbException.convertIOException(e,\n-                        \"Error encrypting / decrypting file \" + fileName);\n-            }\n-            return;\n-        }\n-        final FileStore in;\n-        if (decrypt == null) {\n-            in = FileStore.open(null, fileName, \"r\");\n-        } else {\n-            in = FileStore.open(null, fileName, \"r\", cipherType, decrypt);\n-        }\n-        try {\n-            in.init();\n-            copyPageStore(fileName, in, encrypt, quiet);\n-        } finally {\n-            in.closeSilently();\n+  private void process(String dir, String db, String cipher,\n+                       char[] decryptPassword, char[] encryptPassword,\n+                       boolean quiet)\n+      throws SQLException {\n+    dir = FileLister.getDir(dir);\n+    ChangeFileEncryption change = new ChangeFileEncryption();\n+    if (encryptPassword != null) {\n+      for (char c : encryptPassword) {\n+        if (c == ' ') {\n+          throw new SQLException(\"The file password may not contain spaces\");\n         }\n+      }\n+      change.encryptKey = FilePathEncrypt.getPasswordBytes(encryptPassword);\n+      change.encrypt = getFileEncryptionKey(encryptPassword);\n     }\n+    if (decryptPassword != null) {\n+      change.decryptKey = FilePathEncrypt.getPasswordBytes(decryptPassword);\n+      change.decrypt = getFileEncryptionKey(decryptPassword);\n+    }\n+    change.out = out;\n+    change.directory = dir;\n+    change.cipherType = cipher;\n \n-    private void copyMvStore(String fileName, boolean quiet, char[] decryptPassword) throws IOException, SQLException {\n-        if (FileUtils.isDirectory(fileName)) {\n-            return;\n-        }\n-        // check that we have the right encryption key\n-        try {\n-            final MVStore source = new MVStore.Builder().\n-                    fileName(fileName).\n-                    readOnly().\n-                    encryptionKey(decryptPassword).\n-                    open();\n-            source.close();\n-        } catch (IllegalStateException ex) {\n-            throw new SQLException(\"error decrypting file \" + fileName, ex);\n-        }\n+    ArrayList<String> files = FileLister.getDatabaseFiles(dir, db, true);\n+    FileLister.tryUnlockDatabase(files, \"encryption\");\n+    files = FileLister.getDatabaseFiles(dir, db, false);\n+    if (files.isEmpty() && !quiet) {\n+      printNoDatabaseFilesFound(dir, db);\n+    }\n+    // first, test only if the file can be renamed\n+    // (to find errors with locked files early)\n+    for (String fileName : files) {\n+      String temp = dir + \"/temp.db\";\n+      FileUtils.delete(temp);\n+      FileUtils.move(fileName, temp);\n+      FileUtils.move(temp, fileName);\n+    }\n+    // if this worked, the operation will (hopefully) be successful\n+    // TODO changeFileEncryption: this is a workaround!\n+    // make the operation atomic (all files or none)\n+    for (String fileName : files) {\n+      // don't process a lob directory, just the files in the directory.\n+      if (!FileUtils.isDirectory(fileName)) {\n+        change.process(fileName, quiet, decryptPassword);\n+      }\n+    }\n+  }\n \n-        String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n-            try (InputStream inStream = Channels.newInputStream(fileIn)) {\n-                FileUtils.delete(temp);\n-                try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n-                    final byte[] buffer = new byte[4 * 1024];\n-                    long remaining = fileIn.size();\n-                    long total = remaining;\n-                    long time = System.nanoTime();\n-                    while (remaining > 0) {\n-                        if (!quiet && System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n-                            out.println(fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n-                            time = System.nanoTime();\n-                        }\n-                        int len = (int) Math.min(buffer.length, remaining);\n-                        len = inStream.read(buffer, 0, len);\n-                        outStream.write(buffer, 0, len);\n-                        remaining -= len;\n-                    }\n-                }\n-            }\n-        }\n-        FileUtils.delete(fileName);\n-        FileUtils.move(temp, fileName);\n+  private void process(String fileName, boolean quiet, char[] decryptPassword)\n+      throws SQLException {\n+    if (fileName.endsWith(Constants.SUFFIX_MV_FILE)) {\n+      try {\n+        copyMvStore(fileName, quiet, decryptPassword);\n+      } catch (IOException e) {\n+        throw DbException.convertIOException(e,\n+            \"Error encrypting / decrypting file \" + fileName);\n+      }\n+      return;\n+    }\n+    final FileStore in;\n+    if (decrypt == null) {\n+      in = FileStore.open(null, fileName, \"r\");\n+    } else {\n+      in = FileStore.open(null, fileName, \"r\", cipherType, decrypt);\n+    }\n+    try {\n+      in.init();\n+      copyPageStore(fileName, in, encrypt, quiet);\n+    } finally {\n+      in.closeSilently();\n     }\n+  }\n \n-    private static FileChannel getFileChannel(String fileName, String r,\n-            byte[] decryptKey) throws IOException {\n-        FileChannel fileIn = FilePath.get(fileName).open(r);\n-        if (decryptKey != null) {\n-            fileIn = new FilePathEncrypt.FileEncrypt(fileName, decryptKey,\n-                    fileIn);\n-        }\n-        return fileIn;\n+  private void copyMvStore(String fileName, boolean quiet,\n+                           char[] decryptPassword)\n+      throws IOException, SQLException {\n+    if (FileUtils.isDirectory(fileName)) {\n+      return;\n+    }\n+    // check that we have the right encryption key\n+    try {\n+      final MVStore source = new MVStore.Builder().\n+          fileName(fileName).\n+          readOnly().\n+          encryptionKey(decryptPassword).\n+          open();\n+      source.close();\n+    } catch (IllegalStateException ex) {\n+      throw new SQLException(\"error decrypting file \" + fileName, ex);\n     }\n \n-    private void copyPageStore(String fileName, FileStore in, byte[] key, boolean quiet) {\n-        if (FileUtils.isDirectory(fileName)) {\n-            return;\n-        }\n-        final String temp = directory + \"/temp.db\";\n+    String temp = directory + \"/temp.db\";\n+    try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n+      try (InputStream inStream = Channels.newInputStream(fileIn)) {\n         FileUtils.delete(temp);\n-        FileStore fileOut;\n-        if (key == null) {\n-            fileOut = FileStore.open(null, temp, \"rw\");\n-        } else {\n-            fileOut = FileStore.open(null, temp, \"rw\", cipherType, key);\n-        }\n-        final byte[] buffer = new byte[4 * 1024];\n-        fileOut.init();\n-        long remaining = in.length() - FileStore.HEADER_LENGTH;\n-        long total = remaining;\n-        in.seek(FileStore.HEADER_LENGTH);\n-        fileOut.seek(FileStore.HEADER_LENGTH);\n-        long time = System.nanoTime();\n-        while (remaining > 0) {\n-            if (!quiet && System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n-                out.println(fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n-                time = System.nanoTime();\n+        try (OutputStream outStream = Channels\n+            .newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n+          final byte[] buffer = new byte[4 * 1024];\n+          long remaining = fileIn.size();\n+          long total = remaining;\n+          long time = System.nanoTime();\n+          while (remaining > 0) {\n+            if (!quiet &&\n+                System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n+              out.println(\n+                  fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n+              time = System.nanoTime();\n             }\n             int len = (int) Math.min(buffer.length, remaining);\n-            in.readFully(buffer, 0, len);\n-            fileOut.write(buffer, 0, len);\n+            len = inStream.read(buffer, 0, len);\n+            outStream.write(buffer, 0, len);\n             remaining -= len;\n+          }\n         }\n-        in.close();\n-        fileOut.close();\n-        FileUtils.delete(fileName);\n-        FileUtils.move(temp, fileName);\n+      }\n+    }\n+    FileUtils.delete(fileName);\n+    FileUtils.move(temp, fileName);\n+  }\n+\n+  private static FileChannel getFileChannel(String fileName, String r,\n+                                            byte[] decryptKey)\n+      throws IOException {\n+    FileChannel fileIn = FilePath.get(fileName).open(r);\n+    if (decryptKey != null) {\n+      fileIn = new FilePathEncrypt.FileEncrypt(fileName, decryptKey,\n+          fileIn);\n+    }\n+    return fileIn;\n+  }\n+\n+  private void copyPageStore(String fileName, FileStore in, byte[] key,\n+                             boolean quiet) {\n+    if (FileUtils.isDirectory(fileName)) {\n+      return;\n+    }\n+    final String temp = directory + \"/temp.db\";\n+    FileUtils.delete(temp);\n+    FileStore fileOut;\n+    if (key == null) {\n+      fileOut = FileStore.open(null, temp, \"rw\");\n+    } else {\n+      fileOut = FileStore.open(null, temp, \"rw\", cipherType, key);\n+    }\n+    final byte[] buffer = new byte[4 * 1024];\n+    fileOut.init();\n+    long remaining = in.length() - FileStore.HEADER_LENGTH;\n+    long total = remaining;\n+    in.seek(FileStore.HEADER_LENGTH);\n+    fileOut.seek(FileStore.HEADER_LENGTH);\n+    long time = System.nanoTime();\n+    while (remaining > 0) {\n+      if (!quiet && System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n+        out.println(fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n+        time = System.nanoTime();\n+      }\n+      int len = (int) Math.min(buffer.length, remaining);\n+      in.readFully(buffer, 0, len);\n+      fileOut.write(buffer, 0, len);\n+      remaining -= len;\n     }\n+    in.close();\n+    fileOut.close();\n+    FileUtils.delete(fileName);\n+    FileUtils.move(temp, fileName);\n+  }\n \n }\n",
            "diff_size": 330
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/482/ChangeFileEncryption.java\nindex 110a50c064..c63b716f82 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/482/ChangeFileEncryption.java\n@@ -237,7 +237,7 @@ public class ChangeFileEncryption extends Tool {\n         }\n \n         String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n+        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n             try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                 FileUtils.delete(temp);\n                 try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n@@ -307,4 +307,4 @@ public class ChangeFileEncryption extends Tool {\n         FileUtils.move(temp, fileName);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/482/ChangeFileEncryption.java\nindex 110a50c064..66fb7a9934 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/482/ChangeFileEncryption.java\n@@ -31,6 +31,8 @@ import org.h2.util.Tool;\n  * The database must be closed before using this tool.\n  * @h2.resource\n  */\n+\n+\n public class ChangeFileEncryption extends Tool {\n \n     private String directory;\n@@ -62,6 +64,8 @@ public class ChangeFileEncryption extends Tool {\n      *\n      * @param args the command line arguments\n      */\n+\n+\n     public static void main(String... args) {\n         try {\n             new ChangeFileEncryption().runTool(args);\n@@ -86,24 +90,23 @@ public class ChangeFileEncryption extends Tool {\n             } else if (arg.equals(\"-cipher\")) {\n                 cipher = args[++i];\n             } else if (arg.equals(\"-db\")) {\n-                db = args[++i];\n-            } else if (arg.equals(\"-decrypt\")) {\n-                decryptPassword = args[++i].toCharArray();\n-            } else if (arg.equals(\"-encrypt\")) {\n-                encryptPassword = args[++i].toCharArray();\n-            } else if (arg.equals(\"-quiet\")) {\n-                quiet = true;\n-            } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n-                showUsage();\n-                return;\n-            } else {\n-                showUsageAndThrowUnsupportedOption(arg);\n-            }\n+                       db = args[++i];\n+                   } else if (arg.equals(\"-decrypt\")) {\n+                       decryptPassword = args[++i].toCharArray();\n+                   } else if (arg.equals(\"-encrypt\")) {\n+                              encryptPassword = args[++i].toCharArray();\n+                          } else if (arg.equals(\"-quiet\")) {\n+                              quiet = true;\n+                          } else if (arg.equals(\"-help\") || arg.equals(\"-?\")) {\n+                                     showUsage();\n+                                     return;\n+                                 } else {\n+                                     showUsageAndThrowUnsupportedOption(arg);\n+                                 }\n         }\n         if ((encryptPassword == null && decryptPassword == null) || cipher == null) {\n             showUsage();\n-            throw new SQLException(\n-                    \"Encryption or decryption password not set, or cipher not set\");\n+            throw new SQLException(\"Encryption or decryption password not set, or cipher not set\");\n         }\n         try {\n             process(dir, db, cipher, decryptPassword, encryptPassword, quiet);\n@@ -118,6 +121,7 @@ public class ChangeFileEncryption extends Tool {\n      * @param password the password as a char array\n      * @return the encryption key\n      */\n+\n     private static byte[] getFileEncryptionKey(char[] password) {\n         if (password == null) {\n             return null;\n@@ -138,20 +142,17 @@ public class ChangeFileEncryption extends Tool {\n      * @param encryptPassword the encryption password as a char array\n      * @param quiet don't print progress information\n      */\n-    public static void execute(String dir, String db, String cipher,\n-            char[] decryptPassword, char[] encryptPassword, boolean quiet)\n-            throws SQLException {\n+\n+\n+    public static void execute(String dir, String db, String cipher, char[] decryptPassword, char[] encryptPassword, boolean quiet) throws SQLException {\n         try {\n-            new ChangeFileEncryption().process(dir, db, cipher,\n-                    decryptPassword, encryptPassword, quiet);\n+            new ChangeFileEncryption().process(dir, db, cipher, decryptPassword, encryptPassword, quiet);\n         } catch (Exception e) {\n             throw DbException.toSQLException(e);\n         }\n     }\n \n-    private void process(String dir, String db, String cipher,\n-            char[] decryptPassword, char[] encryptPassword, boolean quiet)\n-            throws SQLException {\n+    private void process(String dir, String db, String cipher, char[] decryptPassword, char[] encryptPassword, boolean quiet) throws SQLException {\n         dir = FileLister.getDir(dir);\n         ChangeFileEncryption change = new ChangeFileEncryption();\n         if (encryptPassword != null) {\n@@ -170,7 +171,6 @@ public class ChangeFileEncryption extends Tool {\n         change.out = out;\n         change.directory = dir;\n         change.cipherType = cipher;\n-\n         ArrayList<String> files = FileLister.getDatabaseFiles(dir, db, true);\n         FileLister.tryUnlockDatabase(files, \"encryption\");\n         files = FileLister.getDatabaseFiles(dir, db, false);\n@@ -201,8 +201,7 @@ public class ChangeFileEncryption extends Tool {\n             try {\n                 copyMvStore(fileName, quiet, decryptPassword);\n             } catch (IOException e) {\n-                throw DbException.convertIOException(e,\n-                        \"Error encrypting / decrypting file \" + fileName);\n+                throw DbException.convertIOException(e, \"Error encrypting / decrypting file \" + fileName);\n             }\n             return;\n         }\n@@ -226,18 +225,13 @@ public class ChangeFileEncryption extends Tool {\n         }\n         // check that we have the right encryption key\n         try {\n-            final MVStore source = new MVStore.Builder().\n-                    fileName(fileName).\n-                    readOnly().\n-                    encryptionKey(decryptPassword).\n-                    open();\n+            final MVStore source = new MVStore.Builder().fileName(fileName).readOnly().encryptionKey(decryptPassword).open();\n             source.close();\n         } catch (IllegalStateException ex) {\n             throw new SQLException(\"error decrypting file \" + fileName, ex);\n         }\n-\n         String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n+        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n             try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                 FileUtils.delete(temp);\n                 try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n@@ -247,7 +241,8 @@ public class ChangeFileEncryption extends Tool {\n                     long time = System.nanoTime();\n                     while (remaining > 0) {\n                         if (!quiet && System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n-                            out.println(fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n+                            out.println(fileName + \": \"\n+                            + (100 - 100 * remaining / total) + \"%\");\n                             time = System.nanoTime();\n                         }\n                         int len = (int) Math.min(buffer.length, remaining);\n@@ -262,12 +257,10 @@ public class ChangeFileEncryption extends Tool {\n         FileUtils.move(temp, fileName);\n     }\n \n-    private static FileChannel getFileChannel(String fileName, String r,\n-            byte[] decryptKey) throws IOException {\n+    private static FileChannel getFileChannel(String fileName, String r, byte[] decryptKey) throws IOException {\n         FileChannel fileIn = FilePath.get(fileName).open(r);\n         if (decryptKey != null) {\n-            fileIn = new FilePathEncrypt.FileEncrypt(fileName, decryptKey,\n-                    fileIn);\n+            fileIn = new FilePathEncrypt.FileEncrypt(fileName, decryptKey, fileIn);\n         }\n         return fileIn;\n     }\n@@ -293,7 +286,8 @@ public class ChangeFileEncryption extends Tool {\n         long time = System.nanoTime();\n         while (remaining > 0) {\n             if (!quiet && System.nanoTime() - time > TimeUnit.SECONDS.toNanos(1)) {\n-                out.println(fileName + \": \" + (100 - 100 * remaining / total) + \"%\");\n+                out.println(fileName + \": \"\n+                + (100 - 100 * remaining / total) + \"%\");\n                 time = System.nanoTime();\n             }\n             int len = (int) Math.min(buffer.length, remaining);\n@@ -307,4 +301,4 @@ public class ChangeFileEncryption extends Tool {\n         FileUtils.move(temp, fileName);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/482/ChangeFileEncryption.java\nindex 110a50c064..59b571f8d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/482/ChangeFileEncryption.java\n@@ -237,7 +237,7 @@ public class ChangeFileEncryption extends Tool {\n         }\n \n         String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n+        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n             try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                 FileUtils.delete(temp);\n                 try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/482/ChangeFileEncryption.java\nindex 110a50c064..59b571f8d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/482/ChangeFileEncryption.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/482/ChangeFileEncryption.java\n@@ -237,7 +237,7 @@ public class ChangeFileEncryption extends Tool {\n         }\n \n         String temp = directory + \"/temp.db\";\n-        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)){\n+        try (FileChannel fileIn = getFileChannel(fileName, \"r\", decryptKey)) {\n             try (InputStream inStream = Channels.newInputStream(fileIn)) {\n                 FileUtils.delete(temp);\n                 try (OutputStream outStream = Channels.newOutputStream(getFileChannel(temp, \"rw\", encryptKey))) {\n",
            "diff_size": 1
        }
    ]
}