{
    "error_id": "458",
    "information": {
        "errors": [
            {
                "line": "147",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n      }\n\n      for(int i = 0; i < 100; i++) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/458/MatrixOpLogTest.java\nindex 344170273c..5c9055a701 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/458/MatrixOpLogTest.java\n@@ -144,7 +144,9 @@ public class MatrixOpLogTest {\n     while(index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n       for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n+        LOG.info(\"index \"+rowEntry.getKey()+ \" sum of w1 = \" +sum(\n+        ( DenseIntVector) rowEntry . getValue( )\n+          ) );\n       }\n \n       for(int i = 0; i < 100; i++) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/458/MatrixOpLogTest.java\nindex 344170273c..d876e85235 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/458/MatrixOpLogTest.java\n@@ -57,126 +57,127 @@ import java.util.Map.Entry;\n import java.util.concurrent.ExecutionException;\n \n public class MatrixOpLogTest {\n-  private static final Log LOG = LogFactory.getLog(MatrixOpLogTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @Before\n-  public void setup() throws Exception {\n-    // set basic configuration keys\n-    Configuration conf = new Configuration();\n-    conf.setBoolean(\"mapred.mapper.new-api\", true);\n-    conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-    conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n-\n-    // use local deploy mode and dummy dataspliter\n-    conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-    conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n-    conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n-    conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n-    conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);\n-\n-    // get a angel client\n-    angelClient = AngelClientFactory.get(conf);\n-\n-    // add matrix\n-    MatrixContext mMatrix = new MatrixContext();\n-    mMatrix.setName(\"w1\");\n-    mMatrix.setRowNum(100);\n-    mMatrix.setColNum(100000);\n-    mMatrix.setMaxRowNumInBlock(10);\n-    mMatrix.setMaxColNumInBlock(50000);\n-    mMatrix.setRowType(MLProtos.RowType.T_INT_DENSE);\n-    mMatrix.set(MatrixConf.MATRIX_OPLOG_ENABLEFILTER, \"false\");\n-    mMatrix.set(MatrixConf.MATRIX_HOGWILD, \"true\");\n-    mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n-    mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_INT\");\n-    angelClient.addMatrix(mMatrix);\n-\n-    angelClient.startPSServer();\n-    angelClient.run();\n-    Thread.sleep(5000);\n-    psId = new ParameterServerId(0);\n-    psAttempt0Id = new PSAttemptId(psId, 0);\n-    WorkerGroupId workerGroupId = new WorkerGroupId(0);\n-    workerId = new WorkerId(workerGroupId, 0);\n-    workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n-\n-  @Test\n-  public void testUDF() throws ServiceException, IOException, InvalidParameterException,\n-    AngelException, InterruptedException, ExecutionException {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient w1Task0Client = worker.getPSAgent().getMatrixClient(\"w1\", 0);\n-    MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n-    int matrixW1Id = w1Task0Client.getMatrixId();\n-    List<Integer> rowIndexes = new ArrayList<Integer>();\n-    for(int i = 0; i < 100; i++) {\n-      rowIndexes.add(i);\n+    private static final Log LOG = LogFactory.getLog(MatrixOpLogTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n     }\n \n-    GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n-\n-    int [] delta = new int[100000];\n-    for(int i = 0; i < 100000; i++) {\n-      delta[i] = 1;\n+    @Before\n+    public void setup() throws Exception {\n+        // set basic configuration keys\n+        Configuration conf = new Configuration();\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n+\n+        // use local deploy mode and dummy dataspliter\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n+        conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n+\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);\n+\n+        // get a angel client\n+        angelClient = AngelClientFactory.get(conf);\n+\n+        // add matrix\n+        MatrixContext mMatrix = new MatrixContext();\n+        mMatrix.setName(\"w1\");\n+        mMatrix.setRowNum(100);\n+        mMatrix.setColNum(100000);\n+        mMatrix.setMaxRowNumInBlock(10);\n+        mMatrix.setMaxColNumInBlock(50000);\n+        mMatrix.setRowType(MLProtos.RowType.T_INT_DENSE);\n+        mMatrix.set(MatrixConf.MATRIX_OPLOG_ENABLEFILTER, \"false\");\n+        mMatrix.set(MatrixConf.MATRIX_HOGWILD, \"true\");\n+        mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n+        mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_INT\");\n+        angelClient.addMatrix(mMatrix);\n+\n+        angelClient.startPSServer();\n+        angelClient.run();\n+        Thread.sleep(5000);\n+        psId = new ParameterServerId(0);\n+        psAttempt0Id = new PSAttemptId(psId, 0);\n+        WorkerGroupId workerGroupId = new WorkerGroupId(0);\n+        workerId = new WorkerId(workerGroupId, 0);\n+        workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n     }\n \n-    //DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n-    //deltaVec.setMatrixId(matrixW1Id);\n-    //deltaVec.setRowId(0);\n-\n-    int index = 0;\n-    while(index++ < 10) {\n-      Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n-      }\n-\n-      for(int i = 0; i < 100; i++) {\n-        DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n-\n-        w1Task0Client.increment(deltaVec);\n-\n-        deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n-        w1Task1Client.increment(deltaVec);\n-      }\n+    @Test\n+    public void testUDF() throws ServiceException, IOException, InvalidParameterException,\n+            AngelException, InterruptedException, ExecutionException {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient w1Task0Client = worker.getPSAgent().getMatrixClient(\"w1\", 0);\n+        MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n+        int matrixW1Id = w1Task0Client.getMatrixId();\n+        List<Integer> rowIndexes = new ArrayList<Integer>();\n+        for (int i = 0; i < 100; i++) {\n+            rowIndexes.add(i);\n+        }\n+\n+        GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n+\n+        int[] delta = new int[100000];\n+        for (int i = 0; i < 100000; i++) {\n+            delta[i] = 1;\n+        }\n+\n+        //DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n+        //deltaVec.setMatrixId(matrixW1Id);\n+        //deltaVec.setRowId(0);\n+\n+        int index = 0;\n+        while (index++ < 10) {\n+            Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n+            for (Entry<Integer, TVector> rowEntry : rows.entrySet()) {\n+                LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" +\n+                        sum((DenseIntVector) rowEntry.getValue()));\n+            }\n+\n+            for (int i = 0; i < 100; i++) {\n+                DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n+                deltaVec.setMatrixId(matrixW1Id);\n+                deltaVec.setRowId(i);\n+\n+                w1Task0Client.increment(deltaVec);\n+\n+                deltaVec = new DenseIntVector(100000, delta);\n+                deltaVec.setMatrixId(matrixW1Id);\n+                deltaVec.setRowId(i);\n+                w1Task1Client.increment(deltaVec);\n+            }\n+\n+            w1Task0Client.clock().get();\n+            w1Task1Client.clock().get();\n+        }\n+    }\n \n-      w1Task0Client.clock().get();\n-      w1Task1Client.clock().get();\n+    private int sum(DenseIntVector vec) {\n+        int[] values = vec.getValues();\n+        int sum = 0;\n+        for (int i = 0; i < values.length; i++) {\n+            sum += values[i];\n+        }\n+        return sum;\n     }\n-  }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n-    int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n-      sum += values[i];\n+    @After\n+    public void stop() throws AngelException {\n+        LOG.info(\"stop local cluster\");\n+        angelClient.stop();\n     }\n-    return sum;\n-  }\n-\n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n-  }\n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/458/MatrixOpLogTest.java\nindex 344170273c..8bab1ab107 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/458/MatrixOpLogTest.java\n@@ -48,7 +48,6 @@ import org.apache.log4j.PropertyConfigurator;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -57,21 +56,21 @@ import java.util.Map.Entry;\n import java.util.concurrent.ExecutionException;\n \n public class MatrixOpLogTest {\n-  private static final Log LOG = LogFactory.getLog(MatrixOpLogTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  static {\n+    private static final Log LOG = LogFactory.getLog(MatrixOpLogTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @Before\n-  public void setup() throws Exception {\n+    @Before\n+    public void setup() throws Exception {\n     // set basic configuration keys\n     Configuration conf = new Configuration();\n     conf.setBoolean(\"mapred.mapper.new-api\", true);\n@@ -85,7 +84,6 @@ public class MatrixOpLogTest {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/out\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 2);\n@@ -106,7 +104,6 @@ public class MatrixOpLogTest {\n     mMatrix.set(MatrixConf.MATRIX_AVERAGE, \"false\");\n     mMatrix.set(MatrixConf.MATRIX_OPLOG_TYPE, \"DENSE_INT\");\n     angelClient.addMatrix(mMatrix);\n-\n     angelClient.startPSServer();\n     angelClient.run();\n     Thread.sleep(5000);\n@@ -115,25 +112,23 @@ public class MatrixOpLogTest {\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n+    }\n \n-  @Test\n-  public void testUDF() throws ServiceException, IOException, InvalidParameterException,\n-    AngelException, InterruptedException, ExecutionException {\n+    @Test\n+    public void testUDF() throws ServiceException, IOException, InvalidParameterException, AngelException, InterruptedException, ExecutionException {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient w1Task0Client = worker.getPSAgent().getMatrixClient(\"w1\", 0);\n     MatrixClient w1Task1Client = worker.getPSAgent().getMatrixClient(\"w1\", 1);\n     int matrixW1Id = w1Task0Client.getMatrixId();\n     List<Integer> rowIndexes = new ArrayList<Integer>();\n-    for(int i = 0; i < 100; i++) {\n-      rowIndexes.add(i);\n+    for (int i = 0; i < 100; i++) {\n+        rowIndexes.add(i);\n     }\n \n     GetRowsFunc func = new GetRowsFunc(new GetRowsParam(matrixW1Id, rowIndexes));\n-\n-    int [] delta = new int[100000];\n-    for(int i = 0; i < 100000; i++) {\n-      delta[i] = 1;\n+    int[] delta = new int[100000];\n+    for (int i = 0; i < 100000; i++) {\n+        delta[i] = 1;\n     }\n \n     //DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n@@ -141,42 +136,39 @@ public class MatrixOpLogTest {\n     //deltaVec.setRowId(0);\n \n     int index = 0;\n-    while(index++ < 10) {\n-      Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n-      }\n-\n-      for(int i = 0; i < 100; i++) {\n-        DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n-\n-        w1Task0Client.increment(deltaVec);\n-\n-        deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n-        w1Task1Client.increment(deltaVec);\n-      }\n-\n-      w1Task0Client.clock().get();\n-      w1Task1Client.clock().get();\n+    while (index++ < 10) {\n+        Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n+        for (Entry<Integer, TVector> rowEntry : rows.entrySet()) {\n+                             LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n+        }\n+\n+        for (int i = 0; i < 100; i++) {\n+                             DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n+                             deltaVec.setMatrixId(matrixW1Id);\n+                             deltaVec.setRowId(i);\n+                             w1Task0Client.increment(deltaVec);\n+                             deltaVec = new DenseIntVector(100000, delta);\n+                             deltaVec.setMatrixId(matrixW1Id);\n+                             deltaVec.setRowId(i);\n+                             w1Task1Client.increment(deltaVec);\n+        }\n+        w1Task0Client.clock().get();\n+        w1Task1Client.clock().get();\n+    }\n     }\n-  }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n+    private int sum(DenseIntVector vec) {\n+    int[] values = vec.getValues();\n     int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n-      sum += values[i];\n+    for (int i = 0; i < values.length; i++) {\n+        sum += values[i];\n     }\n     return sum;\n-  }\n+    }\n \n-  @After\n-  public void stop() throws AngelException {\n+    @After\n+    public void stop() throws AngelException {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/458/MatrixOpLogTest.java\nindex 344170273c..5c9055a701 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/458/MatrixOpLogTest.java\n@@ -144,7 +144,9 @@ public class MatrixOpLogTest {\n     while(index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n       for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n+        LOG.info(\"index \"+rowEntry.getKey()+ \" sum of w1 = \" +sum(\n+        ( DenseIntVector) rowEntry . getValue( )\n+          ) );\n       }\n \n       for(int i = 0; i < 100; i++) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/458/MatrixOpLogTest.java\nindex 344170273c..187cfff7bb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/458/MatrixOpLogTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/458/MatrixOpLogTest.java\n@@ -143,40 +143,39 @@ public class MatrixOpLogTest {\n     int index = 0;\n     while(index++ < 10) {\n       Map<Integer, TVector> rows = ((GetRowsResult) w1Task0Client.get(func)).getRows();\n-      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) {\n-        LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n-      }\n-\n-      for(int i = 0; i < 100; i++) {\n-        DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n+      for(Entry<Integer, TVector> rowEntry:rows.entrySet()) { LOG.info(\"index \" + rowEntry.getKey() + \" sum of w1 = \" + sum((DenseIntVector) rowEntry.getValue()));\n+    }\n \n-        w1Task0Client.increment(deltaVec);\n+    for(int i = 0; i < 100; i++) {\n+      DenseIntVector deltaVec = new DenseIntVector(100000, delta);\n+      deltaVec.setMatrixId(matrixW1Id);\n+      deltaVec.setRowId(i);\n \n-        deltaVec = new DenseIntVector(100000, delta);\n-        deltaVec.setMatrixId(matrixW1Id);\n-        deltaVec.setRowId(i);\n-        w1Task1Client.increment(deltaVec);\n-      }\n+      w1Task0Client.increment(deltaVec);\n \n-      w1Task0Client.clock().get();\n-      w1Task1Client.clock().get();\n+      deltaVec = new DenseIntVector(100000, delta);\n+      deltaVec.setMatrixId(matrixW1Id);\n+      deltaVec.setRowId(i);\n+      w1Task1Client.increment(deltaVec);\n     }\n-  }\n \n-  private int sum(DenseIntVector vec){\n-    int [] values = vec.getValues();\n-    int sum = 0;\n-    for(int i = 0; i < values.length; i++) {\n-      sum += values[i];\n-    }\n-    return sum;\n+    w1Task0Client.clock().get();\n+    w1Task1Client.clock().get();\n   }\n+}\n \n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n+private int sum(DenseIntVector vec){\n+  int [] values = vec.getValues();\n+  int sum = 0;\n+  for(int i = 0; i < values.length; i++) {\n+    sum += values[i];\n   }\n+  return sum;\n+}\n+\n+@After\n+public void stop() throws AngelException {\n+  LOG.info(\"stop local cluster\");\n+  angelClient.stop();\n+}\n }\n",
            "diff_size": 43
        }
    ]
}