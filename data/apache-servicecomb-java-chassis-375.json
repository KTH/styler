{
    "error_id": "375",
    "information": {
        "errors": [
            {
                "line": "74",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        try {\n            ObjectMapper mapper = new ObjectMapper();\n            HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n            if (response.getStatusCode() == HttpStatus.SC_OK) {\n                LOGGER.info(\"putKeyValue result:\" + response.getContent());\n                return response.getContent();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/375/KieClient.java\nindex bd0ad5b2b2..f141f0cfb0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/375/KieClient.java\n@@ -71,7 +71,7 @@ public class KieClient {\n     public String putKeyValue(String key, KVBody kvBody) {\n         try {\n             ObjectMapper mapper = new ObjectMapper();\n-            HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n+            HttpResponseresponse = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n             if (response.getStatusCode() == HttpStatus.SC_OK) {\n                 LOGGER.info(\"putKeyValue result:\" + response.getContent());\n                 return response.getContent();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/375/KieClient.java\nindex bd0ad5b2b2..ec20550161 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/375/KieClient.java\n@@ -38,124 +38,124 @@ import java.util.Map.Entry;\n  */\n public class KieClient {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n \n-    private KieRawClient httpClient;\n+  private KieRawClient httpClient;\n \n-    public KieClient() {\n-        this(new KieRawClient());\n-    }\n+  public KieClient() {\n+    this(new KieRawClient());\n+  }\n \n-    /**\n-     * Customized host,port,domainName and if any one parameter is null, it will be defaults\n-     *\n-     * @param host\n-     * @param port\n-     * @param domainName\n-     */\n-    public KieClient(String host, int port, String domainName) {\n-        this.httpClient = new KieRawClient.Builder().setHost(host).setPort(port).setDomainName(domainName).build();\n-    }\n+  /**\n+   * Customized host,port,domainName and if any one parameter is null, it will be defaults\n+   *\n+   * @param host\n+   * @param port\n+   * @param domainName\n+   */\n+  public KieClient(String host, int port, String domainName) {\n+    this.httpClient = new KieRawClient.Builder().setHost(host).setPort(port).setDomainName(domainName).build();\n+  }\n \n-    public KieClient(KieRawClient serviceCenterRawClient) {\n-        this.httpClient = serviceCenterRawClient;\n-    }\n+  public KieClient(KieRawClient serviceCenterRawClient) {\n+    this.httpClient = serviceCenterRawClient;\n+  }\n \n-    /**\n-     * Put create value of a key\n-     *\n-     * @param key\n-     * @param kvBody\n-     * @return\n-     */\n-    public String putKeyValue(String key, KVBody kvBody) {\n-        try {\n-            ObjectMapper mapper = new ObjectMapper();\n-            HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n-            if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"putKeyValue result:\" + response.getContent());\n-                return response.getContent();\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n-            }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+  /**\n+   * Put create value of a key\n+   *\n+   * @param key\n+   * @param kvBody\n+   * @return\n+   */\n+  public String putKeyValue(String key, KVBody kvBody) {\n+    try {\n+      ObjectMapper mapper = new ObjectMapper();\n+      HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"putKeyValue result:\" + response.getContent());\n+        return response.getContent();\n+      } else {\n+        throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+      }\n+    } catch (IOException | OperationsException e) {\n+      e.printStackTrace();\n     }\n+    return null;\n+  }\n \n-    /**\n-     * Get get value of a key\n-     *\n-     * @param key\n-     * @return\n-     */\n-    public List<KVResponse> getValueOfKey(String key) {\n-        try {\n-            HttpResponse response = httpClient.getHttpRequest(\"/kie/kv/\" + key, null, null);\n-            if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"getKeyValue result:\" + response.getContent());\n-                ObjectMapper mapper = new ObjectMapper();\n-                return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n-                });\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n-            }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+  /**\n+   * Get get value of a key\n+   *\n+   * @param key\n+   * @return\n+   */\n+  public List<KVResponse> getValueOfKey(String key) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/kie/kv/\" + key, null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"getKeyValue result:\" + response.getContent());\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n+        });\n+      } else {\n+        throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+      }\n+    } catch (IOException | OperationsException e) {\n+      e.printStackTrace();\n     }\n+    return null;\n+  }\n \n-    /**\n-     * SearchByLabels get value by lables\n-     *\n-     * @param labels\n-     * @return\n-     */\n-    public List<KVResponse> searchKeyValueByLabels(Map<String, String> labels) {\n-        try {\n-            StringBuilder stringBuilder = new StringBuilder();\n-            for (Entry<String, String> entry : labels.entrySet()) {\n-                stringBuilder.append(entry.getKey());\n-                stringBuilder.append(\":\");\n-                stringBuilder.append(entry.getValue());\n-                stringBuilder.append(\"+\");\n-            }\n-            stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n-            HttpResponse response = httpClient.getHttpRequest(\"/kie/kv?q=\" + stringBuilder.toString(), null, null);\n-            if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"searchKeyValue result:\" + response.getContent());\n-                ObjectMapper mapper = new ObjectMapper();\n-                return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n-                });\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n-            }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+  /**\n+   * SearchByLabels get value by lables\n+   *\n+   * @param labels\n+   * @return\n+   */\n+  public List<KVResponse> searchKeyValueByLabels(Map<String, String> labels) {\n+    try {\n+      StringBuilder stringBuilder = new StringBuilder();\n+      for (Entry<String, String> entry : labels.entrySet()) {\n+        stringBuilder.append(entry.getKey());\n+        stringBuilder.append(\":\");\n+        stringBuilder.append(entry.getValue());\n+        stringBuilder.append(\"+\");\n+      }\n+      stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n+      HttpResponse response = httpClient.getHttpRequest(\"/kie/kv?q=\" + stringBuilder.toString(), null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"searchKeyValue result:\" + response.getContent());\n+        ObjectMapper mapper = new ObjectMapper();\n+        return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n+        });\n+      } else {\n+        throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+      }\n+    } catch (IOException | OperationsException e) {\n+      e.printStackTrace();\n     }\n+    return null;\n+  }\n \n-    /**\n-     * Delete remove kv\n-     *\n-     * @param kvDoc\n-     * @return\n-     */\n-    public String deleteKeyValue(KVDoc kvDoc) {\n-        try {\n-            HttpResponse response = httpClient.deleteHttpRequest(\"/kie/kv/?kvID=\" + kvDoc.get_id(), null, null);\n-            if (response.getStatusCode() == HttpStatus.SC_NO_CONTENT) {\n-                LOGGER.info(\"DeleteKeyValue OK\");\n-                return String.format(\"DeleteKeyValue OK\");\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n-            }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n-        }\n-        return null;\n+  /**\n+   * Delete remove kv\n+   *\n+   * @param kvDoc\n+   * @return\n+   */\n+  public String deleteKeyValue(KVDoc kvDoc) {\n+    try {\n+      HttpResponse response = httpClient.deleteHttpRequest(\"/kie/kv/?kvID=\" + kvDoc.get_id(), null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_NO_CONTENT) {\n+        LOGGER.info(\"DeleteKeyValue OK\");\n+        return String.format(\"DeleteKeyValue OK\");\n+      } else {\n+        throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+      }\n+    } catch (IOException | OperationsException e) {\n+      e.printStackTrace();\n     }\n+    return null;\n+  }\n }\n",
            "diff_size": 116
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/375/KieClient.java\nindex bd0ad5b2b2..97f4bfcc92 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/375/KieClient.java\n@@ -37,14 +37,13 @@ import java.util.Map.Entry;\n  * Created by   on 2019/10/28.\n  */\n public class KieClient {\n-\n-    private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n \n     private KieRawClient httpClient;\n \n     public KieClient() {\n-        this(new KieRawClient());\n-    }\n+  this(new KieRawClient());\n+  }\n \n     /**\n      * Customized host,port,domainName and if any one parameter is null, it will be defaults\n@@ -54,12 +53,12 @@ public class KieClient {\n      * @param domainName\n      */\n     public KieClient(String host, int port, String domainName) {\n-        this.httpClient = new KieRawClient.Builder().setHost(host).setPort(port).setDomainName(domainName).build();\n-    }\n+  this.httpClient = new KieRawClient.Builder().setHost(host).setPort(port).setDomainName(domainName).build();\n+  }\n \n     public KieClient(KieRawClient serviceCenterRawClient) {\n-        this.httpClient = serviceCenterRawClient;\n-    }\n+  this.httpClient = serviceCenterRawClient;\n+  }\n \n     /**\n      * Put create value of a key\n@@ -69,20 +68,20 @@ public class KieClient {\n      * @return\n      */\n     public String putKeyValue(String key, KVBody kvBody) {\n-        try {\n-            ObjectMapper mapper = new ObjectMapper();\n+  try {\n+  ObjectMapper mapper = new ObjectMapper();\n             HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n             if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"putKeyValue result:\" + response.getContent());\n+  LOGGER.info(\"putKeyValue result:\" + response.getContent());\n                 return response.getContent();\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+  } else {\n+  throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n             }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n+  } catch (IOException | OperationsException e) {\n+  e.printStackTrace();\n         }\n         return null;\n-    }\n+  }\n \n     /**\n      * Get get value of a key\n@@ -91,21 +90,21 @@ public class KieClient {\n      * @return\n      */\n     public List<KVResponse> getValueOfKey(String key) {\n-        try {\n-            HttpResponse response = httpClient.getHttpRequest(\"/kie/kv/\" + key, null, null);\n+  try {\n+  HttpResponse response = httpClient.getHttpRequest(\"/kie/kv/\" + key, null, null);\n             if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"getKeyValue result:\" + response.getContent());\n+  LOGGER.info(\"getKeyValue result:\" + response.getContent());\n                 ObjectMapper mapper = new ObjectMapper();\n                 return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n                 });\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+  } else {\n+  throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n             }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n+  } catch (IOException | OperationsException e) {\n+  e.printStackTrace();\n         }\n         return null;\n-    }\n+  }\n \n     /**\n      * SearchByLabels get value by lables\n@@ -114,29 +113,29 @@ public class KieClient {\n      * @return\n      */\n     public List<KVResponse> searchKeyValueByLabels(Map<String, String> labels) {\n-        try {\n-            StringBuilder stringBuilder = new StringBuilder();\n+  try {\n+  StringBuilder stringBuilder = new StringBuilder();\n             for (Entry<String, String> entry : labels.entrySet()) {\n-                stringBuilder.append(entry.getKey());\n+  stringBuilder.append(entry.getKey());\n                 stringBuilder.append(\":\");\n                 stringBuilder.append(entry.getValue());\n                 stringBuilder.append(\"+\");\n-            }\n+  }\n             stringBuilder.deleteCharAt(stringBuilder.length() - 1);\n             HttpResponse response = httpClient.getHttpRequest(\"/kie/kv?q=\" + stringBuilder.toString(), null, null);\n             if (response.getStatusCode() == HttpStatus.SC_OK) {\n-                LOGGER.info(\"searchKeyValue result:\" + response.getContent());\n+  LOGGER.info(\"searchKeyValue result:\" + response.getContent());\n                 ObjectMapper mapper = new ObjectMapper();\n                 return mapper.readValue(response.getContent(), new TypeReference<List<KVResponse>>() {\n                 });\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+  } else {\n+  throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n             }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n+  } catch (IOException | OperationsException e) {\n+  e.printStackTrace();\n         }\n         return null;\n-    }\n+  }\n \n     /**\n      * Delete remove kv\n@@ -145,17 +144,17 @@ public class KieClient {\n      * @return\n      */\n     public String deleteKeyValue(KVDoc kvDoc) {\n-        try {\n-            HttpResponse response = httpClient.deleteHttpRequest(\"/kie/kv/?kvID=\" + kvDoc.get_id(), null, null);\n+  try {\n+  HttpResponse response = httpClient.deleteHttpRequest(\"/kie/kv/?kvID=\" + kvDoc.get_id(), null, null);\n             if (response.getStatusCode() == HttpStatus.SC_NO_CONTENT) {\n-                LOGGER.info(\"DeleteKeyValue OK\");\n+  LOGGER.info(\"DeleteKeyValue OK\");\n                 return String.format(\"DeleteKeyValue OK\");\n-            } else {\n-                throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n+  } else {\n+  throw new OperationsException(response.getStatusCode() + response.getMessage() + response.getContent());\n             }\n-        } catch (IOException | OperationsException e) {\n-            e.printStackTrace();\n+  } catch (IOException | OperationsException e) {\n+  e.printStackTrace();\n         }\n         return null;\n-    }\n-}\n+  }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/375/KieClient.java\nindex bd0ad5b2b2..f141f0cfb0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/375/KieClient.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/375/KieClient.java\n@@ -71,7 +71,7 @@ public class KieClient {\n     public String putKeyValue(String key, KVBody kvBody) {\n         try {\n             ObjectMapper mapper = new ObjectMapper();\n-            HttpResponse response = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n+            HttpResponseresponse = httpClient.putHttpRequest(\"/kie/kv/\" + key, null, mapper.writeValueAsString(kvBody));\n             if (response.getStatusCode() == HttpStatus.SC_OK) {\n                 LOGGER.info(\"putKeyValue result:\" + response.getContent());\n                 return response.getContent();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}