{
    "error_id": "39",
    "information": {
        "errors": [
            {
                "line": "31",
                "column": "5",
                "severity": "warning",
                "message": "Only one statement per line allowed.",
                "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
            }
        ]
    },
    "source_code": "    private boolean publicVisible = true;\n    private boolean includedInExport = true;\n    ;\n\n\n    public DictionaryInfo() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "32",
                    "column": "3",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/39/DictionaryInfo.java\nindex 1548ff3724..0a350cc524 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/39/DictionaryInfo.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.schema;\n \n \n@@ -21,98 +22,98 @@ import org.apache.usergrid.persistence.annotations.EntityDictionary;\n \n \n public class DictionaryInfo {\n-    private String name;\n-    private Class<?> keyType;\n+  private String name;\n+  private Class<?> keyType;\n \n-    private Class<?> valueType; // = Long.class.getName();\n-    private boolean keysIndexedInConnections;\n-    private boolean publicVisible = true;\n-    private boolean includedInExport = true;\n-    ;\n+  private Class<?> valueType; // = Long.class.getName();\n+  private boolean keysIndexedInConnections;\n+  private boolean publicVisible = true;\n+  private boolean includedInExport = true;\n+  ;\n \n \n-    public DictionaryInfo() {\n-    }\n+  public DictionaryInfo() {\n+  }\n \n \n-    public DictionaryInfo( EntityDictionary setAnnotation ) {\n-        setKeyType( setAnnotation.keyType() );\n-        setValueType( setAnnotation.valueType() );\n-        setKeysIndexedInConnections( setAnnotation.keysIndexedInConnections() );\n-        setPublic( setAnnotation.publicVisible() );\n-        setIncludedInExport( setAnnotation.includedInExport() );\n-    }\n+  public DictionaryInfo(EntityDictionary setAnnotation) {\n+    setKeyType(setAnnotation.keyType());\n+    setValueType(setAnnotation.valueType());\n+    setKeysIndexedInConnections(setAnnotation.keysIndexedInConnections());\n+    setPublic(setAnnotation.publicVisible());\n+    setIncludedInExport(setAnnotation.includedInExport());\n+  }\n \n \n-    public String getName() {\n-        return name;\n-    }\n+  public String getName() {\n+    return name;\n+  }\n \n \n-    public void setName( String name ) {\n-        this.name = name;\n-    }\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n \n \n-    public Class<?> getKeyType() {\n-        return keyType;\n-    }\n+  public Class<?> getKeyType() {\n+    return keyType;\n+  }\n \n \n-    public void setKeyType( Class<?> type ) {\n-        if ( type == Object.class ) {\n-            type = null;\n-        }\n-        keyType = type;\n+  public void setKeyType(Class<?> type) {\n+    if (type == Object.class) {\n+      type = null;\n     }\n+    keyType = type;\n+  }\n \n \n-    public Class<?> getValueType() {\n-        return valueType;\n-    }\n+  public Class<?> getValueType() {\n+    return valueType;\n+  }\n \n \n-    public void setValueType( Class<?> valueType ) {\n-        if ( valueType == Object.class ) {\n-            valueType = null;\n-        }\n-        this.valueType = valueType;\n+  public void setValueType(Class<?> valueType) {\n+    if (valueType == Object.class) {\n+      valueType = null;\n     }\n+    this.valueType = valueType;\n+  }\n \n \n-    public boolean isKeysIndexedInConnections() {\n-        return keysIndexedInConnections;\n-    }\n+  public boolean isKeysIndexedInConnections() {\n+    return keysIndexedInConnections;\n+  }\n \n \n-    public void setKeysIndexedInConnections( boolean keysIndexedInConnections ) {\n-        this.keysIndexedInConnections = keysIndexedInConnections;\n-    }\n+  public void setKeysIndexedInConnections(boolean keysIndexedInConnections) {\n+    this.keysIndexedInConnections = keysIndexedInConnections;\n+  }\n \n \n-    public boolean isPublic() {\n-        return publicVisible;\n-    }\n+  public boolean isPublic() {\n+    return publicVisible;\n+  }\n \n \n-    public void setPublic( boolean publicVisible ) {\n-        this.publicVisible = publicVisible;\n-    }\n+  public void setPublic(boolean publicVisible) {\n+    this.publicVisible = publicVisible;\n+  }\n \n \n-    public boolean isIncludedInExport() {\n-        return includedInExport;\n-    }\n+  public boolean isIncludedInExport() {\n+    return includedInExport;\n+  }\n \n \n-    public void setIncludedInExport( boolean includedInExport ) {\n-        this.includedInExport = includedInExport;\n-    }\n+  public void setIncludedInExport(boolean includedInExport) {\n+    this.includedInExport = includedInExport;\n+  }\n \n \n-    @Override\n-    public String toString() {\n-        return \"Set [name=\" + name + \", keyType=\" + keyType + \", valueType=\" + valueType + \", keysIndexedInConnections=\"\n-                + keysIndexedInConnections + \", publicVisible=\" + publicVisible + \"]\";\n-    }\n+  @Override\n+  public String toString() {\n+    return \"Set [name=\" + name + \", keyType=\" + keyType + \", valueType=\" + valueType + \", keysIndexedInConnections=\"\n+        + keysIndexedInConnections + \", publicVisible=\" + publicVisible + \"]\";\n+  }\n }\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/39/DictionaryInfo.java\nindex 1548ff3724..f230369a4f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/39/DictionaryInfo.java\n@@ -115,4 +115,4 @@ public class DictionaryInfo {\n         return \"Set [name=\" + name + \", keyType=\" + keyType + \", valueType=\" + valueType + \", keysIndexedInConnections=\"\n                 + keysIndexedInConnections + \", publicVisible=\" + publicVisible + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/39/DictionaryInfo.java\nindex 1548ff3724..57677a0385 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/39/DictionaryInfo.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/39/DictionaryInfo.java\n@@ -21,9 +21,9 @@ import org.apache.usergrid.persistence.annotations.EntityDictionary;\n \n \n public class DictionaryInfo {\n+\n     private String name;\n     private Class<?> keyType;\n-\n     private Class<?> valueType; // = Long.class.getName();\n     private boolean keysIndexedInConnections;\n     private boolean publicVisible = true;\n@@ -112,7 +112,6 @@ public class DictionaryInfo {\n \n     @Override\n     public String toString() {\n-        return \"Set [name=\" + name + \", keyType=\" + keyType + \", valueType=\" + valueType + \", keysIndexedInConnections=\"\n-                + keysIndexedInConnections + \", publicVisible=\" + publicVisible + \"]\";\n+        return \"Set [name=\" + name + \", keyType=\" + keyType + \", valueType=\" + valueType + \", keysIndexedInConnections=\" + keysIndexedInConnections + \", publicVisible=\" + publicVisible + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}