{
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "62",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public void createIndexConditions(Session session, TableFilter filter) {\n        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n            left.createIndexConditions(session, filter);\n            right.createIndexConditions(session, filter);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/42/ConditionAndOr.java\nindex 0a442f1018..f3ea92c2be 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/42/ConditionAndOr.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import org.h2.engine.Session;\n@@ -45,14 +46,14 @@ public class ConditionAndOr extends Condition {\n     public String getSQL() {\n         String sql;\n         switch (andOrType) {\n-        case AND:\n-            sql = left.getSQL() + \"\\n    AND \" + right.getSQL();\n-            break;\n-        case OR:\n-            sql = left.getSQL() + \"\\n    OR \" + right.getSQL();\n-            break;\n-        default:\n-            throw DbException.throwInternalError(\"andOrType=\" + andOrType);\n+            case AND:\n+                sql = left.getSQL() + \"\\n    AND \" + right.getSQL();\n+                break;\n+            case OR:\n+                sql = left.getSQL() + \"\\n    OR \" + right.getSQL();\n+                break;\n+            default:\n+                throw DbException.throwInternalError(\"andOrType=\" + andOrType);\n         }\n         return \"(\" + sql + \")\";\n     }\n@@ -86,40 +87,40 @@ public class ConditionAndOr extends Condition {\n         Value l = left.getValue(session);\n         Value r;\n         switch (andOrType) {\n-        case AND: {\n-            if (Boolean.FALSE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.FALSE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n-            }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n-            }\n-            return ValueBoolean.get(true);\n-        }\n-        case OR: {\n-            if (Boolean.TRUE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.TRUE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n+            case AND: {\n+                if (Boolean.FALSE.equals(l.getBoolean())) {\n+                    return l;\n+                }\n+                r = right.getValue(session);\n+                if (Boolean.FALSE.equals(r.getBoolean())) {\n+                    return r;\n+                }\n+                if (l == ValueNull.INSTANCE) {\n+                    return l;\n+                }\n+                if (r == ValueNull.INSTANCE) {\n+                    return r;\n+                }\n+                return ValueBoolean.get(true);\n             }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n+            case OR: {\n+                if (Boolean.TRUE.equals(l.getBoolean())) {\n+                    return l;\n+                }\n+                r = right.getValue(session);\n+                if (Boolean.TRUE.equals(r.getBoolean())) {\n+                    return r;\n+                }\n+                if (l == ValueNull.INSTANCE) {\n+                    return l;\n+                }\n+                if (r == ValueNull.INSTANCE) {\n+                    return r;\n+                }\n+                return ValueBoolean.get(false);\n             }\n-            return ValueBoolean.get(false);\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + andOrType);\n+            default:\n+                throw DbException.throwInternalError(\"type=\" + andOrType);\n         }\n     }\n \n@@ -143,13 +144,13 @@ public class ConditionAndOr extends Condition {\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n         if (session.getDatabase().getSettings().optimizeTwoEquals &&\n-                andOrType == AND) {\n+            andOrType == AND) {\n             // try to add conditions (A=B AND B=1: add A=1)\n             if (left instanceof Comparison && right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n                 Expression added = compLeft.getAdditional(\n-                        session, compRight, true);\n+                    session, compRight, true);\n                 if (added != null) {\n                     added = added.optimize(session);\n                     ConditionAndOr a = new ConditionAndOr(AND, this, added);\n@@ -160,42 +161,42 @@ public class ConditionAndOr extends Condition {\n         // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n         // (A=1 AND (B=2 OR B=3))\n         if (andOrType == OR &&\n-                session.getDatabase().getSettings().optimizeOr) {\n+            session.getDatabase().getSettings().optimizeOr) {\n             // try to add conditions (A=B AND B=1: add A=1)\n             if (left instanceof Comparison &&\n-                    right instanceof Comparison) {\n+                right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n                 Expression added = compLeft.getAdditional(\n-                        session, compRight, false);\n+                    session, compRight, false);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n             } else if (left instanceof ConditionIn &&\n-                    right instanceof Comparison) {\n+                right instanceof Comparison) {\n                 Expression added = ((ConditionIn) left).\n-                        getAdditional((Comparison) right);\n+                    getAdditional((Comparison) right);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n             } else if (right instanceof ConditionIn &&\n-                    left instanceof Comparison) {\n+                left instanceof Comparison) {\n                 Expression added = ((ConditionIn) right).\n-                        getAdditional((Comparison) left);\n+                    getAdditional((Comparison) left);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n             } else if (left instanceof ConditionInConstantSet &&\n-                    right instanceof Comparison) {\n+                right instanceof Comparison) {\n                 Expression added = ((ConditionInConstantSet) left).\n-                        getAdditional(session, (Comparison) right);\n+                    getAdditional(session, (Comparison) right);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n             } else if (right instanceof ConditionInConstantSet &&\n-                    left instanceof Comparison) {\n+                left instanceof Comparison) {\n                 Expression added = ((ConditionInConstantSet) right).\n-                        getAdditional(session, (Comparison) left);\n+                    getAdditional(session, (Comparison) left);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n@@ -211,38 +212,38 @@ public class ConditionAndOr extends Condition {\n             return ValueExpression.get(getValue(session));\n         }\n         switch (andOrType) {\n-        case AND:\n-            if (l != null) {\n-                if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return right;\n+            case AND:\n+                if (l != null) {\n+                    if (Boolean.FALSE.equals(l.getBoolean())) {\n+                        return ValueExpression.get(l);\n+                    } else if (Boolean.TRUE.equals(l.getBoolean())) {\n+                        return right;\n+                    }\n+                } else if (r != null) {\n+                    if (Boolean.FALSE.equals(r.getBoolean())) {\n+                        return ValueExpression.get(r);\n+                    } else if (Boolean.TRUE.equals(r.getBoolean())) {\n+                        return left;\n+                    }\n                 }\n-            } else if (r != null) {\n-                if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        case OR:\n-            if (l != null) {\n-                if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return right;\n+                break;\n+            case OR:\n+                if (l != null) {\n+                    if (Boolean.TRUE.equals(l.getBoolean())) {\n+                        return ValueExpression.get(l);\n+                    } else if (Boolean.FALSE.equals(l.getBoolean())) {\n+                        return right;\n+                    }\n+                } else if (r != null) {\n+                    if (Boolean.TRUE.equals(r.getBoolean())) {\n+                        return ValueExpression.get(r);\n+                    } else if (Boolean.FALSE.equals(r.getBoolean())) {\n+                        return left;\n+                    }\n                 }\n-            } else if (r != null) {\n-                if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        default:\n-            DbException.throwInternalError(\"type=\" + andOrType);\n+                break;\n+            default:\n+                DbException.throwInternalError(\"type=\" + andOrType);\n         }\n         return this;\n     }\n@@ -289,7 +290,7 @@ public class ConditionAndOr extends Condition {\n      * Get the left or the right sub-expression of this condition.\n      *\n      * @param getLeft true to get the left sub-expression, false to get the\n-     *            right sub-expression.\n+     *                right sub-expression.\n      * @return the sub-expression\n      */\n     public Expression getExpression(boolean getLeft) {\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/42/ConditionAndOr.java\nindex 0a442f1018..484d1353e5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/42/ConditionAndOr.java\n@@ -17,18 +17,23 @@ import org.h2.value.ValueNull;\n /**\n  * An 'and' or 'or' condition as in WHERE ID=1 AND NAME=?\n  */\n+\n+\n public class ConditionAndOr extends Condition {\n \n     /**\n      * The AND condition type as in ID=1 AND NAME='Hello'.\n      */\n+\n+\n     public static final int AND = 0;\n \n     /**\n      * The OR condition type as in ID=1 OR NAME='Hello'.\n      */\n-    public static final int OR = 1;\n \n+\n+    public static final int OR = 1;\n     private final int andOrType;\n     private Expression left, right;\n \n@@ -142,14 +147,12 @@ public class ConditionAndOr extends Condition {\n         // INSERT INTO TEST VALUES(1, NULL);\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n         // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n-        if (session.getDatabase().getSettings().optimizeTwoEquals &&\n-                andOrType == AND) {\n+        if (session.getDatabase().getSettings().optimizeTwoEquals && andOrType == AND) {\n             // try to add conditions (A=B AND B=1: add A=1)\n             if (left instanceof Comparison && right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, true);\n+                Expression added = compLeft.getAdditional(session, compRight, true);\n                 if (added != null) {\n                     added = added.optimize(session);\n                     ConditionAndOr a = new ConditionAndOr(AND, this, added);\n@@ -159,47 +162,36 @@ public class ConditionAndOr extends Condition {\n         }\n         // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n         // (A=1 AND (B=2 OR B=3))\n-        if (andOrType == OR &&\n-                session.getDatabase().getSettings().optimizeOr) {\n+        if (andOrType == OR && session.getDatabase().getSettings().optimizeOr) {\n             // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison &&\n-                    right instanceof Comparison) {\n+            if (left instanceof Comparison && right instanceof Comparison) {\n                 Comparison compLeft = (Comparison) left;\n                 Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, false);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionIn &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionIn) left).\n-                        getAdditional((Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionIn &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionIn) right).\n-                        getAdditional((Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionInConstantSet &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) left).\n-                        getAdditional(session, (Comparison) right);\n+                Expression added = compLeft.getAdditional(session, compRight, false);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n-            } else if (right instanceof ConditionInConstantSet &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) right).\n-                        getAdditional(session, (Comparison) left);\n+            } else if (left instanceof ConditionIn && right instanceof Comparison) {\n+                Expression added = ((ConditionIn) left).getAdditional((Comparison) right);\n                 if (added != null) {\n                     return added.optimize(session);\n                 }\n-            }\n+            } else if (right instanceof ConditionIn && left instanceof Comparison) {\n+                       Expression added = ((ConditionIn) right).getAdditional((Comparison) left);\n+                       if (added != null) {\n+                           return added.optimize(session);\n+                       }\n+                   } else if (left instanceof ConditionInConstantSet && right instanceof Comparison) {\n+                       Expression added = ((ConditionInConstantSet) left).getAdditional(session, (Comparison) right);\n+                       if (added != null) {\n+                           return added.optimize(session);\n+                       }\n+                   } else if (right instanceof ConditionInConstantSet && left instanceof Comparison) {\n+                              Expression added = ((ConditionInConstantSet) right).getAdditional(session, (Comparison) left);\n+                              if (added != null) {\n+                                  return added.optimize(session);\n+                              }\n+                          }\n         }\n         // TODO optimization: convert .. OR .. to UNION if the cost is lower\n         Value l = left.isConstant() ? left.getValue(session) : null;\n@@ -292,8 +284,10 @@ public class ConditionAndOr extends Condition {\n      *            right sub-expression.\n      * @return the sub-expression\n      */\n+\n+\n     public Expression getExpression(boolean getLeft) {\n         return getLeft ? this.left : right;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "column": "76",
                    "severity": "warning",
                    "message": "'{' at column 76 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "61",
                    "column": "76",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "61",
                    "column": "77",
                    "severity": "warning",
                    "message": "'if' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/42/ConditionAndOr.java\nindex 0a442f1018..cc0482e93d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/42/ConditionAndOr.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/42/ConditionAndOr.java\n@@ -58,242 +58,242 @@ public class ConditionAndOr extends Condition {\n     }\n \n     @Override\n-    public void createIndexConditions(Session session, TableFilter filter) {\n-        if (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n-            left.createIndexConditions(session, filter);\n-            right.createIndexConditions(session, filter);\n-        }\n-    }\n+    public void createIndexConditions(Session session, TableFilter filter) {if\n+        (andOrType == AND) { //\u53ea\u5904\u7406AND\u7684\u573a\u666f\n+         left.createIndexConditions(session, filter);\n+         right.createIndexConditions(session, filter);\n+     }\n+ }\n \n-    @Override\n-    public Expression getNotIfPossible(Session session) {\n-        // (NOT (A OR B)): (NOT(A) AND NOT(B))\n-        // (NOT (A AND B)): (NOT(A) OR NOT(B))\n-        Expression l = left.getNotIfPossible(session);\n-        if (l == null) {\n-            l = new ConditionNot(left);\n-        }\n-        Expression r = right.getNotIfPossible(session);\n-        if (r == null) {\n-            r = new ConditionNot(right);\n-        }\n-        int reversed = andOrType == AND ? OR : AND;\n-        return new ConditionAndOr(reversed, l, r);\n-    }\n+ @Override\n+ public Expression getNotIfPossible(Session session) {\n+     // (NOT (A OR B)): (NOT(A) AND NOT(B))\n+     // (NOT (A AND B)): (NOT(A) OR NOT(B))\n+     Expression l = left.getNotIfPossible(session);\n+     if (l == null) {\n+         l = new ConditionNot(left);\n+     }\n+     Expression r = right.getNotIfPossible(session);\n+     if (r == null) {\n+         r = new ConditionNot(right);\n+     }\n+     int reversed = andOrType == AND ? OR : AND;\n+     return new ConditionAndOr(reversed, l, r);\n+ }\n \n-    @Override\n-    public Value getValue(Session session) {\n-        Value l = left.getValue(session);\n-        Value r;\n-        switch (andOrType) {\n-        case AND: {\n-            if (Boolean.FALSE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.FALSE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n-            }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n-            }\n-            return ValueBoolean.get(true);\n-        }\n-        case OR: {\n-            if (Boolean.TRUE.equals(l.getBoolean())) {\n-                return l;\n-            }\n-            r = right.getValue(session);\n-            if (Boolean.TRUE.equals(r.getBoolean())) {\n-                return r;\n-            }\n-            if (l == ValueNull.INSTANCE) {\n-                return l;\n-            }\n-            if (r == ValueNull.INSTANCE) {\n-                return r;\n-            }\n-            return ValueBoolean.get(false);\n-        }\n-        default:\n-            throw DbException.throwInternalError(\"type=\" + andOrType);\n-        }\n-    }\n+ @Override\n+ public Value getValue(Session session) {\n+     Value l = left.getValue(session);\n+     Value r;\n+     switch (andOrType) {\n+     case AND: {\n+         if (Boolean.FALSE.equals(l.getBoolean())) {\n+             return l;\n+         }\n+         r = right.getValue(session);\n+         if (Boolean.FALSE.equals(r.getBoolean())) {\n+             return r;\n+         }\n+         if (l == ValueNull.INSTANCE) {\n+             return l;\n+         }\n+         if (r == ValueNull.INSTANCE) {\n+             return r;\n+         }\n+         return ValueBoolean.get(true);\n+     }\n+     case OR: {\n+         if (Boolean.TRUE.equals(l.getBoolean())) {\n+             return l;\n+         }\n+         r = right.getValue(session);\n+         if (Boolean.TRUE.equals(r.getBoolean())) {\n+             return r;\n+         }\n+         if (l == ValueNull.INSTANCE) {\n+             return l;\n+         }\n+         if (r == ValueNull.INSTANCE) {\n+             return r;\n+         }\n+         return ValueBoolean.get(false);\n+     }\n+     default:\n+         throw DbException.throwInternalError(\"type=\" + andOrType);\n+     }\n+ }\n \n-    @Override\n-    public Expression optimize(Session session) {\n-        // NULL handling: see wikipedia,\n-        // http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls\n-        left = left.optimize(session);\n-        right = right.optimize(session);\n-        //Cost\u4ee3\u4ef7\u5c11\u7684\u6362\u5de6\u8fb9\n-        int lc = left.getCost(), rc = right.getCost();\n-        if (rc < lc) {\n-            Expression t = left;\n-            left = right;\n-            right = t;\n-        }\n-        // this optimization does not work in the following case,\n-        // but NOT is optimized before:\n-        // CREATE TABLE TEST(A INT, B INT);\n-        // INSERT INTO TEST VALUES(1, NULL);\n-        // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n-        // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n-        if (session.getDatabase().getSettings().optimizeTwoEquals &&\n-                andOrType == AND) {\n-            // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison && right instanceof Comparison) {\n-                Comparison compLeft = (Comparison) left;\n-                Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, true);\n-                if (added != null) {\n-                    added = added.optimize(session);\n-                    ConditionAndOr a = new ConditionAndOr(AND, this, added);\n-                    return a;\n-                }\n-            }\n-        }\n-        // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n-        // (A=1 AND (B=2 OR B=3))\n-        if (andOrType == OR &&\n-                session.getDatabase().getSettings().optimizeOr) {\n-            // try to add conditions (A=B AND B=1: add A=1)\n-            if (left instanceof Comparison &&\n-                    right instanceof Comparison) {\n-                Comparison compLeft = (Comparison) left;\n-                Comparison compRight = (Comparison) right;\n-                Expression added = compLeft.getAdditional(\n-                        session, compRight, false);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionIn &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionIn) left).\n-                        getAdditional((Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionIn &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionIn) right).\n-                        getAdditional((Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (left instanceof ConditionInConstantSet &&\n-                    right instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) left).\n-                        getAdditional(session, (Comparison) right);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            } else if (right instanceof ConditionInConstantSet &&\n-                    left instanceof Comparison) {\n-                Expression added = ((ConditionInConstantSet) right).\n-                        getAdditional(session, (Comparison) left);\n-                if (added != null) {\n-                    return added.optimize(session);\n-                }\n-            }\n-        }\n-        // TODO optimization: convert .. OR .. to UNION if the cost is lower\n-        Value l = left.isConstant() ? left.getValue(session) : null;\n-        Value r = right.isConstant() ? right.getValue(session) : null;\n-        if (l == null && r == null) {\n-            return this;\n-        }\n-        if (l != null && r != null) {\n-            return ValueExpression.get(getValue(session));\n-        }\n-        switch (andOrType) {\n-        case AND:\n-            if (l != null) {\n-                if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return right;\n-                }\n-            } else if (r != null) {\n-                if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        case OR:\n-            if (l != null) {\n-                if (Boolean.TRUE.equals(l.getBoolean())) {\n-                    return ValueExpression.get(l);\n-                } else if (Boolean.FALSE.equals(l.getBoolean())) {\n-                    return right;\n-                }\n-            } else if (r != null) {\n-                if (Boolean.TRUE.equals(r.getBoolean())) {\n-                    return ValueExpression.get(r);\n-                } else if (Boolean.FALSE.equals(r.getBoolean())) {\n-                    return left;\n-                }\n-            }\n-            break;\n-        default:\n-            DbException.throwInternalError(\"type=\" + andOrType);\n-        }\n-        return this;\n-    }\n+ @Override\n+ public Expression optimize(Session session) {\n+     // NULL handling: see wikipedia,\n+     // http://www-cs-students.stanford.edu/~wlam/compsci/sqlnulls\n+     left = left.optimize(session);\n+     right = right.optimize(session);\n+     //Cost\u4ee3\u4ef7\u5c11\u7684\u6362\u5de6\u8fb9\n+     int lc = left.getCost(), rc = right.getCost();\n+     if (rc < lc) {\n+         Expression t = left;\n+         left = right;\n+         right = t;\n+     }\n+     // this optimization does not work in the following case,\n+     // but NOT is optimized before:\n+     // CREATE TABLE TEST(A INT, B INT);\n+     // INSERT INTO TEST VALUES(1, NULL);\n+     // SELECT * FROM TEST WHERE NOT (B=A AND B=0); // no rows\n+     // SELECT * FROM TEST WHERE NOT (B=A AND B=0 AND A=0); // 1, NULL\n+     if (session.getDatabase().getSettings().optimizeTwoEquals &&\n+             andOrType == AND) {\n+         // try to add conditions (A=B AND B=1: add A=1)\n+         if (left instanceof Comparison && right instanceof Comparison) {\n+             Comparison compLeft = (Comparison) left;\n+             Comparison compRight = (Comparison) right;\n+             Expression added = compLeft.getAdditional(\n+                     session, compRight, true);\n+             if (added != null) {\n+                 added = added.optimize(session);\n+                 ConditionAndOr a = new ConditionAndOr(AND, this, added);\n+                 return a;\n+             }\n+         }\n+     }\n+     // TODO optimization: convert ((A=1 AND B=2) OR (A=1 AND B=3)) to\n+     // (A=1 AND (B=2 OR B=3))\n+     if (andOrType == OR &&\n+             session.getDatabase().getSettings().optimizeOr) {\n+         // try to add conditions (A=B AND B=1: add A=1)\n+         if (left instanceof Comparison &&\n+                 right instanceof Comparison) {\n+             Comparison compLeft = (Comparison) left;\n+             Comparison compRight = (Comparison) right;\n+             Expression added = compLeft.getAdditional(\n+                     session, compRight, false);\n+             if (added != null) {\n+                 return added.optimize(session);\n+             }\n+         } else if (left instanceof ConditionIn &&\n+                 right instanceof Comparison) {\n+             Expression added = ((ConditionIn) left).\n+                     getAdditional((Comparison) right);\n+             if (added != null) {\n+                 return added.optimize(session);\n+             }\n+         } else if (right instanceof ConditionIn &&\n+                 left instanceof Comparison) {\n+             Expression added = ((ConditionIn) right).\n+                     getAdditional((Comparison) left);\n+             if (added != null) {\n+                 return added.optimize(session);\n+             }\n+         } else if (left instanceof ConditionInConstantSet &&\n+                 right instanceof Comparison) {\n+             Expression added = ((ConditionInConstantSet) left).\n+                     getAdditional(session, (Comparison) right);\n+             if (added != null) {\n+                 return added.optimize(session);\n+             }\n+         } else if (right instanceof ConditionInConstantSet &&\n+                 left instanceof Comparison) {\n+             Expression added = ((ConditionInConstantSet) right).\n+                     getAdditional(session, (Comparison) left);\n+             if (added != null) {\n+                 return added.optimize(session);\n+             }\n+         }\n+     }\n+     // TODO optimization: convert .. OR .. to UNION if the cost is lower\n+     Value l = left.isConstant() ? left.getValue(session) : null;\n+     Value r = right.isConstant() ? right.getValue(session) : null;\n+     if (l == null && r == null) {\n+         return this;\n+     }\n+     if (l != null && r != null) {\n+         return ValueExpression.get(getValue(session));\n+     }\n+     switch (andOrType) {\n+     case AND:\n+         if (l != null) {\n+             if (Boolean.FALSE.equals(l.getBoolean())) {\n+                 return ValueExpression.get(l);\n+             } else if (Boolean.TRUE.equals(l.getBoolean())) {\n+                 return right;\n+             }\n+         } else if (r != null) {\n+             if (Boolean.FALSE.equals(r.getBoolean())) {\n+                 return ValueExpression.get(r);\n+             } else if (Boolean.TRUE.equals(r.getBoolean())) {\n+                 return left;\n+             }\n+         }\n+         break;\n+     case OR:\n+         if (l != null) {\n+             if (Boolean.TRUE.equals(l.getBoolean())) {\n+                 return ValueExpression.get(l);\n+             } else if (Boolean.FALSE.equals(l.getBoolean())) {\n+                 return right;\n+             }\n+         } else if (r != null) {\n+             if (Boolean.TRUE.equals(r.getBoolean())) {\n+                 return ValueExpression.get(r);\n+             } else if (Boolean.FALSE.equals(r.getBoolean())) {\n+                 return left;\n+             }\n+         }\n+         break;\n+     default:\n+         DbException.throwInternalError(\"type=\" + andOrType);\n+     }\n+     return this;\n+ }\n \n-    @Override\n-    public void addFilterConditions(TableFilter filter, boolean outerJoin) {\n-        if (andOrType == AND) {\n-            left.addFilterConditions(filter, outerJoin);\n-            right.addFilterConditions(filter, outerJoin);\n-        } else {\n-            super.addFilterConditions(filter, outerJoin);\n-        }\n-    }\n+ @Override\n+ public void addFilterConditions(TableFilter filter, boolean outerJoin) {\n+     if (andOrType == AND) {\n+         left.addFilterConditions(filter, outerJoin);\n+         right.addFilterConditions(filter, outerJoin);\n+     } else {\n+         super.addFilterConditions(filter, outerJoin);\n+     }\n+ }\n \n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level) {\n-        left.mapColumns(resolver, level);\n-        right.mapColumns(resolver, level);\n-    }\n+ @Override\n+ public void mapColumns(ColumnResolver resolver, int level) {\n+     left.mapColumns(resolver, level);\n+     right.mapColumns(resolver, level);\n+ }\n \n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean b) {\n-        left.setEvaluatable(tableFilter, b);\n-        right.setEvaluatable(tableFilter, b);\n-    }\n+ @Override\n+ public void setEvaluatable(TableFilter tableFilter, boolean b) {\n+     left.setEvaluatable(tableFilter, b);\n+     right.setEvaluatable(tableFilter, b);\n+ }\n \n-    @Override\n-    public void updateAggregate(Session session) {\n-        left.updateAggregate(session);\n-        right.updateAggregate(session);\n-    }\n+ @Override\n+ public void updateAggregate(Session session) {\n+     left.updateAggregate(session);\n+     right.updateAggregate(session);\n+ }\n \n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        return left.isEverything(visitor) && right.isEverything(visitor);\n-    }\n+ @Override\n+ public boolean isEverything(ExpressionVisitor visitor) {\n+     return left.isEverything(visitor) && right.isEverything(visitor);\n+ }\n \n-    @Override\n-    public int getCost() {\n-        return left.getCost() + right.getCost();\n-    }\n+ @Override\n+ public int getCost() {\n+     return left.getCost() + right.getCost();\n+ }\n \n-    /**\n+ /**\n      * Get the left or the right sub-expression of this condition.\n      *\n      * @param getLeft true to get the left sub-expression, false to get the\n      *            right sub-expression.\n      * @return the sub-expression\n      */\n-    public Expression getExpression(boolean getLeft) {\n-        return getLeft ? this.left : right;\n-    }\n+ public Expression getExpression(boolean getLeft) {\n+     return getLeft ? this.left : right;\n+ }\n \n }\n",
            "diff_size": 221
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}