{
    "error_id": "63",
    "information": {
        "errors": [
            {
                "line": "66",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        return property;\n    }\n    \n    /**\n     * Get the property from the obj or array.\n     * @param obj the List/array.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/63/ListGetExecutor.java\nindex 321115bd91..995d4dde7d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/63/ListGetExecutor.java\n@@ -1,112 +1,112 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n-import java.util.List;\r\n-import java.lang.reflect.Array;\r\n-/**\r\n- * Specialized executor to get a property from a List or array.\r\n- * @since 2.0\r\n- */\r\n-public final class ListGetExecutor extends AbstractExecutor.Get {\r\n-    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method ARRAY_GET =\r\n-            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n-    /** The java.util.obj.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method LIST_GET =\r\n-            initMarker(List.class, \"get\", Integer.TYPE);\r\n-    /** The property. */\r\n-    private final Integer property;\r\n-\r\n-    /**\r\n-     * Creates an instance checking for the List interface or Array capability.\r\n-     * @param is the introspector\r\n-     * @param clazz the class to introspect\r\n-     * @param key the key to use in obj.get(key)\r\n-     */\r\n-    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\r\n-        super(clazz, discover(clazz));\r\n-        property = key;\r\n-    }\r\n-\r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Get the property from the obj or array.\r\n-     * @param obj the List/array.\r\n-     * @return obj.get(key)\r\n-     */\r\n-    @Override\r\n-    public Object execute(final Object obj) {\r\n-        if (method == ARRAY_GET) {\r\n-            return java.lang.reflect.Array.get(obj, property.intValue());\r\n-        } else {\r\n-            return ((List<?>) obj).get(property.intValue());\r\n-        }\r\n-    }\r\n-\r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(final Object obj, Object key) {\r\n-        if (obj != null && method != null\r\n-            && objectClass.equals(obj.getClass())\r\n-            && key instanceof Integer) {\r\n-            if (method == ARRAY_GET) {\r\n-                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n-            } else {\r\n-                return ((List<?>) obj).get(((Integer) key).intValue());\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Finds the method to perform the get on a obj of array.\r\n-     * @param clazz the class to introspect\r\n-     * @return a marker method, obj.get or array.get\r\n-     */\r\n-    static java.lang.reflect.Method discover(Class<?> clazz) {\r\n-        //return discoverList(false, clazz, property);\r\n-        if (clazz.isArray()) {\r\n-            return ARRAY_GET;\r\n-        }\r\n-        if (List.class.isAssignableFrom(clazz)) {\r\n-            return LIST_GET;\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\n+import java.util.List;\n+import java.lang.reflect.Array;\n+/**\n+ * Specialized executor to get a property from a List or array.\n+ * @since 2.0\n+ */\n+public final class ListGetExecutor extends AbstractExecutor.Get {\n+    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\n+    private static final java.lang.reflect.Method ARRAY_GET =\n+            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\n+    /** The java.util.obj.get method used as an active marker in ListGet. */\n+    private static final java.lang.reflect.Method LIST_GET =\n+            initMarker(List.class, \"get\", Integer.TYPE);\n+    /** The property. */\n+    private final Integer property;\n+\n+    /**\n+     * Creates an instance checking for the List interface or Array capability.\n+     * @param is the introspector\n+     * @param clazz the class to introspect\n+     * @param key the key to use in obj.get(key)\n+     */\n+    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\n+        super(clazz, discover(clazz));\n+        property = key;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public Object getTargetProperty() {\n+        return property;\n+    }\n+    /**\n+     * Get the property from the obj or array.\n+     * @param obj the List/array.\n+     * @return obj.get(key)\n+     */\n+\n+    @Override\n+    public Object execute(final Object obj) {\n+        if (method == ARRAY_GET) {\n+            return java.lang.reflect.Array.get(obj, property.intValue());\n+        } else {\n+            return ((List<?>) obj).get(property.intValue());\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public Object tryExecute(final Object obj, Object key) {\n+        if (obj != null && method != null\n+            && objectClass.equals(obj.getClass())\n+            && key instanceof Integer) {\n+            if (method == ARRAY_GET) {\n+                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\n+            } else {\n+                return ((List<?>) obj).get(((Integer) key).intValue());\n+            }\n+        }\n+        return TRY_FAILED;\n+    }\n+\n+\n+    /**\n+     * Finds the method to perform the get on a obj of array.\n+     * @param clazz the class to introspect\n+     * @return a marker method, obj.get or array.get\n+     */\n+    static java.lang.reflect.Method discover(Class<?> clazz) {\n+        //return discoverList(false, clazz, property);\n+        if (clazz.isArray()) {\n+            return ARRAY_GET;\n+        }\n+        if (List.class.isAssignableFrom(clazz)) {\n+            return LIST_GET;\n+        }\n+        return null;\n+    }\n+}\n",
            "diff_size": 112
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/63/ListGetExecutor.java\nindex 321115bd91..1766fe736a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/63/ListGetExecutor.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -31,82 +31,84 @@\n  */\r\n \r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n+\r\n import java.util.List;\r\n import java.lang.reflect.Array;\r\n+\r\n /**\r\n  * Specialized executor to get a property from a List or array.\r\n  * @since 2.0\r\n  */\r\n public final class ListGetExecutor extends AbstractExecutor.Get {\r\n-    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method ARRAY_GET =\r\n-            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n-    /** The java.util.obj.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method LIST_GET =\r\n-            initMarker(List.class, \"get\", Integer.TYPE);\r\n-    /** The property. */\r\n-    private final Integer property;\r\n+  /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n+  private static final java.lang.reflect.Method ARRAY_GET =\r\n+    initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n+  /** The java.util.obj.get method used as an active marker in ListGet. */\r\n+  private static final java.lang.reflect.Method LIST_GET =\r\n+    initMarker(List.class, \"get\", Integer.TYPE);\r\n+  /** The property. */\r\n+  private final Integer property;\r\n \r\n-    /**\r\n-     * Creates an instance checking for the List interface or Array capability.\r\n-     * @param is the introspector\r\n-     * @param clazz the class to introspect\r\n-     * @param key the key to use in obj.get(key)\r\n-     */\r\n-    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\r\n-        super(clazz, discover(clazz));\r\n-        property = key;\r\n-    }\r\n+  /**\r\n+   * Creates an instance checking for the List interface or Array capability.\r\n+   * @param is the introspector\r\n+   * @param clazz the class to introspect\r\n+   * @param key the key to use in obj.get(key)\r\n+   */\r\n+  public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\r\n+    super(clazz, discover(clazz));\r\n+    property = key;\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Get the property from the obj or array.\r\n-     * @param obj the List/array.\r\n-     * @return obj.get(key)\r\n-     */\r\n-    @Override\r\n-    public Object execute(final Object obj) {\r\n-        if (method == ARRAY_GET) {\r\n-            return java.lang.reflect.Array.get(obj, property.intValue());\r\n-        } else {\r\n-            return ((List<?>) obj).get(property.intValue());\r\n-        }\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object getTargetProperty() {\r\n+    return property;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get the property from the obj or array.\r\n+   * @param obj the List/array.\r\n+   * @return obj.get(key)\r\n+   */\r\n+  @Override\r\n+  public Object execute(final Object obj) {\r\n+    if (method == ARRAY_GET) {\r\n+      return java.lang.reflect.Array.get(obj, property.intValue());\r\n+    } else {\r\n+      return ((List<?>) obj).get(property.intValue());\r\n     }\r\n+  }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(final Object obj, Object key) {\r\n-        if (obj != null && method != null\r\n-            && objectClass.equals(obj.getClass())\r\n-            && key instanceof Integer) {\r\n-            if (method == ARRAY_GET) {\r\n-                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n-            } else {\r\n-                return ((List<?>) obj).get(((Integer) key).intValue());\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n+  /** {@inheritDoc} */\r\n+  @Override\r\n+  public Object tryExecute(final Object obj, Object key) {\r\n+    if (obj != null && method != null\r\n+      && objectClass.equals(obj.getClass())\r\n+      && key instanceof Integer) {\r\n+      if (method == ARRAY_GET) {\r\n+        return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n+      } else {\r\n+        return ((List<?>) obj).get(((Integer) key).intValue());\r\n+      }\r\n     }\r\n+    return TRY_FAILED;\r\n+  }\r\n \r\n \r\n-    /**\r\n-     * Finds the method to perform the get on a obj of array.\r\n-     * @param clazz the class to introspect\r\n-     * @return a marker method, obj.get or array.get\r\n-     */\r\n-    static java.lang.reflect.Method discover(Class<?> clazz) {\r\n-        //return discoverList(false, clazz, property);\r\n-        if (clazz.isArray()) {\r\n-            return ARRAY_GET;\r\n-        }\r\n-        if (List.class.isAssignableFrom(clazz)) {\r\n-            return LIST_GET;\r\n-        }\r\n-        return null;\r\n+  /**\r\n+   * Finds the method to perform the get on a obj of array.\r\n+   * @param clazz the class to introspect\r\n+   * @return a marker method, obj.get or array.get\r\n+   */\r\n+  static java.lang.reflect.Method discover(Class<?> clazz) {\r\n+    //return discoverList(false, clazz, property);\r\n+    if (clazz.isArray()) {\r\n+      return ARRAY_GET;\r\n+    }\r\n+    if (List.class.isAssignableFrom(clazz)) {\r\n+      return LIST_GET;\r\n     }\r\n+    return null;\r\n+  }\r\n }\r\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 45.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 100.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/63/ListGetExecutor.java\nindex 321115bd91..baee05092d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/63/ListGetExecutor.java\n@@ -39,12 +39,12 @@ import java.lang.reflect.Array;\n  */\r\n public final class ListGetExecutor extends AbstractExecutor.Get {\r\n     /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method ARRAY_GET =\r\n-            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n-    /** The java.util.obj.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method LIST_GET =\r\n-            initMarker(List.class, \"get\", Integer.TYPE);\r\n-    /** The property. */\r\n+    private static final java.lang.reflect.Method ARRAY_GET = initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\n+\n+/** The java.util.obj.get method used as an active marker in ListGet. */\r\n+    private static final java.lang.reflect.Method LIST_GET = initMarker(List.class, \"get\", Integer.TYPE);\n+\n+/** The property. */\r\n     private final Integer property;\r\n \r\n     /**\r\n@@ -62,14 +62,14 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n     @Override\r\n     public Object getTargetProperty() {\r\n         return property;\r\n-    }\r\n-    \r\n-    /**\r\n+    }\n+\n+/**\r\n      * Get the property from the obj or array.\r\n      * @param obj the List/array.\r\n      * @return obj.get(key)\r\n-     */\r\n-    @Override\r\n+     */\n+@Override\r\n     public Object execute(final Object obj) {\r\n         if (method == ARRAY_GET) {\r\n             return java.lang.reflect.Array.get(obj, property.intValue());\r\n@@ -81,9 +81,8 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n     /** {@inheritDoc} */\r\n     @Override\r\n     public Object tryExecute(final Object obj, Object key) {\r\n-        if (obj != null && method != null\r\n-            && objectClass.equals(obj.getClass())\r\n-            && key instanceof Integer) {\r\n+        if (obj != null && method != null\n+&& objectClass.equals(obj.getClass()) && key instanceof Integer) {\r\n             if (method == ARRAY_GET) {\r\n                 return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n             } else {\r\n@@ -91,10 +90,9 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n             }\r\n         }\r\n         return TRY_FAILED;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n+    }\n+\n+/**\r\n      * Finds the method to perform the get on a obj of array.\r\n      * @param clazz the class to introspect\r\n      * @return a marker method, obj.get or array.get\r\n@@ -109,4 +107,4 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n         }\r\n         return null;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/63/ListGetExecutor.java\nindex 321115bd91..fa9337f910 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/63/ListGetExecutor.java\n@@ -30,21 +30,26 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n-import java.util.List;\r\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\n+\n+import java.util.List;\n import java.lang.reflect.Array;\r\n /**\r\n  * Specialized executor to get a property from a List or array.\r\n  * @since 2.0\r\n- */\r\n+ */\n+\n+\n public final class ListGetExecutor extends AbstractExecutor.Get {\r\n-    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method ARRAY_GET =\r\n-            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n-    /** The java.util.obj.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method LIST_GET =\r\n-            initMarker(List.class, \"get\", Integer.TYPE);\r\n-    /** The property. */\r\n+    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\n+\n+    private static final java.lang.reflect.Method ARRAY_GET = initMarker(Array.class,\n+                                                                         \"get\",\n+                                                                         Object.class,\n+                                                                         Integer.TYPE);\r\n+    /** The java.util.obj.get method used as an active marker in ListGet. */\n+    private static final java.lang.reflect.Method LIST_GET = initMarker(List.class, \"get\", Integer.TYPE);\r\n+    /** The property. */\n     private final Integer property;\r\n \r\n     /**\r\n@@ -52,45 +57,51 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n      * @param is the introspector\r\n      * @param clazz the class to introspect\r\n      * @param key the key to use in obj.get(key)\r\n-     */\r\n-    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\r\n-        super(clazz, discover(clazz));\r\n-        property = key;\r\n+     */\n+\n+\n+    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\n+        super(clazz, discover(clazz));\n+        property = key;\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n+    /** {@inheritDoc} */\n+\n+    @Override\n+    public Object getTargetProperty() {\n+        return property;\n     }\r\n     \r\n     /**\r\n      * Get the property from the obj or array.\r\n      * @param obj the List/array.\r\n      * @return obj.get(key)\r\n-     */\r\n-    @Override\r\n-    public Object execute(final Object obj) {\r\n-        if (method == ARRAY_GET) {\r\n-            return java.lang.reflect.Array.get(obj, property.intValue());\r\n-        } else {\r\n-            return ((List<?>) obj).get(property.intValue());\r\n-        }\r\n+     */\n+\n+\n+    @Override\n+    public Object execute(final Object obj) {\n+        if (method == ARRAY_GET) {\n+            return java.lang.reflect.Array.get(obj, property.intValue());\n+        } else {\n+            return ((List<?>) obj).get(property.intValue());\n+        }\n     }\r\n \r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(final Object obj, Object key) {\r\n-        if (obj != null && method != null\r\n-            && objectClass.equals(obj.getClass())\r\n-            && key instanceof Integer) {\r\n-            if (method == ARRAY_GET) {\r\n-                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n-            } else {\r\n-                return ((List<?>) obj).get(((Integer) key).intValue());\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n+    /** {@inheritDoc} */\n+\n+\n+    @Override\n+    public Object tryExecute(final Object obj, Object key) {\n+        if (obj != null && method != null\n+        && objectClass.equals(obj.getClass()) && key instanceof Integer) {\n+            if (method == ARRAY_GET) {\n+                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\n+            } else {\n+                return ((List<?>) obj).get(((Integer) key).intValue());\n+            }\n+        }\n+        return TRY_FAILED;\n     }\r\n \r\n \r\n@@ -98,15 +109,18 @@ public final class ListGetExecutor extends AbstractExecutor.Get {\n      * Finds the method to perform the get on a obj of array.\r\n      * @param clazz the class to introspect\r\n      * @return a marker method, obj.get or array.get\r\n-     */\r\n+     */\n+\n+\n     static java.lang.reflect.Method discover(Class<?> clazz) {\r\n-        //return discoverList(false, clazz, property);\r\n-        if (clazz.isArray()) {\r\n-            return ARRAY_GET;\r\n-        }\r\n-        if (List.class.isAssignableFrom(clazz)) {\r\n-            return LIST_GET;\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+        //return discoverList(false, clazz, property);\n+        if (clazz.isArray()) {\n+            return ARRAY_GET;\n+        }\n+\n+        if (List.class.isAssignableFrom(clazz)) {\n+            return LIST_GET;\n+        }\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/63/ListGetExecutor.java\nindex 321115bd91..995d4dde7d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/63/ListGetExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/63/ListGetExecutor.java\n@@ -1,112 +1,112 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\r\n-import java.util.List;\r\n-import java.lang.reflect.Array;\r\n-/**\r\n- * Specialized executor to get a property from a List or array.\r\n- * @since 2.0\r\n- */\r\n-public final class ListGetExecutor extends AbstractExecutor.Get {\r\n-    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method ARRAY_GET =\r\n-            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\r\n-    /** The java.util.obj.get method used as an active marker in ListGet. */\r\n-    private static final java.lang.reflect.Method LIST_GET =\r\n-            initMarker(List.class, \"get\", Integer.TYPE);\r\n-    /** The property. */\r\n-    private final Integer property;\r\n-\r\n-    /**\r\n-     * Creates an instance checking for the List interface or Array capability.\r\n-     * @param is the introspector\r\n-     * @param clazz the class to introspect\r\n-     * @param key the key to use in obj.get(key)\r\n-     */\r\n-    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\r\n-        super(clazz, discover(clazz));\r\n-        property = key;\r\n-    }\r\n-\r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object getTargetProperty() {\r\n-        return property;\r\n-    }\r\n-    \r\n-    /**\r\n-     * Get the property from the obj or array.\r\n-     * @param obj the List/array.\r\n-     * @return obj.get(key)\r\n-     */\r\n-    @Override\r\n-    public Object execute(final Object obj) {\r\n-        if (method == ARRAY_GET) {\r\n-            return java.lang.reflect.Array.get(obj, property.intValue());\r\n-        } else {\r\n-            return ((List<?>) obj).get(property.intValue());\r\n-        }\r\n-    }\r\n-\r\n-    /** {@inheritDoc} */\r\n-    @Override\r\n-    public Object tryExecute(final Object obj, Object key) {\r\n-        if (obj != null && method != null\r\n-            && objectClass.equals(obj.getClass())\r\n-            && key instanceof Integer) {\r\n-            if (method == ARRAY_GET) {\r\n-                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\r\n-            } else {\r\n-                return ((List<?>) obj).get(((Integer) key).intValue());\r\n-            }\r\n-        }\r\n-        return TRY_FAILED;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Finds the method to perform the get on a obj of array.\r\n-     * @param clazz the class to introspect\r\n-     * @return a marker method, obj.get or array.get\r\n-     */\r\n-    static java.lang.reflect.Method discover(Class<?> clazz) {\r\n-        //return discoverList(false, clazz, property);\r\n-        if (clazz.isArray()) {\r\n-            return ARRAY_GET;\r\n-        }\r\n-        if (List.class.isAssignableFrom(clazz)) {\r\n-            return LIST_GET;\r\n-        }\r\n-        return null;\r\n-    }\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.jexl2.internal;\n+import java.util.List;\n+import java.lang.reflect.Array;\n+/**\n+ * Specialized executor to get a property from a List or array.\n+ * @since 2.0\n+ */\n+public final class ListGetExecutor extends AbstractExecutor.Get {\n+    /** The java.lang.reflect.Array.get method used as an active marker in ListGet. */\n+    private static final java.lang.reflect.Method ARRAY_GET =\n+            initMarker(Array.class, \"get\", Object.class, Integer.TYPE);\n+    /** The java.util.obj.get method used as an active marker in ListGet. */\n+    private static final java.lang.reflect.Method LIST_GET =\n+            initMarker(List.class, \"get\", Integer.TYPE);\n+    /** The property. */\n+    private final Integer property;\n+\n+    /**\n+     * Creates an instance checking for the List interface or Array capability.\n+     * @param is the introspector\n+     * @param clazz the class to introspect\n+     * @param key the key to use in obj.get(key)\n+     */\n+    public ListGetExecutor(Introspector is, Class<?> clazz, Integer key) {\n+        super(clazz, discover(clazz));\n+        property = key;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public Object getTargetProperty() {\n+        return property;\n+    }\n+    /**\n+     * Get the property from the obj or array.\n+     * @param obj the List/array.\n+     * @return obj.get(key)\n+     */\n+\n+    @Override\n+    public Object execute(final Object obj) {\n+        if (method == ARRAY_GET) {\n+            return java.lang.reflect.Array.get(obj, property.intValue());\n+        } else {\n+            return ((List<?>) obj).get(property.intValue());\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public Object tryExecute(final Object obj, Object key) {\n+        if (obj != null && method != null\n+            && objectClass.equals(obj.getClass())\n+            && key instanceof Integer) {\n+            if (method == ARRAY_GET) {\n+                return java.lang.reflect.Array.get(obj, ((Integer) key).intValue());\n+            } else {\n+                return ((List<?>) obj).get(((Integer) key).intValue());\n+            }\n+        }\n+        return TRY_FAILED;\n+    }\n+\n+\n+    /**\n+     * Finds the method to perform the get on a obj of array.\n+     * @param clazz the class to introspect\n+     * @return a marker method, obj.get or array.get\n+     */\n+    static java.lang.reflect.Method discover(Class<?> clazz) {\n+        //return discoverList(false, clazz, property);\n+        if (clazz.isArray()) {\n+            return ARRAY_GET;\n+        }\n+        if (List.class.isAssignableFrom(clazz)) {\n+            return LIST_GET;\n+        }\n+        return null;\n+    }\n+}\n",
            "diff_size": 112
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}