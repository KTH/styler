{
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "170",
                "column": "119",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            token.getCertificate().getSubjectX500Principal());\n        if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n        } else {\n          try {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..7e0628c48e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/7/SKOnlineOCSPSource.java\n@@ -167,65 +167,65 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         List<CertificateToken> tokens = this.configuration.getTSL().get(\n             token.getCertificate().getSubjectX500Principal());\n         if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n-          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n-              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n-        } else {\n-          try {\n-            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n-                X509CertificateHolder(tokens.get(0).getEncoded()));\n-            if (!response.isSignatureValid(provider)) {\n-              throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n-            }\n-          } catch (SignatureVerificationException e) {\n-            throw e;\n-          } catch (Exception e) {\n-            throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n-          }\n-        }\n-      }\n-    } else {\n-      if (!this.configuration.isTest()) {\n-        LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n-      }\n-    }\n-  }\n+          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \"\n+              + \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n+     } else {\n+       try {\n+         ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n+             X509CertificateHolder(tokens.get(0).getEncoded()));\n+         if (!response.isSignatureValid(provider)) {\n+           throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n+         }\n+       } catch (SignatureVerificationException e) {\n+         throw e;\n+       } catch (Exception e) {\n+         throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n+       }\n+     }\n+   }\n+ } else {\n+   if (!this.configuration.isTest()) {\n+     LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n+   }\n+ }\n+}\n \n-  private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n-    Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n-        this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n-        .getOCSPAccessCertificatePasswordAsString());\n-    return signatureTokenConnection.getKeys().get(0);\n-  }\n+private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n+  Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n+      this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n+      .getOCSPAccessCertificatePasswordAsString());\n+  return signatureTokenConnection.getKeys().get(0);\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  /**\n+/**\n    * Gets configuration\n    *\n    * @return Configuration\n    */\n-  public Configuration getConfiguration() {\n-    return configuration;\n-  }\n+public Configuration getConfiguration() {\n+  return configuration;\n+}\n \n-  /**\n+/**\n    * Gets data loader\n    *\n    * @return SkDataLoader\n    */\n-  public SkDataLoader getDataLoader() {\n-    return dataLoader;\n-  }\n+public SkDataLoader getDataLoader() {\n+  return dataLoader;\n+}\n \n-  /**\n+/**\n    * Define data loader.\n    *\n    * @param dataLoader Data loader object to be used.\n    */\n-  public void setDataLoader(SkDataLoader dataLoader) {\n-    this.dataLoader = dataLoader;\n-  }\n+public void setDataLoader(SkDataLoader dataLoader) {\n+  this.dataLoader = dataLoader;\n+}\n \n }\n",
            "diff_size": 41
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "170",
                    "column": "119",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..10aabf7fab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/7/SKOnlineOCSPSource.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl;\n \n@@ -151,7 +151,7 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         X509Certificate signingCertificate = privateKeyEntry.getCertificate().getCertificate();\n         builder.setRequestorName(new GeneralName(new JcaX509CertificateHolder(signingCertificate).getSubject()));\n         return builder.build(signerBuilder.build(((KSPrivateKeyEntry) privateKeyEntry).getPrivateKey()),\n-            new X509CertificateHolder[]{new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n+            new X509CertificateHolder[] {new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n       }\n       return builder.build().getEncoded();\n     } catch (Exception e) {\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..68b9b63dee 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/7/SKOnlineOCSPSource.java\n@@ -130,9 +130,8 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n     DEROctetString receivedNonce = (DEROctetString) extension.getExtnValue();\n     if (!receivedNonce.equals(expectedNonce)) {\n       throw new DigiDoc4JException(\n-          String.format(\"The OCSP request was the victim of replay attack (nonce sent <%s>, nonce received <%s>)\",\n-              expectedNonce, receivedNonce));\n-    }\n+          String.format(\"The OCSP request was the victim of replay attack (nonce sent <%s>, nonce received <%s>)\", expectedNonce, receivedNonce));\n+  }\n   }\n \n   private byte[] buildRequest(final CertificateID certificateID, Extension nonceExtension) throws DSSException {\n@@ -151,7 +150,7 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         X509Certificate signingCertificate = privateKeyEntry.getCertificate().getCertificate();\n         builder.setRequestorName(new GeneralName(new JcaX509CertificateHolder(signingCertificate).getSubject()));\n         return builder.build(signerBuilder.build(((KSPrivateKeyEntry) privateKeyEntry).getPrivateKey()),\n-            new X509CertificateHolder[]{new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n+            new X509CertificateHolder[] {new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n       }\n       return builder.build().getEncoded();\n     } catch (Exception e) {\n@@ -167,12 +166,10 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         List<CertificateToken> tokens = this.configuration.getTSL().get(\n             token.getCertificate().getSubjectX500Principal());\n         if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n-          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n-              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n+          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" + \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n         } else {\n           try {\n-            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n-                X509CertificateHolder(tokens.get(0).getEncoded()));\n+            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new X509CertificateHolder(tokens.get(0).getEncoded()));\n             if (!response.isSignatureValid(provider)) {\n               throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n             }\n@@ -192,8 +189,7 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n \n   private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n     Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n-        this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n-        .getOCSPAccessCertificatePasswordAsString());\n+        this.configuration.getOCSPAccessCertificateFileName(), this.configuration.getOCSPAccessCertificatePasswordAsString());\n     return signatureTokenConnection.getKeys().get(0);\n   }\n \n@@ -228,4 +224,4 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n     this.dataLoader = dataLoader;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..9ae76d5f8a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/7/SKOnlineOCSPSource.java\n@@ -14,7 +14,6 @@ import java.io.IOException;\n import java.security.cert.X509Certificate;\n import java.util.Arrays;\n import java.util.List;\n-\n import org.apache.commons.collections4.CollectionUtils;\n import org.bouncycastle.asn1.DEROctetString;\n import org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers;\n@@ -39,7 +38,6 @@ import org.digidoc4j.exceptions.TechnicalException;\n import org.digidoc4j.impl.asic.SkDataLoader;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.DSSException;\n import eu.europa.esig.dss.DSSRevocationUtils;\n import eu.europa.esig.dss.DSSUtils;\n@@ -53,149 +51,147 @@ import eu.europa.esig.dss.x509.ocsp.OCSPToken;\n /**\n  * SK OCSP source location.\n  */\n+\n+\n public abstract class SKOnlineOCSPSource implements OCSPSource {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(SKOnlineOCSPSource.class);\n-  private SkDataLoader dataLoader;\n-  private Configuration configuration;\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SKOnlineOCSPSource.class);\n+    private SkDataLoader dataLoader;\n+    private Configuration configuration;\n \n   /**\n    * SK Online OCSP Source constructor\n    *\n    * @param configuration configuration to use for this source\n    */\n-  public SKOnlineOCSPSource(Configuration configuration) {\n+\n+\n+    public SKOnlineOCSPSource(Configuration configuration) {\n     this.configuration = configuration;\n-  }\n+    }\n \n   /**\n    * Returns SK OCSP source location.\n    *\n    * @return OCSP source location\n    */\n-  public String getAccessLocation() {\n+\n+\n+    public String getAccessLocation() {\n     if (this.configuration != null) {\n-      return this.configuration.getOcspSource();\n+        return this.configuration.getOcspSource();\n     }\n     return Constant.Test.OCSP_SOURCE;\n-  }\n+    }\n \n-  @Override\n-  public OCSPToken getOCSPToken(CertificateToken certificateToken, CertificateToken issuerCertificateToken) {\n+    @Override\n+    public OCSPToken getOCSPToken(CertificateToken certificateToken, CertificateToken issuerCertificateToken) {\n     LOGGER.debug(\"Getting OCSP token ...\");\n     try {\n-      if (this.dataLoader == null) {\n+        if (this.dataLoader == null) {\n         throw new TechnicalException(\"Data loader is null\");\n-      }\n-      if (LOGGER.isTraceEnabled()) {\n+        }\n+        if (LOGGER.isTraceEnabled()) {\n         LOGGER.trace(\"Querying by DSS ID <{}>\", certificateToken.getDSSIdAsString());\n-      }\n-      CertificateID certificateID = DSSRevocationUtils.getOCSPCertificateID(certificateToken, issuerCertificateToken);\n-      Extension nonceExtension = this.createNonce();\n-      BasicOCSPResp response = (BasicOCSPResp) new OCSPResp(this.dataLoader.post(this.getAccessLocation(),\n-          this.buildRequest(certificateID, nonceExtension))).getResponseObject();\n-      if (response == null) {\n+        }\n+        CertificateID certificateID = DSSRevocationUtils.getOCSPCertificateID(certificateToken, issuerCertificateToken);\n+        Extension nonceExtension = this.createNonce();\n+        BasicOCSPResp response = (BasicOCSPResp) new OCSPResp(this.dataLoader.post(this.getAccessLocation(), this.buildRequest(certificateID, nonceExtension))).getResponseObject();\n+        if (response == null) {\n         LOGGER.warn(\"Basic OCSP response is empty\");\n         return null;\n-      }\n-      this.verifyResponse(response);\n-      this.checkNonce(response, nonceExtension);\n-      OCSPToken token = new OCSPToken();\n-      token.setBasicOCSPResp(response);\n-      token.setCertId(certificateID);\n-      token.setSourceURL(this.getAccessLocation());\n-      token.extractInfo();\n-      if (token.getThisUpdate() == null) {\n+        }\n+        this.verifyResponse(response);\n+        this.checkNonce(response, nonceExtension);\n+        OCSPToken token = new OCSPToken();\n+        token.setBasicOCSPResp(response);\n+        token.setCertId(certificateID);\n+        token.setSourceURL(this.getAccessLocation());\n+        token.extractInfo();\n+        if (token.getThisUpdate() == null) {\n         LOGGER.warn(\"No best single match of OCSP response found\");\n         return null;\n-      }\n-      certificateToken.addRevocationToken(token);\n-      return token;\n+        }\n+        certificateToken.addRevocationToken(token);\n+        return token;\n     } catch (DSSException e) {\n       throw e;\n     } catch (Exception e) {\n       throw new DSSException(e);\n     }\n-  }\n+    }\n \n   /*\n    * RESTRICTED METHODS\n    */\n \n-  protected abstract Extension createNonce();\n-\n-  protected void checkNonce(BasicOCSPResp response, Extension expectedNonceExtension) {\n+    protected abstract Extension createNonce();\n+    protected void checkNonce(BasicOCSPResp response, Extension expectedNonceExtension) {\n     Extension extension = response.getExtension(OCSPObjectIdentifiers.id_pkix_ocsp_nonce);\n     DEROctetString expectedNonce = (DEROctetString) expectedNonceExtension.getExtnValue();\n     DEROctetString receivedNonce = (DEROctetString) extension.getExtnValue();\n     if (!receivedNonce.equals(expectedNonce)) {\n-      throw new DigiDoc4JException(\n-          String.format(\"The OCSP request was the victim of replay attack (nonce sent <%s>, nonce received <%s>)\",\n-              expectedNonce, receivedNonce));\n+        throw new DigiDoc4JException(String.format(\"The OCSP request was the victim of replay attack (nonce sent <%s>, nonce received <%s>)\", expectedNonce, receivedNonce));\n+    }\n     }\n-  }\n \n-  private byte[] buildRequest(final CertificateID certificateID, Extension nonceExtension) throws DSSException {\n+    private byte[] buildRequest(final CertificateID certificateID, Extension nonceExtension) throws DSSException {\n     try {\n-      LOGGER.debug(\"Building OCSP request ...\");\n-      OCSPReqBuilder builder = new OCSPReqBuilder();\n-      builder.addRequest(certificateID);\n-      builder.setRequestExtensions(new Extensions(nonceExtension));\n-      if (this.configuration.hasToBeOCSPRequestSigned()) {\n+        LOGGER.debug(\"Building OCSP request ...\");\n+        OCSPReqBuilder builder = new OCSPReqBuilder();\n+        builder.addRequest(certificateID);\n+        builder.setRequestExtensions(new Extensions(nonceExtension));\n+        if (this.configuration.hasToBeOCSPRequestSigned()) {\n         LOGGER.info(\"Using signed OCSP request ...\");\n         JcaContentSignerBuilder signerBuilder = new JcaContentSignerBuilder(\"SHA1withRSA\");\n         if (!this.configuration.isOCSPSigningConfigurationAvailable()) {\n-          throw new ConfigurationException(\"Configuration needed for OCSP request signing is not complete\");\n+                                                               throw new ConfigurationException(\"Configuration needed for OCSP request signing is not complete\");\n         }\n         DSSPrivateKeyEntry privateKeyEntry = this.getOCSPAccessCertificatePrivateKey();\n         X509Certificate signingCertificate = privateKeyEntry.getCertificate().getCertificate();\n         builder.setRequestorName(new GeneralName(new JcaX509CertificateHolder(signingCertificate).getSubject()));\n-        return builder.build(signerBuilder.build(((KSPrivateKeyEntry) privateKeyEntry).getPrivateKey()),\n-            new X509CertificateHolder[]{new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n-      }\n-      return builder.build().getEncoded();\n+        return builder.build(signerBuilder.build(((KSPrivateKeyEntry) privateKeyEntry).getPrivateKey()), new X509CertificateHolder[] {\n+                   new X509CertificateHolder(signingCertificate.getEncoded())}).getEncoded();\n+        }\n+        return builder.build().getEncoded();\n     } catch (Exception e) {\n       throw new DSSException(e);\n     }\n-  }\n+    }\n \n-  private void verifyResponse(BasicOCSPResp response) throws IOException {\n+    private void verifyResponse(BasicOCSPResp response) throws IOException {\n     List<X509CertificateHolder> holders = Arrays.asList(response.getCerts());\n     if (CollectionUtils.isNotEmpty(holders)) {\n-      for (X509CertificateHolder holder : holders) {\n-        CertificateToken token = DSSUtils.loadCertificate(holder.getEncoded());\n-        List<CertificateToken> tokens = this.configuration.getTSL().get(\n-            token.getCertificate().getSubjectX500Principal());\n-        if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n-          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n-              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n-        } else {\n-          try {\n-            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n-                X509CertificateHolder(tokens.get(0).getEncoded()));\n-            if (!response.isSignatureValid(provider)) {\n-              throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n-            }\n-          } catch (SignatureVerificationException e) {\n-            throw e;\n-          } catch (Exception e) {\n-            throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n-          }\n+        for (X509CertificateHolder holder : holders) {\n+                                                 CertificateToken token = DSSUtils.loadCertificate(holder.getEncoded());\n+                                                 List<CertificateToken> tokens = this.configuration.getTSL().get(token.getCertificate().getSubjectX500Principal());\n+                                                 if (CollectionUtils.isEmpty(tokens)\n+                                                     || tokens.size() != 1) {\n+                                                         throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" + \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n+                                                 } else {\n+                                                   try {\n+                                                            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new X509CertificateHolder(tokens.get(0).getEncoded()));\n+                                                            if (!response.isSignatureValid(provider)) {\n+                                                       throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n+                                                            }\n+                                                   } catch (SignatureVerificationException e) {\n+                                                     throw e;\n+                                                   } catch (Exception e) {\n+                                                     throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n+                                                   }\n+                                                 }\n         }\n-      }\n     } else {\n       if (!this.configuration.isTest()) {\n-        LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n+               LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n       }\n     }\n-  }\n+    }\n \n-  private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n-    Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n-        this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n-        .getOCSPAccessCertificatePasswordAsString());\n+    private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n+    Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(this.configuration.getOCSPAccessCertificateFileName(), this.configuration.getOCSPAccessCertificatePasswordAsString());\n     return signatureTokenConnection.getKeys().get(0);\n-  }\n+    }\n \n   /*\n    * ACCESSORS\n@@ -206,26 +202,32 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n    *\n    * @return Configuration\n    */\n-  public Configuration getConfiguration() {\n+\n+\n+    public Configuration getConfiguration() {\n     return configuration;\n-  }\n+    }\n \n   /**\n    * Gets data loader\n    *\n    * @return SkDataLoader\n    */\n-  public SkDataLoader getDataLoader() {\n+\n+\n+    public SkDataLoader getDataLoader() {\n     return dataLoader;\n-  }\n+    }\n \n   /**\n    * Define data loader.\n    *\n    * @param dataLoader Data loader object to be used.\n    */\n-  public void setDataLoader(SkDataLoader dataLoader) {\n+\n+\n+    public void setDataLoader(SkDataLoader dataLoader) {\n     this.dataLoader = dataLoader;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 100
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..7e0628c48e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/7/SKOnlineOCSPSource.java\n@@ -167,65 +167,65 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         List<CertificateToken> tokens = this.configuration.getTSL().get(\n             token.getCertificate().getSubjectX500Principal());\n         if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n-          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n-              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n-        } else {\n-          try {\n-            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n-                X509CertificateHolder(tokens.get(0).getEncoded()));\n-            if (!response.isSignatureValid(provider)) {\n-              throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n-            }\n-          } catch (SignatureVerificationException e) {\n-            throw e;\n-          } catch (Exception e) {\n-            throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n-          }\n-        }\n-      }\n-    } else {\n-      if (!this.configuration.isTest()) {\n-        LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n-      }\n-    }\n-  }\n+          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \"\n+              + \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n+     } else {\n+       try {\n+         ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n+             X509CertificateHolder(tokens.get(0).getEncoded()));\n+         if (!response.isSignatureValid(provider)) {\n+           throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n+         }\n+       } catch (SignatureVerificationException e) {\n+         throw e;\n+       } catch (Exception e) {\n+         throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n+       }\n+     }\n+   }\n+ } else {\n+   if (!this.configuration.isTest()) {\n+     LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n+   }\n+ }\n+}\n \n-  private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n-    Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n-        this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n-        .getOCSPAccessCertificatePasswordAsString());\n-    return signatureTokenConnection.getKeys().get(0);\n-  }\n+private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n+  Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n+      this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n+      .getOCSPAccessCertificatePasswordAsString());\n+  return signatureTokenConnection.getKeys().get(0);\n+}\n \n-  /*\n+/*\n    * ACCESSORS\n    */\n \n-  /**\n+/**\n    * Gets configuration\n    *\n    * @return Configuration\n    */\n-  public Configuration getConfiguration() {\n-    return configuration;\n-  }\n+public Configuration getConfiguration() {\n+  return configuration;\n+}\n \n-  /**\n+/**\n    * Gets data loader\n    *\n    * @return SkDataLoader\n    */\n-  public SkDataLoader getDataLoader() {\n-    return dataLoader;\n-  }\n+public SkDataLoader getDataLoader() {\n+  return dataLoader;\n+}\n \n-  /**\n+/**\n    * Define data loader.\n    *\n    * @param dataLoader Data loader object to be used.\n    */\n-  public void setDataLoader(SkDataLoader dataLoader) {\n-    this.dataLoader = dataLoader;\n-  }\n+public void setDataLoader(SkDataLoader dataLoader) {\n+  this.dataLoader = dataLoader;\n+}\n \n }\n",
            "diff_size": 41
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "column": "119",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/7/SKOnlineOCSPSource.java\nindex 63ccdd9d7c..8a3ee42e8b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/7/SKOnlineOCSPSource.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/7/SKOnlineOCSPSource.java\n@@ -167,65 +167,64 @@ public abstract class SKOnlineOCSPSource implements OCSPSource {\n         List<CertificateToken> tokens = this.configuration.getTSL().get(\n             token.getCertificate().getSubjectX500Principal());\n         if (CollectionUtils.isEmpty(tokens) || tokens.size() != 1) {\n-          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\n-              \"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n-        } else {\n-          try {\n-            ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n-                X509CertificateHolder(tokens.get(0).getEncoded()));\n-            if (!response.isSignatureValid(provider)) {\n-              throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n-            }\n-          } catch (SignatureVerificationException e) {\n-            throw e;\n-          } catch (Exception e) {\n-            throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n-          }\n-        }\n-      }\n+          throw new SignatureVerificationException(String.format(\"OCSP response certificate <%s> match is not found \" +\"in TSL (<%s> results in total)\", token.getDSSIdAsString(), tokens.size()));\n     } else {\n-      if (!this.configuration.isTest()) {\n-        LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n+      try {\n+        ContentVerifierProvider provider = new JcaContentVerifierProviderBuilder().setProvider(\"BC\").build(new\n+            X509CertificateHolder(tokens.get(0).getEncoded()));\n+        if (!response.isSignatureValid(provider)) {\n+          throw new SignatureVerificationException(\"OCSP response signature is invalid\");\n+        }\n+      } catch (SignatureVerificationException e) {\n+        throw e;\n+      } catch (Exception e) {\n+        throw new SignatureVerificationException(\"Unable to verify response signature\", e);\n       }\n     }\n   }\n-\n-  private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n-    Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n-        this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n-        .getOCSPAccessCertificatePasswordAsString());\n-    return signatureTokenConnection.getKeys().get(0);\n+} else {\n+  if (!this.configuration.isTest()) {\n+    LOGGER.warn(\"OCSP response signature will not be verified. No response certificates has been found\");\n   }\n+}\n+}\n \n-  /*\n+private DSSPrivateKeyEntry getOCSPAccessCertificatePrivateKey() throws IOException {\n+  Pkcs12SignatureToken signatureTokenConnection = new Pkcs12SignatureToken(\n+      this.configuration.getOCSPAccessCertificateFileName(), this.configuration\n+      .getOCSPAccessCertificatePasswordAsString());\n+  return signatureTokenConnection.getKeys().get(0);\n+}\n+\n+/*\n    * ACCESSORS\n    */\n \n-  /**\n+/**\n    * Gets configuration\n    *\n    * @return Configuration\n    */\n-  public Configuration getConfiguration() {\n-    return configuration;\n-  }\n+public Configuration getConfiguration() {\n+  return configuration;\n+}\n \n-  /**\n+/**\n    * Gets data loader\n    *\n    * @return SkDataLoader\n    */\n-  public SkDataLoader getDataLoader() {\n-    return dataLoader;\n-  }\n+public SkDataLoader getDataLoader() {\n+  return dataLoader;\n+}\n \n-  /**\n+/**\n    * Define data loader.\n    *\n    * @param dataLoader Data loader object to be used.\n    */\n-  public void setDataLoader(SkDataLoader dataLoader) {\n-    this.dataLoader = dataLoader;\n-  }\n+public void setDataLoader(SkDataLoader dataLoader) {\n+  this.dataLoader = dataLoader;\n+}\n \n }\n",
            "diff_size": 54
        }
    ]
}