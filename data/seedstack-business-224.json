{
    "error_id": "224",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.Multimap;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/224/DomainEventPublisherImpl.java\nindex 1c0601c559..15e31b990e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/224/DomainEventPublisherImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.ArrayListMultimap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/224/DomainEventPublisherImpl.java\nindex 1c0601c559..f1f34b32d3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/224/DomainEventPublisherImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.ArrayListMultimap;\n@@ -30,7 +31,7 @@ class DomainEventPublisherImpl implements DomainEventPublisher {\n \n     @Inject\n     DomainEventPublisherImpl(Injector injector,\n-            Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n+                             Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n         this.injector = injector;\n         this.eventHandlerClassesByEvent = eventHandlerClassesByEvent;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/224/DomainEventPublisherImpl.java\nindex 1c0601c559..d51efa0ec2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/224/DomainEventPublisherImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.ArrayListMultimap;\n@@ -22,16 +23,13 @@ import org.slf4j.LoggerFactory;\n \n class DomainEventPublisherImpl implements DomainEventPublisher {\n     private static final Logger LOGGER = LoggerFactory.getLogger(DomainEventPublisherImpl.class);\n-    private static final ThreadLocal<Multimap<Class<? extends DomainEvent>, DomainEvent>> context = ThreadLocal\n-            .withInitial(ArrayListMultimap::create);\n-    private final Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>>\n-            eventHandlerClassesByEvent;\n-    private final Injector injector;\n+    private static final ThreadLocal<Multimap<Class<? extends DomainEvent>, DomainEvent>> context = ThreadLocal.withInitial(ArrayListMultimap::create);\n+private final Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent;\n+private final Injector injector;\n \n     @Inject\n-    DomainEventPublisherImpl(Injector injector,\n-            Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n-        this.injector = injector;\n+    DomainEventPublisherImpl(Injector injector, Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n+    this.injector = injector;\n         this.eventHandlerClassesByEvent = eventHandlerClassesByEvent;\n     }\n \n@@ -41,14 +39,13 @@ class DomainEventPublisherImpl implements DomainEventPublisher {\n                 .getName());\n         for (Class<? extends DomainEvent> eventClass : eventHandlerClassesByEvent.keys()\n                 .elementSet()) {\n-            if (eventClass.isAssignableFrom(event.getClass())) {\n+    if (eventClass.isAssignableFrom(event.getClass())) {\n                 checkCyclicCall(eventClass, event);\n                 Multimap<Class<? extends DomainEvent>, DomainEvent> currentEventClasses = context.get();\n                 boolean isFirstCall = currentEventClasses.isEmpty();\n                 context.get()\n                         .put(eventClass, event);\n-\n-                try {\n+    try {\n                     notifyHandlers(eventClass, event);\n                 } catch (Exception e) {\n                     throw BusinessException.wrap(e,\n@@ -67,7 +64,7 @@ class DomainEventPublisherImpl implements DomainEventPublisher {\n         if (context.get()\n                 .get(eventClass)\n                 .contains(domainEvent)) {\n-            throw BusinessException.createNew(BusinessErrorCode.EVENT_CYCLE_DETECTED)\n+    throw BusinessException.createNew(BusinessErrorCode.EVENT_CYCLE_DETECTED)\n                     .put(\"event\", eventClass);\n         }\n     }\n@@ -81,4 +78,4 @@ class DomainEventPublisherImpl implements DomainEventPublisher {\n             domainEventHandler.onEvent(event);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "40",
                    "column": "102",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "column": "1",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'finally' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "43",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/224/DomainEventPublisherImpl.java\nindex 1c0601c559..f2b069ba42 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/224/DomainEventPublisherImpl.java\n@@ -20,41 +20,38 @@ import org.seedstack.business.internal.BusinessException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n class DomainEventPublisherImpl implements DomainEventPublisher {\n+\n     private static final Logger LOGGER = LoggerFactory.getLogger(DomainEventPublisherImpl.class);\n-    private static final ThreadLocal<Multimap<Class<? extends DomainEvent>, DomainEvent>> context = ThreadLocal\n-            .withInitial(ArrayListMultimap::create);\n-    private final Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>>\n-            eventHandlerClassesByEvent;\n+    private static final ThreadLocal<Multimap<Class<? extends DomainEvent>, DomainEvent>> context = ThreadLocal.withInitial(ArrayListMultimap::create);\n+    private final Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent;\n     private final Injector injector;\n \n     @Inject\n-    DomainEventPublisherImpl(Injector injector,\n-            Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n+    DomainEventPublisherImpl(Injector injector, Multimap<Class<? extends DomainEvent>, Class<? extends DomainEventHandler>> eventHandlerClassesByEvent) {\n         this.injector = injector;\n         this.eventHandlerClassesByEvent = eventHandlerClassesByEvent;\n     }\n \n     @Override\n     public <E extends DomainEvent> void publish(E event) {\n-        LOGGER.debug(\"Firing event {} synchronously\", event.getClass()\n-                .getName());\n-        for (Class<? extends DomainEvent> eventClass : eventHandlerClassesByEvent.keys()\n-                .elementSet()) {\n+        LOGGER.debug(\"Firing event {} synchronously\", event.getClass().getName());\n+        for(Class<? extends DomainEvent> eventClass : eventHandlerClassesByEvent.keys().elementSet() ) {\n             if (eventClass.isAssignableFrom(event.getClass())) {\n                 checkCyclicCall(eventClass, event);\n                 Multimap<Class<? extends DomainEvent>, DomainEvent> currentEventClasses = context.get();\n                 boolean isFirstCall = currentEventClasses.isEmpty();\n-                context.get()\n-                        .put(eventClass, event);\n-\n+                context.get().put(eventClass, event);\n                 try {\n                     notifyHandlers(eventClass, event);\n-                } catch (Exception e) {\n-                    throw BusinessException.wrap(e,\n-                            BusinessErrorCode.EXCEPTION_OCCURRED_DURING_EVENT_HANDLER_INVOCATION)\n-                            .put(\"event\", eventClass.getName());\n-                } finally {\n+                }\n+\n+catch(Exception e) {\n+                    throw BusinessException.wrap(e, BusinessErrorCode.EXCEPTION_OCCURRED_DURING_EVENT_HANDLER_INVOCATION).put(\"event\", eventClass.getName());\n+                }\n+\n+finally {\n                     if (isFirstCall) {\n                         context.remove();\n                     }\n@@ -63,22 +60,20 @@ class DomainEventPublisherImpl implements DomainEventPublisher {\n         }\n     }\n \n+\n     private void checkCyclicCall(Class<? extends DomainEvent> eventClass, DomainEvent domainEvent) {\n-        if (context.get()\n-                .get(eventClass)\n-                .contains(domainEvent)) {\n-            throw BusinessException.createNew(BusinessErrorCode.EVENT_CYCLE_DETECTED)\n-                    .put(\"event\", eventClass);\n+        if (context.get().get(eventClass)\n+.contains(domainEvent)) {\n+            throw BusinessException.createNew(BusinessErrorCode.EVENT_CYCLE_DETECTED).put(\"event\", eventClass);\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private <E extends DomainEvent> void notifyHandlers(Class<? extends E> eventClass, E event) {\n+    @SuppressWarnings(\"unchecked\") private<E extends DomainEvent> void notifyHandlers(Class<? extends E> eventClass, E event) {\n         Collection<Class<? extends DomainEventHandler>> eventHandlers = eventHandlerClassesByEvent.get(eventClass);\n-        for (Class<? extends DomainEventHandler> eventHandlerClass : eventHandlers) {\n+        for(Class<? extends DomainEventHandler> eventHandlerClass : eventHandlers) {\n             LOGGER.debug(\"Notifying event handler {}\", eventHandlerClass.getName());\n             DomainEventHandler domainEventHandler = injector.getInstance(eventHandlerClass);\n             domainEventHandler.onEvent(event);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/224/DomainEventPublisherImpl.java\nindex 1c0601c559..15e31b990e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/224/DomainEventPublisherImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/224/DomainEventPublisherImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.common.collect.ArrayListMultimap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}