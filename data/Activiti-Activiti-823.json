{
    "error_id": "823",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport org.activiti.engine.ActivitiIllegalArgumentException;\nimport org.activiti.engine.delegate.event.ActivitiEventListener;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/823/AddEventListenerCommand.java\nindex a829754874..111a1c367e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/823/AddEventListenerCommand.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/823/AddEventListenerCommand.java\nindex a829754874..2a56103b5f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/823/AddEventListenerCommand.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n@@ -20,37 +21,35 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n \n /**\n  * Command that adds an event-listener to the Activiti engine.\n- * \n-\n  */\n public class AddEventListenerCommand implements Command<Void> {\n \n-  protected ActivitiEventListener listener;\n-  protected ActivitiEventType[] types;\n-\n-  public AddEventListenerCommand(ActivitiEventListener listener, ActivitiEventType[] types) {\n-    this.listener = listener;\n-    this.types = types;\n-  }\n-\n-  public AddEventListenerCommand(ActivitiEventListener listener) {\n-    super();\n-    this.listener = listener;\n-  }\n+    protected ActivitiEventListener listener;\n+    protected ActivitiEventType[] types;\n \n-  @Override\n-  public Void execute(CommandContext commandContext) {\n-    if (listener == null) {\n-      throw new ActivitiIllegalArgumentException(\"listener is null.\");\n+    public AddEventListenerCommand(ActivitiEventListener listener, ActivitiEventType[] types) {\n+        this.listener = listener;\n+        this.types = types;\n     }\n \n-    if (types != null) {\n-      commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener, types);\n-    } else {\n-      commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener);\n+    public AddEventListenerCommand(ActivitiEventListener listener) {\n+        super();\n+        this.listener = listener;\n     }\n \n-    return null;\n-  }\n+    @Override\n+    public Void execute(CommandContext commandContext) {\n+        if (listener == null) {\n+            throw new ActivitiIllegalArgumentException(\"listener is null.\");\n+        }\n+\n+        if (types != null) {\n+            commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener, types);\n+        } else {\n+            commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener);\n+        }\n+\n+        return null;\n+    }\n \n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/823/AddEventListenerCommand.java\nindex a829754874..3b1c2906b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/823/AddEventListenerCommand.java\n@@ -23,34 +23,34 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n  * \n \n  */\n+\n+\n public class AddEventListenerCommand implements Command<Void> {\n \n-  protected ActivitiEventListener listener;\n-  protected ActivitiEventType[] types;\n+    protected ActivitiEventListener listener;\n+    protected ActivitiEventType[] types;\n \n-  public AddEventListenerCommand(ActivitiEventListener listener, ActivitiEventType[] types) {\n+    public AddEventListenerCommand(ActivitiEventListener listener, ActivitiEventType[] types) {\n     this.listener = listener;\n     this.types = types;\n-  }\n+    }\n \n-  public AddEventListenerCommand(ActivitiEventListener listener) {\n+    public AddEventListenerCommand(ActivitiEventListener listener) {\n     super();\n     this.listener = listener;\n-  }\n-\n-  @Override\n-  public Void execute(CommandContext commandContext) {\n-    if (listener == null) {\n-      throw new ActivitiIllegalArgumentException(\"listener is null.\");\n     }\n \n-    if (types != null) {\n-      commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener, types);\n-    } else {\n-      commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener);\n+    @Override\n+    public Void execute(CommandContext commandContext) {\n+        if (listener == null) {\n+        throw new ActivitiIllegalArgumentException(\"listener is null.\");\n+        }\n+\n+        if (types != null) {\n+        commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener, types);\n+        } else {\n+            commandContext.getProcessEngineConfiguration().getEventDispatcher().addEventListener(listener);\n+        }\n+        return null;\n     }\n-\n-    return null;\n-  }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/823/AddEventListenerCommand.java\nindex a829754874..111a1c367e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/823/AddEventListenerCommand.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/823/AddEventListenerCommand.java\nindex a829754874..111a1c367e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/823/AddEventListenerCommand.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/823/AddEventListenerCommand.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import org.activiti.engine.ActivitiIllegalArgumentException;\n",
            "diff_size": 1
        }
    ]
}