{
    "error_id": "400",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 162).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        VIEW_HEADER(Collections.singletonList(VIEW)),  // Includes permission to view the sample ids from a VCF file.,\n        VIEW_CONTENT(Collections.singletonList(VIEW)),\n        WRITE(Collections.singletonList(VIEW)),       // If a folder contains this permission for a user, the user will be able to create files under that folder.\n        DELETE(Arrays.asList(VIEW, WRITE)),\n        DOWNLOAD(Collections.singletonList(VIEW)),\n        UPLOAD(Arrays.asList(VIEW, WRITE)),",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/400/FileAclEntry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/400/FileAclEntry.java\nindex cc33503f49..7dd8bf9382 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/400/FileAclEntry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/400/FileAclEntry.java\n@@ -27,62 +27,63 @@ import java.util.stream.Collectors;\n  */\n public class FileAclEntry extends AbstractAclEntry<FileAclEntry.FilePermissions> {\n \n-    public enum FilePermissions {\n-        VIEW(Collections.emptyList()),\n-        VIEW_HEADER(Collections.singletonList(VIEW)),  // Includes permission to view the sample ids from a VCF file.,\n-        VIEW_CONTENT(Collections.singletonList(VIEW)),\n-        WRITE(Collections.singletonList(VIEW)),       // If a folder contains this permission for a user, the user will be able to create files under that folder.\n-        DELETE(Arrays.asList(VIEW, WRITE)),\n-        DOWNLOAD(Collections.singletonList(VIEW)),\n-        UPLOAD(Arrays.asList(VIEW, WRITE)),\n-        VIEW_ANNOTATIONS(Collections.singletonList(VIEW)),\n-        WRITE_ANNOTATIONS(Arrays.asList(VIEW_ANNOTATIONS, VIEW)),\n-        DELETE_ANNOTATIONS(Arrays.asList(VIEW_ANNOTATIONS, WRITE_ANNOTATIONS, VIEW));\n+  public enum FilePermissions {\n+    VIEW(Collections.emptyList()),\n+    VIEW_HEADER(Collections.singletonList(VIEW)),  // Includes permission to view the sample ids from a VCF file.,\n+    VIEW_CONTENT(Collections.singletonList(VIEW)),\n+    WRITE(Collections.singletonList(\n+        VIEW)),       // If a folder contains this permission for a user, the user will be able to create files under that folder.\n+    DELETE(Arrays.asList(VIEW, WRITE)),\n+    DOWNLOAD(Collections.singletonList(VIEW)),\n+    UPLOAD(Arrays.asList(VIEW, WRITE)),\n+    VIEW_ANNOTATIONS(Collections.singletonList(VIEW)),\n+    WRITE_ANNOTATIONS(Arrays.asList(VIEW_ANNOTATIONS, VIEW)),\n+    DELETE_ANNOTATIONS(Arrays.asList(VIEW_ANNOTATIONS, WRITE_ANNOTATIONS, VIEW));\n \n-        private List<FilePermissions> implicitPermissions;\n+    private List<FilePermissions> implicitPermissions;\n \n-        FilePermissions(List<FilePermissions> implicitPermissions) {\n-            this.implicitPermissions = implicitPermissions;\n-        }\n+    FilePermissions(List<FilePermissions> implicitPermissions) {\n+      this.implicitPermissions = implicitPermissions;\n+    }\n \n-        public List<FilePermissions> getImplicitPermissions() {\n-            return implicitPermissions;\n-        }\n+    public List<FilePermissions> getImplicitPermissions() {\n+      return implicitPermissions;\n+    }\n \n-        public List<FilePermissions> getDependentPermissions() {\n-            List<FilePermissions> dependentPermissions = new LinkedList<>();\n-            for (FilePermissions permission : EnumSet.complementOf(EnumSet.of(this))) {\n-                if (permission.getImplicitPermissions().contains(this)) {\n-                    dependentPermissions.add(permission);\n-                }\n-            }\n-            return dependentPermissions;\n+    public List<FilePermissions> getDependentPermissions() {\n+      List<FilePermissions> dependentPermissions = new LinkedList<>();\n+      for (FilePermissions permission : EnumSet.complementOf(EnumSet.of(this))) {\n+        if (permission.getImplicitPermissions().contains(this)) {\n+          dependentPermissions.add(permission);\n         }\n+      }\n+      return dependentPermissions;\n     }\n+  }\n \n-    public FileAclEntry() {\n-        this(\"\", Collections.emptyList());\n-    }\n+  public FileAclEntry() {\n+    this(\"\", Collections.emptyList());\n+  }\n \n-    public FileAclEntry(String member, EnumSet<FilePermissions> permissions) {\n-        super(member, permissions);\n-    }\n+  public FileAclEntry(String member, EnumSet<FilePermissions> permissions) {\n+    super(member, permissions);\n+  }\n \n-    public FileAclEntry(String member, ObjectMap permissions) {\n-        super(member, EnumSet.noneOf(FilePermissions.class));\n+  public FileAclEntry(String member, ObjectMap permissions) {\n+    super(member, EnumSet.noneOf(FilePermissions.class));\n \n-        EnumSet<FilePermissions> aux = EnumSet.allOf(FilePermissions.class);\n-        for (FilePermissions permission : aux) {\n-            if (permissions.containsKey(permission.name()) && permissions.getBoolean(permission.name())) {\n-                this.permissions.add(permission);\n-            }\n-        }\n+    EnumSet<FilePermissions> aux = EnumSet.allOf(FilePermissions.class);\n+    for (FilePermissions permission : aux) {\n+      if (permissions.containsKey(permission.name()) && permissions.getBoolean(permission.name())) {\n+        this.permissions.add(permission);\n+      }\n     }\n+  }\n \n-    public FileAclEntry(String member, List<String> permissions) {\n-        super(member, EnumSet.noneOf(FilePermissions.class));\n-        if (permissions.size() > 0) {\n-            this.permissions.addAll(permissions.stream().map(FilePermissions::valueOf).collect(Collectors.toList()));\n-        }\n+  public FileAclEntry(String member, List<String> permissions) {\n+    super(member, EnumSet.noneOf(FilePermissions.class));\n+    if (permissions.size() > 0) {\n+      this.permissions.addAll(permissions.stream().map(FilePermissions::valueOf).collect(Collectors.toList()));\n     }\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/400/FileAclEntry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/400/FileAclEntry.java\nindex cc33503f49..e07ce69139 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/400/FileAclEntry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/400/FileAclEntry.java\n@@ -31,7 +31,7 @@ public class FileAclEntry extends AbstractAclEntry<FileAclEntry.FilePermissions>\n         VIEW(Collections.emptyList()),\n         VIEW_HEADER(Collections.singletonList(VIEW)),  // Includes permission to view the sample ids from a VCF file.,\n         VIEW_CONTENT(Collections.singletonList(VIEW)),\n-        WRITE(Collections.singletonList(VIEW)),       // If a folder contains this permission for a user, the user will be able to create files under that folder.\n+        WRITE(Collections.singletonList(VIEW)), // If a folder contains this permission for a user, the user will be able to create files under that folder.\n         DELETE(Arrays.asList(VIEW, WRITE)),\n         DOWNLOAD(Collections.singletonList(VIEW)),\n         UPLOAD(Arrays.asList(VIEW, WRITE)),\n@@ -85,4 +85,4 @@ public class FileAclEntry extends AbstractAclEntry<FileAclEntry.FilePermissions>\n             this.permissions.addAll(permissions.stream().map(FilePermissions::valueOf).collect(Collectors.toList()));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}