{
    "error_id": "322",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/322/UpdateHyperLogLogPartParam.java\nindex a7bdab339a..e29de064f6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/322/UpdateHyperLogLogPartParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.psf.hyperanf;\n \n import com.clearspring.analytics.stream.cardinality.HyperLogLogPlus;\n@@ -25,88 +26,94 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n import java.io.IOException;\n \n public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n-  private long[] nodes;\n-  private int startIndex;\n-  private int endIndex;\n-  private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n-  private int p;\n-  private int sp;\n-\n-  public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey,\n-                                    Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n-                                    int p, int sp,\n-                                    long[] nodes, int startIndex,\n-                                    int endIndex) {\n-    super(matrixId, pkey);\n-    this.updates = updates;\n-    this.nodes = nodes;\n-    this.p = p;\n-    this.sp = sp;\n-    this.startIndex = startIndex;\n-    this.endIndex = endIndex;\n-  }\n+    private long[] nodes;\n+    private int startIndex;\n+    private int endIndex;\n+    private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n+    private int p;\n+    private int sp;\n \n-  public UpdateHyperLogLogPartParam() {\n-    this(0, null, null, 0, 0, null, 0, 0);\n-  }\n+    public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey,\n+                                      Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n+                                      int p, int sp,\n+                                      long[] nodes, int startIndex,\n+                                      int endIndex) {\n+        super(matrixId, pkey);\n+        this.updates = updates;\n+        this.nodes = nodes;\n+        this.p = p;\n+        this.sp = sp;\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+    }\n \n-  public Long2ObjectOpenHashMap<HyperLogLogPlus> getUpdates() {\n-    return updates;\n-  }\n+    public UpdateHyperLogLogPartParam() {\n+        this(0, null, null, 0, 0, null, 0, 0);\n+    }\n \n-  public long[] getNodes() {return nodes;}\n+    public Long2ObjectOpenHashMap<HyperLogLogPlus> getUpdates() {\n+        return updates;\n+    }\n \n-  public int getSp() {return sp;}\n+    public long[] getNodes() {\n+        return nodes;\n+    }\n \n-  public int getP() {return p;}\n+    public int getSp() {\n+        return sp;\n+    }\n \n-  public void clear() {\n-    updates = null;\n-    nodes = null;\n-    startIndex = -1;\n-    endIndex = -1;\n-  }\n+    public int getP() {\n+        return p;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    buf.writeInt(p);\n-    buf.writeInt(sp);\n-    buf.writeInt(endIndex - startIndex);\n-    try {\n-      for (int i = startIndex; i < endIndex; i++) {\n-        long node = nodes[i];\n-        HyperLogLogPlus plus = updates.get(node);\n-        buf.writeLong(node);\n-        byte[] bytes = plus.getBytes();\n-        buf.writeInt(bytes.length);\n-        buf.writeBytes(bytes);\n-      }\n-    } catch (IOException e) {\n-      e.printStackTrace();\n+    public void clear() {\n+        updates = null;\n+        nodes = null;\n+        startIndex = -1;\n+        endIndex = -1;\n     }\n \n-    clear();\n-  }\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        buf.writeInt(p);\n+        buf.writeInt(sp);\n+        buf.writeInt(endIndex - startIndex);\n+        try {\n+            for (int i = startIndex; i < endIndex; i++) {\n+                long node = nodes[i];\n+                HyperLogLogPlus plus = updates.get(node);\n+                buf.writeLong(node);\n+                byte[] bytes = plus.getBytes();\n+                buf.writeInt(bytes.length);\n+                buf.writeBytes(bytes);\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        clear();\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    p = buf.readInt();\n-    sp = buf.readInt();\n-    int size = buf.readInt();\n-    updates = new Long2ObjectOpenHashMap<>(size);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        p = buf.readInt();\n+        sp = buf.readInt();\n+        int size = buf.readInt();\n+        updates = new Long2ObjectOpenHashMap<>(size);\n \n-    try {\n-      for (int i = 0; i < size; i++) {\n-        long node = buf.readLong();\n-        int len = buf.readInt();\n-        byte[] bytes = new byte[len];\n-        buf.readBytes(bytes);\n-        updates.put(node, HyperLogLogPlus.Builder.build(bytes));\n-      }\n-    } catch (IOException e) {\n-      e.printStackTrace();\n+        try {\n+            for (int i = 0; i < size; i++) {\n+                long node = buf.readLong();\n+                int len = buf.readInt();\n+                byte[] bytes = new byte[len];\n+                buf.readBytes(bytes);\n+                updates.put(node, HyperLogLogPlus.Builder.build(bytes));\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n     }\n-  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/322/UpdateHyperLogLogPartParam.java\nindex a7bdab339a..2e441b7dba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/322/UpdateHyperLogLogPartParam.java\n@@ -32,12 +32,11 @@ public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n   private int p;\n   private int sp;\n \n-  public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey,\n-                                    Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n+  public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey, Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n                                     int p, int sp,\n                                     long[] nodes, int startIndex,\n                                     int endIndex) {\n-    super(matrixId, pkey);\n+  super(matrixId, pkey);\n     this.updates = updates;\n     this.nodes = nodes;\n     this.p = p;\n@@ -54,11 +53,17 @@ public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n     return updates;\n   }\n \n-  public long[] getNodes() {return nodes;}\n+  public long[] getNodes() {\n+  return nodes;\n+  }\n \n-  public int getSp() {return sp;}\n+  public int getSp() {\n+  return sp;\n+  }\n \n-  public int getP() {return p;}\n+  public int getP() {\n+  return p;\n+  }\n \n   public void clear() {\n     updates = null;\n@@ -96,8 +101,7 @@ public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n     sp = buf.readInt();\n     int size = buf.readInt();\n     updates = new Long2ObjectOpenHashMap<>(size);\n-\n-    try {\n+try {\n       for (int i = 0; i < size; i++) {\n         long node = buf.readLong();\n         int len = buf.readInt();\n@@ -109,4 +113,4 @@ public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n       e.printStackTrace();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/322/UpdateHyperLogLogPartParam.java\nindex a7bdab339a..a303c28f95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/322/UpdateHyperLogLogPartParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/322/UpdateHyperLogLogPartParam.java\n@@ -21,22 +21,17 @@ import com.tencent.angel.PartitionKey;\n import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;\n import io.netty.buffer.ByteBuf;\n import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n-\n import java.io.IOException;\n \n public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n-  private long[] nodes;\n-  private int startIndex;\n-  private int endIndex;\n-  private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n-  private int p;\n-  private int sp;\n+    private long[] nodes;\n+    private int startIndex;\n+    private int endIndex;\n+    private Long2ObjectOpenHashMap<HyperLogLogPlus> updates;\n+    private int p;\n+    private int sp;\n \n-  public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey,\n-                                    Long2ObjectOpenHashMap<HyperLogLogPlus> updates,\n-                                    int p, int sp,\n-                                    long[] nodes, int startIndex,\n-                                    int endIndex) {\n+    public UpdateHyperLogLogPartParam(int matrixId, PartitionKey pkey, Long2ObjectOpenHashMap<HyperLogLogPlus> updates, int p, int sp, long[] nodes, int startIndex, int endIndex) {\n     super(matrixId, pkey);\n     this.updates = updates;\n     this.nodes = nodes;\n@@ -44,69 +39,75 @@ public class UpdateHyperLogLogPartParam extends PartitionUpdateParam {\n     this.sp = sp;\n     this.startIndex = startIndex;\n     this.endIndex = endIndex;\n-  }\n+    }\n \n-  public UpdateHyperLogLogPartParam() {\n+    public UpdateHyperLogLogPartParam() {\n     this(0, null, null, 0, 0, null, 0, 0);\n-  }\n+    }\n \n-  public Long2ObjectOpenHashMap<HyperLogLogPlus> getUpdates() {\n+    public Long2ObjectOpenHashMap<HyperLogLogPlus> getUpdates() {\n     return updates;\n-  }\n+    }\n \n-  public long[] getNodes() {return nodes;}\n+    public long[] getNodes() {\n+    return nodes;\n+    }\n \n-  public int getSp() {return sp;}\n+    public int getSp() {\n+    return sp;\n+    }\n \n-  public int getP() {return p;}\n+    public int getP() {\n+    return p;\n+    }\n \n-  public void clear() {\n+    public void clear() {\n     updates = null;\n     nodes = null;\n     startIndex = -1;\n     endIndex = -1;\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n     buf.writeInt(p);\n     buf.writeInt(sp);\n     buf.writeInt(endIndex - startIndex);\n     try {\n-      for (int i = startIndex; i < endIndex; i++) {\n+        for (int i = startIndex; i < endIndex; i++) {\n         long node = nodes[i];\n         HyperLogLogPlus plus = updates.get(node);\n         buf.writeLong(node);\n         byte[] bytes = plus.getBytes();\n         buf.writeInt(bytes.length);\n         buf.writeBytes(bytes);\n-      }\n+        }\n     } catch (IOException e) {\n       e.printStackTrace();\n     }\n-\n     clear();\n-  }\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n     p = buf.readInt();\n     sp = buf.readInt();\n+\n     int size = buf.readInt();\n     updates = new Long2ObjectOpenHashMap<>(size);\n-\n     try {\n-      for (int i = 0; i < size; i++) {\n+        for (int i = 0; i < size; i++) {\n         long node = buf.readLong();\n         int len = buf.readInt();\n         byte[] bytes = new byte[len];\n         buf.readBytes(bytes);\n         updates.put(node, HyperLogLogPlus.Builder.build(bytes));\n-      }\n+        }\n     } catch (IOException e) {\n       e.printStackTrace();\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}