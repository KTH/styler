{
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "78",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n\n            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n            session.getDatabase().removeSchemaObject(session, view);\n\n            // remove dependent table expressions",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/128/DropView.java\nindex a6282661bf..983b90139e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/128/DropView.java\n@@ -74,28 +74,30 @@ public class DropView extends SchemaCommand {\n \n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n+        view.lock(session, true, true);\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n+            //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+             session .getDatabase().removeSchemaObject(session, view);\n \n-            // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n-                if (TableType.VIEW == childTable.getTableType()) {\n-                    TableView childTableView = (TableView) childTable;\n-                    if (childTableView.isTableExpression() && childTableView.getName() != null) {\n-                        session.getDatabase().removeSchemaObject(session, childTableView);\n-                    }\n-                }\n-            }\n-            // make sure its all unlocked\n-            session.getDatabase().unlockMeta(session);\n-        }\n-        return 0;\n-    }\n+             // remove dependent table expressions\n+             for (Table childTable: copyOfDependencies) {\n+                 if (TableType.VIEW == childTable.getTableType()) {\n+                     TableView childTableView = (TableView) childTable;\n+                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n+                         session.getDatabase().removeSchemaObject(session, childTableView);\n+                     }\n+                 }\n+             }\n+             // make sure its all unlocked\n+             session.getDatabase().unlockMeta(session);\n+         }\n+         return 0;\n+     }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.DROP_VIEW;\n-    }\n+     @Override\n+     public int getType() {\n+         return CommandInterface.DROP_VIEW;\n+     }\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/128/DropView.java\nindex a6282661bf..ad0778f4be 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/128/DropView.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import java.util.ArrayList;\n@@ -31,8 +32,8 @@ public class DropView extends SchemaCommand {\n     public DropView(Session session, Schema schema) {\n         super(session, schema);\n         dropAction = session.getDatabase().getSettings().dropRestrict ?\n-                ConstraintActionType.RESTRICT :\n-                ConstraintActionType.CASCADE;\n+            ConstraintActionType.RESTRICT :\n+            ConstraintActionType.CASCADE;\n     }\n \n     public void setIfExists(boolean b) {\n@@ -79,7 +80,7 @@ public class DropView extends SchemaCommand {\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n+            for (Table childTable : copyOfDependencies) {\n                 if (TableType.VIEW == childTable.getTableType()) {\n                     TableView childTableView = (TableView) childTable;\n                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/128/DropView.java\nindex a6282661bf..3de4b2e8c7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/128/DropView.java\n@@ -75,11 +75,12 @@ public class DropView extends SchemaCommand {\n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+            view.lock(session, true, true);\n+//\u4ec0\u4e48\u90fd\u6ca1\u505a\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n+            for (Table childTable : copyOfDependencies) {\n                 if (TableType.VIEW == childTable.getTableType()) {\n                     TableView childTableView = (TableView) childTable;\n                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n@@ -98,4 +99,4 @@ public class DropView extends SchemaCommand {\n         return CommandInterface.DROP_VIEW;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/128/DropView.java\nindex a6282661bf..1ee6625475 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/128/DropView.java\n@@ -22,6 +22,8 @@ import org.h2.table.TableView;\n  * This class represents the statement\n  * DROP VIEW\n  */\n+\n+\n public class DropView extends SchemaCommand {\n \n     private String viewName;\n@@ -30,19 +32,20 @@ public class DropView extends SchemaCommand {\n \n     public DropView(Session session, Schema schema) {\n         super(session, schema);\n-        dropAction = session.getDatabase().getSettings().dropRestrict ?\n-                ConstraintActionType.RESTRICT :\n-                ConstraintActionType.CASCADE;\n+        dropAction = session.getDatabase().getSettings().dropRestrict ? ConstraintActionType.RESTRICT : ConstraintActionType.CASCADE;\n     }\n \n+\n     public void setIfExists(boolean b) {\n         ifExists = b;\n     }\n \n+\n     public void setDropAction(ConstraintActionType dropAction) {\n         this.dropAction = dropAction;\n     }\n \n+\n     public void setViewName(String viewName) {\n         this.viewName = viewName;\n     }\n@@ -60,7 +63,6 @@ public class DropView extends SchemaCommand {\n                 throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n             }\n             session.getUser().checkRight(view, Right.ALL);\n-\n             if (dropAction == ConstraintActionType.RESTRICT) {\n                 for (DbObject child : view.getChildren()) {\n                     if (child instanceof TableView) {\n@@ -71,15 +73,13 @@ public class DropView extends SchemaCommand {\n \n             // TODO: Where is the ConstraintReferential.CASCADE style drop processing ? It's\n             // supported from imported keys - but not for dependent db objects\n-\n             TableView tableView = (TableView) view;\n-            ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n-\n+            ArrayList<Table> copyOfDependencies = new ArrayList< >(tableView.getTables());\n             view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n+            for (Table childTable : copyOfDependencies) {\n                 if (TableType.VIEW == childTable.getTableType()) {\n                     TableView childTableView = (TableView) childTable;\n                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n@@ -98,4 +98,4 @@ public class DropView extends SchemaCommand {\n         return CommandInterface.DROP_VIEW;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/128/DropView.java\nindex a6282661bf..8295fbe9f8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/128/DropView.java\n@@ -74,8 +74,7 @@ public class DropView extends SchemaCommand {\n \n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n-\n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+                    view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/128/DropView.java\nindex a6282661bf..983b90139e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/128/DropView.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/128/DropView.java\n@@ -74,28 +74,30 @@ public class DropView extends SchemaCommand {\n \n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n+        view.lock(session, true, true);\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n+            //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+             session .getDatabase().removeSchemaObject(session, view);\n \n-            // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n-                if (TableType.VIEW == childTable.getTableType()) {\n-                    TableView childTableView = (TableView) childTable;\n-                    if (childTableView.isTableExpression() && childTableView.getName() != null) {\n-                        session.getDatabase().removeSchemaObject(session, childTableView);\n-                    }\n-                }\n-            }\n-            // make sure its all unlocked\n-            session.getDatabase().unlockMeta(session);\n-        }\n-        return 0;\n-    }\n+             // remove dependent table expressions\n+             for (Table childTable: copyOfDependencies) {\n+                 if (TableType.VIEW == childTable.getTableType()) {\n+                     TableView childTableView = (TableView) childTable;\n+                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n+                         session.getDatabase().removeSchemaObject(session, childTableView);\n+                     }\n+                 }\n+             }\n+             // make sure its all unlocked\n+             session.getDatabase().unlockMeta(session);\n+         }\n+         return 0;\n+     }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.DROP_VIEW;\n-    }\n+     @Override\n+     public int getType() {\n+         return CommandInterface.DROP_VIEW;\n+     }\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 23
        }
    ]
}