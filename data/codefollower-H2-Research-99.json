{
    "error_id": "99",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    private Schema schema;\n    private String name;\n    private String javaClassMethod; //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n    private boolean ifNotExists;\n    private boolean force;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/99/CreateAggregate.java\nindex dda5fbe88f..b2fff9f9d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/99/CreateAggregate.java\n@@ -21,56 +21,59 @@ public class CreateAggregate extends DefineCommand {\n \n     private Schema schema;\n     private String name;\n-    private String javaClassMethod; //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n-    private boolean ifNotExists;\n-    private boolean force;\n+    private String javaClassMethod;\n \n-    public CreateAggregate(Session session) {\n-        super(session);\n-    }\n+    //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n+     private boolean ifNotExists;\n+     private boolean force;\n \n-    @Override\n-    public int update() {\n-        session.commit(true);\n-        session.getUser().checkAdmin();\n-        Database db = session.getDatabase();\n-        if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n-            if (!ifNotExists) {\n-                throw DbException.get(\n-                        ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n-            }\n-        } else {\n-            int id = getObjectId();\n-            UserAggregate aggregate = new UserAggregate(\n-                    db, id, name, javaClassMethod, force);\n-            db.addDatabaseObject(session, aggregate);\n-        }\n-        return 0;\n-    }\n+     public CreateAggregate(Session session) {\n+         super(session);\n+     }\n \n-    public void setSchema(Schema schema) {\n-        this.schema = schema;\n-    }\n+     @Override\n+     public int update() {\n+         session.commit(true);\n+         session.getUser().checkAdmin();\n+         Database db = session.getDatabase();\n+         if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n+             if (!ifNotExists) {\n+                 throw DbException.get(\n+                         ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n+             }\n+         } else {\n+             int id = getObjectId();\n+             UserAggregate aggregate = new UserAggregate(\n+                     db, id, name, javaClassMethod, force);\n+             db.addDatabaseObject(session, aggregate);\n+         }\n+         return 0;\n+     }\n \n-    public void setName(String name) {\n-        this.name = name;\n-    }\n+     public void setSchema(Schema schema) {\n+         this.schema = schema;\n+     }\n \n-    public void setJavaClassMethod(String string) {\n-        this.javaClassMethod = string;\n-    }\n+     public void setName(String name) {\n+         this.name = name;\n+     }\n \n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n+     public void setJavaClassMethod(String string) {\n+         this.javaClassMethod = string;\n+     }\n \n-    public void setForce(boolean force) {\n-        this.force = force;\n-    }\n+     public void setIfNotExists(boolean ifNotExists) {\n+         this.ifNotExists = ifNotExists;\n+     }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_AGGREGATE;\n-    }\n+     public void setForce(boolean force) {\n+         this.force = force;\n+     }\n \n-}\n+     @Override\n+     public int getType() {\n+         return CommandInterface.CREATE_AGGREGATE;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/99/CreateAggregate.java\nindex dda5fbe88f..59ee068fc0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/99/CreateAggregate.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -37,12 +38,12 @@ public class CreateAggregate extends DefineCommand {\n         if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n             if (!ifNotExists) {\n                 throw DbException.get(\n-                        ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n+                    ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n             }\n         } else {\n             int id = getObjectId();\n             UserAggregate aggregate = new UserAggregate(\n-                    db, id, name, javaClassMethod, force);\n+                db, id, name, javaClassMethod, force);\n             db.addDatabaseObject(session, aggregate);\n         }\n         return 0;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/99/CreateAggregate.java\nindex dda5fbe88f..79b6d13101 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/99/CreateAggregate.java\n@@ -21,7 +21,9 @@ public class CreateAggregate extends DefineCommand {\n \n     private Schema schema;\n     private String name;\n-    private String javaClassMethod; //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n+    private String javaClassMethod;\n+\n+//\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n     private boolean ifNotExists;\n     private boolean force;\n \n@@ -73,4 +75,4 @@ public class CreateAggregate extends DefineCommand {\n         return CommandInterface.CREATE_AGGREGATE;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/99/CreateAggregate.java\nindex dda5fbe88f..ae222ccadf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/99/CreateAggregate.java\n@@ -17,6 +17,8 @@ import org.h2.schema.Schema;\n  * This class represents the statement\n  * CREATE AGGREGATE\n  */\n+\n+\n public class CreateAggregate extends DefineCommand {\n \n     private Schema schema;\n@@ -36,34 +38,37 @@ public class CreateAggregate extends DefineCommand {\n         Database db = session.getDatabase();\n         if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n             if (!ifNotExists) {\n-                throw DbException.get(\n-                        ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n+                throw DbException.get(ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n             }\n         } else {\n             int id = getObjectId();\n-            UserAggregate aggregate = new UserAggregate(\n-                    db, id, name, javaClassMethod, force);\n+            UserAggregate aggregate = new UserAggregate(db, id, name, javaClassMethod, force);\n             db.addDatabaseObject(session, aggregate);\n         }\n         return 0;\n     }\n \n+\n     public void setSchema(Schema schema) {\n         this.schema = schema;\n     }\n \n+\n     public void setName(String name) {\n         this.name = name;\n     }\n \n+\n     public void setJavaClassMethod(String string) {\n         this.javaClassMethod = string;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setForce(boolean force) {\n         this.force = force;\n     }\n@@ -73,4 +78,4 @@ public class CreateAggregate extends DefineCommand {\n         return CommandInterface.CREATE_AGGREGATE;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/99/CreateAggregate.java\nindex dda5fbe88f..b2fff9f9d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/99/CreateAggregate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/99/CreateAggregate.java\n@@ -21,56 +21,59 @@ public class CreateAggregate extends DefineCommand {\n \n     private Schema schema;\n     private String name;\n-    private String javaClassMethod; //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n-    private boolean ifNotExists;\n-    private boolean force;\n+    private String javaClassMethod;\n \n-    public CreateAggregate(Session session) {\n-        super(session);\n-    }\n+    //\u662fclassName\uff0c\u7c7b\u540d\uff0c\u4e0d\u662f\u7c7b\u65b9\u6cd5\n+     private boolean ifNotExists;\n+     private boolean force;\n \n-    @Override\n-    public int update() {\n-        session.commit(true);\n-        session.getUser().checkAdmin();\n-        Database db = session.getDatabase();\n-        if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n-            if (!ifNotExists) {\n-                throw DbException.get(\n-                        ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n-            }\n-        } else {\n-            int id = getObjectId();\n-            UserAggregate aggregate = new UserAggregate(\n-                    db, id, name, javaClassMethod, force);\n-            db.addDatabaseObject(session, aggregate);\n-        }\n-        return 0;\n-    }\n+     public CreateAggregate(Session session) {\n+         super(session);\n+     }\n \n-    public void setSchema(Schema schema) {\n-        this.schema = schema;\n-    }\n+     @Override\n+     public int update() {\n+         session.commit(true);\n+         session.getUser().checkAdmin();\n+         Database db = session.getDatabase();\n+         if (db.findAggregate(name) != null || schema.findFunction(name) != null) {\n+             if (!ifNotExists) {\n+                 throw DbException.get(\n+                         ErrorCode.FUNCTION_ALIAS_ALREADY_EXISTS_1, name);\n+             }\n+         } else {\n+             int id = getObjectId();\n+             UserAggregate aggregate = new UserAggregate(\n+                     db, id, name, javaClassMethod, force);\n+             db.addDatabaseObject(session, aggregate);\n+         }\n+         return 0;\n+     }\n \n-    public void setName(String name) {\n-        this.name = name;\n-    }\n+     public void setSchema(Schema schema) {\n+         this.schema = schema;\n+     }\n \n-    public void setJavaClassMethod(String string) {\n-        this.javaClassMethod = string;\n-    }\n+     public void setName(String name) {\n+         this.name = name;\n+     }\n \n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n+     public void setJavaClassMethod(String string) {\n+         this.javaClassMethod = string;\n+     }\n \n-    public void setForce(boolean force) {\n-        this.force = force;\n-    }\n+     public void setIfNotExists(boolean ifNotExists) {\n+         this.ifNotExists = ifNotExists;\n+     }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_AGGREGATE;\n-    }\n+     public void setForce(boolean force) {\n+         this.force = force;\n+     }\n \n-}\n+     @Override\n+     public int getType() {\n+         return CommandInterface.CREATE_AGGREGATE;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 65
        }
    ]
}