{
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "85",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    String currentSealValue = registry.generateSealValue();\n    if (logger.isDebugEnabled()) {\n      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n    }\n    if (!this.sealValue.equals(currentSealValue)) {\n      logger.info(\"Overwriting deserialized registry with current one\");",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "'{' at column 34 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "10",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/18/ConfigurationRegistry.java\nindex fe2a2af505..a3d7a1ed81 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/18/ConfigurationRegistry.java\n@@ -81,30 +81,31 @@ public class ConfigurationRegistry extends HashMap<ConfigurationParameter, Strin\n   private void checkCurrentConfiguration() {\n     ConfigurationRegistry registry = Configuration.getInstance().getRegistry();\n     String currentSealValue = registry.generateSealValue();\n-    if (logger.isDebugEnabled()) {\n-      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n-    }\n-    if (!this.sealValue.equals(currentSealValue)) {\n-      logger.info(\"Overwriting deserialized registry with current one\");\n-      this.clear();\n-      this.putAll(registry);\n-    }\n-  }\n+    if (logger.isDebugEnabled()) { logger.debug(\"Seal {} {} {}\",\n \n-  private String seal() {\n-    try {\n-      return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n+    this . sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n+   }\n+   if (!this.sealValue.equals(currentSealValue)) {\n+     logger.info(\"Overwriting deserialized registry with current one\");\n+     this.clear();\n+     this.putAll(registry);\n+   }\n+ }\n \n-  private String calculateToken() {\n-    StringBuilder sb = new StringBuilder();\n-    for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n-      sb.append(String.format(\"%s\", this.get(parameter)));\n-    }\n-    return sb.toString();\n-  }\n+ private String seal() {\n+   try {\n+     return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n+   } catch (Exception e) {\n+     throw new RuntimeException(e);\n+   }\n+ }\n+\n+ private String calculateToken() {\n+   StringBuilder sb = new StringBuilder();\n+   for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n+     sb.append(String.format(\"%s\", this.get(parameter)));\n+   }\n+   return sb.toString();\n+ }\n \n }\n",
            "diff_size": 32
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/18/ConfigurationRegistry.java\nindex fe2a2af505..1c6ac1aaab 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/18/ConfigurationRegistry.java\n@@ -82,7 +82,8 @@ public class ConfigurationRegistry extends HashMap<ConfigurationParameter, Strin\n     ConfigurationRegistry registry = Configuration.getInstance().getRegistry();\n     String currentSealValue = registry.generateSealValue();\n     if (logger.isDebugEnabled()) {\n-      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n+      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\",\n+          currentSealValue);\n     }\n     if (!this.sealValue.equals(currentSealValue)) {\n       logger.info(\"Overwriting deserialized registry with current one\");\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/18/ConfigurationRegistry.java\nindex fe2a2af505..4a7008dda9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/18/ConfigurationRegistry.java\n@@ -107,4 +107,4 @@ public class ConfigurationRegistry extends HashMap<ConfigurationParameter, Strin\n     return sb.toString();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/18/ConfigurationRegistry.java\nindex fe2a2af505..5af0d4d228 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/18/ConfigurationRegistry.java\n@@ -5,7 +5,6 @@ import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.security.MessageDigest;\n import java.util.HashMap;\n-\n import org.apache.commons.codec.binary.Hex;\n import org.apache.commons.lang3.StringUtils;\n import org.digidoc4j.impl.asic.asice.bdoc.BDocContainer;\n@@ -24,87 +23,90 @@ import org.slf4j.LoggerFactory;\n  * @author Janar Rahumeel (CGI Estonia)\n  */\n \n-public class ConfigurationRegistry extends HashMap<ConfigurationParameter, String> {\n \n-  private static final Logger logger = LoggerFactory.getLogger(ConfigurationRegistry.class);\n-  private static final long serialVersionUID = 7829136421415567565L;\n-  private String sealValue = \"\";\n+public class ConfigurationRegistry extends HashMap<ConfigurationParameter, String> {\n \n-  protected String generateSealValue() {\n+    private static final Logger logger = LoggerFactory.getLogger(ConfigurationRegistry.class);\n+    private static final long serialVersionUID = 7829136421415567565L;\n+    private String sealValue = \"\";\n+    protected String generateSealValue() {\n     // TODO can we use hashcode?\n     return this.seal();\n-  }\n+    }\n \n-  protected String getSealValue() {\n+    protected String getSealValue() {\n     return this.sealValue;\n-  }\n+    }\n \n-  private void writeObject(ObjectOutputStream stream) throws IOException {\n+    private void writeObject(ObjectOutputStream stream) throws IOException {\n     for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n-      String value;\n-      if (this.containsKey(parameter)) {\n-        value = String.format(\"%s|%s\", parameter, this.get(parameter).replaceAll(\"[\\\\\\\\]*[\\\\|]\", \"\\\\\\\\|\"));\n-      } else {\n-        value = String.format(\"%s\", parameter);\n-      }\n-      logger.trace(\"Writing {}\", value);\n-      stream.writeUTF(value);\n+        String value;\n+        if (this.containsKey(parameter)) {\n+                                                                                 value = String.format(\"%s|%s\", parameter, this.get(parameter).replaceAll(\"[\\\\\\\\]*[\\\\|]\", \"\\\\\\\\|\"));\n+        } else {\n+          value = String.format(\"%s\", parameter);\n+        }\n+        logger.trace(\"Writing {}\", value);\n+        stream.writeUTF(value);\n     }\n     stream.writeUTF(this.generateSealValue());\n-  }\n+    }\n \n-  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n+    private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n     for (int i = 0; i <= ConfigurationParameter.values().length; i++) {\n-      try {\n-        String token = stream.readUTF();\n         try {\n-          String[] s = StringUtils.split(token, \"|\");\n-          logger.trace(\"Reading {}\", s[0]);\n-          this.put(ConfigurationParameter.valueOf(s[0]), s[1].replaceAll(\"[\\\\\\\\]+[\\\\|]\", \"\\\\|\"));\n-        } catch (IndexOutOfBoundsException ignore) {\n-          logger.trace(\"Ignoring, no value: {}\", ignore.getMessage());\n-        } catch (IllegalArgumentException e) {\n-          logger.debug(\"Seal <{}> found\", token);\n-          this.sealValue = token;\n-        }\n-      } catch (IOException ignore) {\n-        if (logger.isDebugEnabled()) {\n-          logger.warn(\"Error\", ignore);\n-        } else {\n-          logger.warn(\"Error: {}\", ignore.getMessage());\n+                                                                          String token = stream.readUTF();\n+                                                                          try {\n+            String[] s = StringUtils.split(token, \"|\");\n+            logger.trace(\"Reading {}\", s[0]);\n+            this.put(ConfigurationParameter.valueOf(s[0]), s[1].replaceAll(\"[\\\\\\\\]+[\\\\|]\", \"\\\\|\"));\n+                                                                          } catch (IndexOutOfBoundsException ignore) {\n+                                                                            logger.trace(\"Ignoring, no value: {}\", ignore.getMessage());\n+                                                                          } catch (IllegalArgumentException e) {\n+                                                                            logger.debug(\"Seal <{}> found\", token);\n+                                                                            this.sealValue = token;\n+                                                                          }\n+        } catch (IOException ignore) {\n+          if (logger.isDebugEnabled()) {\n+              logger.warn(\"Error\", ignore);\n+          } else {\n+            logger.warn(\"Error: {}\", ignore.getMessage());\n+          }\n         }\n-      }\n     }\n     this.checkCurrentConfiguration();\n-  }\n+    }\n \n-  private void checkCurrentConfiguration() {\n+    private void checkCurrentConfiguration() {\n     ConfigurationRegistry registry = Configuration.getInstance().getRegistry();\n     String currentSealValue = registry.generateSealValue();\n     if (logger.isDebugEnabled()) {\n-      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n+        logger.debug(\"Seal {} {} {}\",\n+            this.sealValue,\n+            this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\",\n+            currentSealValue);\n     }\n     if (!this.sealValue.equals(currentSealValue)) {\n-      logger.info(\"Overwriting deserialized registry with current one\");\n-      this.clear();\n-      this.putAll(registry);\n+        logger.info(\"Overwriting deserialized registry with current one\");\n+        this.clear();\n+        this.putAll(registry);\n+    }\n     }\n-  }\n \n-  private String seal() {\n+    private String seal() {\n     try {\n-      return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n+        return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n     } catch (Exception e) {\n       throw new RuntimeException(e);\n     }\n-  }\n+    }\n \n-  private String calculateToken() {\n+    private String calculateToken() {\n     StringBuilder sb = new StringBuilder();\n     for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n-      sb.append(String.format(\"%s\", this.get(parameter)));\n+        sb.append(String.format(\"%s\", this.get(parameter)));\n     }\n     return sb.toString();\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "column": "52",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "85",
                    "column": "92",
                    "severity": "error",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "92",
                    "severity": "error",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "97",
                    "severity": "error",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "97",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "102",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "85",
                    "column": "120",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "85",
                    "column": "121",
                    "severity": "error",
                    "message": "'}' at column 121 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "121",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/18/ConfigurationRegistry.java\nindex fe2a2af505..7ba7edff08 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/18/ConfigurationRegistry.java\n@@ -82,29 +82,29 @@ public class ConfigurationRegistry extends HashMap<ConfigurationParameter, Strin\n     ConfigurationRegistry registry = Configuration.getInstance().getRegistry();\n     String currentSealValue = registry.generateSealValue();\n     if (logger.isDebugEnabled()) {\n-      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n-    }\n+      logger .debug(\"Seal {} {} {}\", this.sealValue,this.sealValue.equals(currentSealValue)?\"==\":\"!=\",currentSealValue);}\n     if (!this.sealValue.equals(currentSealValue)) {\n-      logger.info(\"Overwriting deserialized registry with current one\");\n-      this.clear();\n-      this.putAll(registry);\n+        logger.info(\"Overwriting deserialized registry with current one\");\n+        this.clear();\n+        this.putAll(registry);\n+      }\n     }\n-  }\n \n-  private String seal() {\n-    try {\n-      return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n+    private String seal() {\n+      try {\n+        return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n+      } catch (Exception e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n-  }\n \n-  private String calculateToken() {\n-    StringBuilder sb = new StringBuilder();\n-    for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n-      sb.append(String.format(\"%s\", this.get(parameter)));\n+    private String calculateToken() {\n+      StringBuilder sb = new StringBuilder();\n+      for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n+        sb.append(String.format(\"%s\", this.get(parameter)));\n+      }\n+      return sb.toString();\n     }\n-    return sb.toString();\n-  }\n \n-}\n+  }\n+  \n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "'{' at column 34 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "10",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/18/ConfigurationRegistry.java\nindex fe2a2af505..a3d7a1ed81 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/18/ConfigurationRegistry.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/18/ConfigurationRegistry.java\n@@ -81,30 +81,31 @@ public class ConfigurationRegistry extends HashMap<ConfigurationParameter, Strin\n   private void checkCurrentConfiguration() {\n     ConfigurationRegistry registry = Configuration.getInstance().getRegistry();\n     String currentSealValue = registry.generateSealValue();\n-    if (logger.isDebugEnabled()) {\n-      logger.debug(\"Seal {} {} {}\", this.sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n-    }\n-    if (!this.sealValue.equals(currentSealValue)) {\n-      logger.info(\"Overwriting deserialized registry with current one\");\n-      this.clear();\n-      this.putAll(registry);\n-    }\n-  }\n+    if (logger.isDebugEnabled()) { logger.debug(\"Seal {} {} {}\",\n \n-  private String seal() {\n-    try {\n-      return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n+    this . sealValue, this.sealValue.equals(currentSealValue) ? \"==\" : \"!=\", currentSealValue);\n+   }\n+   if (!this.sealValue.equals(currentSealValue)) {\n+     logger.info(\"Overwriting deserialized registry with current one\");\n+     this.clear();\n+     this.putAll(registry);\n+   }\n+ }\n \n-  private String calculateToken() {\n-    StringBuilder sb = new StringBuilder();\n-    for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n-      sb.append(String.format(\"%s\", this.get(parameter)));\n-    }\n-    return sb.toString();\n-  }\n+ private String seal() {\n+   try {\n+     return Hex.encodeHexString(MessageDigest.getInstance(\"MD5\").digest(this.calculateToken().getBytes(\"UTF-8\")));\n+   } catch (Exception e) {\n+     throw new RuntimeException(e);\n+   }\n+ }\n+\n+ private String calculateToken() {\n+   StringBuilder sb = new StringBuilder();\n+   for (ConfigurationParameter parameter : ConfigurationParameter.values()) {\n+     sb.append(String.format(\"%s\", this.get(parameter)));\n+   }\n+   return sb.toString();\n+ }\n \n }\n",
            "diff_size": 32
        }
    ]
}