{
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.apache.calcite.sql;\n\n/**\n * SqlNullSemantics defines the possible comparison rules for values which might",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/90/SqlNullSemantics.java\nindex 72ae14322b..5725e20448 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler/90/SqlNullSemantics.java\n@@ -1,47 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.sql;\r\n-\r\n-/**\r\n- * SqlNullSemantics defines the possible comparison rules for values which might\r\n- * be null. In SQL (and internal plans used to process SQL) different rules are\r\n- * used depending on the context.\r\n- */\r\n-public enum SqlNullSemantics {\r\n-  /**\r\n-   * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\r\n-   * the comparison result is unknown, and so a filter used to evaluate the\r\n-   * WHERE clause rejects the row.\r\n-   */\r\n-  NULL_MATCHES_NOTHING,\r\n-\r\n-  /**\r\n-   * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\r\n-   * (null,5) is treated as equal to another key (null,5).\r\n-   */\r\n-  NULL_MATCHES_NULL,\r\n-\r\n-  /**\r\n-   * Wildcard semantics: logically, this is not present in any SQL construct.\r\n-   * However, it is required internally, for example to rewrite NOT IN to NOT\r\n-   * EXISTS; when we negate a predicate, we invert the null semantics, so\r\n-   * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\r\n-   */\r\n-  NULL_MATCHES_ANYTHING\r\n-}\r\n-\r\n-// End SqlNullSemantics.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.calcite.sql;\n+\n+/**\n+ * SqlNullSemantics defines the possible comparison rules for values which might\n+ * be null. In SQL (and internal plans used to process SQL) different rules are\n+ * used depending on the context.\n+ */\n+public enum SqlNullSemantics {\n+  /**\n+   * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\n+   * the comparison result is unknown, and so a filter used to evaluate the\n+   * WHERE clause rejects the row.\n+   */\n+  NULL_MATCHES_NOTHING,\n+\n+  /**\n+   * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\n+   * (null,5) is treated as equal to another key (null,5).\n+   */\n+  NULL_MATCHES_NULL,\n+\n+  /**\n+   * Wildcard semantics: logically, this is not present in any SQL construct.\n+   * However, it is required internally, for example to rewrite NOT IN to NOT\n+   * EXISTS; when we negate a predicate, we invert the null semantics, so\n+   * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\n+   */\n+  NULL_MATCHES_ANYTHING\n+}\n+\n+// End SqlNullSemantics.java\n",
            "diff_size": 48
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/90/SqlNullSemantics.java\nindex 72ae14322b..f7f70f8bf1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/intellij/90/SqlNullSemantics.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.apache.calcite.sql;\r\n \r\n /**\r\n@@ -22,26 +23,26 @@ package org.apache.calcite.sql;\n  * used depending on the context.\r\n  */\r\n public enum SqlNullSemantics {\r\n-  /**\r\n-   * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\r\n-   * the comparison result is unknown, and so a filter used to evaluate the\r\n-   * WHERE clause rejects the row.\r\n-   */\r\n-  NULL_MATCHES_NOTHING,\r\n+    /**\r\n+     * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\r\n+     * the comparison result is unknown, and so a filter used to evaluate the\r\n+     * WHERE clause rejects the row.\r\n+     */\r\n+    NULL_MATCHES_NOTHING,\r\n \r\n-  /**\r\n-   * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\r\n-   * (null,5) is treated as equal to another key (null,5).\r\n-   */\r\n-  NULL_MATCHES_NULL,\r\n+    /**\r\n+     * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\r\n+     * (null,5) is treated as equal to another key (null,5).\r\n+     */\r\n+    NULL_MATCHES_NULL,\r\n \r\n-  /**\r\n-   * Wildcard semantics: logically, this is not present in any SQL construct.\r\n-   * However, it is required internally, for example to rewrite NOT IN to NOT\r\n-   * EXISTS; when we negate a predicate, we invert the null semantics, so\r\n-   * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\r\n-   */\r\n-  NULL_MATCHES_ANYTHING\r\n+    /**\r\n+     * Wildcard semantics: logically, this is not present in any SQL construct.\r\n+     * However, it is required internally, for example to rewrite NOT IN to NOT\r\n+     * EXISTS; when we negate a predicate, we invert the null semantics, so\r\n+     * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\r\n+     */\r\n+    NULL_MATCHES_ANYTHING\r\n }\r\n \r\n // End SqlNullSemantics.java\r\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 32.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 6, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 6, indentation should be the same level as line 44.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/90/SqlNullSemantics.java\nindex 72ae14322b..0960ab02de 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/codebuff/90/SqlNullSemantics.java\n@@ -20,28 +20,26 @@ package org.apache.calcite.sql;\n  * SqlNullSemantics defines the possible comparison rules for values which might\r\n  * be null. In SQL (and internal plans used to process SQL) different rules are\r\n  * used depending on the context.\r\n- */\r\n+ */\n+\n+\n public enum SqlNullSemantics {\r\n   /**\r\n    * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\r\n    * the comparison result is unknown, and so a filter used to evaluate the\r\n    * WHERE clause rejects the row.\r\n-   */\r\n-  NULL_MATCHES_NOTHING,\r\n+   */\n+    NULL_MATCHES_NOTHING,\r\n \r\n   /**\r\n    * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\r\n    * (null,5) is treated as equal to another key (null,5).\r\n-   */\r\n-  NULL_MATCHES_NULL,\r\n+   */ NULL_MATCHES_NULL,\r\n \r\n   /**\r\n    * Wildcard semantics: logically, this is not present in any SQL construct.\r\n    * However, it is required internally, for example to rewrite NOT IN to NOT\r\n    * EXISTS; when we negate a predicate, we invert the null semantics, so\r\n    * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\r\n-   */\r\n-  NULL_MATCHES_ANYTHING\r\n-}\r\n-\r\n-// End SqlNullSemantics.java\r\n+   */ NULL_MATCHES_ANYTHING\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/90/SqlNullSemantics.java\nindex 72ae14322b..5725e20448 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/errored/1/90/SqlNullSemantics.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Qihoo360-Quicksql/styler_random/90/SqlNullSemantics.java\n@@ -1,47 +1,48 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to you under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.apache.calcite.sql;\r\n-\r\n-/**\r\n- * SqlNullSemantics defines the possible comparison rules for values which might\r\n- * be null. In SQL (and internal plans used to process SQL) different rules are\r\n- * used depending on the context.\r\n- */\r\n-public enum SqlNullSemantics {\r\n-  /**\r\n-   * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\r\n-   * the comparison result is unknown, and so a filter used to evaluate the\r\n-   * WHERE clause rejects the row.\r\n-   */\r\n-  NULL_MATCHES_NOTHING,\r\n-\r\n-  /**\r\n-   * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\r\n-   * (null,5) is treated as equal to another key (null,5).\r\n-   */\r\n-  NULL_MATCHES_NULL,\r\n-\r\n-  /**\r\n-   * Wildcard semantics: logically, this is not present in any SQL construct.\r\n-   * However, it is required internally, for example to rewrite NOT IN to NOT\r\n-   * EXISTS; when we negate a predicate, we invert the null semantics, so\r\n-   * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\r\n-   */\r\n-  NULL_MATCHES_ANYTHING\r\n-}\r\n-\r\n-// End SqlNullSemantics.java\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.calcite.sql;\n+\n+/**\n+ * SqlNullSemantics defines the possible comparison rules for values which might\n+ * be null. In SQL (and internal plans used to process SQL) different rules are\n+ * used depending on the context.\n+ */\n+public enum SqlNullSemantics {\n+  /**\n+   * Predicate semantics: e.g. in the expression (WHERE X=5), if X is NULL,\n+   * the comparison result is unknown, and so a filter used to evaluate the\n+   * WHERE clause rejects the row.\n+   */\n+  NULL_MATCHES_NOTHING,\n+\n+  /**\n+   * GROUP BY key semantics: e.g. in the expression (GROUP BY A,B), the key\n+   * (null,5) is treated as equal to another key (null,5).\n+   */\n+  NULL_MATCHES_NULL,\n+\n+  /**\n+   * Wildcard semantics: logically, this is not present in any SQL construct.\n+   * However, it is required internally, for example to rewrite NOT IN to NOT\n+   * EXISTS; when we negate a predicate, we invert the null semantics, so\n+   * NULL_MATCHES_NOTHING must become NULL_MATCHES_ANYTHING.\n+   */\n+  NULL_MATCHES_ANYTHING\n+}\n+\n+// End SqlNullSemantics.java\n",
            "diff_size": 48
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}