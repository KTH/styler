{
    "error_id": "410",
    "information": {
        "errors": [
            {
                "line": "190",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/410/TriggerReader.java\nindex 15d00c511c..1cd3336304 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler/410/TriggerReader.java\n@@ -187,7 +187,7 @@ public class TriggerReader extends Reader<Trigger> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/410/TriggerReader.java\nindex 15d00c511c..5949d5dc27 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/intellij/410/TriggerReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.api.v2010.account.usage;\n@@ -187,7 +187,7 @@ public class TriggerReader extends Reader<Trigger> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/410/TriggerReader.java\nindex 15d00c511c..ee3c23dace 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/codebuff/410/TriggerReader.java\n@@ -28,6 +28,8 @@ public class TriggerReader extends Reader<Trigger> {\n     /**\n      * Construct a new TriggerReader.\n      */\n+\n+\n     public TriggerReader() {\n     }\n \n@@ -37,6 +39,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param pathAccountSid The SID of the Account that created the resources to\n      *                       read\n      */\n+\n+\n     public TriggerReader(final String pathAccountSid) {\n         this.pathAccountSid = pathAccountSid;\n     }\n@@ -49,6 +53,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param recurring The frequency of recurring UsageTriggers to read\n      * @return this\n      */\n+\n+\n     public TriggerReader setRecurring(final Trigger.Recurring recurring) {\n         this.recurring = recurring;\n         return this;\n@@ -62,6 +68,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param triggerBy The trigger field of the UsageTriggers to read\n      * @return this\n      */\n+\n+\n     public TriggerReader setTriggerBy(final Trigger.TriggerField triggerBy) {\n         this.triggerBy = triggerBy;\n         return this;\n@@ -74,6 +82,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param usageCategory The usage category of the UsageTriggers to read\n      * @return this\n      */\n+\n+\n     public TriggerReader setUsageCategory(final Trigger.UsageCategory usageCategory) {\n         this.usageCategory = usageCategory;\n         return this;\n@@ -85,6 +95,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Trigger ResourceSet\n      */\n+\n+\n     @Override\n     public ResourceSet<Trigger> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -96,6 +108,8 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Trigger ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<Trigger> firstPage(final TwilioRestClient client) {\n@@ -105,7 +119,7 @@ public class TriggerReader extends Reader<Trigger> {\n             Domains.API.toString(),\n             \"/2010-04-01/Accounts/\" + this.pathAccountSid + \"/Usage/Triggers.json\",\n             client.getRegion()\n-        );\n+                          );\n \n         addQueryParams(request);\n         return pageForRequest(client, request);\n@@ -118,15 +132,14 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Trigger ResourceSet\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<Trigger> getPage(final String targetUrl, final TwilioRestClient client) {\n+    public Page<Trigger> getPage(final String targetUrl,\n+                                 final TwilioRestClient client) {\n         this.pathAccountSid = this.pathAccountSid == null ? client.getAccountSid() : this.pathAccountSid;\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -137,16 +150,15 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n+\n     @Override\n     public Page<Trigger> nextPage(final Page<Trigger> page,\n                                   final TwilioRestClient client) {\n         Request request = new Request(\n             HttpMethod.GET,\n-            page.getNextPageUrl(\n-                Domains.API.toString(),\n-                client.getRegion()\n-            )\n-        );\n+            page.getNextPageUrl(Domains.API.toString(), client.getRegion())\n+                          );\n         return pageForRequest(client, request);\n     }\n \n@@ -157,16 +169,15 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n+\n     @Override\n     public Page<Trigger> previousPage(final Page<Trigger> page,\n                                       final TwilioRestClient client) {\n         Request request = new Request(\n             HttpMethod.GET,\n-            page.getPreviousPageUrl(\n-                Domains.API.toString(),\n-                client.getRegion()\n-            )\n-        );\n+            page.getPreviousPageUrl(Domains.API.toString(), client.getRegion())\n+                          );\n         return pageForRequest(client, request);\n     }\n \n@@ -177,9 +188,11 @@ public class TriggerReader extends Reader<Trigger> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<Trigger> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<Trigger> pageForRequest(final TwilioRestClient client,\n+                                         final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"Trigger read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {\n@@ -187,15 +200,11 @@ public class TriggerReader extends Reader<Trigger> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n-        return Page.fromJson(\n-            \"usage_triggers\",\n-            response.getContent(),\n-            Trigger.class,\n-            client.getObjectMapper()\n-        );\n+        return Page.fromJson(\"usage_triggers\", response.getContent(), Trigger.class, client.getObjectMapper());\n     }\n \n     /**\n@@ -203,6 +212,8 @@ public class TriggerReader extends Reader<Trigger> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (recurring != null) {\n             request.addQueryParam(\"Recurring\", recurring.toString());\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/410/TriggerReader.java\nindex 15d00c511c..1cd3336304 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_random/410/TriggerReader.java\n@@ -187,7 +187,7 @@ public class TriggerReader extends Reader<Trigger> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/410/TriggerReader.java\nindex 15d00c511c..8636d2e96a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/errored/1/410/TriggerReader.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/twilio-twilio-java/styler_three_grams/410/TriggerReader.java\n@@ -187,7 +187,8 @@ public class TriggerReader extends Reader<Trigger> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ]
}