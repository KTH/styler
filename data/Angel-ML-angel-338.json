{
    "error_id": "338",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/338/PlusRowsRequest.java\nindex 69c29fff81..3f3d5f7cc8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/338/PlusRowsRequest.java\n@@ -21,58 +21,60 @@ import com.tencent.angel.psagent.matrix.transport.adapter.RowsUpdateSplit;\n import io.netty.buffer.ByteBuf;\n \n public class PlusRowsRequest extends PutPartitionUpdateRequest {\n-  /** the update row splits */\n-  private RowsUpdateSplit rowsSplit;\n+    /**\n+     * the update row splits\n+     */\n+    private RowsUpdateSplit rowsSplit;\n \n-  /**\n-   * Create PutPartitionUpdateRequest.\n-   *\n-   * @param taskIndex task index\n-   * @param clock clock value\n-   * @param partKey matrix partition key\n-   * @param rowsSplit update row splits\n-   * @param updateClock true means update the clock value of the matrix partition\n-   */\n-  public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n-    super(taskIndex, clock, partKey, null, updateClock);\n-    this.rowsSplit = rowsSplit;\n-  }\n+    /**\n+     * Create PutPartitionUpdateRequest.\n+     *\n+     * @param taskIndex   task index\n+     * @param clock       clock value\n+     * @param partKey     matrix partition key\n+     * @param rowsSplit   update row splits\n+     * @param updateClock true means update the clock value of the matrix partition\n+     */\n+    public PlusRowsRequest(int taskIndex, int clock,\n+                           PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+        super(taskIndex, clock, partKey, null, updateClock);\n+        this.rowsSplit = rowsSplit;\n+    }\n \n-  public PlusRowsRequest() {\n-    super(-1, -1, null, null, false);\n-  }\n+    public PlusRowsRequest() {\n+        super(-1, -1, null, null, false);\n+    }\n \n-  @Override\n-  public int getEstimizeDataSize() {\n-    return bufferLen();\n-  }\n+    @Override\n+    public int getEstimizeDataSize() {\n+        return bufferLen();\n+    }\n \n-  @Override\n-  public TransportMethod getType() {\n-    return TransportMethod.PUT_PARTUPDATE;\n-  }\n+    @Override\n+    public TransportMethod getType() {\n+        return TransportMethod.PUT_PARTUPDATE;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    if (rowsSplit != null) {\n-      rowsSplit.serialize(buf);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        if (rowsSplit != null) {\n+            rowsSplit.serialize(buf);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    rowsSplit = new RowsUpdateSplit();\n-  }\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        rowsSplit = new RowsUpdateSplit();\n+    }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n-      len += rowsSplit.bufferLen();\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        if (rowsSplit != null) {\n+            len += rowsSplit.bufferLen();\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/338/PlusRowsRequest.java\nindex 69c29fff81..2037c807ec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/338/PlusRowsRequest.java\n@@ -33,9 +33,8 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n    * @param rowsSplit update row splits\n    * @param updateClock true means update the clock value of the matrix partition\n    */\n-  public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n-    super(taskIndex, clock, partKey, null, updateClock);\n+  public PlusRowsRequest(int taskIndex, int clock, PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+  super(taskIndex, clock, partKey, null, updateClock);\n     this.rowsSplit = rowsSplit;\n   }\n \n@@ -70,9 +69,9 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   @Override\n   public int bufferLen() {\n     int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n+    if (rowsSplit != null) {\n       len += rowsSplit.bufferLen();\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 25.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/338/PlusRowsRequest.java\nindex 69c29fff81..5205082160 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/338/PlusRowsRequest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/338/PlusRowsRequest.java\n@@ -22,7 +22,7 @@ import io.netty.buffer.ByteBuf;\n \n public class PlusRowsRequest extends PutPartitionUpdateRequest {\n   /** the update row splits */\n-  private RowsUpdateSplit rowsSplit;\n+    private RowsUpdateSplit rowsSplit;\n \n   /**\n    * Create PutPartitionUpdateRequest.\n@@ -33,46 +33,46 @@ public class PlusRowsRequest extends PutPartitionUpdateRequest {\n    * @param rowsSplit update row splits\n    * @param updateClock true means update the clock value of the matrix partition\n    */\n-  public PlusRowsRequest(int taskIndex, int clock,\n-    PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n+\n+    public PlusRowsRequest(int taskIndex, int clock, PartitionKey partKey, RowsUpdateSplit rowsSplit, boolean updateClock) {\n     super(taskIndex, clock, partKey, null, updateClock);\n     this.rowsSplit = rowsSplit;\n-  }\n+    }\n \n-  public PlusRowsRequest() {\n+    public PlusRowsRequest() {\n     super(-1, -1, null, null, false);\n-  }\n+    }\n \n-  @Override\n-  public int getEstimizeDataSize() {\n+    @Override\n+    public int getEstimizeDataSize() {\n     return bufferLen();\n-  }\n+    }\n \n-  @Override\n-  public TransportMethod getType() {\n+    @Override\n+    public TransportMethod getType() {\n     return TransportMethod.PUT_PARTUPDATE;\n-  }\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n     if (rowsSplit != null) {\n-      rowsSplit.serialize(buf);\n+        rowsSplit.serialize(buf);\n+    }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n     rowsSplit = new RowsUpdateSplit();\n-  }\n+    }\n \n-  @Override\n-  public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     int len = super.bufferLen();\n-    if(rowsSplit != null)  {\n-      len += rowsSplit.bufferLen();\n+    if (rowsSplit != null) {\n+        len += rowsSplit.bufferLen();\n     }\n     return len;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}