{
    "error_id": "148",
    "information": {
        "errors": [
            {
                "line": "48",
                "column": "58",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        String prefix = \"x\";\n        NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n        String sb = buildQlSelect(prefix) + startWhere() +\n                buildWhereClause(Operation.EQUALS, prefix, parameter);\n        return super.findOneWithJQL(sb, parameter);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/148/GroupDao.java\nindex 1a0b09f3bb..92fd565664 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/148/GroupDao.java\n@@ -45,22 +45,21 @@ public class GroupDao extends BaseDao<Group> {\n     public Group findByName(@Nonnull String name) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n-        return super.findOneWithJQL(sb, parameter);\n-    }\n+        String sb = buildQlSelect(prefix) + startWhere() + buildWhereClause(Operation.EQUALS, prefix, parameter);\n+return super.findOneWithJQL(sb, parameter);\n+}\n \n-    /**\n+/**\n      * @param g\n      * @return\n      */\n-    public synchronized Group getOrCreateGroup(String g) {\n-        Group existing = findByName(g);\n-        if (existing == null) {\n-            existing = new Group(g);\n-            existing = saveOrUpdate(existing);\n-        }\n-        return existing;\n+public synchronized Group getOrCreateGroup(String g) {\n+    Group existing = findByName(g);\n+    if (existing == null) {\n+        existing = new Group(g);\n+        existing = saveOrUpdate(existing);\n     }\n+    return existing;\n+}\n \n }\n",
            "diff_size": 14
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "47",
                    "column": "54",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/148/GroupDao.java\nindex 1a0b09f3bb..4f1d37d5f5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/148/GroupDao.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.dao;\n \n /*\n@@ -22,45 +23,43 @@ import com.intuit.tank.project.Group;\n \n /**\n  * GroupDao\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class GroupDao extends BaseDao<Group> {\n \n-    /**\n-     * @param entityClass\n-     */\n-    public GroupDao() {\n-        super();\n-    }\n+  /**\n+   * @param entityClass\n+   */\n+  public GroupDao() {\n+    super();\n+  }\n \n-    /**\n-     * finds the group by the name.\n-     * \n-     * @param name\n-     *            the name to search\n-     * @return the group or null if no group with the name found.\n-     */\n-    public Group findByName(@Nonnull String name) {\n-        String prefix = \"x\";\n-        NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n-        return super.findOneWithJQL(sb, parameter);\n-    }\n+  /**\n+   * finds the group by the name.\n+   *\n+   * @param name the name to search\n+   * @return the group or null if no group with the name found.\n+   */\n+  public Group findByName(@Nonnull String name) {\n+    String prefix = \"x\";\n+    NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n+    String sb = buildQlSelect(prefix) + startWhere() +\n+      buildWhereClause(Operation.EQUALS, prefix, parameter);\n+    return super.findOneWithJQL(sb, parameter);\n+  }\n \n-    /**\n-     * @param g\n-     * @return\n-     */\n-    public synchronized Group getOrCreateGroup(String g) {\n-        Group existing = findByName(g);\n-        if (existing == null) {\n-            existing = new Group(g);\n-            existing = saveOrUpdate(existing);\n-        }\n-        return existing;\n+  /**\n+   * @param g\n+   * @return\n+   */\n+  public synchronized Group getOrCreateGroup(String g) {\n+    Group existing = findByName(g);\n+    if (existing == null) {\n+      existing = new Group(g);\n+      existing = saveOrUpdate(existing);\n     }\n+    return existing;\n+  }\n \n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/148/GroupDao.java\nindex 1a0b09f3bb..521d80ad2a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/148/GroupDao.java\n@@ -45,8 +45,7 @@ public class GroupDao extends BaseDao<Group> {\n     public Group findByName(@Nonnull String name) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n+        String sb = buildQlSelect(prefix) + startWhere() + buildWhereClause(Operation.EQUALS, prefix, parameter);\n         return super.findOneWithJQL(sb, parameter);\n     }\n \n@@ -63,4 +62,4 @@ public class GroupDao extends BaseDao<Group> {\n         return existing;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/148/GroupDao.java\nindex 1a0b09f3bb..ff8a74156e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/148/GroupDao.java\n@@ -16,8 +16,9 @@ package com.intuit.tank.dao;\n  * #L%\n  */\n \n-import javax.annotation.Nonnull;\n \n+\n+import javax.annotation.Nonnull;\n import com.intuit.tank.project.Group;\n \n /**\n@@ -26,11 +27,13 @@ import com.intuit.tank.project.Group;\n  * @author dangleton\n  * \n  */\n+\n public class GroupDao extends BaseDao<Group> {\n \n     /**\n      * @param entityClass\n      */\n+\n     public GroupDao() {\n         super();\n     }\n@@ -42,11 +45,12 @@ public class GroupDao extends BaseDao<Group> {\n      *            the name to search\n      * @return the group or null if no group with the name found.\n      */\n+\n+\n     public Group findByName(@Nonnull String name) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n+        String sb = buildQlSelect(prefix) + startWhere() + buildWhereClause(Operation.EQUALS, prefix, parameter);\n         return super.findOneWithJQL(sb, parameter);\n     }\n \n@@ -54,6 +58,8 @@ public class GroupDao extends BaseDao<Group> {\n      * @param g\n      * @return\n      */\n+\n+\n     public synchronized Group getOrCreateGroup(String g) {\n         Group existing = findByName(g);\n         if (existing == null) {\n@@ -63,4 +69,4 @@ public class GroupDao extends BaseDao<Group> {\n         return existing;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/148/GroupDao.java\nindex 1a0b09f3bb..92fd565664 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/148/GroupDao.java\n@@ -45,22 +45,21 @@ public class GroupDao extends BaseDao<Group> {\n     public Group findByName(@Nonnull String name) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n-        return super.findOneWithJQL(sb, parameter);\n-    }\n+        String sb = buildQlSelect(prefix) + startWhere() + buildWhereClause(Operation.EQUALS, prefix, parameter);\n+return super.findOneWithJQL(sb, parameter);\n+}\n \n-    /**\n+/**\n      * @param g\n      * @return\n      */\n-    public synchronized Group getOrCreateGroup(String g) {\n-        Group existing = findByName(g);\n-        if (existing == null) {\n-            existing = new Group(g);\n-            existing = saveOrUpdate(existing);\n-        }\n-        return existing;\n+public synchronized Group getOrCreateGroup(String g) {\n+    Group existing = findByName(g);\n+    if (existing == null) {\n+        existing = new Group(g);\n+        existing = saveOrUpdate(existing);\n     }\n+    return existing;\n+}\n \n }\n",
            "diff_size": 14
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/148/GroupDao.java\nindex 1a0b09f3bb..92fd565664 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/148/GroupDao.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/148/GroupDao.java\n@@ -45,22 +45,21 @@ public class GroupDao extends BaseDao<Group> {\n     public Group findByName(@Nonnull String name) {\n         String prefix = \"x\";\n         NamedParameter parameter = new NamedParameter(Group.PROPERTY_NAME, \"name\", name);\n-        String sb = buildQlSelect(prefix) + startWhere() +\n-                buildWhereClause(Operation.EQUALS, prefix, parameter);\n-        return super.findOneWithJQL(sb, parameter);\n-    }\n+        String sb = buildQlSelect(prefix) + startWhere() + buildWhereClause(Operation.EQUALS, prefix, parameter);\n+return super.findOneWithJQL(sb, parameter);\n+}\n \n-    /**\n+/**\n      * @param g\n      * @return\n      */\n-    public synchronized Group getOrCreateGroup(String g) {\n-        Group existing = findByName(g);\n-        if (existing == null) {\n-            existing = new Group(g);\n-            existing = saveOrUpdate(existing);\n-        }\n-        return existing;\n+public synchronized Group getOrCreateGroup(String g) {\n+    Group existing = findByName(g);\n+    if (existing == null) {\n+        existing = new Group(g);\n+        existing = saveOrUpdate(existing);\n     }\n+    return existing;\n+}\n \n }\n",
            "diff_size": 14
        }
    ]
}