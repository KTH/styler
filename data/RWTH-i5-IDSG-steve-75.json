{
    "error_id": "75",
    "information": {
        "errors": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    /**\n     * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n     * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n     * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n     * uses plain text matching, but is good enough for our simple user management and login authorization case.\n     *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/75/SecurityConfiguration.java\nindex 3250f4fd90..5ea16a0eed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/75/SecurityConfiguration.java\n@@ -29,7 +29,7 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n      * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n      * uses plain text matching, but is good enough for our simple user management and login authorization case.\n-     *\n+     * <p>\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n      */\n@@ -45,8 +45,8 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n     @Override\n     public void configure(WebSecurity web) throws Exception {\n         web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n+            .antMatchers(\"/static/**\")\n+            .antMatchers(\"/views/**\");\n     }\n \n     @Override\n@@ -54,18 +54,18 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n         final String prefix = \"/manager/\";\n         http\n             .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n+            .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n+            .and()\n             .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n+            .invalidSessionUrl(prefix + \"signin\")\n+            .and()\n             .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n+            .loginPage(prefix + \"signin\")\n+            .permitAll()\n+            .and()\n             .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n+            .logoutUrl(prefix + \"signout\")\n+            .and()\n             .httpBasic();\n     }\n \n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/75/SecurityConfiguration.java\nindex 3250f4fd90..d906c63eaa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/75/SecurityConfiguration.java\n@@ -69,4 +69,4 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n             .httpBasic();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/75/SecurityConfiguration.java\nindex 3250f4fd90..cbd12f2244 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/75/SecurityConfiguration.java\n@@ -19,6 +19,8 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 07.01.2015\n  */\n+\n+\n @Configuration\n @EnableWebSecurity\n @Conditional(SteveProdCondition.class)\n@@ -33,40 +35,34 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n      */\n+\n     @Autowired\n     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication()\n-            .passwordEncoder(NoOpPasswordEncoder.getInstance())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getPassword())\n-            .roles(\"ADMIN\");\n+        auth.inMemoryAuthentication().passwordEncoder(NoOpPasswordEncoder.getInstance())\n+                                     .withUser(CONFIG.getAuth().getUserName())\n+                                     .password(CONFIG.getAuth().getPassword()).roles(\"ADMIN\");\n     }\n \n     @Override\n     public void configure(WebSecurity web) throws Exception {\n-        web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n+        web.ignoring().antMatchers(\"/static/**\").antMatchers(\"/views/**\");\n     }\n \n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n         final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n+        http.authorizeRequests().antMatchers(prefix + \"**\")\n+                                .hasRole(\"ADMIN\")\n+                                .and()\n+                                .sessionManagement()\n+                                .invalidSessionUrl(prefix + \"signin\")\n+                                .and()\n+                                .formLogin()\n+                                .loginPage(prefix + \"signin\")\n+                                .permitAll()\n+                                .and()\n+                                .logout()\n+                                .logoutUrl(prefix + \"signout\")\n+                                .and().httpBasic();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/75/SecurityConfiguration.java\nindex 3250f4fd90..3396fe6f0c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/75/SecurityConfiguration.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/75/SecurityConfiguration.java\n@@ -22,9 +22,7 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n @Configuration\n @EnableWebSecurity\n @Conditional(SteveProdCondition.class)\n-public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n-\n-    /**\n+public class SecurityConfiguration extends WebSecurityConfigurerAdapter { /**\n      * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n      * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n      * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n@@ -32,41 +30,40 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      *\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n-     */\n-    @Autowired\n-    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication()\n-            .passwordEncoder(NoOpPasswordEncoder.getInstance())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getPassword())\n-            .roles(\"ADMIN\");\n-    }\n+     */@Autowired\n+public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.inMemoryAuthentication()\n+        .passwordEncoder(NoOpPasswordEncoder.getInstance())\n+        .withUser(CONFIG.getAuth().getUserName())\n+        .password(CONFIG.getAuth().getPassword())\n+        .roles(\"ADMIN\");\n+}\n \n-    @Override\n-    public void configure(WebSecurity web) throws Exception {\n-        web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n-    }\n+@Override\n+public void configure(WebSecurity web) throws Exception {\n+    web.ignoring()\n+       .antMatchers(\"/static/**\")\n+       .antMatchers(\"/views/**\");\n+}\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n-    }\n+@Override\n+protected void configure(HttpSecurity http) throws Exception {\n+    final String prefix = \"/manager/\";\n+    http\n+        .authorizeRequests()\n+            .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n+            .and()\n+        .sessionManagement()\n+            .invalidSessionUrl(prefix + \"signin\")\n+            .and()\n+        .formLogin()\n+            .loginPage(prefix + \"signin\")\n+            .permitAll()\n+            .and()\n+        .logout()\n+            .logoutUrl(prefix + \"signout\")\n+            .and()\n+        .httpBasic();\n+}\n \n }\n",
            "diff_size": 37
        }
    ]
}