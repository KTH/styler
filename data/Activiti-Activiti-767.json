{
    "error_id": "767",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.export;\n\nimport javax.xml.stream.XMLStreamWriter;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/767/LaneExport.java\nindex 0cf675544c..bcd5ddb8b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/767/LaneExport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/767/LaneExport.java\nindex 0cf675544c..4608fe4c3f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/767/LaneExport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n@@ -22,32 +23,32 @@ import org.apache.commons.lang3.StringUtils;\n \n public class LaneExport implements BpmnXMLConstants {\n \n-  public static void writeLanes(Process process, XMLStreamWriter xtw) throws Exception {\n-    if (!process.getLanes().isEmpty()) {\n-      xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANESET, BPMN2_NAMESPACE);\n-      xtw.writeAttribute(ATTRIBUTE_ID, \"laneSet_\" + process.getId());\n-      for (Lane lane : process.getLanes()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANE, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, lane.getId());\n-\n-        if (StringUtils.isNotEmpty(lane.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, lane.getName());\n-        }\n-\n-        boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(lane, false, xtw);\n-        if (didWriteExtensionStartElement) {\n-          xtw.writeEndElement();\n+    public static void writeLanes(Process process, XMLStreamWriter xtw) throws Exception {\n+        if (!process.getLanes().isEmpty()) {\n+            xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANESET, BPMN2_NAMESPACE);\n+            xtw.writeAttribute(ATTRIBUTE_ID, \"laneSet_\" + process.getId());\n+            for (Lane lane : process.getLanes()) {\n+                xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANE, BPMN2_NAMESPACE);\n+                xtw.writeAttribute(ATTRIBUTE_ID, lane.getId());\n+\n+                if (StringUtils.isNotEmpty(lane.getName())) {\n+                    xtw.writeAttribute(ATTRIBUTE_NAME, lane.getName());\n+                }\n+\n+                boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(lane, false, xtw);\n+                if (didWriteExtensionStartElement) {\n+                    xtw.writeEndElement();\n+                }\n+\n+                for (String flowNodeRef : lane.getFlowReferences()) {\n+                    xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_FLOWNODE_REF, BPMN2_NAMESPACE);\n+                    xtw.writeCharacters(flowNodeRef);\n+                    xtw.writeEndElement();\n+                }\n+\n+                xtw.writeEndElement();\n+            }\n+            xtw.writeEndElement();\n         }\n-\n-        for (String flowNodeRef : lane.getFlowReferences()) {\n-          xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_FLOWNODE_REF, BPMN2_NAMESPACE);\n-          xtw.writeCharacters(flowNodeRef);\n-          xtw.writeEndElement();\n-        }\n-\n-        xtw.writeEndElement();\n-      }\n-      xtw.writeEndElement();\n     }\n-  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/767/LaneExport.java\nindex 0cf675544c..25ba7c6942 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/767/LaneExport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n@@ -50,4 +51,4 @@ public class LaneExport implements BpmnXMLConstants {\n       xtw.writeEndElement();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/767/LaneExport.java\nindex 0cf675544c..3cdccb1496 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/767/LaneExport.java\n@@ -13,41 +13,44 @@\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n-\n import org.activiti.bpmn.constants.BpmnXMLConstants;\n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n import org.activiti.bpmn.model.Lane;\n import org.activiti.bpmn.model.Process;\n import org.apache.commons.lang3.StringUtils;\n \n+\n public class LaneExport implements BpmnXMLConstants {\n \n-  public static void writeLanes(Process process, XMLStreamWriter xtw) throws Exception {\n+    public static void writeLanes(Process process, XMLStreamWriter xtw) throws Exception {\n     if (!process.getLanes().isEmpty()) {\n-      xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANESET, BPMN2_NAMESPACE);\n-      xtw.writeAttribute(ATTRIBUTE_ID, \"laneSet_\" + process.getId());\n-      for (Lane lane : process.getLanes()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANE, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, lane.getId());\n-\n-        if (StringUtils.isNotEmpty(lane.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, lane.getName());\n-        }\n-\n-        boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(lane, false, xtw);\n-        if (didWriteExtensionStartElement) {\n-          xtw.writeEndElement();\n+        xtw.writeStartElement(BPMN2_PREFIX,\n+                              ELEMENT_LANESET,\n+                              BPMN2_NAMESPACE);\n+        xtw.writeAttribute(ATTRIBUTE_ID, \"laneSet_\" + process.getId());\n+        for (Lane lane : process.getLanes()) {\n+            xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_LANE, BPMN2_NAMESPACE);\n+            xtw.writeAttribute(ATTRIBUTE_ID, lane.getId());\n+            if (StringUtils.isNotEmpty(lane.getName())) {\n+                xtw.writeAttribute(ATTRIBUTE_NAME, lane.getName());\n+            }\n+\n+            boolean didWriteExtensionStartElement = BpmnXMLUtil.writeExtensionElements(lane, false, xtw);\n+            if (didWriteExtensionStartElement) {\n+                xtw.writeEndElement();\n+            }\n+\n+            for (String flowNodeRef : lane.getFlowReferences()) {\n+                xtw.writeStartElement(BPMN2_PREFIX,\n+                                      ELEMENT_FLOWNODE_REF,\n+                                      BPMN2_NAMESPACE);\n+                xtw.writeCharacters(flowNodeRef);\n+                xtw.writeEndElement();\n+            }\n+            xtw.writeEndElement();\n         }\n-\n-        for (String flowNodeRef : lane.getFlowReferences()) {\n-          xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_FLOWNODE_REF, BPMN2_NAMESPACE);\n-          xtw.writeCharacters(flowNodeRef);\n-          xtw.writeEndElement();\n-        }\n-\n         xtw.writeEndElement();\n-      }\n-      xtw.writeEndElement();\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/767/LaneExport.java\nindex 0cf675544c..bcd5ddb8b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/767/LaneExport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/767/LaneExport.java\nindex 0cf675544c..bcd5ddb8b8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/767/LaneExport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/767/LaneExport.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        }
    ]
}