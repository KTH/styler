{
    "error_id": "865",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/865/DenseFloatMatrix.java\nindex 82191f917c..307f8ae8aa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/865/DenseFloatMatrix.java\n@@ -1,82 +1,82 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseFloatVector;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-\r\n-/**\r\n- * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\r\n- */\r\n-public class DenseFloatMatrix extends TFloatMatrix {\r\n-  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n-\r\n-  /**\r\n-   * Create a new empty matrix.\r\n-   *\r\n-   * @param row the row\r\n-   * @param col the col\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col) {\r\n-    super(row, col);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new matrix with <code>values</code>.\r\n-   *\r\n-   * @param row    the row\r\n-   * @param col    the col\r\n-   * @param values the values\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col, float[][] values) {\r\n-    this(row, col);\r\n-    if (values != null) {\r\n-      assert (row == values.length);\r\n-      for (int i = 0; i < row; i++) {\r\n-        vectors[i] = initVector(i, values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * init the empty vector\r\n-   *\r\n-   * @param rowIndex\r\n-   * @return\r\n-   */\r\n-  public DenseFloatVector initVector(int rowIndex) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-\r\n-  /**\r\n-   * init the vector by set the value\r\n-   *\r\n-   * @param rowIndex\r\n-   * @param values\r\n-   * @return\r\n-   */\r\n-  private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col, values);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseFloatVector;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+/**\n+ * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\n+ */\n+public class DenseFloatMatrix extends TFloatMatrix {\n+  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\n+\n+  /**\n+   * Create a new empty matrix.\n+   *\n+   * @param row the row\n+   * @param col the col\n+   */\n+  public DenseFloatMatrix(int row, int col) {\n+    super(row, col);\n+  }\n+\n+  /**\n+   * Create a new matrix with <code>values</code>.\n+   *\n+   * @param row    the row\n+   * @param col    the col\n+   * @param values the values\n+   */\n+  public DenseFloatMatrix(int row, int col, float[][] values) {\n+    this(row, col);\n+    if (values != null) {\n+      assert (row == values.length);\n+      for (int i = 0; i < row; i++) {\n+        vectors[i] = initVector(i, values[i]);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * init the empty vector\n+   *\n+   * @param rowIndex\n+   * @return\n+   */\n+  public DenseFloatVector initVector(int rowIndex) {\n+    DenseFloatVector ret = new DenseFloatVector(col);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+\n+  /**\n+   * init the vector by set the value\n+   *\n+   * @param rowIndex\n+   * @param values\n+   * @return\n+   */\n+  private DenseFloatVector initVector(int rowIndex, float[] values) {\n+    DenseFloatVector ret = new DenseFloatVector(col, values);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+}\n",
            "diff_size": 82
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/865/DenseFloatMatrix.java\nindex 82191f917c..59e4891129 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/865/DenseFloatMatrix.java\n@@ -24,59 +24,59 @@ import org.apache.commons.logging.LogFactory;\n  * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\r\n  */\r\n public class DenseFloatMatrix extends TFloatMatrix {\r\n-  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n+    private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n \r\n-  /**\r\n-   * Create a new empty matrix.\r\n-   *\r\n-   * @param row the row\r\n-   * @param col the col\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col) {\r\n-    super(row, col);\r\n-  }\r\n+    /**\r\n+     * Create a new empty matrix.\r\n+     *\r\n+     * @param row the row\r\n+     * @param col the col\r\n+     */\r\n+    public DenseFloatMatrix(int row, int col) {\r\n+        super(row, col);\r\n+    }\r\n \r\n-  /**\r\n-   * Create a new matrix with <code>values</code>.\r\n-   *\r\n-   * @param row    the row\r\n-   * @param col    the col\r\n-   * @param values the values\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col, float[][] values) {\r\n-    this(row, col);\r\n-    if (values != null) {\r\n-      assert (row == values.length);\r\n-      for (int i = 0; i < row; i++) {\r\n-        vectors[i] = initVector(i, values[i]);\r\n-      }\r\n+    /**\r\n+     * Create a new matrix with <code>values</code>.\r\n+     *\r\n+     * @param row    the row\r\n+     * @param col    the col\r\n+     * @param values the values\r\n+     */\r\n+    public DenseFloatMatrix(int row, int col, float[][] values) {\r\n+        this(row, col);\r\n+        if (values != null) {\r\n+            assert (row == values.length);\r\n+            for (int i = 0; i < row; i++) {\r\n+                vectors[i] = initVector(i, values[i]);\r\n+            }\r\n+        }\r\n     }\r\n-  }\r\n \r\n-  /**\r\n-   * init the empty vector\r\n-   *\r\n-   * @param rowIndex\r\n-   * @return\r\n-   */\r\n-  public DenseFloatVector initVector(int rowIndex) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n+    /**\r\n+     * init the empty vector\r\n+     *\r\n+     * @param rowIndex\r\n+     * @return\r\n+     */\r\n+    public DenseFloatVector initVector(int rowIndex) {\r\n+        DenseFloatVector ret = new DenseFloatVector(col);\r\n+        ret.setMatrixId(matrixId);\r\n+        ret.setRowId(rowIndex);\r\n+        return ret;\r\n+    }\r\n \r\n-  /**\r\n-   * init the vector by set the value\r\n-   *\r\n-   * @param rowIndex\r\n-   * @param values\r\n-   * @return\r\n-   */\r\n-  private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col, values);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n+    /**\r\n+     * init the vector by set the value\r\n+     *\r\n+     * @param rowIndex\r\n+     * @param values\r\n+     * @return\r\n+     */\r\n+    private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n+        DenseFloatVector ret = new DenseFloatVector(col, values);\r\n+        ret.setMatrixId(matrixId);\r\n+        ret.setRowId(rowIndex);\r\n+        return ret;\r\n+    }\r\n }\r\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/865/DenseFloatMatrix.java\nindex 82191f917c..b7f05197d2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/865/DenseFloatMatrix.java\n@@ -46,7 +46,7 @@ public class DenseFloatMatrix extends TFloatMatrix {\n   public DenseFloatMatrix(int row, int col, float[][] values) {\r\n     this(row, col);\r\n     if (values != null) {\r\n-      assert (row == values.length);\r\n+      assert(row == values.length);\r\n       for (int i = 0; i < row; i++) {\r\n         vectors[i] = initVector(i, values[i]);\r\n       }\r\n@@ -79,4 +79,4 @@ public class DenseFloatMatrix extends TFloatMatrix {\n     ret.setRowId(rowIndex);\r\n     return ret;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 49.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 81.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/865/DenseFloatMatrix.java\nindex 82191f917c..928d5b1bd0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/865/DenseFloatMatrix.java\n@@ -14,27 +14,29 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseFloatVector;\r\n-import org.apache.commons.logging.Log;\r\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseFloatVector;\n+import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\r\n \r\n /**\r\n  * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\r\n- */\r\n-public class DenseFloatMatrix extends TFloatMatrix {\r\n-  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n+ */\n+\n+public class DenseFloatMatrix extends TFloatMatrix {\n+    private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n \r\n   /**\r\n    * Create a new empty matrix.\r\n    *\r\n    * @param row the row\r\n    * @param col the col\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col) {\r\n-    super(row, col);\r\n-  }\r\n+   */\n+\n+    public DenseFloatMatrix(int row, int col) {\n+    super(row, col);\n+    }\r\n \r\n   /**\r\n    * Create a new matrix with <code>values</code>.\r\n@@ -42,29 +44,31 @@ public class DenseFloatMatrix extends TFloatMatrix {\n    * @param row    the row\r\n    * @param col    the col\r\n    * @param values the values\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col, float[][] values) {\r\n-    this(row, col);\r\n-    if (values != null) {\r\n-      assert (row == values.length);\r\n-      for (int i = 0; i < row; i++) {\r\n-        vectors[i] = initVector(i, values[i]);\r\n-      }\r\n+   */\n+\n+    public DenseFloatMatrix(int row, int col, float[][] values) {\n+    this(row, col);\n+    if (values != null) {\n+                                                       assert (row == values.length);\n+                                                       for (int i = 0; i < row; i++) {\n+                            vectors[i] = initVector(i, values[i]);\n+                                                       }\n+    }\n     }\r\n-  }\r\n \r\n   /**\r\n    * init the empty vector\r\n    *\r\n    * @param rowIndex\r\n    * @return\r\n-   */\r\n-  public DenseFloatVector initVector(int rowIndex) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n+   */\n+\n+    public DenseFloatVector initVector(int rowIndex) {\n+    DenseFloatVector ret = new DenseFloatVector(col);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+    }\r\n \r\n   /**\r\n    * init the vector by set the value\r\n@@ -72,11 +76,13 @@ public class DenseFloatMatrix extends TFloatMatrix {\n    * @param rowIndex\r\n    * @param values\r\n    * @return\r\n-   */\r\n-  private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col, values);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-}\r\n+   */\n+\n+    private DenseFloatVector initVector(int rowIndex, float[] values) {\n+    DenseFloatVector ret = new DenseFloatVector(col, values);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/865/DenseFloatMatrix.java\nindex 82191f917c..307f8ae8aa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/865/DenseFloatMatrix.java\n@@ -1,82 +1,82 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseFloatVector;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-\r\n-/**\r\n- * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\r\n- */\r\n-public class DenseFloatMatrix extends TFloatMatrix {\r\n-  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n-\r\n-  /**\r\n-   * Create a new empty matrix.\r\n-   *\r\n-   * @param row the row\r\n-   * @param col the col\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col) {\r\n-    super(row, col);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new matrix with <code>values</code>.\r\n-   *\r\n-   * @param row    the row\r\n-   * @param col    the col\r\n-   * @param values the values\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col, float[][] values) {\r\n-    this(row, col);\r\n-    if (values != null) {\r\n-      assert (row == values.length);\r\n-      for (int i = 0; i < row; i++) {\r\n-        vectors[i] = initVector(i, values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * init the empty vector\r\n-   *\r\n-   * @param rowIndex\r\n-   * @return\r\n-   */\r\n-  public DenseFloatVector initVector(int rowIndex) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-\r\n-  /**\r\n-   * init the vector by set the value\r\n-   *\r\n-   * @param rowIndex\r\n-   * @param values\r\n-   * @return\r\n-   */\r\n-  private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col, values);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseFloatVector;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+/**\n+ * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\n+ */\n+public class DenseFloatMatrix extends TFloatMatrix {\n+  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\n+\n+  /**\n+   * Create a new empty matrix.\n+   *\n+   * @param row the row\n+   * @param col the col\n+   */\n+  public DenseFloatMatrix(int row, int col) {\n+    super(row, col);\n+  }\n+\n+  /**\n+   * Create a new matrix with <code>values</code>.\n+   *\n+   * @param row    the row\n+   * @param col    the col\n+   * @param values the values\n+   */\n+  public DenseFloatMatrix(int row, int col, float[][] values) {\n+    this(row, col);\n+    if (values != null) {\n+      assert (row == values.length);\n+      for (int i = 0; i < row; i++) {\n+        vectors[i] = initVector(i, values[i]);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * init the empty vector\n+   *\n+   * @param rowIndex\n+   * @return\n+   */\n+  public DenseFloatVector initVector(int rowIndex) {\n+    DenseFloatVector ret = new DenseFloatVector(col);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+\n+  /**\n+   * init the vector by set the value\n+   *\n+   * @param rowIndex\n+   * @param values\n+   * @return\n+   */\n+  private DenseFloatVector initVector(int rowIndex, float[] values) {\n+    DenseFloatVector ret = new DenseFloatVector(col, values);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+}\n",
            "diff_size": 82
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/865/DenseFloatMatrix.java\nindex 82191f917c..307f8ae8aa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/865/DenseFloatMatrix.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/865/DenseFloatMatrix.java\n@@ -1,82 +1,82 @@\n-/*\r\n- * Tencent is pleased to support the open source community by making Angel available.\r\n- *\r\n- * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\r\n- *\r\n- * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\r\n- * compliance with the License. You may obtain a copy of the License at\r\n- *\r\n- * https://opensource.org/licenses/BSD-3-Clause\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is\r\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\r\n- * either express or implied. See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package com.tencent.angel.ml.math.matrix;\r\n-\r\n-import com.tencent.angel.ml.math.vector.DenseFloatVector;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-\r\n-/**\r\n- * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\r\n- */\r\n-public class DenseFloatMatrix extends TFloatMatrix {\r\n-  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\r\n-\r\n-  /**\r\n-   * Create a new empty matrix.\r\n-   *\r\n-   * @param row the row\r\n-   * @param col the col\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col) {\r\n-    super(row, col);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new matrix with <code>values</code>.\r\n-   *\r\n-   * @param row    the row\r\n-   * @param col    the col\r\n-   * @param values the values\r\n-   */\r\n-  public DenseFloatMatrix(int row, int col, float[][] values) {\r\n-    this(row, col);\r\n-    if (values != null) {\r\n-      assert (row == values.length);\r\n-      for (int i = 0; i < row; i++) {\r\n-        vectors[i] = initVector(i, values[i]);\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * init the empty vector\r\n-   *\r\n-   * @param rowIndex\r\n-   * @return\r\n-   */\r\n-  public DenseFloatVector initVector(int rowIndex) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-\r\n-  /**\r\n-   * init the vector by set the value\r\n-   *\r\n-   * @param rowIndex\r\n-   * @param values\r\n-   * @return\r\n-   */\r\n-  private DenseFloatVector initVector(int rowIndex, float[] values) {\r\n-    DenseFloatVector ret = new DenseFloatVector(col, values);\r\n-    ret.setMatrixId(matrixId);\r\n-    ret.setRowId(rowIndex);\r\n-    return ret;\r\n-  }\r\n-}\r\n+/*\n+ * Tencent is pleased to support the open source community by making Angel available.\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tencent.angel.ml.math.matrix;\n+\n+import com.tencent.angel.ml.math.vector.DenseFloatVector;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+/**\n+ * Dense double matrix that is represented by a group of dense float vector {@link DenseFloatVector}\n+ */\n+public class DenseFloatMatrix extends TFloatMatrix {\n+  private static final Log LOG = LogFactory.getLog(DenseFloatMatrix.class);\n+\n+  /**\n+   * Create a new empty matrix.\n+   *\n+   * @param row the row\n+   * @param col the col\n+   */\n+  public DenseFloatMatrix(int row, int col) {\n+    super(row, col);\n+  }\n+\n+  /**\n+   * Create a new matrix with <code>values</code>.\n+   *\n+   * @param row    the row\n+   * @param col    the col\n+   * @param values the values\n+   */\n+  public DenseFloatMatrix(int row, int col, float[][] values) {\n+    this(row, col);\n+    if (values != null) {\n+      assert (row == values.length);\n+      for (int i = 0; i < row; i++) {\n+        vectors[i] = initVector(i, values[i]);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * init the empty vector\n+   *\n+   * @param rowIndex\n+   * @return\n+   */\n+  public DenseFloatVector initVector(int rowIndex) {\n+    DenseFloatVector ret = new DenseFloatVector(col);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+\n+  /**\n+   * init the vector by set the value\n+   *\n+   * @param rowIndex\n+   * @param values\n+   * @return\n+   */\n+  private DenseFloatVector initVector(int rowIndex, float[] values) {\n+    DenseFloatVector ret = new DenseFloatVector(col, values);\n+    ret.setMatrixId(matrixId);\n+    ret.setRowId(rowIndex);\n+    return ret;\n+  }\n+}\n",
            "diff_size": 82
        }
    ]
}