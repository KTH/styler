{
    "error_id": "245",
    "information": {
        "errors": [
            {
                "line": "107",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n        if (value > 1e-10 && point < Integer.MAX_VALUE) {\n          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n        }\n        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n        buf.writeBytes(tmp);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/245/HistAggrFunc.java\nindex 3f39fff07a..c870995aef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/245/HistAggrFunc.java\n@@ -103,109 +103,108 @@ public class HistAggrFunc extends UpdateFunc {\n       for (int i = start; i < end; i++) {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n-        if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n-        }\n-        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n-        buf.writeBytes(tmp);\n+        if (value > 1e-10 && point < Integer.MAX_VALUE) { point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n       }\n+      byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n+      buf.writeBytes(tmp);\n     }\n+  }\n \n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      rowId = buf.readInt();\n-      int length = buf.readInt();\n-      bitsPerItem = buf.readInt();\n-      double maxAbs = buf.readDouble();\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      byte[] itemBytes = new byte[bitsPerItem / 8];\n-      slice = new float[length];\n-      for (int i = 0; i < length; i++) {\n-        buf.readBytes(itemBytes);\n-        long point = byte2long(itemBytes);\n-        double parsedValue = (double) point / (double) maxPoint * maxAbs;\n-        slice[i] = (float) parsedValue;\n-      }\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+    rowId = buf.readInt();\n+    int length = buf.readInt();\n+    bitsPerItem = buf.readInt();\n+    double maxAbs = buf.readDouble();\n+    long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+    byte[] itemBytes = new byte[bitsPerItem / 8];\n+    slice = new float[length];\n+    for (int i = 0; i < length; i++) {\n+      buf.readBytes(itemBytes);\n+      long point = byte2long(itemBytes);\n+      double parsedValue = (double) point / (double) maxPoint * maxAbs;\n+      slice[i] = (float) parsedValue;\n     }\n+  }\n \n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n-    }\n+  @Override\n+  public int bufferLen() {\n+    return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n+  }\n \n-    public static byte[] long2Byte(long value, int size, boolean isNeg) {\n-      assert Math.pow(2, 8 * size - 1) > value;\n-      byte[] rec = new byte[size];\n-      for (int i = 0; i < size; i++) {\n-        rec[size - i - 1] = (byte) value;\n-        value >>>= 8;\n-      }\n-      if (isNeg) {\n-        rec[0] |= 0x80;\n-      }\n-      return rec;\n+  public static byte[] long2Byte(long value, int size, boolean isNeg) {\n+    assert Math.pow(2, 8 * size - 1) > value;\n+    byte[] rec = new byte[size];\n+    for (int i = 0; i < size; i++) {\n+      rec[size - i - 1] = (byte) value;\n+      value >>>= 8;\n     }\n+    if (isNeg) {\n+      rec[0] |= 0x80;\n+    }\n+    return rec;\n+  }\n \n-    public static long byte2long(byte[] buffer){\n-      long rec = 0;\n-      boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n-\n-      int base = 0;\n-      for (int i = buffer.length - 1; i >= 0; i--) {\n-        long value = buffer[i] & 0x0FF;\n-        rec += value << base;\n-        base += 8;\n-      }\n-\n-      if (isNegative) {\n-        rec = -1 * rec;\n-      }\n+  public static long byte2long(byte[] buffer){\n+    long rec = 0;\n+    boolean isNegative = (buffer[0] & 0x80) == 0x80;\n+    buffer[0] &= 0x7F;  // set the negative flag to 0\n \n-      return rec;\n+    int base = 0;\n+    for (int i = buffer.length - 1; i >= 0; i--) {\n+      long value = buffer[i] & 0x0FF;\n+      rec += value << base;\n+      base += 8;\n     }\n \n-    public int getRowId() {\n-      return rowId;\n+    if (isNegative) {\n+      rec = -1 * rec;\n     }\n \n-    public float[] getSlice() {\n-      return slice;\n-    }\n+    return rec;\n   }\n \n-  @Override\n-  public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n-    if (part != null) {\n-      HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n-      ServerRow row = part.getRow(param.getRowId());\n-      if (row != null) {\n-        switch (row.getRowType()) {\n-          case T_FLOAT_DENSE:\n-            doUpdate((ServerDenseFloatRow) row, param.getSlice());\n-            break;\n-          default:\n-            throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n-        }\n+  public int getRowId() {\n+    return rowId;\n+  }\n+\n+  public float[] getSlice() {\n+    return slice;\n+  }\n+}\n+\n+@Override\n+public void partitionUpdate(PartitionUpdateParam partParam) {\n+  ServerPartition part =\n+      psContext.getMatrixStorageManager()\n+          .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+\n+  if (part != null) {\n+    HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n+    ServerRow row = part.getRow(param.getRowId());\n+    if (row != null) {\n+      switch (row.getRowType()) {\n+        case T_FLOAT_DENSE:\n+          doUpdate((ServerDenseFloatRow) row, param.getSlice());\n+          break;\n+        default:\n+          throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n       }\n     }\n   }\n+}\n \n-  private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n-    try {\n-      row.getLock().writeLock().lock();\n-      FloatBuffer data = row.getData();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n-        data.put(i, data.get(i) + slice[i]);\n-      }\n-    } finally {\n-      row.getLock().writeLock().unlock();\n+private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n+  try {\n+    row.getLock().writeLock().lock();\n+    FloatBuffer data = row.getData();\n+    int size = row.size();\n+    for (int i = 0; i < size; i++) {\n+      data.put(i, data.get(i) + slice[i]);\n     }\n+  } finally {\n+    row.getLock().writeLock().unlock();\n   }\n }\n+}\n",
            "diff_size": 109
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/245/HistAggrFunc.java\nindex 3f39fff07a..93e00bd09f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/245/HistAggrFunc.java\n@@ -18,194 +18,198 @@ import java.util.List;\n \n public class HistAggrFunc extends UpdateFunc {\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                       float[] array, int bitsPerItem) {\n-    super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n-  }\n-\n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                      DenseFloatVector vec, int bitsPerItem) {\n-    super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n-  }\n-\n-  public HistAggrFunc() {\n-    super(null);\n-  }\n-\n-\n-  public static class HistAggrParam extends UpdateParam {\n-    private final int rowId;\n-    private final float[] array;\n-    private final int bitsPerItem;\n-\n-    public HistAggrParam(int matrixId, boolean updateClock,\n-                         int rowId, float[] array, int bitsPerItem) {\n-      super(matrixId, updateClock);\n-      this.rowId = rowId;\n-      this.array = array;\n-      this.bitsPerItem = bitsPerItem;\n+    public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n+                        float[] array, int bitsPerItem) {\n+        super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n     }\n \n-    @Override\n-    public List<PartitionUpdateParam> split() {\n-      List<PartitionKey> partList = PSAgentContext.get()\n-          .getMatrixMetaManager().getPartitions(matrixId, rowId);\n-\n-      int size = partList.size();\n-      List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n-      for (PartitionKey partKey : partList) {\n-        if (rowId < partKey.getStartRow() || rowId >= partKey.getEndRow()) {\n-          throw new AngelException(\"Wrong rowId\");\n-        }\n-        partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock,\n-          rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(), bitsPerItem));\n-      }\n-      return partParams;\n-    }\n-  }\n-\n-  public static class HistAggrPartitionParam extends PartitionUpdateParam {\n-    private int rowId;\n-    private float[] array;\n-    private float[] slice;\n-    private int start;\n-    private int end;\n-    private int bitsPerItem;\n-\n-    public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-                                  int rowId, float[] array, int start, int end, int bitsPerItem) {\n-      super(matrixId, partKey, updateClock);\n-      this.rowId = rowId;\n-      this.array = array;\n-      this.start = start;\n-      this.end = end;\n-      this.bitsPerItem = bitsPerItem;\n+    public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n+                        DenseFloatVector vec, int bitsPerItem) {\n+        super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n     }\n \n-    public HistAggrPartitionParam() {\n-      super();\n+    public HistAggrFunc() {\n+        super(null);\n     }\n \n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowId);\n-      buf.writeInt(end - start);\n-      buf.writeInt(bitsPerItem);\n-      // find the max abs\n-      double maxAbs = 0.0f;\n-      for (int i = start; i < end; i++) {\n-        maxAbs = Math.max(maxAbs, (double) Math.abs(array[i]));\n-      }\n-      buf.writeDouble(maxAbs);\n-      // compress data\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      for (int i = start; i < end; i++) {\n-        double value = array[i];\n-        long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n-        if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+\n+    public static class HistAggrParam extends UpdateParam {\n+        private final int rowId;\n+        private final float[] array;\n+        private final int bitsPerItem;\n+\n+        public HistAggrParam(int matrixId, boolean updateClock,\n+                             int rowId, float[] array, int bitsPerItem) {\n+            super(matrixId, updateClock);\n+            this.rowId = rowId;\n+            this.array = array;\n+            this.bitsPerItem = bitsPerItem;\n         }\n-        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n-        buf.writeBytes(tmp);\n-      }\n-    }\n \n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      rowId = buf.readInt();\n-      int length = buf.readInt();\n-      bitsPerItem = buf.readInt();\n-      double maxAbs = buf.readDouble();\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      byte[] itemBytes = new byte[bitsPerItem / 8];\n-      slice = new float[length];\n-      for (int i = 0; i < length; i++) {\n-        buf.readBytes(itemBytes);\n-        long point = byte2long(itemBytes);\n-        double parsedValue = (double) point / (double) maxPoint * maxAbs;\n-        slice[i] = (float) parsedValue;\n-      }\n+        @Override\n+        public List<PartitionUpdateParam> split() {\n+            List<PartitionKey> partList = PSAgentContext.get()\n+                    .getMatrixMetaManager().getPartitions(matrixId, rowId);\n+\n+            int size = partList.size();\n+            List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n+            for (PartitionKey partKey : partList) {\n+                if (rowId < partKey.getStartRow() || rowId >= partKey.getEndRow()) {\n+                    throw new AngelException(\"Wrong rowId\");\n+                }\n+                partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock,\n+                        rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(),\n+                        bitsPerItem));\n+            }\n+            return partParams;\n+        }\n     }\n \n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n-    }\n+    public static class HistAggrPartitionParam extends PartitionUpdateParam {\n+        private int rowId;\n+        private float[] array;\n+        private float[] slice;\n+        private int start;\n+        private int end;\n+        private int bitsPerItem;\n+\n+        public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n+                                      int rowId, float[] array, int start, int end,\n+                                      int bitsPerItem) {\n+            super(matrixId, partKey, updateClock);\n+            this.rowId = rowId;\n+            this.array = array;\n+            this.start = start;\n+            this.end = end;\n+            this.bitsPerItem = bitsPerItem;\n+        }\n \n-    public static byte[] long2Byte(long value, int size, boolean isNeg) {\n-      assert Math.pow(2, 8 * size - 1) > value;\n-      byte[] rec = new byte[size];\n-      for (int i = 0; i < size; i++) {\n-        rec[size - i - 1] = (byte) value;\n-        value >>>= 8;\n-      }\n-      if (isNeg) {\n-        rec[0] |= 0x80;\n-      }\n-      return rec;\n-    }\n+        public HistAggrPartitionParam() {\n+            super();\n+        }\n \n-    public static long byte2long(byte[] buffer){\n-      long rec = 0;\n-      boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n+        @Override\n+        public void serialize(ByteBuf buf) {\n+            super.serialize(buf);\n+            buf.writeInt(rowId);\n+            buf.writeInt(end - start);\n+            buf.writeInt(bitsPerItem);\n+            // find the max abs\n+            double maxAbs = 0.0f;\n+            for (int i = start; i < end; i++) {\n+                maxAbs = Math.max(maxAbs, (double) Math.abs(array[i]));\n+            }\n+            buf.writeDouble(maxAbs);\n+            // compress data\n+            long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+            for (int i = start; i < end; i++) {\n+                double value = array[i];\n+                long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n+                if (value > 1e-10 && point < Integer.MAX_VALUE) {\n+                    point += (point < maxPoint && Math.random() > 0.5) ? 1 :\n+                            0;  // add Bernoulli random variable\n+                }\n+                byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n+                buf.writeBytes(tmp);\n+            }\n+        }\n \n-      int base = 0;\n-      for (int i = buffer.length - 1; i >= 0; i--) {\n-        long value = buffer[i] & 0x0FF;\n-        rec += value << base;\n-        base += 8;\n-      }\n+        @Override\n+        public void deserialize(ByteBuf buf) {\n+            super.deserialize(buf);\n+            rowId = buf.readInt();\n+            int length = buf.readInt();\n+            bitsPerItem = buf.readInt();\n+            double maxAbs = buf.readDouble();\n+            long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+            byte[] itemBytes = new byte[bitsPerItem / 8];\n+            slice = new float[length];\n+            for (int i = 0; i < length; i++) {\n+                buf.readBytes(itemBytes);\n+                long point = byte2long(itemBytes);\n+                double parsedValue = (double) point / (double) maxPoint * maxAbs;\n+                slice[i] = (float) parsedValue;\n+            }\n+        }\n \n-      if (isNegative) {\n-        rec = -1 * rec;\n-      }\n+        @Override\n+        public int bufferLen() {\n+            return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n+        }\n \n-      return rec;\n-    }\n+        public static byte[] long2Byte(long value, int size, boolean isNeg) {\n+            assert Math.pow(2, 8 * size - 1) > value;\n+            byte[] rec = new byte[size];\n+            for (int i = 0; i < size; i++) {\n+                rec[size - i - 1] = (byte) value;\n+                value >>>= 8;\n+            }\n+            if (isNeg) {\n+                rec[0] |= 0x80;\n+            }\n+            return rec;\n+        }\n \n-    public int getRowId() {\n-      return rowId;\n-    }\n+        public static long byte2long(byte[] buffer) {\n+            long rec = 0;\n+            boolean isNegative = (buffer[0] & 0x80) == 0x80;\n+            buffer[0] &= 0x7F;  // set the negative flag to 0\n+\n+            int base = 0;\n+            for (int i = buffer.length - 1; i >= 0; i--) {\n+                long value = buffer[i] & 0x0FF;\n+                rec += value << base;\n+                base += 8;\n+            }\n+\n+            if (isNegative) {\n+                rec = -1 * rec;\n+            }\n+\n+            return rec;\n+        }\n \n-    public float[] getSlice() {\n-      return slice;\n+        public int getRowId() {\n+            return rowId;\n+        }\n+\n+        public float[] getSlice() {\n+            return slice;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n-    if (part != null) {\n-      HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n-      ServerRow row = part.getRow(param.getRowId());\n-      if (row != null) {\n-        switch (row.getRowType()) {\n-          case T_FLOAT_DENSE:\n-            doUpdate((ServerDenseFloatRow) row, param.getSlice());\n-            break;\n-          default:\n-            throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n+\n+    @Override\n+    public void partitionUpdate(PartitionUpdateParam partParam) {\n+        ServerPartition part =\n+                psContext.getMatrixStorageManager()\n+                        .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+\n+        if (part != null) {\n+            HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n+            ServerRow row = part.getRow(param.getRowId());\n+            if (row != null) {\n+                switch (row.getRowType()) {\n+                    case T_FLOAT_DENSE:\n+                        doUpdate((ServerDenseFloatRow) row, param.getSlice());\n+                        break;\n+                    default:\n+                        throw new AngelException(\n+                                \"Histogram aggregation only support DenseFloatRow\");\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n-\n-  private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n-    try {\n-      row.getLock().writeLock().lock();\n-      FloatBuffer data = row.getData();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n-        data.put(i, data.get(i) + slice[i]);\n-      }\n-    } finally {\n-      row.getLock().writeLock().unlock();\n+\n+    private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n+        try {\n+            row.getLock().writeLock().lock();\n+            FloatBuffer data = row.getData();\n+            int size = row.size();\n+            for (int i = 0; i < size; i++) {\n+                data.put(i, data.get(i) + slice[i]);\n+            }\n+        } finally {\n+            row.getLock().writeLock().unlock();\n+        }\n     }\n-  }\n }\n",
            "diff_size": 249
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 101.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 107.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/245/HistAggrFunc.java\nindex 3f39fff07a..6f32f460db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/245/HistAggrFunc.java\n@@ -11,60 +11,60 @@ import com.tencent.angel.ps.impl.matrix.ServerPartition;\n import com.tencent.angel.ps.impl.matrix.ServerRow;\n import com.tencent.angel.psagent.PSAgentContext;\n import io.netty.buffer.ByteBuf;\n-\n import java.nio.FloatBuffer;\n import java.util.ArrayList;\n import java.util.List;\n \n public class HistAggrFunc extends UpdateFunc {\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                       float[] array, int bitsPerItem) {\n+    public HistAggrFunc(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n     super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n-  }\n+    }\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                      DenseFloatVector vec, int bitsPerItem) {\n+    public HistAggrFunc(int matrixId, boolean updateClock, int rowId, DenseFloatVector vec, int bitsPerItem) {\n     super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n-  }\n+    }\n \n-  public HistAggrFunc() {\n+    public HistAggrFunc() {\n     super(null);\n-  }\n-\n+    }\n \n-  public static class HistAggrParam extends UpdateParam {\n+    public static class HistAggrParam extends UpdateParam {\n     private final int rowId;\n     private final float[] array;\n     private final int bitsPerItem;\n \n-    public HistAggrParam(int matrixId, boolean updateClock,\n-                         int rowId, float[] array, int bitsPerItem) {\n-      super(matrixId, updateClock);\n-      this.rowId = rowId;\n-      this.array = array;\n-      this.bitsPerItem = bitsPerItem;\n+    public HistAggrParam(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n+        super(matrixId, updateClock);\n+        this.rowId = rowId;\n+        this.array = array;\n+        this.bitsPerItem = bitsPerItem;\n     }\n \n     @Override\n     public List<PartitionUpdateParam> split() {\n-      List<PartitionKey> partList = PSAgentContext.get()\n-          .getMatrixMetaManager().getPartitions(matrixId, rowId);\n-\n-      int size = partList.size();\n-      List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n-      for (PartitionKey partKey : partList) {\n+        List<PartitionKey> partList = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId);\n+        int size = partList.size();\n+        List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n+        for (PartitionKey partKey : partList) {\n         if (rowId < partKey.getStartRow() || rowId >= partKey.getEndRow()) {\n-          throw new AngelException(\"Wrong rowId\");\n+            throw new AngelException(\"Wrong rowId\");\n+        }\n+        partParams.add(new HistAggrPartitionParam(matrixId,\n+                                                  partKey,\n+                                                  updateClock,\n+                                                  rowId,\n+                                                  array,\n+                                                  (int) partKey.getStartCol(),\n+                                                  (int) partKey.getEndCol(),\n+                                                  bitsPerItem));\n         }\n-        partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock,\n-          rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(), bitsPerItem));\n-      }\n-      return partParams;\n+        return partParams;\n     }\n-  }\n \n-  public static class HistAggrPartitionParam extends PartitionUpdateParam {\n+    }\n+\n+    public static class HistAggrPartitionParam extends PartitionUpdateParam {\n     private int rowId;\n     private float[] array;\n     private float[] slice;\n@@ -72,140 +72,146 @@ public class HistAggrFunc extends UpdateFunc {\n     private int end;\n     private int bitsPerItem;\n \n-    public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-                                  int rowId, float[] array, int start, int end, int bitsPerItem) {\n-      super(matrixId, partKey, updateClock);\n-      this.rowId = rowId;\n-      this.array = array;\n-      this.start = start;\n-      this.end = end;\n-      this.bitsPerItem = bitsPerItem;\n+    public HistAggrPartitionParam(int matrixId,\n+                                  PartitionKey partKey,\n+                                  boolean updateClock,\n+                                  int rowId,\n+                                  float[] array,\n+                                  int start,\n+                                  int end, int bitsPerItem) {\n+        super(matrixId, partKey, updateClock);\n+        this.rowId = rowId;\n+        this.array = array;\n+        this.start = start;\n+        this.end = end;\n+        this.bitsPerItem = bitsPerItem;\n     }\n \n     public HistAggrPartitionParam() {\n-      super();\n+        super();\n     }\n \n     @Override\n     public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowId);\n-      buf.writeInt(end - start);\n-      buf.writeInt(bitsPerItem);\n+        super.serialize(buf);\n+        buf.writeInt(rowId);\n+        buf.writeInt(end - start);\n+        buf.writeInt(bitsPerItem);\n       // find the max abs\n-      double maxAbs = 0.0f;\n-      for (int i = start; i < end; i++) {\n+        double maxAbs = 0.0f;\n+        for (int i = start; i < end; i++) {\n         maxAbs = Math.max(maxAbs, (double) Math.abs(array[i]));\n-      }\n-      buf.writeDouble(maxAbs);\n+        }\n+        buf.writeDouble(maxAbs);\n       // compress data\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      for (int i = start; i < end; i++) {\n+        long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+        for (int i = start; i < end; i++) {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+            point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n         }\n+\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n-      }\n+        }\n     }\n \n     @Override\n     public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      rowId = buf.readInt();\n-      int length = buf.readInt();\n-      bitsPerItem = buf.readInt();\n-      double maxAbs = buf.readDouble();\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      byte[] itemBytes = new byte[bitsPerItem / 8];\n-      slice = new float[length];\n-      for (int i = 0; i < length; i++) {\n+        super.deserialize(buf);\n+        rowId = buf.readInt();\n+\n+        int length = buf.readInt();\n+        bitsPerItem = buf.readInt();\n+        double maxAbs = buf.readDouble();\n+        long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+        byte[] itemBytes = new byte[bitsPerItem / 8];\n+        slice = new float[length];\n+        for (int i = 0; i < length; i++) {\n         buf.readBytes(itemBytes);\n         long point = byte2long(itemBytes);\n         double parsedValue = (double) point / (double) maxPoint * maxAbs;\n         slice[i] = (float) parsedValue;\n-      }\n+        }\n     }\n \n     @Override\n     public int bufferLen() {\n-      return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n+        return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n     }\n \n     public static byte[] long2Byte(long value, int size, boolean isNeg) {\n-      assert Math.pow(2, 8 * size - 1) > value;\n-      byte[] rec = new byte[size];\n-      for (int i = 0; i < size; i++) {\n+        assert Math.pow(2, 8 * size - 1) > value;\n+        byte[] rec = new byte[size];\n+        for (int i = 0; i < size; i++) {\n         rec[size - i - 1] = (byte) value;\n         value >>>= 8;\n-      }\n-      if (isNeg) {\n+        }\n+\n+        if (isNeg) {\n         rec[0] |= 0x80;\n-      }\n-      return rec;\n+        }\n+        return rec;\n     }\n \n-    public static long byte2long(byte[] buffer){\n-      long rec = 0;\n-      boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n+    public static long byte2long(byte[] buffer) {\n+        long rec = 0;\n+        boolean isNegative = (buffer[0] & 0x80) == 0x80;\n+        buffer[0] &= 0x7F;  // set the negative flag to 0\n \n-      int base = 0;\n-      for (int i = buffer.length - 1; i >= 0; i--) {\n+        int base = 0;\n+        for (int i = buffer.length - 1; i >= 0; i--) {\n         long value = buffer[i] & 0x0FF;\n         rec += value << base;\n         base += 8;\n-      }\n+        }\n \n-      if (isNegative) {\n+        if (isNegative) {\n         rec = -1 * rec;\n-      }\n-\n-      return rec;\n+        }\n+        return rec;\n     }\n \n     public int getRowId() {\n-      return rowId;\n+        return rowId;\n     }\n \n     public float[] getSlice() {\n-      return slice;\n+        return slice;\n     }\n-  }\n \n-  @Override\n-  public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+    }\n \n+    @Override\n+    public void partitionUpdate(PartitionUpdateParam partParam) {\n+    ServerPartition part = psContext.getMatrixStorageManager().getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n     if (part != null) {\n-      HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n-      ServerRow row = part.getRow(param.getRowId());\n-      if (row != null) {\n+        HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n+        ServerRow row = part.getRow(param.getRowId());\n+        if (row != null) {\n         switch (row.getRowType()) {\n-          case T_FLOAT_DENSE:\n+                             case T_FLOAT_DENSE:\n             doUpdate((ServerDenseFloatRow) row, param.getSlice());\n             break;\n-          default:\n+                             default:\n             throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n         }\n-      }\n+        }\n+    }\n     }\n-  }\n \n-  private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n+    private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n     try {\n-      row.getLock().writeLock().lock();\n-      FloatBuffer data = row.getData();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n+        row.getLock().writeLock().lock();\n+        FloatBuffer data = row.getData();\n+        int size = row.size();\n+        for (int i = 0; i < size; i++) {\n         data.put(i, data.get(i) + slice[i]);\n-      }\n+        }\n     } finally {\n       row.getLock().writeLock().unlock();\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 127
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "213",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/245/HistAggrFunc.java\nindex 3f39fff07a..f2c1a41ace 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/245/HistAggrFunc.java\n@@ -104,108 +104,110 @@ public class HistAggrFunc extends UpdateFunc {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n-        }\n-        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n-        buf.writeBytes(tmp);\n-      }\n-    }\n-\n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      rowId = buf.readInt();\n-      int length = buf.readInt();\n-      bitsPerItem = buf.readInt();\n-      double maxAbs = buf.readDouble();\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      byte[] itemBytes = new byte[bitsPerItem / 8];\n-      slice = new float[length];\n-      for (int i = 0; i < length; i++) {\n-        buf.readBytes(itemBytes);\n-        long point = byte2long(itemBytes);\n-        double parsedValue = (double) point / (double) maxPoint * maxAbs;\n-        slice[i] = (float) parsedValue;\n-      }\n-    }\n-\n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n-    }\n-\n-    public static byte[] long2Byte(long value, int size, boolean isNeg) {\n-      assert Math.pow(2, 8 * size - 1) > value;\n-      byte[] rec = new byte[size];\n-      for (int i = 0; i < size; i++) {\n-        rec[size - i - 1] = (byte) value;\n-        value >>>= 8;\n-      }\n-      if (isNeg) {\n-        rec[0] |= 0x80;\n-      }\n-      return rec;\n-    }\n-\n-    public static long byte2long(byte[] buffer){\n-      long rec = 0;\n-      boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n-\n-      int base = 0;\n-      for (int i = buffer.length - 1; i >= 0; i--) {\n-        long value = buffer[i] & 0x0FF;\n-        rec += value << base;\n-        base += 8;\n-      }\n-\n-      if (isNegative) {\n-        rec = -1 * rec;\n-      }\n-\n-      return rec;\n-    }\n-\n-    public int getRowId() {\n-      return rowId;\n-    }\n-\n-    public float[] getSlice() {\n-      return slice;\n-    }\n-  }\n-\n-  @Override\n-  public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n-    if (part != null) {\n-      HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n-      ServerRow row = part.getRow(param.getRowId());\n-      if (row != null) {\n-        switch (row.getRowType()) {\n-          case T_FLOAT_DENSE:\n-            doUpdate((ServerDenseFloatRow) row, param.getSlice());\n-            break;\n-          default:\n-            throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n-        }\n-      }\n-    }\n-  }\n-\n-  private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n-    try {\n-      row.getLock().writeLock().lock();\n-      FloatBuffer data = row.getData();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n-        data.put(i, data.get(i) + slice[i]);\n-      }\n-    } finally {\n-      row.getLock().writeLock().unlock();\n-    }\n-  }\n-}\n+          point +=( point < maxPoint&& Math . random()>0.5)?1:\n+          0 ;// add Bernoulli random variable\n+         }\n+         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n+         buf.writeBytes(tmp);\n+       }\n+     }\n+\n+     @Override\n+     public void deserialize(ByteBuf buf) {\n+       super.deserialize(buf);\n+       rowId = buf.readInt();\n+       int length = buf.readInt();\n+       bitsPerItem = buf.readInt();\n+       double maxAbs = buf.readDouble();\n+       long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+       byte[] itemBytes = new byte[bitsPerItem / 8];\n+       slice = new float[length];\n+       for (int i = 0; i < length; i++) {\n+         buf.readBytes(itemBytes);\n+         long point = byte2long(itemBytes);\n+         double parsedValue = (double) point / (double) maxPoint * maxAbs;\n+         slice[i] = (float) parsedValue;\n+       }\n+     }\n+\n+     @Override\n+     public int bufferLen() {\n+       return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n+     }\n+\n+     public static byte[] long2Byte(long value, int size, boolean isNeg) {\n+       assert Math.pow(2, 8 * size - 1) > value;\n+       byte[] rec = new byte[size];\n+       for (int i = 0; i < size; i++) {\n+         rec[size - i - 1] = (byte) value;\n+         value >>>= 8;\n+       }\n+       if (isNeg) {\n+         rec[0] |= 0x80;\n+       }\n+       return rec;\n+     }\n+\n+     public static long byte2long(byte[] buffer){\n+       long rec = 0;\n+       boolean isNegative = (buffer[0] & 0x80) == 0x80;\n+       buffer[0] &= 0x7F;  // set the negative flag to 0\n+\n+       int base = 0;\n+       for (int i = buffer.length - 1; i >= 0; i--) {\n+         long value = buffer[i] & 0x0FF;\n+         rec += value << base;\n+         base += 8;\n+       }\n+\n+       if (isNegative) {\n+         rec = -1 * rec;\n+       }\n+\n+       return rec;\n+     }\n+\n+     public int getRowId() {\n+       return rowId;\n+     }\n+\n+     public float[] getSlice() {\n+       return slice;\n+     }\n+   }\n+\n+   @Override\n+   public void partitionUpdate(PartitionUpdateParam partParam) {\n+     ServerPartition part =\n+         psContext.getMatrixStorageManager()\n+             .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+\n+     if (part != null) {\n+       HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n+       ServerRow row = part.getRow(param.getRowId());\n+       if (row != null) {\n+         switch (row.getRowType()) {\n+           case T_FLOAT_DENSE:\n+             doUpdate((ServerDenseFloatRow) row, param.getSlice());\n+             break;\n+           default:\n+             throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n+         }\n+       }\n+     }\n+   }\n+\n+   private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n+     try {\n+       row.getLock().writeLock().lock();\n+       FloatBuffer data = row.getData();\n+       int size = row.size();\n+       for (int i = 0; i < size; i++) {\n+         data.put(i, data.get(i) + slice[i]);\n+       }\n+     } finally {\n+       row.getLock().writeLock().unlock();\n+     }\n+   }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 107
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/245/HistAggrFunc.java\nindex 3f39fff07a..c870995aef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/245/HistAggrFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/245/HistAggrFunc.java\n@@ -103,109 +103,108 @@ public class HistAggrFunc extends UpdateFunc {\n       for (int i = start; i < end; i++) {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n-        if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n-        }\n-        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n-        buf.writeBytes(tmp);\n+        if (value > 1e-10 && point < Integer.MAX_VALUE) { point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n       }\n+      byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n+      buf.writeBytes(tmp);\n     }\n+  }\n \n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      rowId = buf.readInt();\n-      int length = buf.readInt();\n-      bitsPerItem = buf.readInt();\n-      double maxAbs = buf.readDouble();\n-      long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n-      byte[] itemBytes = new byte[bitsPerItem / 8];\n-      slice = new float[length];\n-      for (int i = 0; i < length; i++) {\n-        buf.readBytes(itemBytes);\n-        long point = byte2long(itemBytes);\n-        double parsedValue = (double) point / (double) maxPoint * maxAbs;\n-        slice[i] = (float) parsedValue;\n-      }\n+  @Override\n+  public void deserialize(ByteBuf buf) {\n+    super.deserialize(buf);\n+    rowId = buf.readInt();\n+    int length = buf.readInt();\n+    bitsPerItem = buf.readInt();\n+    double maxAbs = buf.readDouble();\n+    long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n+    byte[] itemBytes = new byte[bitsPerItem / 8];\n+    slice = new float[length];\n+    for (int i = 0; i < length; i++) {\n+      buf.readBytes(itemBytes);\n+      long point = byte2long(itemBytes);\n+      double parsedValue = (double) point / (double) maxPoint * maxAbs;\n+      slice[i] = (float) parsedValue;\n     }\n+  }\n \n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n-    }\n+  @Override\n+  public int bufferLen() {\n+    return super.bufferLen() + 20 + (end - start) * bitsPerItem / 8;\n+  }\n \n-    public static byte[] long2Byte(long value, int size, boolean isNeg) {\n-      assert Math.pow(2, 8 * size - 1) > value;\n-      byte[] rec = new byte[size];\n-      for (int i = 0; i < size; i++) {\n-        rec[size - i - 1] = (byte) value;\n-        value >>>= 8;\n-      }\n-      if (isNeg) {\n-        rec[0] |= 0x80;\n-      }\n-      return rec;\n+  public static byte[] long2Byte(long value, int size, boolean isNeg) {\n+    assert Math.pow(2, 8 * size - 1) > value;\n+    byte[] rec = new byte[size];\n+    for (int i = 0; i < size; i++) {\n+      rec[size - i - 1] = (byte) value;\n+      value >>>= 8;\n     }\n+    if (isNeg) {\n+      rec[0] |= 0x80;\n+    }\n+    return rec;\n+  }\n \n-    public static long byte2long(byte[] buffer){\n-      long rec = 0;\n-      boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n-\n-      int base = 0;\n-      for (int i = buffer.length - 1; i >= 0; i--) {\n-        long value = buffer[i] & 0x0FF;\n-        rec += value << base;\n-        base += 8;\n-      }\n-\n-      if (isNegative) {\n-        rec = -1 * rec;\n-      }\n+  public static long byte2long(byte[] buffer){\n+    long rec = 0;\n+    boolean isNegative = (buffer[0] & 0x80) == 0x80;\n+    buffer[0] &= 0x7F;  // set the negative flag to 0\n \n-      return rec;\n+    int base = 0;\n+    for (int i = buffer.length - 1; i >= 0; i--) {\n+      long value = buffer[i] & 0x0FF;\n+      rec += value << base;\n+      base += 8;\n     }\n \n-    public int getRowId() {\n-      return rowId;\n+    if (isNegative) {\n+      rec = -1 * rec;\n     }\n \n-    public float[] getSlice() {\n-      return slice;\n-    }\n+    return rec;\n   }\n \n-  @Override\n-  public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n-    if (part != null) {\n-      HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n-      ServerRow row = part.getRow(param.getRowId());\n-      if (row != null) {\n-        switch (row.getRowType()) {\n-          case T_FLOAT_DENSE:\n-            doUpdate((ServerDenseFloatRow) row, param.getSlice());\n-            break;\n-          default:\n-            throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n-        }\n+  public int getRowId() {\n+    return rowId;\n+  }\n+\n+  public float[] getSlice() {\n+    return slice;\n+  }\n+}\n+\n+@Override\n+public void partitionUpdate(PartitionUpdateParam partParam) {\n+  ServerPartition part =\n+      psContext.getMatrixStorageManager()\n+          .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+\n+  if (part != null) {\n+    HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n+    ServerRow row = part.getRow(param.getRowId());\n+    if (row != null) {\n+      switch (row.getRowType()) {\n+        case T_FLOAT_DENSE:\n+          doUpdate((ServerDenseFloatRow) row, param.getSlice());\n+          break;\n+        default:\n+          throw new AngelException(\"Histogram aggregation only support DenseFloatRow\");\n       }\n     }\n   }\n+}\n \n-  private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n-    try {\n-      row.getLock().writeLock().lock();\n-      FloatBuffer data = row.getData();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n-        data.put(i, data.get(i) + slice[i]);\n-      }\n-    } finally {\n-      row.getLock().writeLock().unlock();\n+private void doUpdate(ServerDenseFloatRow row, float[] slice) {\n+  try {\n+    row.getLock().writeLock().lock();\n+    FloatBuffer data = row.getData();\n+    int size = row.size();\n+    for (int i = 0; i < size; i++) {\n+      data.put(i, data.get(i) + slice[i]);\n     }\n+  } finally {\n+    row.getLock().writeLock().unlock();\n   }\n }\n+}\n",
            "diff_size": 109
        }
    ]
}