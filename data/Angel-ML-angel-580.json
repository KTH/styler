{
    "error_id": "580",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/580/PartitionHasher.java\nindex 0f46946d9a..172ddad18e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/580/PartitionHasher.java\n@@ -14,54 +14,55 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec;\n \n public class PartitionHasher {\n-  public static int getHash(long e, int mod) {\n-    int rawMod = (int) (e % mod);\n-    if (rawMod < 0) {\n-      return rawMod + mod;\n-    } else {\n-      return rawMod;\n+    public static int getHash(long e, int mod) {\n+        int rawMod = (int) (e % mod);\n+        if (rawMod < 0) {\n+            return rawMod + mod;\n+        } else {\n+            return rawMod;\n+        }\n     }\n-  }\n \n-  public static int getHash(long e1, long e2, int mod) {\n-    int rawMod;\n-    if (e1 < e2) {\n-      rawMod = (int) (((e1 >> 1) + e2) % mod);\n-    } else {\n-      rawMod = (int) (((e2 >> 1) + e1) % mod);\n-    }\n+    public static int getHash(long e1, long e2, int mod) {\n+        int rawMod;\n+        if (e1 < e2) {\n+            rawMod = (int) (((e1 >> 1) + e2) % mod);\n+        } else {\n+            rawMod = (int) (((e2 >> 1) + e1) % mod);\n+        }\n \n-    if (rawMod < 0) {\n-      return rawMod + mod;\n-    } else {\n-      return rawMod;\n+        if (rawMod < 0) {\n+            return rawMod + mod;\n+        } else {\n+            return rawMod;\n+        }\n     }\n-  }\n \n-  public static int getHash(int e, int mod) {\n-    int rawMod = e % mod;\n-    if (rawMod < 0) {\n-      return rawMod + mod;\n-    } else {\n-      return rawMod;\n+    public static int getHash(int e, int mod) {\n+        int rawMod = e % mod;\n+        if (rawMod < 0) {\n+            return rawMod + mod;\n+        } else {\n+            return rawMod;\n+        }\n     }\n-  }\n \n-  public static int getHash(int e1, int e2, int mod) {\n-    int rawMod;\n-    if (e1 < e2) {\n-      rawMod = (int) ((((long) e1 << 32) + e2) % mod);\n-    } else {\n-      rawMod = (int) ((((long) e2 << 32) + e1) % mod);\n-    }\n+    public static int getHash(int e1, int e2, int mod) {\n+        int rawMod;\n+        if (e1 < e2) {\n+            rawMod = (int) ((((long) e1 << 32) + e2) % mod);\n+        } else {\n+            rawMod = (int) ((((long) e2 << 32) + e1) % mod);\n+        }\n \n-    if (rawMod < 0) {\n-      return rawMod + mod;\n-    } else {\n-      return rawMod;\n+        if (rawMod < 0) {\n+            return rawMod + mod;\n+        } else {\n+            return rawMod;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/580/PartitionHasher.java\nindex 0f46946d9a..70c068655a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/580/PartitionHasher.java\n@@ -64,4 +64,4 @@ public class PartitionHasher {\n       return rawMod;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/580/PartitionHasher.java\nindex 0f46946d9a..5dc634ea6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/580/PartitionHasher.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/580/PartitionHasher.java\n@@ -16,52 +16,55 @@\n  */\n package com.tencent.angel.graph.client.node2vec;\n \n+\n public class PartitionHasher {\n-  public static int getHash(long e, int mod) {\n+\n+    public static int getHash(long e, int mod) {\n     int rawMod = (int) (e % mod);\n     if (rawMod < 0) {\n-      return rawMod + mod;\n+        return rawMod + mod;\n     } else {\n       return rawMod;\n     }\n-  }\n+    }\n \n-  public static int getHash(long e1, long e2, int mod) {\n+    public static int getHash(long e1, long e2, int mod) {\n     int rawMod;\n     if (e1 < e2) {\n-      rawMod = (int) (((e1 >> 1) + e2) % mod);\n+        rawMod = (int) (((e1 >> 1) + e2) % mod);\n     } else {\n       rawMod = (int) (((e2 >> 1) + e1) % mod);\n     }\n \n     if (rawMod < 0) {\n-      return rawMod + mod;\n+        return rawMod + mod;\n     } else {\n       return rawMod;\n     }\n-  }\n+    }\n \n-  public static int getHash(int e, int mod) {\n+    public static int getHash(int e, int mod) {\n     int rawMod = e % mod;\n     if (rawMod < 0) {\n-      return rawMod + mod;\n+        return rawMod + mod;\n     } else {\n       return rawMod;\n     }\n-  }\n+    }\n \n-  public static int getHash(int e1, int e2, int mod) {\n+    public static int getHash(int e1, int e2, int mod) {\n     int rawMod;\n     if (e1 < e2) {\n-      rawMod = (int) ((((long) e1 << 32) + e2) % mod);\n+        rawMod = (int) ((((long) e1 << 32) + e2) % mod);\n     } else {\n       rawMod = (int) ((((long) e2 << 32) + e1) % mod);\n     }\n \n     if (rawMod < 0) {\n-      return rawMod + mod;\n+        return rawMod + mod;\n     } else {\n       return rawMod;\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}