{
    "error_id": "206",
    "information": {
        "errors": [
            {
                "line": "84",
                "column": "13",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return (DataType<?>) obj;\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n            if(exceptionHandler != null) {\n                exceptionHandler.uncaughtException(Thread.currentThread(), e);\n            }\n            throw new RuntimeException(e);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/206/MetaType.java\nindex a2530e8a51..0a8dd1252f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/206/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/206/MetaType.java\nindex a2530e8a51..88e3c3ae47 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/206/MetaType.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.mvstore.type;\n \n import org.h2.engine.Constants;\n@@ -17,79 +18,79 @@ import java.util.Map;\n  * Class DBMetaType is a type for values in the type registry map.\n  *\n  * @param <D> type of opaque parameter passed as an operational context to Factory.create()\n- *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public final class MetaType<D> extends BasicDataType<DataType<?>>\n-{\n-    private final D database;\n-    private final Thread.UncaughtExceptionHandler exceptionHandler;\n-    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap<>();\n+public final class MetaType<D> extends BasicDataType<DataType<?>> {\n+  private final D database;\n+  private final Thread.UncaughtExceptionHandler exceptionHandler;\n+  private final Map<String, StatefulDataType.Factory<D>> cache =\n+      new HashMap<>();\n \n-    public MetaType(D database, Thread.UncaughtExceptionHandler exceptionHandler) {\n-        this.database = database;\n-        this.exceptionHandler = exceptionHandler;\n-    }\n+  public MetaType(D database,\n+                  Thread.UncaughtExceptionHandler exceptionHandler) {\n+    this.database = database;\n+    this.exceptionHandler = exceptionHandler;\n+  }\n \n-    @Override\n-    public int compare(DataType<?> a, DataType<?> b) {\n-        throw new UnsupportedOperationException();\n-    }\n+  @Override\n+  public int compare(DataType<?> a, DataType<?> b) {\n+    throw new UnsupportedOperationException();\n+  }\n \n-    @Override\n-    public int getMemory(DataType<?> obj) {\n-        return Constants.MEMORY_OBJECT;\n-    }\n+  @Override\n+  public int getMemory(DataType<?> obj) {\n+    return Constants.MEMORY_OBJECT;\n+  }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public void write(WriteBuffer buff, DataType<?> obj) {\n-        Class<?> clazz = obj.getClass();\n-        StatefulDataType<D> statefulDataType = null;\n-        if (obj instanceof StatefulDataType) {\n-            statefulDataType = (StatefulDataType<D>) obj;\n-            StatefulDataType.Factory<D> factory = statefulDataType.getFactory();\n-            if (factory != null) {\n-                clazz = factory.getClass();\n-            }\n-        }\n-        String className = clazz.getName();\n-        int len = className.length();\n-        buff.putVarInt(len)\n-            .putStringData(className, len);\n-        if (statefulDataType != null) {\n-            statefulDataType.save(buff, this);\n-        }\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public void write(WriteBuffer buff, DataType<?> obj) {\n+    Class<?> clazz = obj.getClass();\n+    StatefulDataType<D> statefulDataType = null;\n+    if (obj instanceof StatefulDataType) {\n+      statefulDataType = (StatefulDataType<D>) obj;\n+      StatefulDataType.Factory<D> factory = statefulDataType.getFactory();\n+      if (factory != null) {\n+        clazz = factory.getClass();\n+      }\n     }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public DataType<?> read(ByteBuffer buff) {\n-        int len = DataUtils.readVarInt(buff);\n-        String className = DataUtils.readString(buff, len);\n-        try {\n-            StatefulDataType.Factory<D> factory = cache.get(className);\n-            if (factory != null) {\n-                return factory.create(buff, this, database);\n-            }\n-            Class<?> clazz = Class.forName(className);\n-            Object obj = clazz.newInstance();\n-            if (obj instanceof StatefulDataType.Factory) {\n-                factory = (StatefulDataType.Factory<D>) obj;\n-                cache.put(className, factory);\n-                return factory.create(buff, this, database);\n-            }\n-            return (DataType<?>) obj;\n-        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n-                exceptionHandler.uncaughtException(Thread.currentThread(), e);\n-            }\n-            throw new RuntimeException(e);\n-        }\n+    String className = clazz.getName();\n+    int len = className.length();\n+    buff.putVarInt(len)\n+        .putStringData(className, len);\n+    if (statefulDataType != null) {\n+      statefulDataType.save(buff, this);\n     }\n+  }\n \n-    @Override\n-    public DataType<?>[] createStorage(int size) {\n-        return new DataType[size];\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public DataType<?> read(ByteBuffer buff) {\n+    int len = DataUtils.readVarInt(buff);\n+    String className = DataUtils.readString(buff, len);\n+    try {\n+      StatefulDataType.Factory<D> factory = cache.get(className);\n+      if (factory != null) {\n+        return factory.create(buff, this, database);\n+      }\n+      Class<?> clazz = Class.forName(className);\n+      Object obj = clazz.newInstance();\n+      if (obj instanceof StatefulDataType.Factory) {\n+        factory = (StatefulDataType.Factory<D>) obj;\n+        cache.put(className, factory);\n+        return factory.create(buff, this, database);\n+      }\n+      return (DataType<?>) obj;\n+    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n+      if (exceptionHandler != null) {\n+        exceptionHandler.uncaughtException(Thread.currentThread(), e);\n+      }\n+      throw new RuntimeException(e);\n     }\n+  }\n+\n+  @Override\n+  public DataType<?>[] createStorage(int size) {\n+    return new DataType[size];\n+  }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/206/MetaType.java\nindex a2530e8a51..1a1d179e72 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/206/MetaType.java\n@@ -20,8 +20,7 @@ import java.util.Map;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public final class MetaType<D> extends BasicDataType<DataType<?>>\n-{\n+public final class MetaType<D> extends BasicDataType<DataType<?>> {\n     private final D database;\n     private final Thread.UncaughtExceptionHandler exceptionHandler;\n     private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap<>();\n@@ -55,8 +54,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n         }\n         String className = clazz.getName();\n         int len = className.length();\n-        buff.putVarInt(len)\n-            .putStringData(className, len);\n+        buff.putVarInt(len).putStringData(className, len);\n         if (statefulDataType != null) {\n             statefulDataType.save(buff, this);\n         }\n@@ -81,7 +79,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n@@ -92,4 +90,4 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n     public DataType<?>[] createStorage(int size) {\n         return new DataType[size];\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "column": "41",
                    "severity": "warning",
                    "message": "'|' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "warning",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/206/MetaType.java\nindex a2530e8a51..0f39b6930d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/codebuff/206/MetaType.java\n@@ -8,7 +8,6 @@ package org.h2.mvstore.type;\n import org.h2.engine.Constants;\n import org.h2.mvstore.DataUtils;\n import org.h2.mvstore.WriteBuffer;\n-\n import java.nio.ByteBuffer;\n import java.util.HashMap;\n import java.util.Map;\n@@ -20,11 +19,13 @@ import java.util.Map;\n  *\n  * @author <a href='mailto:andrei.tokar@gmail.com'>Andrei Tokar</a>\n  */\n-public final class MetaType<D> extends BasicDataType<DataType<?>>\n-{\n+\n+\n+public final class MetaType<D> extends BasicDataType<DataType<?>> {\n+\n     private final D database;\n     private final Thread.UncaughtExceptionHandler exceptionHandler;\n-    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap<>();\n+    private final Map<String, StatefulDataType.Factory<D>> cache = new HashMap< >();\n \n     public MetaType(D database, Thread.UncaughtExceptionHandler exceptionHandler) {\n         this.database = database;\n@@ -55,8 +56,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n         }\n         String className = clazz.getName();\n         int len = className.length();\n-        buff.putVarInt(len)\n-            .putStringData(className, len);\n+        buff.putVarInt(len).putStringData(className, len);\n         if (statefulDataType != null) {\n             statefulDataType.save(buff, this);\n         }\n@@ -80,8 +80,8 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n                 return factory.create(buff, this, database);\n             }\n             return (DataType<?>) obj;\n-        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+        } catch (ClassNotFoundException |InstantiationException| IllegalAccessException e) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n@@ -92,4 +92,5 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n     public DataType<?>[] createStorage(int size) {\n         return new DataType[size];\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/206/MetaType.java\nindex a2530e8a51..0a8dd1252f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/206/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/206/MetaType.java\nindex a2530e8a51..0a8dd1252f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/206/MetaType.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/206/MetaType.java\n@@ -81,7 +81,7 @@ public final class MetaType<D> extends BasicDataType<DataType<?>>\n             }\n             return (DataType<?>) obj;\n         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException e) {\n-            if(exceptionHandler != null) {\n+            if (exceptionHandler != null) {\n                 exceptionHandler.uncaughtException(Thread.currentThread(), e);\n             }\n             throw new RuntimeException(e);\n",
            "diff_size": 1
        }
    ]
}