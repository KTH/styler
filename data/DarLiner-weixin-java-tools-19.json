{
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "23",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Created by ecoolper on 2017/5/5.\n */\npublic class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n  public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n    super(requestHttp);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler/19/MaterialDeleteApacheHttpRequestExecutor.java\nindex b64093252d..c778d7911f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler/19/MaterialDeleteApacheHttpRequestExecutor.java\n@@ -20,32 +20,35 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n-  public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n-    super(requestHttp);\n-  }\n+     public\n \n-  @Override\n-  public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n-    HttpPost httpPost = new HttpPost(uri);\n-    if (requestHttp.getRequestHttpProxy() != null) {\n-      RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n-      httpPost.setConfig(config);\n-    }\n+class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n+   public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n+     super(requestHttp);\n+   }\n \n-    Map<String, String> params = new HashMap<>();\n-    params.put(\"media_id\", materialId);\n-    httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n-    try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n-      String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n-      WxError error = WxError.fromJson(responseContent, WxType.MP);\n-      if (error.getErrorCode() != 0) {\n-        throw new WxErrorException(error);\n-      } else {\n-        return true;\n-      }\n-    } finally {\n-      httpPost.releaseConnection();\n-    }\n-  }\n-}\n+   @Override\n+   public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n+     HttpPost httpPost = new HttpPost(uri);\n+     if (requestHttp.getRequestHttpProxy() != null) {\n+       RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n+       httpPost.setConfig(config);\n+     }\n+\n+     Map<String, String> params = new HashMap<>();\n+     params.put(\"media_id\", materialId);\n+     httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n+     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n+       String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n+       WxError error = WxError.fromJson(responseContent, WxType.MP);\n+       if (error.getErrorCode() != 0) {\n+         throw new WxErrorException(error);\n+       } else {\n+         return true;\n+       }\n+     } finally {\n+       httpPost.releaseConnection();\n+     }\n+   }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/19/MaterialDeleteApacheHttpRequestExecutor.java\nindex b64093252d..8dfd0fa4ae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/intellij/19/MaterialDeleteApacheHttpRequestExecutor.java\n@@ -20,7 +20,8 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n+public class MaterialDeleteApacheHttpRequestExecutor\n+    extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n   public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n     super(requestHttp);\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/19/MaterialDeleteApacheHttpRequestExecutor.java\nindex b64093252d..17bc925117 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/naturalize/19/MaterialDeleteApacheHttpRequestExecutor.java\n@@ -48,4 +48,4 @@ public class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteReque\n       httpPost.releaseConnection();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/19/MaterialDeleteApacheHttpRequestExecutor.java\nindex b64093252d..bdd57c6834 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/codebuff/19/MaterialDeleteApacheHttpRequestExecutor.java\n@@ -12,7 +12,6 @@ import org.apache.http.client.methods.CloseableHttpResponse;\n import org.apache.http.client.methods.HttpPost;\n import org.apache.http.entity.StringEntity;\n import org.apache.http.impl.client.CloseableHttpClient;\n-\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n@@ -20,32 +19,35 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n+\n+\n public class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n-  public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n+\n+    public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n     super(requestHttp);\n-  }\n+    }\n \n-  @Override\n-  public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n+    @Override\n+    public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n     HttpPost httpPost = new HttpPost(uri);\n     if (requestHttp.getRequestHttpProxy() != null) {\n-      RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n-      httpPost.setConfig(config);\n+        RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n+        httpPost.setConfig(config);\n     }\n \n     Map<String, String> params = new HashMap<>();\n     params.put(\"media_id\", materialId);\n     httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n-      String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n-      WxError error = WxError.fromJson(responseContent, WxType.MP);\n-      if (error.getErrorCode() != 0) {\n+        String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n+        WxError error = WxError.fromJson(responseContent, WxType.MP);\n+        if (error.getErrorCode() != 0) {\n         throw new WxErrorException(error);\n-      } else {\n-        return true;\n-      }\n+        } else {\n+          return true;\n+        }\n     } finally {\n       httpPost.releaseConnection();\n     }\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler_random/19/MaterialDeleteApacheHttpRequestExecutor.java\nindex b64093252d..c778d7911f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/errored/1/19/MaterialDeleteApacheHttpRequestExecutor.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/DarLiner-weixin-java-tools/styler_random/19/MaterialDeleteApacheHttpRequestExecutor.java\n@@ -20,32 +20,35 @@ import java.util.Map;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n-  public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n-    super(requestHttp);\n-  }\n+     public\n \n-  @Override\n-  public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n-    HttpPost httpPost = new HttpPost(uri);\n-    if (requestHttp.getRequestHttpProxy() != null) {\n-      RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n-      httpPost.setConfig(config);\n-    }\n+class MaterialDeleteApacheHttpRequestExecutor extends MaterialDeleteRequestExecutor<CloseableHttpClient, HttpHost> {\n+   public MaterialDeleteApacheHttpRequestExecutor(RequestHttp requestHttp) {\n+     super(requestHttp);\n+   }\n \n-    Map<String, String> params = new HashMap<>();\n-    params.put(\"media_id\", materialId);\n-    httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n-    try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n-      String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n-      WxError error = WxError.fromJson(responseContent, WxType.MP);\n-      if (error.getErrorCode() != 0) {\n-        throw new WxErrorException(error);\n-      } else {\n-        return true;\n-      }\n-    } finally {\n-      httpPost.releaseConnection();\n-    }\n-  }\n-}\n+   @Override\n+   public Boolean execute(String uri, String materialId) throws WxErrorException, IOException {\n+     HttpPost httpPost = new HttpPost(uri);\n+     if (requestHttp.getRequestHttpProxy() != null) {\n+       RequestConfig config = RequestConfig.custom().setProxy(requestHttp.getRequestHttpProxy()).build();\n+       httpPost.setConfig(config);\n+     }\n+\n+     Map<String, String> params = new HashMap<>();\n+     params.put(\"media_id\", materialId);\n+     httpPost.setEntity(new StringEntity(WxGsonBuilder.create().toJson(params)));\n+     try (CloseableHttpResponse response = requestHttp.getRequestHttpClient().execute(httpPost)) {\n+       String responseContent = Utf8ResponseHandler.INSTANCE.handleResponse(response);\n+       WxError error = WxError.fromJson(responseContent, WxType.MP);\n+       if (error.getErrorCode() != 0) {\n+         throw new WxErrorException(error);\n+       } else {\n+         return true;\n+       }\n+     } finally {\n+       httpPost.releaseConnection();\n+     }\n+   }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}