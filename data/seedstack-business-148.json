{
    "error_id": "148",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal;\n\nimport static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\nimport static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "203",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "208",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "211",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/148/BusinessSpecifications.java\nindex 72202b473c..1723d1c0dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/148/BusinessSpecifications.java\n@@ -5,206 +5,208 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal;\n-\n-import static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n-import static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsAnnotation;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsAssignableFrom;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n-import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n-\n-import java.lang.reflect.Modifier;\n-import org.kametic.specifications.Specification;\n-import org.seedstack.business.Service;\n-import org.seedstack.business.assembler.Assembler;\n-import org.seedstack.business.assembler.DtoOf;\n-import org.seedstack.business.data.DataExporter;\n-import org.seedstack.business.data.DataImporter;\n-import org.seedstack.business.data.DataSet;\n-import org.seedstack.business.domain.DomainAggregateRoot;\n-import org.seedstack.business.domain.DomainEntity;\n-import org.seedstack.business.domain.DomainEvent;\n-import org.seedstack.business.domain.DomainEventHandler;\n-import org.seedstack.business.domain.DomainFactory;\n-import org.seedstack.business.domain.DomainPolicy;\n-import org.seedstack.business.domain.DomainRepository;\n-import org.seedstack.business.domain.DomainValueObject;\n-import org.seedstack.business.domain.IdentityGenerator;\n-import org.seedstack.business.domain.Producible;\n-import org.seedstack.business.spi.DtoInfoResolver;\n-import org.seedstack.business.spi.GenericImplementation;\n-import org.seedstack.business.spi.SpecificationConverter;\n-import org.seedstack.business.spi.SpecificationTranslator;\n-import org.seedstack.seed.core.internal.utils.SpecificationBuilder;\n-import org.seedstack.shed.reflect.AnnotationPredicates;\n-\n-/**\n+\n+package org .seedstack.business.internal;import\n+\n+static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n+ import static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsAnnotation;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsAssignableFrom;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n+\n+ import java.lang.reflect.Modifier;\n+ import org.kametic.specifications.Specification;\n+ import org.seedstack.business.Service;\n+ import org.seedstack.business.assembler.Assembler;\n+ import org.seedstack.business.assembler.DtoOf;\n+ import org.seedstack.business.data.DataExporter;\n+ import org.seedstack.business.data.DataImporter;\n+ import org.seedstack.business.data.DataSet;\n+ import org.seedstack.business.domain.DomainAggregateRoot;\n+ import org.seedstack.business.domain.DomainEntity;\n+ import org.seedstack.business.domain.DomainEvent;\n+ import org.seedstack.business.domain.DomainEventHandler;\n+ import org.seedstack.business.domain.DomainFactory;\n+ import org.seedstack.business.domain.DomainPolicy;\n+ import org.seedstack.business.domain.DomainRepository;\n+ import org.seedstack.business.domain.DomainValueObject;\n+ import org.seedstack.business.domain.IdentityGenerator;\n+ import org.seedstack.business.domain.Producible;\n+ import org.seedstack.business.spi.DtoInfoResolver;\n+ import org.seedstack.business.spi.GenericImplementation;\n+ import org.seedstack.business.spi.SpecificationConverter;\n+ import org.seedstack.business.spi.SpecificationTranslator;\n+ import org.seedstack.seed.core.internal.utils.SpecificationBuilder;\n+ import org.seedstack.shed.reflect.AnnotationPredicates;\n+\n+ /**\n  * This class provides all the specifications use by the business plugins.\n  */\n-public final class BusinessSpecifications {\n+ public final class BusinessSpecifications {\n \n-    /**\n+     /**\n      * The aggregate root specification.\n      */\n-    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n-                    classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n+                     classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain entities specification.\n      */\n-    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain value objects specification.\n      */\n-    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain repository specification.\n      */\n-    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n-            AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n-                    classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n+     public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n+             AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n+                     classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n \n-    /**\n+     /**\n      * The domain service specification.\n      */\n-    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The policy specification.\n      */\n-    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The domain factory specification.\n      *\n      * @see #PRODUCIBLE\n      */\n-    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The specification for the classes producible by factories.\n      */\n-    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n-            classIsAssignableFrom(Producible.class)).build();\n+     public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n+             classIsAssignableFrom(Producible.class)).build();\n \n-    /**\n+     /**\n      * The assembler specification. It accepts all assemblers: default assemblers and explicit\n      * assemblers.\n      */\n-    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n-            classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n+             classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The assembler specification matching only the explicit assembler.\n      */\n-    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n+     public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n+             new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n \n-    /**\n+     /**\n      * The assembler specification matching only the default assemblers. <p> Default assemblers are\n      * assembler implementation which are bound for all the DTOs matching the {@link #DTO_OF}\n      * specification. </p>\n      */\n-    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n+     public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n+             new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n \n-    /**\n+     /**\n      * The specification for the DTO which require an default assembler to be bound.\n      *\n      * @see #DEFAULT_ASSEMBLER\n      */\n-    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DtoOf.class, true)).build();\n+     public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n+             elementAnnotatedWith(DtoOf.class, true)).build();\n \n-    /**\n+     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n-    /**\n+     public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n+     /**\n      * The data importer specification.\n      */\n-    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n+             classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The data exporter specification.\n      */\n-    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n+             classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The specification matching automatic DTO used for data import/export.\n      */\n-    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DataSet.class, true)).build());\n+     public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n+             elementAnnotatedWith(DataSet.class, true)).build());\n \n-    /**\n+     /**\n      * The specification for identity generators.\n      */\n-    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(IdentityGenerator.class))).build();\n+     public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(IdentityGenerator.class))).build();\n \n-    /**\n+     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n+     public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n \n-    /**\n+     /**\n      * The specification for specification converters.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationConverter.class))).build();\n+     public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(SpecificationConverter.class))).build();\n \n-    /**\n+     /**\n      * The specification for domain events.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n-            classIsAssignableFrom(DomainEvent.class)).build();\n+     public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n+             classIsAssignableFrom(DomainEvent.class)).build();\n \n-    /**\n+     /**\n      * The specification for domain event handlers.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n+     public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n \n-    private BusinessSpecifications() {\n-        // no instantiation allowed\n-    }\n-}\n+     private BusinessSpecifications() {\n+         // no instantiation allowed\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 132
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/148/BusinessSpecifications.java\nindex 72202b473c..479370bc18 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/148/BusinessSpecifications.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal;\n \n import static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 58.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 64.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 70.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 80.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 86.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 94.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 100.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 106.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 112.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "column": "83",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 119.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "column": "82",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 126.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 131.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 144.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 150.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 155.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 162.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 169.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 176.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 181.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/148/BusinessSpecifications.java\nindex 72202b473c..ec444645d6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/148/BusinessSpecifications.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal;\n \n import static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n@@ -48,163 +49,139 @@ public final class BusinessSpecifications {\n     /**\n      * The aggregate root specification.\n      */\n-    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n-                    classModifierIs(Modifier.ABSTRACT).negate())\n+    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsInterface().negate())).build();\n \n-    /**\n+/**\n      * The domain entities specification.\n      */\n-    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsInterface().negate())).build();\n \n-    /**\n+/**\n      * The domain value objects specification.\n      */\n-    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsInterface().negate())).build();\n \n-    /**\n+/**\n      * The domain repository specification.\n      */\n-    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n+    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n                     .and(classIsAnnotation().negate())).build();\n \n-    public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n-            AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n-                    classIsInterface().negate())\n+public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(classIsInterface().negate())\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n \n-    /**\n+/**\n      * The domain service specification.\n      */\n-    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n+    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+/**\n      * The policy specification.\n      */\n-    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n+    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+/**\n      * The domain factory specification.\n      *\n      * @see #PRODUCIBLE\n      */\n-    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n+    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+/**\n      * The specification for the classes producible by factories.\n      */\n-    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n-            classIsAssignableFrom(Producible.class)).build();\n+    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(classIsAssignableFrom(Producible.class)).build();\n \n-    /**\n+/**\n      * The assembler specification. It accepts all assemblers: default assemblers and explicit\n      * assemblers.\n      */\n-    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n-            classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n+    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+/**\n      * The assembler specification matching only the explicit assembler.\n      */\n-    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n+    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and( new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n \n-    /**\n+/**\n      * The assembler specification matching only the default assemblers. <p> Default assemblers are\n      * assembler implementation which are bound for all the DTOs matching the {@link #DTO_OF}\n      * specification. </p>\n      */\n-    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n+    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and( new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n \n-    /**\n+/**\n      * The specification for the DTO which require an default assembler to be bound.\n      *\n      * @see #DEFAULT_ASSEMBLER\n      */\n-    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DtoOf.class, true)).build();\n+    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(elementAnnotatedWith(DtoOf.class, true)).build();\n \n-    /**\n+/**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n+    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(classIsInterface().negate()\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n-    /**\n+\n+/**\n      * The data importer specification.\n      */\n-    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n+    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+/**\n      * The data exporter specification.\n      */\n-    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n+    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+/**\n      * The specification matching automatic DTO used for data import/export.\n      */\n-    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DataSet.class, true)).build());\n+    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(elementAnnotatedWith(DataSet.class, true)).build());\n \n-    /**\n+/**\n      * The specification for identity generators.\n      */\n-    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n+    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(classIsInterface().negate()\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsDescendantOf(IdentityGenerator.class))).build();\n \n-    /**\n+/**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n+    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(classIsInterface().negate()\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n \n-    /**\n+/**\n      * The specification for specification converters.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n+    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(classIsInterface().negate()\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsDescendantOf(SpecificationConverter.class))).build();\n \n-    /**\n+/**\n      * The specification for domain events.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n-            classIsAssignableFrom(DomainEvent.class)).build();\n+    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(classIsAssignableFrom(DomainEvent.class)).build();\n \n-    /**\n+/**\n      * The specification for domain event handlers.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n+    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(classIsInterface().negate()\n                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n                     .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n-\n-    private BusinessSpecifications() {\n+private BusinessSpecifications() {\n         // no instantiation allowed\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/148/BusinessSpecifications.java\nindex 72202b473c..1f983cd769 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/148/BusinessSpecifications.java\n@@ -8,13 +8,18 @@\n package org.seedstack.business.internal;\n \n import static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n+\n import static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;\n+\n import static org.seedstack.shed.reflect.ClassPredicates.classIsAnnotation;\n+\n import static org.seedstack.shed.reflect.ClassPredicates.classIsAssignableFrom;\n+\n import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n+\n import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n-import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n \n+import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n import java.lang.reflect.Modifier;\n import org.kametic.specifications.Specification;\n import org.seedstack.business.Service;\n@@ -43,168 +48,145 @@ import org.seedstack.shed.reflect.AnnotationPredicates;\n /**\n  * This class provides all the specifications use by the business plugins.\n  */\n+\n+\n public final class BusinessSpecifications {\n \n     /**\n      * The aggregate root specification.\n      */\n-    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n-                    classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+\n+    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsInterface().negate())).build();\n \n     /**\n      * The domain entities specification.\n      */\n-    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsInterface().negate())).build();\n \n     /**\n      * The domain value objects specification.\n      */\n-    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsInterface().negate())).build();\n \n     /**\n      * The domain repository specification.\n      */\n-    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n-\n-    public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n-            AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n-                    classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n+    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n+.and(classIsAnnotation().negate())).build();\n+    public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(classIsInterface().negate())\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n \n     /**\n      * The domain service specification.\n      */\n-    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n+.and(classIsAnnotation().negate())).build();\n \n     /**\n      * The policy specification.\n      */\n-    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n+.and(classIsAnnotation().negate())).build();\n \n     /**\n      * The domain factory specification.\n      *\n      * @see #PRODUCIBLE\n      */\n-    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n+.and(classIsAnnotation().negate())).build();\n \n     /**\n      * The specification for the classes producible by factories.\n      */\n-    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n-            classIsAssignableFrom(Producible.class)).build();\n+    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(classIsAssignableFrom(Producible.class)).build();\n \n     /**\n      * The assembler specification. It accepts all assemblers: default assemblers and explicit\n      * assemblers.\n      */\n-    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n-            classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n+.and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n     /**\n      * The assembler specification matching only the explicit assembler.\n      */\n-    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n+    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n \n     /**\n      * The assembler specification matching only the default assemblers. <p> Default assemblers are\n      * assembler implementation which are bound for all the DTOs matching the {@link #DTO_OF}\n      * specification. </p>\n      */\n-    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n+    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n \n     /**\n      * The specification for the DTO which require an default assembler to be bound.\n      *\n      * @see #DEFAULT_ASSEMBLER\n      */\n-    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DtoOf.class, true)).build();\n+    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(elementAnnotatedWith(DtoOf.class, true)).build();\n \n     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n+    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(classIsInterface().negate()\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsDescendantOf(DtoInfoResolver.class))).build();\n     /**\n      * The data importer specification.\n      */\n-    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n+.and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n     /**\n      * The data exporter specification.\n      */\n-    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n+.and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n     /**\n      * The specification matching automatic DTO used for data import/export.\n      */\n-    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DataSet.class, true)).build());\n+    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(elementAnnotatedWith(DataSet.class, true)).build());\n \n     /**\n      * The specification for identity generators.\n      */\n-    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(IdentityGenerator.class))).build();\n+    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(classIsInterface().negate()\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsDescendantOf(IdentityGenerator.class))).build();\n \n     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n+    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(classIsInterface().negate()\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsDescendantOf(SpecificationTranslator.class))).build();\n \n     /**\n      * The specification for specification converters.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationConverter.class))).build();\n+    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(classIsInterface().negate()\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsDescendantOf(SpecificationConverter.class))).build();\n \n     /**\n      * The specification for domain events.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n-            classIsAssignableFrom(DomainEvent.class)).build();\n+    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(classIsAssignableFrom(DomainEvent.class)).build();\n \n     /**\n      * The specification for domain event handlers.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n-\n+    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(classIsInterface().negate()\n+.and(classModifierIs(Modifier.ABSTRACT).negate())\n+.and(classIsAssignableFrom(DomainEventHandler.class))).build();\n     private BusinessSpecifications() {\n         // no instantiation allowed\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "203",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "208",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "211",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/148/BusinessSpecifications.java\nindex 72202b473c..1723d1c0dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/148/BusinessSpecifications.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/148/BusinessSpecifications.java\n@@ -5,206 +5,208 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal;\n-\n-import static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n-import static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsAnnotation;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsAssignableFrom;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n-import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n-import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n-\n-import java.lang.reflect.Modifier;\n-import org.kametic.specifications.Specification;\n-import org.seedstack.business.Service;\n-import org.seedstack.business.assembler.Assembler;\n-import org.seedstack.business.assembler.DtoOf;\n-import org.seedstack.business.data.DataExporter;\n-import org.seedstack.business.data.DataImporter;\n-import org.seedstack.business.data.DataSet;\n-import org.seedstack.business.domain.DomainAggregateRoot;\n-import org.seedstack.business.domain.DomainEntity;\n-import org.seedstack.business.domain.DomainEvent;\n-import org.seedstack.business.domain.DomainEventHandler;\n-import org.seedstack.business.domain.DomainFactory;\n-import org.seedstack.business.domain.DomainPolicy;\n-import org.seedstack.business.domain.DomainRepository;\n-import org.seedstack.business.domain.DomainValueObject;\n-import org.seedstack.business.domain.IdentityGenerator;\n-import org.seedstack.business.domain.Producible;\n-import org.seedstack.business.spi.DtoInfoResolver;\n-import org.seedstack.business.spi.GenericImplementation;\n-import org.seedstack.business.spi.SpecificationConverter;\n-import org.seedstack.business.spi.SpecificationTranslator;\n-import org.seedstack.seed.core.internal.utils.SpecificationBuilder;\n-import org.seedstack.shed.reflect.AnnotationPredicates;\n-\n-/**\n+\n+package org .seedstack.business.internal;import\n+\n+static org.seedstack.shed.reflect.AnnotationPredicates.classOrAncestorAnnotatedWith;\n+ import static org.seedstack.shed.reflect.AnnotationPredicates.elementAnnotatedWith;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsAnnotation;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsAssignableFrom;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsDescendantOf;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classIsInterface;\n+ import static org.seedstack.shed.reflect.ClassPredicates.classModifierIs;\n+\n+ import java.lang.reflect.Modifier;\n+ import org.kametic.specifications.Specification;\n+ import org.seedstack.business.Service;\n+ import org.seedstack.business.assembler.Assembler;\n+ import org.seedstack.business.assembler.DtoOf;\n+ import org.seedstack.business.data.DataExporter;\n+ import org.seedstack.business.data.DataImporter;\n+ import org.seedstack.business.data.DataSet;\n+ import org.seedstack.business.domain.DomainAggregateRoot;\n+ import org.seedstack.business.domain.DomainEntity;\n+ import org.seedstack.business.domain.DomainEvent;\n+ import org.seedstack.business.domain.DomainEventHandler;\n+ import org.seedstack.business.domain.DomainFactory;\n+ import org.seedstack.business.domain.DomainPolicy;\n+ import org.seedstack.business.domain.DomainRepository;\n+ import org.seedstack.business.domain.DomainValueObject;\n+ import org.seedstack.business.domain.IdentityGenerator;\n+ import org.seedstack.business.domain.Producible;\n+ import org.seedstack.business.spi.DtoInfoResolver;\n+ import org.seedstack.business.spi.GenericImplementation;\n+ import org.seedstack.business.spi.SpecificationConverter;\n+ import org.seedstack.business.spi.SpecificationTranslator;\n+ import org.seedstack.seed.core.internal.utils.SpecificationBuilder;\n+ import org.seedstack.shed.reflect.AnnotationPredicates;\n+\n+ /**\n  * This class provides all the specifications use by the business plugins.\n  */\n-public final class BusinessSpecifications {\n+ public final class BusinessSpecifications {\n \n-    /**\n+     /**\n      * The aggregate root specification.\n      */\n-    public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n-                    classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> AGGREGATE_ROOT = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainAggregateRoot.class, true).and(\n+                     classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain entities specification.\n      */\n-    public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> ENTITY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainEntity.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain value objects specification.\n      */\n-    public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsInterface().negate())).build();\n+     public static final Specification<Class<?>> VALUE_OBJECT = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainValueObject.class, true).and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsInterface().negate())).build();\n \n-    /**\n+     /**\n      * The domain repository specification.\n      */\n-    public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> REPOSITORY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainRepository.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n-            AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n-                    classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n+     public static final Specification<Class<?>> DEFAULT_REPOSITORY = new SpecificationBuilder<>(\n+             AnnotationPredicates.<Class<?>>elementAnnotatedWith(GenericImplementation.class, true).and(\n+                     classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classOrAncestorAnnotatedWith(DomainRepository.class, true))).build();\n \n-    /**\n+     /**\n      * The domain service specification.\n      */\n-    public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> SERVICE = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(Service.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The policy specification.\n      */\n-    public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> POLICY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainPolicy.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The domain factory specification.\n      *\n      * @see #PRODUCIBLE\n      */\n-    public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n-            classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n-                    .and(classIsAnnotation().negate())).build();\n+     public static final Specification<Class<?>> FACTORY = new SpecificationBuilder<>(\n+             classOrAncestorAnnotatedWith(DomainFactory.class, true).and(classIsInterface())\n+                     .and(classIsAnnotation().negate())).build();\n \n-    /**\n+     /**\n      * The specification for the classes producible by factories.\n      */\n-    public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n-            classIsAssignableFrom(Producible.class)).build();\n+     public static final Specification<Class<?>> PRODUCIBLE = new SpecificationBuilder<>(\n+             classIsAssignableFrom(Producible.class)).build();\n \n-    /**\n+     /**\n      * The assembler specification. It accepts all assemblers: default assemblers and explicit\n      * assemblers.\n      */\n-    public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n-            classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> ASSEMBLER = new SpecificationBuilder<>(\n+             classIsDescendantOf(Assembler.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The assembler specification matching only the explicit assembler.\n      */\n-    public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n+     public static final Specification<Class<?>> EXPLICIT_ASSEMBLER = ASSEMBLER.and(\n+             new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true).negate()).build());\n \n-    /**\n+     /**\n      * The assembler specification matching only the default assemblers. <p> Default assemblers are\n      * assembler implementation which are bound for all the DTOs matching the {@link #DTO_OF}\n      * specification. </p>\n      */\n-    public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n-            new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n+     public static final Specification<Class<?>> DEFAULT_ASSEMBLER = ASSEMBLER.and(\n+             new SpecificationBuilder<>(elementAnnotatedWith(GenericImplementation.class, true)).build());\n \n-    /**\n+     /**\n      * The specification for the DTO which require an default assembler to be bound.\n      *\n      * @see #DEFAULT_ASSEMBLER\n      */\n-    public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DtoOf.class, true)).build();\n+     public static final Specification<Class<?>> DTO_OF = new SpecificationBuilder<Class<?>>(\n+             elementAnnotatedWith(DtoOf.class, true)).build();\n \n-    /**\n+     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n-    /**\n+     public static final Specification<Class<?>> DTO_INFO_RESOLVER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(DtoInfoResolver.class))).build();\n+     /**\n      * The data importer specification.\n      */\n-    public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> DATA_IMPORTER = new SpecificationBuilder<>(\n+             classIsDescendantOf(DataImporter.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The data exporter specification.\n      */\n-    public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n-            classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n+     public static final Specification<Class<?>> DATA_EXPORTER = new SpecificationBuilder<>(\n+             classIsDescendantOf(DataExporter.class).and(classIsInterface().negate())\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())).build();\n \n-    /**\n+     /**\n      * The specification matching automatic DTO used for data import/export.\n      */\n-    public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n-            elementAnnotatedWith(DataSet.class, true)).build());\n+     public static final Specification<Class<?>> DATA_SET = DTO_OF.and(new SpecificationBuilder<Class<?>>(\n+             elementAnnotatedWith(DataSet.class, true)).build());\n \n-    /**\n+     /**\n      * The specification for identity generators.\n      */\n-    public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(IdentityGenerator.class))).build();\n+     public static final Specification<Class<?>> IDENTITY_GENERATOR = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(IdentityGenerator.class))).build();\n \n-    /**\n+     /**\n      * The specification for specification translators.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n+     public static final Specification<Class<?>> SPECIFICATION_TRANSLATOR = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(SpecificationTranslator.class))).build();\n \n-    /**\n+     /**\n      * The specification for specification converters.\n      */\n-    public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsDescendantOf(SpecificationConverter.class))).build();\n+     public static final Specification<Class<?>> SPECIFICATION_CONVERTER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsDescendantOf(SpecificationConverter.class))).build();\n \n-    /**\n+     /**\n      * The specification for domain events.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n-            classIsAssignableFrom(DomainEvent.class)).build();\n+     public static final Specification<Class<?>> DOMAIN_EVENT = new SpecificationBuilder<>(\n+             classIsAssignableFrom(DomainEvent.class)).build();\n \n-    /**\n+     /**\n      * The specification for domain event handlers.\n      */\n-    public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n-            classIsInterface().negate()\n-                    .and(classModifierIs(Modifier.ABSTRACT).negate())\n-                    .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n+     public static final Specification<Class<?>> DOMAIN_EVENT_HANDLER = new SpecificationBuilder<>(\n+             classIsInterface().negate()\n+                     .and(classModifierIs(Modifier.ABSTRACT).negate())\n+                     .and(classIsAssignableFrom(DomainEventHandler.class))).build();\n \n-    private BusinessSpecifications() {\n-        // no instantiation allowed\n-    }\n-}\n+     private BusinessSpecifications() {\n+         // no instantiation allowed\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 132
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}