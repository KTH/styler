{
    "error_id": "59",
    "information": {
        "errors": [
            {
                "line": "152",
                "column": "43",
                "severity": "warning",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\n        new ThreadLocal<WeakHashMap<Object,Object>>();\n\n    /**\n     * <p>",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/59/ToStringStyle.java\nindex e5c90493b4..cd60668340 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler/59/ToStringStyle.java\n@@ -1,2286 +1,2286 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\r\n-\r\n-import java.io.Serializable;\r\n-import java.lang.reflect.Array;\r\n-import java.util.Collection;\r\n-import java.util.Map;\r\n-import java.util.WeakHashMap;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.SystemUtils;\r\n-\r\n-/**\r\n- * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\r\n- * The main public interface is always via <code>ToStringBuilder</code>.</p>\r\n- *\r\n- * <p>These classes are intended to be used as <code>Singletons</code>.\r\n- * There is no need to instantiate a new style each time. A program\r\n- * will generally use one of the predefined constants on this class.\r\n- * Alternatively, the {@link StandardToStringStyle} class can be used\r\n- * to set the individual settings. Thus most styles can be achieved\r\n- * without subclassing.</p>\r\n- *\r\n- * <p>If required, a subclass can override as many or as few of the\r\n- * methods as it requires. Each object type (from <code>boolean</code>\r\n- * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\r\n- * its own methods to output it. Most have two versions, detail and summary.\r\n- *\r\n- * <p>For example, the detail version of the array based methods will\r\n- * output the whole array, whereas the summary method will just output\r\n- * the array length.</p>\r\n- *\r\n- * <p>If you want to format the output of certain objects, such as dates, you\r\n- * must create a subclass and override a method.\r\n- * <pre>\r\n- * public class MyStyle extends ToStringStyle {\r\n- *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n- *     if (value instanceof Date) {\r\n- *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\r\n- *     }\r\n- *     buffer.append(value);\r\n- *   }\r\n- * }\r\n- * </pre>\r\n- * </p>\r\n- *\r\n- * @since 1.0\r\n- * @version $Id: ToStringStyle.java 1091066 2011-04-11 13:30:11Z mbenson $\r\n- */\r\n-public abstract class ToStringStyle implements Serializable {\r\n-\r\n-    /**\r\n-     * Serialization version ID.\r\n-     */\r\n-    private static final long serialVersionUID = -2587890625525655916L;\r\n-\r\n-    /**\r\n-     * The default toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\r\n-\r\n-    /**\r\n-     * The multi line toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[\r\n-     *   name=John Doe\r\n-     *   age=33\r\n-     *   smoker=false\r\n-     * ]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\r\n-\r\n-    /**\r\n-     * The no field names toString style. Using the Using the\r\n-     * <code>Person</code> example from {@link ToStringBuilder}, the output\r\n-     * would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[John Doe,33,false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\r\n-\r\n-    /**\r\n-     * The short prefix toString style. Using the <code>Person</code> example\r\n-     * from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     *\r\n-     * @since 2.1\r\n-     */\r\n-    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\r\n-\r\n-    /**\r\n-     * The simple toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * John Doe,33,false\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * A registry of objects used by <code>reflectionToString</code> methods\r\n-     * to detect cyclical object references and avoid infinite loops.\r\n-     * </p>\r\n-     */\r\n-    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n-        new ThreadLocal<WeakHashMap<Object,Object>>();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\r\n-     * methods in the current thread.\r\n-     * </p>\r\n-     *\r\n-     * @return Set the registry of objects being traversed\r\n-     */\r\n-    static Map<Object, Object> getRegistry() {\r\n-        return REGISTRY.get();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns <code>true</code> if the registry contains the given object.\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to lookup in the registry.\r\n-     * @return boolean <code>true</code> if the registry contains the given\r\n-     *             object.\r\n-     */\r\n-    static boolean isRegistered(Object value) {\r\n-        Map<Object, Object> m = getRegistry();\r\n-        return m != null && m.containsKey(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Registers the given object. Used by the reflection methods to avoid\r\n-     * infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to register.\r\n-     */\r\n-    static void register(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m == null) {\r\n-                REGISTRY.set(new WeakHashMap<Object, Object>());\r\n-            }\r\n-            getRegistry().put(value, null);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Unregisters the given object.\r\n-     * </p>\r\n-     *\r\n-     * <p>\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to unregister.\r\n-     */\r\n-    static void unregister(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m != null) {\r\n-                m.remove(value);\r\n-                if (m.isEmpty()) {\r\n-                    REGISTRY.remove();\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Whether to use the field names, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useFieldNames = true;\r\n-\r\n-    /**\r\n-     * Whether to use the class name, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useClassName = true;\r\n-\r\n-    /**\r\n-     * Whether to use short class names, the default is <code>false</code>.\r\n-     */\r\n-    private boolean useShortClassName = false;\r\n-\r\n-    /**\r\n-     * Whether to use the identity hash code, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useIdentityHashCode = true;\r\n-\r\n-    /**\r\n-     * The content start <code>'['</code>.\r\n-     */\r\n-    private String contentStart = \"[\";\r\n-\r\n-    /**\r\n-     * The content end <code>']'</code>.\r\n-     */\r\n-    private String contentEnd = \"]\";\r\n-\r\n-    /**\r\n-     * The field name value separator <code>'='</code>.\r\n-     */\r\n-    private String fieldNameValueSeparator = \"=\";\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added before any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtStart = false;\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added after any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtEnd = false;\r\n-\r\n-    /**\r\n-     * The field separator <code>','</code>.\r\n-     */\r\n-    private String fieldSeparator = \",\";\r\n-\r\n-    /**\r\n-     * The array start <code>'{'</code>.\r\n-     */\r\n-    private String arrayStart = \"{\";\r\n-\r\n-    /**\r\n-     * The array separator <code>','</code>.\r\n-     */\r\n-    private String arraySeparator = \",\";\r\n-\r\n-    /**\r\n-     * The detail for array content.\r\n-     */\r\n-    private boolean arrayContentDetail = true;\r\n-\r\n-    /**\r\n-     * The array end <code>'}'</code>.\r\n-     */\r\n-    private String arrayEnd = \"}\";\r\n-\r\n-    /**\r\n-     * The value to use when fullDetail is <code>null</code>,\r\n-     * the default value is <code>true</code>.\r\n-     */\r\n-    private boolean defaultFullDetail = true;\r\n-\r\n-    /**\r\n-     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\r\n-     */\r\n-    private String nullText = \"<null>\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'<size'</code>.\r\n-     */\r\n-    private String sizeStartText = \"<size=\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String sizeEndText = \">\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&lt;'</code>.\r\n-     */\r\n-    private String summaryObjectStartText = \"<\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String summaryObjectEndText = \">\";\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Constructor.</p>\r\n-     */\r\n-    protected ToStringStyle() {\r\n-        super();\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the superclass toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param superToString  the <code>super.toString()</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendSuper(StringBuffer buffer, String superToString) {\r\n-        appendToString(buffer, superToString);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> another toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param toString  the additional <code>toString</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendToString(StringBuffer buffer, String toString) {\r\n-        if (toString != null) {\r\n-            int pos1 = toString.indexOf(contentStart) + contentStart.length();\r\n-            int pos2 = toString.lastIndexOf(contentEnd);\r\n-            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\r\n-                String data = toString.substring(pos1, pos2);\r\n-                if (fieldSeparatorAtStart) {\r\n-                    removeLastFieldSeparator(buffer);\r\n-                }\r\n-                buffer.append(data);\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the start of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a <code>toString</code> for\r\n-     */\r\n-    public void appendStart(StringBuffer buffer, Object object) {\r\n-        if (object != null) {\r\n-            appendClassName(buffer, object);\r\n-            appendIdentityHashCode(buffer, object);\r\n-            appendContentStart(buffer);\r\n-            if (fieldSeparatorAtStart) {\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the end of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a\r\n-     *  <code>toString</code> for.\r\n-     */\r\n-    public void appendEnd(StringBuffer buffer, Object object) {\r\n-        if (this.fieldSeparatorAtEnd == false) {\r\n-            removeLastFieldSeparator(buffer);\r\n-        }\r\n-        appendContentEnd(buffer);\r\n-        unregister(object);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Remove the last field separator from the buffer.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @since 2.0\r\n-     */\r\n-    protected void removeLastFieldSeparator(StringBuffer buffer) {\r\n-        int len = buffer.length();\r\n-        int sepLen = fieldSeparator.length();\r\n-        if (len > 0 && sepLen > 0 && len >= sepLen) {\r\n-            boolean match = true;\r\n-            for (int i = 0; i < sepLen; i++) {\r\n-                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\r\n-                    match = false;\r\n-                    break;\r\n-                }\r\n-            }\r\n-            if (match) {\r\n-                buffer.setLength(len - sepLen);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full <code>toString</code> of the\r\n-     * <code>Object</code> passed in.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (value == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else {\r\n-            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>,\r\n-     * correctly interpreting its type.</p>\r\n-     *\r\n-     * <p>This method performs the main lookup by Class type to correctly\r\n-     * route arrays, <code>Collections</code>, <code>Maps</code> and\r\n-     * <code>Objects</code> to the appropriate method.</p>\r\n-     *\r\n-     * <p>Either detail or summary views can be specified.</p>\r\n-     *\r\n-     * <p>If a cycle is detected, an object will be appended with the\r\n-     * <code>Object.toString()</code> format.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @param detail  output detail or not\r\n-     */\r\n-    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n-        if (isRegistered(value)\r\n-            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n-           appendCyclicObject(buffer, fieldName, value);\r\n-           return;\r\n-        }\r\n-\r\n-        register(value);\r\n-\r\n-        try {\r\n-            if (value instanceof Collection<?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Collection<?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof Map<?, ?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof long[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (long[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (long[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof int[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (int[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (int[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof short[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (short[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (short[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof byte[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (byte[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (byte[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof char[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (char[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (char[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof double[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (double[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (double[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof float[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (float[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (float[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof boolean[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (boolean[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (boolean[]) value);\r\n-                }\r\n-\r\n-            } else if (value.getClass().isArray()) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Object[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (Object[]) value);\r\n-                }\r\n-\r\n-            } else {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, value);\r\n-                }\r\n-            }\r\n-        } finally {\r\n-            unregister(value);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value that has been detected to participate in a cycle. This\r\n-     * implementation will print the standard string value of the value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     *\r\n-     * @since 2.2\r\n-     */\r\n-    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n-       ObjectUtils.identityToString(buffer, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full detail of the <code>Object</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param coll  the <code>Collection</code> to add to the\r\n-     *  <code>toString</code>, not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\r\n-        buffer.append(coll);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param map  the <code>Map</code> to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\r\n-        buffer.append(map);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing a summary of the <code>Object</code>.</P>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(summaryObjectStartText);\r\n-        buffer.append(getShortClassName(value.getClass()));\r\n-        buffer.append(summaryObjectEndText);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>Object</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            Object item = array[i];\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an array type.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @since 2.0\r\n-     */\r\n-    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\r\n-        buffer.append(arrayStart);\r\n-        int length = Array.getLength(array);\r\n-        for (int i = 0; i < length; i++) {\r\n-            Object item = Array.get(array, i);\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>Object</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the class name.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose name to output\r\n-     */\r\n-    protected void appendClassName(StringBuffer buffer, Object object) {\r\n-        if (useClassName && object != null) {\r\n-            register(object);\r\n-            if (useShortClassName) {\r\n-                buffer.append(getShortClassName(object.getClass()));\r\n-            } else {\r\n-                buffer.append(object.getClass().getName());\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose id to output\r\n-     */\r\n-    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\r\n-        if (this.isUseIdentityHashCode() && object!=null) {\r\n-            register(object);\r\n-            buffer.append('@');\r\n-            buffer.append(Integer.toHexString(System.identityHashCode(object)));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentStart(StringBuffer buffer) {\r\n-        buffer.append(contentStart);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentEnd(StringBuffer buffer) {\r\n-        buffer.append(contentEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\r\n-     *\r\n-     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendNullText(StringBuffer buffer, String fieldName) {\r\n-        buffer.append(nullText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field separator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendFieldSeparator(StringBuffer buffer) {\r\n-        buffer.append(fieldSeparator);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     */\r\n-    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\r\n-        if (useFieldNames && fieldName != null) {\r\n-            buffer.append(fieldName);\r\n-            buffer.append(fieldNameValueSeparator);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString<code> the field end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\r\n-        appendFieldSeparator(buffer);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a size summary.</p>\r\n-     *\r\n-     * <p>The size summary is used to summarize the contents of\r\n-     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\r\n-     *\r\n-     * <p>The output consists of a prefix, the passed in size\r\n-     * and a suffix.</p>\r\n-     *\r\n-     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param size  the size to append\r\n-     */\r\n-    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\r\n-        buffer.append(sizeStartText);\r\n-        buffer.append(size);\r\n-        buffer.append(sizeEndText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Is this field to be output in full detail.</p>\r\n-     *\r\n-     * <p>This method converts a detail request into a detail level.\r\n-     * The calling code may request full detail (<code>true</code>),\r\n-     * but a subclass might ignore that and always return\r\n-     * <code>false</code>. The calling code may pass in\r\n-     * <code>null</code> indicating that it doesn't care about\r\n-     * the detail level. In this case the default detail level is\r\n-     * used.</p>\r\n-     *\r\n-     * @param fullDetailRequest  the detail level requested\r\n-     * @return whether full detail is to be shown\r\n-     */\r\n-    protected boolean isFullDetail(Boolean fullDetailRequest) {\r\n-        if (fullDetailRequest == null) {\r\n-            return defaultFullDetail;\r\n-        }\r\n-        return fullDetailRequest.booleanValue();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Gets the short class name for a class.</p>\r\n-     *\r\n-     * <p>The short class name is the classname excluding\r\n-     * the package name.</p>\r\n-     *\r\n-     * @param cls  the <code>Class</code> to get the short name of\r\n-     * @return the short name\r\n-     */\r\n-    protected String getShortClassName(Class<?> cls) {\r\n-        return ClassUtils.getShortClassName(cls);\r\n-    }\r\n-\r\n-    // Setters and getters for the customizable parts of the style\r\n-    // These methods are not expected to be overridden, except to make public\r\n-    // (They are not public so that immutable subclasses can be written)\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the class name.</p>\r\n-     *\r\n-     * @return the current useClassName flag\r\n-     */\r\n-    protected boolean isUseClassName() {\r\n-        return useClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the class name.</p>\r\n-     *\r\n-     * @param useClassName  the new useClassName flag\r\n-     */\r\n-    protected void setUseClassName(boolean useClassName) {\r\n-        this.useClassName = useClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output short or long class names.</p>\r\n-     *\r\n-     * @return the current useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isUseShortClassName() {\r\n-        return useShortClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output short or long class names.</p>\r\n-     *\r\n-     * @param useShortClassName  the new useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setUseShortClassName(boolean useShortClassName) {\r\n-        this.useShortClassName = useShortClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @return the current useIdentityHashCode flag\r\n-     */\r\n-    protected boolean isUseIdentityHashCode() {\r\n-        return useIdentityHashCode;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @param useIdentityHashCode  the new useIdentityHashCode flag\r\n-     */\r\n-    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\r\n-        this.useIdentityHashCode = useIdentityHashCode;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @return the current useFieldNames flag\r\n-     */\r\n-    protected boolean isUseFieldNames() {\r\n-        return useFieldNames;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @param useFieldNames  the new useFieldNames flag\r\n-     */\r\n-    protected void setUseFieldNames(boolean useFieldNames) {\r\n-        this.useFieldNames = useFieldNames;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @return the current defaultFullDetail flag\r\n-     */\r\n-    protected boolean isDefaultFullDetail() {\r\n-        return defaultFullDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @param defaultFullDetail  the new defaultFullDetail flag\r\n-     */\r\n-    protected void setDefaultFullDetail(boolean defaultFullDetail) {\r\n-        this.defaultFullDetail = defaultFullDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output array content detail.</p>\r\n-     *\r\n-     * @return the current array content detail setting\r\n-     */\r\n-    protected boolean isArrayContentDetail() {\r\n-        return arrayContentDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output array content detail.</p>\r\n-     *\r\n-     * @param arrayContentDetail  the new arrayContentDetail flag\r\n-     */\r\n-    protected void setArrayContentDetail(boolean arrayContentDetail) {\r\n-        this.arrayContentDetail = arrayContentDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array start text.</p>\r\n-     *\r\n-     * @return the current array start text\r\n-     */\r\n-    protected String getArrayStart() {\r\n-        return arrayStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayStart  the new array start text\r\n-     */\r\n-    protected void setArrayStart(String arrayStart) {\r\n-        if (arrayStart == null) {\r\n-            arrayStart = \"\";\r\n-        }\r\n-        this.arrayStart = arrayStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array end text.</p>\r\n-     *\r\n-     * @return the current array end text\r\n-     */\r\n-    protected String getArrayEnd() {\r\n-        return arrayEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayEnd  the new array end text\r\n-     */\r\n-    protected void setArrayEnd(String arrayEnd) {\r\n-        if (arrayEnd == null) {\r\n-            arrayEnd = \"\";\r\n-        }\r\n-        this.arrayEnd = arrayEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array separator text.</p>\r\n-     *\r\n-     * @return the current array separator text\r\n-     */\r\n-    protected String getArraySeparator() {\r\n-        return arraySeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arraySeparator  the new array separator text\r\n-     */\r\n-    protected void setArraySeparator(String arraySeparator) {\r\n-        if (arraySeparator == null) {\r\n-            arraySeparator = \"\";\r\n-        }\r\n-        this.arraySeparator = arraySeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content start text.</p>\r\n-     *\r\n-     * @return the current content start text\r\n-     */\r\n-    protected String getContentStart() {\r\n-        return contentStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentStart  the new content start text\r\n-     */\r\n-    protected void setContentStart(String contentStart) {\r\n-        if (contentStart == null) {\r\n-            contentStart = \"\";\r\n-        }\r\n-        this.contentStart = contentStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content end text.</p>\r\n-     *\r\n-     * @return the current content end text\r\n-     */\r\n-    protected String getContentEnd() {\r\n-        return contentEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentEnd  the new content end text\r\n-     */\r\n-    protected void setContentEnd(String contentEnd) {\r\n-        if (contentEnd == null) {\r\n-            contentEnd = \"\";\r\n-        }\r\n-        this.contentEnd = contentEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field name value separator text.</p>\r\n-     *\r\n-     * @return the current field name value separator text\r\n-     */\r\n-    protected String getFieldNameValueSeparator() {\r\n-        return fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field name value separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldNameValueSeparator  the new field name value separator text\r\n-     */\r\n-    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\r\n-        if (fieldNameValueSeparator == null) {\r\n-            fieldNameValueSeparator = \"\";\r\n-        }\r\n-        this.fieldNameValueSeparator = fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field separator text.</p>\r\n-     *\r\n-     * @return the current field separator text\r\n-     */\r\n-    protected String getFieldSeparator() {\r\n-        return fieldSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldSeparator  the new field separator text\r\n-     */\r\n-    protected void setFieldSeparator(String fieldSeparator) {\r\n-        if (fieldSeparator == null) {\r\n-            fieldSeparator = \"\";\r\n-        }\r\n-        this.fieldSeparator = fieldSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtStart() {\r\n-        return fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\r\n-        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtEnd() {\r\n-        return fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\r\n-        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * @return the current text to output when null found\r\n-     */\r\n-    protected String getNullText() {\r\n-        return nullText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param nullText  the new text to output when null found\r\n-     */\r\n-    protected void setNullText(String nullText) {\r\n-        if (nullText == null) {\r\n-            nullText = \"\";\r\n-        }\r\n-        this.nullText = nullText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of size text\r\n-     */\r\n-    protected String getSizeStartText() {\r\n-        return sizeStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeStartText  the new start of size text\r\n-     */\r\n-    protected void setSizeStartText(String sizeStartText) {\r\n-        if (sizeStartText == null) {\r\n-            sizeStartText = \"\";\r\n-        }\r\n-        this.sizeStartText = sizeStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of size text\r\n-     */\r\n-    protected String getSizeEndText() {\r\n-        return sizeEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeEndText  the new end of size text\r\n-     */\r\n-    protected void setSizeEndText(String sizeEndText) {\r\n-        if (sizeEndText == null) {\r\n-            sizeEndText = \"\";\r\n-        }\r\n-        this.sizeEndText = sizeEndText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of summary text\r\n-     */\r\n-    protected String getSummaryObjectStartText() {\r\n-        return summaryObjectStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectStartText  the new start of summary text\r\n-     */\r\n-    protected void setSummaryObjectStartText(String summaryObjectStartText) {\r\n-        if (summaryObjectStartText == null) {\r\n-            summaryObjectStartText = \"\";\r\n-        }\r\n-        this.summaryObjectStartText = summaryObjectStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of summary text\r\n-     */\r\n-    protected String getSummaryObjectEndText() {\r\n-        return summaryObjectEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectEndText  the new end of summary text\r\n-     */\r\n-    protected void setSummaryObjectEndText(String summaryObjectEndText) {\r\n-        if (summaryObjectEndText == null) {\r\n-            summaryObjectEndText = \"\";\r\n-        }\r\n-        this.summaryObjectEndText = summaryObjectEndText;\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Default <code>ToStringStyle</code>.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class DefaultToStringStyle extends ToStringStyle {\r\n-\r\n-        /**\r\n-         * Required for serialization support.\r\n-         *\r\n-         * @see java.io.Serializable\r\n-         */\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        DefaultToStringStyle() {\r\n-            super();\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.DEFAULT_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out\r\n-     * the field names.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.\r\n-     */\r\n-    private static final class NoFieldNameToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        NoFieldNameToStringStyle() {\r\n-            super();\r\n-            this.setUseFieldNames(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that prints out the short\r\n-     * class name and no identity hashcode.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class ShortPrefixToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        ShortPrefixToStringStyle() {\r\n-            super();\r\n-            this.setUseShortClassName(true);\r\n-            this.setUseIdentityHashCode(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SHORT_PREFIX_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out the\r\n-     * classname, identity hashcode, content start or field name.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class SimpleToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        SimpleToStringStyle() {\r\n-            super();\r\n-            this.setUseClassName(false);\r\n-            this.setUseIdentityHashCode(false);\r\n-            this.setUseFieldNames(false);\r\n-            this.setContentStart(\"\");\r\n-            this.setContentEnd(\"\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SIMPLE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class MultiLineToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        MultiLineToStringStyle() {\r\n-            super();\r\n-            this.setContentStart(\"[\");\r\n-            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\r\n-            this.setFieldSeparatorAtStart(true);\r\n-            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.MULTI_LINE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n+ * The main public interface is always via <code>ToStringBuilder</code>.</p>\n+ *\n+ * <p>These classes are intended to be used as <code>Singletons</code>.\n+ * There is no need to instantiate a new style each time. A program\n+ * will generally use one of the predefined constants on this class.\n+ * Alternatively, the {@link StandardToStringStyle} class can be used\n+ * to set the individual settings. Thus most styles can be achieved\n+ * without subclassing.</p>\n+ *\n+ * <p>If required, a subclass can override as many or as few of the\n+ * methods as it requires. Each object type (from <code>boolean</code>\n+ * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n+ * its own methods to output it. Most have two versions, detail and summary.\n+ *\n+ * <p>For example, the detail version of the array based methods will\n+ * output the whole array, whereas the summary method will just output\n+ * the array length.</p>\n+ *\n+ * <p>If you want to format the output of certain objects, such as dates, you\n+ * must create a subclass and override a method.\n+ * <pre>\n+ * public class MyStyle extends ToStringStyle {\n+ *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n+ *     if (value instanceof Date) {\n+ *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n+ *     }\n+ *     buffer.append(value);\n+ *   }\n+ * }\n+ * </pre>\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @version $Id: ToStringStyle.java 1091066 2011-04-11 13:30:11Z mbenson $\n+ */\n+public abstract class ToStringStyle implements Serializable {\n+\n+    /**\n+     * Serialization version ID.\n+     */\n+    private static final long serialVersionUID = -2587890625525655916L;\n+\n+    /**\n+     * The default toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[name=John Doe,age=33,smoker=false]\n+     * </pre>\n+     */\n+    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\n+\n+    /**\n+     * The multi line toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[\n+     *   name=John Doe\n+     *   age=33\n+     *   smoker=false\n+     * ]\n+     * </pre>\n+     */\n+    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\n+\n+    /**\n+     * The no field names toString style. Using the Using the\n+     * <code>Person</code> example from {@link ToStringBuilder}, the output\n+     * would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[John Doe,33,false]\n+     * </pre>\n+     */\n+    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\n+\n+    /**\n+     * The short prefix toString style. Using the <code>Person</code> example\n+     * from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person[name=John Doe,age=33,smoker=false]\n+     * </pre>\n+     *\n+     * @since 2.1\n+     */\n+    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n+\n+    /**\n+     * The simple toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * John Doe,33,false\n+     * </pre>\n+     */\n+    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n+\n+    /**\n+     * <p>\n+     * A registry of objects used by <code>reflectionToString</code> methods\n+     * to detect cyclical object references and avoid infinite loops.\n+     * </p>\n+     */\n+    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\n+        new ThreadLocal<WeakHashMap<Object, Object>>();\n+\n+    /**\n+     * <p>\n+     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n+     * methods in the current thread.\n+     * </p>\n+     *\n+     * @return Set the registry of objects being traversed\n+     */\n+    static Map<Object, Object> getRegistry() {\n+        return REGISTRY.get();\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns <code>true</code> if the registry contains the given object.\n+     * Used by the reflection methods to avoid infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to lookup in the registry.\n+     * @return boolean <code>true</code> if the registry contains the given\n+     *             object.\n+     */\n+    static boolean isRegistered(Object value) {\n+        Map<Object, Object> m = getRegistry();\n+        return m != null && m.containsKey(value);\n+    }\n+\n+    /**\n+     * <p>\n+     * Registers the given object. Used by the reflection methods to avoid\n+     * infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to register.\n+     */\n+    static void register(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m == null) {\n+                REGISTRY.set(new WeakHashMap<Object, Object>());\n+            }\n+            getRegistry().put(value, null);\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Unregisters the given object.\n+     * </p>\n+     *\n+     * <p>\n+     * Used by the reflection methods to avoid infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to unregister.\n+     */\n+    static void unregister(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m != null) {\n+                m.remove(value);\n+                if (m.isEmpty()) {\n+                    REGISTRY.remove();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Whether to use the field names, the default is <code>true</code>.\n+     */\n+    private boolean useFieldNames = true;\n+\n+    /**\n+     * Whether to use the class name, the default is <code>true</code>.\n+     */\n+    private boolean useClassName = true;\n+\n+    /**\n+     * Whether to use short class names, the default is <code>false</code>.\n+     */\n+    private boolean useShortClassName = false;\n+\n+    /**\n+     * Whether to use the identity hash code, the default is <code>true</code>.\n+     */\n+    private boolean useIdentityHashCode = true;\n+\n+    /**\n+     * The content start <code>'['</code>.\n+     */\n+    private String contentStart = \"[\";\n+\n+    /**\n+     * The content end <code>']'</code>.\n+     */\n+    private String contentEnd = \"]\";\n+\n+    /**\n+     * The field name value separator <code>'='</code>.\n+     */\n+    private String fieldNameValueSeparator = \"=\";\n+\n+    /**\n+     * Whether the field separator should be added before any other fields.\n+     */\n+    private boolean fieldSeparatorAtStart = false;\n+\n+    /**\n+     * Whether the field separator should be added after any other fields.\n+     */\n+    private boolean fieldSeparatorAtEnd = false;\n+\n+    /**\n+     * The field separator <code>','</code>.\n+     */\n+    private String fieldSeparator = \",\";\n+\n+    /**\n+     * The array start <code>'{'</code>.\n+     */\n+    private String arrayStart = \"{\";\n+\n+    /**\n+     * The array separator <code>','</code>.\n+     */\n+    private String arraySeparator = \",\";\n+\n+    /**\n+     * The detail for array content.\n+     */\n+    private boolean arrayContentDetail = true;\n+\n+    /**\n+     * The array end <code>'}'</code>.\n+     */\n+    private String arrayEnd = \"}\";\n+\n+    /**\n+     * The value to use when fullDetail is <code>null</code>,\n+     * the default value is <code>true</code>.\n+     */\n+    private boolean defaultFullDetail = true;\n+\n+    /**\n+     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\n+     */\n+    private String nullText = \"<null>\";\n+\n+    /**\n+     * The summary size text start <code>'<size'</code>.\n+     */\n+    private String sizeStartText = \"<size=\";\n+\n+    /**\n+     * The summary size text start <code>'&gt;'</code>.\n+     */\n+    private String sizeEndText = \">\";\n+\n+    /**\n+     * The summary object text start <code>'&lt;'</code>.\n+     */\n+    private String summaryObjectStartText = \"<\";\n+\n+    /**\n+     * The summary object text start <code>'&gt;'</code>.\n+     */\n+    private String summaryObjectEndText = \">\";\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Constructor.</p>\n+     */\n+    protected ToStringStyle() {\n+        super();\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the superclass toString.</p>\n+     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\n+     *\n+     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param superToString  the <code>super.toString()</code>\n+     * @since 2.0\n+     */\n+    public void appendSuper(StringBuffer buffer, String superToString) {\n+        appendToString(buffer, superToString);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> another toString.</p>\n+     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\n+     *\n+     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param toString  the additional <code>toString</code>\n+     * @since 2.0\n+     */\n+    public void appendToString(StringBuffer buffer, String toString) {\n+        if (toString != null) {\n+            int pos1 = toString.indexOf(contentStart) + contentStart.length();\n+            int pos2 = toString.lastIndexOf(contentEnd);\n+            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\n+                String data = toString.substring(pos1, pos2);\n+                if (fieldSeparatorAtStart) {\n+                    removeLastFieldSeparator(buffer);\n+                }\n+                buffer.append(data);\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the start of data indicator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a <code>toString</code> for\n+     */\n+    public void appendStart(StringBuffer buffer, Object object) {\n+        if (object != null) {\n+            appendClassName(buffer, object);\n+            appendIdentityHashCode(buffer, object);\n+            appendContentStart(buffer);\n+            if (fieldSeparatorAtStart) {\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the end of data indicator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a\n+     *  <code>toString</code> for.\n+     */\n+    public void appendEnd(StringBuffer buffer, Object object) {\n+        if (this.fieldSeparatorAtEnd == false) {\n+            removeLastFieldSeparator(buffer);\n+        }\n+        appendContentEnd(buffer);\n+        unregister(object);\n+    }\n+\n+    /**\n+     * <p>Remove the last field separator from the buffer.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @since 2.0\n+     */\n+    protected void removeLastFieldSeparator(StringBuffer buffer) {\n+        int len = buffer.length();\n+        int sepLen = fieldSeparator.length();\n+        if (len > 0 && sepLen > 0 && len >= sepLen) {\n+            boolean match = true;\n+            for (int i = 0; i < sepLen; i++) {\n+                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n+                    match = false;\n+                    break;\n+                }\n+            }\n+            if (match) {\n+                buffer.setLength(len - sepLen);\n+            }\n+        }\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full <code>toString</code> of the\n+     * <code>Object</code> passed in.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (value == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else {\n+            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>,\n+     * correctly interpreting its type.</p>\n+     *\n+     * <p>This method performs the main lookup by Class type to correctly\n+     * route arrays, <code>Collections</code>, <code>Maps</code> and\n+     * <code>Objects</code> to the appropriate method.</p>\n+     *\n+     * <p>Either detail or summary views can be specified.</p>\n+     *\n+     * <p>If a cycle is detected, an object will be appended with the\n+     * <code>Object.toString()</code> format.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     * @param detail  output detail or not\n+     */\n+    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n+        if (isRegistered(value)\n+            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n+           appendCyclicObject(buffer, fieldName, value);\n+           return;\n+        }\n+\n+        register(value);\n+\n+        try {\n+            if (value instanceof Collection<?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Collection<?>) value);\n+                } else {\n+                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\n+                }\n+\n+            } else if (value instanceof Map<?, ?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\n+                } else {\n+                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\n+                }\n+\n+            } else if (value instanceof long[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (long[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (long[]) value);\n+                }\n+\n+            } else if (value instanceof int[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (int[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (int[]) value);\n+                }\n+\n+            } else if (value instanceof short[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (short[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (short[]) value);\n+                }\n+\n+            } else if (value instanceof byte[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (byte[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (byte[]) value);\n+                }\n+\n+            } else if (value instanceof char[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (char[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (char[]) value);\n+                }\n+\n+            } else if (value instanceof double[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (double[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (double[]) value);\n+                }\n+\n+            } else if (value instanceof float[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (float[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (float[]) value);\n+                }\n+\n+            } else if (value instanceof boolean[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (boolean[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (boolean[]) value);\n+                }\n+\n+            } else if (value.getClass().isArray()) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Object[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (Object[]) value);\n+                }\n+\n+            } else {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, value);\n+                } else {\n+                    appendSummary(buffer, fieldName, value);\n+                }\n+            }\n+        } finally {\n+            unregister(value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value that has been detected to participate in a cycle. This\n+     * implementation will print the standard string value of the value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     *\n+     * @since 2.2\n+     */\n+    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\n+       ObjectUtils.identityToString(buffer, value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full detail of the <code>Object</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param coll  the <code>Collection</code> to add to the\n+     *  <code>toString</code>, not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\n+        buffer.append(coll);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param map  the <code>Map</code> to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\n+        buffer.append(map);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing a summary of the <code>Object</code>.</P>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(summaryObjectStartText);\n+        buffer.append(getShortClassName(value.getClass()));\n+        buffer.append(summaryObjectEndText);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, long value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, int value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, short value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, byte value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, char value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, double value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, float value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, boolean value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n+        buffer.append(value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            Object item = array[i];\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an array type.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     * @since 2.0\n+     */\n+    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n+        buffer.append(arrayStart);\n+        int length = Array.getLength(array);\n+        for (int i = 0; i < length; i++) {\n+            Object item = Array.get(array, i);\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the class name.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose name to output\n+     */\n+    protected void appendClassName(StringBuffer buffer, Object object) {\n+        if (useClassName && object != null) {\n+            register(object);\n+            if (useShortClassName) {\n+                buffer.append(getShortClassName(object.getClass()));\n+            } else {\n+                buffer.append(object.getClass().getName());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose id to output\n+     */\n+    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n+        if (this.isUseIdentityHashCode() && object!=null) {\n+            register(object);\n+            buffer.append('@');\n+            buffer.append(Integer.toHexString(System.identityHashCode(object)));\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the content start.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendContentStart(StringBuffer buffer) {\n+        buffer.append(contentStart);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the content end.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendContentEnd(StringBuffer buffer) {\n+        buffer.append(contentEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\n+     *\n+     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     */\n+    protected void appendNullText(StringBuffer buffer, String fieldName) {\n+        buffer.append(nullText);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the field separator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendFieldSeparator(StringBuffer buffer) {\n+        buffer.append(fieldSeparator);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the field start.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     */\n+    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n+        if (useFieldNames && fieldName != null) {\n+            buffer.append(fieldName);\n+            buffer.append(fieldNameValueSeparator);\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString<code> the field end.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     */\n+    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n+        appendFieldSeparator(buffer);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a size summary.</p>\n+     *\n+     * <p>The size summary is used to summarize the contents of\n+     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\n+     *\n+     * <p>The output consists of a prefix, the passed in size\n+     * and a suffix.</p>\n+     *\n+     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param size  the size to append\n+     */\n+    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\n+        buffer.append(sizeStartText);\n+        buffer.append(size);\n+        buffer.append(sizeEndText);\n+    }\n+\n+    /**\n+     * <p>Is this field to be output in full detail.</p>\n+     *\n+     * <p>This method converts a detail request into a detail level.\n+     * The calling code may request full detail (<code>true</code>),\n+     * but a subclass might ignore that and always return\n+     * <code>false</code>. The calling code may pass in\n+     * <code>null</code> indicating that it doesn't care about\n+     * the detail level. In this case the default detail level is\n+     * used.</p>\n+     *\n+     * @param fullDetailRequest  the detail level requested\n+     * @return whether full detail is to be shown\n+     */\n+    protected boolean isFullDetail(Boolean fullDetailRequest) {\n+        if (fullDetailRequest == null) {\n+            return defaultFullDetail;\n+        }\n+        return fullDetailRequest.booleanValue();\n+    }\n+\n+    /**\n+     * <p>Gets the short class name for a class.</p>\n+     *\n+     * <p>The short class name is the classname excluding\n+     * the package name.</p>\n+     *\n+     * @param cls  the <code>Class</code> to get the short name of\n+     * @return the short name\n+     */\n+    protected String getShortClassName(Class<?> cls) {\n+        return ClassUtils.getShortClassName(cls);\n+    }\n+\n+    // Setters and getters for the customizable parts of the style\n+    // These methods are not expected to be overridden, except to make public\n+    // (They are not public so that immutable subclasses can be written)\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the class name.</p>\n+     *\n+     * @return the current useClassName flag\n+     */\n+    protected boolean isUseClassName() {\n+        return useClassName;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the class name.</p>\n+     *\n+     * @param useClassName  the new useClassName flag\n+     */\n+    protected void setUseClassName(boolean useClassName) {\n+        this.useClassName = useClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to output short or long class names.</p>\n+     *\n+     * @return the current useShortClassName flag\n+     * @since 2.0\n+     */\n+    protected boolean isUseShortClassName() {\n+        return useShortClassName;\n+    }\n+\n+    /**\n+     * <p>Sets whether to output short or long class names.</p>\n+     *\n+     * @param useShortClassName  the new useShortClassName flag\n+     * @since 2.0\n+     */\n+    protected void setUseShortClassName(boolean useShortClassName) {\n+        this.useShortClassName = useShortClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the identity hash code.</p>\n+     *\n+     * @return the current useIdentityHashCode flag\n+     */\n+    protected boolean isUseIdentityHashCode() {\n+        return useIdentityHashCode;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the identity hash code.</p>\n+     *\n+     * @param useIdentityHashCode  the new useIdentityHashCode flag\n+     */\n+    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n+        this.useIdentityHashCode = useIdentityHashCode;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the field names passed in.</p>\n+     *\n+     * @return the current useFieldNames flag\n+     */\n+    protected boolean isUseFieldNames() {\n+        return useFieldNames;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the field names passed in.</p>\n+     *\n+     * @param useFieldNames  the new useFieldNames flag\n+     */\n+    protected void setUseFieldNames(boolean useFieldNames) {\n+        this.useFieldNames = useFieldNames;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n+     * @return the current defaultFullDetail flag\n+     */\n+    protected boolean isDefaultFullDetail() {\n+        return defaultFullDetail;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n+     * @param defaultFullDetail  the new defaultFullDetail flag\n+     */\n+    protected void setDefaultFullDetail(boolean defaultFullDetail) {\n+        this.defaultFullDetail = defaultFullDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to output array content detail.</p>\n+     *\n+     * @return the current array content detail setting\n+     */\n+    protected boolean isArrayContentDetail() {\n+        return arrayContentDetail;\n+    }\n+\n+    /**\n+     * <p>Sets whether to output array content detail.</p>\n+     *\n+     * @param arrayContentDetail  the new arrayContentDetail flag\n+     */\n+    protected void setArrayContentDetail(boolean arrayContentDetail) {\n+        this.arrayContentDetail = arrayContentDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array start text.</p>\n+     *\n+     * @return the current array start text\n+     */\n+    protected String getArrayStart() {\n+        return arrayStart;\n+    }\n+\n+    /**\n+     * <p>Sets the array start text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arrayStart  the new array start text\n+     */\n+    protected void setArrayStart(String arrayStart) {\n+        if (arrayStart == null) {\n+            arrayStart = \"\";\n+        }\n+        this.arrayStart = arrayStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array end text.</p>\n+     *\n+     * @return the current array end text\n+     */\n+    protected String getArrayEnd() {\n+        return arrayEnd;\n+    }\n+\n+    /**\n+     * <p>Sets the array end text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arrayEnd  the new array end text\n+     */\n+    protected void setArrayEnd(String arrayEnd) {\n+        if (arrayEnd == null) {\n+            arrayEnd = \"\";\n+        }\n+        this.arrayEnd = arrayEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array separator text.</p>\n+     *\n+     * @return the current array separator text\n+     */\n+    protected String getArraySeparator() {\n+        return arraySeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the array separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arraySeparator  the new array separator text\n+     */\n+    protected void setArraySeparator(String arraySeparator) {\n+        if (arraySeparator == null) {\n+            arraySeparator = \"\";\n+        }\n+        this.arraySeparator = arraySeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the content start text.</p>\n+     *\n+     * @return the current content start text\n+     */\n+    protected String getContentStart() {\n+        return contentStart;\n+    }\n+\n+    /**\n+     * <p>Sets the content start text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param contentStart  the new content start text\n+     */\n+    protected void setContentStart(String contentStart) {\n+        if (contentStart == null) {\n+            contentStart = \"\";\n+        }\n+        this.contentStart = contentStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the content end text.</p>\n+     *\n+     * @return the current content end text\n+     */\n+    protected String getContentEnd() {\n+        return contentEnd;\n+    }\n+\n+    /**\n+     * <p>Sets the content end text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param contentEnd  the new content end text\n+     */\n+    protected void setContentEnd(String contentEnd) {\n+        if (contentEnd == null) {\n+            contentEnd = \"\";\n+        }\n+        this.contentEnd = contentEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the field name value separator text.</p>\n+     *\n+     * @return the current field name value separator text\n+     */\n+    protected String getFieldNameValueSeparator() {\n+        return fieldNameValueSeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the field name value separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param fieldNameValueSeparator  the new field name value separator text\n+     */\n+    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n+        if (fieldNameValueSeparator == null) {\n+            fieldNameValueSeparator = \"\";\n+        }\n+        this.fieldNameValueSeparator = fieldNameValueSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the field separator text.</p>\n+     *\n+     * @return the current field separator text\n+     */\n+    protected String getFieldSeparator() {\n+        return fieldSeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the field separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param fieldSeparator  the new field separator text\n+     */\n+    protected void setFieldSeparator(String fieldSeparator) {\n+        if (fieldSeparator == null) {\n+            fieldSeparator = \"\";\n+        }\n+        this.fieldSeparator = fieldSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether the field separator should be added at the start\n+     * of each buffer.</p>\n+     *\n+     * @return the fieldSeparatorAtStart flag\n+     * @since 2.0\n+     */\n+    protected boolean isFieldSeparatorAtStart() {\n+        return fieldSeparatorAtStart;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the start\n+     * of each buffer.</p>\n+     *\n+     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     * @since 2.0\n+     */\n+    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether the field separator should be added at the end\n+     * of each buffer.</p>\n+     *\n+     * @return fieldSeparatorAtEnd flag\n+     * @since 2.0\n+     */\n+    protected boolean isFieldSeparatorAtEnd() {\n+        return fieldSeparatorAtEnd;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the end\n+     * of each buffer.</p>\n+     *\n+     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     * @since 2.0\n+     */\n+    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the text to output when <code>null</code> found.</p>\n+     *\n+     * @return the current text to output when null found\n+     */\n+    protected String getNullText() {\n+        return nullText;\n+    }\n+\n+    /**\n+     * <p>Sets the text to output when <code>null</code> found.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param nullText  the new text to output when null found\n+     */\n+    protected void setNullText(String nullText) {\n+        if (nullText == null) {\n+            nullText = \"\";\n+        }\n+        this.nullText = nullText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the start text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * @return the current start of size text\n+     */\n+    protected String getSizeStartText() {\n+        return sizeStartText;\n+    }\n+\n+    /**\n+     * <p>Sets the start text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param sizeStartText  the new start of size text\n+     */\n+    protected void setSizeStartText(String sizeStartText) {\n+        if (sizeStartText == null) {\n+            sizeStartText = \"\";\n+        }\n+        this.sizeStartText = sizeStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the end text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * @return the current end of size text\n+     */\n+    protected String getSizeEndText() {\n+        return sizeEndText;\n+    }\n+\n+    /**\n+     * <p>Sets the end text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param sizeEndText  the new end of size text\n+     */\n+    protected void setSizeEndText(String sizeEndText) {\n+        if (sizeEndText == null) {\n+            sizeEndText = \"\";\n+        }\n+        this.sizeEndText = sizeEndText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the start text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * @return the current start of summary text\n+     */\n+    protected String getSummaryObjectStartText() {\n+        return summaryObjectStartText;\n+    }\n+\n+    /**\n+     * <p>Sets the start text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param summaryObjectStartText  the new start of summary text\n+     */\n+    protected void setSummaryObjectStartText(String summaryObjectStartText) {\n+        if (summaryObjectStartText == null) {\n+            summaryObjectStartText = \"\";\n+        }\n+        this.summaryObjectStartText = summaryObjectStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the end text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * @return the current end of summary text\n+     */\n+    protected String getSummaryObjectEndText() {\n+        return summaryObjectEndText;\n+    }\n+\n+    /**\n+     * <p>Sets the end text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param summaryObjectEndText  the new end of summary text\n+     */\n+    protected void setSummaryObjectEndText(String summaryObjectEndText) {\n+        if (summaryObjectEndText == null) {\n+            summaryObjectEndText = \"\";\n+        }\n+        this.summaryObjectEndText = summaryObjectEndText;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Default <code>ToStringStyle</code>.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class DefaultToStringStyle extends ToStringStyle {\n+\n+        /**\n+         * Required for serialization support.\n+         *\n+         * @see java.io.Serializable\n+         */\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        DefaultToStringStyle() {\n+            super();\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.DEFAULT_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that does not print out\n+     * the field names.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.\n+     */\n+    private static final class NoFieldNameToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        NoFieldNameToStringStyle() {\n+            super();\n+            this.setUseFieldNames(false);\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.NO_FIELD_NAMES_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that prints out the short\n+     * class name and no identity hashcode.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class ShortPrefixToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        ShortPrefixToStringStyle() {\n+            super();\n+            this.setUseShortClassName(true);\n+            this.setUseIdentityHashCode(false);\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.SHORT_PREFIX_STYLE;\n+        }\n+\n+    }\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that does not print out the\n+     * classname, identity hashcode, content start or field name.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class SimpleToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        SimpleToStringStyle() {\n+            super();\n+            this.setUseClassName(false);\n+            this.setUseIdentityHashCode(false);\n+            this.setUseFieldNames(false);\n+            this.setContentStart(\"\");\n+            this.setContentEnd(\"\");\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.SIMPLE_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class MultiLineToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        MultiLineToStringStyle() {\n+            super();\n+            this.setContentStart(\"[\");\n+            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n+            this.setFieldSeparatorAtStart(true);\n+            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.MULTI_LINE_STYLE;\n+        }\n+\n+    }\n+\n+}\n",
            "diff_size": 2286
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/59/ToStringStyle.java\nindex e5c90493b4..3010bbdc1c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/intellij/59/ToStringStyle.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -29,6 +29,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\r\n \r\n import java.io.Serializable;\r\n@@ -80,2207 +81,2207 @@ import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.System\n  */\r\n public abstract class ToStringStyle implements Serializable {\r\n \r\n-    /**\r\n-     * Serialization version ID.\r\n-     */\r\n-    private static final long serialVersionUID = -2587890625525655916L;\r\n-\r\n-    /**\r\n-     * The default toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\r\n-\r\n-    /**\r\n-     * The multi line toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[\r\n-     *   name=John Doe\r\n-     *   age=33\r\n-     *   smoker=false\r\n-     * ]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\r\n-\r\n-    /**\r\n-     * The no field names toString style. Using the Using the\r\n-     * <code>Person</code> example from {@link ToStringBuilder}, the output\r\n-     * would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[John Doe,33,false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\r\n-\r\n-    /**\r\n-     * The short prefix toString style. Using the <code>Person</code> example\r\n-     * from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     *\r\n-     * @since 2.1\r\n-     */\r\n-    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\r\n-\r\n-    /**\r\n-     * The simple toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * John Doe,33,false\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * A registry of objects used by <code>reflectionToString</code> methods\r\n-     * to detect cyclical object references and avoid infinite loops.\r\n-     * </p>\r\n-     */\r\n-    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n-        new ThreadLocal<WeakHashMap<Object,Object>>();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\r\n-     * methods in the current thread.\r\n-     * </p>\r\n-     *\r\n-     * @return Set the registry of objects being traversed\r\n-     */\r\n-    static Map<Object, Object> getRegistry() {\r\n-        return REGISTRY.get();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns <code>true</code> if the registry contains the given object.\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to lookup in the registry.\r\n-     * @return boolean <code>true</code> if the registry contains the given\r\n-     *             object.\r\n-     */\r\n-    static boolean isRegistered(Object value) {\r\n-        Map<Object, Object> m = getRegistry();\r\n-        return m != null && m.containsKey(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Registers the given object. Used by the reflection methods to avoid\r\n-     * infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to register.\r\n-     */\r\n-    static void register(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m == null) {\r\n-                REGISTRY.set(new WeakHashMap<Object, Object>());\r\n-            }\r\n-            getRegistry().put(value, null);\r\n+  /**\r\n+   * Serialization version ID.\r\n+   */\r\n+  private static final long serialVersionUID = -2587890625525655916L;\r\n+\r\n+  /**\r\n+   * The default toString style. Using the Using the <code>Person</code>\r\n+   * example from {@link ToStringBuilder}, the output would look like this:\r\n+   *\r\n+   * <pre>\r\n+   * Person@182f0db[name=John Doe,age=33,smoker=false]\r\n+   * </pre>\r\n+   */\r\n+  public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\r\n+\r\n+  /**\r\n+   * The multi line toString style. Using the Using the <code>Person</code>\r\n+   * example from {@link ToStringBuilder}, the output would look like this:\r\n+   *\r\n+   * <pre>\r\n+   * Person@182f0db[\r\n+   *   name=John Doe\r\n+   *   age=33\r\n+   *   smoker=false\r\n+   * ]\r\n+   * </pre>\r\n+   */\r\n+  public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\r\n+\r\n+  /**\r\n+   * The no field names toString style. Using the Using the\r\n+   * <code>Person</code> example from {@link ToStringBuilder}, the output\r\n+   * would look like this:\r\n+   *\r\n+   * <pre>\r\n+   * Person@182f0db[John Doe,33,false]\r\n+   * </pre>\r\n+   */\r\n+  public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\r\n+\r\n+  /**\r\n+   * The short prefix toString style. Using the <code>Person</code> example\r\n+   * from {@link ToStringBuilder}, the output would look like this:\r\n+   *\r\n+   * <pre>\r\n+   * Person[name=John Doe,age=33,smoker=false]\r\n+   * </pre>\r\n+   *\r\n+   * @since 2.1\r\n+   */\r\n+  public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\r\n+\r\n+  /**\r\n+   * The simple toString style. Using the Using the <code>Person</code>\r\n+   * example from {@link ToStringBuilder}, the output would look like this:\r\n+   *\r\n+   * <pre>\r\n+   * John Doe,33,false\r\n+   * </pre>\r\n+   */\r\n+  public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\r\n+\r\n+  /**\r\n+   * <p>\r\n+   * A registry of objects used by <code>reflectionToString</code> methods\r\n+   * to detect cyclical object references and avoid infinite loops.\r\n+   * </p>\r\n+   */\r\n+  private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n+    new ThreadLocal<WeakHashMap<Object, Object>>();\r\n+\r\n+  /**\r\n+   * <p>\r\n+   * Returns the registry of objects being traversed by the <code>reflectionToString</code>\r\n+   * methods in the current thread.\r\n+   * </p>\r\n+   *\r\n+   * @return Set the registry of objects being traversed\r\n+   */\r\n+  static Map<Object, Object> getRegistry() {\r\n+    return REGISTRY.get();\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>\r\n+   * Returns <code>true</code> if the registry contains the given object.\r\n+   * Used by the reflection methods to avoid infinite loops.\r\n+   * </p>\r\n+   *\r\n+   * @param value\r\n+   *                  The object to lookup in the registry.\r\n+   * @return boolean <code>true</code> if the registry contains the given\r\n+   *             object.\r\n+   */\r\n+  static boolean isRegistered(Object value) {\r\n+    Map<Object, Object> m = getRegistry();\r\n+    return m != null && m.containsKey(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>\r\n+   * Registers the given object. Used by the reflection methods to avoid\r\n+   * infinite loops.\r\n+   * </p>\r\n+   *\r\n+   * @param value\r\n+   *                  The object to register.\r\n+   */\r\n+  static void register(Object value) {\r\n+    if (value != null) {\r\n+      Map<Object, Object> m = getRegistry();\r\n+      if (m == null) {\r\n+        REGISTRY.set(new WeakHashMap<Object, Object>());\r\n+      }\r\n+      getRegistry().put(value, null);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>\r\n+   * Unregisters the given object.\r\n+   * </p>\r\n+   *\r\n+   * <p>\r\n+   * Used by the reflection methods to avoid infinite loops.\r\n+   * </p>\r\n+   *\r\n+   * @param value\r\n+   *                  The object to unregister.\r\n+   */\r\n+  static void unregister(Object value) {\r\n+    if (value != null) {\r\n+      Map<Object, Object> m = getRegistry();\r\n+      if (m != null) {\r\n+        m.remove(value);\r\n+        if (m.isEmpty()) {\r\n+          REGISTRY.remove();\r\n         }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Unregisters the given object.\r\n-     * </p>\r\n-     *\r\n-     * <p>\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to unregister.\r\n-     */\r\n-    static void unregister(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m != null) {\r\n-                m.remove(value);\r\n-                if (m.isEmpty()) {\r\n-                    REGISTRY.remove();\r\n-                }\r\n-            }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Whether to use the field names, the default is <code>true</code>.\r\n+   */\r\n+  private boolean useFieldNames = true;\r\n+\r\n+  /**\r\n+   * Whether to use the class name, the default is <code>true</code>.\r\n+   */\r\n+  private boolean useClassName = true;\r\n+\r\n+  /**\r\n+   * Whether to use short class names, the default is <code>false</code>.\r\n+   */\r\n+  private boolean useShortClassName = false;\r\n+\r\n+  /**\r\n+   * Whether to use the identity hash code, the default is <code>true</code>.\r\n+   */\r\n+  private boolean useIdentityHashCode = true;\r\n+\r\n+  /**\r\n+   * The content start <code>'['</code>.\r\n+   */\r\n+  private String contentStart = \"[\";\r\n+\r\n+  /**\r\n+   * The content end <code>']'</code>.\r\n+   */\r\n+  private String contentEnd = \"]\";\r\n+\r\n+  /**\r\n+   * The field name value separator <code>'='</code>.\r\n+   */\r\n+  private String fieldNameValueSeparator = \"=\";\r\n+\r\n+  /**\r\n+   * Whether the field separator should be added before any other fields.\r\n+   */\r\n+  private boolean fieldSeparatorAtStart = false;\r\n+\r\n+  /**\r\n+   * Whether the field separator should be added after any other fields.\r\n+   */\r\n+  private boolean fieldSeparatorAtEnd = false;\r\n+\r\n+  /**\r\n+   * The field separator <code>','</code>.\r\n+   */\r\n+  private String fieldSeparator = \",\";\r\n+\r\n+  /**\r\n+   * The array start <code>'{'</code>.\r\n+   */\r\n+  private String arrayStart = \"{\";\r\n+\r\n+  /**\r\n+   * The array separator <code>','</code>.\r\n+   */\r\n+  private String arraySeparator = \",\";\r\n+\r\n+  /**\r\n+   * The detail for array content.\r\n+   */\r\n+  private boolean arrayContentDetail = true;\r\n+\r\n+  /**\r\n+   * The array end <code>'}'</code>.\r\n+   */\r\n+  private String arrayEnd = \"}\";\r\n+\r\n+  /**\r\n+   * The value to use when fullDetail is <code>null</code>,\r\n+   * the default value is <code>true</code>.\r\n+   */\r\n+  private boolean defaultFullDetail = true;\r\n+\r\n+  /**\r\n+   * The <code>null</code> text <code>'&lt;null&gt;'</code>.\r\n+   */\r\n+  private String nullText = \"<null>\";\r\n+\r\n+  /**\r\n+   * The summary size text start <code>'<size'</code>.\r\n+   */\r\n+  private String sizeStartText = \"<size=\";\r\n+\r\n+  /**\r\n+   * The summary size text start <code>'&gt;'</code>.\r\n+   */\r\n+  private String sizeEndText = \">\";\r\n+\r\n+  /**\r\n+   * The summary object text start <code>'&lt;'</code>.\r\n+   */\r\n+  private String summaryObjectStartText = \"<\";\r\n+\r\n+  /**\r\n+   * The summary object text start <code>'&gt;'</code>.\r\n+   */\r\n+  private String summaryObjectEndText = \">\";\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Constructor.</p>\r\n+   */\r\n+  protected ToStringStyle() {\r\n+    super();\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the superclass toString.</p>\r\n+   * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n+   *\r\n+   * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param superToString  the <code>super.toString()</code>\r\n+   * @since 2.0\r\n+   */\r\n+  public void appendSuper(StringBuffer buffer, String superToString) {\r\n+    appendToString(buffer, superToString);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> another toString.</p>\r\n+   * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n+   *\r\n+   * <p>A <code>null</code> <code>toString</code> is ignored.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param toString  the additional <code>toString</code>\r\n+   * @since 2.0\r\n+   */\r\n+  public void appendToString(StringBuffer buffer, String toString) {\r\n+    if (toString != null) {\r\n+      int pos1 = toString.indexOf(contentStart) + contentStart.length();\r\n+      int pos2 = toString.lastIndexOf(contentEnd);\r\n+      if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\r\n+        String data = toString.substring(pos1, pos2);\r\n+        if (fieldSeparatorAtStart) {\r\n+          removeLastFieldSeparator(buffer);\r\n         }\r\n-    }\r\n-\r\n-    /**\r\n-     * Whether to use the field names, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useFieldNames = true;\r\n-\r\n-    /**\r\n-     * Whether to use the class name, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useClassName = true;\r\n-\r\n-    /**\r\n-     * Whether to use short class names, the default is <code>false</code>.\r\n-     */\r\n-    private boolean useShortClassName = false;\r\n-\r\n-    /**\r\n-     * Whether to use the identity hash code, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useIdentityHashCode = true;\r\n-\r\n-    /**\r\n-     * The content start <code>'['</code>.\r\n-     */\r\n-    private String contentStart = \"[\";\r\n-\r\n-    /**\r\n-     * The content end <code>']'</code>.\r\n-     */\r\n-    private String contentEnd = \"]\";\r\n-\r\n-    /**\r\n-     * The field name value separator <code>'='</code>.\r\n-     */\r\n-    private String fieldNameValueSeparator = \"=\";\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added before any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtStart = false;\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added after any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtEnd = false;\r\n-\r\n-    /**\r\n-     * The field separator <code>','</code>.\r\n-     */\r\n-    private String fieldSeparator = \",\";\r\n-\r\n-    /**\r\n-     * The array start <code>'{'</code>.\r\n-     */\r\n-    private String arrayStart = \"{\";\r\n-\r\n-    /**\r\n-     * The array separator <code>','</code>.\r\n-     */\r\n-    private String arraySeparator = \",\";\r\n-\r\n-    /**\r\n-     * The detail for array content.\r\n-     */\r\n-    private boolean arrayContentDetail = true;\r\n-\r\n-    /**\r\n-     * The array end <code>'}'</code>.\r\n-     */\r\n-    private String arrayEnd = \"}\";\r\n-\r\n-    /**\r\n-     * The value to use when fullDetail is <code>null</code>,\r\n-     * the default value is <code>true</code>.\r\n-     */\r\n-    private boolean defaultFullDetail = true;\r\n-\r\n-    /**\r\n-     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\r\n-     */\r\n-    private String nullText = \"<null>\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'<size'</code>.\r\n-     */\r\n-    private String sizeStartText = \"<size=\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String sizeEndText = \">\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&lt;'</code>.\r\n-     */\r\n-    private String summaryObjectStartText = \"<\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String summaryObjectEndText = \">\";\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Constructor.</p>\r\n-     */\r\n-    protected ToStringStyle() {\r\n-        super();\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the superclass toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param superToString  the <code>super.toString()</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendSuper(StringBuffer buffer, String superToString) {\r\n-        appendToString(buffer, superToString);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> another toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param toString  the additional <code>toString</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendToString(StringBuffer buffer, String toString) {\r\n-        if (toString != null) {\r\n-            int pos1 = toString.indexOf(contentStart) + contentStart.length();\r\n-            int pos2 = toString.lastIndexOf(contentEnd);\r\n-            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\r\n-                String data = toString.substring(pos1, pos2);\r\n-                if (fieldSeparatorAtStart) {\r\n-                    removeLastFieldSeparator(buffer);\r\n-                }\r\n-                buffer.append(data);\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n+        buffer.append(data);\r\n+        appendFieldSeparator(buffer);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the start of data indicator.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param object  the <code>Object</code> to build a <code>toString</code> for\r\n+   */\r\n+  public void appendStart(StringBuffer buffer, Object object) {\r\n+    if (object != null) {\r\n+      appendClassName(buffer, object);\r\n+      appendIdentityHashCode(buffer, object);\r\n+      appendContentStart(buffer);\r\n+      if (fieldSeparatorAtStart) {\r\n+        appendFieldSeparator(buffer);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the end of data indicator.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param object  the <code>Object</code> to build a\r\n+   *  <code>toString</code> for.\r\n+   */\r\n+  public void appendEnd(StringBuffer buffer, Object object) {\r\n+    if (this.fieldSeparatorAtEnd == false) {\r\n+      removeLastFieldSeparator(buffer);\r\n+    }\r\n+    appendContentEnd(buffer);\r\n+    unregister(object);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Remove the last field separator from the buffer.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @since 2.0\r\n+   */\r\n+  protected void removeLastFieldSeparator(StringBuffer buffer) {\r\n+    int len = buffer.length();\r\n+    int sepLen = fieldSeparator.length();\r\n+    if (len > 0 && sepLen > 0 && len >= sepLen) {\r\n+      boolean match = true;\r\n+      for (int i = 0; i < sepLen; i++) {\r\n+        if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\r\n+          match = false;\r\n+          break;\r\n         }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the start of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a <code>toString</code> for\r\n-     */\r\n-    public void appendStart(StringBuffer buffer, Object object) {\r\n-        if (object != null) {\r\n-            appendClassName(buffer, object);\r\n-            appendIdentityHashCode(buffer, object);\r\n-            appendContentStart(buffer);\r\n-            if (fieldSeparatorAtStart) {\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n+      }\r\n+      if (match) {\r\n+        buffer.setLength(len - sepLen);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>\r\n+   * value, printing the full <code>toString</code> of the\r\n+   * <code>Object</code> passed in.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (value == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else {\r\n+      appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>,\r\n+   * correctly interpreting its type.</p>\r\n+   *\r\n+   * <p>This method performs the main lookup by Class type to correctly\r\n+   * route arrays, <code>Collections</code>, <code>Maps</code> and\r\n+   * <code>Objects</code> to the appropriate method.</p>\r\n+   *\r\n+   * <p>Either detail or summary views can be specified.</p>\r\n+   *\r\n+   * <p>If a cycle is detected, an object will be appended with the\r\n+   * <code>Object.toString()</code> format.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   * @param detail  output detail or not\r\n+   */\r\n+  protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n+    if (isRegistered(value)\r\n+      && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n+      appendCyclicObject(buffer, fieldName, value);\r\n+      return;\r\n+    }\r\n+\r\n+    register(value);\r\n+\r\n+    try {\r\n+      if (value instanceof Collection<?>) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (Collection<?>) value);\r\n+        } else {\r\n+          appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\r\n         }\r\n-    }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the end of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a\r\n-     *  <code>toString</code> for.\r\n-     */\r\n-    public void appendEnd(StringBuffer buffer, Object object) {\r\n-        if (this.fieldSeparatorAtEnd == false) {\r\n-            removeLastFieldSeparator(buffer);\r\n+      } else if (value instanceof Map<?, ?>) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (Map<?, ?>) value);\r\n+        } else {\r\n+          appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\r\n         }\r\n-        appendContentEnd(buffer);\r\n-        unregister(object);\r\n-    }\r\n \r\n-    /**\r\n-     * <p>Remove the last field separator from the buffer.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @since 2.0\r\n-     */\r\n-    protected void removeLastFieldSeparator(StringBuffer buffer) {\r\n-        int len = buffer.length();\r\n-        int sepLen = fieldSeparator.length();\r\n-        if (len > 0 && sepLen > 0 && len >= sepLen) {\r\n-            boolean match = true;\r\n-            for (int i = 0; i < sepLen; i++) {\r\n-                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\r\n-                    match = false;\r\n-                    break;\r\n-                }\r\n-            }\r\n-            if (match) {\r\n-                buffer.setLength(len - sepLen);\r\n-            }\r\n+      } else if (value instanceof long[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (long[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (long[]) value);\r\n         }\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full <code>toString</code> of the\r\n-     * <code>Object</code> passed in.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (value == null) {\r\n-            appendNullText(buffer, fieldName);\r\n \r\n+      } else if (value instanceof int[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (int[]) value);\r\n         } else {\r\n-            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\r\n+          appendSummary(buffer, fieldName, (int[]) value);\r\n         }\r\n \r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>,\r\n-     * correctly interpreting its type.</p>\r\n-     *\r\n-     * <p>This method performs the main lookup by Class type to correctly\r\n-     * route arrays, <code>Collections</code>, <code>Maps</code> and\r\n-     * <code>Objects</code> to the appropriate method.</p>\r\n-     *\r\n-     * <p>Either detail or summary views can be specified.</p>\r\n-     *\r\n-     * <p>If a cycle is detected, an object will be appended with the\r\n-     * <code>Object.toString()</code> format.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @param detail  output detail or not\r\n-     */\r\n-    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n-        if (isRegistered(value)\r\n-            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n-           appendCyclicObject(buffer, fieldName, value);\r\n-           return;\r\n+      } else if (value instanceof short[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (short[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (short[]) value);\r\n         }\r\n \r\n-        register(value);\r\n-\r\n-        try {\r\n-            if (value instanceof Collection<?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Collection<?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof Map<?, ?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof long[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (long[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (long[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof int[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (int[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (int[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof short[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (short[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (short[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof byte[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (byte[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (byte[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof char[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (char[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (char[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof double[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (double[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (double[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof float[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (float[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (float[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof boolean[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (boolean[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (boolean[]) value);\r\n-                }\r\n-\r\n-            } else if (value.getClass().isArray()) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Object[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (Object[]) value);\r\n-                }\r\n-\r\n-            } else {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, value);\r\n-                }\r\n-            }\r\n-        } finally {\r\n-            unregister(value);\r\n+      } else if (value instanceof byte[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (byte[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (byte[]) value);\r\n         }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value that has been detected to participate in a cycle. This\r\n-     * implementation will print the standard string value of the value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     *\r\n-     * @since 2.2\r\n-     */\r\n-    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n-       ObjectUtils.identityToString(buffer, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full detail of the <code>Object</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(value);\r\n-    }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param coll  the <code>Collection</code> to add to the\r\n-     *  <code>toString</code>, not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\r\n-        buffer.append(coll);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param map  the <code>Map</code> to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\r\n-        buffer.append(map);\r\n-    }\r\n+      } else if (value instanceof char[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (char[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (char[]) value);\r\n+        }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing a summary of the <code>Object</code>.</P>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(summaryObjectStartText);\r\n-        buffer.append(getShortClassName(value.getClass()));\r\n-        buffer.append(summaryObjectEndText);\r\n-    }\r\n+      } else if (value instanceof double[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (double[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (double[]) value);\r\n+        }\r\n \r\n-    //----------------------------------------------------------------------------\r\n+      } else if (value instanceof float[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (float[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (float[]) value);\r\n+        }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n+      } else if (value instanceof boolean[]) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (boolean[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (boolean[]) value);\r\n+        }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\r\n-        buffer.append(value);\r\n-    }\r\n+      } else if (value.getClass().isArray()) {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, (Object[]) value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, (Object[]) value);\r\n+        }\r\n \r\n-    //----------------------------------------------------------------------------\r\n+      } else {\r\n+        if (detail) {\r\n+          appendDetail(buffer, fieldName, value);\r\n+        } else {\r\n+          appendSummary(buffer, fieldName, value);\r\n+        }\r\n+      }\r\n+    } finally {\r\n+      unregister(value);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>\r\n+   * value that has been detected to participate in a cycle. This\r\n+   * implementation will print the standard string value of the value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   *\r\n+   * @since 2.2\r\n+   */\r\n+  protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n+    ObjectUtils.identityToString(buffer, value);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>\r\n+   * value, printing the full detail of the <code>Object</code>.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param coll  the <code>Collection</code> to add to the\r\n+   *  <code>toString</code>, not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\r\n+    buffer.append(coll);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param map  the <code>Map</code> to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\r\n+    buffer.append(map);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>\r\n+   * value, printing a summary of the <code>Object</code>.</P>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\r\n+    buffer.append(summaryObjectStartText);\r\n+    buffer.append(getShortClassName(value.getClass()));\r\n+    buffer.append(summaryObjectEndText);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>long</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, long value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>long</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>int</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, int value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>int</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>short</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, short value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>short</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>byte</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, byte value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>byte</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>char</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, char value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>char</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>double</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, double value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>double</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>float</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, float value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>float</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, boolean value) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+    appendDetail(buffer, fieldName, value);\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n+   * value.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param value  the value to add to the <code>toString</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\r\n+    buffer.append(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>Object</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the toString\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of an\r\n+   * <code>Object</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      Object item = array[i];\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      if (item == null) {\r\n+        appendNullText(buffer, fieldName);\r\n+\r\n+      } else {\r\n+        appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n+      }\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of an array type.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   * @since 2.0\r\n+   */\r\n+  protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\r\n+    buffer.append(arrayStart);\r\n+    int length = Array.getLength(array);\r\n+    for (int i = 0; i < length; i++) {\r\n+      Object item = Array.get(array, i);\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      if (item == null) {\r\n+        appendNullText(buffer, fieldName);\r\n+\r\n+      } else {\r\n+        appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n+      }\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of an\r\n+   * <code>Object</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>long</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>long</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>long</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an <code>int</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of an\r\n+   * <code>int</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of an\r\n+   * <code>int</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>short</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>short</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>short</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>byte</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>byte</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>byte</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>char</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the <code>toString</code>\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>char</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>char</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>double</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the toString\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>double</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>double</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>float</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the toString\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>float</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>float</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n+   * array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   * @param array  the array to add to the toString\r\n+   * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n+   *  for summary info, <code>null</code> for style decides\r\n+   */\r\n+  public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\r\n+    appendFieldStart(buffer, fieldName);\r\n+\r\n+    if (array == null) {\r\n+      appendNullText(buffer, fieldName);\r\n+\r\n+    } else if (isFullDetail(fullDetail)) {\r\n+      appendDetail(buffer, fieldName, array);\r\n+\r\n+    } else {\r\n+      appendSummary(buffer, fieldName, array);\r\n+    }\r\n+\r\n+    appendFieldEnd(buffer, fieldName);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the detail of a\r\n+   * <code>boolean</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\r\n+    buffer.append(arrayStart);\r\n+    for (int i = 0; i < array.length; i++) {\r\n+      if (i > 0) {\r\n+        buffer.append(arraySeparator);\r\n+      }\r\n+      appendDetail(buffer, fieldName, array[i]);\r\n+    }\r\n+    buffer.append(arrayEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a summary of a\r\n+   * <code>boolean</code> array.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param array  the array to add to the <code>toString</code>,\r\n+   *  not <code>null</code>\r\n+   */\r\n+  protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\r\n+    appendSummarySize(buffer, fieldName, array.length);\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the class name.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param object  the <code>Object</code> whose name to output\r\n+   */\r\n+  protected void appendClassName(StringBuffer buffer, Object object) {\r\n+    if (useClassName && object != null) {\r\n+      register(object);\r\n+      if (useShortClassName) {\r\n+        buffer.append(getShortClassName(object.getClass()));\r\n+      } else {\r\n+        buffer.append(object.getClass().getName());\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param object  the <code>Object</code> whose id to output\r\n+   */\r\n+  protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\r\n+    if (this.isUseIdentityHashCode() && object != null) {\r\n+      register(object);\r\n+      buffer.append('@');\r\n+      buffer.append(Integer.toHexString(System.identityHashCode(object)));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the content start.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   */\r\n+  protected void appendContentStart(StringBuffer buffer) {\r\n+    buffer.append(contentStart);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the content end.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   */\r\n+  protected void appendContentEnd(StringBuffer buffer) {\r\n+    buffer.append(contentEnd);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\r\n+   *\r\n+   * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   */\r\n+  protected void appendNullText(StringBuffer buffer, String fieldName) {\r\n+    buffer.append(nullText);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the field separator.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   */\r\n+  protected void appendFieldSeparator(StringBuffer buffer) {\r\n+    buffer.append(fieldSeparator);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> the field start.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name\r\n+   */\r\n+  protected void appendFieldStart(StringBuffer buffer, String fieldName) {\r\n+    if (useFieldNames && fieldName != null) {\r\n+      buffer.append(fieldName);\r\n+      buffer.append(fieldNameValueSeparator);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString<code> the field end.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   */\r\n+  protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\r\n+    appendFieldSeparator(buffer);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Append to the <code>toString</code> a size summary.</p>\r\n+   *\r\n+   * <p>The size summary is used to summarize the contents of\r\n+   * <code>Collections</code>, <code>Maps</code> and arrays.</p>\r\n+   *\r\n+   * <p>The output consists of a prefix, the passed in size\r\n+   * and a suffix.</p>\r\n+   *\r\n+   * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\r\n+   *\r\n+   * @param buffer  the <code>StringBuffer</code> to populate\r\n+   * @param fieldName  the field name, typically not used as already appended\r\n+   * @param size  the size to append\r\n+   */\r\n+  protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\r\n+    buffer.append(sizeStartText);\r\n+    buffer.append(size);\r\n+    buffer.append(sizeEndText);\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Is this field to be output in full detail.</p>\r\n+   *\r\n+   * <p>This method converts a detail request into a detail level.\r\n+   * The calling code may request full detail (<code>true</code>),\r\n+   * but a subclass might ignore that and always return\r\n+   * <code>false</code>. The calling code may pass in\r\n+   * <code>null</code> indicating that it doesn't care about\r\n+   * the detail level. In this case the default detail level is\r\n+   * used.</p>\r\n+   *\r\n+   * @param fullDetailRequest  the detail level requested\r\n+   * @return whether full detail is to be shown\r\n+   */\r\n+  protected boolean isFullDetail(Boolean fullDetailRequest) {\r\n+    if (fullDetailRequest == null) {\r\n+      return defaultFullDetail;\r\n+    }\r\n+    return fullDetailRequest.booleanValue();\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Gets the short class name for a class.</p>\r\n+   *\r\n+   * <p>The short class name is the classname excluding\r\n+   * the package name.</p>\r\n+   *\r\n+   * @param cls  the <code>Class</code> to get the short name of\r\n+   * @return the short name\r\n+   */\r\n+  protected String getShortClassName(Class<?> cls) {\r\n+    return ClassUtils.getShortClassName(cls);\r\n+  }\r\n+\r\n+  // Setters and getters for the customizable parts of the style\r\n+  // These methods are not expected to be overridden, except to make public\r\n+  // (They are not public so that immutable subclasses can be written)\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to use the class name.</p>\r\n+   *\r\n+   * @return the current useClassName flag\r\n+   */\r\n+  protected boolean isUseClassName() {\r\n+    return useClassName;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to use the class name.</p>\r\n+   *\r\n+   * @param useClassName  the new useClassName flag\r\n+   */\r\n+  protected void setUseClassName(boolean useClassName) {\r\n+    this.useClassName = useClassName;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to output short or long class names.</p>\r\n+   *\r\n+   * @return the current useShortClassName flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected boolean isUseShortClassName() {\r\n+    return useShortClassName;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to output short or long class names.</p>\r\n+   *\r\n+   * @param useShortClassName  the new useShortClassName flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected void setUseShortClassName(boolean useShortClassName) {\r\n+    this.useShortClassName = useShortClassName;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to use the identity hash code.</p>\r\n+   *\r\n+   * @return the current useIdentityHashCode flag\r\n+   */\r\n+  protected boolean isUseIdentityHashCode() {\r\n+    return useIdentityHashCode;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to use the identity hash code.</p>\r\n+   *\r\n+   * @param useIdentityHashCode  the new useIdentityHashCode flag\r\n+   */\r\n+  protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\r\n+    this.useIdentityHashCode = useIdentityHashCode;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to use the field names passed in.</p>\r\n+   *\r\n+   * @return the current useFieldNames flag\r\n+   */\r\n+  protected boolean isUseFieldNames() {\r\n+    return useFieldNames;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to use the field names passed in.</p>\r\n+   *\r\n+   * @param useFieldNames  the new useFieldNames flag\r\n+   */\r\n+  protected void setUseFieldNames(boolean useFieldNames) {\r\n+    this.useFieldNames = useFieldNames;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to use full detail when the caller doesn't\r\n+   * specify.</p>\r\n+   *\r\n+   * @return the current defaultFullDetail flag\r\n+   */\r\n+  protected boolean isDefaultFullDetail() {\r\n+    return defaultFullDetail;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to use full detail when the caller doesn't\r\n+   * specify.</p>\r\n+   *\r\n+   * @param defaultFullDetail  the new defaultFullDetail flag\r\n+   */\r\n+  protected void setDefaultFullDetail(boolean defaultFullDetail) {\r\n+    this.defaultFullDetail = defaultFullDetail;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether to output array content detail.</p>\r\n+   *\r\n+   * @return the current array content detail setting\r\n+   */\r\n+  protected boolean isArrayContentDetail() {\r\n+    return arrayContentDetail;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether to output array content detail.</p>\r\n+   *\r\n+   * @param arrayContentDetail  the new arrayContentDetail flag\r\n+   */\r\n+  protected void setArrayContentDetail(boolean arrayContentDetail) {\r\n+    this.arrayContentDetail = arrayContentDetail;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the array start text.</p>\r\n+   *\r\n+   * @return the current array start text\r\n+   */\r\n+  protected String getArrayStart() {\r\n+    return arrayStart;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the array start text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param arrayStart  the new array start text\r\n+   */\r\n+  protected void setArrayStart(String arrayStart) {\r\n+    if (arrayStart == null) {\r\n+      arrayStart = \"\";\r\n+    }\r\n+    this.arrayStart = arrayStart;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the array end text.</p>\r\n+   *\r\n+   * @return the current array end text\r\n+   */\r\n+  protected String getArrayEnd() {\r\n+    return arrayEnd;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the array end text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param arrayEnd  the new array end text\r\n+   */\r\n+  protected void setArrayEnd(String arrayEnd) {\r\n+    if (arrayEnd == null) {\r\n+      arrayEnd = \"\";\r\n+    }\r\n+    this.arrayEnd = arrayEnd;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the array separator text.</p>\r\n+   *\r\n+   * @return the current array separator text\r\n+   */\r\n+  protected String getArraySeparator() {\r\n+    return arraySeparator;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the array separator text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param arraySeparator  the new array separator text\r\n+   */\r\n+  protected void setArraySeparator(String arraySeparator) {\r\n+    if (arraySeparator == null) {\r\n+      arraySeparator = \"\";\r\n+    }\r\n+    this.arraySeparator = arraySeparator;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the content start text.</p>\r\n+   *\r\n+   * @return the current content start text\r\n+   */\r\n+  protected String getContentStart() {\r\n+    return contentStart;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the content start text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param contentStart  the new content start text\r\n+   */\r\n+  protected void setContentStart(String contentStart) {\r\n+    if (contentStart == null) {\r\n+      contentStart = \"\";\r\n+    }\r\n+    this.contentStart = contentStart;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the content end text.</p>\r\n+   *\r\n+   * @return the current content end text\r\n+   */\r\n+  protected String getContentEnd() {\r\n+    return contentEnd;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the content end text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param contentEnd  the new content end text\r\n+   */\r\n+  protected void setContentEnd(String contentEnd) {\r\n+    if (contentEnd == null) {\r\n+      contentEnd = \"\";\r\n+    }\r\n+    this.contentEnd = contentEnd;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the field name value separator text.</p>\r\n+   *\r\n+   * @return the current field name value separator text\r\n+   */\r\n+  protected String getFieldNameValueSeparator() {\r\n+    return fieldNameValueSeparator;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the field name value separator text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param fieldNameValueSeparator  the new field name value separator text\r\n+   */\r\n+  protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\r\n+    if (fieldNameValueSeparator == null) {\r\n+      fieldNameValueSeparator = \"\";\r\n+    }\r\n+    this.fieldNameValueSeparator = fieldNameValueSeparator;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the field separator text.</p>\r\n+   *\r\n+   * @return the current field separator text\r\n+   */\r\n+  protected String getFieldSeparator() {\r\n+    return fieldSeparator;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the field separator text.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param fieldSeparator  the new field separator text\r\n+   */\r\n+  protected void setFieldSeparator(String fieldSeparator) {\r\n+    if (fieldSeparator == null) {\r\n+      fieldSeparator = \"\";\r\n+    }\r\n+    this.fieldSeparator = fieldSeparator;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether the field separator should be added at the start\r\n+   * of each buffer.</p>\r\n+   *\r\n+   * @return the fieldSeparatorAtStart flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected boolean isFieldSeparatorAtStart() {\r\n+    return fieldSeparatorAtStart;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether the field separator should be added at the start\r\n+   * of each buffer.</p>\r\n+   *\r\n+   * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\r\n+    this.fieldSeparatorAtStart = fieldSeparatorAtStart;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets whether the field separator should be added at the end\r\n+   * of each buffer.</p>\r\n+   *\r\n+   * @return fieldSeparatorAtEnd flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected boolean isFieldSeparatorAtEnd() {\r\n+    return fieldSeparatorAtEnd;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets whether the field separator should be added at the end\r\n+   * of each buffer.</p>\r\n+   *\r\n+   * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\r\n+   * @since 2.0\r\n+   */\r\n+  protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\r\n+    this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the text to output when <code>null</code> found.</p>\r\n+   *\r\n+   * @return the current text to output when null found\r\n+   */\r\n+  protected String getNullText() {\r\n+    return nullText;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the text to output when <code>null</code> found.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param nullText  the new text to output when null found\r\n+   */\r\n+  protected void setNullText(String nullText) {\r\n+    if (nullText == null) {\r\n+      nullText = \"\";\r\n+    }\r\n+    this.nullText = nullText;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the start text to output when a <code>Collection</code>,\r\n+   * <code>Map</code> or array size is output.</p>\r\n+   *\r\n+   * <p>This is output before the size value.</p>\r\n+   *\r\n+   * @return the current start of size text\r\n+   */\r\n+  protected String getSizeStartText() {\r\n+    return sizeStartText;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the start text to output when a <code>Collection</code>,\r\n+   * <code>Map</code> or array size is output.</p>\r\n+   *\r\n+   * <p>This is output before the size value.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param sizeStartText  the new start of size text\r\n+   */\r\n+  protected void setSizeStartText(String sizeStartText) {\r\n+    if (sizeStartText == null) {\r\n+      sizeStartText = \"\";\r\n+    }\r\n+    this.sizeStartText = sizeStartText;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the end text to output when a <code>Collection</code>,\r\n+   * <code>Map</code> or array size is output.</p>\r\n+   *\r\n+   * <p>This is output after the size value.</p>\r\n+   *\r\n+   * @return the current end of size text\r\n+   */\r\n+  protected String getSizeEndText() {\r\n+    return sizeEndText;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the end text to output when a <code>Collection</code>,\r\n+   * <code>Map</code> or array size is output.</p>\r\n+   *\r\n+   * <p>This is output after the size value.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param sizeEndText  the new end of size text\r\n+   */\r\n+  protected void setSizeEndText(String sizeEndText) {\r\n+    if (sizeEndText == null) {\r\n+      sizeEndText = \"\";\r\n+    }\r\n+    this.sizeEndText = sizeEndText;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the start text to output when an <code>Object</code> is\r\n+   * output in summary mode.</p>\r\n+   *\r\n+   * <p>This is output before the size value.</p>\r\n+   *\r\n+   * @return the current start of summary text\r\n+   */\r\n+  protected String getSummaryObjectStartText() {\r\n+    return summaryObjectStartText;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the start text to output when an <code>Object</code> is\r\n+   * output in summary mode.</p>\r\n+   *\r\n+   * <p>This is output before the size value.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param summaryObjectStartText  the new start of summary text\r\n+   */\r\n+  protected void setSummaryObjectStartText(String summaryObjectStartText) {\r\n+    if (summaryObjectStartText == null) {\r\n+      summaryObjectStartText = \"\";\r\n+    }\r\n+    this.summaryObjectStartText = summaryObjectStartText;\r\n+  }\r\n+\r\n+  //---------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Gets the end text to output when an <code>Object</code> is\r\n+   * output in summary mode.</p>\r\n+   *\r\n+   * <p>This is output after the size value.</p>\r\n+   *\r\n+   * @return the current end of summary text\r\n+   */\r\n+  protected String getSummaryObjectEndText() {\r\n+    return summaryObjectEndText;\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Sets the end text to output when an <code>Object</code> is\r\n+   * output in summary mode.</p>\r\n+   *\r\n+   * <p>This is output after the size value.</p>\r\n+   *\r\n+   * <p><code>null</code> is accepted, but will be converted to\r\n+   * an empty String.</p>\r\n+   *\r\n+   * @param summaryObjectEndText  the new end of summary text\r\n+   */\r\n+  protected void setSummaryObjectEndText(String summaryObjectEndText) {\r\n+    if (summaryObjectEndText == null) {\r\n+      summaryObjectEndText = \"\";\r\n+    }\r\n+    this.summaryObjectEndText = summaryObjectEndText;\r\n+  }\r\n+\r\n+  //----------------------------------------------------------------------------\r\n+\r\n+  /**\r\n+   * <p>Default <code>ToStringStyle</code>.</p>\r\n+   *\r\n+   * <p>This is an inner class rather than using\r\n+   * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n+   */\r\n+  private static final class DefaultToStringStyle extends ToStringStyle {\r\n+\r\n+    /**\r\n+     * Required for serialization support.\r\n+     *\r\n+     * @see java.io.Serializable\r\n+     */\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n+     * <p>Constructor.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Use the static constant rather than instantiating.</p>\r\n      */\r\n-    public void append(StringBuffer buffer, String fieldName, int value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+    DefaultToStringStyle() {\r\n+      super();\r\n     }\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n+     * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * @return the singleton\r\n      */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\r\n-        buffer.append(value);\r\n+    private Object readResolve() {\r\n+      return ToStringStyle.DEFAULT_STYLE;\r\n     }\r\n \r\n-    //----------------------------------------------------------------------------\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n+  //----------------------------------------------------------------------------\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\r\n-        buffer.append(value);\r\n-    }\r\n+  /**\r\n+   * <p><code>ToStringStyle</code> that does not print out\r\n+   * the field names.</p>\r\n+   *\r\n+   * <p>This is an inner class rather than using\r\n+   * <code>StandardToStringStyle</code> to ensure its immutability.\r\n+   */\r\n+  private static final class NoFieldNameToStringStyle extends ToStringStyle {\r\n \r\n-    //----------------------------------------------------------------------------\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n+     * <p>Constructor.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Use the static constant rather than instantiating.</p>\r\n      */\r\n-    public void append(StringBuffer buffer, String fieldName, byte value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+    NoFieldNameToStringStyle() {\r\n+      super();\r\n+      this.setUseFieldNames(false);\r\n     }\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n+     * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * @return the singleton\r\n      */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\r\n-        buffer.append(value);\r\n+    private Object readResolve() {\r\n+      return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n     }\r\n \r\n-    //----------------------------------------------------------------------------\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n+  //----------------------------------------------------------------------------\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\r\n-        buffer.append(value);\r\n-    }\r\n+  /**\r\n+   * <p><code>ToStringStyle</code> that prints out the short\r\n+   * class name and no identity hashcode.</p>\r\n+   *\r\n+   * <p>This is an inner class rather than using\r\n+   * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n+   */\r\n+  private static final class ShortPrefixToStringStyle extends ToStringStyle {\r\n \r\n-    //----------------------------------------------------------------------------\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n+     * <p>Constructor.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Use the static constant rather than instantiating.</p>\r\n      */\r\n-    public void append(StringBuffer buffer, String fieldName, double value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+    ShortPrefixToStringStyle() {\r\n+      super();\r\n+      this.setUseShortClassName(true);\r\n+      this.setUseIdentityHashCode(false);\r\n     }\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n+     * @return the singleton\r\n      */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\r\n-        buffer.append(value);\r\n+    private Object readResolve() {\r\n+      return ToStringStyle.SHORT_PREFIX_STYLE;\r\n     }\r\n \r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\r\n-        buffer.append(value);\r\n-    }\r\n+  /**\r\n+   * <p><code>ToStringStyle</code> that does not print out the\r\n+   * classname, identity hashcode, content start or field name.</p>\r\n+   *\r\n+   * <p>This is an inner class rather than using\r\n+   * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n+   */\r\n+  private static final class SimpleToStringStyle extends ToStringStyle {\r\n \r\n-    //----------------------------------------------------------------------------\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n+     * <p>Constructor.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Use the static constant rather than instantiating.</p>\r\n      */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+    SimpleToStringStyle() {\r\n+      super();\r\n+      this.setUseClassName(false);\r\n+      this.setUseIdentityHashCode(false);\r\n+      this.setUseFieldNames(false);\r\n+      this.setContentStart(\"\");\r\n+      this.setContentEnd(\"\");\r\n     }\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n+     * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n+     * @return the singleton\r\n      */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\r\n-        buffer.append(value);\r\n+    private Object readResolve() {\r\n+      return ToStringStyle.SIMPLE_STYLE;\r\n     }\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n+  }\r\n \r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n+  //----------------------------------------------------------------------------\r\n \r\n-    //----------------------------------------------------------------------------\r\n+  /**\r\n+   * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\r\n+   *\r\n+   * <p>This is an inner class rather than using\r\n+   * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n+   */\r\n+  private static final class MultiLineToStringStyle extends ToStringStyle {\r\n \r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>Object</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            Object item = array[i];\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> the detail of an array type.</p>\r\n+     * <p>Constructor.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @since 2.0\r\n+     * <p>Use the static constant rather than instantiating.</p>\r\n      */\r\n-    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\r\n-        buffer.append(arrayStart);\r\n-        int length = Array.getLength(array);\r\n-        for (int i = 0; i < length; i++) {\r\n-            Object item = Array.get(array, i);\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+    MultiLineToStringStyle() {\r\n+      super();\r\n+      this.setContentStart(\"[\");\r\n+      this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\r\n+      this.setFieldSeparatorAtStart(true);\r\n+      this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\r\n     }\r\n \r\n     /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>Object</code> array.</p>\r\n+     * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n      *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n+     * @return the singleton\r\n      */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+    private Object readResolve() {\r\n+      return ToStringStyle.MULTI_LINE_STYLE;\r\n     }\r\n \r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the class name.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose name to output\r\n-     */\r\n-    protected void appendClassName(StringBuffer buffer, Object object) {\r\n-        if (useClassName && object != null) {\r\n-            register(object);\r\n-            if (useShortClassName) {\r\n-                buffer.append(getShortClassName(object.getClass()));\r\n-            } else {\r\n-                buffer.append(object.getClass().getName());\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose id to output\r\n-     */\r\n-    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\r\n-        if (this.isUseIdentityHashCode() && object!=null) {\r\n-            register(object);\r\n-            buffer.append('@');\r\n-            buffer.append(Integer.toHexString(System.identityHashCode(object)));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentStart(StringBuffer buffer) {\r\n-        buffer.append(contentStart);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentEnd(StringBuffer buffer) {\r\n-        buffer.append(contentEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\r\n-     *\r\n-     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendNullText(StringBuffer buffer, String fieldName) {\r\n-        buffer.append(nullText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field separator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendFieldSeparator(StringBuffer buffer) {\r\n-        buffer.append(fieldSeparator);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     */\r\n-    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\r\n-        if (useFieldNames && fieldName != null) {\r\n-            buffer.append(fieldName);\r\n-            buffer.append(fieldNameValueSeparator);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString<code> the field end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\r\n-        appendFieldSeparator(buffer);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a size summary.</p>\r\n-     *\r\n-     * <p>The size summary is used to summarize the contents of\r\n-     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\r\n-     *\r\n-     * <p>The output consists of a prefix, the passed in size\r\n-     * and a suffix.</p>\r\n-     *\r\n-     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param size  the size to append\r\n-     */\r\n-    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\r\n-        buffer.append(sizeStartText);\r\n-        buffer.append(size);\r\n-        buffer.append(sizeEndText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Is this field to be output in full detail.</p>\r\n-     *\r\n-     * <p>This method converts a detail request into a detail level.\r\n-     * The calling code may request full detail (<code>true</code>),\r\n-     * but a subclass might ignore that and always return\r\n-     * <code>false</code>. The calling code may pass in\r\n-     * <code>null</code> indicating that it doesn't care about\r\n-     * the detail level. In this case the default detail level is\r\n-     * used.</p>\r\n-     *\r\n-     * @param fullDetailRequest  the detail level requested\r\n-     * @return whether full detail is to be shown\r\n-     */\r\n-    protected boolean isFullDetail(Boolean fullDetailRequest) {\r\n-        if (fullDetailRequest == null) {\r\n-            return defaultFullDetail;\r\n-        }\r\n-        return fullDetailRequest.booleanValue();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Gets the short class name for a class.</p>\r\n-     *\r\n-     * <p>The short class name is the classname excluding\r\n-     * the package name.</p>\r\n-     *\r\n-     * @param cls  the <code>Class</code> to get the short name of\r\n-     * @return the short name\r\n-     */\r\n-    protected String getShortClassName(Class<?> cls) {\r\n-        return ClassUtils.getShortClassName(cls);\r\n-    }\r\n-\r\n-    // Setters and getters for the customizable parts of the style\r\n-    // These methods are not expected to be overridden, except to make public\r\n-    // (They are not public so that immutable subclasses can be written)\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the class name.</p>\r\n-     *\r\n-     * @return the current useClassName flag\r\n-     */\r\n-    protected boolean isUseClassName() {\r\n-        return useClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the class name.</p>\r\n-     *\r\n-     * @param useClassName  the new useClassName flag\r\n-     */\r\n-    protected void setUseClassName(boolean useClassName) {\r\n-        this.useClassName = useClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output short or long class names.</p>\r\n-     *\r\n-     * @return the current useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isUseShortClassName() {\r\n-        return useShortClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output short or long class names.</p>\r\n-     *\r\n-     * @param useShortClassName  the new useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setUseShortClassName(boolean useShortClassName) {\r\n-        this.useShortClassName = useShortClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @return the current useIdentityHashCode flag\r\n-     */\r\n-    protected boolean isUseIdentityHashCode() {\r\n-        return useIdentityHashCode;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @param useIdentityHashCode  the new useIdentityHashCode flag\r\n-     */\r\n-    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\r\n-        this.useIdentityHashCode = useIdentityHashCode;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @return the current useFieldNames flag\r\n-     */\r\n-    protected boolean isUseFieldNames() {\r\n-        return useFieldNames;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @param useFieldNames  the new useFieldNames flag\r\n-     */\r\n-    protected void setUseFieldNames(boolean useFieldNames) {\r\n-        this.useFieldNames = useFieldNames;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @return the current defaultFullDetail flag\r\n-     */\r\n-    protected boolean isDefaultFullDetail() {\r\n-        return defaultFullDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @param defaultFullDetail  the new defaultFullDetail flag\r\n-     */\r\n-    protected void setDefaultFullDetail(boolean defaultFullDetail) {\r\n-        this.defaultFullDetail = defaultFullDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output array content detail.</p>\r\n-     *\r\n-     * @return the current array content detail setting\r\n-     */\r\n-    protected boolean isArrayContentDetail() {\r\n-        return arrayContentDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output array content detail.</p>\r\n-     *\r\n-     * @param arrayContentDetail  the new arrayContentDetail flag\r\n-     */\r\n-    protected void setArrayContentDetail(boolean arrayContentDetail) {\r\n-        this.arrayContentDetail = arrayContentDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array start text.</p>\r\n-     *\r\n-     * @return the current array start text\r\n-     */\r\n-    protected String getArrayStart() {\r\n-        return arrayStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayStart  the new array start text\r\n-     */\r\n-    protected void setArrayStart(String arrayStart) {\r\n-        if (arrayStart == null) {\r\n-            arrayStart = \"\";\r\n-        }\r\n-        this.arrayStart = arrayStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array end text.</p>\r\n-     *\r\n-     * @return the current array end text\r\n-     */\r\n-    protected String getArrayEnd() {\r\n-        return arrayEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayEnd  the new array end text\r\n-     */\r\n-    protected void setArrayEnd(String arrayEnd) {\r\n-        if (arrayEnd == null) {\r\n-            arrayEnd = \"\";\r\n-        }\r\n-        this.arrayEnd = arrayEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array separator text.</p>\r\n-     *\r\n-     * @return the current array separator text\r\n-     */\r\n-    protected String getArraySeparator() {\r\n-        return arraySeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arraySeparator  the new array separator text\r\n-     */\r\n-    protected void setArraySeparator(String arraySeparator) {\r\n-        if (arraySeparator == null) {\r\n-            arraySeparator = \"\";\r\n-        }\r\n-        this.arraySeparator = arraySeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content start text.</p>\r\n-     *\r\n-     * @return the current content start text\r\n-     */\r\n-    protected String getContentStart() {\r\n-        return contentStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentStart  the new content start text\r\n-     */\r\n-    protected void setContentStart(String contentStart) {\r\n-        if (contentStart == null) {\r\n-            contentStart = \"\";\r\n-        }\r\n-        this.contentStart = contentStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content end text.</p>\r\n-     *\r\n-     * @return the current content end text\r\n-     */\r\n-    protected String getContentEnd() {\r\n-        return contentEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentEnd  the new content end text\r\n-     */\r\n-    protected void setContentEnd(String contentEnd) {\r\n-        if (contentEnd == null) {\r\n-            contentEnd = \"\";\r\n-        }\r\n-        this.contentEnd = contentEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field name value separator text.</p>\r\n-     *\r\n-     * @return the current field name value separator text\r\n-     */\r\n-    protected String getFieldNameValueSeparator() {\r\n-        return fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field name value separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldNameValueSeparator  the new field name value separator text\r\n-     */\r\n-    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\r\n-        if (fieldNameValueSeparator == null) {\r\n-            fieldNameValueSeparator = \"\";\r\n-        }\r\n-        this.fieldNameValueSeparator = fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field separator text.</p>\r\n-     *\r\n-     * @return the current field separator text\r\n-     */\r\n-    protected String getFieldSeparator() {\r\n-        return fieldSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldSeparator  the new field separator text\r\n-     */\r\n-    protected void setFieldSeparator(String fieldSeparator) {\r\n-        if (fieldSeparator == null) {\r\n-            fieldSeparator = \"\";\r\n-        }\r\n-        this.fieldSeparator = fieldSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtStart() {\r\n-        return fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\r\n-        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtEnd() {\r\n-        return fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\r\n-        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * @return the current text to output when null found\r\n-     */\r\n-    protected String getNullText() {\r\n-        return nullText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param nullText  the new text to output when null found\r\n-     */\r\n-    protected void setNullText(String nullText) {\r\n-        if (nullText == null) {\r\n-            nullText = \"\";\r\n-        }\r\n-        this.nullText = nullText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of size text\r\n-     */\r\n-    protected String getSizeStartText() {\r\n-        return sizeStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeStartText  the new start of size text\r\n-     */\r\n-    protected void setSizeStartText(String sizeStartText) {\r\n-        if (sizeStartText == null) {\r\n-            sizeStartText = \"\";\r\n-        }\r\n-        this.sizeStartText = sizeStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of size text\r\n-     */\r\n-    protected String getSizeEndText() {\r\n-        return sizeEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeEndText  the new end of size text\r\n-     */\r\n-    protected void setSizeEndText(String sizeEndText) {\r\n-        if (sizeEndText == null) {\r\n-            sizeEndText = \"\";\r\n-        }\r\n-        this.sizeEndText = sizeEndText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of summary text\r\n-     */\r\n-    protected String getSummaryObjectStartText() {\r\n-        return summaryObjectStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectStartText  the new start of summary text\r\n-     */\r\n-    protected void setSummaryObjectStartText(String summaryObjectStartText) {\r\n-        if (summaryObjectStartText == null) {\r\n-            summaryObjectStartText = \"\";\r\n-        }\r\n-        this.summaryObjectStartText = summaryObjectStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of summary text\r\n-     */\r\n-    protected String getSummaryObjectEndText() {\r\n-        return summaryObjectEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectEndText  the new end of summary text\r\n-     */\r\n-    protected void setSummaryObjectEndText(String summaryObjectEndText) {\r\n-        if (summaryObjectEndText == null) {\r\n-            summaryObjectEndText = \"\";\r\n-        }\r\n-        this.summaryObjectEndText = summaryObjectEndText;\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Default <code>ToStringStyle</code>.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class DefaultToStringStyle extends ToStringStyle {\r\n-\r\n-        /**\r\n-         * Required for serialization support.\r\n-         *\r\n-         * @see java.io.Serializable\r\n-         */\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        DefaultToStringStyle() {\r\n-            super();\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.DEFAULT_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out\r\n-     * the field names.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.\r\n-     */\r\n-    private static final class NoFieldNameToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        NoFieldNameToStringStyle() {\r\n-            super();\r\n-            this.setUseFieldNames(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that prints out the short\r\n-     * class name and no identity hashcode.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class ShortPrefixToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        ShortPrefixToStringStyle() {\r\n-            super();\r\n-            this.setUseShortClassName(true);\r\n-            this.setUseIdentityHashCode(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SHORT_PREFIX_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out the\r\n-     * classname, identity hashcode, content start or field name.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class SimpleToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        SimpleToStringStyle() {\r\n-            super();\r\n-            this.setUseClassName(false);\r\n-            this.setUseIdentityHashCode(false);\r\n-            this.setUseFieldNames(false);\r\n-            this.setContentStart(\"\");\r\n-            this.setContentEnd(\"\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SIMPLE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class MultiLineToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        MultiLineToStringStyle() {\r\n-            super();\r\n-            this.setContentStart(\"[\");\r\n-            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\r\n-            this.setFieldSeparatorAtStart(true);\r\n-            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.MULTI_LINE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 3899
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/59/ToStringStyle.java\nindex e5c90493b4..7b88d31177 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/naturalize/59/ToStringStyle.java\n@@ -149,7 +149,7 @@ public abstract class ToStringStyle implements Serializable {\n      * </p>\r\n      */\r\n     private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n-        new ThreadLocal<WeakHashMap<Object,Object>>();\r\n+        new ThreadLocal<WeakHashMap<Object, Object>>();\r\n \r\n     /**\r\n      * <p>\r\n@@ -475,10 +475,10 @@ public abstract class ToStringStyle implements Serializable {\n      */\r\n     protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n         if (isRegistered(value)\r\n-            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n-           appendCyclicObject(buffer, fieldName, value);\r\n-           return;\r\n-        }\r\n+            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n+    appendCyclicObject(buffer, fieldName, value);\r\n+           return;\n+    }\r\n \r\n         register(value);\r\n \r\n@@ -584,8 +584,8 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @since 2.2\r\n      */\r\n-    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n-       ObjectUtils.identityToString(buffer, value);\r\n+    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\n+    ObjectUtils.identityToString(buffer, value);\n     }\r\n \r\n     /**\r\n@@ -2140,8 +2140,7 @@ public abstract class ToStringStyle implements Serializable {\n          */\r\n         private Object readResolve() {\r\n             return ToStringStyle.DEFAULT_STYLE;\r\n-        }\r\n-\r\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2174,8 +2173,7 @@ public abstract class ToStringStyle implements Serializable {\n          */\r\n         private Object readResolve() {\r\n             return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n-        }\r\n-\r\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2243,8 +2241,7 @@ public abstract class ToStringStyle implements Serializable {\n          */\r\n         private Object readResolve() {\r\n             return ToStringStyle.SIMPLE_STYLE;\r\n-        }\r\n-\r\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2283,4 +2280,4 @@ public abstract class ToStringStyle implements Serializable {\n \r\n     }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/59/ToStringStyle.java\nindex e5c90493b4..9baa11449a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/codebuff/59/ToStringStyle.java\n@@ -29,16 +29,15 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\r\n-\r\n-import java.io.Serializable;\r\n-import java.lang.reflect.Array;\r\n-import java.util.Collection;\r\n-import java.util.Map;\r\n-import java.util.WeakHashMap;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\r\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\n import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.SystemUtils;\r\n \r\n /**\r\n@@ -77,12 +76,15 @@ import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.System\n  *\r\n  * @since 1.0\r\n  * @version $Id: ToStringStyle.java 1091066 2011-04-11 13:30:11Z mbenson $\r\n- */\r\n+ */\n+\n+\n public abstract class ToStringStyle implements Serializable {\r\n \r\n     /**\r\n      * Serialization version ID.\r\n-     */\r\n+     */\n+\n     private static final long serialVersionUID = -2587890625525655916L;\r\n \r\n     /**\r\n@@ -92,7 +94,9 @@ public abstract class ToStringStyle implements Serializable {\n      * <pre>\r\n      * Person@182f0db[name=John Doe,age=33,smoker=false]\r\n      * </pre>\r\n-     */\r\n+     */\n+\n+\n     public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\r\n \r\n     /**\r\n@@ -106,7 +110,9 @@ public abstract class ToStringStyle implements Serializable {\n      *   smoker=false\r\n      * ]\r\n      * </pre>\r\n-     */\r\n+     */\n+\n+\n     public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\r\n \r\n     /**\r\n@@ -117,7 +123,9 @@ public abstract class ToStringStyle implements Serializable {\n      * <pre>\r\n      * Person@182f0db[John Doe,33,false]\r\n      * </pre>\r\n-     */\r\n+     */\n+\n+\n     public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\r\n \r\n     /**\r\n@@ -129,7 +137,9 @@ public abstract class ToStringStyle implements Serializable {\n      * </pre>\r\n      *\r\n      * @since 2.1\r\n-     */\r\n+     */\n+\n+\n     public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\r\n \r\n     /**\r\n@@ -139,7 +149,9 @@ public abstract class ToStringStyle implements Serializable {\n      * <pre>\r\n      * John Doe,33,false\r\n      * </pre>\r\n-     */\r\n+     */\n+\n+\n     public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\r\n \r\n     /**\r\n@@ -147,9 +159,8 @@ public abstract class ToStringStyle implements Serializable {\n      * A registry of objects used by <code>reflectionToString</code> methods\r\n      * to detect cyclical object references and avoid infinite loops.\r\n      * </p>\r\n-     */\r\n-    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n-        new ThreadLocal<WeakHashMap<Object,Object>>();\r\n+     */\n+    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object, Object>>();\r\n \r\n     /**\r\n      * <p>\r\n@@ -158,9 +169,9 @@ public abstract class ToStringStyle implements Serializable {\n      * </p>\r\n      *\r\n      * @return Set the registry of objects being traversed\r\n-     */\r\n-    static Map<Object, Object> getRegistry() {\r\n-        return REGISTRY.get();\r\n+     */\n+    static Map<Object, Object> getRegistry() {\n+    return REGISTRY.get();\n     }\r\n \r\n     /**\r\n@@ -173,10 +184,12 @@ public abstract class ToStringStyle implements Serializable {\n      *                  The object to lookup in the registry.\r\n      * @return boolean <code>true</code> if the registry contains the given\r\n      *             object.\r\n-     */\r\n-    static boolean isRegistered(Object value) {\r\n-        Map<Object, Object> m = getRegistry();\r\n-        return m != null && m.containsKey(value);\r\n+     */\n+\n+\n+    static boolean isRegistered(Object value) {\n+        Map<Object, Object> m = getRegistry();\n+        return m != null && m.containsKey(value);\n     }\r\n \r\n     /**\r\n@@ -187,15 +200,18 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param value\r\n      *                  The object to register.\r\n-     */\r\n-    static void register(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m == null) {\r\n-                REGISTRY.set(new WeakHashMap<Object, Object>());\r\n-            }\r\n-            getRegistry().put(value, null);\r\n-        }\r\n+     */\n+\n+\n+    static void register(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m == null) {\n+                REGISTRY.set(new WeakHashMap<Object, Object>());\n+            }\n+\n+            getRegistry().put(value, null);\n+        }\n     }\r\n \r\n     /**\r\n@@ -209,127 +225,133 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param value\r\n      *                  The object to unregister.\r\n-     */\r\n-    static void unregister(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m != null) {\r\n-                m.remove(value);\r\n-                if (m.isEmpty()) {\r\n-                    REGISTRY.remove();\r\n-                }\r\n-            }\r\n-        }\r\n+     */\n+\n+\n+    static void unregister(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m != null) {\n+                m.remove(value);\n+\n+                if (m.isEmpty()) {\n+                    REGISTRY.remove();\n+                }\n+            }\n+        }\n     }\r\n \r\n     /**\r\n      * Whether to use the field names, the default is <code>true</code>.\r\n-     */\r\n+     */\n+\n     private boolean useFieldNames = true;\r\n \r\n     /**\r\n      * Whether to use the class name, the default is <code>true</code>.\r\n-     */\r\n+     */\n     private boolean useClassName = true;\r\n \r\n     /**\r\n      * Whether to use short class names, the default is <code>false</code>.\r\n-     */\r\n+     */\n     private boolean useShortClassName = false;\r\n \r\n     /**\r\n      * Whether to use the identity hash code, the default is <code>true</code>.\r\n-     */\r\n+     */\n     private boolean useIdentityHashCode = true;\r\n \r\n     /**\r\n      * The content start <code>'['</code>.\r\n-     */\r\n+     */\n     private String contentStart = \"[\";\r\n \r\n     /**\r\n      * The content end <code>']'</code>.\r\n-     */\r\n+     */\n     private String contentEnd = \"]\";\r\n \r\n     /**\r\n      * The field name value separator <code>'='</code>.\r\n-     */\r\n+     */\n     private String fieldNameValueSeparator = \"=\";\r\n \r\n     /**\r\n      * Whether the field separator should be added before any other fields.\r\n-     */\r\n+     */\n     private boolean fieldSeparatorAtStart = false;\r\n \r\n     /**\r\n      * Whether the field separator should be added after any other fields.\r\n-     */\r\n+     */\n     private boolean fieldSeparatorAtEnd = false;\r\n \r\n     /**\r\n      * The field separator <code>','</code>.\r\n-     */\r\n+     */\n     private String fieldSeparator = \",\";\r\n \r\n     /**\r\n      * The array start <code>'{'</code>.\r\n-     */\r\n+     */\n     private String arrayStart = \"{\";\r\n \r\n     /**\r\n      * The array separator <code>','</code>.\r\n-     */\r\n+     */\n     private String arraySeparator = \",\";\r\n \r\n     /**\r\n      * The detail for array content.\r\n-     */\r\n+     */\n     private boolean arrayContentDetail = true;\r\n \r\n     /**\r\n      * The array end <code>'}'</code>.\r\n-     */\r\n+     */\n     private String arrayEnd = \"}\";\r\n \r\n     /**\r\n      * The value to use when fullDetail is <code>null</code>,\r\n      * the default value is <code>true</code>.\r\n-     */\r\n+     */\n     private boolean defaultFullDetail = true;\r\n \r\n     /**\r\n      * The <code>null</code> text <code>'&lt;null&gt;'</code>.\r\n-     */\r\n+     */\n     private String nullText = \"<null>\";\r\n \r\n     /**\r\n      * The summary size text start <code>'<size'</code>.\r\n-     */\r\n+     */\n     private String sizeStartText = \"<size=\";\r\n \r\n     /**\r\n      * The summary size text start <code>'&gt;'</code>.\r\n-     */\r\n+     */\n     private String sizeEndText = \">\";\r\n \r\n     /**\r\n      * The summary object text start <code>'&lt;'</code>.\r\n-     */\r\n+     */\n     private String summaryObjectStartText = \"<\";\r\n \r\n     /**\r\n      * The summary object text start <code>'&gt;'</code>.\r\n-     */\r\n+     */\n     private String summaryObjectEndText = \">\";\r\n \r\n     //----------------------------------------------------------------------------\r\n \r\n     /**\r\n      * <p>Constructor.</p>\r\n-     */\r\n-    protected ToStringStyle() {\r\n-        super();\r\n+     */\n+\n+\n+    protected ToStringStyle() {\n+        super();\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -343,9 +365,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param superToString  the <code>super.toString()</code>\r\n      * @since 2.0\r\n-     */\r\n-    public void appendSuper(StringBuffer buffer, String superToString) {\r\n-        appendToString(buffer, superToString);\r\n+     */\n+\n+\n+    public void appendSuper(StringBuffer buffer, String superToString) {\n+        appendToString(buffer, superToString);\n     }\r\n \r\n     /**\r\n@@ -357,20 +381,24 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param toString  the additional <code>toString</code>\r\n      * @since 2.0\r\n-     */\r\n-    public void appendToString(StringBuffer buffer, String toString) {\r\n-        if (toString != null) {\r\n-            int pos1 = toString.indexOf(contentStart) + contentStart.length();\r\n-            int pos2 = toString.lastIndexOf(contentEnd);\r\n-            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\r\n-                String data = toString.substring(pos1, pos2);\r\n-                if (fieldSeparatorAtStart) {\r\n-                    removeLastFieldSeparator(buffer);\r\n-                }\r\n-                buffer.append(data);\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n+     */\n+\n+\n+    public void appendToString(StringBuffer buffer, String toString) {\n+        if (toString != null) {\n+            int pos1 = toString.indexOf(contentStart) + contentStart.length();\n+            int pos2 = toString.lastIndexOf(contentEnd);\n+            if (pos1 != pos2 && pos1 >= 0\n+                    && pos2 >= 0) {\n+                String data = toString.substring(pos1, pos2);\n+                if (fieldSeparatorAtStart) {\n+                    removeLastFieldSeparator(buffer);\n+                }\n+\n+                buffer.append(data);\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n     }\r\n \r\n     /**\r\n@@ -378,16 +406,19 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param object  the <code>Object</code> to build a <code>toString</code> for\r\n-     */\r\n-    public void appendStart(StringBuffer buffer, Object object) {\r\n-        if (object != null) {\r\n-            appendClassName(buffer, object);\r\n-            appendIdentityHashCode(buffer, object);\r\n-            appendContentStart(buffer);\r\n-            if (fieldSeparatorAtStart) {\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n+     */\n+\n+\n+    public void appendStart(StringBuffer buffer, Object object) {\n+        if (object != null) {\n+            appendClassName(buffer, object);\n+            appendIdentityHashCode(buffer, object);\n+            appendContentStart(buffer);\n+\n+            if (fieldSeparatorAtStart) {\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n     }\r\n \r\n     /**\r\n@@ -396,13 +427,16 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param object  the <code>Object</code> to build a\r\n      *  <code>toString</code> for.\r\n-     */\r\n-    public void appendEnd(StringBuffer buffer, Object object) {\r\n-        if (this.fieldSeparatorAtEnd == false) {\r\n-            removeLastFieldSeparator(buffer);\r\n-        }\r\n-        appendContentEnd(buffer);\r\n-        unregister(object);\r\n+     */\n+\n+\n+    public void appendEnd(StringBuffer buffer, Object object) {\n+        if (this.fieldSeparatorAtEnd == false) {\n+            removeLastFieldSeparator(buffer);\n+        }\n+\n+        appendContentEnd(buffer);\n+        unregister(object);\n     }\r\n \r\n     /**\r\n@@ -410,22 +444,26 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @since 2.0\r\n-     */\r\n-    protected void removeLastFieldSeparator(StringBuffer buffer) {\r\n-        int len = buffer.length();\r\n-        int sepLen = fieldSeparator.length();\r\n-        if (len > 0 && sepLen > 0 && len >= sepLen) {\r\n-            boolean match = true;\r\n-            for (int i = 0; i < sepLen; i++) {\r\n-                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\r\n-                    match = false;\r\n-                    break;\r\n-                }\r\n-            }\r\n-            if (match) {\r\n-                buffer.setLength(len - sepLen);\r\n-            }\r\n-        }\r\n+     */\n+\n+\n+    protected void removeLastFieldSeparator(StringBuffer buffer) {\n+        int len = buffer.length();\n+        int sepLen = fieldSeparator.length();\n+        if (len > 0 && sepLen > 0\n+                && len >= sepLen) {\n+            boolean match = true;\n+            for (int i = 0; i < sepLen; i++) {\n+                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n+                    match = false;\n+                    break;\n+                }\n+            }\n+\n+            if (match) {\n+                buffer.setLength(len - sepLen);\n+            }\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -440,18 +478,22 @@ public abstract class ToStringStyle implements Serializable {\n      * @param value  the value to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (value == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else {\r\n-            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (value == null) {\n+            appendNullText(buffer, fieldName);\n+        } else {\n+            appendInternal(buffer,\n+                           fieldName,\n+                           value,\n+                           isFullDetail(fullDetail));\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -472,104 +514,100 @@ public abstract class ToStringStyle implements Serializable {\n      * @param value  the value to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n      * @param detail  output detail or not\r\n-     */\r\n-    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n-        if (isRegistered(value)\r\n-            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n-           appendCyclicObject(buffer, fieldName, value);\r\n-           return;\r\n-        }\r\n-\r\n-        register(value);\r\n-\r\n-        try {\r\n-            if (value instanceof Collection<?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Collection<?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof Map<?, ?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof long[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (long[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (long[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof int[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (int[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (int[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof short[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (short[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (short[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof byte[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (byte[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (byte[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof char[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (char[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (char[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof double[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (double[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (double[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof float[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (float[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (float[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof boolean[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (boolean[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (boolean[]) value);\r\n-                }\r\n-\r\n-            } else if (value.getClass().isArray()) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Object[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (Object[]) value);\r\n-                }\r\n-\r\n-            } else {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, value);\r\n-                }\r\n-            }\r\n-        } finally {\r\n-            unregister(value);\r\n-        }\r\n+     */\n+\n+\n+    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n+        if (isRegistered(value) && !(value instanceof Number\n+                                         || value instanceof Boolean\n+                                         || value instanceof Character)) {\n+            appendCyclicObject(buffer, fieldName, value);\n+            return;\n+        }\n+\n+        register(value);\n+\n+        try {\n+            if (value instanceof Collection<?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Collection<?>) value);\n+                } else {\n+                    appendSummarySize(buffer,\n+                                      fieldName,\n+                                      ((Collection<?>) value).size());\n+                }\n+            } else if (value instanceof Map<?, ?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\n+                } else {\n+                    appendSummarySize(buffer,\n+                                      fieldName,\n+                                      ((Map<?, ?>) value).size());\n+                }\n+            } else if (value instanceof long[]) {\n+                       if (detail) {\n+                           appendDetail(buffer, fieldName, (long[]) value);\n+                       } else {\n+                           appendSummary(buffer, fieldName, (long[]) value);\n+                       }\n+                   } else if (value instanceof int[]) {\n+                       if (detail) {\n+                           appendDetail(buffer, fieldName, (int[]) value);\n+                       } else {\n+                           appendSummary(buffer, fieldName, (int[]) value);\n+                       }\n+                   } else if (value instanceof short[]) {\n+                              if (detail) {\n+                                  appendDetail(buffer, fieldName, (short[]) value);\n+                              } else {\n+                                  appendSummary(buffer, fieldName, (short[]) value);\n+                              }\n+                          } else if (value instanceof byte[]) {\n+                              if (detail) {\n+                                  appendDetail(buffer, fieldName, (byte[]) value);\n+                              } else {\n+                                  appendSummary(buffer, fieldName, (byte[]) value);\n+                              }\n+                          } else if (value instanceof char[]) {\n+                                     if (detail) {\n+                                         appendDetail(buffer, fieldName, (char[]) value);\n+                                     } else {\n+                                         appendSummary(buffer, fieldName, (char[]) value);\n+                                     }\n+                                 } else if (value instanceof double[]) {\n+                                     if (detail) {\n+                                         appendDetail(buffer, fieldName, (double[]) value);\n+                                     } else {\n+                                         appendSummary(buffer, fieldName, (double[]) value);\n+                                     }\n+                                 } else if (value instanceof float[]) {\n+                                            if (detail) {\n+                                                appendDetail(buffer, fieldName, (float[]) value);\n+                                            } else {\n+                                                appendSummary(buffer, fieldName, (float[]) value);\n+                                            }\n+                                        } else if (value instanceof boolean[]) {\n+                                            if (detail) {\n+                                                appendDetail(buffer, fieldName, (boolean[]) value);\n+                                            } else {\n+                                                appendSummary(buffer, fieldName, (boolean[]) value);\n+                                            }\n+                                        } else if (value.getClass().isArray()) {\n+                                                   if (detail) {\n+                                                       appendDetail(buffer, fieldName, (Object[]) value);\n+                                                   } else {\n+                                                       appendSummary(buffer, fieldName, (Object[]) value);\n+                                                   }\n+                                               } else {\n+                                                   if (detail) {\n+                                                       appendDetail(buffer, fieldName, value);\n+                                                   } else {\n+                                                       appendSummary(buffer, fieldName, value);\n+                                                   }\n+                                               }\n+        } finally {\n+            unregister(value);\n+        }\n     }\r\n \r\n     /**\r\n@@ -583,9 +621,11 @@ public abstract class ToStringStyle implements Serializable {\n      *  not <code>null</code>\r\n      *\r\n      * @since 2.2\r\n-     */\r\n-    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n-       ObjectUtils.identityToString(buffer, value);\r\n+     */\n+\n+\n+    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\n+        ObjectUtils.identityToString(buffer, value);\n     }\r\n \r\n     /**\r\n@@ -596,9 +636,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(value);\n     }\r\n \r\n     /**\r\n@@ -608,9 +650,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param coll  the <code>Collection</code> to add to the\r\n      *  <code>toString</code>, not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\r\n-        buffer.append(coll);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\n+        buffer.append(coll);\n     }\r\n \r\n     /**\r\n@@ -620,9 +664,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param map  the <code>Map</code> to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\r\n-        buffer.append(map);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\n+        buffer.append(map);\n     }\r\n \r\n     /**\r\n@@ -633,11 +679,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(summaryObjectStartText);\r\n-        buffer.append(getShortClassName(value.getClass()));\r\n-        buffer.append(summaryObjectEndText);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(summaryObjectStartText);\n+        buffer.append(getShortClassName(value.getClass()));\n+        buffer.append(summaryObjectEndText);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -649,11 +697,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, long value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -663,9 +713,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -677,11 +729,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, int value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -691,9 +745,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -705,11 +761,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, short value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -719,9 +777,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -733,11 +793,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, byte value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -747,9 +809,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -761,11 +825,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, char value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -775,9 +841,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -789,11 +857,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, double value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -803,9 +873,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -817,11 +889,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, float value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -831,9 +905,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n+        buffer.append(value);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -845,11 +921,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, boolean value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -859,9 +937,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\r\n-        buffer.append(value);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n+        buffer.append(value);\n     }\r\n \r\n     /**\r\n@@ -873,21 +953,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the toString\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -900,22 +980,26 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            Object item = array[i];\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            Object item = array[i];\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -926,23 +1010,27 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n      * @since 2.0\r\n-     */\r\n-    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\r\n-        buffer.append(arrayStart);\r\n-        int length = Array.getLength(array);\r\n-        for (int i = 0; i < length; i++) {\r\n-            Object item = Array.get(array, i);\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n+        buffer.append(arrayStart);\n+\n+        int length = Array.getLength(array);\n+        for (int i = 0; i < length; i++) {\n+            Object item = Array.get(array, i);\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -953,9 +1041,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -969,21 +1059,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -994,16 +1084,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1014,9 +1109,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1030,21 +1127,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1055,16 +1152,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1075,9 +1177,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1091,21 +1195,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1116,16 +1220,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1136,9 +1245,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1152,21 +1263,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1177,16 +1288,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1197,9 +1313,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1213,21 +1331,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the <code>toString</code>\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1238,16 +1356,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1258,9 +1381,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1274,21 +1399,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the toString\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1299,16 +1424,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1319,9 +1449,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1335,21 +1467,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the toString\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1360,16 +1492,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1380,9 +1517,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1396,21 +1535,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param array  the array to add to the toString\r\n      * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n      *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n+     */\n+\n+\n+    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+        } else if (isFullDetail(fullDetail)) {\n+                   appendDetail(buffer, fieldName, array);\n+        } else {\n+                   appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n     }\r\n \r\n     /**\r\n@@ -1421,16 +1560,21 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n+     */\n+\n+\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n+        buffer.append(arrayStart);\n+\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+\n+        buffer.append(arrayEnd);\n     }\r\n \r\n     /**\r\n@@ -1441,9 +1585,11 @@ public abstract class ToStringStyle implements Serializable {\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param array  the array to add to the <code>toString</code>,\r\n      *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n+     */\n+\n+\n+    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -1453,16 +1599,19 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param object  the <code>Object</code> whose name to output\r\n-     */\r\n-    protected void appendClassName(StringBuffer buffer, Object object) {\r\n-        if (useClassName && object != null) {\r\n-            register(object);\r\n-            if (useShortClassName) {\r\n-                buffer.append(getShortClassName(object.getClass()));\r\n-            } else {\r\n-                buffer.append(object.getClass().getName());\r\n-            }\r\n-        }\r\n+     */\n+\n+\n+    protected void appendClassName(StringBuffer buffer, Object object) {\n+        if (useClassName && object != null) {\n+            register(object);\n+\n+            if (useShortClassName) {\n+                buffer.append(getShortClassName(object.getClass()));\n+            } else {\n+                buffer.append(object.getClass().getName());\n+            }\n+        }\n     }\r\n \r\n     /**\r\n@@ -1470,31 +1619,37 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param object  the <code>Object</code> whose id to output\r\n-     */\r\n-    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\r\n-        if (this.isUseIdentityHashCode() && object!=null) {\r\n-            register(object);\r\n-            buffer.append('@');\r\n-            buffer.append(Integer.toHexString(System.identityHashCode(object)));\r\n-        }\r\n+     */\n+\n+\n+    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n+        if (this.isUseIdentityHashCode() && object != null) {\n+            register(object);\n+            buffer.append('@');\n+            buffer.append(Integer.toHexString(System.identityHashCode(object)));\n+        }\n     }\r\n \r\n     /**\r\n      * <p>Append to the <code>toString</code> the content start.</p>\r\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentStart(StringBuffer buffer) {\r\n-        buffer.append(contentStart);\r\n+     */\n+\n+\n+    protected void appendContentStart(StringBuffer buffer) {\n+        buffer.append(contentStart);\n     }\r\n \r\n     /**\r\n      * <p>Append to the <code>toString</code> the content end.</p>\r\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentEnd(StringBuffer buffer) {\r\n-        buffer.append(contentEnd);\r\n+     */\n+\n+\n+    protected void appendContentEnd(StringBuffer buffer) {\n+        buffer.append(contentEnd);\n     }\r\n \r\n     /**\r\n@@ -1504,18 +1659,22 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendNullText(StringBuffer buffer, String fieldName) {\r\n-        buffer.append(nullText);\r\n+     */\n+\n+\n+    protected void appendNullText(StringBuffer buffer, String fieldName) {\n+        buffer.append(nullText);\n     }\r\n \r\n     /**\r\n      * <p>Append to the <code>toString</code> the field separator.</p>\r\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendFieldSeparator(StringBuffer buffer) {\r\n-        buffer.append(fieldSeparator);\r\n+     */\n+\n+\n+    protected void appendFieldSeparator(StringBuffer buffer) {\n+        buffer.append(fieldSeparator);\n     }\r\n \r\n     /**\r\n@@ -1523,12 +1682,14 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name\r\n-     */\r\n-    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\r\n-        if (useFieldNames && fieldName != null) {\r\n-            buffer.append(fieldName);\r\n-            buffer.append(fieldNameValueSeparator);\r\n-        }\r\n+     */\n+\n+\n+    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n+        if (useFieldNames && fieldName != null) {\n+            buffer.append(fieldName);\n+            buffer.append(fieldNameValueSeparator);\n+        }\n     }\r\n \r\n     /**\r\n@@ -1536,9 +1697,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\r\n-        appendFieldSeparator(buffer);\r\n+     */\n+\n+\n+    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n+        appendFieldSeparator(buffer);\n     }\r\n \r\n     /**\r\n@@ -1555,11 +1718,13 @@ public abstract class ToStringStyle implements Serializable {\n      * @param buffer  the <code>StringBuffer</code> to populate\r\n      * @param fieldName  the field name, typically not used as already appended\r\n      * @param size  the size to append\r\n-     */\r\n-    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\r\n-        buffer.append(sizeStartText);\r\n-        buffer.append(size);\r\n-        buffer.append(sizeEndText);\r\n+     */\n+\n+\n+    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\n+        buffer.append(sizeStartText);\n+        buffer.append(size);\n+        buffer.append(sizeEndText);\n     }\r\n \r\n     /**\r\n@@ -1575,12 +1740,14 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param fullDetailRequest  the detail level requested\r\n      * @return whether full detail is to be shown\r\n-     */\r\n-    protected boolean isFullDetail(Boolean fullDetailRequest) {\r\n-        if (fullDetailRequest == null) {\r\n-            return defaultFullDetail;\r\n-        }\r\n-        return fullDetailRequest.booleanValue();\r\n+     */\n+\n+\n+    protected boolean isFullDetail(Boolean fullDetailRequest) {\n+        if (fullDetailRequest == null) {\n+            return defaultFullDetail;\n+        }\n+        return fullDetailRequest.booleanValue();\n     }\r\n \r\n     /**\r\n@@ -1591,9 +1758,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param cls  the <code>Class</code> to get the short name of\r\n      * @return the short name\r\n-     */\r\n-    protected String getShortClassName(Class<?> cls) {\r\n-        return ClassUtils.getShortClassName(cls);\r\n+     */\n+\n+\n+    protected String getShortClassName(Class<?> cls) {\n+    return ClassUtils.getShortClassName(cls);\n     }\r\n \r\n     // Setters and getters for the customizable parts of the style\r\n@@ -1605,18 +1774,22 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets whether to use the class name.</p>\r\n      *\r\n      * @return the current useClassName flag\r\n-     */\r\n-    protected boolean isUseClassName() {\r\n-        return useClassName;\r\n+     */\n+\n+\n+    protected boolean isUseClassName() {\n+    return useClassName;\n     }\r\n \r\n     /**\r\n      * <p>Sets whether to use the class name.</p>\r\n      *\r\n      * @param useClassName  the new useClassName flag\r\n-     */\r\n-    protected void setUseClassName(boolean useClassName) {\r\n-        this.useClassName = useClassName;\r\n+     */\n+\n+\n+    protected void setUseClassName(boolean useClassName) {\n+        this.useClassName = useClassName;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1626,9 +1799,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @return the current useShortClassName flag\r\n      * @since 2.0\r\n-     */\r\n-    protected boolean isUseShortClassName() {\r\n-        return useShortClassName;\r\n+     */\n+\n+\n+    protected boolean isUseShortClassName() {\n+    return useShortClassName;\n     }\r\n \r\n     /**\r\n@@ -1636,9 +1811,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param useShortClassName  the new useShortClassName flag\r\n      * @since 2.0\r\n-     */\r\n-    protected void setUseShortClassName(boolean useShortClassName) {\r\n-        this.useShortClassName = useShortClassName;\r\n+     */\n+\n+\n+    protected void setUseShortClassName(boolean useShortClassName) {\n+        this.useShortClassName = useShortClassName;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1647,18 +1824,22 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets whether to use the identity hash code.</p>\r\n      *\r\n      * @return the current useIdentityHashCode flag\r\n-     */\r\n-    protected boolean isUseIdentityHashCode() {\r\n-        return useIdentityHashCode;\r\n+     */\n+\n+\n+    protected boolean isUseIdentityHashCode() {\n+    return useIdentityHashCode;\n     }\r\n \r\n     /**\r\n      * <p>Sets whether to use the identity hash code.</p>\r\n      *\r\n      * @param useIdentityHashCode  the new useIdentityHashCode flag\r\n-     */\r\n-    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\r\n-        this.useIdentityHashCode = useIdentityHashCode;\r\n+     */\n+\n+\n+    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n+        this.useIdentityHashCode = useIdentityHashCode;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1667,18 +1848,22 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets whether to use the field names passed in.</p>\r\n      *\r\n      * @return the current useFieldNames flag\r\n-     */\r\n-    protected boolean isUseFieldNames() {\r\n-        return useFieldNames;\r\n+     */\n+\n+\n+    protected boolean isUseFieldNames() {\n+    return useFieldNames;\n     }\r\n \r\n     /**\r\n      * <p>Sets whether to use the field names passed in.</p>\r\n      *\r\n      * @param useFieldNames  the new useFieldNames flag\r\n-     */\r\n-    protected void setUseFieldNames(boolean useFieldNames) {\r\n-        this.useFieldNames = useFieldNames;\r\n+     */\n+\n+\n+    protected void setUseFieldNames(boolean useFieldNames) {\n+        this.useFieldNames = useFieldNames;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1688,9 +1873,11 @@ public abstract class ToStringStyle implements Serializable {\n      * specify.</p>\r\n      *\r\n      * @return the current defaultFullDetail flag\r\n-     */\r\n-    protected boolean isDefaultFullDetail() {\r\n-        return defaultFullDetail;\r\n+     */\n+\n+\n+    protected boolean isDefaultFullDetail() {\n+    return defaultFullDetail;\n     }\r\n \r\n     /**\r\n@@ -1698,9 +1885,11 @@ public abstract class ToStringStyle implements Serializable {\n      * specify.</p>\r\n      *\r\n      * @param defaultFullDetail  the new defaultFullDetail flag\r\n-     */\r\n-    protected void setDefaultFullDetail(boolean defaultFullDetail) {\r\n-        this.defaultFullDetail = defaultFullDetail;\r\n+     */\n+\n+\n+    protected void setDefaultFullDetail(boolean defaultFullDetail) {\n+        this.defaultFullDetail = defaultFullDetail;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1709,18 +1898,22 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets whether to output array content detail.</p>\r\n      *\r\n      * @return the current array content detail setting\r\n-     */\r\n-    protected boolean isArrayContentDetail() {\r\n-        return arrayContentDetail;\r\n+     */\n+\n+\n+    protected boolean isArrayContentDetail() {\n+    return arrayContentDetail;\n     }\r\n \r\n     /**\r\n      * <p>Sets whether to output array content detail.</p>\r\n      *\r\n      * @param arrayContentDetail  the new arrayContentDetail flag\r\n-     */\r\n-    protected void setArrayContentDetail(boolean arrayContentDetail) {\r\n-        this.arrayContentDetail = arrayContentDetail;\r\n+     */\n+\n+\n+    protected void setArrayContentDetail(boolean arrayContentDetail) {\n+        this.arrayContentDetail = arrayContentDetail;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1729,9 +1922,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the array start text.</p>\r\n      *\r\n      * @return the current array start text\r\n-     */\r\n-    protected String getArrayStart() {\r\n-        return arrayStart;\r\n+     */\n+\n+\n+    protected String getArrayStart() {\n+    return arrayStart;\n     }\r\n \r\n     /**\r\n@@ -1741,12 +1936,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param arrayStart  the new array start text\r\n-     */\r\n-    protected void setArrayStart(String arrayStart) {\r\n-        if (arrayStart == null) {\r\n-            arrayStart = \"\";\r\n-        }\r\n-        this.arrayStart = arrayStart;\r\n+     */\n+\n+\n+    protected void setArrayStart(String arrayStart) {\n+        if (arrayStart == null) {\n+            arrayStart = \"\";\n+        }\n+        this.arrayStart = arrayStart;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1755,9 +1952,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the array end text.</p>\r\n      *\r\n      * @return the current array end text\r\n-     */\r\n-    protected String getArrayEnd() {\r\n-        return arrayEnd;\r\n+     */\n+\n+\n+    protected String getArrayEnd() {\n+    return arrayEnd;\n     }\r\n \r\n     /**\r\n@@ -1767,12 +1966,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param arrayEnd  the new array end text\r\n-     */\r\n-    protected void setArrayEnd(String arrayEnd) {\r\n-        if (arrayEnd == null) {\r\n-            arrayEnd = \"\";\r\n-        }\r\n-        this.arrayEnd = arrayEnd;\r\n+     */\n+\n+\n+    protected void setArrayEnd(String arrayEnd) {\n+        if (arrayEnd == null) {\n+            arrayEnd = \"\";\n+        }\n+        this.arrayEnd = arrayEnd;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1781,9 +1982,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the array separator text.</p>\r\n      *\r\n      * @return the current array separator text\r\n-     */\r\n-    protected String getArraySeparator() {\r\n-        return arraySeparator;\r\n+     */\n+\n+\n+    protected String getArraySeparator() {\n+    return arraySeparator;\n     }\r\n \r\n     /**\r\n@@ -1793,12 +1996,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param arraySeparator  the new array separator text\r\n-     */\r\n-    protected void setArraySeparator(String arraySeparator) {\r\n-        if (arraySeparator == null) {\r\n-            arraySeparator = \"\";\r\n-        }\r\n-        this.arraySeparator = arraySeparator;\r\n+     */\n+\n+\n+    protected void setArraySeparator(String arraySeparator) {\n+        if (arraySeparator == null) {\n+            arraySeparator = \"\";\n+        }\n+        this.arraySeparator = arraySeparator;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1807,9 +2012,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the content start text.</p>\r\n      *\r\n      * @return the current content start text\r\n-     */\r\n-    protected String getContentStart() {\r\n-        return contentStart;\r\n+     */\n+\n+\n+    protected String getContentStart() {\n+    return contentStart;\n     }\r\n \r\n     /**\r\n@@ -1819,12 +2026,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param contentStart  the new content start text\r\n-     */\r\n-    protected void setContentStart(String contentStart) {\r\n-        if (contentStart == null) {\r\n-            contentStart = \"\";\r\n-        }\r\n-        this.contentStart = contentStart;\r\n+     */\n+\n+\n+    protected void setContentStart(String contentStart) {\n+        if (contentStart == null) {\n+            contentStart = \"\";\n+        }\n+        this.contentStart = contentStart;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1833,9 +2042,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the content end text.</p>\r\n      *\r\n      * @return the current content end text\r\n-     */\r\n-    protected String getContentEnd() {\r\n-        return contentEnd;\r\n+     */\n+\n+\n+    protected String getContentEnd() {\n+    return contentEnd;\n     }\r\n \r\n     /**\r\n@@ -1845,12 +2056,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param contentEnd  the new content end text\r\n-     */\r\n-    protected void setContentEnd(String contentEnd) {\r\n-        if (contentEnd == null) {\r\n-            contentEnd = \"\";\r\n-        }\r\n-        this.contentEnd = contentEnd;\r\n+     */\n+\n+\n+    protected void setContentEnd(String contentEnd) {\n+        if (contentEnd == null) {\n+            contentEnd = \"\";\n+        }\n+        this.contentEnd = contentEnd;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1859,9 +2072,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the field name value separator text.</p>\r\n      *\r\n      * @return the current field name value separator text\r\n-     */\r\n-    protected String getFieldNameValueSeparator() {\r\n-        return fieldNameValueSeparator;\r\n+     */\n+\n+\n+    protected String getFieldNameValueSeparator() {\n+    return fieldNameValueSeparator;\n     }\r\n \r\n     /**\r\n@@ -1871,12 +2086,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param fieldNameValueSeparator  the new field name value separator text\r\n-     */\r\n-    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\r\n-        if (fieldNameValueSeparator == null) {\r\n-            fieldNameValueSeparator = \"\";\r\n-        }\r\n-        this.fieldNameValueSeparator = fieldNameValueSeparator;\r\n+     */\n+\n+\n+    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n+        if (fieldNameValueSeparator == null) {\n+            fieldNameValueSeparator = \"\";\n+        }\n+        this.fieldNameValueSeparator = fieldNameValueSeparator;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1885,9 +2102,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the field separator text.</p>\r\n      *\r\n      * @return the current field separator text\r\n-     */\r\n-    protected String getFieldSeparator() {\r\n-        return fieldSeparator;\r\n+     */\n+\n+\n+    protected String getFieldSeparator() {\n+    return fieldSeparator;\n     }\r\n \r\n     /**\r\n@@ -1897,12 +2116,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param fieldSeparator  the new field separator text\r\n-     */\r\n-    protected void setFieldSeparator(String fieldSeparator) {\r\n-        if (fieldSeparator == null) {\r\n-            fieldSeparator = \"\";\r\n-        }\r\n-        this.fieldSeparator = fieldSeparator;\r\n+     */\n+\n+\n+    protected void setFieldSeparator(String fieldSeparator) {\n+        if (fieldSeparator == null) {\n+            fieldSeparator = \"\";\n+        }\n+        this.fieldSeparator = fieldSeparator;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1913,9 +2134,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @return the fieldSeparatorAtStart flag\r\n      * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtStart() {\r\n-        return fieldSeparatorAtStart;\r\n+     */\n+\n+\n+    protected boolean isFieldSeparatorAtStart() {\n+    return fieldSeparatorAtStart;\n     }\r\n \r\n     /**\r\n@@ -1924,9 +2147,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\r\n      * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\r\n-        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\r\n+     */\n+\n+\n+    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1937,9 +2162,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @return fieldSeparatorAtEnd flag\r\n      * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtEnd() {\r\n-        return fieldSeparatorAtEnd;\r\n+     */\n+\n+\n+    protected boolean isFieldSeparatorAtEnd() {\n+    return fieldSeparatorAtEnd;\n     }\r\n \r\n     /**\r\n@@ -1948,9 +2175,11 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\r\n      * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\r\n-        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\r\n+     */\n+\n+\n+    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1959,9 +2188,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>Gets the text to output when <code>null</code> found.</p>\r\n      *\r\n      * @return the current text to output when null found\r\n-     */\r\n-    protected String getNullText() {\r\n-        return nullText;\r\n+     */\n+\n+\n+    protected String getNullText() {\n+    return nullText;\n     }\r\n \r\n     /**\r\n@@ -1971,12 +2202,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param nullText  the new text to output when null found\r\n-     */\r\n-    protected void setNullText(String nullText) {\r\n-        if (nullText == null) {\r\n-            nullText = \"\";\r\n-        }\r\n-        this.nullText = nullText;\r\n+     */\n+\n+\n+    protected void setNullText(String nullText) {\n+        if (nullText == null) {\n+            nullText = \"\";\n+        }\n+        this.nullText = nullText;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -1988,9 +2221,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>This is output before the size value.</p>\r\n      *\r\n      * @return the current start of size text\r\n-     */\r\n-    protected String getSizeStartText() {\r\n-        return sizeStartText;\r\n+     */\n+\n+\n+    protected String getSizeStartText() {\n+    return sizeStartText;\n     }\r\n \r\n     /**\r\n@@ -2003,12 +2238,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param sizeStartText  the new start of size text\r\n-     */\r\n-    protected void setSizeStartText(String sizeStartText) {\r\n-        if (sizeStartText == null) {\r\n-            sizeStartText = \"\";\r\n-        }\r\n-        this.sizeStartText = sizeStartText;\r\n+     */\n+\n+\n+    protected void setSizeStartText(String sizeStartText) {\n+        if (sizeStartText == null) {\n+            sizeStartText = \"\";\n+        }\n+        this.sizeStartText = sizeStartText;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -2020,9 +2257,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>This is output after the size value.</p>\r\n      *\r\n      * @return the current end of size text\r\n-     */\r\n-    protected String getSizeEndText() {\r\n-        return sizeEndText;\r\n+     */\n+\n+\n+    protected String getSizeEndText() {\n+    return sizeEndText;\n     }\r\n \r\n     /**\r\n@@ -2035,12 +2274,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param sizeEndText  the new end of size text\r\n-     */\r\n-    protected void setSizeEndText(String sizeEndText) {\r\n-        if (sizeEndText == null) {\r\n-            sizeEndText = \"\";\r\n-        }\r\n-        this.sizeEndText = sizeEndText;\r\n+     */\n+\n+\n+    protected void setSizeEndText(String sizeEndText) {\n+        if (sizeEndText == null) {\n+            sizeEndText = \"\";\n+        }\n+        this.sizeEndText = sizeEndText;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -2052,9 +2293,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>This is output before the size value.</p>\r\n      *\r\n      * @return the current start of summary text\r\n-     */\r\n-    protected String getSummaryObjectStartText() {\r\n-        return summaryObjectStartText;\r\n+     */\n+\n+\n+    protected String getSummaryObjectStartText() {\n+    return summaryObjectStartText;\n     }\r\n \r\n     /**\r\n@@ -2067,12 +2310,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param summaryObjectStartText  the new start of summary text\r\n-     */\r\n-    protected void setSummaryObjectStartText(String summaryObjectStartText) {\r\n-        if (summaryObjectStartText == null) {\r\n-            summaryObjectStartText = \"\";\r\n-        }\r\n-        this.summaryObjectStartText = summaryObjectStartText;\r\n+     */\n+\n+\n+    protected void setSummaryObjectStartText(String summaryObjectStartText) {\n+        if (summaryObjectStartText == null) {\n+            summaryObjectStartText = \"\";\n+        }\n+        this.summaryObjectStartText = summaryObjectStartText;\n     }\r\n \r\n     //---------------------------------------------------------------------\r\n@@ -2084,9 +2329,11 @@ public abstract class ToStringStyle implements Serializable {\n      * <p>This is output after the size value.</p>\r\n      *\r\n      * @return the current end of summary text\r\n-     */\r\n-    protected String getSummaryObjectEndText() {\r\n-        return summaryObjectEndText;\r\n+     */\n+\n+\n+    protected String getSummaryObjectEndText() {\n+    return summaryObjectEndText;\n     }\r\n \r\n     /**\r\n@@ -2099,12 +2346,14 @@ public abstract class ToStringStyle implements Serializable {\n      * an empty String.</p>\r\n      *\r\n      * @param summaryObjectEndText  the new end of summary text\r\n-     */\r\n-    protected void setSummaryObjectEndText(String summaryObjectEndText) {\r\n-        if (summaryObjectEndText == null) {\r\n-            summaryObjectEndText = \"\";\r\n-        }\r\n-        this.summaryObjectEndText = summaryObjectEndText;\r\n+     */\n+\n+\n+    protected void setSummaryObjectEndText(String summaryObjectEndText) {\n+        if (summaryObjectEndText == null) {\n+            summaryObjectEndText = \"\";\n+        }\n+        this.summaryObjectEndText = summaryObjectEndText;\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2114,34 +2363,37 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * <p>This is an inner class rather than using\r\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n+     */\n+\n     private static final class DefaultToStringStyle extends ToStringStyle {\r\n \r\n         /**\r\n          * Required for serialization support.\r\n          *\r\n          * @see java.io.Serializable\r\n-         */\r\n+         */\n+\n         private static final long serialVersionUID = 1L;\r\n \r\n         /**\r\n          * <p>Constructor.</p>\r\n          *\r\n          * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        DefaultToStringStyle() {\r\n-            super();\r\n+         */\n+\n+        DefaultToStringStyle() {\n+            super();\n         }\r\n \r\n         /**\r\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n          *\r\n          * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.DEFAULT_STYLE;\r\n-        }\r\n-\r\n+         */\n+\n+        private Object readResolve() {\n+        return ToStringStyle.DEFAULT_STYLE;\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2152,30 +2404,32 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * <p>This is an inner class rather than using\r\n      * <code>StandardToStringStyle</code> to ensure its immutability.\r\n-     */\r\n-    private static final class NoFieldNameToStringStyle extends ToStringStyle {\r\n-\r\n+     */\n+\n+    private static final class NoFieldNameToStringStyle extends ToStringStyle {\n+\n         private static final long serialVersionUID = 1L;\r\n \r\n         /**\r\n          * <p>Constructor.</p>\r\n          *\r\n          * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        NoFieldNameToStringStyle() {\r\n-            super();\r\n-            this.setUseFieldNames(false);\r\n+         */\n+\n+        NoFieldNameToStringStyle() {\n+            super();\n+            this.setUseFieldNames(false);\n         }\r\n \r\n         /**\r\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n          *\r\n          * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n-        }\r\n-\r\n+         */\n+\n+        private Object readResolve() {\n+        return ToStringStyle.NO_FIELD_NAMES_STYLE;\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2186,30 +2440,32 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * <p>This is an inner class rather than using\r\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class ShortPrefixToStringStyle extends ToStringStyle {\r\n-\r\n+     */\n+\n+    private static final class ShortPrefixToStringStyle extends ToStringStyle {\n+\n         private static final long serialVersionUID = 1L;\r\n \r\n         /**\r\n          * <p>Constructor.</p>\r\n          *\r\n          * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        ShortPrefixToStringStyle() {\r\n-            super();\r\n-            this.setUseShortClassName(true);\r\n-            this.setUseIdentityHashCode(false);\r\n+         */\n+\n+        ShortPrefixToStringStyle() {\n+            super();\n+            this.setUseShortClassName(true);\n+            this.setUseIdentityHashCode(false);\n         }\r\n \r\n         /**\r\n          * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n          * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SHORT_PREFIX_STYLE;\r\n-        }\r\n-\r\n+         */\n+\n+        private Object readResolve() {\n+        return ToStringStyle.SHORT_PREFIX_STYLE;\n+        }\n     }\r\n \r\n     /**\r\n@@ -2218,33 +2474,35 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * <p>This is an inner class rather than using\r\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class SimpleToStringStyle extends ToStringStyle {\r\n-\r\n+     */\n+\n+    private static final class SimpleToStringStyle extends ToStringStyle {\n+\n         private static final long serialVersionUID = 1L;\r\n \r\n         /**\r\n          * <p>Constructor.</p>\r\n          *\r\n          * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        SimpleToStringStyle() {\r\n-            super();\r\n-            this.setUseClassName(false);\r\n-            this.setUseIdentityHashCode(false);\r\n-            this.setUseFieldNames(false);\r\n-            this.setContentStart(\"\");\r\n-            this.setContentEnd(\"\");\r\n+         */\n+\n+        SimpleToStringStyle() {\n+            super();\n+            this.setUseClassName(false);\n+            this.setUseIdentityHashCode(false);\n+            this.setUseFieldNames(false);\n+            this.setContentStart(\"\");\n+            this.setContentEnd(\"\");\n         }\r\n \r\n         /**\r\n          * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n          * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SIMPLE_STYLE;\r\n-        }\r\n-\r\n+         */\n+\n+        private Object readResolve() {\n+        return ToStringStyle.SIMPLE_STYLE;\n+        }\n     }\r\n \r\n     //----------------------------------------------------------------------------\r\n@@ -2254,33 +2512,34 @@ public abstract class ToStringStyle implements Serializable {\n      *\r\n      * <p>This is an inner class rather than using\r\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class MultiLineToStringStyle extends ToStringStyle {\r\n-\r\n+     */\n+\n+    private static final class MultiLineToStringStyle extends ToStringStyle {\n+\n         private static final long serialVersionUID = 1L;\r\n \r\n         /**\r\n          * <p>Constructor.</p>\r\n          *\r\n          * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        MultiLineToStringStyle() {\r\n-            super();\r\n-            this.setContentStart(\"[\");\r\n-            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\r\n-            this.setFieldSeparatorAtStart(true);\r\n-            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\r\n+         */\n+\n+        MultiLineToStringStyle() {\n+            super();\n+            this.setContentStart(\"[\");\n+            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n+            this.setFieldSeparatorAtStart(true);\n+            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n         }\r\n \r\n         /**\r\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n          *\r\n          * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.MULTI_LINE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n+         */\n+\n+        private Object readResolve() {\n+        return ToStringStyle.MULTI_LINE_STYLE;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 1129
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/59/ToStringStyle.java\nindex e5c90493b4..cd60668340 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/errored/1/59/ToStringStyle.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Internet2-grouper/styler_random/59/ToStringStyle.java\n@@ -1,2286 +1,2286 @@\n-/**\r\n- * Copyright 2014 Internet2\r\n- *\r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\r\n-\r\n-import java.io.Serializable;\r\n-import java.lang.reflect.Array;\r\n-import java.util.Collection;\r\n-import java.util.Map;\r\n-import java.util.WeakHashMap;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\r\n-import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.SystemUtils;\r\n-\r\n-/**\r\n- * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\r\n- * The main public interface is always via <code>ToStringBuilder</code>.</p>\r\n- *\r\n- * <p>These classes are intended to be used as <code>Singletons</code>.\r\n- * There is no need to instantiate a new style each time. A program\r\n- * will generally use one of the predefined constants on this class.\r\n- * Alternatively, the {@link StandardToStringStyle} class can be used\r\n- * to set the individual settings. Thus most styles can be achieved\r\n- * without subclassing.</p>\r\n- *\r\n- * <p>If required, a subclass can override as many or as few of the\r\n- * methods as it requires. Each object type (from <code>boolean</code>\r\n- * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\r\n- * its own methods to output it. Most have two versions, detail and summary.\r\n- *\r\n- * <p>For example, the detail version of the array based methods will\r\n- * output the whole array, whereas the summary method will just output\r\n- * the array length.</p>\r\n- *\r\n- * <p>If you want to format the output of certain objects, such as dates, you\r\n- * must create a subclass and override a method.\r\n- * <pre>\r\n- * public class MyStyle extends ToStringStyle {\r\n- *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n- *     if (value instanceof Date) {\r\n- *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\r\n- *     }\r\n- *     buffer.append(value);\r\n- *   }\r\n- * }\r\n- * </pre>\r\n- * </p>\r\n- *\r\n- * @since 1.0\r\n- * @version $Id: ToStringStyle.java 1091066 2011-04-11 13:30:11Z mbenson $\r\n- */\r\n-public abstract class ToStringStyle implements Serializable {\r\n-\r\n-    /**\r\n-     * Serialization version ID.\r\n-     */\r\n-    private static final long serialVersionUID = -2587890625525655916L;\r\n-\r\n-    /**\r\n-     * The default toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\r\n-\r\n-    /**\r\n-     * The multi line toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[\r\n-     *   name=John Doe\r\n-     *   age=33\r\n-     *   smoker=false\r\n-     * ]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\r\n-\r\n-    /**\r\n-     * The no field names toString style. Using the Using the\r\n-     * <code>Person</code> example from {@link ToStringBuilder}, the output\r\n-     * would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person@182f0db[John Doe,33,false]\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\r\n-\r\n-    /**\r\n-     * The short prefix toString style. Using the <code>Person</code> example\r\n-     * from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * Person[name=John Doe,age=33,smoker=false]\r\n-     * </pre>\r\n-     *\r\n-     * @since 2.1\r\n-     */\r\n-    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\r\n-\r\n-    /**\r\n-     * The simple toString style. Using the Using the <code>Person</code>\r\n-     * example from {@link ToStringBuilder}, the output would look like this:\r\n-     *\r\n-     * <pre>\r\n-     * John Doe,33,false\r\n-     * </pre>\r\n-     */\r\n-    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * A registry of objects used by <code>reflectionToString</code> methods\r\n-     * to detect cyclical object references and avoid infinite loops.\r\n-     * </p>\r\n-     */\r\n-    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\r\n-        new ThreadLocal<WeakHashMap<Object,Object>>();\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\r\n-     * methods in the current thread.\r\n-     * </p>\r\n-     *\r\n-     * @return Set the registry of objects being traversed\r\n-     */\r\n-    static Map<Object, Object> getRegistry() {\r\n-        return REGISTRY.get();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Returns <code>true</code> if the registry contains the given object.\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to lookup in the registry.\r\n-     * @return boolean <code>true</code> if the registry contains the given\r\n-     *             object.\r\n-     */\r\n-    static boolean isRegistered(Object value) {\r\n-        Map<Object, Object> m = getRegistry();\r\n-        return m != null && m.containsKey(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Registers the given object. Used by the reflection methods to avoid\r\n-     * infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to register.\r\n-     */\r\n-    static void register(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m == null) {\r\n-                REGISTRY.set(new WeakHashMap<Object, Object>());\r\n-            }\r\n-            getRegistry().put(value, null);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>\r\n-     * Unregisters the given object.\r\n-     * </p>\r\n-     *\r\n-     * <p>\r\n-     * Used by the reflection methods to avoid infinite loops.\r\n-     * </p>\r\n-     *\r\n-     * @param value\r\n-     *                  The object to unregister.\r\n-     */\r\n-    static void unregister(Object value) {\r\n-        if (value != null) {\r\n-            Map<Object, Object> m = getRegistry();\r\n-            if (m != null) {\r\n-                m.remove(value);\r\n-                if (m.isEmpty()) {\r\n-                    REGISTRY.remove();\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * Whether to use the field names, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useFieldNames = true;\r\n-\r\n-    /**\r\n-     * Whether to use the class name, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useClassName = true;\r\n-\r\n-    /**\r\n-     * Whether to use short class names, the default is <code>false</code>.\r\n-     */\r\n-    private boolean useShortClassName = false;\r\n-\r\n-    /**\r\n-     * Whether to use the identity hash code, the default is <code>true</code>.\r\n-     */\r\n-    private boolean useIdentityHashCode = true;\r\n-\r\n-    /**\r\n-     * The content start <code>'['</code>.\r\n-     */\r\n-    private String contentStart = \"[\";\r\n-\r\n-    /**\r\n-     * The content end <code>']'</code>.\r\n-     */\r\n-    private String contentEnd = \"]\";\r\n-\r\n-    /**\r\n-     * The field name value separator <code>'='</code>.\r\n-     */\r\n-    private String fieldNameValueSeparator = \"=\";\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added before any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtStart = false;\r\n-\r\n-    /**\r\n-     * Whether the field separator should be added after any other fields.\r\n-     */\r\n-    private boolean fieldSeparatorAtEnd = false;\r\n-\r\n-    /**\r\n-     * The field separator <code>','</code>.\r\n-     */\r\n-    private String fieldSeparator = \",\";\r\n-\r\n-    /**\r\n-     * The array start <code>'{'</code>.\r\n-     */\r\n-    private String arrayStart = \"{\";\r\n-\r\n-    /**\r\n-     * The array separator <code>','</code>.\r\n-     */\r\n-    private String arraySeparator = \",\";\r\n-\r\n-    /**\r\n-     * The detail for array content.\r\n-     */\r\n-    private boolean arrayContentDetail = true;\r\n-\r\n-    /**\r\n-     * The array end <code>'}'</code>.\r\n-     */\r\n-    private String arrayEnd = \"}\";\r\n-\r\n-    /**\r\n-     * The value to use when fullDetail is <code>null</code>,\r\n-     * the default value is <code>true</code>.\r\n-     */\r\n-    private boolean defaultFullDetail = true;\r\n-\r\n-    /**\r\n-     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\r\n-     */\r\n-    private String nullText = \"<null>\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'<size'</code>.\r\n-     */\r\n-    private String sizeStartText = \"<size=\";\r\n-\r\n-    /**\r\n-     * The summary size text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String sizeEndText = \">\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&lt;'</code>.\r\n-     */\r\n-    private String summaryObjectStartText = \"<\";\r\n-\r\n-    /**\r\n-     * The summary object text start <code>'&gt;'</code>.\r\n-     */\r\n-    private String summaryObjectEndText = \">\";\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Constructor.</p>\r\n-     */\r\n-    protected ToStringStyle() {\r\n-        super();\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the superclass toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param superToString  the <code>super.toString()</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendSuper(StringBuffer buffer, String superToString) {\r\n-        appendToString(buffer, superToString);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> another toString.</p>\r\n-     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\r\n-     *\r\n-     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param toString  the additional <code>toString</code>\r\n-     * @since 2.0\r\n-     */\r\n-    public void appendToString(StringBuffer buffer, String toString) {\r\n-        if (toString != null) {\r\n-            int pos1 = toString.indexOf(contentStart) + contentStart.length();\r\n-            int pos2 = toString.lastIndexOf(contentEnd);\r\n-            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\r\n-                String data = toString.substring(pos1, pos2);\r\n-                if (fieldSeparatorAtStart) {\r\n-                    removeLastFieldSeparator(buffer);\r\n-                }\r\n-                buffer.append(data);\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the start of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a <code>toString</code> for\r\n-     */\r\n-    public void appendStart(StringBuffer buffer, Object object) {\r\n-        if (object != null) {\r\n-            appendClassName(buffer, object);\r\n-            appendIdentityHashCode(buffer, object);\r\n-            appendContentStart(buffer);\r\n-            if (fieldSeparatorAtStart) {\r\n-                appendFieldSeparator(buffer);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the end of data indicator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> to build a\r\n-     *  <code>toString</code> for.\r\n-     */\r\n-    public void appendEnd(StringBuffer buffer, Object object) {\r\n-        if (this.fieldSeparatorAtEnd == false) {\r\n-            removeLastFieldSeparator(buffer);\r\n-        }\r\n-        appendContentEnd(buffer);\r\n-        unregister(object);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Remove the last field separator from the buffer.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @since 2.0\r\n-     */\r\n-    protected void removeLastFieldSeparator(StringBuffer buffer) {\r\n-        int len = buffer.length();\r\n-        int sepLen = fieldSeparator.length();\r\n-        if (len > 0 && sepLen > 0 && len >= sepLen) {\r\n-            boolean match = true;\r\n-            for (int i = 0; i < sepLen; i++) {\r\n-                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\r\n-                    match = false;\r\n-                    break;\r\n-                }\r\n-            }\r\n-            if (match) {\r\n-                buffer.setLength(len - sepLen);\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full <code>toString</code> of the\r\n-     * <code>Object</code> passed in.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (value == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else {\r\n-            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>,\r\n-     * correctly interpreting its type.</p>\r\n-     *\r\n-     * <p>This method performs the main lookup by Class type to correctly\r\n-     * route arrays, <code>Collections</code>, <code>Maps</code> and\r\n-     * <code>Objects</code> to the appropriate method.</p>\r\n-     *\r\n-     * <p>Either detail or summary views can be specified.</p>\r\n-     *\r\n-     * <p>If a cycle is detected, an object will be appended with the\r\n-     * <code>Object.toString()</code> format.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @param detail  output detail or not\r\n-     */\r\n-    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\r\n-        if (isRegistered(value)\r\n-            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\r\n-           appendCyclicObject(buffer, fieldName, value);\r\n-           return;\r\n-        }\r\n-\r\n-        register(value);\r\n-\r\n-        try {\r\n-            if (value instanceof Collection<?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Collection<?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof Map<?, ?>) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\r\n-                } else {\r\n-                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\r\n-                }\r\n-\r\n-            } else if (value instanceof long[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (long[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (long[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof int[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (int[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (int[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof short[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (short[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (short[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof byte[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (byte[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (byte[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof char[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (char[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (char[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof double[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (double[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (double[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof float[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (float[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (float[]) value);\r\n-                }\r\n-\r\n-            } else if (value instanceof boolean[]) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (boolean[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (boolean[]) value);\r\n-                }\r\n-\r\n-            } else if (value.getClass().isArray()) {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, (Object[]) value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, (Object[]) value);\r\n-                }\r\n-\r\n-            } else {\r\n-                if (detail) {\r\n-                    appendDetail(buffer, fieldName, value);\r\n-                } else {\r\n-                    appendSummary(buffer, fieldName, value);\r\n-                }\r\n-            }\r\n-        } finally {\r\n-            unregister(value);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value that has been detected to participate in a cycle. This\r\n-     * implementation will print the standard string value of the value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     *\r\n-     * @since 2.2\r\n-     */\r\n-    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\r\n-       ObjectUtils.identityToString(buffer, value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing the full detail of the <code>Object</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param coll  the <code>Collection</code> to add to the\r\n-     *  <code>toString</code>, not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\r\n-        buffer.append(coll);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param map  the <code>Map</code> to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\r\n-        buffer.append(map);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * value, printing a summary of the <code>Object</code>.</P>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\r\n-        buffer.append(summaryObjectStartText);\r\n-        buffer.append(getShortClassName(value.getClass()));\r\n-        buffer.append(summaryObjectEndText);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean value) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-        appendDetail(buffer, fieldName, value);\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * value.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param value  the value to add to the <code>toString</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\r\n-        buffer.append(value);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>Object</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            Object item = array[i];\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an array type.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     * @since 2.0\r\n-     */\r\n-    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\r\n-        buffer.append(arrayStart);\r\n-        int length = Array.getLength(array);\r\n-        for (int i = 0; i < length; i++) {\r\n-            Object item = Array.get(array, i);\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            if (item == null) {\r\n-                appendNullText(buffer, fieldName);\r\n-\r\n-            } else {\r\n-                appendInternal(buffer, fieldName, item, arrayContentDetail);\r\n-            }\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>Object</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>long</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>long</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an <code>int</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of an\r\n-     * <code>int</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>short</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>short</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>byte</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>char</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the <code>toString</code>\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>char</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>double</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>double</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>float</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>float</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\r\n-     * array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     * @param array  the array to add to the toString\r\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\r\n-     *  for summary info, <code>null</code> for style decides\r\n-     */\r\n-    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\r\n-        appendFieldStart(buffer, fieldName);\r\n-\r\n-        if (array == null) {\r\n-            appendNullText(buffer, fieldName);\r\n-\r\n-        } else if (isFullDetail(fullDetail)) {\r\n-            appendDetail(buffer, fieldName, array);\r\n-\r\n-        } else {\r\n-            appendSummary(buffer, fieldName, array);\r\n-        }\r\n-\r\n-        appendFieldEnd(buffer, fieldName);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the detail of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        buffer.append(arrayStart);\r\n-        for (int i = 0; i < array.length; i++) {\r\n-            if (i > 0) {\r\n-                buffer.append(arraySeparator);\r\n-            }\r\n-            appendDetail(buffer, fieldName, array[i]);\r\n-        }\r\n-        buffer.append(arrayEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a summary of a\r\n-     * <code>boolean</code> array.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param array  the array to add to the <code>toString</code>,\r\n-     *  not <code>null</code>\r\n-     */\r\n-    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\r\n-        appendSummarySize(buffer, fieldName, array.length);\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the class name.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose name to output\r\n-     */\r\n-    protected void appendClassName(StringBuffer buffer, Object object) {\r\n-        if (useClassName && object != null) {\r\n-            register(object);\r\n-            if (useShortClassName) {\r\n-                buffer.append(getShortClassName(object.getClass()));\r\n-            } else {\r\n-                buffer.append(object.getClass().getName());\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param object  the <code>Object</code> whose id to output\r\n-     */\r\n-    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\r\n-        if (this.isUseIdentityHashCode() && object!=null) {\r\n-            register(object);\r\n-            buffer.append('@');\r\n-            buffer.append(Integer.toHexString(System.identityHashCode(object)));\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentStart(StringBuffer buffer) {\r\n-        buffer.append(contentStart);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the content end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendContentEnd(StringBuffer buffer) {\r\n-        buffer.append(contentEnd);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\r\n-     *\r\n-     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendNullText(StringBuffer buffer, String fieldName) {\r\n-        buffer.append(nullText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field separator.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     */\r\n-    protected void appendFieldSeparator(StringBuffer buffer) {\r\n-        buffer.append(fieldSeparator);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> the field start.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name\r\n-     */\r\n-    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\r\n-        if (useFieldNames && fieldName != null) {\r\n-            buffer.append(fieldName);\r\n-            buffer.append(fieldNameValueSeparator);\r\n-        }\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString<code> the field end.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     */\r\n-    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\r\n-        appendFieldSeparator(buffer);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Append to the <code>toString</code> a size summary.</p>\r\n-     *\r\n-     * <p>The size summary is used to summarize the contents of\r\n-     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\r\n-     *\r\n-     * <p>The output consists of a prefix, the passed in size\r\n-     * and a suffix.</p>\r\n-     *\r\n-     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\r\n-     *\r\n-     * @param buffer  the <code>StringBuffer</code> to populate\r\n-     * @param fieldName  the field name, typically not used as already appended\r\n-     * @param size  the size to append\r\n-     */\r\n-    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\r\n-        buffer.append(sizeStartText);\r\n-        buffer.append(size);\r\n-        buffer.append(sizeEndText);\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Is this field to be output in full detail.</p>\r\n-     *\r\n-     * <p>This method converts a detail request into a detail level.\r\n-     * The calling code may request full detail (<code>true</code>),\r\n-     * but a subclass might ignore that and always return\r\n-     * <code>false</code>. The calling code may pass in\r\n-     * <code>null</code> indicating that it doesn't care about\r\n-     * the detail level. In this case the default detail level is\r\n-     * used.</p>\r\n-     *\r\n-     * @param fullDetailRequest  the detail level requested\r\n-     * @return whether full detail is to be shown\r\n-     */\r\n-    protected boolean isFullDetail(Boolean fullDetailRequest) {\r\n-        if (fullDetailRequest == null) {\r\n-            return defaultFullDetail;\r\n-        }\r\n-        return fullDetailRequest.booleanValue();\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Gets the short class name for a class.</p>\r\n-     *\r\n-     * <p>The short class name is the classname excluding\r\n-     * the package name.</p>\r\n-     *\r\n-     * @param cls  the <code>Class</code> to get the short name of\r\n-     * @return the short name\r\n-     */\r\n-    protected String getShortClassName(Class<?> cls) {\r\n-        return ClassUtils.getShortClassName(cls);\r\n-    }\r\n-\r\n-    // Setters and getters for the customizable parts of the style\r\n-    // These methods are not expected to be overridden, except to make public\r\n-    // (They are not public so that immutable subclasses can be written)\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the class name.</p>\r\n-     *\r\n-     * @return the current useClassName flag\r\n-     */\r\n-    protected boolean isUseClassName() {\r\n-        return useClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the class name.</p>\r\n-     *\r\n-     * @param useClassName  the new useClassName flag\r\n-     */\r\n-    protected void setUseClassName(boolean useClassName) {\r\n-        this.useClassName = useClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output short or long class names.</p>\r\n-     *\r\n-     * @return the current useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isUseShortClassName() {\r\n-        return useShortClassName;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output short or long class names.</p>\r\n-     *\r\n-     * @param useShortClassName  the new useShortClassName flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setUseShortClassName(boolean useShortClassName) {\r\n-        this.useShortClassName = useShortClassName;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @return the current useIdentityHashCode flag\r\n-     */\r\n-    protected boolean isUseIdentityHashCode() {\r\n-        return useIdentityHashCode;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the identity hash code.</p>\r\n-     *\r\n-     * @param useIdentityHashCode  the new useIdentityHashCode flag\r\n-     */\r\n-    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\r\n-        this.useIdentityHashCode = useIdentityHashCode;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @return the current useFieldNames flag\r\n-     */\r\n-    protected boolean isUseFieldNames() {\r\n-        return useFieldNames;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use the field names passed in.</p>\r\n-     *\r\n-     * @param useFieldNames  the new useFieldNames flag\r\n-     */\r\n-    protected void setUseFieldNames(boolean useFieldNames) {\r\n-        this.useFieldNames = useFieldNames;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @return the current defaultFullDetail flag\r\n-     */\r\n-    protected boolean isDefaultFullDetail() {\r\n-        return defaultFullDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to use full detail when the caller doesn't\r\n-     * specify.</p>\r\n-     *\r\n-     * @param defaultFullDetail  the new defaultFullDetail flag\r\n-     */\r\n-    protected void setDefaultFullDetail(boolean defaultFullDetail) {\r\n-        this.defaultFullDetail = defaultFullDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether to output array content detail.</p>\r\n-     *\r\n-     * @return the current array content detail setting\r\n-     */\r\n-    protected boolean isArrayContentDetail() {\r\n-        return arrayContentDetail;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether to output array content detail.</p>\r\n-     *\r\n-     * @param arrayContentDetail  the new arrayContentDetail flag\r\n-     */\r\n-    protected void setArrayContentDetail(boolean arrayContentDetail) {\r\n-        this.arrayContentDetail = arrayContentDetail;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array start text.</p>\r\n-     *\r\n-     * @return the current array start text\r\n-     */\r\n-    protected String getArrayStart() {\r\n-        return arrayStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayStart  the new array start text\r\n-     */\r\n-    protected void setArrayStart(String arrayStart) {\r\n-        if (arrayStart == null) {\r\n-            arrayStart = \"\";\r\n-        }\r\n-        this.arrayStart = arrayStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array end text.</p>\r\n-     *\r\n-     * @return the current array end text\r\n-     */\r\n-    protected String getArrayEnd() {\r\n-        return arrayEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arrayEnd  the new array end text\r\n-     */\r\n-    protected void setArrayEnd(String arrayEnd) {\r\n-        if (arrayEnd == null) {\r\n-            arrayEnd = \"\";\r\n-        }\r\n-        this.arrayEnd = arrayEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the array separator text.</p>\r\n-     *\r\n-     * @return the current array separator text\r\n-     */\r\n-    protected String getArraySeparator() {\r\n-        return arraySeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the array separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param arraySeparator  the new array separator text\r\n-     */\r\n-    protected void setArraySeparator(String arraySeparator) {\r\n-        if (arraySeparator == null) {\r\n-            arraySeparator = \"\";\r\n-        }\r\n-        this.arraySeparator = arraySeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content start text.</p>\r\n-     *\r\n-     * @return the current content start text\r\n-     */\r\n-    protected String getContentStart() {\r\n-        return contentStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content start text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentStart  the new content start text\r\n-     */\r\n-    protected void setContentStart(String contentStart) {\r\n-        if (contentStart == null) {\r\n-            contentStart = \"\";\r\n-        }\r\n-        this.contentStart = contentStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the content end text.</p>\r\n-     *\r\n-     * @return the current content end text\r\n-     */\r\n-    protected String getContentEnd() {\r\n-        return contentEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the content end text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param contentEnd  the new content end text\r\n-     */\r\n-    protected void setContentEnd(String contentEnd) {\r\n-        if (contentEnd == null) {\r\n-            contentEnd = \"\";\r\n-        }\r\n-        this.contentEnd = contentEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field name value separator text.</p>\r\n-     *\r\n-     * @return the current field name value separator text\r\n-     */\r\n-    protected String getFieldNameValueSeparator() {\r\n-        return fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field name value separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldNameValueSeparator  the new field name value separator text\r\n-     */\r\n-    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\r\n-        if (fieldNameValueSeparator == null) {\r\n-            fieldNameValueSeparator = \"\";\r\n-        }\r\n-        this.fieldNameValueSeparator = fieldNameValueSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the field separator text.</p>\r\n-     *\r\n-     * @return the current field separator text\r\n-     */\r\n-    protected String getFieldSeparator() {\r\n-        return fieldSeparator;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the field separator text.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param fieldSeparator  the new field separator text\r\n-     */\r\n-    protected void setFieldSeparator(String fieldSeparator) {\r\n-        if (fieldSeparator == null) {\r\n-            fieldSeparator = \"\";\r\n-        }\r\n-        this.fieldSeparator = fieldSeparator;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtStart() {\r\n-        return fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the start\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\r\n-        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @return fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected boolean isFieldSeparatorAtEnd() {\r\n-        return fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets whether the field separator should be added at the end\r\n-     * of each buffer.</p>\r\n-     *\r\n-     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\r\n-     * @since 2.0\r\n-     */\r\n-    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\r\n-        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * @return the current text to output when null found\r\n-     */\r\n-    protected String getNullText() {\r\n-        return nullText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the text to output when <code>null</code> found.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param nullText  the new text to output when null found\r\n-     */\r\n-    protected void setNullText(String nullText) {\r\n-        if (nullText == null) {\r\n-            nullText = \"\";\r\n-        }\r\n-        this.nullText = nullText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of size text\r\n-     */\r\n-    protected String getSizeStartText() {\r\n-        return sizeStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeStartText  the new start of size text\r\n-     */\r\n-    protected void setSizeStartText(String sizeStartText) {\r\n-        if (sizeStartText == null) {\r\n-            sizeStartText = \"\";\r\n-        }\r\n-        this.sizeStartText = sizeStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of size text\r\n-     */\r\n-    protected String getSizeEndText() {\r\n-        return sizeEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when a <code>Collection</code>,\r\n-     * <code>Map</code> or array size is output.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param sizeEndText  the new end of size text\r\n-     */\r\n-    protected void setSizeEndText(String sizeEndText) {\r\n-        if (sizeEndText == null) {\r\n-            sizeEndText = \"\";\r\n-        }\r\n-        this.sizeEndText = sizeEndText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * @return the current start of summary text\r\n-     */\r\n-    protected String getSummaryObjectStartText() {\r\n-        return summaryObjectStartText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the start text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output before the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectStartText  the new start of summary text\r\n-     */\r\n-    protected void setSummaryObjectStartText(String summaryObjectStartText) {\r\n-        if (summaryObjectStartText == null) {\r\n-            summaryObjectStartText = \"\";\r\n-        }\r\n-        this.summaryObjectStartText = summaryObjectStartText;\r\n-    }\r\n-\r\n-    //---------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Gets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * @return the current end of summary text\r\n-     */\r\n-    protected String getSummaryObjectEndText() {\r\n-        return summaryObjectEndText;\r\n-    }\r\n-\r\n-    /**\r\n-     * <p>Sets the end text to output when an <code>Object</code> is\r\n-     * output in summary mode.</p>\r\n-     *\r\n-     * <p>This is output after the size value.</p>\r\n-     *\r\n-     * <p><code>null</code> is accepted, but will be converted to\r\n-     * an empty String.</p>\r\n-     *\r\n-     * @param summaryObjectEndText  the new end of summary text\r\n-     */\r\n-    protected void setSummaryObjectEndText(String summaryObjectEndText) {\r\n-        if (summaryObjectEndText == null) {\r\n-            summaryObjectEndText = \"\";\r\n-        }\r\n-        this.summaryObjectEndText = summaryObjectEndText;\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p>Default <code>ToStringStyle</code>.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class DefaultToStringStyle extends ToStringStyle {\r\n-\r\n-        /**\r\n-         * Required for serialization support.\r\n-         *\r\n-         * @see java.io.Serializable\r\n-         */\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        DefaultToStringStyle() {\r\n-            super();\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.DEFAULT_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out\r\n-     * the field names.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.\r\n-     */\r\n-    private static final class NoFieldNameToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        NoFieldNameToStringStyle() {\r\n-            super();\r\n-            this.setUseFieldNames(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.NO_FIELD_NAMES_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that prints out the short\r\n-     * class name and no identity hashcode.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class ShortPrefixToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        ShortPrefixToStringStyle() {\r\n-            super();\r\n-            this.setUseShortClassName(true);\r\n-            this.setUseIdentityHashCode(false);\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SHORT_PREFIX_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that does not print out the\r\n-     * classname, identity hashcode, content start or field name.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class SimpleToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        SimpleToStringStyle() {\r\n-            super();\r\n-            this.setUseClassName(false);\r\n-            this.setUseIdentityHashCode(false);\r\n-            this.setUseFieldNames(false);\r\n-            this.setContentStart(\"\");\r\n-            this.setContentEnd(\"\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</ode> after serialization.</p>\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.SIMPLE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-    //----------------------------------------------------------------------------\r\n-\r\n-    /**\r\n-     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\r\n-     *\r\n-     * <p>This is an inner class rather than using\r\n-     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\r\n-     */\r\n-    private static final class MultiLineToStringStyle extends ToStringStyle {\r\n-\r\n-        private static final long serialVersionUID = 1L;\r\n-\r\n-        /**\r\n-         * <p>Constructor.</p>\r\n-         *\r\n-         * <p>Use the static constant rather than instantiating.</p>\r\n-         */\r\n-        MultiLineToStringStyle() {\r\n-            super();\r\n-            this.setContentStart(\"[\");\r\n-            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\r\n-            this.setFieldSeparatorAtStart(true);\r\n-            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\r\n-        }\r\n-\r\n-        /**\r\n-         * <p>Ensure <code>Singleton</code> after serialization.</p>\r\n-         *\r\n-         * @return the singleton\r\n-         */\r\n-        private Object readResolve() {\r\n-            return ToStringStyle.MULTI_LINE_STYLE;\r\n-        }\r\n-\r\n-    }\r\n-\r\n-}\r\n+/**\n+ * Copyright 2014 Internet2\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.builder;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Array;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ClassUtils;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.ObjectUtils;\n+import edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * <p>Controls <code>String</code> formatting for {@link ToStringBuilder}.\n+ * The main public interface is always via <code>ToStringBuilder</code>.</p>\n+ *\n+ * <p>These classes are intended to be used as <code>Singletons</code>.\n+ * There is no need to instantiate a new style each time. A program\n+ * will generally use one of the predefined constants on this class.\n+ * Alternatively, the {@link StandardToStringStyle} class can be used\n+ * to set the individual settings. Thus most styles can be achieved\n+ * without subclassing.</p>\n+ *\n+ * <p>If required, a subclass can override as many or as few of the\n+ * methods as it requires. Each object type (from <code>boolean</code>\n+ * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n+ * its own methods to output it. Most have two versions, detail and summary.\n+ *\n+ * <p>For example, the detail version of the array based methods will\n+ * output the whole array, whereas the summary method will just output\n+ * the array length.</p>\n+ *\n+ * <p>If you want to format the output of certain objects, such as dates, you\n+ * must create a subclass and override a method.\n+ * <pre>\n+ * public class MyStyle extends ToStringStyle {\n+ *   protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n+ *     if (value instanceof Date) {\n+ *       value = new SimpleDateFormat(\"yyyy-MM-dd\").format(value);\n+ *     }\n+ *     buffer.append(value);\n+ *   }\n+ * }\n+ * </pre>\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @version $Id: ToStringStyle.java 1091066 2011-04-11 13:30:11Z mbenson $\n+ */\n+public abstract class ToStringStyle implements Serializable {\n+\n+    /**\n+     * Serialization version ID.\n+     */\n+    private static final long serialVersionUID = -2587890625525655916L;\n+\n+    /**\n+     * The default toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[name=John Doe,age=33,smoker=false]\n+     * </pre>\n+     */\n+    public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle();\n+\n+    /**\n+     * The multi line toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[\n+     *   name=John Doe\n+     *   age=33\n+     *   smoker=false\n+     * ]\n+     * </pre>\n+     */\n+    public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle();\n+\n+    /**\n+     * The no field names toString style. Using the Using the\n+     * <code>Person</code> example from {@link ToStringBuilder}, the output\n+     * would look like this:\n+     *\n+     * <pre>\n+     * Person@182f0db[John Doe,33,false]\n+     * </pre>\n+     */\n+    public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle();\n+\n+    /**\n+     * The short prefix toString style. Using the <code>Person</code> example\n+     * from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * Person[name=John Doe,age=33,smoker=false]\n+     * </pre>\n+     *\n+     * @since 2.1\n+     */\n+    public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();\n+\n+    /**\n+     * The simple toString style. Using the Using the <code>Person</code>\n+     * example from {@link ToStringBuilder}, the output would look like this:\n+     *\n+     * <pre>\n+     * John Doe,33,false\n+     * </pre>\n+     */\n+    public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n+\n+    /**\n+     * <p>\n+     * A registry of objects used by <code>reflectionToString</code> methods\n+     * to detect cyclical object references and avoid infinite loops.\n+     * </p>\n+     */\n+    private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY =\n+        new ThreadLocal<WeakHashMap<Object, Object>>();\n+\n+    /**\n+     * <p>\n+     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n+     * methods in the current thread.\n+     * </p>\n+     *\n+     * @return Set the registry of objects being traversed\n+     */\n+    static Map<Object, Object> getRegistry() {\n+        return REGISTRY.get();\n+    }\n+\n+    /**\n+     * <p>\n+     * Returns <code>true</code> if the registry contains the given object.\n+     * Used by the reflection methods to avoid infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to lookup in the registry.\n+     * @return boolean <code>true</code> if the registry contains the given\n+     *             object.\n+     */\n+    static boolean isRegistered(Object value) {\n+        Map<Object, Object> m = getRegistry();\n+        return m != null && m.containsKey(value);\n+    }\n+\n+    /**\n+     * <p>\n+     * Registers the given object. Used by the reflection methods to avoid\n+     * infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to register.\n+     */\n+    static void register(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m == null) {\n+                REGISTRY.set(new WeakHashMap<Object, Object>());\n+            }\n+            getRegistry().put(value, null);\n+        }\n+    }\n+\n+    /**\n+     * <p>\n+     * Unregisters the given object.\n+     * </p>\n+     *\n+     * <p>\n+     * Used by the reflection methods to avoid infinite loops.\n+     * </p>\n+     *\n+     * @param value\n+     *                  The object to unregister.\n+     */\n+    static void unregister(Object value) {\n+        if (value != null) {\n+            Map<Object, Object> m = getRegistry();\n+            if (m != null) {\n+                m.remove(value);\n+                if (m.isEmpty()) {\n+                    REGISTRY.remove();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Whether to use the field names, the default is <code>true</code>.\n+     */\n+    private boolean useFieldNames = true;\n+\n+    /**\n+     * Whether to use the class name, the default is <code>true</code>.\n+     */\n+    private boolean useClassName = true;\n+\n+    /**\n+     * Whether to use short class names, the default is <code>false</code>.\n+     */\n+    private boolean useShortClassName = false;\n+\n+    /**\n+     * Whether to use the identity hash code, the default is <code>true</code>.\n+     */\n+    private boolean useIdentityHashCode = true;\n+\n+    /**\n+     * The content start <code>'['</code>.\n+     */\n+    private String contentStart = \"[\";\n+\n+    /**\n+     * The content end <code>']'</code>.\n+     */\n+    private String contentEnd = \"]\";\n+\n+    /**\n+     * The field name value separator <code>'='</code>.\n+     */\n+    private String fieldNameValueSeparator = \"=\";\n+\n+    /**\n+     * Whether the field separator should be added before any other fields.\n+     */\n+    private boolean fieldSeparatorAtStart = false;\n+\n+    /**\n+     * Whether the field separator should be added after any other fields.\n+     */\n+    private boolean fieldSeparatorAtEnd = false;\n+\n+    /**\n+     * The field separator <code>','</code>.\n+     */\n+    private String fieldSeparator = \",\";\n+\n+    /**\n+     * The array start <code>'{'</code>.\n+     */\n+    private String arrayStart = \"{\";\n+\n+    /**\n+     * The array separator <code>','</code>.\n+     */\n+    private String arraySeparator = \",\";\n+\n+    /**\n+     * The detail for array content.\n+     */\n+    private boolean arrayContentDetail = true;\n+\n+    /**\n+     * The array end <code>'}'</code>.\n+     */\n+    private String arrayEnd = \"}\";\n+\n+    /**\n+     * The value to use when fullDetail is <code>null</code>,\n+     * the default value is <code>true</code>.\n+     */\n+    private boolean defaultFullDetail = true;\n+\n+    /**\n+     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\n+     */\n+    private String nullText = \"<null>\";\n+\n+    /**\n+     * The summary size text start <code>'<size'</code>.\n+     */\n+    private String sizeStartText = \"<size=\";\n+\n+    /**\n+     * The summary size text start <code>'&gt;'</code>.\n+     */\n+    private String sizeEndText = \">\";\n+\n+    /**\n+     * The summary object text start <code>'&lt;'</code>.\n+     */\n+    private String summaryObjectStartText = \"<\";\n+\n+    /**\n+     * The summary object text start <code>'&gt;'</code>.\n+     */\n+    private String summaryObjectEndText = \">\";\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Constructor.</p>\n+     */\n+    protected ToStringStyle() {\n+        super();\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the superclass toString.</p>\n+     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\n+     *\n+     * <p>A <code>null</code> <code>superToString</code> is ignored.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param superToString  the <code>super.toString()</code>\n+     * @since 2.0\n+     */\n+    public void appendSuper(StringBuffer buffer, String superToString) {\n+        appendToString(buffer, superToString);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> another toString.</p>\n+     * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>\n+     *\n+     * <p>A <code>null</code> <code>toString</code> is ignored.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param toString  the additional <code>toString</code>\n+     * @since 2.0\n+     */\n+    public void appendToString(StringBuffer buffer, String toString) {\n+        if (toString != null) {\n+            int pos1 = toString.indexOf(contentStart) + contentStart.length();\n+            int pos2 = toString.lastIndexOf(contentEnd);\n+            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\n+                String data = toString.substring(pos1, pos2);\n+                if (fieldSeparatorAtStart) {\n+                    removeLastFieldSeparator(buffer);\n+                }\n+                buffer.append(data);\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the start of data indicator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a <code>toString</code> for\n+     */\n+    public void appendStart(StringBuffer buffer, Object object) {\n+        if (object != null) {\n+            appendClassName(buffer, object);\n+            appendIdentityHashCode(buffer, object);\n+            appendContentStart(buffer);\n+            if (fieldSeparatorAtStart) {\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the end of data indicator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a\n+     *  <code>toString</code> for.\n+     */\n+    public void appendEnd(StringBuffer buffer, Object object) {\n+        if (this.fieldSeparatorAtEnd == false) {\n+            removeLastFieldSeparator(buffer);\n+        }\n+        appendContentEnd(buffer);\n+        unregister(object);\n+    }\n+\n+    /**\n+     * <p>Remove the last field separator from the buffer.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @since 2.0\n+     */\n+    protected void removeLastFieldSeparator(StringBuffer buffer) {\n+        int len = buffer.length();\n+        int sepLen = fieldSeparator.length();\n+        if (len > 0 && sepLen > 0 && len >= sepLen) {\n+            boolean match = true;\n+            for (int i = 0; i < sepLen; i++) {\n+                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n+                    match = false;\n+                    break;\n+                }\n+            }\n+            if (match) {\n+                buffer.setLength(len - sepLen);\n+            }\n+        }\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full <code>toString</code> of the\n+     * <code>Object</code> passed in.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (value == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else {\n+            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>,\n+     * correctly interpreting its type.</p>\n+     *\n+     * <p>This method performs the main lookup by Class type to correctly\n+     * route arrays, <code>Collections</code>, <code>Maps</code> and\n+     * <code>Objects</code> to the appropriate method.</p>\n+     *\n+     * <p>Either detail or summary views can be specified.</p>\n+     *\n+     * <p>If a cycle is detected, an object will be appended with the\n+     * <code>Object.toString()</code> format.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     * @param detail  output detail or not\n+     */\n+    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n+        if (isRegistered(value)\n+            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n+           appendCyclicObject(buffer, fieldName, value);\n+           return;\n+        }\n+\n+        register(value);\n+\n+        try {\n+            if (value instanceof Collection<?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Collection<?>) value);\n+                } else {\n+                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\n+                }\n+\n+            } else if (value instanceof Map<?, ?>) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\n+                } else {\n+                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\n+                }\n+\n+            } else if (value instanceof long[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (long[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (long[]) value);\n+                }\n+\n+            } else if (value instanceof int[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (int[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (int[]) value);\n+                }\n+\n+            } else if (value instanceof short[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (short[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (short[]) value);\n+                }\n+\n+            } else if (value instanceof byte[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (byte[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (byte[]) value);\n+                }\n+\n+            } else if (value instanceof char[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (char[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (char[]) value);\n+                }\n+\n+            } else if (value instanceof double[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (double[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (double[]) value);\n+                }\n+\n+            } else if (value instanceof float[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (float[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (float[]) value);\n+                }\n+\n+            } else if (value instanceof boolean[]) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (boolean[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (boolean[]) value);\n+                }\n+\n+            } else if (value.getClass().isArray()) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Object[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (Object[]) value);\n+                }\n+\n+            } else {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, value);\n+                } else {\n+                    appendSummary(buffer, fieldName, value);\n+                }\n+            }\n+        } finally {\n+            unregister(value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value that has been detected to participate in a cycle. This\n+     * implementation will print the standard string value of the value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     *\n+     * @since 2.2\n+     */\n+    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\n+       ObjectUtils.identityToString(buffer, value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full detail of the <code>Object</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param coll  the <code>Collection</code> to add to the\n+     *  <code>toString</code>, not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\n+        buffer.append(coll);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param map  the <code>Map</code> to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\n+        buffer.append(map);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing a summary of the <code>Object</code>.</P>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\n+        buffer.append(summaryObjectStartText);\n+        buffer.append(getShortClassName(value.getClass()));\n+        buffer.append(summaryObjectEndText);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, long value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, int value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, short value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, byte value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, char value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, double value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, float value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n+        buffer.append(value);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    public void append(StringBuffer buffer, String fieldName, boolean value) {\n+        appendFieldStart(buffer, fieldName);\n+        appendDetail(buffer, fieldName, value);\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n+        buffer.append(value);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            Object item = array[i];\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an array type.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     * @since 2.0\n+     */\n+    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n+        buffer.append(arrayStart);\n+        int length = Array.getLength(array);\n+        for (int i = 0; i < length; i++) {\n+            Object item = Array.get(array, i);\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            if (item == null) {\n+                appendNullText(buffer, fieldName);\n+\n+            } else {\n+                appendInternal(buffer, fieldName, item, arrayContentDetail);\n+            }\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the toString\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n+     */\n+    public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n+        appendFieldStart(buffer, fieldName);\n+\n+        if (array == null) {\n+            appendNullText(buffer, fieldName);\n+\n+        } else if (isFullDetail(fullDetail)) {\n+            appendDetail(buffer, fieldName, array);\n+\n+        } else {\n+            appendSummary(buffer, fieldName, array);\n+        }\n+\n+        appendFieldEnd(buffer, fieldName);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n+        buffer.append(arrayStart);\n+        for (int i = 0; i < array.length; i++) {\n+            if (i > 0) {\n+                buffer.append(arraySeparator);\n+            }\n+            appendDetail(buffer, fieldName, array[i]);\n+        }\n+        buffer.append(arrayEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\n+        appendSummarySize(buffer, fieldName, array.length);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the class name.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose name to output\n+     */\n+    protected void appendClassName(StringBuffer buffer, Object object) {\n+        if (useClassName && object != null) {\n+            register(object);\n+            if (useShortClassName) {\n+                buffer.append(getShortClassName(object.getClass()));\n+            } else {\n+                buffer.append(object.getClass().getName());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose id to output\n+     */\n+    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n+        if (this.isUseIdentityHashCode() && object!=null) {\n+            register(object);\n+            buffer.append('@');\n+            buffer.append(Integer.toHexString(System.identityHashCode(object)));\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the content start.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendContentStart(StringBuffer buffer) {\n+        buffer.append(contentStart);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the content end.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendContentEnd(StringBuffer buffer) {\n+        buffer.append(contentEnd);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\n+     *\n+     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     */\n+    protected void appendNullText(StringBuffer buffer, String fieldName) {\n+        buffer.append(nullText);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the field separator.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void appendFieldSeparator(StringBuffer buffer) {\n+        buffer.append(fieldSeparator);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> the field start.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name\n+     */\n+    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n+        if (useFieldNames && fieldName != null) {\n+            buffer.append(fieldName);\n+            buffer.append(fieldNameValueSeparator);\n+        }\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString<code> the field end.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     */\n+    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n+        appendFieldSeparator(buffer);\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a size summary.</p>\n+     *\n+     * <p>The size summary is used to summarize the contents of\n+     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\n+     *\n+     * <p>The output consists of a prefix, the passed in size\n+     * and a suffix.</p>\n+     *\n+     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param size  the size to append\n+     */\n+    protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {\n+        buffer.append(sizeStartText);\n+        buffer.append(size);\n+        buffer.append(sizeEndText);\n+    }\n+\n+    /**\n+     * <p>Is this field to be output in full detail.</p>\n+     *\n+     * <p>This method converts a detail request into a detail level.\n+     * The calling code may request full detail (<code>true</code>),\n+     * but a subclass might ignore that and always return\n+     * <code>false</code>. The calling code may pass in\n+     * <code>null</code> indicating that it doesn't care about\n+     * the detail level. In this case the default detail level is\n+     * used.</p>\n+     *\n+     * @param fullDetailRequest  the detail level requested\n+     * @return whether full detail is to be shown\n+     */\n+    protected boolean isFullDetail(Boolean fullDetailRequest) {\n+        if (fullDetailRequest == null) {\n+            return defaultFullDetail;\n+        }\n+        return fullDetailRequest.booleanValue();\n+    }\n+\n+    /**\n+     * <p>Gets the short class name for a class.</p>\n+     *\n+     * <p>The short class name is the classname excluding\n+     * the package name.</p>\n+     *\n+     * @param cls  the <code>Class</code> to get the short name of\n+     * @return the short name\n+     */\n+    protected String getShortClassName(Class<?> cls) {\n+        return ClassUtils.getShortClassName(cls);\n+    }\n+\n+    // Setters and getters for the customizable parts of the style\n+    // These methods are not expected to be overridden, except to make public\n+    // (They are not public so that immutable subclasses can be written)\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the class name.</p>\n+     *\n+     * @return the current useClassName flag\n+     */\n+    protected boolean isUseClassName() {\n+        return useClassName;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the class name.</p>\n+     *\n+     * @param useClassName  the new useClassName flag\n+     */\n+    protected void setUseClassName(boolean useClassName) {\n+        this.useClassName = useClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to output short or long class names.</p>\n+     *\n+     * @return the current useShortClassName flag\n+     * @since 2.0\n+     */\n+    protected boolean isUseShortClassName() {\n+        return useShortClassName;\n+    }\n+\n+    /**\n+     * <p>Sets whether to output short or long class names.</p>\n+     *\n+     * @param useShortClassName  the new useShortClassName flag\n+     * @since 2.0\n+     */\n+    protected void setUseShortClassName(boolean useShortClassName) {\n+        this.useShortClassName = useShortClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the identity hash code.</p>\n+     *\n+     * @return the current useIdentityHashCode flag\n+     */\n+    protected boolean isUseIdentityHashCode() {\n+        return useIdentityHashCode;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the identity hash code.</p>\n+     *\n+     * @param useIdentityHashCode  the new useIdentityHashCode flag\n+     */\n+    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n+        this.useIdentityHashCode = useIdentityHashCode;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use the field names passed in.</p>\n+     *\n+     * @return the current useFieldNames flag\n+     */\n+    protected boolean isUseFieldNames() {\n+        return useFieldNames;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use the field names passed in.</p>\n+     *\n+     * @param useFieldNames  the new useFieldNames flag\n+     */\n+    protected void setUseFieldNames(boolean useFieldNames) {\n+        this.useFieldNames = useFieldNames;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n+     * @return the current defaultFullDetail flag\n+     */\n+    protected boolean isDefaultFullDetail() {\n+        return defaultFullDetail;\n+    }\n+\n+    /**\n+     * <p>Sets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n+     * @param defaultFullDetail  the new defaultFullDetail flag\n+     */\n+    protected void setDefaultFullDetail(boolean defaultFullDetail) {\n+        this.defaultFullDetail = defaultFullDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether to output array content detail.</p>\n+     *\n+     * @return the current array content detail setting\n+     */\n+    protected boolean isArrayContentDetail() {\n+        return arrayContentDetail;\n+    }\n+\n+    /**\n+     * <p>Sets whether to output array content detail.</p>\n+     *\n+     * @param arrayContentDetail  the new arrayContentDetail flag\n+     */\n+    protected void setArrayContentDetail(boolean arrayContentDetail) {\n+        this.arrayContentDetail = arrayContentDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array start text.</p>\n+     *\n+     * @return the current array start text\n+     */\n+    protected String getArrayStart() {\n+        return arrayStart;\n+    }\n+\n+    /**\n+     * <p>Sets the array start text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arrayStart  the new array start text\n+     */\n+    protected void setArrayStart(String arrayStart) {\n+        if (arrayStart == null) {\n+            arrayStart = \"\";\n+        }\n+        this.arrayStart = arrayStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array end text.</p>\n+     *\n+     * @return the current array end text\n+     */\n+    protected String getArrayEnd() {\n+        return arrayEnd;\n+    }\n+\n+    /**\n+     * <p>Sets the array end text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arrayEnd  the new array end text\n+     */\n+    protected void setArrayEnd(String arrayEnd) {\n+        if (arrayEnd == null) {\n+            arrayEnd = \"\";\n+        }\n+        this.arrayEnd = arrayEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the array separator text.</p>\n+     *\n+     * @return the current array separator text\n+     */\n+    protected String getArraySeparator() {\n+        return arraySeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the array separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param arraySeparator  the new array separator text\n+     */\n+    protected void setArraySeparator(String arraySeparator) {\n+        if (arraySeparator == null) {\n+            arraySeparator = \"\";\n+        }\n+        this.arraySeparator = arraySeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the content start text.</p>\n+     *\n+     * @return the current content start text\n+     */\n+    protected String getContentStart() {\n+        return contentStart;\n+    }\n+\n+    /**\n+     * <p>Sets the content start text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param contentStart  the new content start text\n+     */\n+    protected void setContentStart(String contentStart) {\n+        if (contentStart == null) {\n+            contentStart = \"\";\n+        }\n+        this.contentStart = contentStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the content end text.</p>\n+     *\n+     * @return the current content end text\n+     */\n+    protected String getContentEnd() {\n+        return contentEnd;\n+    }\n+\n+    /**\n+     * <p>Sets the content end text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param contentEnd  the new content end text\n+     */\n+    protected void setContentEnd(String contentEnd) {\n+        if (contentEnd == null) {\n+            contentEnd = \"\";\n+        }\n+        this.contentEnd = contentEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the field name value separator text.</p>\n+     *\n+     * @return the current field name value separator text\n+     */\n+    protected String getFieldNameValueSeparator() {\n+        return fieldNameValueSeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the field name value separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param fieldNameValueSeparator  the new field name value separator text\n+     */\n+    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n+        if (fieldNameValueSeparator == null) {\n+            fieldNameValueSeparator = \"\";\n+        }\n+        this.fieldNameValueSeparator = fieldNameValueSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the field separator text.</p>\n+     *\n+     * @return the current field separator text\n+     */\n+    protected String getFieldSeparator() {\n+        return fieldSeparator;\n+    }\n+\n+    /**\n+     * <p>Sets the field separator text.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param fieldSeparator  the new field separator text\n+     */\n+    protected void setFieldSeparator(String fieldSeparator) {\n+        if (fieldSeparator == null) {\n+            fieldSeparator = \"\";\n+        }\n+        this.fieldSeparator = fieldSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether the field separator should be added at the start\n+     * of each buffer.</p>\n+     *\n+     * @return the fieldSeparatorAtStart flag\n+     * @since 2.0\n+     */\n+    protected boolean isFieldSeparatorAtStart() {\n+        return fieldSeparatorAtStart;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the start\n+     * of each buffer.</p>\n+     *\n+     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     * @since 2.0\n+     */\n+    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets whether the field separator should be added at the end\n+     * of each buffer.</p>\n+     *\n+     * @return fieldSeparatorAtEnd flag\n+     * @since 2.0\n+     */\n+    protected boolean isFieldSeparatorAtEnd() {\n+        return fieldSeparatorAtEnd;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the end\n+     * of each buffer.</p>\n+     *\n+     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     * @since 2.0\n+     */\n+    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the text to output when <code>null</code> found.</p>\n+     *\n+     * @return the current text to output when null found\n+     */\n+    protected String getNullText() {\n+        return nullText;\n+    }\n+\n+    /**\n+     * <p>Sets the text to output when <code>null</code> found.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param nullText  the new text to output when null found\n+     */\n+    protected void setNullText(String nullText) {\n+        if (nullText == null) {\n+            nullText = \"\";\n+        }\n+        this.nullText = nullText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the start text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * @return the current start of size text\n+     */\n+    protected String getSizeStartText() {\n+        return sizeStartText;\n+    }\n+\n+    /**\n+     * <p>Sets the start text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param sizeStartText  the new start of size text\n+     */\n+    protected void setSizeStartText(String sizeStartText) {\n+        if (sizeStartText == null) {\n+            sizeStartText = \"\";\n+        }\n+        this.sizeStartText = sizeStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the end text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * @return the current end of size text\n+     */\n+    protected String getSizeEndText() {\n+        return sizeEndText;\n+    }\n+\n+    /**\n+     * <p>Sets the end text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param sizeEndText  the new end of size text\n+     */\n+    protected void setSizeEndText(String sizeEndText) {\n+        if (sizeEndText == null) {\n+            sizeEndText = \"\";\n+        }\n+        this.sizeEndText = sizeEndText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the start text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * @return the current start of summary text\n+     */\n+    protected String getSummaryObjectStartText() {\n+        return summaryObjectStartText;\n+    }\n+\n+    /**\n+     * <p>Sets the start text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param summaryObjectStartText  the new start of summary text\n+     */\n+    protected void setSummaryObjectStartText(String summaryObjectStartText) {\n+        if (summaryObjectStartText == null) {\n+            summaryObjectStartText = \"\";\n+        }\n+        this.summaryObjectStartText = summaryObjectStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the end text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * @return the current end of summary text\n+     */\n+    protected String getSummaryObjectEndText() {\n+        return summaryObjectEndText;\n+    }\n+\n+    /**\n+     * <p>Sets the end text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>null</code> is accepted, but will be converted to\n+     * an empty String.</p>\n+     *\n+     * @param summaryObjectEndText  the new end of summary text\n+     */\n+    protected void setSummaryObjectEndText(String summaryObjectEndText) {\n+        if (summaryObjectEndText == null) {\n+            summaryObjectEndText = \"\";\n+        }\n+        this.summaryObjectEndText = summaryObjectEndText;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Default <code>ToStringStyle</code>.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class DefaultToStringStyle extends ToStringStyle {\n+\n+        /**\n+         * Required for serialization support.\n+         *\n+         * @see java.io.Serializable\n+         */\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        DefaultToStringStyle() {\n+            super();\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.DEFAULT_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that does not print out\n+     * the field names.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.\n+     */\n+    private static final class NoFieldNameToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        NoFieldNameToStringStyle() {\n+            super();\n+            this.setUseFieldNames(false);\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.NO_FIELD_NAMES_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that prints out the short\n+     * class name and no identity hashcode.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class ShortPrefixToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        ShortPrefixToStringStyle() {\n+            super();\n+            this.setUseShortClassName(true);\n+            this.setUseIdentityHashCode(false);\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.SHORT_PREFIX_STYLE;\n+        }\n+\n+    }\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that does not print out the\n+     * classname, identity hashcode, content start or field name.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class SimpleToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        SimpleToStringStyle() {\n+            super();\n+            this.setUseClassName(false);\n+            this.setUseIdentityHashCode(false);\n+            this.setUseFieldNames(false);\n+            this.setContentStart(\"\");\n+            this.setContentEnd(\"\");\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.SIMPLE_STYLE;\n+        }\n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n+     */\n+    private static final class MultiLineToStringStyle extends ToStringStyle {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        /**\n+         * <p>Constructor.</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n+         */\n+        MultiLineToStringStyle() {\n+            super();\n+            this.setContentStart(\"[\");\n+            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n+            this.setFieldSeparatorAtStart(true);\n+            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n+        }\n+\n+        /**\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n+         * @return the singleton\n+         */\n+        private Object readResolve() {\n+            return ToStringStyle.MULTI_LINE_STYLE;\n+        }\n+\n+    }\n+\n+}\n",
            "diff_size": 2286
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}