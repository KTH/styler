{
    "error_id": "145",
    "information": {
        "errors": [
            {
                "line": "84",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    public String buildHeaderString(String prefix, List<Header> headers) {\n        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n    }\n\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "84",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/145/Transaction.java\nindex 7808c61eeb..cb8cab113e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/145/Transaction.java\n@@ -81,7 +81,9 @@ public class Transaction {\n      * @return\n      */\n     public String buildHeaderString(String prefix, List<Header> headers) {\n-        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n-    }\n+        return headers.stream().map( h -> prefix+h.getKey ()\n+                +\": \"+ h.getValue() + NEWLINE).collect(Collectors.joining());\n+     }\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/145/Transaction.java\nindex 7808c61eeb..146afef631 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/145/Transaction.java\n@@ -14,74 +14,72 @@ import javax.xml.bind.annotation.XmlType;\n @XmlAccessorType(XmlAccessType.FIELD)\n public class Transaction {\n \n-    /**\n-     * \n-     */\n-    private static final char NEWLINE = '\\n';\n-    @XmlElement(namespace = Namespace.NAMESPACE_V1)\n-    private Request request;\n-    @XmlElement(namespace = Namespace.NAMESPACE_V1)\n-    private Response response;\n+  /**\n+   *\n+   */\n+  private static final char NEWLINE = '\\n';\n+  @XmlElement(namespace = Namespace.NAMESPACE_V1)\n+  private Request request;\n+  @XmlElement(namespace = Namespace.NAMESPACE_V1)\n+  private Response response;\n \n-    /**\n-     * @return the request\n-     */\n-    public Request getRequest() {\n-        return request;\n-    }\n+  /**\n+   * @return the request\n+   */\n+  public Request getRequest() {\n+    return request;\n+  }\n \n-    /**\n-     * @param request\n-     *            the request to set\n-     */\n-    public void setRequest(Request request) {\n-        this.request = request;\n-    }\n+  /**\n+   * @param request the request to set\n+   */\n+  public void setRequest(Request request) {\n+    this.request = request;\n+  }\n \n-    /**\n-     * @return the response\n-     */\n-    public Response getResponse() {\n-        return response;\n-    }\n+  /**\n+   * @return the response\n+   */\n+  public Response getResponse() {\n+    return response;\n+  }\n \n-    /**\n-     * @param response\n-     *            the response to set\n-     */\n-    public void setResponse(Response response) {\n-        this.response = response;\n-    }\n+  /**\n+   * @param response the response to set\n+   */\n+  public void setResponse(Response response) {\n+    this.response = response;\n+  }\n \n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder();\n-        if (request != null) {\n-            sb.append(\"------------ Request ------------\").append(NEWLINE)\n-                    .append(\"    \").append(request.getFirstLine()).append(NEWLINE);\n-            sb.append(buildHeaderString(\"    \", request.getHeaders())).append(NEWLINE);\n-            sb.append(\"------------ Body ------------\").append(NEWLINE);\n-            sb.append(request.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n-        }\n-        if (response != null) {\n-            sb.append(\"------------ Response ------------\").append(NEWLINE)\n-                    .append(\"    \").append(response.getFirstLine()).append(NEWLINE);\n-            sb.append(buildHeaderString(\"    \", response.getHeaders())).append(NEWLINE);\n-            sb.append(\"------------ Body ------------\").append(NEWLINE);\n-            sb.append(response.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n-        }\n-        return sb.toString();\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    if (request != null) {\n+      sb.append(\"------------ Request ------------\").append(NEWLINE)\n+        .append(\"    \").append(request.getFirstLine()).append(NEWLINE);\n+      sb.append(buildHeaderString(\"    \", request.getHeaders())).append(NEWLINE);\n+      sb.append(\"------------ Body ------------\").append(NEWLINE);\n+      sb.append(request.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n     }\n-\n-    /**\n-     * @param headers\n-     * @return\n-     */\n-    public String buildHeaderString(String prefix, List<Header> headers) {\n-        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n+    if (response != null) {\n+      sb.append(\"------------ Response ------------\").append(NEWLINE)\n+        .append(\"    \").append(response.getFirstLine()).append(NEWLINE);\n+      sb.append(buildHeaderString(\"    \", response.getHeaders())).append(NEWLINE);\n+      sb.append(\"------------ Body ------------\").append(NEWLINE);\n+      sb.append(response.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n     }\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * @param headers\n+   * @return\n+   */\n+  public String buildHeaderString(String prefix, List<Header> headers) {\n+    return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n+  }\n \n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/145/Transaction.java\nindex 7808c61eeb..13e1c53bdf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/145/Transaction.java\n@@ -84,4 +84,4 @@ public class Transaction {\n         return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/145/Transaction.java\nindex 7808c61eeb..a177dcb1b1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/145/Transaction.java\n@@ -1,8 +1,9 @@\n package com.intuit.tank.conversation;\n \n+\n+\n import java.util.List;\n import java.util.stream.Collectors;\n-\n import javax.xml.bind.annotation.XmlAccessType;\n import javax.xml.bind.annotation.XmlAccessorType;\n import javax.xml.bind.annotation.XmlElement;\n@@ -17,9 +18,12 @@ public class Transaction {\n     /**\n      * \n      */\n+\n     private static final char NEWLINE = '\\n';\n+\n     @XmlElement(namespace = Namespace.NAMESPACE_V1)\n     private Request request;\n+\n     @XmlElement(namespace = Namespace.NAMESPACE_V1)\n     private Response response;\n \n@@ -34,6 +38,8 @@ public class Transaction {\n      * @param request\n      *            the request to set\n      */\n+\n+\n     public void setRequest(Request request) {\n         this.request = request;\n     }\n@@ -41,6 +47,8 @@ public class Transaction {\n     /**\n      * @return the response\n      */\n+\n+\n     public Response getResponse() {\n         return response;\n     }\n@@ -49,6 +57,8 @@ public class Transaction {\n      * @param response\n      *            the response to set\n      */\n+\n+\n     public void setResponse(Response response) {\n         this.response = response;\n     }\n@@ -56,19 +66,19 @@ public class Transaction {\n     /**\n      * @inheritDoc\n      */\n+\n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         if (request != null) {\n-            sb.append(\"------------ Request ------------\").append(NEWLINE)\n-                    .append(\"    \").append(request.getFirstLine()).append(NEWLINE);\n+            sb.append(\"------------ Request ------------\").append(NEWLINE).append(\"    \").append(request.getFirstLine()).append(NEWLINE);\n             sb.append(buildHeaderString(\"    \", request.getHeaders())).append(NEWLINE);\n             sb.append(\"------------ Body ------------\").append(NEWLINE);\n             sb.append(request.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n         }\n         if (response != null) {\n-            sb.append(\"------------ Response ------------\").append(NEWLINE)\n-                    .append(\"    \").append(response.getFirstLine()).append(NEWLINE);\n+            sb.append(\"------------ Response ------------\").append(NEWLINE).append(\"    \").append(response.getFirstLine()).append(NEWLINE);\n             sb.append(buildHeaderString(\"    \", response.getHeaders())).append(NEWLINE);\n             sb.append(\"------------ Body ------------\").append(NEWLINE);\n             sb.append(response.getBodyAsString()).append(NEWLINE).append(NEWLINE);\n@@ -80,8 +90,10 @@ public class Transaction {\n      * @param headers\n      * @return\n      */\n+\n+\n     public String buildHeaderString(String prefix, List<Header> headers) {\n-        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n+        return headers.stream().map(h-> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "84",
                    "column": "47",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "47",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "64",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "64",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "84",
                    "column": "78",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "78",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/145/Transaction.java\nindex 7808c61eeb..b6d4fe292f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/145/Transaction.java\n@@ -81,7 +81,13 @@ public class Transaction {\n      * @return\n      */\n     public String buildHeaderString(String prefix, List<Header> headers) {\n-        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n-    }\n+        return headers.stream().map(h ->prefix+h .getKey()+\": \"+h. getValue()+\n+                NEWLINE).collect\n+\n+        (\n+\n+    Collectors .joining());\n+     }\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "84",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/145/Transaction.java\nindex 7808c61eeb..cb8cab113e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/145/Transaction.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/145/Transaction.java\n@@ -81,7 +81,9 @@ public class Transaction {\n      * @return\n      */\n     public String buildHeaderString(String prefix, List<Header> headers) {\n-        return headers.stream().map(h -> prefix + h.getKey() + \": \" + h.getValue() + NEWLINE).collect(Collectors.joining());\n-    }\n+        return headers.stream().map( h -> prefix+h.getKey ()\n+                +\": \"+ h.getValue() + NEWLINE).collect(Collectors.joining());\n+     }\n \n-}\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 5
        }
    ]
}