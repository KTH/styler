{
    "error_id": "894",
    "information": {
        "errors": [
            {
                "line": "241",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 112).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      Entry<long[]> sampleEntry = sampleIter.next();\n      LOG.info(\n          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/894/GetNodeFeatsTest2.java\nindex c79a946de1..57e7f5b95e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/894/GetNodeFeatsTest2.java\n@@ -238,7 +238,9 @@ public class GetNodeFeatsTest2 {\n     while (sampleIter.hasNext()) {\n       Entry<long[]> sampleEntry = sampleIter.next();\n       LOG.info(\n-          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+          \"node id = \" + sampleEntry.getLongKey() +\", neighbors = \" + Arrays. toString(sampleEntry.getValue(\n+        )\n+        ) );\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/894/GetNodeFeatsTest2.java\nindex c79a946de1..55f6469a4f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/894/GetNodeFeatsTest2.java\n@@ -44,207 +44,211 @@ import org.junit.Before;\n import org.junit.Test;\n \n public class GetNodeFeatsTest2 {\n-  public static String NODE = \"node\";\n-\n-  private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100000;\n-  int start = 100;\n-  int end = 1000000;\n-  int nnz = 1000;\n-\n-  static {\n-    PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n-\n-  @Before\n-  public void setup() throws Exception {\n-    // set basic configuration keys\n-    Configuration conf = new Configuration();\n-    conf.setBoolean(\"mapred.mapper.new-api\", true);\n-    conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-    conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n-\n-    // use local deploy mode and dummy dataspliter\n-    conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-    conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n-    conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-    conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n-    conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n-    conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n-    conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-    //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n-    conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n-    conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);\n-\n-    // get a angel client\n-    angelClient = AngelClientFactory.get(conf);\n-\n-    // add sparse float matrix\n-    MatrixContext siMat = new MatrixContext();\n-    siMat.setName(NODE);\n-    siMat.setRowType(RowType.T_ANY_LONGKEY_SPARSE);\n-    siMat.setRowNum(1);\n-    siMat.setColNum(10);\n-    siMat.setMaxColNumInBlock(5);\n-    siMat.setMaxRowNumInBlock(1);\n-    //siMat.setValidIndexNum(100);\n-    //siMat.setColNum(10000000000L);\n-    siMat.setValueType(Node.class);\n-    //siMat.setPartitionStorageClass(LongElementMapStorage.class);\n-    //siMat.setPartitionClass(CSRPartition.class);\n-    angelClient.addMatrix(siMat);\n-\n-    // Start PS\n-    angelClient.startPSServer();\n-\n-    // Start to run application\n-    angelClient.run();\n-\n-    Thread.sleep(5000);\n-\n-    psId = new ParameterServerId(0);\n-    psAttempt0Id = new PSAttemptId(psId, 0);\n-\n-    WorkerGroupId workerGroupId = new WorkerGroupId(0);\n-    workerId = new WorkerId(workerGroupId, 0);\n-    workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n-\n-  @Test\n-  public void testCSR() throws Exception {\n-    Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n-    MatrixClient client = worker.getPSAgent().getMatrixClient(NODE, 0);\n-    int matrixId = client.getMatrixId();\n-\n-    // Init node neighbors and feats\n-    long[] nodeIds = new long[6];\n-    IntFloatVector[] feats = new IntFloatVector[6];\n-    long [][] neighbors = new long[6][];\n-\n-    Long2ObjectOpenHashMap<long[]> idToNeighbors = new Long2ObjectOpenHashMap<>();\n-\n-    nodeIds[0] = 1;\n-    neighbors[0] = new long[]{2,3,4,5,8};\n-    idToNeighbors.put(nodeIds[0], neighbors[0]);\n-    feats[0] = VFactory.denseFloatVector(5);\n-    feats[0].set(0, 0.2f);\n-    feats[0].set(1, 0.3f);\n-    feats[0].set(2, 0.4f);\n-    feats[0].set(3, 0.5f);\n-    feats[0].set(4, 0.6f);\n-\n-    nodeIds[1] = 2;\n-    neighbors[1] = new long[]{1,3,4,5,8};\n-    idToNeighbors.put(nodeIds[1], neighbors[1]);\n-    feats[1] = VFactory.sparseFloatVector(5, 2);\n-    feats[1].set(1, 0.4f);\n-    feats[1].set(3, 0.5f);\n-\n-    nodeIds[2] = 3;\n-    neighbors[2] = new long[]{1,2,4,5,8};\n-    idToNeighbors.put(nodeIds[2], neighbors[2]);\n-    feats[2] = VFactory.sortedFloatVector(5, 3);\n-    feats[2].set(0, 0.4f);\n-    feats[2].set(1, 0.5f);\n-    feats[2].set(4, 0.6f);\n-\n-    nodeIds[3] = 4;\n-    neighbors[3] = new long[]{1,2,3,5,8};\n-    idToNeighbors.put(nodeIds[3], neighbors[3]);\n-    feats[3] = VFactory.sparseFloatVector(5, 2);\n-    feats[3].set(4, 0.6f);\n-    feats[3].set(1, 0.5f);\n-\n-    nodeIds[4] = 5;\n-    neighbors[4] = new long[]{1,2,3,4,8};\n-    idToNeighbors.put(nodeIds[4], neighbors[4]);\n-    feats[4] = VFactory.sparseFloatVector(5, 1);\n-    feats[4].set(2, 0.6f);\n-\n-    nodeIds[5] = 8;\n-    neighbors[2] = new long[]{1,2,3,4,5};\n-    idToNeighbors.put(nodeIds[5], neighbors[5]);\n-    feats[5] = VFactory.sparseFloatVector(5,2);\n-    feats[5].set(0, 0.3f);\n-    feats[5].set(1, 0.4f);\n-\n-    InitNeighbor initFunc = new InitNeighbor(new InitNeighborParam(matrixId, idToNeighbors));\n-    client.asyncUpdate(initFunc).get();\n-\n-    InitNodeFeats func = new InitNodeFeats(new InitNodeFeatsParam(matrixId, nodeIds, feats));\n-    client.asyncUpdate(func).get();\n-\n-    // Sample the neighbors\n-    nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n-    GetNodeFeatsParam param = new GetNodeFeatsParam(matrixId, nodeIds);\n-    Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client\n-        .get(new GetNodeFeats(param)))).getResult();\n-    ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n-    LOG.info(\"==============================sample neighbors result============================\");\n-    Long2ObjectMap.Entry<IntFloatVector> entry;\n-    while (iter.hasNext()) {\n-      entry = iter.next();\n-      IntFloatVector vector = entry.getValue();\n-      if(vector.isDense()) {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a dense features\");\n-        float [] values = vector.getStorage().getValues();\n-        for(int i = 0; i < values.length; i++) {\n-          LOG.info(\"feat index \" + i + \" values = \" + values[i]);\n-        }\n-      } else if(vector.isSparse()) {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n-        ObjectIterator<Int2FloatMap.Entry> valueIter = vector\n-            .getStorage().entryIterator();\n-\n-        while(valueIter.hasNext()) {\n-          Int2FloatMap.Entry keyValue = valueIter.next();\n-          LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" + keyValue.getFloatValue());\n-        }\n-      } else {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n-        int [] keys = vector.getStorage().getIndices();\n-        float [] values = vector.getStorage().getValues();\n-        for(int i = 0; i < values.length; i++) {\n-          LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n-        }\n-      }\n+    public static String NODE = \"node\";\n+\n+    private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100000;\n+    int start = 100;\n+    int end = 1000000;\n+    int nnz = 1000;\n+\n+    static {\n+        PropertyConfigurator.configure(\"../conf/log4j.properties\");\n     }\n \n-    SampleNeighborParam sampleParam = new SampleNeighborParam(matrixId, nodeIds, -1);\n-    Long2ObjectOpenHashMap<long[]> sampleResult = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(sampleParam)))).getNodeIdToNeighbors();\n+    @Before\n+    public void setup() throws Exception {\n+        // set basic configuration keys\n+        Configuration conf = new Configuration();\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.set(AngelConf.ANGEL_TASK_USER_TASKCLASS, DummyTask.class.getName());\n+\n+        // use local deploy mode and dummy dataspliter\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.setBoolean(AngelConf.ANGEL_AM_USE_DUMMY_DATASPLITER, true);\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n+        conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n+\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+        //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n+\n+        conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n+        conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n+        conf.setInt(AngelConf.ANGEL_WORKER_MAX_ATTEMPTS, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_MAX_ATTEMPTS, 1);\n+\n+        // get a angel client\n+        angelClient = AngelClientFactory.get(conf);\n+\n+        // add sparse float matrix\n+        MatrixContext siMat = new MatrixContext();\n+        siMat.setName(NODE);\n+        siMat.setRowType(RowType.T_ANY_LONGKEY_SPARSE);\n+        siMat.setRowNum(1);\n+        siMat.setColNum(10);\n+        siMat.setMaxColNumInBlock(5);\n+        siMat.setMaxRowNumInBlock(1);\n+        //siMat.setValidIndexNum(100);\n+        //siMat.setColNum(10000000000L);\n+        siMat.setValueType(Node.class);\n+        //siMat.setPartitionStorageClass(LongElementMapStorage.class);\n+        //siMat.setPartitionClass(CSRPartition.class);\n+        angelClient.addMatrix(siMat);\n+\n+        // Start PS\n+        angelClient.startPSServer();\n+\n+        // Start to run application\n+        angelClient.run();\n+\n+        Thread.sleep(5000);\n+\n+        psId = new ParameterServerId(0);\n+        psAttempt0Id = new PSAttemptId(psId, 0);\n+\n+        WorkerGroupId workerGroupId = new WorkerGroupId(0);\n+        workerId = new WorkerId(workerGroupId, 0);\n+        workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n+    }\n \n-    ObjectIterator<Entry<long[]>> sampleIter = sampleResult\n-        .long2ObjectEntrySet().fastIterator();\n+    @Test\n+    public void testCSR() throws Exception {\n+        Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n+        MatrixClient client = worker.getPSAgent().getMatrixClient(NODE, 0);\n+        int matrixId = client.getMatrixId();\n+\n+        // Init node neighbors and feats\n+        long[] nodeIds = new long[6];\n+        IntFloatVector[] feats = new IntFloatVector[6];\n+        long[][] neighbors = new long[6][];\n+\n+        Long2ObjectOpenHashMap<long[]> idToNeighbors = new Long2ObjectOpenHashMap<>();\n+\n+        nodeIds[0] = 1;\n+        neighbors[0] = new long[] {2, 3, 4, 5, 8};\n+        idToNeighbors.put(nodeIds[0], neighbors[0]);\n+        feats[0] = VFactory.denseFloatVector(5);\n+        feats[0].set(0, 0.2f);\n+        feats[0].set(1, 0.3f);\n+        feats[0].set(2, 0.4f);\n+        feats[0].set(3, 0.5f);\n+        feats[0].set(4, 0.6f);\n+\n+        nodeIds[1] = 2;\n+        neighbors[1] = new long[] {1, 3, 4, 5, 8};\n+        idToNeighbors.put(nodeIds[1], neighbors[1]);\n+        feats[1] = VFactory.sparseFloatVector(5, 2);\n+        feats[1].set(1, 0.4f);\n+        feats[1].set(3, 0.5f);\n+\n+        nodeIds[2] = 3;\n+        neighbors[2] = new long[] {1, 2, 4, 5, 8};\n+        idToNeighbors.put(nodeIds[2], neighbors[2]);\n+        feats[2] = VFactory.sortedFloatVector(5, 3);\n+        feats[2].set(0, 0.4f);\n+        feats[2].set(1, 0.5f);\n+        feats[2].set(4, 0.6f);\n+\n+        nodeIds[3] = 4;\n+        neighbors[3] = new long[] {1, 2, 3, 5, 8};\n+        idToNeighbors.put(nodeIds[3], neighbors[3]);\n+        feats[3] = VFactory.sparseFloatVector(5, 2);\n+        feats[3].set(4, 0.6f);\n+        feats[3].set(1, 0.5f);\n+\n+        nodeIds[4] = 5;\n+        neighbors[4] = new long[] {1, 2, 3, 4, 8};\n+        idToNeighbors.put(nodeIds[4], neighbors[4]);\n+        feats[4] = VFactory.sparseFloatVector(5, 1);\n+        feats[4].set(2, 0.6f);\n+\n+        nodeIds[5] = 8;\n+        neighbors[2] = new long[] {1, 2, 3, 4, 5};\n+        idToNeighbors.put(nodeIds[5], neighbors[5]);\n+        feats[5] = VFactory.sparseFloatVector(5, 2);\n+        feats[5].set(0, 0.3f);\n+        feats[5].set(1, 0.4f);\n+\n+        InitNeighbor initFunc = new InitNeighbor(new InitNeighborParam(matrixId, idToNeighbors));\n+        client.asyncUpdate(initFunc).get();\n+\n+        InitNodeFeats func = new InitNodeFeats(new InitNodeFeatsParam(matrixId, nodeIds, feats));\n+        client.asyncUpdate(func).get();\n+\n+        // Sample the neighbors\n+        nodeIds = new long[] {1, 2, 3, 4, 5, 6, 7, 8};\n+        GetNodeFeatsParam param = new GetNodeFeatsParam(matrixId, nodeIds);\n+        Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client\n+                .get(new GetNodeFeats(param)))).getResult();\n+        ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result\n+                .long2ObjectEntrySet().fastIterator();\n+\n+        LOG.info(\n+                \"==============================sample neighbors result============================\");\n+        Long2ObjectMap.Entry<IntFloatVector> entry;\n+        while (iter.hasNext()) {\n+            entry = iter.next();\n+            IntFloatVector vector = entry.getValue();\n+            if (vector.isDense()) {\n+                LOG.info(\"node \" + entry.getLongKey() + \" has a dense features\");\n+                float[] values = vector.getStorage().getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    LOG.info(\"feat index \" + i + \" values = \" + values[i]);\n+                }\n+            } else if (vector.isSparse()) {\n+                LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n+                ObjectIterator<Int2FloatMap.Entry> valueIter = vector\n+                        .getStorage().entryIterator();\n+\n+                while (valueIter.hasNext()) {\n+                    Int2FloatMap.Entry keyValue = valueIter.next();\n+                    LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" +\n+                            keyValue.getFloatValue());\n+                }\n+            } else {\n+                LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n+                int[] keys = vector.getStorage().getIndices();\n+                float[] values = vector.getStorage().getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n+                }\n+            }\n+        }\n \n-    LOG.info(\"==============================sample neighbors result============================\");\n-    while (sampleIter.hasNext()) {\n-      Entry<long[]> sampleEntry = sampleIter.next();\n-      LOG.info(\n-          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+        SampleNeighborParam sampleParam = new SampleNeighborParam(matrixId, nodeIds, -1);\n+        Long2ObjectOpenHashMap<long[]> sampleResult = ((SampleNeighborResult) (client\n+                .get(new SampleNeighbor(sampleParam)))).getNodeIdToNeighbors();\n+\n+        ObjectIterator<Entry<long[]>> sampleIter = sampleResult\n+                .long2ObjectEntrySet().fastIterator();\n+\n+        LOG.info(\n+                \"==============================sample neighbors result============================\");\n+        while (sampleIter.hasNext()) {\n+            Entry<long[]> sampleEntry = sampleIter.next();\n+            LOG.info(\n+                    \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" +\n+                            Arrays.toString(sampleEntry.getValue()));\n+        }\n     }\n-  }\n \n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n-  }\n+    @After\n+    public void stop() throws AngelException {\n+        LOG.info(\"stop local cluster\");\n+        angelClient.stop();\n+    }\n }\n",
            "diff_size": 365
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/894/GetNodeFeatsTest2.java\nindex c79a946de1..2cd865e1bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/894/GetNodeFeatsTest2.java\n@@ -44,28 +44,31 @@ import org.junit.Before;\n import org.junit.Test;\n \n public class GetNodeFeatsTest2 {\n-  public static String NODE = \"node\";\n-\n-  private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n-  private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-  private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-  private AngelClient angelClient;\n-  private ParameterServerId psId;\n-  private PSAttemptId psAttempt0Id;\n-  private WorkerId workerId;\n-  private WorkerAttemptId workerAttempt0Id;\n-\n-  int feaNum = 100000;\n-  int start = 100;\n-  int end = 1000000;\n-  int nnz = 1000;\n-\n-  static {\n+\n+    public static String NODE = \"node\";\n+    private static final Log LOG = LogFactory.getLog(InitNeighborTest.class);\n+    private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+    private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+    private AngelClient angelClient;\n+    private ParameterServerId psId;\n+    private PSAttemptId psAttempt0Id;\n+    private WorkerId workerId;\n+    private WorkerAttemptId workerAttempt0Id;\n+\n+    int feaNum = 100000;\n+\n+    int start = 100;\n+\n+    int end = 1000000;\n+\n+    int nnz = 1000;\n+\n+    static {\n     PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-  }\n+    }\n \n-  @Before\n-  public void setup() throws Exception {\n+    @Before\n+    public void setup() throws Exception {\n     // set basic configuration keys\n     Configuration conf = new Configuration();\n     conf.setBoolean(\"mapred.mapper.new-api\", true);\n@@ -79,12 +82,10 @@ public class GetNodeFeatsTest2 {\n     conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, \"file:///F:\\\\test\\\\model_1\");\n     conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, LOCAL_FS + TMP_PATH + \"/in\");\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n     conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n     conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n     //conf.setInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, 1000);\n-\n     conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 10);\n     conf.setInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS, 1000);\n     conf.setInt(AngelConf.ANGEL_PS_HEARTBEAT_INTERVAL_MS, 1000);\n@@ -114,19 +115,16 @@ public class GetNodeFeatsTest2 {\n \n     // Start to run application\n     angelClient.run();\n-\n     Thread.sleep(5000);\n-\n     psId = new ParameterServerId(0);\n     psAttempt0Id = new PSAttemptId(psId, 0);\n-\n     WorkerGroupId workerGroupId = new WorkerGroupId(0);\n     workerId = new WorkerId(workerGroupId, 0);\n     workerAttempt0Id = new WorkerAttemptId(workerId, 0);\n-  }\n+    }\n \n-  @Test\n-  public void testCSR() throws Exception {\n+    @Test\n+    public void testCSR() throws Exception {\n     Worker worker = LocalClusterContext.get().getWorker(workerAttempt0Id).getWorker();\n     MatrixClient client = worker.getPSAgent().getMatrixClient(NODE, 0);\n     int matrixId = client.getMatrixId();\n@@ -134,12 +132,10 @@ public class GetNodeFeatsTest2 {\n     // Init node neighbors and feats\n     long[] nodeIds = new long[6];\n     IntFloatVector[] feats = new IntFloatVector[6];\n-    long [][] neighbors = new long[6][];\n-\n+    long[][] neighbors = new long[6][];\n     Long2ObjectOpenHashMap<long[]> idToNeighbors = new Long2ObjectOpenHashMap<>();\n-\n     nodeIds[0] = 1;\n-    neighbors[0] = new long[]{2,3,4,5,8};\n+    neighbors[0] = new long[]{2, 3, 4, 5, 8};\n     idToNeighbors.put(nodeIds[0], neighbors[0]);\n     feats[0] = VFactory.denseFloatVector(5);\n     feats[0].set(0, 0.2f);\n@@ -147,104 +143,89 @@ public class GetNodeFeatsTest2 {\n     feats[0].set(2, 0.4f);\n     feats[0].set(3, 0.5f);\n     feats[0].set(4, 0.6f);\n-\n     nodeIds[1] = 2;\n-    neighbors[1] = new long[]{1,3,4,5,8};\n+    neighbors[1] = new long[]{1, 3, 4, 5, 8};\n     idToNeighbors.put(nodeIds[1], neighbors[1]);\n     feats[1] = VFactory.sparseFloatVector(5, 2);\n     feats[1].set(1, 0.4f);\n     feats[1].set(3, 0.5f);\n-\n     nodeIds[2] = 3;\n-    neighbors[2] = new long[]{1,2,4,5,8};\n+    neighbors[2] = new long[]{1, 2, 4, 5, 8};\n     idToNeighbors.put(nodeIds[2], neighbors[2]);\n     feats[2] = VFactory.sortedFloatVector(5, 3);\n     feats[2].set(0, 0.4f);\n     feats[2].set(1, 0.5f);\n     feats[2].set(4, 0.6f);\n-\n     nodeIds[3] = 4;\n-    neighbors[3] = new long[]{1,2,3,5,8};\n+    neighbors[3] = new long[]{1, 2, 3, 5, 8};\n     idToNeighbors.put(nodeIds[3], neighbors[3]);\n     feats[3] = VFactory.sparseFloatVector(5, 2);\n     feats[3].set(4, 0.6f);\n     feats[3].set(1, 0.5f);\n-\n     nodeIds[4] = 5;\n-    neighbors[4] = new long[]{1,2,3,4,8};\n+    neighbors[4] = new long[]{1, 2, 3, 4, 8};\n     idToNeighbors.put(nodeIds[4], neighbors[4]);\n     feats[4] = VFactory.sparseFloatVector(5, 1);\n     feats[4].set(2, 0.6f);\n-\n     nodeIds[5] = 8;\n-    neighbors[2] = new long[]{1,2,3,4,5};\n+    neighbors[2] = new long[]{1, 2, 3, 4, 5};\n     idToNeighbors.put(nodeIds[5], neighbors[5]);\n-    feats[5] = VFactory.sparseFloatVector(5,2);\n+    feats[5] = VFactory.sparseFloatVector(5, 2);\n     feats[5].set(0, 0.3f);\n     feats[5].set(1, 0.4f);\n-\n     InitNeighbor initFunc = new InitNeighbor(new InitNeighborParam(matrixId, idToNeighbors));\n     client.asyncUpdate(initFunc).get();\n-\n     InitNodeFeats func = new InitNodeFeats(new InitNodeFeatsParam(matrixId, nodeIds, feats));\n     client.asyncUpdate(func).get();\n \n     // Sample the neighbors\n     nodeIds = new long[]{1, 2, 3, 4, 5, 6, 7, 8};\n     GetNodeFeatsParam param = new GetNodeFeatsParam(matrixId, nodeIds);\n-    Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client\n-        .get(new GetNodeFeats(param)))).getResult();\n-    ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result\n-        .long2ObjectEntrySet().fastIterator();\n-\n+    Long2ObjectOpenHashMap<IntFloatVector> result = ((GetNodeFeatsResult) (client.get(new GetNodeFeats(param)))).getResult();\n+    ObjectIterator<Long2ObjectMap.Entry<IntFloatVector>> iter = result.long2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n     Long2ObjectMap.Entry<IntFloatVector> entry;\n     while (iter.hasNext()) {\n-      entry = iter.next();\n-      IntFloatVector vector = entry.getValue();\n-      if(vector.isDense()) {\n+        entry = iter.next();\n+        IntFloatVector vector = entry.getValue();\n+        if (vector.isDense()) {\n         LOG.info(\"node \" + entry.getLongKey() + \" has a dense features\");\n-        float [] values = vector.getStorage().getValues();\n-        for(int i = 0; i < values.length; i++) {\n-          LOG.info(\"feat index \" + i + \" values = \" + values[i]);\n-        }\n-      } else if(vector.isSparse()) {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n-        ObjectIterator<Int2FloatMap.Entry> valueIter = vector\n-            .getStorage().entryIterator();\n-\n-        while(valueIter.hasNext()) {\n-          Int2FloatMap.Entry keyValue = valueIter.next();\n-          LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" + keyValue.getFloatValue());\n+        float[] values = vector.getStorage().getValues();\n+        for (int i = 0; i < values.length; i++) {\n+                                  LOG.info(\"feat index \" + i + \" values = \" + values[i]);\n         }\n-      } else {\n-        LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n-        int [] keys = vector.getStorage().getIndices();\n-        float [] values = vector.getStorage().getValues();\n-        for(int i = 0; i < values.length; i++) {\n-          LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n+        } else if (vector.isSparse()) {\n+                               LOG.info(\"node \" + entry.getLongKey() + \" has a sparse features\");\n+                               ObjectIterator<Int2FloatMap.Entry> valueIter = vector.getStorage().entryIterator();\n+                               while (valueIter.hasNext()) {\n+                                          Int2FloatMap.Entry keyValue = valueIter.next();\n+                                          LOG.info(\"feat index \" + keyValue.getIntKey() + \" values = \" + keyValue.getFloatValue());\n+                               }\n+        } else {\n+          LOG.info(\"node \" + entry.getLongKey() + \" has a sorted features\");\n+\n+          int[] keys = vector.getStorage().getIndices();\n+          float[] values = vector.getStorage().getValues();\n+          for (int i = 0; i < values.length; i++) {\n+                   LOG.info(\"feat index \" + keys[i] + \" values = \" + values[i]);\n+          }\n         }\n-      }\n     }\n \n     SampleNeighborParam sampleParam = new SampleNeighborParam(matrixId, nodeIds, -1);\n-    Long2ObjectOpenHashMap<long[]> sampleResult = ((SampleNeighborResult) (client\n-        .get(new SampleNeighbor(sampleParam)))).getNodeIdToNeighbors();\n-\n-    ObjectIterator<Entry<long[]>> sampleIter = sampleResult\n-        .long2ObjectEntrySet().fastIterator();\n-\n+    Long2ObjectOpenHashMap<long[]> sampleResult = ((SampleNeighborResult) (client.get(new SampleNeighbor(sampleParam)))).getNodeIdToNeighbors();\n+    ObjectIterator<Entry<long[]>> sampleIter = sampleResult.long2ObjectEntrySet().fastIterator();\n     LOG.info(\"==============================sample neighbors result============================\");\n+\n     while (sampleIter.hasNext()) {\n-      Entry<long[]> sampleEntry = sampleIter.next();\n-      LOG.info(\n-          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+        Entry<long[]> sampleEntry = sampleIter.next();\n+        LOG.info(\"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+    }\n     }\n-  }\n \n-  @After\n-  public void stop() throws AngelException {\n+    @After\n+    public void stop() throws AngelException {\n     LOG.info(\"stop local cluster\");\n     angelClient.stop();\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 99
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/894/GetNodeFeatsTest2.java\nindex c79a946de1..57e7f5b95e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/894/GetNodeFeatsTest2.java\n@@ -238,7 +238,9 @@ public class GetNodeFeatsTest2 {\n     while (sampleIter.hasNext()) {\n       Entry<long[]> sampleEntry = sampleIter.next();\n       LOG.info(\n-          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+          \"node id = \" + sampleEntry.getLongKey() +\", neighbors = \" + Arrays. toString(sampleEntry.getValue(\n+        )\n+        ) );\n     }\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/894/GetNodeFeatsTest2.java\nindex c79a946de1..a89de95e4d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/894/GetNodeFeatsTest2.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/894/GetNodeFeatsTest2.java\n@@ -237,14 +237,13 @@ public class GetNodeFeatsTest2 {\n     LOG.info(\"==============================sample neighbors result============================\");\n     while (sampleIter.hasNext()) {\n       Entry<long[]> sampleEntry = sampleIter.next();\n-      LOG.info(\n-          \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n-    }\n-  }\n+      LOG.info( \"node id = \" + sampleEntry.getLongKey() + \", neighbors = \" + Arrays.toString(sampleEntry.getValue()));\n+}\n+}\n \n-  @After\n-  public void stop() throws AngelException {\n-    LOG.info(\"stop local cluster\");\n-    angelClient.stop();\n-  }\n+@After\n+public void stop() throws AngelException {\n+  LOG.info(\"stop local cluster\");\n+  angelClient.stop();\n+}\n }\n",
            "diff_size": 9
        }
    ]
}