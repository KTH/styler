{
    "error_id": "264",
    "information": {
        "errors": [
            {
                "line": "129",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                photoVo = new PhotoVo();\n                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n                photoVos.add(photoVo);\n            }\n            complaintDataVo.setPhotos(photoVos);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/264/ListComplaintsListener.java\nindex e17b59c81d..3e5b8f0f02 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler/264/ListComplaintsListener.java\n@@ -125,8 +125,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             List<FileRelDto> fileRelDtos = fileRelInnerServiceSMOImpl.queryFileRels(fileRelDto);\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n-                photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n+                photoVo = new PhotoVo(); photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n                 photoVos.add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/264/ListComplaintsListener.java\nindex e17b59c81d..49ab915935 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/intellij/264/ListComplaintsListener.java\n@@ -32,105 +32,106 @@ import java.util.List;\n @Java110Listener(\"listComplaintsListener\")\n public class ListComplaintsListener extends AbstractServiceApiListener {\n \n-    @Autowired\n-    private IComplaintInnerServiceSMO complaintInnerServiceSMOImpl;\n+  @Autowired\n+  private IComplaintInnerServiceSMO complaintInnerServiceSMOImpl;\n \n-    @Autowired\n-    private IRoomInnerServiceSMO roomInnerServiceSMOImpl;\n+  @Autowired\n+  private IRoomInnerServiceSMO roomInnerServiceSMOImpl;\n \n-    @Autowired\n-    private IComplaintUserInnerServiceSMO complaintUserInnerServiceSMOImpl;\n-    @Autowired\n-    private IFileRelInnerServiceSMO fileRelInnerServiceSMOImpl;\n+  @Autowired\n+  private IComplaintUserInnerServiceSMO complaintUserInnerServiceSMOImpl;\n+  @Autowired\n+  private IFileRelInnerServiceSMO fileRelInnerServiceSMOImpl;\n \n-    @Override\n-    public String getServiceCode() {\n-        return ServiceCodeComplaintConstant.LIST_COMPLAINTS;\n-    }\n+  @Override\n+  public String getServiceCode() {\n+    return ServiceCodeComplaintConstant.LIST_COMPLAINTS;\n+  }\n \n-    @Override\n-    public HttpMethod getHttpMethod() {\n-        return HttpMethod.GET;\n-    }\n+  @Override\n+  public HttpMethod getHttpMethod() {\n+    return HttpMethod.GET;\n+  }\n \n \n-    @Override\n-    public int getOrder() {\n-        return DEFAULT_ORDER;\n-    }\n+  @Override\n+  public int getOrder() {\n+    return DEFAULT_ORDER;\n+  }\n \n \n-    public IComplaintInnerServiceSMO getComplaintInnerServiceSMOImpl() {\n-        return complaintInnerServiceSMOImpl;\n-    }\n+  public IComplaintInnerServiceSMO getComplaintInnerServiceSMOImpl() {\n+    return complaintInnerServiceSMOImpl;\n+  }\n \n-    public void setComplaintInnerServiceSMOImpl(IComplaintInnerServiceSMO complaintInnerServiceSMOImpl) {\n-        this.complaintInnerServiceSMOImpl = complaintInnerServiceSMOImpl;\n-    }\n+  public void setComplaintInnerServiceSMOImpl(IComplaintInnerServiceSMO complaintInnerServiceSMOImpl) {\n+    this.complaintInnerServiceSMOImpl = complaintInnerServiceSMOImpl;\n+  }\n \n-    @Override\n-    protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n-        Assert.hasKeyAndValue(reqJson, \"communityId\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u5c0f\u533a\u4fe1\u606f\");\n-        super.validatePageInfo(reqJson);\n-    }\n-\n-    @Override\n-    protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n+  @Override\n+  protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n+    Assert.hasKeyAndValue(reqJson, \"communityId\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u5c0f\u533a\u4fe1\u606f\");\n+    super.validatePageInfo(reqJson);\n+  }\n \n-        ComplaintDto complaintDto = BeanConvertUtil.covertBean(reqJson, ComplaintDto.class);\n+  @Override\n+  protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n \n-        int count = complaintInnerServiceSMOImpl.queryComplaintsCount(complaintDto);\n+    ComplaintDto complaintDto = BeanConvertUtil.covertBean(reqJson, ComplaintDto.class);\n \n-        List<ApiComplaintDataVo> complaints = null;\n+    int count = complaintInnerServiceSMOImpl.queryComplaintsCount(complaintDto);\n \n-        if (count > 0) {\n-            List<ComplaintDto> complaintDtos = complaintInnerServiceSMOImpl.queryComplaints(complaintDto);\n-            complaintDtos = freshCurrentUser(complaintDtos);\n-            complaints = BeanConvertUtil.covertBeanList(complaintDtos, ApiComplaintDataVo.class);\n-            refreshPhotos(complaints);\n-        } else {\n-            complaints = new ArrayList<>();\n-        }\n+    List<ApiComplaintDataVo> complaints = null;\n \n-        ApiComplaintVo apiComplaintVo = new ApiComplaintVo();\n+    if (count > 0) {\n+      List<ComplaintDto> complaintDtos = complaintInnerServiceSMOImpl.queryComplaints(complaintDto);\n+      complaintDtos = freshCurrentUser(complaintDtos);\n+      complaints = BeanConvertUtil.covertBeanList(complaintDtos, ApiComplaintDataVo.class);\n+      refreshPhotos(complaints);\n+    } else {\n+      complaints = new ArrayList<>();\n+    }\n \n-        apiComplaintVo.setTotal(count);\n-        apiComplaintVo.setRecords((int) Math.ceil((double) count / (double) reqJson.getInteger(\"row\")));\n-        apiComplaintVo.setComplaints(complaints);\n+    ApiComplaintVo apiComplaintVo = new ApiComplaintVo();\n \n-        ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(apiComplaintVo), HttpStatus.OK);\n+    apiComplaintVo.setTotal(count);\n+    apiComplaintVo.setRecords((int) Math.ceil((double) count / (double) reqJson.getInteger(\"row\")));\n+    apiComplaintVo.setComplaints(complaints);\n \n-        context.setResponseEntity(responseEntity);\n+    ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(apiComplaintVo), HttpStatus.OK);\n \n-    }\n+    context.setResponseEntity(responseEntity);\n \n-    private List<ComplaintDto> freshCurrentUser(List<ComplaintDto> complaintDtos) {\n-        List<ComplaintDto> tmpComplaintDtos = new ArrayList<>();\n-        for (ComplaintDto complaintDto : complaintDtos) {\n-            complaintDto = complaintUserInnerServiceSMOImpl.getTaskCurrentUser(complaintDto);\n-            tmpComplaintDtos.add(complaintDto);\n-        }\n+  }\n \n-        return tmpComplaintDtos;\n+  private List<ComplaintDto> freshCurrentUser(List<ComplaintDto> complaintDtos) {\n+    List<ComplaintDto> tmpComplaintDtos = new ArrayList<>();\n+    for (ComplaintDto complaintDto : complaintDtos) {\n+      complaintDto = complaintUserInnerServiceSMOImpl.getTaskCurrentUser(complaintDto);\n+      tmpComplaintDtos.add(complaintDto);\n     }\n \n-    private void refreshPhotos(List<ApiComplaintDataVo> complaints) {\n-        List<PhotoVo> photoVos = null;\n-        PhotoVo photoVo = null;\n-        for (ApiComplaintDataVo complaintDataVo : complaints) {\n-\n-            FileRelDto fileRelDto = new FileRelDto();\n-            fileRelDto.setObjId(complaintDataVo.getComplaintId());\n-            fileRelDto.setRelTypeCd(\"13000\");\n-            List<FileRelDto> fileRelDtos = fileRelInnerServiceSMOImpl.queryFileRels(fileRelDto);\n-            photoVos = new ArrayList<>();\n-            for (FileRelDto tmpFileRelDto : fileRelDtos) {\n-                photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n-                photoVos.add(photoVo);\n-            }\n-            complaintDataVo.setPhotos(photoVos);\n-        }\n+    return tmpComplaintDtos;\n+  }\n+\n+  private void refreshPhotos(List<ApiComplaintDataVo> complaints) {\n+    List<PhotoVo> photoVos = null;\n+    PhotoVo photoVo = null;\n+    for (ApiComplaintDataVo complaintDataVo : complaints) {\n+\n+      FileRelDto fileRelDto = new FileRelDto();\n+      fileRelDto.setObjId(complaintDataVo.getComplaintId());\n+      fileRelDto.setRelTypeCd(\"13000\");\n+      List<FileRelDto> fileRelDtos = fileRelInnerServiceSMOImpl.queryFileRels(fileRelDto);\n+      photoVos = new ArrayList<>();\n+      for (FileRelDto tmpFileRelDto : fileRelDtos) {\n+        photoVo = new PhotoVo();\n+        photoVo.setUrl(\n+          \"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n+        photoVos.add(photoVo);\n+      }\n+      complaintDataVo.setPhotos(photoVos);\n     }\n+  }\n \n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/264/ListComplaintsListener.java\nindex e17b59c81d..7a880620db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/naturalize/264/ListComplaintsListener.java\n@@ -133,4 +133,4 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/264/ListComplaintsListener.java\nindex e17b59c81d..aaa073d048 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/codebuff/264/ListComplaintsListener.java\n@@ -21,7 +21,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -29,6 +28,8 @@ import java.util.List;\n /**\n  * \u67e5\u8be2\u5c0f\u533a\u4fa6\u542c\u7c7b\n  */\n+\n+\n @Java110Listener(\"listComplaintsListener\")\n public class ListComplaintsListener extends AbstractServiceApiListener {\n \n@@ -40,6 +41,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n \n     @Autowired\n     private IComplaintUserInnerServiceSMO complaintUserInnerServiceSMOImpl;\n+\n     @Autowired\n     private IFileRelInnerServiceSMO fileRelInnerServiceSMOImpl;\n \n@@ -48,6 +50,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         return ServiceCodeComplaintConstant.LIST_COMPLAINTS;\n     }\n \n+\n     @Override\n     public HttpMethod getHttpMethod() {\n         return HttpMethod.GET;\n@@ -59,7 +62,6 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         return DEFAULT_ORDER;\n     }\n \n-\n     public IComplaintInnerServiceSMO getComplaintInnerServiceSMOImpl() {\n         return complaintInnerServiceSMOImpl;\n     }\n@@ -68,21 +70,22 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         this.complaintInnerServiceSMOImpl = complaintInnerServiceSMOImpl;\n     }\n \n+\n     @Override\n     protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n         Assert.hasKeyAndValue(reqJson, \"communityId\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u5c0f\u533a\u4fe1\u606f\");\n+\n+\n         super.validatePageInfo(reqJson);\n     }\n \n-    @Override\n-    protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n \n+    @Override\n+    protected void doSoService(ServiceDataFlowEvent event,\n+                               DataFlowContext context, JSONObject reqJson) {\n         ComplaintDto complaintDto = BeanConvertUtil.covertBean(reqJson, ComplaintDto.class);\n-\n         int count = complaintInnerServiceSMOImpl.queryComplaintsCount(complaintDto);\n-\n         List<ApiComplaintDataVo> complaints = null;\n-\n         if (count > 0) {\n             List<ComplaintDto> complaintDtos = complaintInnerServiceSMOImpl.queryComplaints(complaintDto);\n             complaintDtos = freshCurrentUser(complaintDtos);\n@@ -93,17 +96,15 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         }\n \n         ApiComplaintVo apiComplaintVo = new ApiComplaintVo();\n-\n         apiComplaintVo.setTotal(count);\n         apiComplaintVo.setRecords((int) Math.ceil((double) count / (double) reqJson.getInteger(\"row\")));\n         apiComplaintVo.setComplaints(complaints);\n \n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(apiComplaintVo), HttpStatus.OK);\n-\n         context.setResponseEntity(responseEntity);\n-\n     }\n \n+\n     private List<ComplaintDto> freshCurrentUser(List<ComplaintDto> complaintDtos) {\n         List<ComplaintDto> tmpComplaintDtos = new ArrayList<>();\n         for (ComplaintDto complaintDto : complaintDtos) {\n@@ -114,14 +115,15 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         return tmpComplaintDtos;\n     }\n \n+\n     private void refreshPhotos(List<ApiComplaintDataVo> complaints) {\n         List<PhotoVo> photoVos = null;\n         PhotoVo photoVo = null;\n         for (ApiComplaintDataVo complaintDataVo : complaints) {\n-\n             FileRelDto fileRelDto = new FileRelDto();\n             fileRelDto.setObjId(complaintDataVo.getComplaintId());\n             fileRelDto.setRelTypeCd(\"13000\");\n+\n             List<FileRelDto> fileRelDtos = fileRelInnerServiceSMOImpl.queryFileRels(fileRelDto);\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n@@ -132,5 +134,4 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             complaintDataVo.setPhotos(photoVos);\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "129",
                    "column": "78",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "78",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "92",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "129",
                    "column": "111",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "111",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "17",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/264/ListComplaintsListener.java\nindex e17b59c81d..202349bb0d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_random/264/ListComplaintsListener.java\n@@ -126,11 +126,12 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                 photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n-                photoVos.add(photoVo);\n-            }\n-            complaintDataVo.setPhotos(photoVos);\n-        }\n-    }\n-\n-}\n+                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\"+tmpFileRelDto. getFileRealName()+\"&communityId=\"\n+                +complaintDataVo.getCommunityId()); photoVos.add(photoVo);\n+             }\n+             complaintDataVo.setPhotos(photoVos);\n+         }\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/264/ListComplaintsListener.java\nindex e17b59c81d..3e5b8f0f02 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/errored/1/264/ListComplaintsListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/java110-MicroCommunity/styler_three_grams/264/ListComplaintsListener.java\n@@ -125,8 +125,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             List<FileRelDto> fileRelDtos = fileRelInnerServiceSMOImpl.queryFileRels(fileRelDto);\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n-                photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n+                photoVo = new PhotoVo(); photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n                 photoVos.add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n",
            "diff_size": 2
        }
    ]
}