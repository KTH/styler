{
    "error_id": "710",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/710/TVectorFactory.java\nindex 7b40f10d21..ad02699034 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/710/TVectorFactory.java\n@@ -23,91 +23,91 @@ import org.apache.hadoop.conf.Configuration;\n \n public class TVectorFactory {\n \n-  public static GenericObjectPool initSparseDoubleVectorPool(int dimension) {\n-    Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+    public static GenericObjectPool initSparseDoubleVectorPool(int dimension) {\n+        Configuration conf = PSAgentContext.get().getConf();\n+        int taskNumber =\n+                conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n+                        AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                        AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n \n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n-    config.maxActive = taskNumber * 3;\n-    config.maxWait = 1000;\n-    config.maxIdle = taskNumber;\n-    config.minIdle = 0;\n-    config.testOnBorrow = false;\n-    config.testOnReturn = false;\n-    config.minEvictableIdleTimeMillis = 10000;\n-    config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseDoubleVectorBuilder()), config);\n-    return pool;\n-  }\n+        GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        config.maxActive = taskNumber * 3;\n+        config.maxWait = 1000;\n+        config.maxIdle = taskNumber;\n+        config.minIdle = 0;\n+        config.testOnBorrow = false;\n+        config.testOnReturn = false;\n+        config.minEvictableIdleTimeMillis = 10000;\n+        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n+        GenericObjectPool pool =\n+                new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n+                        new SparseDoubleVectorBuilder()), config);\n+        return pool;\n+    }\n \n-  public static GenericObjectPool initDenseDoubleVectorPool(int dimension) {\n-    Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+    public static GenericObjectPool initDenseDoubleVectorPool(int dimension) {\n+        Configuration conf = PSAgentContext.get().getConf();\n+        int taskNumber =\n+                conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n+                        AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                        AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n \n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n-    config.maxActive = taskNumber * 3;\n-    config.maxWait = 1000;\n-    config.maxIdle = taskNumber;\n-    config.minIdle = 0;\n-    config.testOnBorrow = false;\n-    config.testOnReturn = false;\n-    config.minEvictableIdleTimeMillis = 10000;\n-    config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseDoubleVectorBuilder()), config);\n-    return pool;\n-  }\n+        GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        config.maxActive = taskNumber * 3;\n+        config.maxWait = 1000;\n+        config.maxIdle = taskNumber;\n+        config.minIdle = 0;\n+        config.testOnBorrow = false;\n+        config.testOnReturn = false;\n+        config.minEvictableIdleTimeMillis = 10000;\n+        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n+        GenericObjectPool pool =\n+                new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n+                        new DenseDoubleVectorBuilder()), config);\n+        return pool;\n+    }\n \n-  public static GenericObjectPool initDenseIntVectorPool(int dimension) {\n-    Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+    public static GenericObjectPool initDenseIntVectorPool(int dimension) {\n+        Configuration conf = PSAgentContext.get().getConf();\n+        int taskNumber =\n+                conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n+                        AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                        AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n \n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n-    config.maxActive = taskNumber * 3;\n-    config.maxWait = 1000;\n-    config.maxIdle = taskNumber;\n-    config.minIdle = 0;\n-    config.testOnBorrow = false;\n-    config.testOnReturn = false;\n-    config.minEvictableIdleTimeMillis = 10000;\n-    config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseIntVectorBuilder()), config);\n-    return pool;\n-  }\n+        GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        config.maxActive = taskNumber * 3;\n+        config.maxWait = 1000;\n+        config.maxIdle = taskNumber;\n+        config.minIdle = 0;\n+        config.testOnBorrow = false;\n+        config.testOnReturn = false;\n+        config.minEvictableIdleTimeMillis = 10000;\n+        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n+        GenericObjectPool pool =\n+                new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n+                        new DenseIntVectorBuilder()), config);\n+        return pool;\n+    }\n \n-  public static GenericObjectPool initSparseIntVectorPool(int dimension) {\n-    Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+    public static GenericObjectPool initSparseIntVectorPool(int dimension) {\n+        Configuration conf = PSAgentContext.get().getConf();\n+        int taskNumber =\n+                conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n+                        AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                        AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n \n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n-    config.maxActive = taskNumber * 3;\n-    config.maxWait = 1000;\n-    config.maxIdle = taskNumber;\n-    config.minIdle = 0;\n-    config.testOnBorrow = false;\n-    config.testOnReturn = false;\n-    config.minEvictableIdleTimeMillis = 10000;\n-    config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseIntVectorBuilder()), config);\n-    return pool;\n-  }\n+        GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        config.maxActive = taskNumber * 3;\n+        config.maxWait = 1000;\n+        config.maxIdle = taskNumber;\n+        config.minIdle = 0;\n+        config.testOnBorrow = false;\n+        config.testOnReturn = false;\n+        config.minEvictableIdleTimeMillis = 10000;\n+        config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n+        GenericObjectPool pool =\n+                new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n+                        new SparseIntVectorBuilder()), config);\n+        return pool;\n+    }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/710/TVectorFactory.java\nindex 7b40f10d21..60f9dd4bda 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/710/TVectorFactory.java\n@@ -26,11 +26,8 @@ public class TVectorFactory {\n   public static GenericObjectPool initSparseDoubleVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n     int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n     config.maxIdle = taskNumber;\n@@ -40,19 +37,15 @@ public class TVectorFactory {\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n     GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseDoubleVectorBuilder()), config);\n+        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new SparseDoubleVectorBuilder()), config);\n     return pool;\n   }\n \n   public static GenericObjectPool initDenseDoubleVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n     int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n     config.maxIdle = taskNumber;\n@@ -62,19 +55,15 @@ public class TVectorFactory {\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n     GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseDoubleVectorBuilder()), config);\n+        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new DenseDoubleVectorBuilder()), config);\n     return pool;\n   }\n \n   public static GenericObjectPool initDenseIntVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n     int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n     config.maxIdle = taskNumber;\n@@ -84,19 +73,15 @@ public class TVectorFactory {\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n     GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseIntVectorBuilder()), config);\n+        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new DenseIntVectorBuilder()), config);\n     return pool;\n   }\n \n   public static GenericObjectPool initSparseIntVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n     int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n-    GenericObjectPool.Config config = new GenericObjectPool.Config();\n+        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER, AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n+GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n     config.maxIdle = taskNumber;\n@@ -106,8 +91,7 @@ public class TVectorFactory {\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n     GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseIntVectorBuilder()), config);\n+        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new SparseIntVectorBuilder()), config);\n     return pool;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/710/TVectorFactory.java\nindex 7b40f10d21..28253f338d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/710/TVectorFactory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/710/TVectorFactory.java\n@@ -23,13 +23,10 @@ import org.apache.hadoop.conf.Configuration;\n \n public class TVectorFactory {\n \n-  public static GenericObjectPool initSparseDoubleVectorPool(int dimension) {\n+    public static GenericObjectPool initSparseDoubleVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n+    int taskNumber = conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                         AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n     GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n@@ -39,19 +36,14 @@ public class TVectorFactory {\n     config.testOnReturn = false;\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseDoubleVectorBuilder()), config);\n+    GenericObjectPool pool = new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new SparseDoubleVectorBuilder()), config);\n     return pool;\n-  }\n+    }\n \n-  public static GenericObjectPool initDenseDoubleVectorPool(int dimension) {\n+    public static GenericObjectPool initDenseDoubleVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n+    int taskNumber = conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                         AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n     GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n@@ -61,19 +53,14 @@ public class TVectorFactory {\n     config.testOnReturn = false;\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseDoubleVectorBuilder()), config);\n+    GenericObjectPool pool = new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new DenseDoubleVectorBuilder()), config);\n     return pool;\n-  }\n+    }\n \n-  public static GenericObjectPool initDenseIntVectorPool(int dimension) {\n+    public static GenericObjectPool initDenseIntVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n+    int taskNumber = conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                         AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n     GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n@@ -83,19 +70,14 @@ public class TVectorFactory {\n     config.testOnReturn = false;\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new DenseIntVectorBuilder()), config);\n+    GenericObjectPool pool = new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new DenseIntVectorBuilder()), config);\n     return pool;\n-  }\n+    }\n \n-  public static GenericObjectPool initSparseIntVectorPool(int dimension) {\n+    public static GenericObjectPool initSparseIntVectorPool(int dimension) {\n     Configuration conf = PSAgentContext.get().getConf();\n-    int taskNumber =\n-        conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(\n-            AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n-            AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n-\n+    int taskNumber = conf.getInt(AngelConfiguration.ANGEL_TASK_ACTUAL_NUM, conf.getInt(AngelConfiguration.ANGEL_WORKER_TASK_NUMBER,\n+                         AngelConfiguration.DEFAULT_ANGEL_WORKER_TASK_NUMBER));\n     GenericObjectPool.Config config = new GenericObjectPool.Config();\n     config.maxActive = taskNumber * 3;\n     config.maxWait = 1000;\n@@ -105,9 +87,8 @@ public class TVectorFactory {\n     config.testOnReturn = false;\n     config.minEvictableIdleTimeMillis = 10000;\n     config.whenExhaustedAction = GenericObjectPool.WHEN_EXHAUSTED_BLOCK;\n-    GenericObjectPool pool =\n-        new GenericObjectPool(new TVectorPoolableObjectFactory(dimension,\n-            new SparseIntVectorBuilder()), config);\n+    GenericObjectPool pool = new GenericObjectPool(new TVectorPoolableObjectFactory(dimension, new SparseIntVectorBuilder()), config);\n     return pool;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}