{
    "error_id": "153",
    "information": {
        "errors": [
            {
                "line": "101",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 157).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    private void cleanOutdatedAvailability() {\n        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n        for (String s : toClean) {\n            availabilityMap.remove(s);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "column": "156",
                    "severity": "warning",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "column": "156",
                    "severity": "warning",
                    "message": "'for' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/153/StandaloneAgentTracker.java\nindex 39232ff382..cc3d8c00db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler/153/StandaloneAgentTracker.java\n@@ -98,8 +98,7 @@ public class StandaloneAgentTracker {\n     }\n \n     private void cleanOutdatedAvailability() {\n-        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n-        for (String s : toClean) {\n+        List<String> toClean = availabilityMap.values().stream().filter(a->!isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());for(String s : toClean) {\n             availabilityMap.remove(s);\n         }\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/153/StandaloneAgentTracker.java\nindex 39232ff382..fed8d11be1 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/intellij/153/StandaloneAgentTracker.java\n@@ -28,90 +28,86 @@ import com.intuit.tank.vm.agent.messages.AgentAvailability;\n import com.intuit.tank.vm.agent.messages.AgentAvailabilityStatus;\n \n /**\n- * \n  * StandaloneAgentTracker\n- * \n+ *\n  * @author dangleton\n- * \n  */\n @ApplicationScoped\n public class StandaloneAgentTracker {\n \n-    private Map<String, AgentAvailability> availabilityMap = new ConcurrentHashMap<String, AgentAvailability>();\n+  private Map<String, AgentAvailability> availabilityMap = new ConcurrentHashMap<String, AgentAvailability>();\n \n-    /**\n-     * \n-     * @param availability\n-     */\n-    public void addAvailability(AgentAvailability availability) {\n-        cleanOutdatedAvailability();\n-        availabilityMap.put(availability.getInstanceId(), availability);\n-    }\n+  /**\n+   * @param availability\n+   */\n+  public void addAvailability(AgentAvailability availability) {\n+    cleanOutdatedAvailability();\n+    availabilityMap.put(availability.getInstanceId(), availability);\n+  }\n \n-    /**\n-     * \n-     * @param instanceId\n-     * @return\n-     */\n-    public AgentAvailability getAvailabilityForAgent(String instanceId) {\n-        cleanOutdatedAvailability();\n-        return availabilityMap.get(instanceId);\n-    }\n+  /**\n+   * @param instanceId\n+   * @return\n+   */\n+  public AgentAvailability getAvailabilityForAgent(String instanceId) {\n+    cleanOutdatedAvailability();\n+    return availabilityMap.get(instanceId);\n+  }\n \n-    /**\n-     * \n-     * @return\n-     */\n-    public Collection<AgentAvailability> getAvailabilities() {\n-        cleanOutdatedAvailability();\n-        return new ArrayList<AgentAvailability>(availabilityMap.values());\n-    }\n+  /**\n+   * @return\n+   */\n+  public Collection<AgentAvailability> getAvailabilities() {\n+    cleanOutdatedAvailability();\n+    return new ArrayList<AgentAvailability>(availabilityMap.values());\n+  }\n \n-    /**\n-     * gets a list of AgentAvailability to run the specified number of users.\n-     * \n-     * @param numUsers\n-     *            the number of users requested\n-     * @return the list of agents.\n-     */\n-    @Nullable\n-    public List<AgentAvailability> getAgents(int numUsers) {\n-        cleanOutdatedAvailability();\n-        List<AgentAvailability> ret = new ArrayList<AgentAvailability>();\n-        for (AgentAvailability a : availabilityMap.values()) {\n-            if (isValid(a) && isAvailable(a)) {\n-                numUsers -= a.getCapacity();\n-                ret.add(a);\n-                if (numUsers <= 0) {\n-                    break;\n-                }\n-            }\n-        }\n+  /**\n+   * gets a list of AgentAvailability to run the specified number of users.\n+   *\n+   * @param numUsers the number of users requested\n+   * @return the list of agents.\n+   */\n+  @Nullable\n+  public List<AgentAvailability> getAgents(int numUsers) {\n+    cleanOutdatedAvailability();\n+    List<AgentAvailability> ret = new ArrayList<AgentAvailability>();\n+    for (AgentAvailability a : availabilityMap.values()) {\n+      if (isValid(a) && isAvailable(a)) {\n+        numUsers -= a.getCapacity();\n+        ret.add(a);\n         if (numUsers <= 0) {\n-            for (AgentAvailability a : ret) {\n-                a.setAvailabilityStatus(AgentAvailabilityStatus.DELEGATING);\n-            }\n-        } else {\n-            ret = null;\n+          break;\n         }\n-        return ret;\n+      }\n     }\n-\n-    private void cleanOutdatedAvailability() {\n-        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n-        for (String s : toClean) {\n-            availabilityMap.remove(s);\n-        }\n+    if (numUsers <= 0) {\n+      for (AgentAvailability a : ret) {\n+        a.setAvailabilityStatus(AgentAvailabilityStatus.DELEGATING);\n+      }\n+    } else {\n+      ret = null;\n     }\n+    return ret;\n+  }\n \n-    private boolean isAvailable(AgentAvailability a) {\n-        return a.getAvailabilityStatus() == AgentAvailabilityStatus.AVAILABLE;\n+  private void cleanOutdatedAvailability() {\n+    List<String> toClean =\n+      availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId)\n+        .collect(Collectors.toList());\n+    for (String s : toClean) {\n+      availabilityMap.remove(s);\n     }\n+  }\n \n-    private boolean isValid(AgentAvailability a) {\n-        Calendar c = Calendar.getInstance();\n-        c.add(Calendar.MINUTE, -10);\n-        return a.getTimestamp().after(c.getTime());\n-    }\n+  private boolean isAvailable(AgentAvailability a) {\n+    return a.getAvailabilityStatus() == AgentAvailabilityStatus.AVAILABLE;\n+  }\n+\n+  private boolean isValid(AgentAvailability a) {\n+    Calendar c = Calendar.getInstance();\n+    c.add(Calendar.MINUTE, -10);\n+    return a.getTimestamp().after(c.getTime());\n+  }\n \n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/153/StandaloneAgentTracker.java\nindex 39232ff382..974bb1286a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/naturalize/153/StandaloneAgentTracker.java\n@@ -114,4 +114,4 @@ public class StandaloneAgentTracker {\n         return a.getTimestamp().after(c.getTime());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/153/StandaloneAgentTracker.java\nindex 39232ff382..cdb5fc80a3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/codebuff/153/StandaloneAgentTracker.java\n@@ -13,6 +13,8 @@ package com.intuit.tank.vm.perfManager;\n  * #L%\n  */\n \n+\n+\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collection;\n@@ -20,10 +22,8 @@ import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.stream.Collectors;\n-\n import javax.annotation.Nullable;\n import javax.enterprise.context.ApplicationScoped;\n-\n import com.intuit.tank.vm.agent.messages.AgentAvailability;\n import com.intuit.tank.vm.agent.messages.AgentAvailabilityStatus;\n \n@@ -34,6 +34,7 @@ import com.intuit.tank.vm.agent.messages.AgentAvailabilityStatus;\n  * @author dangleton\n  * \n  */\n+\n @ApplicationScoped\n public class StandaloneAgentTracker {\n \n@@ -53,6 +54,8 @@ public class StandaloneAgentTracker {\n      * @param instanceId\n      * @return\n      */\n+\n+\n     public AgentAvailability getAvailabilityForAgent(String instanceId) {\n         cleanOutdatedAvailability();\n         return availabilityMap.get(instanceId);\n@@ -62,6 +65,8 @@ public class StandaloneAgentTracker {\n      * \n      * @return\n      */\n+\n+\n     public Collection<AgentAvailability> getAvailabilities() {\n         cleanOutdatedAvailability();\n         return new ArrayList<AgentAvailability>(availabilityMap.values());\n@@ -74,6 +79,8 @@ public class StandaloneAgentTracker {\n      *            the number of users requested\n      * @return the list of agents.\n      */\n+\n+\n     @Nullable\n     public List<AgentAvailability> getAgents(int numUsers) {\n         cleanOutdatedAvailability();\n@@ -98,7 +105,7 @@ public class StandaloneAgentTracker {\n     }\n \n     private void cleanOutdatedAvailability() {\n-        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n+        List<String> toClean = availabilityMap.values().stream().filter(a->!isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n         for (String s : toClean) {\n             availabilityMap.remove(s);\n         }\n@@ -114,4 +121,4 @@ public class StandaloneAgentTracker {\n         return a.getTimestamp().after(c.getTime());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "102",
                    "column": "24",
                    "severity": "warning",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "102",
                    "column": "34",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "103",
                    "column": "21",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/153/StandaloneAgentTracker.java\nindex 39232ff382..232947922c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_random/153/StandaloneAgentTracker.java\n@@ -98,7 +98,9 @@ public class StandaloneAgentTracker {\n     }\n \n     private void cleanOutdatedAvailability() {\n-        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n+        List<String > toClean = availabilityMap.values().stream(\n+        ) .filter(a -> ! isValid (a)).map(AgentAvailability::getInstanceId) .\n+            collect (Collectors.toList());\n         for (String s : toClean) {\n             availabilityMap.remove(s);\n         }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "column": "156",
                    "severity": "warning",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "column": "156",
                    "severity": "warning",
                    "message": "'for' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/153/StandaloneAgentTracker.java\nindex 39232ff382..cc3d8c00db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/errored/1/153/StandaloneAgentTracker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/intuit-Tank/styler_three_grams/153/StandaloneAgentTracker.java\n@@ -98,8 +98,7 @@ public class StandaloneAgentTracker {\n     }\n \n     private void cleanOutdatedAvailability() {\n-        List<String> toClean = availabilityMap.values().stream().filter(a -> !isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());\n-        for (String s : toClean) {\n+        List<String> toClean = availabilityMap.values().stream().filter(a->!isValid(a)).map(AgentAvailability::getInstanceId).collect(Collectors.toList());for(String s : toClean) {\n             availabilityMap.remove(s);\n         }\n     }\n",
            "diff_size": 2
        }
    ]
}