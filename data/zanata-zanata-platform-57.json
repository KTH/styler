{
    "error_id": "57",
    "information": {
        "errors": [
            {
                "line": "151",
                "column": "9",
                "severity": "error",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                        Charsets.UTF_8)) {\n            props.load(reader);\n        }\n        catch (IOException e) {\n            throw new RuntimeException(e);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/57/UpdateChecker.java\nindex 4e6d350ce3..079183ce04 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler/57/UpdateChecker.java\n@@ -148,8 +148,7 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+            } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/57/UpdateChecker.java\nindex 4e6d350ce3..7845fc72d0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/57/UpdateChecker.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.client.commands;\n \n import java.io.BufferedWriter;\n@@ -58,15 +59,15 @@ import static org.zanata.util.VersionUtility.getVersionInfo;\n  * compare to current version.\n  *\n  * @author Patrick Huang <a\n- *         href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n+ * href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n public class UpdateChecker {\n     private static final Logger log =\n-            LoggerFactory.getLogger(UpdateChecker.class);\n+        LoggerFactory.getLogger(UpdateChecker.class);\n     private static final DateTimeFormatter DATE_FORMATTER =\n-            DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+        DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n     private static final String OSS_URL =\n-            \"https://oss.sonatype.org/service/local/\";\n+        \"https://oss.sonatype.org/service/local/\";\n     // update marker file valid properties\n     private static final String LAST_CHECKED = \"lastChecked\";\n     private static final String FREQUENCY = \"frequency\";\n@@ -79,18 +80,18 @@ public class UpdateChecker {\n \n     public UpdateChecker(ConsoleInteractor console) {\n         this(OSS_URL, defaultUpdateMarkerFile(), console,\n-                getVersionInfo(UpdateChecker.class).getVersionNo());\n+            getVersionInfo(UpdateChecker.class).getVersionNo());\n     }\n \n     private static File defaultUpdateMarkerFile() {\n         return new File(new File(System.getProperty(\"user.home\"), \".config\"),\n-                \"zanata-client-update.properties\");\n+            \"zanata-client-update.properties\");\n     }\n \n     @VisibleForTesting\n     protected UpdateChecker(String sonatypeRestUrl,\n-            File updateMarker,\n-            ConsoleInteractor console, String currentVersionNo) {\n+                            File updateMarker,\n+                            ConsoleInteractor console, String currentVersionNo) {\n         this.sonatypeRestUrl = sonatypeRestUrl;\n         this.console = console;\n         this.currentVersionNo = currentVersionNo;\n@@ -116,7 +117,7 @@ public class UpdateChecker {\n             if (timeToCheck && !noAsking && interactiveMode) {\n                 console.printf(get(\"check.update.yes.no\"), daysPassed.getDays());\n                 String check = console.expectAnswerWithRetry(\n-                        AnswerValidator.YES_NO);\n+                    AnswerValidator.YES_NO);\n                 if (check.toLowerCase().startsWith(\"n\")) {\n                     return false;\n                 }\n@@ -136,8 +137,9 @@ public class UpdateChecker {\n \n     private static Frequency readFrequency(Properties props) {\n         return Frequency.from(props.getProperty(FREQUENCY,\n-                Frequency.weekly.name()));\n+            Frequency.weekly.name()));\n     }\n+\n     private static boolean readNoAsking(Properties props) {\n         return props.getProperty(NO_ASKING, \"false\").equalsIgnoreCase(\"true\");\n     }\n@@ -145,21 +147,20 @@ public class UpdateChecker {\n     private static Properties loadFileToProperties(File updateMarker) {\n         Properties props = new Properties();\n         try (InputStreamReader reader =\n-                new InputStreamReader(new FileInputStream(updateMarker),\n-                        Charsets.UTF_8)) {\n+                 new InputStreamReader(new FileInputStream(updateMarker),\n+                     Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n     }\n \n     private static void createUpdateMarkerFile(File updateMarker)\n-            throws IOException {\n+        throws IOException {\n         boolean created = updateMarker.createNewFile();\n         Preconditions.checkState(created, get(\"create.file.failure\"),\n-                updateMarker);\n+            updateMarker);\n         String today = DATE_FORMATTER.print(new DateTime());\n         Properties props = new Properties();\n         props.setProperty(LAST_CHECKED, today);\n@@ -168,7 +169,7 @@ public class UpdateChecker {\n         props.setProperty(NO_ASKING, \"true\");\n         props.setComment(NO_ASKING, get(\"no.check.update.prompt\"));\n         props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker,\n-                Charsets.UTF_8)), null);\n+            Charsets.UTF_8)), null);\n     }\n \n     public void checkNewerVersion() {\n@@ -186,7 +187,7 @@ public class UpdateChecker {\n             String today = DATE_FORMATTER.print(new DateTime());\n             props.setProperty(LAST_CHECKED, today);\n             props.store(new BufferedWriter(new FileWriterWithEncoding(\n-                    updateMarker, Charsets.UTF_8)), null);\n+                updateMarker, Charsets.UTF_8)), null);\n         } catch (IOException e) {\n             log.warn(\"failed to load file {}\", updateMarker);\n         }\n@@ -203,18 +204,18 @@ public class UpdateChecker {\n         try {\n             Client client = ResteasyClientBuilder.newClient();\n             WebTarget target =\n-                    client.target(sonatypeRestUrl)\n-                            .path(\"artifact/maven/resolve\")\n-                            .queryParam(\"g\", \"org.zanata\")\n-                            .queryParam(\"a\", \"client\")\n-                            .queryParam(\"p\", \"pom\")\n-                            .queryParam(\"v\", \"LATEST\")\n-                            .queryParam(\"r\", \"releases\");\n+                client.target(sonatypeRestUrl)\n+                    .path(\"artifact/maven/resolve\")\n+                    .queryParam(\"g\", \"org.zanata\")\n+                    .queryParam(\"a\", \"client\")\n+                    .queryParam(\"p\", \"pom\")\n+                    .queryParam(\"v\", \"LATEST\")\n+                    .queryParam(\"r\", \"releases\");\n             response = target.request(MediaType.APPLICATION_XML_TYPE).get();\n             if (response.getStatusInfo() != Response.Status.OK) {\n                 log.debug(\n-                        \"Failed to resolve latest client artifact [status {}]. Ignored\",\n-                        response.getStatus());\n+                    \"Failed to resolve latest client artifact [status {}]. Ignored\",\n+                    response.getStatus());\n                 console.printfln(get(\"check.update.failed\"));\n                 return Optional.absent();\n             }\n@@ -225,15 +226,16 @@ public class UpdateChecker {\n         }\n         // cheap xml parsing\n         String payload =\n-                response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n+            response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n         Pattern pattern = Pattern.compile(\"^.+<version>(.+)</version>.+\");\n         Matcher matcher = pattern.matcher(payload);\n         return matcher.matches() ? Optional.of(matcher.group(1)) :\n-                Optional.absent();\n+            Optional.absent();\n     }\n \n     private enum Frequency {\n         weekly, monthly, daily;\n+\n         static Frequency from(String value) {\n             try {\n                 return valueOf(value);\n@@ -242,6 +244,7 @@ public class UpdateChecker {\n                 return weekly;\n             }\n         }\n+\n         Days days() {\n             switch (this) {\n                 case monthly:\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/57/UpdateChecker.java\nindex 4e6d350ce3..1b712210e2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/57/UpdateChecker.java\n@@ -31,7 +31,6 @@ import javax.ws.rs.client.Client;\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n-\n import org.apache.commons.io.output.FileWriterWithEncoding;\n import org.fedorahosted.openprops.Properties;\n import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\n@@ -60,37 +59,37 @@ import static org.zanata.util.VersionUtility.getVersionInfo;\n  * @author Patrick Huang <a\n  *         href=\"mailto:pahuang@redhat.com\">pahuang@redhat.com</a>\n  */\n+\n+\n public class UpdateChecker {\n-    private static final Logger log =\n-            LoggerFactory.getLogger(UpdateChecker.class);\n-    private static final DateTimeFormatter DATE_FORMATTER =\n-            DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n-    private static final String OSS_URL =\n-            \"https://oss.sonatype.org/service/local/\";\n+    private static final Logger log = LoggerFactory.getLogger(UpdateChecker.class);\n+    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormat.forPattern(\"yyyy-MM-dd\");\n+    private static final String OSS_URL = \"https://oss.sonatype.org/service/local/\";\n     // update marker file valid properties\n     private static final String LAST_CHECKED = \"lastChecked\";\n     private static final String FREQUENCY = \"frequency\";\n     private static final String NO_ASKING = \"noAsking\";\n-\n     private final String sonatypeRestUrl;\n     private final ConsoleInteractor console;\n     private final String currentVersionNo;\n     private final File updateMarker;\n \n     public UpdateChecker(ConsoleInteractor console) {\n-        this(OSS_URL, defaultUpdateMarkerFile(), console,\n-                getVersionInfo(UpdateChecker.class).getVersionNo());\n+        this(OSS_URL,\n+            defaultUpdateMarkerFile(),\n+            console,\n+            getVersionInfo(UpdateChecker.class).getVersionNo());\n     }\n \n     private static File defaultUpdateMarkerFile() {\n         return new File(new File(System.getProperty(\"user.home\"), \".config\"),\n-                \"zanata-client-update.properties\");\n+                        \"zanata-client-update.properties\");\n     }\n \n     @VisibleForTesting\n     protected UpdateChecker(String sonatypeRestUrl,\n-            File updateMarker,\n-            ConsoleInteractor console, String currentVersionNo) {\n+File updateMarker,\n+ConsoleInteractor console, String currentVersionNo) {\n         this.sonatypeRestUrl = sonatypeRestUrl;\n         this.console = console;\n         this.currentVersionNo = currentVersionNo;\n@@ -115,8 +114,7 @@ public class UpdateChecker {\n             boolean noAsking = readNoAsking(props);\n             if (timeToCheck && !noAsking && interactiveMode) {\n                 console.printf(get(\"check.update.yes.no\"), daysPassed.getDays());\n-                String check = console.expectAnswerWithRetry(\n-                        AnswerValidator.YES_NO);\n+                String check = console.expectAnswerWithRetry(AnswerValidator.YES_NO);\n                 if (check.toLowerCase().startsWith(\"n\")) {\n                     return false;\n                 }\n@@ -135,31 +133,26 @@ public class UpdateChecker {\n     }\n \n     private static Frequency readFrequency(Properties props) {\n-        return Frequency.from(props.getProperty(FREQUENCY,\n-                Frequency.weekly.name()));\n+        return Frequency.from(props.getProperty(FREQUENCY, Frequency.weekly.name()));\n     }\n+\n     private static boolean readNoAsking(Properties props) {\n         return props.getProperty(NO_ASKING, \"false\").equalsIgnoreCase(\"true\");\n     }\n \n     private static Properties loadFileToProperties(File updateMarker) {\n         Properties props = new Properties();\n-        try (InputStreamReader reader =\n-                new InputStreamReader(new FileInputStream(updateMarker),\n-                        Charsets.UTF_8)) {\n+        try (InputStreamReader reader = new InputStreamReader(new FileInputStream(updateMarker), Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+        } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n     }\n \n-    private static void createUpdateMarkerFile(File updateMarker)\n-            throws IOException {\n+    private static void createUpdateMarkerFile(File updateMarker) throws IOException {\n         boolean created = updateMarker.createNewFile();\n-        Preconditions.checkState(created, get(\"create.file.failure\"),\n-                updateMarker);\n+        Preconditions.checkState(created, get(\"create.file.failure\"), updateMarker);\n         String today = DATE_FORMATTER.print(new DateTime());\n         Properties props = new Properties();\n         props.setProperty(LAST_CHECKED, today);\n@@ -167,8 +160,7 @@ public class UpdateChecker {\n         props.setProperty(FREQUENCY, \"weekly\");\n         props.setProperty(NO_ASKING, \"true\");\n         props.setComment(NO_ASKING, get(\"no.check.update.prompt\"));\n-        props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker,\n-                Charsets.UTF_8)), null);\n+        props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker, Charsets.UTF_8)), null);\n     }\n \n     public void checkNewerVersion() {\n@@ -185,8 +177,7 @@ public class UpdateChecker {\n             Properties props = loadFileToProperties(updateMarker);\n             String today = DATE_FORMATTER.print(new DateTime());\n             props.setProperty(LAST_CHECKED, today);\n-            props.store(new BufferedWriter(new FileWriterWithEncoding(\n-                    updateMarker, Charsets.UTF_8)), null);\n+            props.store(new BufferedWriter(new FileWriterWithEncoding(updateMarker, Charsets.UTF_8)), null);\n         } catch (IOException e) {\n             log.warn(\"failed to load file {}\", updateMarker);\n         }\n@@ -198,23 +189,21 @@ public class UpdateChecker {\n      *\n      * @return latest version of client in sonatype oss\n      */\n+\n     private Optional<String> checkLatestVersion(ConsoleInteractor console) {\n         Response response;\n         try {\n             Client client = ResteasyClientBuilder.newClient();\n-            WebTarget target =\n-                    client.target(sonatypeRestUrl)\n-                            .path(\"artifact/maven/resolve\")\n-                            .queryParam(\"g\", \"org.zanata\")\n-                            .queryParam(\"a\", \"client\")\n-                            .queryParam(\"p\", \"pom\")\n-                            .queryParam(\"v\", \"LATEST\")\n-                            .queryParam(\"r\", \"releases\");\n+            WebTarget target = client.target(sonatypeRestUrl).path(\"artifact/maven/resolve\")\n+                                                             .queryParam(\"g\", \"org.zanata\")\n+                                                             .queryParam(\"a\", \"client\")\n+                                                             .queryParam(\"p\", \"pom\")\n+                                                             .queryParam(\"v\", \"LATEST\")\n+                                                             .queryParam(\"r\", \"releases\");\n             response = target.request(MediaType.APPLICATION_XML_TYPE).get();\n             if (response.getStatusInfo() != Response.Status.OK) {\n-                log.debug(\n-                        \"Failed to resolve latest client artifact [status {}]. Ignored\",\n-                        response.getStatus());\n+                log.debug(\"Failed to resolve latest client artifact [status {}]. Ignored\",\n+response.getStatus());\n                 console.printfln(get(\"check.update.failed\"));\n                 return Optional.absent();\n             }\n@@ -224,33 +213,34 @@ public class UpdateChecker {\n             return Optional.absent();\n         }\n         // cheap xml parsing\n-        String payload =\n-                response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n+        String payload = response.readEntity(String.class).replaceAll(\"\\\\n\", \"\");\n         Pattern pattern = Pattern.compile(\"^.+<version>(.+)</version>.+\");\n         Matcher matcher = pattern.matcher(payload);\n-        return matcher.matches() ? Optional.of(matcher.group(1)) :\n-                Optional.absent();\n+        return matcher.matches() ? Optional.of(matcher.group(1)) : Optional.absent();\n     }\n \n     private enum Frequency {\n         weekly, monthly, daily;\n+\n         static Frequency from(String value) {\n             try {\n                 return valueOf(value);\n             } catch (Exception e) {\n-                log.warn(\"unrecognized value [{}]. Fall back to weekly.\", value);\n+                log.warn(\"unrecognized value [{}]. Fall back to weekly.\",\n+value);\n                 return weekly;\n             }\n         }\n+\n         Days days() {\n             switch (this) {\n-                case monthly:\n-                    return Days.days(30);\n-                case daily:\n-                    return Days.ONE;\n-                default:\n-                    return Weeks.ONE.toStandardDays();\n+            case monthly:\n+                return Days.days(30);\n+            case daily:\n+                return Days.ONE;\n+            default:\n+                return Weeks.ONE.toStandardDays();\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/57/UpdateChecker.java\nindex 4e6d350ce3..079183ce04 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_random/57/UpdateChecker.java\n@@ -148,8 +148,7 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+            } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/57/UpdateChecker.java\nindex 4e6d350ce3..3d6bcacfc5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/57/UpdateChecker.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/57/UpdateChecker.java\n@@ -148,8 +148,8 @@ public class UpdateChecker {\n                 new InputStreamReader(new FileInputStream(updateMarker),\n                         Charsets.UTF_8)) {\n             props.load(reader);\n-        }\n-        catch (IOException e) {\n+\n+            } catch (IOException e) {\n             throw new RuntimeException(e);\n         }\n         return props;\n",
            "diff_size": 2
        }
    ]
}