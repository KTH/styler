{
    "error_id": "373",
    "information": {
        "errors": [
            {
                "line": "93",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 225).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                        description = \"Cohort data imported from \" + source;\n                    }\n                    Cohort cohort = catalogManager.getCohortManager().create(studyConfiguration.getName(), cohortName, Enums.CohortType.COLLECTION, description, newSampleList, null, Collections.emptyMap(), sessionId).first();\n                    newCohortIds.put(cohortName, (int) cohort.getUid());\n                    newCohorts.put((int) cohort.getUid(), newSampleList.stream().map(Sample::getUid).map(Long::intValue)\n                            .collect(Collectors.toSet()));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/373/VariantImportOperationManager.java\nindex 17b13df35c..477d4f30db 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/intellij/373/VariantImportOperationManager.java\n@@ -25,127 +25,129 @@ import static org.opencb.opencga.analysis.variant.manager.operations.VariantFile\n \n public class VariantImportOperationManager extends OperationManager {\n \n-    public VariantImportOperationManager(VariantStorageManager variantStorageManager, VariantStorageEngine variantStorageEngine) {\n-        super(variantStorageManager, variantStorageEngine);\n-    }\n-\n-    public void run(String study, URI inputUri, String token) throws Exception {\n+  public VariantImportOperationManager(VariantStorageManager variantStorageManager, VariantStorageEngine variantStorageEngine) {\n+    super(variantStorageManager, variantStorageEngine);\n+  }\n \n-        VariantMetadataImporter variantMetadataImporter;\n-        variantMetadataImporter = new CatalogVariantMetadataImporter(study, inputUri, token);\n+  public void run(String study, URI inputUri, String token) throws Exception {\n \n-        ObjectMap options = variantStorageEngine.getOptions();\n-        VariantMetadata metadata;\n-        try (VariantStorageMetadataManager scm = variantStorageEngine.getMetadataManager()) {\n-            metadata = variantMetadataImporter.importMetaData(inputUri, scm);\n-        }\n+    VariantMetadataImporter variantMetadataImporter;\n+    variantMetadataImporter = new CatalogVariantMetadataImporter(study, inputUri, token);\n \n-        variantStorageEngine.importData(inputUri, metadata, null, options);\n+    ObjectMap options = variantStorageEngine.getOptions();\n+    VariantMetadata metadata;\n+    try (VariantStorageMetadataManager scm = variantStorageEngine.getMetadataManager()) {\n+      metadata = variantMetadataImporter.importMetaData(inputUri, scm);\n     }\n \n-    private final class CatalogVariantMetadataImporter extends VariantMetadataImporter {\n-        private final URI inputUri;\n-        private final String sessionId;\n-        private final String studyStr;\n+    variantStorageEngine.importData(inputUri, metadata, null, options);\n+  }\n+\n+  private final class CatalogVariantMetadataImporter extends VariantMetadataImporter {\n+    private final URI inputUri;\n+    private final String sessionId;\n+    private final String studyStr;\n+\n+    private CatalogVariantMetadataImporter(String studyStr, URI inputUri, String sessionId) {\n+      this.inputUri = inputUri;\n+      this.sessionId = sessionId;\n+      this.studyStr = studyStr;\n+    }\n \n-        private CatalogVariantMetadataImporter(String studyStr, URI inputUri, String sessionId) {\n-            this.inputUri = inputUri;\n-            this.sessionId = sessionId;\n-            this.studyStr = studyStr;\n+    @Override\n+    protected void processStudyConfiguration(StudyConfiguration studyConfiguration) {\n+      studyConfiguration.setStudyName(studyStr);\n+\n+      try {\n+        // Create Samples\n+        Map<String, Integer> samplesMap = new HashMap<>();\n+        Map<Integer, Integer> samplesIdMap = new HashMap<>();\n+        String source = inputUri.resolve(\".\").relativize(inputUri).getPath();\n+        String description = \"Sample data imported from \" + source;\n+        for (Map.Entry<String, Integer> entry : studyConfiguration.getSampleIds().entrySet()) {\n+          Sample sample = catalogManager.getSampleManager().create(studyStr,\n+              new Sample(entry.getKey(), null, description, 1), QueryOptions.empty(), sessionId).first();\n+          samplesMap.put(sample.getId(), (int) sample.getUid());\n+          samplesIdMap.put(entry.getValue(), (int) sample.getUid());\n         }\n \n-        @Override\n-        protected void processStudyConfiguration(StudyConfiguration studyConfiguration) {\n-            studyConfiguration.setStudyName(studyStr);\n-\n-            try {\n-                // Create Samples\n-                Map<String, Integer> samplesMap = new HashMap<>();\n-                Map<Integer, Integer> samplesIdMap = new HashMap<>();\n-                String source = inputUri.resolve(\".\").relativize(inputUri).getPath();\n-                String description = \"Sample data imported from \" + source;\n-                for (Map.Entry<String, Integer> entry : studyConfiguration.getSampleIds().entrySet()) {\n-                    Sample sample = catalogManager.getSampleManager().create(studyStr,\n-                            new Sample(entry.getKey(), null, description, 1), QueryOptions.empty(), sessionId).first();\n-                    samplesMap.put(sample.getId(), (int) sample.getUid());\n-                    samplesIdMap.put(entry.getValue(), (int) sample.getUid());\n-                }\n-\n-                // Create cohorts\n-                Map<String, Integer> newCohortIds = new HashMap<>();\n-                Map<Integer, Set<Integer>> newCohorts = new HashMap<>();\n-\n-                for (Integer cohortId : studyConfiguration.getCalculatedStats()) {\n-                    String cohortName = studyConfiguration.getCohortIds().inverse().get(cohortId);\n-                    Set<Integer> sampleIds = studyConfiguration.getCohorts().get(cohortId);\n-                    List<Sample> newSampleList = new ArrayList<>();\n-                    for (Integer sampleId : sampleIds) {\n-                        if (samplesIdMap.containsKey(sampleId)) {\n-                            newSampleList.add(new Sample().setUid(samplesIdMap.get(sampleId)));\n-                        }\n-                    }\n-\n-                    if (cohortName.equals(StudyEntry.DEFAULT_COHORT)) {\n-                        description = DEFAULT_COHORT_DESCRIPTION;\n-                    } else {\n-                        description = \"Cohort data imported from \" + source;\n-                    }\n-                    Cohort cohort = catalogManager.getCohortManager().create(studyConfiguration.getName(), cohortName, Enums.CohortType.COLLECTION, description, newSampleList, null, Collections.emptyMap(), sessionId).first();\n-                    newCohortIds.put(cohortName, (int) cohort.getUid());\n-                    newCohorts.put((int) cohort.getUid(), newSampleList.stream().map(Sample::getUid).map(Long::intValue)\n-                            .collect(Collectors.toSet()));\n-                    catalogManager.getCohortManager().setStatus(studyStr, cohort.getId(), Cohort.CohortStatus.READY, \"\", sessionId);\n-                }\n-                studyConfiguration.setCohortIds(newCohortIds);\n-                studyConfiguration.setCohorts(newCohorts);\n-                studyConfiguration.setCalculatedStats(newCohorts.keySet());\n-\n-                // Update Sample Ids\n-                studyConfiguration.setSampleIds(samplesMap);\n-                for (Map.Entry<Integer, LinkedHashSet<Integer>> entry : studyConfiguration.getSamplesInFiles().entrySet()) {\n-                    Set<Integer> samples = entry.getValue();\n-                    LinkedHashSet<Integer> remappedSamples = new LinkedHashSet<>(samples.size());\n-                    for (Integer sample : samples) {\n-                        if (samplesIdMap.containsKey(sample)) {\n-                            remappedSamples.add(samplesIdMap.get(sample));\n-                        }\n-                    }\n-                    studyConfiguration.getSamplesInFiles().put(entry.getKey(), remappedSamples);\n-                }\n-\n-                // Create Files\n-                Map<String, Integer> newFileIds = new HashMap<>();\n-                for (Map.Entry<String, Integer> entry : studyConfiguration.getFileIds().entrySet()) {\n-                    String fileName = entry.getKey();\n-                    Integer oldFileId = entry.getValue();\n-\n-                    List<Sample> samples = studyConfiguration.getSamplesInFiles()\n-                            .get(oldFileId)\n-                            .stream()\n-                            .map(integer -> new Sample().setUid(((long) integer)))\n-                            .collect(Collectors.toList());\n-\n-                    File file = new File(fileName, File.Type.FILE, File.Format.VCF, File.Bioformat.VARIANT, fileName,\n-                            null, \"File imported from \" + source, null, 0, 0);\n-                    file.setIndex(new FileIndex(\"\", \"\", new FileIndex.IndexStatus(Status.READY, \"\"), -1, Collections.emptyMap()));\n-                    file.setSamples(samples);\n-\n-                    file = catalogManager.getFileManager().create(studyStr, file, false, null, null, sessionId).first();\n-\n-                    long fileId = file.getUid();\n-                    LinkedHashSet<Integer> samplesInFile = studyConfiguration.getSamplesInFiles().remove(oldFileId);\n-                    studyConfiguration.getSamplesInFiles().put(((int) fileId), samplesInFile);\n-                    newFileIds.put(fileName, (int) fileId);\n-                    if (studyConfiguration.getIndexedFiles().remove(oldFileId)) {\n-                        studyConfiguration.getIndexedFiles().add((int) fileId);\n-                    }\n-                }\n-                studyConfiguration.getFileIds().clear();\n-                studyConfiguration.getFileIds().putAll(newFileIds);\n-            } catch (CatalogException e) {\n-                throw new IllegalArgumentException(e);\n+        // Create cohorts\n+        Map<String, Integer> newCohortIds = new HashMap<>();\n+        Map<Integer, Set<Integer>> newCohorts = new HashMap<>();\n+\n+        for (Integer cohortId : studyConfiguration.getCalculatedStats()) {\n+          String cohortName = studyConfiguration.getCohortIds().inverse().get(cohortId);\n+          Set<Integer> sampleIds = studyConfiguration.getCohorts().get(cohortId);\n+          List<Sample> newSampleList = new ArrayList<>();\n+          for (Integer sampleId : sampleIds) {\n+            if (samplesIdMap.containsKey(sampleId)) {\n+              newSampleList.add(new Sample().setUid(samplesIdMap.get(sampleId)));\n+            }\n+          }\n+\n+          if (cohortName.equals(StudyEntry.DEFAULT_COHORT)) {\n+            description = DEFAULT_COHORT_DESCRIPTION;\n+          } else {\n+            description = \"Cohort data imported from \" + source;\n+          }\n+          Cohort cohort = catalogManager.getCohortManager()\n+              .create(studyConfiguration.getName(), cohortName, Enums.CohortType.COLLECTION, description, newSampleList, null,\n+                  Collections.emptyMap(), sessionId).first();\n+          newCohortIds.put(cohortName, (int) cohort.getUid());\n+          newCohorts.put((int) cohort.getUid(), newSampleList.stream().map(Sample::getUid).map(Long::intValue)\n+              .collect(Collectors.toSet()));\n+          catalogManager.getCohortManager().setStatus(studyStr, cohort.getId(), Cohort.CohortStatus.READY, \"\", sessionId);\n+        }\n+        studyConfiguration.setCohortIds(newCohortIds);\n+        studyConfiguration.setCohorts(newCohorts);\n+        studyConfiguration.setCalculatedStats(newCohorts.keySet());\n+\n+        // Update Sample Ids\n+        studyConfiguration.setSampleIds(samplesMap);\n+        for (Map.Entry<Integer, LinkedHashSet<Integer>> entry : studyConfiguration.getSamplesInFiles().entrySet()) {\n+          Set<Integer> samples = entry.getValue();\n+          LinkedHashSet<Integer> remappedSamples = new LinkedHashSet<>(samples.size());\n+          for (Integer sample : samples) {\n+            if (samplesIdMap.containsKey(sample)) {\n+              remappedSamples.add(samplesIdMap.get(sample));\n             }\n+          }\n+          studyConfiguration.getSamplesInFiles().put(entry.getKey(), remappedSamples);\n+        }\n+\n+        // Create Files\n+        Map<String, Integer> newFileIds = new HashMap<>();\n+        for (Map.Entry<String, Integer> entry : studyConfiguration.getFileIds().entrySet()) {\n+          String fileName = entry.getKey();\n+          Integer oldFileId = entry.getValue();\n+\n+          List<Sample> samples = studyConfiguration.getSamplesInFiles()\n+              .get(oldFileId)\n+              .stream()\n+              .map(integer -> new Sample().setUid(((long) integer)))\n+              .collect(Collectors.toList());\n+\n+          File file = new File(fileName, File.Type.FILE, File.Format.VCF, File.Bioformat.VARIANT, fileName,\n+              null, \"File imported from \" + source, null, 0, 0);\n+          file.setIndex(new FileIndex(\"\", \"\", new FileIndex.IndexStatus(Status.READY, \"\"), -1, Collections.emptyMap()));\n+          file.setSamples(samples);\n+\n+          file = catalogManager.getFileManager().create(studyStr, file, false, null, null, sessionId).first();\n+\n+          long fileId = file.getUid();\n+          LinkedHashSet<Integer> samplesInFile = studyConfiguration.getSamplesInFiles().remove(oldFileId);\n+          studyConfiguration.getSamplesInFiles().put(((int) fileId), samplesInFile);\n+          newFileIds.put(fileName, (int) fileId);\n+          if (studyConfiguration.getIndexedFiles().remove(oldFileId)) {\n+            studyConfiguration.getIndexedFiles().add((int) fileId);\n+          }\n         }\n+        studyConfiguration.getFileIds().clear();\n+        studyConfiguration.getFileIds().putAll(newFileIds);\n+      } catch (CatalogException e) {\n+        throw new IllegalArgumentException(e);\n+      }\n     }\n+  }\n \n }\n",
            "diff_size": 170
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/373/VariantImportOperationManager.java\nindex 17b13df35c..0a76b00472 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/naturalize/373/VariantImportOperationManager.java\n@@ -148,4 +148,4 @@ public class VariantImportOperationManager extends OperationManager {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 278).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "105",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "108",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "118",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "93",
                    "column": "120",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "148",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "159",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "93",
                    "column": "161",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "180",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "93",
                    "column": "182",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "205",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "216",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "93",
                    "column": "224",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_random/373/VariantImportOperationManager.java\nindex 17b13df35c..1d6aacaf1a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/errored/1/373/VariantImportOperationManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/opencb-opencga/styler_random/373/VariantImportOperationManager.java\n@@ -90,8 +90,7 @@ public class VariantImportOperationManager extends OperationManager {\n                     } else {\n                         description = \"Cohort data imported from \" + source;\n                     }\n-                    Cohort cohort = catalogManager.getCohortManager().create(studyConfiguration.getName(), cohortName, Enums.CohortType.COLLECTION, description, newSampleList, null, Collections.emptyMap(), sessionId).first();\n-                    newCohortIds.put(cohortName, (int) cohort.getUid());\n+                    Cohort cohort = catalogManager.getCohortManager().create(studyConfiguration.getName( ),cohortName ,Enums.CohortType.COLLECTION,description ,newSampleList, null ,Collections.emptyMap(),sessionId). first() ; newCohortIds.put(cohortName, (int) cohort.getUid());\n                     newCohorts.put((int) cohort.getUid(), newSampleList.stream().map(Sample::getUid).map(Long::intValue)\n                             .collect(Collectors.toSet()));\n                     catalogManager.getCohortManager().setStatus(studyStr, cohort.getId(), Cohort.CohortStatus.READY, \"\", sessionId);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}