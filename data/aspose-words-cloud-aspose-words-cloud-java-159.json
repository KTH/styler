{
    "error_id": "159",
    "information": {
        "errors": [
            {
                "line": "218",
                "column": "31",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    Shading shading = (Shading)o;\n    return\n        Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n        Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/159/Shading.java\nindex d84a5355c6..66df7cb5dc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/159/Shading.java\n@@ -215,7 +215,7 @@ public class Shading {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Shading shading = (Shading)o;\n+    Shading shading = (Shading) o;\n     return\n         Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n         Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/159/Shading.java\nindex d84a5355c6..8908c545b5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/159/Shading.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,179 +50,183 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Paragraph format shading element.\")\n public class Shading {\n-    /**\n-     * Gets or sets the shading texture.\n-     */\n-    @JsonAdapter(TextureEnum.Adapter.class)\n-    public enum TextureEnum {\n-        TEXTURENONE(\"TextureNone\"),\n-        TEXTURESOLID(\"TextureSolid\"),\n-        TEXTURE5PERCENT(\"Texture5Percent\"),\n-        TEXTURE10PERCENT(\"Texture10Percent\"),\n-        TEXTURE20PERCENT(\"Texture20Percent\"),\n-        TEXTURE25PERCENT(\"Texture25Percent\"),\n-        TEXTURE30PERCENT(\"Texture30Percent\"),\n-        TEXTURE40PERCENT(\"Texture40Percent\"),\n-        TEXTURE50PERCENT(\"Texture50Percent\"),\n-        TEXTURE60PERCENT(\"Texture60Percent\"),\n-        TEXTURE70PERCENT(\"Texture70Percent\"),\n-        TEXTURE75PERCENT(\"Texture75Percent\"),\n-        TEXTURE80PERCENT(\"Texture80Percent\"),\n-        TEXTURE90PERCENT(\"Texture90Percent\"),\n-        TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n-        TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n-        TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n-        TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n-        TEXTUREDARKCROSS(\"TextureDarkCross\"),\n-        TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n-        TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n-        TEXTUREVERTICAL(\"TextureVertical\"),\n-        TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n-        TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n-        TEXTURECROSS(\"TextureCross\"),\n-        TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n-        TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n-        TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n-        TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n-        TEXTURE15PERCENT(\"Texture15Percent\"),\n-        TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n-        TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n-        TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n-        TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n-        TEXTURE35PERCENT(\"Texture35Percent\"),\n-        TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n-        TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n-        TEXTURE45PERCENT(\"Texture45Percent\"),\n-        TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n-        TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n-        TEXTURE55PERCENT(\"Texture55Percent\"),\n-        TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n-        TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n-        TEXTURE65PERCENT(\"Texture65Percent\"),\n-        TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n-        TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n-        TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n-        TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n-        TEXTURE85PERCENT(\"Texture85Percent\"),\n-        TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n-        TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n-        TEXTURE95PERCENT(\"Texture95Percent\"),\n-        TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n-        TEXTURENIL(\"TextureNil\");\n-\n-        private String value;\n-\n-        TextureEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets the shading texture.\n+   */\n+  @JsonAdapter(TextureEnum.Adapter.class)\n+  public enum TextureEnum {\n+    TEXTURENONE(\"TextureNone\"),\n+    TEXTURESOLID(\"TextureSolid\"),\n+    TEXTURE5PERCENT(\"Texture5Percent\"),\n+    TEXTURE10PERCENT(\"Texture10Percent\"),\n+    TEXTURE20PERCENT(\"Texture20Percent\"),\n+    TEXTURE25PERCENT(\"Texture25Percent\"),\n+    TEXTURE30PERCENT(\"Texture30Percent\"),\n+    TEXTURE40PERCENT(\"Texture40Percent\"),\n+    TEXTURE50PERCENT(\"Texture50Percent\"),\n+    TEXTURE60PERCENT(\"Texture60Percent\"),\n+    TEXTURE70PERCENT(\"Texture70Percent\"),\n+    TEXTURE75PERCENT(\"Texture75Percent\"),\n+    TEXTURE80PERCENT(\"Texture80Percent\"),\n+    TEXTURE90PERCENT(\"Texture90Percent\"),\n+    TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n+    TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n+    TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n+    TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n+    TEXTUREDARKCROSS(\"TextureDarkCross\"),\n+    TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n+    TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n+    TEXTUREVERTICAL(\"TextureVertical\"),\n+    TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n+    TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n+    TEXTURECROSS(\"TextureCross\"),\n+    TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n+    TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n+    TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n+    TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n+    TEXTURE15PERCENT(\"Texture15Percent\"),\n+    TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n+    TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n+    TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n+    TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n+    TEXTURE35PERCENT(\"Texture35Percent\"),\n+    TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n+    TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n+    TEXTURE45PERCENT(\"Texture45Percent\"),\n+    TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n+    TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n+    TEXTURE55PERCENT(\"Texture55Percent\"),\n+    TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n+    TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n+    TEXTURE65PERCENT(\"Texture65Percent\"),\n+    TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n+    TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n+    TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n+    TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n+    TEXTURE85PERCENT(\"Texture85Percent\"),\n+    TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n+    TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n+    TEXTURE95PERCENT(\"Texture95Percent\"),\n+    TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n+    TEXTURENIL(\"TextureNil\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    TextureEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static TextureEnum fromValue(String text) {\n-            for (TextureEnum b : TextureEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n \n-        public static class Adapter extends TypeAdapter< TextureEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextureEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextureEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextureEnum.fromValue(String.valueOf(value));\n-            }\n-        }\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n     }\n \n-    @SerializedName(\"BackgroundPatternColor\")\n-    private XmlColor backgroundPatternColor = null;\n+    public static TextureEnum fromValue(String text) {\n+      for (TextureEnum b : TextureEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n+        }\n+      }\n+      return null;\n+    }\n \n-    @SerializedName(\"ForegroundPatternColor\")\n-    private XmlColor foregroundPatternColor = null;\n+    public static class Adapter extends TypeAdapter<TextureEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final TextureEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n \n-    @SerializedName(\"Texture\")\n-    private TextureEnum texture = null;\n-    public Shading backgroundPatternColor(XmlColor backgroundPatternColor) {\n-        this.backgroundPatternColor = backgroundPatternColor;\n-        return this;\n+      @Override\n+      public TextureEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextureEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    /**\n-     * Gets or sets the color that's applied to the background of the Shading object.\n-    * @return backgroundPatternColor\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the color that's applied to the background of the Shading object.\")\n-    public XmlColor getBackgroundPatternColor() {\n-        return backgroundPatternColor;\n-    }\n+  @SerializedName(\"BackgroundPatternColor\")\n+  private XmlColor backgroundPatternColor = null;\n \n-    public void setBackgroundPatternColor(XmlColor backgroundPatternColor) {\n-        this.backgroundPatternColor = backgroundPatternColor;\n-    }\n+  @SerializedName(\"ForegroundPatternColor\")\n+  private XmlColor foregroundPatternColor = null;\n \n-    public Shading foregroundPatternColor(XmlColor foregroundPatternColor) {\n-        this.foregroundPatternColor = foregroundPatternColor;\n-        return this;\n-    }\n+  @SerializedName(\"Texture\")\n+  private TextureEnum texture = null;\n \n-    /**\n-     * Gets or sets the color that's applied to the foreground of the Shading object.\n-    * @return foregroundPatternColor\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the color that's applied to the foreground of the Shading object.\")\n-    public XmlColor getForegroundPatternColor() {\n-        return foregroundPatternColor;\n-    }\n+  public Shading backgroundPatternColor(XmlColor backgroundPatternColor) {\n+    this.backgroundPatternColor = backgroundPatternColor;\n+    return this;\n+  }\n \n-    public void setForegroundPatternColor(XmlColor foregroundPatternColor) {\n-        this.foregroundPatternColor = foregroundPatternColor;\n-    }\n+  /**\n+   * Gets or sets the color that's applied to the background of the Shading object.\n+   *\n+   * @return backgroundPatternColor\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the color that's applied to the background of the Shading object.\")\n+  public XmlColor getBackgroundPatternColor() {\n+    return backgroundPatternColor;\n+  }\n \n-    public Shading texture(TextureEnum texture) {\n-        this.texture = texture;\n-        return this;\n-    }\n+  public void setBackgroundPatternColor(XmlColor backgroundPatternColor) {\n+    this.backgroundPatternColor = backgroundPatternColor;\n+  }\n \n-    /**\n-     * Gets or sets the shading texture.\n-    * @return texture\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the shading texture.\")\n-    public TextureEnum getTexture() {\n-        return texture;\n-    }\n+  public Shading foregroundPatternColor(XmlColor foregroundPatternColor) {\n+    this.foregroundPatternColor = foregroundPatternColor;\n+    return this;\n+  }\n \n-    public void setTexture(TextureEnum texture) {\n-        this.texture = texture;\n-    }\n+  /**\n+   * Gets or sets the color that's applied to the foreground of the Shading object.\n+   *\n+   * @return foregroundPatternColor\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the color that's applied to the foreground of the Shading object.\")\n+  public XmlColor getForegroundPatternColor() {\n+    return foregroundPatternColor;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    Shading shading = (Shading)o;\n+  public void setForegroundPatternColor(XmlColor foregroundPatternColor) {\n+    this.foregroundPatternColor = foregroundPatternColor;\n+  }\n+\n+  public Shading texture(TextureEnum texture) {\n+    this.texture = texture;\n+    return this;\n+  }\n+\n+  /**\n+   * Gets or sets the shading texture.\n+   *\n+   * @return texture\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the shading texture.\")\n+  public TextureEnum getTexture() {\n+    return texture;\n+  }\n+\n+  public void setTexture(TextureEnum texture) {\n+    this.texture = texture;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    Shading shading = (Shading) o;\n     return\n         Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n-        Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n-        Objects.equals(this.texture, shading.texture);\n+            Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n+            Objects.equals(this.texture, shading.texture);\n   }\n \n   @Override\n",
            "diff_size": 203
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "273",
                    "column": "27",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/159/Shading.java\nindex d84a5355c6..c57d585487 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/naturalize/159/Shading.java\n@@ -53,59 +53,112 @@ public class Shading {\n     @JsonAdapter(TextureEnum.Adapter.class)\n     public enum TextureEnum {\n         TEXTURENONE(\"TextureNone\"),\n-        TEXTURESOLID(\"TextureSolid\"),\n-        TEXTURE5PERCENT(\"Texture5Percent\"),\n-        TEXTURE10PERCENT(\"Texture10Percent\"),\n-        TEXTURE20PERCENT(\"Texture20Percent\"),\n-        TEXTURE25PERCENT(\"Texture25Percent\"),\n-        TEXTURE30PERCENT(\"Texture30Percent\"),\n-        TEXTURE40PERCENT(\"Texture40Percent\"),\n-        TEXTURE50PERCENT(\"Texture50Percent\"),\n-        TEXTURE60PERCENT(\"Texture60Percent\"),\n-        TEXTURE70PERCENT(\"Texture70Percent\"),\n-        TEXTURE75PERCENT(\"Texture75Percent\"),\n-        TEXTURE80PERCENT(\"Texture80Percent\"),\n-        TEXTURE90PERCENT(\"Texture90Percent\"),\n-        TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n-        TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n-        TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n-        TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n-        TEXTUREDARKCROSS(\"TextureDarkCross\"),\n-        TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n-        TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n-        TEXTUREVERTICAL(\"TextureVertical\"),\n-        TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n-        TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n-        TEXTURECROSS(\"TextureCross\"),\n-        TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n-        TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n-        TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n-        TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n-        TEXTURE15PERCENT(\"Texture15Percent\"),\n-        TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n-        TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n-        TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n-        TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n-        TEXTURE35PERCENT(\"Texture35Percent\"),\n-        TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n-        TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n-        TEXTURE45PERCENT(\"Texture45Percent\"),\n-        TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n-        TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n-        TEXTURE55PERCENT(\"Texture55Percent\"),\n-        TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n-        TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n-        TEXTURE65PERCENT(\"Texture65Percent\"),\n-        TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n-        TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n-        TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n-        TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n-        TEXTURE85PERCENT(\"Texture85Percent\"),\n-        TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n-        TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n-        TEXTURE95PERCENT(\"Texture95Percent\"),\n-        TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n-        TEXTURENIL(\"TextureNil\");\n+\n+TEXTURESOLID(\"TextureSolid\"),\n+\n+TEXTURE5PERCENT(\"Texture5Percent\"),\n+\n+TEXTURE10PERCENT(\"Texture10Percent\"),\n+\n+TEXTURE20PERCENT(\"Texture20Percent\"),\n+\n+TEXTURE25PERCENT(\"Texture25Percent\"),\n+\n+TEXTURE30PERCENT(\"Texture30Percent\"),\n+\n+TEXTURE40PERCENT(\"Texture40Percent\"),\n+\n+TEXTURE50PERCENT(\"Texture50Percent\"),\n+\n+TEXTURE60PERCENT(\"Texture60Percent\"),\n+\n+TEXTURE70PERCENT(\"Texture70Percent\"),\n+\n+TEXTURE75PERCENT(\"Texture75Percent\"),\n+\n+TEXTURE80PERCENT(\"Texture80Percent\"),\n+\n+TEXTURE90PERCENT(\"Texture90Percent\"),\n+\n+TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n+\n+TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n+\n+TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n+\n+TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n+\n+TEXTUREDARKCROSS(\"TextureDarkCross\"),\n+\n+TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n+\n+TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n+\n+TEXTUREVERTICAL(\"TextureVertical\"),\n+\n+TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n+\n+TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n+\n+TEXTURECROSS(\"TextureCross\"),\n+\n+TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n+\n+TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n+\n+TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n+\n+TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n+\n+TEXTURE15PERCENT(\"Texture15Percent\"),\n+\n+TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n+\n+TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n+\n+TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n+\n+TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n+\n+TEXTURE35PERCENT(\"Texture35Percent\"),\n+\n+TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n+\n+TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n+\n+TEXTURE45PERCENT(\"Texture45Percent\"),\n+\n+TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n+\n+TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n+\n+TEXTURE55PERCENT(\"Texture55Percent\"),\n+\n+TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n+\n+TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n+\n+TEXTURE65PERCENT(\"Texture65Percent\"),\n+\n+TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n+\n+TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n+\n+TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n+\n+TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n+\n+TEXTURE85PERCENT(\"Texture85Percent\"),\n+\n+TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n+\n+TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n+\n+TEXTURE95PERCENT(\"Texture95Percent\"),\n+\n+TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n+\n+TEXTURENIL(\"TextureNil\");\n \n         private String value;\n \n@@ -131,7 +184,7 @@ public class Shading {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< TextureEnum > {\n+        public static class Adapter extends TypeAdapter<TextureEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final TextureEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -153,7 +206,8 @@ public class Shading {\n \n     @SerializedName(\"Texture\")\n     private TextureEnum texture = null;\n-    public Shading backgroundPatternColor(XmlColor backgroundPatternColor) {\n+\n+public Shading backgroundPatternColor(XmlColor backgroundPatternColor) {\n         this.backgroundPatternColor = backgroundPatternColor;\n         return this;\n     }\n@@ -211,13 +265,13 @@ public class Shading {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Shading shading = (Shading)o;\n-    return\n-        Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n+\n+Shading shading = (Shading)o;\n+    return Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n         Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n         Objects.equals(this.texture, shading.texture);\n   }\n@@ -248,4 +302,4 @@ public class Shading {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 114
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/159/Shading.java\nindex d84a5355c6..f18d839b1b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/159/Shading.java\n@@ -45,105 +45,163 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Paragraph format shading element.\n  */\n+\n+\n @ApiModel(description = \"Paragraph format shading element.\")\n+\n public class Shading {\n     /**\n      * Gets or sets the shading texture.\n      */\n     @JsonAdapter(TextureEnum.Adapter.class)\n     public enum TextureEnum {\n-        TEXTURENONE(\"TextureNone\"),\n-        TEXTURESOLID(\"TextureSolid\"),\n-        TEXTURE5PERCENT(\"Texture5Percent\"),\n-        TEXTURE10PERCENT(\"Texture10Percent\"),\n-        TEXTURE20PERCENT(\"Texture20Percent\"),\n-        TEXTURE25PERCENT(\"Texture25Percent\"),\n-        TEXTURE30PERCENT(\"Texture30Percent\"),\n-        TEXTURE40PERCENT(\"Texture40Percent\"),\n-        TEXTURE50PERCENT(\"Texture50Percent\"),\n-        TEXTURE60PERCENT(\"Texture60Percent\"),\n-        TEXTURE70PERCENT(\"Texture70Percent\"),\n-        TEXTURE75PERCENT(\"Texture75Percent\"),\n-        TEXTURE80PERCENT(\"Texture80Percent\"),\n-        TEXTURE90PERCENT(\"Texture90Percent\"),\n-        TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n-        TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n-        TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n-        TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n-        TEXTUREDARKCROSS(\"TextureDarkCross\"),\n-        TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n-        TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n-        TEXTUREVERTICAL(\"TextureVertical\"),\n-        TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n-        TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n-        TEXTURECROSS(\"TextureCross\"),\n-        TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n-        TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n-        TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n-        TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n-        TEXTURE15PERCENT(\"Texture15Percent\"),\n-        TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n-        TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n-        TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n-        TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n-        TEXTURE35PERCENT(\"Texture35Percent\"),\n-        TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n-        TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n-        TEXTURE45PERCENT(\"Texture45Percent\"),\n-        TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n-        TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n-        TEXTURE55PERCENT(\"Texture55Percent\"),\n-        TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n-        TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n-        TEXTURE65PERCENT(\"Texture65Percent\"),\n-        TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n-        TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n-        TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n-        TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n-        TEXTURE85PERCENT(\"Texture85Percent\"),\n-        TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n-        TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n-        TEXTURE95PERCENT(\"Texture95Percent\"),\n-        TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n-        TEXTURENIL(\"TextureNil\");\n-\n-        private String value;\n-\n-        TextureEnum(String value) {\n-            this.value = value;\n-        }\n+    TEXTURENONE(\"TextureNone\"),\n+\n+    TEXTURESOLID(\"TextureSolid\"),\n+\n+    TEXTURE5PERCENT(\"Texture5Percent\"),\n+\n+    TEXTURE10PERCENT(\"Texture10Percent\"),\n+\n+    TEXTURE20PERCENT(\"Texture20Percent\"),\n+\n+    TEXTURE25PERCENT(\"Texture25Percent\"),\n+\n+    TEXTURE30PERCENT(\"Texture30Percent\"),\n+\n+    TEXTURE40PERCENT(\"Texture40Percent\"),\n+\n+    TEXTURE50PERCENT(\"Texture50Percent\"),\n+\n+    TEXTURE60PERCENT(\"Texture60Percent\"),\n+\n+    TEXTURE70PERCENT(\"Texture70Percent\"),\n+\n+    TEXTURE75PERCENT(\"Texture75Percent\"),\n+\n+    TEXTURE80PERCENT(\"Texture80Percent\"),\n+\n+    TEXTURE90PERCENT(\"Texture90Percent\"),\n+\n+    TEXTUREDARKHORIZONTAL(\"TextureDarkHorizontal\"),\n+\n+    TEXTUREDARKVERTICAL(\"TextureDarkVertical\"),\n+\n+    TEXTUREDARKDIAGONALDOWN(\"TextureDarkDiagonalDown\"),\n+\n+    TEXTUREDARKDIAGONALUP(\"TextureDarkDiagonalUp\"),\n+\n+    TEXTUREDARKCROSS(\"TextureDarkCross\"),\n+\n+    TEXTUREDARKDIAGONALCROSS(\"TextureDarkDiagonalCross\"),\n+\n+    TEXTUREHORIZONTAL(\"TextureHorizontal\"),\n+\n+    TEXTUREVERTICAL(\"TextureVertical\"),\n+\n+    TEXTUREDIAGONALDOWN(\"TextureDiagonalDown\"),\n+\n+    TEXTUREDIAGONALUP(\"TextureDiagonalUp\"),\n+\n+    TEXTURECROSS(\"TextureCross\"),\n+\n+    TEXTUREDIAGONALCROSS(\"TextureDiagonalCross\"),\n+\n+    TEXTURE2PT5PERCENT(\"Texture2Pt5Percent\"),\n+\n+    TEXTURE7PT5PERCENT(\"Texture7Pt5Percent\"),\n+\n+    TEXTURE12PT5PERCENT(\"Texture12Pt5Percent\"),\n+\n+    TEXTURE15PERCENT(\"Texture15Percent\"),\n+\n+    TEXTURE17PT5PERCENT(\"Texture17Pt5Percent\"),\n+\n+    TEXTURE22PT5PERCENT(\"Texture22Pt5Percent\"),\n+\n+    TEXTURE27PT5PERCENT(\"Texture27Pt5Percent\"),\n+\n+    TEXTURE32PT5PERCENT(\"Texture32Pt5Percent\"),\n+\n+    TEXTURE35PERCENT(\"Texture35Percent\"),\n+\n+    TEXTURE37PT5PERCENT(\"Texture37Pt5Percent\"),\n+\n+    TEXTURE42PT5PERCENT(\"Texture42Pt5Percent\"),\n+\n+    TEXTURE45PERCENT(\"Texture45Percent\"),\n+\n+    TEXTURE47PT5PERCENT(\"Texture47Pt5Percent\"),\n+\n+    TEXTURE52PT5PERCENT(\"Texture52Pt5Percent\"),\n+\n+    TEXTURE55PERCENT(\"Texture55Percent\"),\n+\n+    TEXTURE57PT5PERCENT(\"Texture57Pt5Percent\"),\n+\n+    TEXTURE62PT5PERCENT(\"Texture62Pt5Percent\"),\n+\n+    TEXTURE65PERCENT(\"Texture65Percent\"),\n+\n+    TEXTURE67PT5PERCENT(\"Texture67Pt5Percent\"),\n+\n+    TEXTURE72PT5PERCENT(\"Texture72Pt5Percent\"),\n+\n+    TEXTURE77PT5PERCENT(\"Texture77Pt5Percent\"),\n \n-        public String getValue() {\n-            return value;\n+    TEXTURE82PT5PERCENT(\"Texture82Pt5Percent\"),\n+\n+    TEXTURE85PERCENT(\"Texture85Percent\"),\n+\n+    TEXTURE87PT5PERCENT(\"Texture87Pt5Percent\"),\n+\n+    TEXTURE92PT5PERCENT(\"Texture92Pt5Percent\"),\n+\n+    TEXTURE95PERCENT(\"Texture95Percent\"),\n+\n+    TEXTURE97PT5PERCENT(\"Texture97Pt5Percent\"),\n+\n+    TEXTURENIL(\"TextureNil\");\n+\n+    private String value;\n+\n+    TextureEnum(String value) {\n+        this.value = value;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                return String.valueOf(value);\n+    }\n+\n+    public static TextureEnum fromValue(String text) {\n+        for (TextureEnum b : TextureEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                       return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<TextureEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final TextureEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static TextureEnum fromValue(String text) {\n-            for (TextureEnum b : TextureEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< TextureEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final TextureEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public TextureEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return TextureEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public TextureEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return TextureEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"BackgroundPatternColor\")\n     private XmlColor backgroundPatternColor = null;\n@@ -153,82 +211,99 @@ public class Shading {\n \n     @SerializedName(\"Texture\")\n     private TextureEnum texture = null;\n+\n     public Shading backgroundPatternColor(XmlColor backgroundPatternColor) {\n-        this.backgroundPatternColor = backgroundPatternColor;\n-        return this;\n+    this.backgroundPatternColor = backgroundPatternColor;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the color that's applied to the background of the Shading object.\n     * @return backgroundPatternColor\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the color that's applied to the background of the Shading object.\")\n     public XmlColor getBackgroundPatternColor() {\n-        return backgroundPatternColor;\n+    return backgroundPatternColor;\n     }\n \n+\n     public void setBackgroundPatternColor(XmlColor backgroundPatternColor) {\n-        this.backgroundPatternColor = backgroundPatternColor;\n+    this.backgroundPatternColor = backgroundPatternColor;\n     }\n \n+\n     public Shading foregroundPatternColor(XmlColor foregroundPatternColor) {\n-        this.foregroundPatternColor = foregroundPatternColor;\n-        return this;\n+    this.foregroundPatternColor = foregroundPatternColor;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the color that's applied to the foreground of the Shading object.\n     * @return foregroundPatternColor\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the color that's applied to the foreground of the Shading object.\")\n     public XmlColor getForegroundPatternColor() {\n-        return foregroundPatternColor;\n+    return foregroundPatternColor;\n     }\n \n+\n     public void setForegroundPatternColor(XmlColor foregroundPatternColor) {\n-        this.foregroundPatternColor = foregroundPatternColor;\n+    this.foregroundPatternColor = foregroundPatternColor;\n     }\n \n+\n     public Shading texture(TextureEnum texture) {\n-        this.texture = texture;\n-        return this;\n+    this.texture = texture;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the shading texture.\n     * @return texture\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the shading texture.\")\n     public TextureEnum getTexture() {\n-        return texture;\n+    return texture;\n     }\n \n+\n     public void setTexture(TextureEnum texture) {\n-        this.texture = texture;\n+    this.texture = texture;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    Shading shading = (Shading)o;\n-    return\n-        Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n-        Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n-        Objects.equals(this.texture, shading.texture);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n+\n+        Shading shading = (Shading) o;\n+        return Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n+            Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n+            Objects.equals(this.texture, shading.texture);\n+    }\n+\n+\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(backgroundPatternColor, foregroundPatternColor, texture);\n-  }\n+    }\n+\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class Shading {\\n\");\n     sb.append(\"    backgroundPatternColor: \").append(toIndentedString(backgroundPatternColor)).append(\"\\n\");\n@@ -236,16 +311,19 @@ public class Shading {\n     sb.append(\"    texture: \").append(toIndentedString(texture)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 207
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/159/Shading.java\nindex d84a5355c6..66df7cb5dc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/159/Shading.java\n@@ -215,7 +215,7 @@ public class Shading {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Shading shading = (Shading)o;\n+    Shading shading = (Shading) o;\n     return\n         Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n         Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/159/Shading.java\nindex d84a5355c6..3b4dabd544 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/159/Shading.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/159/Shading.java\n@@ -215,7 +215,8 @@ public class Shading {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    Shading shading = (Shading)o;\n+    Shading shading = (Shading\n+) o;\n     return\n         Objects.equals(this.backgroundPatternColor, shading.backgroundPatternColor) &&\n         Objects.equals(this.foregroundPatternColor, shading.foregroundPatternColor) &&\n",
            "diff_size": 2
        }
    ]
}