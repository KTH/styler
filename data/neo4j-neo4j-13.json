{
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "164",
                "column": "52",
                "severity": "error",
                "message": "'{' at column 52 should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public static long sizeOfLongArray( int size ) { return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size ); }\n\n    public static long sizeOfObjectArray( long elementSize, int size )\n    {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "164",
                    "column": "52",
                    "severity": "error",
                    "message": "'{' at column 52 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "84",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "334",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "337",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "343",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "346",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "349",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "352",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "355",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "361",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "364",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "367",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "372",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "386",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "434",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "487",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/intellij/13/HeapEstimator.java\nindex d6432b2ee8..d09524aa45 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/intellij/13/HeapEstimator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.memory;\n \n import java.lang.reflect.Array;\n@@ -76,19 +77,20 @@ public final class HeapEstimator\n     /**\n      * Sizes of primitive classes.\n      */\n-    private static final Map<Class<?>,Integer> PRIMITIVE_SIZES;\n+    private static final Map<Class<?>, Integer> PRIMITIVE_SIZES;\n+\n     static\n     {\n-        Map<Class<?>,Integer> primitiveSizesMap = new IdentityHashMap<>( 8 );\n-        primitiveSizesMap.put( boolean.class, 1 );\n-        primitiveSizesMap.put( byte.class, 1 );\n-        primitiveSizesMap.put( char.class, Character.BYTES );\n-        primitiveSizesMap.put( short.class, Short.BYTES );\n-        primitiveSizesMap.put( int.class, Integer.BYTES );\n-        primitiveSizesMap.put( float.class, Float.BYTES );\n-        primitiveSizesMap.put( double.class, Double.BYTES );\n-        primitiveSizesMap.put( long.class, Long.BYTES );\n-        PRIMITIVE_SIZES = Collections.unmodifiableMap( primitiveSizesMap );\n+        Map<Class<?>, Integer> primitiveSizesMap = new IdentityHashMap<>(8);\n+        primitiveSizesMap.put(boolean.class, 1);\n+        primitiveSizesMap.put(byte.class, 1);\n+        primitiveSizesMap.put(char.class, Character.BYTES);\n+        primitiveSizesMap.put(short.class, Short.BYTES);\n+        primitiveSizesMap.put(int.class, Integer.BYTES);\n+        primitiveSizesMap.put(float.class, Float.BYTES);\n+        primitiveSizesMap.put(double.class, Double.BYTES);\n+        primitiveSizesMap.put(long.class, Long.BYTES);\n+        PRIMITIVE_SIZES = Collections.unmodifiableMap(primitiveSizesMap);\n     }\n \n     private static final int LONG_SIZE;\n@@ -96,14 +98,13 @@ public final class HeapEstimator\n \n     static\n     {\n-        if ( is64Bit() )\n+        if (is64Bit())\n         {\n             OBJECT_ALIGNMENT_BYTES = RuntimeInternals.OBJECT_ALIGNMENT;\n             OBJECT_REFERENCE_BYTES = RuntimeInternals.COMPRESSED_OOPS ? 4 : 8;\n             OBJECT_HEADER_BYTES = RuntimeInternals.HEADER_SIZE;\n-            ARRAY_HEADER_BYTES = (int) alignObjectSize( OBJECT_HEADER_BYTES + Integer.BYTES );\n-        }\n-        else\n+            ARRAY_HEADER_BYTES = (int) alignObjectSize(OBJECT_HEADER_BYTES + Integer.BYTES);\n+        } else\n         {\n             // Values are fixed for 32 bit JVM\n             OBJECT_ALIGNMENT_BYTES = 8;\n@@ -112,34 +113,34 @@ public final class HeapEstimator\n             ARRAY_HEADER_BYTES = OBJECT_HEADER_BYTES + Integer.BYTES;\n         }\n \n-        LONG_SIZE = (int) shallowSizeOfInstance( Long.class );\n-        STRING_SIZE = (int) shallowSizeOfInstance( String.class );\n+        LONG_SIZE = (int) shallowSizeOfInstance(Long.class);\n+        STRING_SIZE = (int) shallowSizeOfInstance(String.class);\n \n-        if ( RuntimeInternals.DEBUG_ESTIMATIONS )\n+        if (RuntimeInternals.DEBUG_ESTIMATIONS)\n         {\n-            System.err.println( String.format( \"### %s static values: ###%n\" +\n-                            \"  NUM_BYTES_OBJECT_ALIGNMENT=%d%n\" +\n-                            \"  NUM_BYTES_OBJECT_REF=%d%n\" +\n-                            \"  NUM_BYTES_OBJECT_HEADER=%d%n\" +\n-                            \"  NUM_BYTES_ARRAY_HEADER=%d%n\" +\n-                            \"  LONG_SIZE=%d%n\" +\n-                            \"  STRING_SIZE=%d%n\" +\n-                            \"  STRING_VALUE_ARRAY=%s%n\", HeapEstimator.class.getName(), OBJECT_ALIGNMENT_BYTES, OBJECT_REFERENCE_BYTES, OBJECT_HEADER_BYTES,\n-                                               ARRAY_HEADER_BYTES, LONG_SIZE, STRING_SIZE, STRING_VALUE_ARRAY != null ) );\n+            System.err.println(String.format(\"### %s static values: ###%n\" +\n+                    \"  NUM_BYTES_OBJECT_ALIGNMENT=%d%n\" +\n+                    \"  NUM_BYTES_OBJECT_REF=%d%n\" +\n+                    \"  NUM_BYTES_OBJECT_HEADER=%d%n\" +\n+                    \"  NUM_BYTES_ARRAY_HEADER=%d%n\" +\n+                    \"  LONG_SIZE=%d%n\" +\n+                    \"  STRING_SIZE=%d%n\" +\n+                    \"  STRING_VALUE_ARRAY=%s%n\", HeapEstimator.class.getName(), OBJECT_ALIGNMENT_BYTES, OBJECT_REFERENCE_BYTES, OBJECT_HEADER_BYTES,\n+                ARRAY_HEADER_BYTES, LONG_SIZE, STRING_SIZE, STRING_VALUE_ARRAY != null));\n         }\n \n         // Calculate common used sizes\n-        LOCAL_TIME_SIZE = shallowSizeOfInstance( LocalTime.class );\n-        LOCAL_DATE_SIZE = shallowSizeOfInstance( LocalDate.class );\n-        OFFSET_TIME_SIZE = shallowSizeOfInstance( OffsetTime.class ) + LOCAL_TIME_SIZE; // We ignore ZoneOffset since it's cached\n-        LOCAL_DATE_TIME_SIZE = shallowSizeOfInstance( LocalDateTime.class ) + LOCAL_DATE_SIZE + LOCAL_TIME_SIZE;\n-        ZONED_DATE_TIME_SIZE = shallowSizeOfInstance( ZonedDateTime.class ) + LOCAL_DATE_TIME_SIZE; // We ignore ZoneOffset since it's cached\n+        LOCAL_TIME_SIZE = shallowSizeOfInstance(LocalTime.class);\n+        LOCAL_DATE_SIZE = shallowSizeOfInstance(LocalDate.class);\n+        OFFSET_TIME_SIZE = shallowSizeOfInstance(OffsetTime.class) + LOCAL_TIME_SIZE; // We ignore ZoneOffset since it's cached\n+        LOCAL_DATE_TIME_SIZE = shallowSizeOfInstance(LocalDateTime.class) + LOCAL_DATE_SIZE + LOCAL_TIME_SIZE;\n+        ZONED_DATE_TIME_SIZE = shallowSizeOfInstance(ZonedDateTime.class) + LOCAL_DATE_TIME_SIZE; // We ignore ZoneOffset since it's cached\n     }\n \n     /**\n      * Aligns an object size to be the next multiple of {@link #OBJECT_ALIGNMENT_BYTES}.\n      */\n-    public static long alignObjectSize( long size )\n+    public static long alignObjectSize(long size)\n     {\n         return (size + OBJECT_ALIGNMENT_BYTES - 1) & -OBJECT_ALIGNMENT_BYTES;\n     }\n@@ -147,104 +148,107 @@ public final class HeapEstimator\n     /**\n      * Return the size of the provided {@link Long} object, returning 0 if it is cached by the JVM and its shallow size otherwise.\n      */\n-    public static long sizeOf( Long value )\n+    public static long sizeOf(Long value)\n     {\n-        if ( value >= RuntimeInternals.LONG_CACHE_MIN_VALUE && value <= RuntimeInternals.LONG_CACHE_MAX_VALUE )\n+        if (value >= RuntimeInternals.LONG_CACHE_MIN_VALUE && value <= RuntimeInternals.LONG_CACHE_MAX_VALUE)\n         {\n             return 0;\n         }\n         return LONG_SIZE;\n     }\n \n-    public static long shallowSizeOfObjectArray( int size )\n+    public static long shallowSizeOfObjectArray(int size)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * size );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * size);\n     }\n \n-    public static long sizeOfLongArray( int size ) { return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size ); }\n+    public static long sizeOfLongArray(int size)\n+    {\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size);\n+    }\n \n-    public static long sizeOfObjectArray( long elementSize, int size )\n+    public static long sizeOfObjectArray(long elementSize, int size)\n     {\n-        return shallowSizeOfObjectArray( size ) + elementSize * size;\n+        return shallowSizeOfObjectArray(size) + elementSize * size;\n     }\n \n     /**\n      * Returns the size in bytes of the byte[] object.\n      */\n-    public static long sizeOf( byte[] arr )\n+    public static long sizeOf(byte[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the boolean[] object.\n      */\n-    public static long sizeOf( boolean[] arr )\n+    public static long sizeOf(boolean[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the char[] object.\n      */\n-    public static long sizeOf( char[] arr )\n+    public static long sizeOf(char[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Character.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Character.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the short[] object.\n      */\n-    public static long sizeOf( short[] arr )\n+    public static long sizeOf(short[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Short.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Short.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the int[] object.\n      */\n-    public static long sizeOf( int[] arr )\n+    public static long sizeOf(int[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Integer.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Integer.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the float[] object.\n      */\n-    public static long sizeOf( float[] arr )\n+    public static long sizeOf(float[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Float.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Float.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the long[] object.\n      */\n-    public static long sizeOf( long[] arr )\n+    public static long sizeOf(long[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Long.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Long.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the double[] object.\n      */\n-    public static long sizeOf( double[] arr )\n+    public static long sizeOf(double[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Double.BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) Double.BYTES * arr.length);\n     }\n \n     /**\n      * Returns the size in bytes of the String[] object.\n      */\n-    public static long sizeOf( String[] arr )\n+    public static long sizeOf(String[] arr)\n     {\n-        long size = shallowSizeOf( arr );\n-        for ( String s : arr )\n+        long size = shallowSizeOf(arr);\n+        for (String s : arr)\n         {\n-            if ( s == null )\n+            if (s == null)\n             {\n                 continue;\n             }\n-            size += sizeOf( s );\n+            size += sizeOf(s);\n         }\n         return size;\n     }\n@@ -257,14 +261,14 @@ public final class HeapEstimator\n      * @param map to estimate size of\n      * @return the estimated size of the maps internal structure.\n      */\n-    public static long sizeOfHashMap( Map<?,?> map )\n+    public static long sizeOfHashMap(Map<?, ?> map)\n     {\n         final int size = map.size();\n-        final int tableSize = HashMapNode.tableSizeFor( size );\n+        final int tableSize = HashMapNode.tableSizeFor(size);\n \n         return HASH_MAP_SHALLOW_SIZE +\n-                alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * tableSize ) + // backing table\n-                HASH_MAP_NODE_SHALLOW_SIZE * size; // table entries\n+            alignObjectSize((long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * tableSize) + // backing table\n+            HASH_MAP_NODE_SHALLOW_SIZE * size; // table entries\n     }\n \n     /**\n@@ -272,119 +276,105 @@ public final class HeapEstimator\n      */\n     private static final int MAX_DEPTH = 1;\n \n-    private static long sizeOfMap( Map<?,?> map, int depth, long defSize )\n+    private static long sizeOfMap(Map<?, ?> map, int depth, long defSize)\n     {\n-        if ( map == null )\n+        if (map == null)\n         {\n             return 0;\n         }\n-        long size = shallowSizeOf( map );\n-        if ( depth > MAX_DEPTH )\n+        long size = shallowSizeOf(map);\n+        if (depth > MAX_DEPTH)\n         {\n             return size;\n         }\n         long sizeOfEntry = -1;\n-        for ( Map.Entry<?,?> entry : map.entrySet() )\n+        for (Map.Entry<?, ?> entry : map.entrySet())\n         {\n-            if ( sizeOfEntry == -1 )\n+            if (sizeOfEntry == -1)\n             {\n-                sizeOfEntry = shallowSizeOf( entry );\n+                sizeOfEntry = shallowSizeOf(entry);\n             }\n             size += sizeOfEntry;\n-            size += sizeOfObject( entry.getKey(), depth, defSize );\n-            size += sizeOfObject( entry.getValue(), depth, defSize );\n+            size += sizeOfObject(entry.getKey(), depth, defSize);\n+            size += sizeOfObject(entry.getValue(), depth, defSize);\n         }\n-        return alignObjectSize( size );\n+        return alignObjectSize(size);\n     }\n \n-    private static long sizeOfCollection( Collection<?> collection, int depth, long defSize )\n+    private static long sizeOfCollection(Collection<?> collection, int depth, long defSize)\n     {\n-        if ( collection == null )\n+        if (collection == null)\n         {\n             return 0;\n         }\n-        long size = shallowSizeOf( collection );\n-        if ( depth > MAX_DEPTH )\n+        long size = shallowSizeOf(collection);\n+        if (depth > MAX_DEPTH)\n         {\n             return size;\n         }\n         // assume array-backed collection and add per-object references\n         size += ARRAY_HEADER_BYTES + collection.size() * OBJECT_REFERENCE_BYTES;\n-        for ( Object o : collection )\n+        for (Object o : collection)\n         {\n-            size += sizeOfObject( o, depth, defSize );\n+            size += sizeOfObject(o, depth, defSize);\n         }\n-        return alignObjectSize( size );\n+        return alignObjectSize(size);\n     }\n \n-    private static long sizeOfObject( Object o, int depth, long defSize )\n+    private static long sizeOfObject(Object o, int depth, long defSize)\n     {\n-        if ( o == null )\n+        if (o == null)\n         {\n             return 0;\n         }\n         long size;\n-        if ( o instanceof String )\n+        if (o instanceof String)\n         {\n-            size = sizeOf( (String) o );\n-        }\n-        else if ( o instanceof boolean[] )\n+            size = sizeOf((String) o);\n+        } else if (o instanceof boolean[])\n         {\n-            size = sizeOf( (boolean[]) o );\n-        }\n-        else if ( o instanceof byte[] )\n+            size = sizeOf((boolean[]) o);\n+        } else if (o instanceof byte[])\n         {\n-            size = sizeOf( (byte[]) o );\n-        }\n-        else if ( o instanceof char[] )\n+            size = sizeOf((byte[]) o);\n+        } else if (o instanceof char[])\n         {\n-            size = sizeOf( (char[]) o );\n-        }\n-        else if ( o instanceof double[] )\n+            size = sizeOf((char[]) o);\n+        } else if (o instanceof double[])\n         {\n-            size = sizeOf( (double[]) o );\n-        }\n-        else if ( o instanceof float[] )\n+            size = sizeOf((double[]) o);\n+        } else if (o instanceof float[])\n         {\n-            size = sizeOf( (float[]) o );\n-        }\n-        else if ( o instanceof int[] )\n+            size = sizeOf((float[]) o);\n+        } else if (o instanceof int[])\n         {\n-            size = sizeOf( (int[]) o );\n-        }\n-        else if ( o instanceof Long )\n+            size = sizeOf((int[]) o);\n+        } else if (o instanceof Long)\n         {\n-            size = sizeOf( (Long) o );\n-        }\n-        else if ( o instanceof long[] )\n+            size = sizeOf((Long) o);\n+        } else if (o instanceof long[])\n         {\n-            size = sizeOf( (long[]) o );\n-        }\n-        else if ( o instanceof short[] )\n+            size = sizeOf((long[]) o);\n+        } else if (o instanceof short[])\n         {\n-            size = sizeOf( (short[]) o );\n-        }\n-        else if ( o instanceof String[] )\n+            size = sizeOf((short[]) o);\n+        } else if (o instanceof String[])\n         {\n-            size = sizeOf( (String[]) o );\n-        }\n-        else if ( o instanceof Map )\n+            size = sizeOf((String[]) o);\n+        } else if (o instanceof Map)\n         {\n-            size = sizeOfMap( (Map) o, ++depth, defSize );\n-        }\n-        else if ( o instanceof Collection )\n+            size = sizeOfMap((Map) o, ++depth, defSize);\n+        } else if (o instanceof Collection)\n         {\n-            size = sizeOfCollection( (Collection) o, ++depth, defSize );\n-        }\n-        else\n+            size = sizeOfCollection((Collection) o, ++depth, defSize);\n+        } else\n         {\n-            if ( defSize > 0 )\n+            if (defSize > 0)\n             {\n                 size = defSize;\n-            }\n-            else\n+            } else\n             {\n-                size = shallowSizeOf( o );\n+                size = shallowSizeOf(o);\n             }\n         }\n         return size;\n@@ -393,23 +383,23 @@ public final class HeapEstimator\n     /**\n      * Returns the size in bytes of the String object.\n      */\n-    public static long sizeOf( String s )\n+    public static long sizeOf(String s)\n     {\n-        if ( s == null )\n+        if (s == null)\n         {\n             return 0;\n         }\n \n-        long size = STRING_SIZE + ARRAY_HEADER_BYTES + stringBackingArraySize( s );\n-        return alignObjectSize( size );\n+        long size = STRING_SIZE + ARRAY_HEADER_BYTES + stringBackingArraySize(s);\n+        return alignObjectSize(size);\n     }\n \n     /**\n      * Returns the shallow size in bytes of the Object[] object.\n      */\n-    public static long shallowSizeOf( Object[] arr )\n+    public static long shallowSizeOf(Object[] arr)\n     {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * arr.length );\n+        return alignObjectSize((long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * arr.length);\n     }\n \n     /**\n@@ -418,20 +408,19 @@ public final class HeapEstimator\n      * <p>\n      * JVM object alignments are also applied.\n      */\n-    public static long shallowSizeOf( Object obj )\n+    public static long shallowSizeOf(Object obj)\n     {\n-        if ( obj == null )\n+        if (obj == null)\n         {\n             return 0;\n         }\n         final Class<?> clz = obj.getClass();\n-        if ( clz.isArray() )\n+        if (clz.isArray())\n         {\n-            return shallowSizeOfArray( obj );\n-        }\n-        else\n+            return shallowSizeOfArray(obj);\n+        } else\n         {\n-            return shallowSizeOfInstance( clz );\n+            return shallowSizeOfInstance(clz);\n         }\n     }\n \n@@ -442,61 +431,60 @@ public final class HeapEstimator\n      * @throws IllegalArgumentException if {@code clazz} is an array class.\n      * @see #shallowSizeOf(Object)\n      */\n-    public static long shallowSizeOfInstance( Class<?> clazz )\n+    public static long shallowSizeOfInstance(Class<?> clazz)\n     {\n-        if ( clazz.isArray() )\n+        if (clazz.isArray())\n         {\n-            throw new IllegalArgumentException( \"This method does not work with array classes.\" );\n+            throw new IllegalArgumentException(\"This method does not work with array classes.\");\n         }\n-        if ( clazz.isPrimitive() )\n+        if (clazz.isPrimitive())\n         {\n-            return PRIMITIVE_SIZES.get( clazz );\n+            return PRIMITIVE_SIZES.get(clazz);\n         }\n \n         long size = OBJECT_HEADER_BYTES;\n \n         // Walk type hierarchy\n-        for ( ; clazz != null; clazz = clazz.getSuperclass() )\n+        for (; clazz != null; clazz = clazz.getSuperclass())\n         {\n-            for ( Field f : clazz.getDeclaredFields() )\n+            for (Field f : clazz.getDeclaredFields())\n             {\n-                if ( !Modifier.isStatic( f.getModifiers() ) )\n+                if (!Modifier.isStatic(f.getModifiers()))\n                 {\n                     Class<?> type = f.getType();\n-                    int fieldSize = type.isPrimitive() ? PRIMITIVE_SIZES.get( type ) : OBJECT_REFERENCE_BYTES;\n-                    size = max( size, UnsafeUtil.getFieldOffset( f ) + fieldSize );\n+                    int fieldSize = type.isPrimitive() ? PRIMITIVE_SIZES.get(type) : OBJECT_REFERENCE_BYTES;\n+                    size = max(size, UnsafeUtil.getFieldOffset(f) + fieldSize);\n                 }\n             }\n         }\n-        return alignObjectSize( size );\n+        return alignObjectSize(size);\n     }\n \n     /**\n      * Return shallow size of any <code>array</code>.\n      */\n-    private static long shallowSizeOfArray( Object array )\n+    private static long shallowSizeOfArray(Object array)\n     {\n         long size = ARRAY_HEADER_BYTES;\n-        final int len = Array.getLength( array );\n-        if ( len > 0 )\n+        final int len = Array.getLength(array);\n+        if (len > 0)\n         {\n             Class<?> arrayElementClazz = array.getClass().getComponentType();\n-            if ( arrayElementClazz.isPrimitive() )\n+            if (arrayElementClazz.isPrimitive())\n             {\n-                size += (long) len * PRIMITIVE_SIZES.get( arrayElementClazz );\n-            }\n-            else\n+                size += (long) len * PRIMITIVE_SIZES.get(arrayElementClazz);\n+            } else\n             {\n                 size += (long) OBJECT_REFERENCE_BYTES * len;\n             }\n         }\n-        return alignObjectSize( size );\n+        return alignObjectSize(size);\n     }\n \n-    private static final long HASH_MAP_SHALLOW_SIZE = shallowSizeOfInstance( HashMap.class );\n-    private static final long HASH_MAP_NODE_SHALLOW_SIZE = shallowSizeOfInstance( HashMapNode.class );\n+    private static final long HASH_MAP_SHALLOW_SIZE = shallowSizeOfInstance(HashMap.class);\n+    private static final long HASH_MAP_NODE_SHALLOW_SIZE = shallowSizeOfInstance(HashMapNode.class);\n \n-    @SuppressWarnings( \"unused\" )\n+    @SuppressWarnings(\"unused\")\n     private static class HashMapNode\n     {\n         int hash;\n@@ -504,9 +492,9 @@ public final class HeapEstimator\n         Object value;\n         Object next;\n \n-        static int tableSizeFor( int cap )\n+        static int tableSizeFor(int cap)\n         {\n-            int n = -1 >>> Integer.numberOfLeadingZeros( cap - 1 );\n+            int n = -1 >>> Integer.numberOfLeadingZeros(cap - 1);\n             return (n < 0) ? 1 : (n >= (1 << 30)) ? (1 << 30) : n + 1;\n         }\n     }\n",
            "diff_size": 170
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/naturalize/13/HeapEstimator.java\nindex d6432b2ee8..f49ddd9f04 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/naturalize/13/HeapEstimator.java\n@@ -124,9 +124,8 @@ public final class HeapEstimator\n                             \"  NUM_BYTES_ARRAY_HEADER=%d%n\" +\n                             \"  LONG_SIZE=%d%n\" +\n                             \"  STRING_SIZE=%d%n\" +\n-                            \"  STRING_VALUE_ARRAY=%s%n\", HeapEstimator.class.getName(), OBJECT_ALIGNMENT_BYTES, OBJECT_REFERENCE_BYTES, OBJECT_HEADER_BYTES,\n-                                               ARRAY_HEADER_BYTES, LONG_SIZE, STRING_SIZE, STRING_VALUE_ARRAY != null ) );\n-        }\n+                            \"  STRING_VALUE_ARRAY=%s%n\", HeapEstimator.class.getName(), OBJECT_ALIGNMENT_BYTES, OBJECT_REFERENCE_BYTES, OBJECT_HEADER_BYTES, ARRAY_HEADER_BYTES, LONG_SIZE, STRING_SIZE, STRING_VALUE_ARRAY != null ) );\n+    }\n \n         // Calculate common used sizes\n         LOCAL_TIME_SIZE = shallowSizeOfInstance( LocalTime.class );\n@@ -161,7 +160,10 @@ public final class HeapEstimator\n         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * size );\n     }\n \n-    public static long sizeOfLongArray( int size ) { return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size ); }\n+    public static long sizeOfLongArray( int size )\n+{\n+    return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size );\n+    }\n \n     public static long sizeOfObjectArray( long elementSize, int size )\n     {\n@@ -456,7 +458,8 @@ public final class HeapEstimator\n         long size = OBJECT_HEADER_BYTES;\n \n         // Walk type hierarchy\n-        for ( ; clazz != null; clazz = clazz.getSuperclass() )\n+        for ( ; clazz != null;\n+clazz = clazz.getSuperclass() )\n         {\n             for ( Field f : clazz.getDeclaredFields() )\n             {\n@@ -510,4 +513,4 @@ public final class HeapEstimator\n             return (n < 0) ? 1 : (n >= (1 << 30)) ? (1 << 30) : n + 1;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "515",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/styler_random/13/HeapEstimator.java\nindex d6432b2ee8..d6f0473ba6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/errored/1/13/HeapEstimator.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/neo4j-neo4j/styler_random/13/HeapEstimator.java\n@@ -161,95 +161,96 @@ public final class HeapEstimator\n         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * size );\n     }\n \n-    public static long sizeOfLongArray( int size ) { return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size ); }\n+    public static long sizeOfLongArray( int size )\n+    { return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) LONG_SIZE * size ); }\n \n-    public static long sizeOfObjectArray( long elementSize, int size )\n-    {\n-        return shallowSizeOfObjectArray( size ) + elementSize * size;\n-    }\n+     public static long sizeOfObjectArray( long elementSize, int size )\n+     {\n+         return shallowSizeOfObjectArray( size ) + elementSize * size;\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the byte[] object.\n      */\n-    public static long sizeOf( byte[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n-    }\n+     public static long sizeOf( byte[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the boolean[] object.\n      */\n-    public static long sizeOf( boolean[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n-    }\n+     public static long sizeOf( boolean[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the char[] object.\n      */\n-    public static long sizeOf( char[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Character.BYTES * arr.length );\n-    }\n+     public static long sizeOf( char[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Character.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the short[] object.\n      */\n-    public static long sizeOf( short[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Short.BYTES * arr.length );\n-    }\n+     public static long sizeOf( short[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Short.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the int[] object.\n      */\n-    public static long sizeOf( int[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Integer.BYTES * arr.length );\n-    }\n+     public static long sizeOf( int[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Integer.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the float[] object.\n      */\n-    public static long sizeOf( float[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Float.BYTES * arr.length );\n-    }\n+     public static long sizeOf( float[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Float.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the long[] object.\n      */\n-    public static long sizeOf( long[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Long.BYTES * arr.length );\n-    }\n+     public static long sizeOf( long[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Long.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the double[] object.\n      */\n-    public static long sizeOf( double[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Double.BYTES * arr.length );\n-    }\n+     public static long sizeOf( double[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) Double.BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Returns the size in bytes of the String[] object.\n      */\n-    public static long sizeOf( String[] arr )\n-    {\n-        long size = shallowSizeOf( arr );\n-        for ( String s : arr )\n-        {\n-            if ( s == null )\n-            {\n-                continue;\n-            }\n-            size += sizeOf( s );\n-        }\n-        return size;\n-    }\n-\n-    /**\n+     public static long sizeOf( String[] arr )\n+     {\n+         long size = shallowSizeOf( arr );\n+         for ( String s : arr )\n+         {\n+             if ( s == null )\n+             {\n+                 continue;\n+             }\n+             size += sizeOf( s );\n+         }\n+         return size;\n+     }\n+\n+     /**\n      * Returns the estimated size of the provided map (assuming it is a {@link HashMap}).\n      * This only calculates the size of the map structure, the entries are not traversed\n      * and needs to be tracked separately.\n@@ -257,257 +258,258 @@ public final class HeapEstimator\n      * @param map to estimate size of\n      * @return the estimated size of the maps internal structure.\n      */\n-    public static long sizeOfHashMap( Map<?,?> map )\n-    {\n-        final int size = map.size();\n-        final int tableSize = HashMapNode.tableSizeFor( size );\n+     public static long sizeOfHashMap( Map<?,?> map )\n+     {\n+         final int size = map.size();\n+         final int tableSize = HashMapNode.tableSizeFor( size );\n \n-        return HASH_MAP_SHALLOW_SIZE +\n-                alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * tableSize ) + // backing table\n-                HASH_MAP_NODE_SHALLOW_SIZE * size; // table entries\n-    }\n+         return HASH_MAP_SHALLOW_SIZE +\n+                 alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * tableSize ) + // backing table\n+                 HASH_MAP_NODE_SHALLOW_SIZE * size; // table entries\n+     }\n \n-    /**\n+     /**\n      * Recurse only into immediate descendants.\n      */\n-    private static final int MAX_DEPTH = 1;\n-\n-    private static long sizeOfMap( Map<?,?> map, int depth, long defSize )\n-    {\n-        if ( map == null )\n-        {\n-            return 0;\n-        }\n-        long size = shallowSizeOf( map );\n-        if ( depth > MAX_DEPTH )\n-        {\n-            return size;\n-        }\n-        long sizeOfEntry = -1;\n-        for ( Map.Entry<?,?> entry : map.entrySet() )\n-        {\n-            if ( sizeOfEntry == -1 )\n-            {\n-                sizeOfEntry = shallowSizeOf( entry );\n-            }\n-            size += sizeOfEntry;\n-            size += sizeOfObject( entry.getKey(), depth, defSize );\n-            size += sizeOfObject( entry.getValue(), depth, defSize );\n-        }\n-        return alignObjectSize( size );\n-    }\n-\n-    private static long sizeOfCollection( Collection<?> collection, int depth, long defSize )\n-    {\n-        if ( collection == null )\n-        {\n-            return 0;\n-        }\n-        long size = shallowSizeOf( collection );\n-        if ( depth > MAX_DEPTH )\n-        {\n-            return size;\n-        }\n-        // assume array-backed collection and add per-object references\n-        size += ARRAY_HEADER_BYTES + collection.size() * OBJECT_REFERENCE_BYTES;\n-        for ( Object o : collection )\n-        {\n-            size += sizeOfObject( o, depth, defSize );\n-        }\n-        return alignObjectSize( size );\n-    }\n-\n-    private static long sizeOfObject( Object o, int depth, long defSize )\n-    {\n-        if ( o == null )\n-        {\n-            return 0;\n-        }\n-        long size;\n-        if ( o instanceof String )\n-        {\n-            size = sizeOf( (String) o );\n-        }\n-        else if ( o instanceof boolean[] )\n-        {\n-            size = sizeOf( (boolean[]) o );\n-        }\n-        else if ( o instanceof byte[] )\n-        {\n-            size = sizeOf( (byte[]) o );\n-        }\n-        else if ( o instanceof char[] )\n-        {\n-            size = sizeOf( (char[]) o );\n-        }\n-        else if ( o instanceof double[] )\n-        {\n-            size = sizeOf( (double[]) o );\n-        }\n-        else if ( o instanceof float[] )\n-        {\n-            size = sizeOf( (float[]) o );\n-        }\n-        else if ( o instanceof int[] )\n-        {\n-            size = sizeOf( (int[]) o );\n-        }\n-        else if ( o instanceof Long )\n-        {\n-            size = sizeOf( (Long) o );\n-        }\n-        else if ( o instanceof long[] )\n-        {\n-            size = sizeOf( (long[]) o );\n-        }\n-        else if ( o instanceof short[] )\n-        {\n-            size = sizeOf( (short[]) o );\n-        }\n-        else if ( o instanceof String[] )\n-        {\n-            size = sizeOf( (String[]) o );\n-        }\n-        else if ( o instanceof Map )\n-        {\n-            size = sizeOfMap( (Map) o, ++depth, defSize );\n-        }\n-        else if ( o instanceof Collection )\n-        {\n-            size = sizeOfCollection( (Collection) o, ++depth, defSize );\n-        }\n-        else\n-        {\n-            if ( defSize > 0 )\n-            {\n-                size = defSize;\n-            }\n-            else\n-            {\n-                size = shallowSizeOf( o );\n-            }\n-        }\n-        return size;\n-    }\n-\n-    /**\n+     private static final int MAX_DEPTH = 1;\n+\n+     private static long sizeOfMap( Map<?,?> map, int depth, long defSize )\n+     {\n+         if ( map == null )\n+         {\n+             return 0;\n+         }\n+         long size = shallowSizeOf( map );\n+         if ( depth > MAX_DEPTH )\n+         {\n+             return size;\n+         }\n+         long sizeOfEntry = -1;\n+         for ( Map.Entry<?,?> entry : map.entrySet() )\n+         {\n+             if ( sizeOfEntry == -1 )\n+             {\n+                 sizeOfEntry = shallowSizeOf( entry );\n+             }\n+             size += sizeOfEntry;\n+             size += sizeOfObject( entry.getKey(), depth, defSize );\n+             size += sizeOfObject( entry.getValue(), depth, defSize );\n+         }\n+         return alignObjectSize( size );\n+     }\n+\n+     private static long sizeOfCollection( Collection<?> collection, int depth, long defSize )\n+     {\n+         if ( collection == null )\n+         {\n+             return 0;\n+         }\n+         long size = shallowSizeOf( collection );\n+         if ( depth > MAX_DEPTH )\n+         {\n+             return size;\n+         }\n+         // assume array-backed collection and add per-object references\n+         size += ARRAY_HEADER_BYTES + collection.size() * OBJECT_REFERENCE_BYTES;\n+         for ( Object o : collection )\n+         {\n+             size += sizeOfObject( o, depth, defSize );\n+         }\n+         return alignObjectSize( size );\n+     }\n+\n+     private static long sizeOfObject( Object o, int depth, long defSize )\n+     {\n+         if ( o == null )\n+         {\n+             return 0;\n+         }\n+         long size;\n+         if ( o instanceof String )\n+         {\n+             size = sizeOf( (String) o );\n+         }\n+         else if ( o instanceof boolean[] )\n+         {\n+             size = sizeOf( (boolean[]) o );\n+         }\n+         else if ( o instanceof byte[] )\n+         {\n+             size = sizeOf( (byte[]) o );\n+         }\n+         else if ( o instanceof char[] )\n+         {\n+             size = sizeOf( (char[]) o );\n+         }\n+         else if ( o instanceof double[] )\n+         {\n+             size = sizeOf( (double[]) o );\n+         }\n+         else if ( o instanceof float[] )\n+         {\n+             size = sizeOf( (float[]) o );\n+         }\n+         else if ( o instanceof int[] )\n+         {\n+             size = sizeOf( (int[]) o );\n+         }\n+         else if ( o instanceof Long )\n+         {\n+             size = sizeOf( (Long) o );\n+         }\n+         else if ( o instanceof long[] )\n+         {\n+             size = sizeOf( (long[]) o );\n+         }\n+         else if ( o instanceof short[] )\n+         {\n+             size = sizeOf( (short[]) o );\n+         }\n+         else if ( o instanceof String[] )\n+         {\n+             size = sizeOf( (String[]) o );\n+         }\n+         else if ( o instanceof Map )\n+         {\n+             size = sizeOfMap( (Map) o, ++depth, defSize );\n+         }\n+         else if ( o instanceof Collection )\n+         {\n+             size = sizeOfCollection( (Collection) o, ++depth, defSize );\n+         }\n+         else\n+         {\n+             if ( defSize > 0 )\n+             {\n+                 size = defSize;\n+             }\n+             else\n+             {\n+                 size = shallowSizeOf( o );\n+             }\n+         }\n+         return size;\n+     }\n+\n+     /**\n      * Returns the size in bytes of the String object.\n      */\n-    public static long sizeOf( String s )\n-    {\n-        if ( s == null )\n-        {\n-            return 0;\n-        }\n-\n-        long size = STRING_SIZE + ARRAY_HEADER_BYTES + stringBackingArraySize( s );\n-        return alignObjectSize( size );\n-    }\n-\n-    /**\n+     public static long sizeOf( String s )\n+     {\n+         if ( s == null )\n+         {\n+             return 0;\n+         }\n+\n+         long size = STRING_SIZE + ARRAY_HEADER_BYTES + stringBackingArraySize( s );\n+         return alignObjectSize( size );\n+     }\n+\n+     /**\n      * Returns the shallow size in bytes of the Object[] object.\n      */\n-    public static long shallowSizeOf( Object[] arr )\n-    {\n-        return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * arr.length );\n-    }\n+     public static long shallowSizeOf( Object[] arr )\n+     {\n+         return alignObjectSize( (long) ARRAY_HEADER_BYTES + (long) OBJECT_REFERENCE_BYTES * arr.length );\n+     }\n \n-    /**\n+     /**\n      * Estimates a \"shallow\" memory usage of the given object. For arrays, this will be the memory taken by array storage (no subreferences will be followed).\n      * For objects, this will be the memory taken by the fields.\n      * <p>\n      * JVM object alignments are also applied.\n      */\n-    public static long shallowSizeOf( Object obj )\n-    {\n-        if ( obj == null )\n-        {\n-            return 0;\n-        }\n-        final Class<?> clz = obj.getClass();\n-        if ( clz.isArray() )\n-        {\n-            return shallowSizeOfArray( obj );\n-        }\n-        else\n-        {\n-            return shallowSizeOfInstance( clz );\n-        }\n-    }\n-\n-    /**\n+     public static long shallowSizeOf( Object obj )\n+     {\n+         if ( obj == null )\n+         {\n+             return 0;\n+         }\n+         final Class<?> clz = obj.getClass();\n+         if ( clz.isArray() )\n+         {\n+             return shallowSizeOfArray( obj );\n+         }\n+         else\n+         {\n+             return shallowSizeOfInstance( clz );\n+         }\n+     }\n+\n+     /**\n      * Returns the shallow instance size in bytes an instance of the given class would occupy. This works with all conventional classes and primitive types, but\n      * not with arrays (the size then depends on the number of elements and varies from object to object).\n      *\n      * @throws IllegalArgumentException if {@code clazz} is an array class.\n      * @see #shallowSizeOf(Object)\n      */\n-    public static long shallowSizeOfInstance( Class<?> clazz )\n-    {\n-        if ( clazz.isArray() )\n-        {\n-            throw new IllegalArgumentException( \"This method does not work with array classes.\" );\n-        }\n-        if ( clazz.isPrimitive() )\n-        {\n-            return PRIMITIVE_SIZES.get( clazz );\n-        }\n-\n-        long size = OBJECT_HEADER_BYTES;\n-\n-        // Walk type hierarchy\n-        for ( ; clazz != null; clazz = clazz.getSuperclass() )\n-        {\n-            for ( Field f : clazz.getDeclaredFields() )\n-            {\n-                if ( !Modifier.isStatic( f.getModifiers() ) )\n-                {\n-                    Class<?> type = f.getType();\n-                    int fieldSize = type.isPrimitive() ? PRIMITIVE_SIZES.get( type ) : OBJECT_REFERENCE_BYTES;\n-                    size = max( size, UnsafeUtil.getFieldOffset( f ) + fieldSize );\n-                }\n-            }\n-        }\n-        return alignObjectSize( size );\n-    }\n-\n-    /**\n+     public static long shallowSizeOfInstance( Class<?> clazz )\n+     {\n+         if ( clazz.isArray() )\n+         {\n+             throw new IllegalArgumentException( \"This method does not work with array classes.\" );\n+         }\n+         if ( clazz.isPrimitive() )\n+         {\n+             return PRIMITIVE_SIZES.get( clazz );\n+         }\n+\n+         long size = OBJECT_HEADER_BYTES;\n+\n+         // Walk type hierarchy\n+         for ( ; clazz != null; clazz = clazz.getSuperclass() )\n+         {\n+             for ( Field f : clazz.getDeclaredFields() )\n+             {\n+                 if ( !Modifier.isStatic( f.getModifiers() ) )\n+                 {\n+                     Class<?> type = f.getType();\n+                     int fieldSize = type.isPrimitive() ? PRIMITIVE_SIZES.get( type ) : OBJECT_REFERENCE_BYTES;\n+                     size = max( size, UnsafeUtil.getFieldOffset( f ) + fieldSize );\n+                 }\n+             }\n+         }\n+         return alignObjectSize( size );\n+     }\n+\n+     /**\n      * Return shallow size of any <code>array</code>.\n      */\n-    private static long shallowSizeOfArray( Object array )\n-    {\n-        long size = ARRAY_HEADER_BYTES;\n-        final int len = Array.getLength( array );\n-        if ( len > 0 )\n-        {\n-            Class<?> arrayElementClazz = array.getClass().getComponentType();\n-            if ( arrayElementClazz.isPrimitive() )\n-            {\n-                size += (long) len * PRIMITIVE_SIZES.get( arrayElementClazz );\n-            }\n-            else\n-            {\n-                size += (long) OBJECT_REFERENCE_BYTES * len;\n-            }\n-        }\n-        return alignObjectSize( size );\n-    }\n-\n-    private static final long HASH_MAP_SHALLOW_SIZE = shallowSizeOfInstance( HashMap.class );\n-    private static final long HASH_MAP_NODE_SHALLOW_SIZE = shallowSizeOfInstance( HashMapNode.class );\n-\n-    @SuppressWarnings( \"unused\" )\n-    private static class HashMapNode\n-    {\n-        int hash;\n-        Object key;\n-        Object value;\n-        Object next;\n-\n-        static int tableSizeFor( int cap )\n-        {\n-            int n = -1 >>> Integer.numberOfLeadingZeros( cap - 1 );\n-            return (n < 0) ? 1 : (n >= (1 << 30)) ? (1 << 30) : n + 1;\n-        }\n-    }\n-}\n+     private static long shallowSizeOfArray( Object array )\n+     {\n+         long size = ARRAY_HEADER_BYTES;\n+         final int len = Array.getLength( array );\n+         if ( len > 0 )\n+         {\n+             Class<?> arrayElementClazz = array.getClass().getComponentType();\n+             if ( arrayElementClazz.isPrimitive() )\n+             {\n+                 size += (long) len * PRIMITIVE_SIZES.get( arrayElementClazz );\n+             }\n+             else\n+             {\n+                 size += (long) OBJECT_REFERENCE_BYTES * len;\n+             }\n+         }\n+         return alignObjectSize( size );\n+     }\n+\n+     private static final long HASH_MAP_SHALLOW_SIZE = shallowSizeOfInstance( HashMap.class );\n+     private static final long HASH_MAP_NODE_SHALLOW_SIZE = shallowSizeOfInstance( HashMapNode.class );\n+\n+     @SuppressWarnings( \"unused\" )\n+     private static class HashMapNode\n+     {\n+         int hash;\n+         Object key;\n+         Object value;\n+         Object next;\n+\n+         static int tableSizeFor( int cap )\n+         {\n+             int n = -1 >>> Integer.numberOfLeadingZeros( cap - 1 );\n+             return (n < 0) ? 1 : (n >= (1 << 30)) ? (1 << 30) : n + 1;\n+         }\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 295
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "164",
                    "column": "52",
                    "severity": "error",
                    "message": "'{' at column 52 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}