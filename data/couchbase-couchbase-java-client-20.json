{
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "105",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            }\n        } else {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n                \"JsonStringDocument id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "54",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/20/JsonStringTranscoder.java\nindex b15b2846a1..0968e261ff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/intellij/20/JsonStringTranscoder.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -41,7 +42,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n \n     @Override\n     protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                          ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -70,7 +71,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n \n     @Override\n     public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+                                          MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/20/JsonStringTranscoder.java\nindex b15b2846a1..a9afbe913c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/naturalize/20/JsonStringTranscoder.java\n@@ -40,8 +40,7 @@ import com.couchbase.client.java.error.TranscodingException;\n public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -50,8 +49,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n@@ -69,8 +67,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     }\n \n     @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public JsonStringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -78,4 +75,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/20/JsonStringTranscoder.java\nindex b15b2846a1..5480033482 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/codebuff/20/JsonStringTranscoder.java\n@@ -37,11 +37,11 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n+\n+public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -50,10 +50,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n-\n         return newDocument(id, expiry, decoded, cas);\n     }\n \n@@ -69,8 +67,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     }\n \n     @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public JsonStringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -78,4 +75,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 5, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 1, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/20/JsonStringTranscoder.java\nindex b15b2846a1..3506facdc3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/errored/1/20/JsonStringTranscoder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-java-client/styler_random/20/JsonStringTranscoder.java\n@@ -50,32 +50,32 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n-        }\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \"\n+                + \"JsonStringDocument id \" + id + \", could not decode.\");\n+     }\n \n-        return newDocument(id, expiry, decoded, cas);\n-    }\n+     return newDocument(id, expiry, decoded, cas);\n+ }\n \n-    @Override\n-    protected Tuple2<ByteBuf, Integer> doEncode(JsonStringDocument document) throws Exception {\n-        String content = \"\\\"\" + document.content() + \"\\\"\";\n-        return Tuple.create(Unpooled.copiedBuffer(content, CharsetUtil.UTF_8), TranscoderUtils.JSON_COMPAT_FLAGS);\n-    }\n+ @Override\n+ protected Tuple2<ByteBuf, Integer> doEncode(JsonStringDocument document) throws Exception {\n+     String content = \"\\\"\" + document.content() + \"\\\"\";\n+     return Tuple.create(Unpooled.copiedBuffer(content, CharsetUtil.UTF_8), TranscoderUtils.JSON_COMPAT_FLAGS);\n+ }\n \n-    @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas) {\n-        return JsonStringDocument.create(id, expiry, content, cas);\n-    }\n+ @Override\n+ public JsonStringDocument newDocument(String id, int expiry, String content, long cas) {\n+     return JsonStringDocument.create(id, expiry, content, cas);\n+ }\n \n-    @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n-        return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n-    }\n+ @Override\n+ public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n+     MutationToken mutationToken) {\n+     return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n+ }\n \n-    @Override\n-    public Class<JsonStringDocument> documentType() {\n-        return JsonStringDocument.class;\n-    }\n+ @Override\n+ public Class<JsonStringDocument> documentType() {\n+     return JsonStringDocument.class;\n+ }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}