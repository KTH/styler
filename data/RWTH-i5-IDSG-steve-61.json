{
    "error_id": "61",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..861cbd4f0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/61/AbstractWebSocketEndpoint.java\n@@ -53,7 +53,8 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         this.pipeline = pipeline;\n \n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n+    disconnectedCallbackList\n+        .add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..66072486d9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/61/AbstractWebSocketEndpoint.java\n@@ -33,10 +33,14 @@ import java.util.function.Consumer;\n  */\n public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n \n-    @Autowired private ScheduledExecutorService service;\n-    @Autowired private OcppServerRepository ocppServerRepository;\n-    @Autowired private FutureResponseContextStore futureResponseContextStore;\n-    @Autowired private NotificationService notificationService;\n+    @Autowired\n+    private ScheduledExecutorService service;\n+    @Autowired\n+    private OcppServerRepository ocppServerRepository;\n+    @Autowired\n+    private FutureResponseContextStore futureResponseContextStore;\n+    @Autowired\n+    private NotificationService notificationService;\n \n     public static final String CHARGEBOX_ID_KEY = \"CHARGEBOX_ID_KEY\";\n \n@@ -53,7 +57,8 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         this.pipeline = pipeline;\n \n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n+        disconnectedCallbackList\n+            .add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n     }\n \n     @Override\n@@ -104,10 +109,10 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         // Just to keep the connection alive, such that the servers do not close\n         // the connection because of a idle timeout, we ping-pong at fixed intervals.\n         ScheduledFuture pingSchedule = service.scheduleAtFixedRate(\n-                new PingTask(chargeBoxId, session),\n-                WebSocketConfiguration.PING_INTERVAL,\n-                WebSocketConfiguration.PING_INTERVAL,\n-                TimeUnit.MINUTES);\n+            new PingTask(chargeBoxId, session),\n+            WebSocketConfiguration.PING_INTERVAL,\n+            WebSocketConfiguration.PING_INTERVAL,\n+            TimeUnit.MINUTES);\n \n         futureResponseContextStore.addSession(session);\n \n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..2f9ec876e7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/61/AbstractWebSocketEndpoint.java\n@@ -112,8 +112,7 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         futureResponseContextStore.addSession(session);\n \n         int sizeBeforeAdd;\n-\n-        synchronized (sessionContextLock) {\n+synchronized (sessionContextLock) {\n             sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n             sessionContextStore.add(chargeBoxId, session, pingSchedule);\n         }\n@@ -134,8 +133,7 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         futureResponseContextStore.removeSession(session);\n \n         int sizeAfterRemove;\n-\n-        synchronized (sessionContextLock) {\n+synchronized (sessionContextLock) {\n             sessionContextStore.remove(chargeBoxId, session);\n             sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n         }\n@@ -189,4 +187,4 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         return sessionContextStore.getSession(chargeBoxId);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..46d4e2a400 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/61/AbstractWebSocketEndpoint.java\n@@ -17,7 +17,6 @@ import org.springframework.web.socket.TextMessage;\n import org.springframework.web.socket.WebSocketHandler;\n import org.springframework.web.socket.WebSocketMessage;\n import org.springframework.web.socket.WebSocketSession;\n-\n import java.util.ArrayList;\n import java.util.Deque;\n import java.util.List;\n@@ -31,6 +30,8 @@ import java.util.function.Consumer;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 17.03.2015\n  */\n+\n+\n public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n \n     @Autowired private ScheduledExecutorService service;\n@@ -39,19 +40,16 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Autowired private NotificationService notificationService;\n \n     public static final String CHARGEBOX_ID_KEY = \"CHARGEBOX_ID_KEY\";\n-\n     private final SessionContextStoreImpl sessionContextStore = new SessionContextStoreImpl();\n     private final List<Consumer<String>> connectedCallbackList = new ArrayList<>();\n     private final List<Consumer<String>> disconnectedCallbackList = new ArrayList<>();\n     private final Object sessionContextLock = new Object();\n-\n     private IncomingPipeline pipeline;\n \n     public abstract OcppVersion getVersion();\n \n     public void init(IncomingPipeline pipeline) {\n         this.pipeline = pipeline;\n-\n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n         disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n     }\n@@ -60,13 +58,10 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {\n         if (message instanceof TextMessage) {\n             handleTextMessage(session, (TextMessage) message);\n-\n         } else if (message instanceof PongMessage) {\n             handlePongMessage(session);\n-\n         } else if (message instanceof BinaryMessage) {\n             session.close(CloseStatus.NOT_ACCEPTABLE.withReason(\"Binary messages not supported\"));\n-\n         } else {\n             throw new IllegalStateException(\"Unexpected WebSocket message type: \" + message);\n         }\n@@ -86,7 +81,6 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n \n         CommunicationContext context = new CommunicationContext(session, chargeBoxId);\n         context.setIncomingString(incomingString);\n-\n         pipeline.accept(context);\n     }\n \n@@ -98,28 +92,26 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Override\n     public void afterConnectionEstablished(WebSocketSession session) throws Exception {\n         String chargeBoxId = getChargeBoxId(session);\n-\n         WebSocketLogger.connected(chargeBoxId, session);\n \n         // Just to keep the connection alive, such that the servers do not close\n         // the connection because of a idle timeout, we ping-pong at fixed intervals.\n-        ScheduledFuture pingSchedule = service.scheduleAtFixedRate(\n-                new PingTask(chargeBoxId, session),\n-                WebSocketConfiguration.PING_INTERVAL,\n-                WebSocketConfiguration.PING_INTERVAL,\n-                TimeUnit.MINUTES);\n \n+        ScheduledFuture pingSchedule = service.scheduleAtFixedRate(new PingTask(chargeBoxId, session),\n+                                                                   WebSocketConfiguration.PING_INTERVAL,\n+                                                                   WebSocketConfiguration.PING_INTERVAL,\n+                                                                   TimeUnit.MINUTES);\n         futureResponseContextStore.addSession(session);\n \n         int sizeBeforeAdd;\n-\n         synchronized (sessionContextLock) {\n-            sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n-            sessionContextStore.add(chargeBoxId, session, pingSchedule);\n+                                          sizeBeforeAdd = sessionContextStore.getSize(chargeBoxId);\n+                                          sessionContextStore.add(chargeBoxId, session, pingSchedule);\n         }\n \n         // Take into account that there might be multiple connections to a charging station.\n         // Send notification only for the change 0 -> 1.\n+\n         if (sizeBeforeAdd == 0) {\n             connectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n         }\n@@ -128,20 +120,18 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     @Override\n     public void afterConnectionClosed(WebSocketSession session, CloseStatus closeStatus) throws Exception {\n         String chargeBoxId = getChargeBoxId(session);\n-\n         WebSocketLogger.closed(chargeBoxId, session, closeStatus);\n-\n         futureResponseContextStore.removeSession(session);\n \n         int sizeAfterRemove;\n-\n         synchronized (sessionContextLock) {\n-            sessionContextStore.remove(chargeBoxId, session);\n-            sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n+                                          sessionContextStore.remove(chargeBoxId, session);\n+                                          sizeAfterRemove = sessionContextStore.getSize(chargeBoxId);\n         }\n \n         // Take into account that there might be multiple connections to a charging station.\n         // Send notification only for the change 1 -> 0.\n+\n         if (sizeAfterRemove == 0) {\n             disconnectedCallbackList.forEach(consumer -> consumer.accept(chargeBoxId));\n         }\n@@ -188,5 +178,4 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     public WebSocketSession getSession(String chargeBoxId) {\n         return sessionContextStore.getSession(chargeBoxId);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..861cbd4f0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/61/AbstractWebSocketEndpoint.java\n@@ -53,7 +53,8 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n         this.pipeline = pipeline;\n \n         connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n+    disconnectedCallbackList\n+        .add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "column": "159",
                    "severity": "error",
                    "message": "'->' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "55",
                    "column": "159",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/61/AbstractWebSocketEndpoint.java\nindex d8f3a293f5..232f4d8f8b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/61/AbstractWebSocketEndpoint.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/61/AbstractWebSocketEndpoint.java\n@@ -52,8 +52,9 @@ public abstract class AbstractWebSocketEndpoint implements WebSocketHandler {\n     public void init(IncomingPipeline pipeline) {\n         this.pipeline = pipeline;\n \n-        connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId));\n-        disconnectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketDisconnected(chargeBoxId));\n+        connectedCallbackList.add((chargeBoxId) -> notificationService.ocppStationWebSocketConnected(chargeBoxId)); disconnectedCallbackList.add((chargeBoxId)->notificationService.ocppStationWebSocketDisconnected(chargeBoxId)\n+\n+        );\n     }\n \n     @Override\n",
            "diff_size": 3
        }
    ]
}