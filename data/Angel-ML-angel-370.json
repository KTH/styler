{
    "error_id": "370",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 113).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        TVector row = ((GetRowResult) client.get(func)).getRow();\n        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n\n        DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n        deltaV.setMatrixId(client.getMatrixId());",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/370/PSFTestTask.java\nindex 0a2efbe97a..18f054829d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/370/PSFTestTask.java\n@@ -39,29 +39,28 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n \n-        DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+      DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n+      deltaV.setMatrixId(client.getMatrixId());\n+      deltaV.setRowId(0);\n \n-        client.increment(deltaV);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+      client.increment(deltaV);\n+      client.clock().get();\n+      taskContext.incEpoch();\n     }\n+  } catch (Throwable x) {\n+    throw new AngelException(\"run task failed \", x);\n   }\n+}\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n-\n-    return ret;\n+private double sum(DenseDoubleVector row) {\n+  double [] data = row.getValues();\n+  double ret = 0.0;\n+  for(int i = 0; i < data.length; i++) {\n+    ret += data[i];\n   }\n+\n+  return ret;\n+}\n }\n",
            "diff_size": 25
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/370/PSFTestTask.java\nindex 0a2efbe97a..ac09753bf2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/370/PSFTestTask.java\n@@ -15,53 +15,59 @@ import org.apache.commons.logging.LogFactory;\n  * Created by payniexiao on 2017/7/18.\n  */\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n-    super(taskContext);\n-  }\n+    public PSFTestTask(TaskContext taskContext) {\n+        super(taskContext);\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n-    return null;\n-  }\n+    @Override\n+    public Long parse(Long key, Long value) {\n+        return null;\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {\n+    }\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n-      double [] delta = new double[100000000];\n-      for(int i = 0; i < 100000000; i++) {\n-        delta[i] = 1.0;\n-      }\n-      while (taskContext.getEpoch() < 1000) {\n-        taskContext.globalSync(client.getMatrixId());\n-        long startTs = System.currentTimeMillis();\n-        TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+        try {\n+            MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+            Pull func = new Pull(client.getMatrixId(), 0);\n+            double[] delta = new double[100000000];\n+            for (int i = 0; i < 100000000; i++) {\n+                delta[i] = 1.0;\n+            }\n+            while (taskContext.getEpoch() < 1000) {\n+                taskContext.globalSync(client.getMatrixId());\n+                long startTs = System.currentTimeMillis();\n+                TVector row = ((GetRowResult) client.get(func)).getRow();\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" +\n+                        sum((DenseDoubleVector) row));\n \n-        DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+                DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n+                deltaV.setMatrixId(client.getMatrixId());\n+                deltaV.setRowId(0);\n \n-        client.increment(deltaV);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+                client.increment(deltaV);\n+                client.clock().get();\n+                taskContext.incEpoch();\n+            }\n+        } catch (Throwable x) {\n+            throw new AngelException(\"run task failed \", x);\n+        }\n     }\n-  }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+    private double sum(DenseDoubleVector row) {\n+        double[] data = row.getValues();\n+        double ret = 0.0;\n+        for (int i = 0; i < data.length; i++) {\n+            ret += data[i];\n+        }\n \n-    return ret;\n-  }\n+        return ret;\n+    }\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/370/PSFTestTask.java\nindex 0a2efbe97a..ac0531759f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/370/PSFTestTask.java\n@@ -21,26 +21,28 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n     super(taskContext);\n   }\n \n-  @Override public Long parse(Long key, Long value) {\n+  @Override\n+public Long parse(Long key, Long value) {\n     return null;\n   }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+  @Override\n+public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n+  @Override\n+public void run(TaskContext taskContext) throws AngelException {\n+    try {\n       MatrixClient client = taskContext.getMatrix(\"psf_test\");\n       Pull func = new Pull(client.getMatrixId(), 0);\n       double [] delta = new double[100000000];\n-      for(int i = 0; i < 100000000; i++) {\n+      for (int i = 0; i < 100000000; i++) {\n         delta[i] = 1.0;\n       }\n       while (taskContext.getEpoch() < 1000) {\n         taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n \n         DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n         deltaV.setMatrixId(client.getMatrixId());\n@@ -58,10 +60,10 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n   private double sum(DenseDoubleVector row) {\n     double [] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n+    for (int i = 0; i < data.length; i++) {\n       ret += data[i];\n     }\n \n     return ret;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/370/PSFTestTask.java\nindex 0a2efbe97a..55e54963b3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/370/PSFTestTask.java\n@@ -14,54 +14,55 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * Created by payniexiao on 2017/7/18.\n  */\n+\n public class PSFTestTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  public PSFTestTask(TaskContext taskContext) {\n+    public PSFTestTask(TaskContext taskContext) {\n     super(taskContext);\n-  }\n+    }\n \n-  @Override public Long parse(Long key, Long value) {\n+    @Override\n+    public Long parse(Long key, Long value) {\n     return null;\n-  }\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"psf_test\");\n-      Pull func = new Pull(client.getMatrixId(), 0);\n-      double [] delta = new double[100000000];\n-      for(int i = 0; i < 100000000; i++) {\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+    try {\n+        MatrixClient client = taskContext.getMatrix(\"psf_test\");\n+        Pull func = new Pull(client.getMatrixId(), 0);\n+        double[] delta = new double[100000000];\n+        for (int i = 0; i < 100000000; i++) {\n         delta[i] = 1.0;\n-      }\n-      while (taskContext.getEpoch() < 1000) {\n+        }\n+        while (taskContext.getEpoch() < 1000) {\n         taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n-\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector) row));\n         DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n-\n         client.increment(deltaV);\n         client.clock().get();\n         taskContext.incEpoch();\n-      }\n+        }\n     } catch (Throwable x) {\n       throw new AngelException(\"run task failed \", x);\n     }\n-  }\n+    }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n+    private double sum(DenseDoubleVector row) {\n+    double[] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+    for (int i = 0; i < data.length; i++) {\n+        ret += data[i];\n     }\n-\n     return ret;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/370/PSFTestTask.java\nindex 0a2efbe97a..9d849e41e3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/370/PSFTestTask.java\n@@ -40,28 +40,30 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n+          + \" pull use time=\" +\n+            (System.currentTimeMillis()-startTs)\n+          + \", sum=\"+ sum((DenseDoubleVector)row));\n+          DenseDoubleVector deltaV= new DenseDoubleVector(100000000, delta);\n+          deltaV.setMatrixId(client.getMatrixId());\n+          deltaV.setRowId(0);\n \n-        DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n-\n-        client.increment(deltaV);\n-        client.clock().get();\n-        taskContext.incEpoch();\n+          client.increment(deltaV);\n+          client.clock().get();\n+          taskContext.incEpoch();\n+        }\n+      } catch (Throwable x) {\n+        throw new AngelException(\"run task failed \", x);\n       }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n     }\n-  }\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n+    private double sum(DenseDoubleVector row) {\n+      double [] data = row.getValues();\n+      double ret = 0.0;\n+      for(int i = 0; i < data.length; i++) {\n+        ret += data[i];\n+      }\n \n-    return ret;\n+      return ret;\n+    }\n   }\n-}\n+  \n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/370/PSFTestTask.java\nindex 0a2efbe97a..18f054829d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/370/PSFTestTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/370/PSFTestTask.java\n@@ -39,29 +39,28 @@ public class PSFTestTask extends BaseTask<Long, Long, Long> {\n         taskContext.globalSync(client.getMatrixId());\n         long startTs = System.currentTimeMillis();\n         TVector row = ((GetRowResult) client.get(func)).getRow();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((DenseDoubleVector)row));\n \n-        DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+      DenseDoubleVector deltaV = new DenseDoubleVector(100000000, delta);\n+      deltaV.setMatrixId(client.getMatrixId());\n+      deltaV.setRowId(0);\n \n-        client.increment(deltaV);\n-        client.clock().get();\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n+      client.increment(deltaV);\n+      client.clock().get();\n+      taskContext.incEpoch();\n     }\n+  } catch (Throwable x) {\n+    throw new AngelException(\"run task failed \", x);\n   }\n+}\n \n-  private double sum(DenseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n-    }\n-\n-    return ret;\n+private double sum(DenseDoubleVector row) {\n+  double [] data = row.getValues();\n+  double ret = 0.0;\n+  for(int i = 0; i < data.length; i++) {\n+    ret += data[i];\n   }\n+\n+  return ret;\n+}\n }\n",
            "diff_size": 25
        }
    ]
}