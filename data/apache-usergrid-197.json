{
    "error_id": "197",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        getJobListener().setExpected( 3 );\n\n        JobData returned = scheduler.createJob( \n                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n\n        scheduler.refreshIndex();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..949a62ec33 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler/197/SchedulerRuntime3IT.java\n@@ -54,7 +54,7 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n+        JobData returned = scheduler.createJob(\n                 \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n         scheduler.refreshIndex();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..556b0b85a9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/intellij/197/SchedulerRuntime3IT.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.batch.job;\n \n \n@@ -38,57 +39,59 @@ import static org.junit.Assert.assertTrue;\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n \n-    /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n-    @Test\n-    public void failureCausesJobDeath() throws Exception {\n+  /**\n+   * Test the scheduler ramps up correctly when there are more jobs to be read after a pause\n+   */\n+  @Test\n+  public void failureCausesJobDeath() throws Exception {\n \n-        int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n-        long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n+    int failCount = Integer.parseInt(props.getProperty(FAIL_PROP));\n+    long sleepTime = Long.parseLong(props.getProperty(RUNLOOP_PROP));\n \n-        FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n+    FailureJobExecution job = springResource.getBean(\n+        \"failureJobExceuction\", FailureJobExecution.class);\n \n-        int totalAttempts = failCount + 1;\n+    int totalAttempts = failCount + 1;\n \n-        job.setLatch( failCount );\n+    job.setLatch(failCount);\n \n-        getJobListener().setExpected( 3 );\n+    getJobListener().setExpected(3);\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+    JobData returned = scheduler.createJob(\n+        \"failureJobExceuction\", System.currentTimeMillis(), new JobData());\n \n-        scheduler.refreshIndex();\n+    scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n+    final long waitTime = (failCount + 2) * sleepTime + 5000L;\n \n-        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n+    boolean jobInvoked = job.waitForCount(waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue(\"Job invoked max times\", jobInvoked);\n+    assertTrue(\"Job invoked max times\", jobInvoked);\n \n-        boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n+    boolean deadInvoked = job.waitForDead(waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue( \"dead job signaled\", deadInvoked );\n+    assertTrue(\"dead job signaled\", deadInvoked);\n \n-        scheduler.refreshIndex();\n+    scheduler.refreshIndex();\n \n-        // sleep until the job should have failed. We sleep 1 extra cycle just to\n-        // make sure we're not racing the test\n-        boolean waited = getJobListener().blockTilDone(waitTime);\n+    // sleep until the job should have failed. We sleep 1 extra cycle just to\n+    // make sure we're not racing the test\n+    boolean waited = getJobListener().blockTilDone(waitTime);\n \n-        scheduler.refreshIndex();\n+    scheduler.refreshIndex();\n \n-        //we shouldn't trip the latch.  It should fail failCount times, and not run again\n-        assertTrue( \"Jobs ran\", waited );\n-        assertTrue( failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount );\n-        assertTrue( 1 + \" success resulted\", getJobListener().getSuccessCount() == 1 );\n+    //we shouldn't trip the latch.  It should fail failCount times, and not run again\n+    assertTrue(\"Jobs ran\", waited);\n+    assertTrue(failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount);\n+    assertTrue(1 + \" success resulted\", getJobListener().getSuccessCount() == 1);\n \n-        JobStat stat = scheduler.getStatsForJob( returned.getJobName(), returned.getUuid() );\n+    JobStat stat = scheduler.getStatsForJob(returned.getJobName(), returned.getUuid());\n \n-        // we should have only marked this as run fail+1 times\n-        assertEquals( totalAttempts, stat.getTotalAttempts() );\n-        assertEquals( totalAttempts, stat.getRunCount() );\n-        assertEquals( 0, stat.getDelayCount() );\n+    // we should have only marked this as run fail+1 times\n+    assertEquals(totalAttempts, stat.getTotalAttempts());\n+    assertEquals(totalAttempts, stat.getRunCount());\n+    assertEquals(0, stat.getDelayCount());\n \n \n-    }\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..5bc36d4433 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/naturalize/197/SchedulerRuntime3IT.java\n@@ -37,7 +37,6 @@ import static org.junit.Assert.assertTrue;\n @Ignore(\"These tests no longer work with shared spring context. Need to re-evaluate\")\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n-\n     /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n     @Test\n     public void failureCausesJobDeath() throws Exception {\n@@ -45,25 +44,21 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n         long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n \n-        FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n-\n-        int totalAttempts = failCount + 1;\n+        FailureJobExecution job = springResource.getBean( \"failureJobExceuction\", FailureJobExecution.class );\n+int totalAttempts = failCount + 1;\n \n         job.setLatch( failCount );\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n-\n-        scheduler.refreshIndex();\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n+        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L;\n \n         boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue(\"Job invoked max times\", jobInvoked);\n+        assertTrue(\"Job invoked max times\", jobInvoked );\n \n         boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n \n@@ -88,7 +83,5 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         assertEquals( totalAttempts, stat.getTotalAttempts() );\n         assertEquals( totalAttempts, stat.getRunCount() );\n         assertEquals( 0, stat.getDelayCount() );\n-\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..ea64338ffb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/codebuff/197/SchedulerRuntime3IT.java\n@@ -18,11 +18,9 @@ package org.apache.usergrid.batch.job;\n \n \n import java.util.concurrent.TimeUnit;\n-\n import org.apache.usergrid.cassandra.Concurrent;\n import org.apache.usergrid.persistence.entities.JobData;\n import org.apache.usergrid.persistence.entities.JobStat;\n-\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -33,48 +31,37 @@ import static org.junit.Assert.assertTrue;\n /**\n  * Class to test job runtimes\n  */\n+\n+\n @Concurrent\n @Ignore(\"These tests no longer work with shared spring context. Need to re-evaluate\")\n public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n \n     /** Test the scheduler ramps up correctly when there are more jobs to be read after a pause */\n+\n     @Test\n     public void failureCausesJobDeath() throws Exception {\n-\n         int failCount = Integer.parseInt( props.getProperty( FAIL_PROP ) );\n         long sleepTime = Long.parseLong( props.getProperty( RUNLOOP_PROP ) );\n-\n-        FailureJobExecution job = springResource.getBean(\n-                \"failureJobExceuction\", FailureJobExecution.class );\n-\n+        FailureJobExecution job = springResource.getBean( \"failureJobExceuction\", FailureJobExecution.class );\n         int totalAttempts = failCount + 1;\n-\n         job.setLatch( failCount );\n-\n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n-\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n         scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n-\n-        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n-\n-        assertTrue(\"Job invoked max times\", jobInvoked);\n-\n+        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L;\n+        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS );\n+        assertTrue( \"Job invoked max times\", jobInvoked );\n         boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n-\n         assertTrue( \"dead job signaled\", deadInvoked );\n-\n         scheduler.refreshIndex();\n \n         // sleep until the job should have failed. We sleep 1 extra cycle just to\n         // make sure we're not racing the test\n-        boolean waited = getJobListener().blockTilDone(waitTime);\n-\n+        boolean waited = getJobListener().blockTilDone( waitTime );\n         scheduler.refreshIndex();\n \n         //we shouldn't trip the latch.  It should fail failCount times, and not run again\n@@ -88,7 +75,5 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n         assertEquals( totalAttempts, stat.getTotalAttempts() );\n         assertEquals( totalAttempts, stat.getRunCount() );\n         assertEquals( 0, stat.getDelayCount() );\n-\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..f234c429a4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_random/197/SchedulerRuntime3IT.java\n@@ -54,41 +54,40 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n-                \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n+        JobData returned = scheduler.createJob( \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n-        scheduler.refreshIndex();\n+scheduler.refreshIndex();\n \n-        final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n+final long waitTime = ( failCount + 2 ) * sleepTime + 5000L ;\n \n-        boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n+boolean jobInvoked = job.waitForCount( waitTime, TimeUnit.MILLISECONDS);\n \n-        assertTrue(\"Job invoked max times\", jobInvoked);\n+assertTrue(\"Job invoked max times\", jobInvoked);\n \n-        boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n+boolean deadInvoked = job.waitForDead( waitTime, TimeUnit.MILLISECONDS );\n \n-        assertTrue( \"dead job signaled\", deadInvoked );\n+assertTrue( \"dead job signaled\", deadInvoked );\n \n-        scheduler.refreshIndex();\n+scheduler.refreshIndex();\n \n-        // sleep until the job should have failed. We sleep 1 extra cycle just to\n-        // make sure we're not racing the test\n-        boolean waited = getJobListener().blockTilDone(waitTime);\n+// sleep until the job should have failed. We sleep 1 extra cycle just to\n+// make sure we're not racing the test\n+boolean waited = getJobListener().blockTilDone(waitTime);\n \n-        scheduler.refreshIndex();\n+scheduler.refreshIndex();\n \n-        //we shouldn't trip the latch.  It should fail failCount times, and not run again\n-        assertTrue( \"Jobs ran\", waited );\n-        assertTrue( failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount );\n-        assertTrue( 1 + \" success resulted\", getJobListener().getSuccessCount() == 1 );\n+//we shouldn't trip the latch.  It should fail failCount times, and not run again\n+assertTrue( \"Jobs ran\", waited );\n+assertTrue( failCount + \" failures resulted\", getJobListener().getFailureCount() == failCount );\n+assertTrue( 1 + \" success resulted\", getJobListener().getSuccessCount() == 1 );\n \n-        JobStat stat = scheduler.getStatsForJob( returned.getJobName(), returned.getUuid() );\n+JobStat stat = scheduler.getStatsForJob( returned.getJobName(), returned.getUuid() );\n \n-        // we should have only marked this as run fail+1 times\n-        assertEquals( totalAttempts, stat.getTotalAttempts() );\n-        assertEquals( totalAttempts, stat.getRunCount() );\n-        assertEquals( 0, stat.getDelayCount() );\n+// we should have only marked this as run fail+1 times\n+assertEquals( totalAttempts, stat.getTotalAttempts() );\n+assertEquals( totalAttempts, stat.getRunCount() );\n+assertEquals( 0, stat.getDelayCount() );\n \n \n-    }\n+}\n }\n",
            "diff_size": 23
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/197/SchedulerRuntime3IT.java\nindex 4eee2d9b1d..949a62ec33 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/errored/1/197/SchedulerRuntime3IT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-usergrid/styler_three_grams/197/SchedulerRuntime3IT.java\n@@ -54,7 +54,7 @@ public class SchedulerRuntime3IT extends AbstractSchedulerRuntimeIT {\n \n         getJobListener().setExpected( 3 );\n \n-        JobData returned = scheduler.createJob( \n+        JobData returned = scheduler.createJob(\n                 \"failureJobExceuction\", System.currentTimeMillis(), new JobData() );\n \n         scheduler.refreshIndex();\n",
            "diff_size": 1
        }
    ]
}