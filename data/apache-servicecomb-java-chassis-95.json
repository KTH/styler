{
    "error_id": "95",
    "information": {
        "errors": [
            {
                "line": "82",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assert sslContext != null;\n    //register http/https socket factory\n    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n        .build();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/95/TLSHttpsTransport.java\nindex 748e68386c..9d39cd964b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/95/TLSHttpsTransport.java\n@@ -1,140 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package org.apache.servicecomb.service.center.client.http;\r\n-\r\n-import java.io.FileInputStream;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.security.KeyManagementException;\r\n-import java.security.KeyStore;\r\n-import java.security.KeyStoreException;\r\n-import java.security.NoSuchAlgorithmException;\r\n-import java.security.SecureRandom;\r\n-import java.security.UnrecoverableKeyException;\r\n-import java.security.cert.CertificateException;\r\n-\r\n-import javax.net.ssl.KeyManager;\r\n-import javax.net.ssl.KeyManagerFactory;\r\n-import javax.net.ssl.SSLContext;\r\n-import javax.net.ssl.TrustManager;\r\n-import javax.net.ssl.TrustManagerFactory;\r\n-\r\n-import org.apache.http.client.config.RequestConfig;\r\n-import org.apache.http.config.Registry;\r\n-import org.apache.http.config.RegistryBuilder;\r\n-import org.apache.http.conn.socket.ConnectionSocketFactory;\r\n-import org.apache.http.conn.socket.PlainConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\n-import org.apache.http.impl.client.HttpClientBuilder;\r\n-import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\n-import org.apache.http.ssl.SSLContexts;\r\n-\r\n-/**\r\n- * Created by   on 2019/10/31.\r\n- */\r\n-public class TLSHttpsTransport extends HttpTransportImpl {\r\n-\r\n-  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\r\n-\r\n-  private static final int DEFAULT_MAX_PER_ROUTE = 500;\r\n-\r\n-  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\r\n-\r\n-  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\r\n-\r\n-  public TLSHttpsTransport() {\r\n-\r\n-  }\r\n-\r\n-  /**\r\n-   * configure the certificate to httpClient\r\n-   * @param tlsConfig\r\n-   */\r\n-  public TLSHttpsTransport(TLSConfig tlsConfig) {\r\n-\r\n-    // create keyStore and trustStore\r\n-    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\r\n-        tlsConfig.getKeyStoreValue());\r\n-    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\r\n-        tlsConfig.getTrustStoreValue());\r\n-\r\n-    // initialize SSLContext\r\n-    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\r\n-\r\n-    assert sslContext != null;\r\n-    //register http/https socket factory\r\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\r\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\r\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\r\n-        .build();\r\n-\r\n-    //connection pool management\r\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\r\n-        connectionSocketFactoryRegistry);\r\n-    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\r\n-    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\r\n-\r\n-    //request parameter configuration\r\n-    RequestConfig config = RequestConfig.custom().\r\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\r\n-        build();\r\n-\r\n-    // construct httpClient\r\n-    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\r\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\r\n-        setConnectionManager(connectionManager).\r\n-        setDefaultRequestConfig(config);\r\n-\r\n-    this.httpClient = httpClientBuilder.build();\r\n-  }\r\n-\r\n-  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\r\n-    try {\r\n-      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\r\n-      InputStream inputStream = new FileInputStream(keyStorePath);\r\n-      keyStore.load(inputStream, keyStoreValue.toCharArray());\r\n-      return keyStore;\r\n-    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\r\n-    try {\r\n-      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n-      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\r\n-      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n-\r\n-      TrustManagerFactory trustManagerFactory = TrustManagerFactory\r\n-          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n-      trustManagerFactory.init(trustStore);\r\n-      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\r\n-\r\n-      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\r\n-      sslContext.init(keyManagers, trustManagers, new SecureRandom());\r\n-      return sslContext;\r\n-    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.servicecomb.service.center.client.http;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.config.Registry;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.conn.socket.ConnectionSocketFactory;\n+import org.apache.http.conn.socket.PlainConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.ssl.SSLContexts;\n+\n+/**\n+ * Created by   on 2019/10/31.\n+ */\n+public class TLSHttpsTransport extends HttpTransportImpl {\n+\n+  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\n+\n+  private static final int DEFAULT_MAX_PER_ROUTE = 500;\n+\n+  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\n+\n+  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\n+\n+  public TLSHttpsTransport() {\n+\n+  }\n+\n+  /**\n+   * configure the certificate to httpClient\n+   * @param tlsConfig\n+   */\n+  public TLSHttpsTransport(TLSConfig tlsConfig) {\n+\n+    // create keyStore and trustStore\n+    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n+        tlsConfig.getKeyStoreValue());\n+    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n+        tlsConfig.getTrustStoreValue());\n+\n+    // initialize SSLContext\n+    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\n+\n+    assert sslContext != null;\n+    //register http/https socket factory\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n+    .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+        .build();\n+\n+    //connection pool management\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n+        connectionSocketFactoryRegistry);\n+    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n+    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n+\n+    //request parameter configuration\n+    RequestConfig config = RequestConfig.custom().\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n+        build();\n+\n+    // construct httpClient\n+    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n+        setConnectionManager(connectionManager).\n+        setDefaultRequestConfig(config);\n+\n+    this.httpClient = httpClientBuilder.build();\n+  }\n+\n+  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\n+    try {\n+      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n+      InputStream inputStream = new FileInputStream(keyStorePath);\n+      keyStore.load(inputStream, keyStoreValue.toCharArray());\n+      return keyStore;\n+    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+\n+  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\n+    try {\n+      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\n+      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n+\n+      TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      trustManagerFactory.init(trustStore);\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+\n+      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n+      sslContext.init(keyManagers, trustManagers, new SecureRandom());\n+      return sslContext;\n+    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+}\n",
            "diff_size": 140
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/95/TLSHttpsTransport.java\nindex 748e68386c..6b7327a762 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/95/TLSHttpsTransport.java\n@@ -64,6 +64,7 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \r\n   /**\r\n    * configure the certificate to httpClient\r\n+   *\r\n    * @param tlsConfig\r\n    */\r\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\r\n@@ -79,10 +80,11 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \r\n     assert sslContext != null;\r\n     //register http/https socket factory\r\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\r\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\r\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\r\n-        .build();\r\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry =\r\n+        RegistryBuilder.<ConnectionSocketFactory>create()\r\n+            .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\r\n+            .register(\"https\", new SSLConnectionSocketFactory(sslContext))\r\n+            .build();\r\n \r\n     //connection pool management\r\n     PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\r\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/95/TLSHttpsTransport.java\nindex 748e68386c..e03158fe78 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/95/TLSHttpsTransport.java\n@@ -66,9 +66,8 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n    * configure the certificate to httpClient\r\n    * @param tlsConfig\r\n    */\r\n-  public TLSHttpsTransport(TLSConfig tlsConfig) {\r\n-\r\n-    // create keyStore and trustStore\r\n+  public TLSHttpsTransport(TLSConfig tlsConfig) {\n+  // create keyStore and trustStore\r\n     KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\r\n         tlsConfig.getKeyStoreValue());\r\n     KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\r\n@@ -85,23 +84,17 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n         .build();\r\n \r\n     //connection pool management\r\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\r\n-        connectionSocketFactoryRegistry);\r\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(connectionSocketFactoryRegistry);\r\n     connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\r\n     connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\r\n \r\n     //request parameter configuration\r\n     RequestConfig config = RequestConfig.custom().\r\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\r\n-        build();\r\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).build();\r\n \r\n     // construct httpClient\r\n     HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\r\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\r\n-        setConnectionManager(connectionManager).\r\n-        setDefaultRequestConfig(config);\r\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).setConnectionManager(connectionManager).setDefaultRequestConfig(config);\r\n \r\n     this.httpClient = httpClientBuilder.build();\r\n   }\r\n@@ -137,4 +130,4 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n     }\r\n     return null;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/95/TLSHttpsTransport.java\nindex 748e68386c..9d39cd964b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/95/TLSHttpsTransport.java\n@@ -1,140 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package org.apache.servicecomb.service.center.client.http;\r\n-\r\n-import java.io.FileInputStream;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.security.KeyManagementException;\r\n-import java.security.KeyStore;\r\n-import java.security.KeyStoreException;\r\n-import java.security.NoSuchAlgorithmException;\r\n-import java.security.SecureRandom;\r\n-import java.security.UnrecoverableKeyException;\r\n-import java.security.cert.CertificateException;\r\n-\r\n-import javax.net.ssl.KeyManager;\r\n-import javax.net.ssl.KeyManagerFactory;\r\n-import javax.net.ssl.SSLContext;\r\n-import javax.net.ssl.TrustManager;\r\n-import javax.net.ssl.TrustManagerFactory;\r\n-\r\n-import org.apache.http.client.config.RequestConfig;\r\n-import org.apache.http.config.Registry;\r\n-import org.apache.http.config.RegistryBuilder;\r\n-import org.apache.http.conn.socket.ConnectionSocketFactory;\r\n-import org.apache.http.conn.socket.PlainConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\n-import org.apache.http.impl.client.HttpClientBuilder;\r\n-import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\n-import org.apache.http.ssl.SSLContexts;\r\n-\r\n-/**\r\n- * Created by   on 2019/10/31.\r\n- */\r\n-public class TLSHttpsTransport extends HttpTransportImpl {\r\n-\r\n-  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\r\n-\r\n-  private static final int DEFAULT_MAX_PER_ROUTE = 500;\r\n-\r\n-  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\r\n-\r\n-  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\r\n-\r\n-  public TLSHttpsTransport() {\r\n-\r\n-  }\r\n-\r\n-  /**\r\n-   * configure the certificate to httpClient\r\n-   * @param tlsConfig\r\n-   */\r\n-  public TLSHttpsTransport(TLSConfig tlsConfig) {\r\n-\r\n-    // create keyStore and trustStore\r\n-    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\r\n-        tlsConfig.getKeyStoreValue());\r\n-    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\r\n-        tlsConfig.getTrustStoreValue());\r\n-\r\n-    // initialize SSLContext\r\n-    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\r\n-\r\n-    assert sslContext != null;\r\n-    //register http/https socket factory\r\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\r\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\r\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\r\n-        .build();\r\n-\r\n-    //connection pool management\r\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\r\n-        connectionSocketFactoryRegistry);\r\n-    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\r\n-    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\r\n-\r\n-    //request parameter configuration\r\n-    RequestConfig config = RequestConfig.custom().\r\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\r\n-        build();\r\n-\r\n-    // construct httpClient\r\n-    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\r\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\r\n-        setConnectionManager(connectionManager).\r\n-        setDefaultRequestConfig(config);\r\n-\r\n-    this.httpClient = httpClientBuilder.build();\r\n-  }\r\n-\r\n-  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\r\n-    try {\r\n-      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\r\n-      InputStream inputStream = new FileInputStream(keyStorePath);\r\n-      keyStore.load(inputStream, keyStoreValue.toCharArray());\r\n-      return keyStore;\r\n-    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\r\n-    try {\r\n-      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n-      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\r\n-      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n-\r\n-      TrustManagerFactory trustManagerFactory = TrustManagerFactory\r\n-          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n-      trustManagerFactory.init(trustStore);\r\n-      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\r\n-\r\n-      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\r\n-      sslContext.init(keyManagers, trustManagers, new SecureRandom());\r\n-      return sslContext;\r\n-    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.servicecomb.service.center.client.http;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.config.Registry;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.conn.socket.ConnectionSocketFactory;\n+import org.apache.http.conn.socket.PlainConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.ssl.SSLContexts;\n+\n+/**\n+ * Created by   on 2019/10/31.\n+ */\n+public class TLSHttpsTransport extends HttpTransportImpl {\n+\n+  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\n+\n+  private static final int DEFAULT_MAX_PER_ROUTE = 500;\n+\n+  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\n+\n+  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\n+\n+  public TLSHttpsTransport() {\n+\n+  }\n+\n+  /**\n+   * configure the certificate to httpClient\n+   * @param tlsConfig\n+   */\n+  public TLSHttpsTransport(TLSConfig tlsConfig) {\n+\n+    // create keyStore and trustStore\n+    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n+        tlsConfig.getKeyStoreValue());\n+    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n+        tlsConfig.getTrustStoreValue());\n+\n+    // initialize SSLContext\n+    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\n+\n+    assert sslContext != null;\n+    //register http/https socket factory\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n+    .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+        .build();\n+\n+    //connection pool management\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n+        connectionSocketFactoryRegistry);\n+    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n+    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n+\n+    //request parameter configuration\n+    RequestConfig config = RequestConfig.custom().\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n+        build();\n+\n+    // construct httpClient\n+    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n+        setConnectionManager(connectionManager).\n+        setDefaultRequestConfig(config);\n+\n+    this.httpClient = httpClientBuilder.build();\n+  }\n+\n+  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\n+    try {\n+      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n+      InputStream inputStream = new FileInputStream(keyStorePath);\n+      keyStore.load(inputStream, keyStoreValue.toCharArray());\n+      return keyStore;\n+    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+\n+  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\n+    try {\n+      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\n+      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n+\n+      TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      trustManagerFactory.init(trustStore);\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+\n+      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n+      sslContext.init(keyManagers, trustManagers, new SecureRandom());\n+      return sslContext;\n+    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+}\n",
            "diff_size": 140
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/95/TLSHttpsTransport.java\nindex 748e68386c..da30d514fb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/95/TLSHttpsTransport.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/95/TLSHttpsTransport.java\n@@ -1,140 +1,140 @@\n-/*\r\n- * Licensed to the Apache Software Foundation (ASF) under one or more\r\n- * contributor license agreements.  See the NOTICE file distributed with\r\n- * this work for additional information regarding copyright ownership.\r\n- * The ASF licenses this file to You under the Apache License, Version 2.0\r\n- * (the \"License\"); you may not use this file except in compliance with\r\n- * the License.  You may obtain a copy of the License at\r\n- *\r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-\r\n-package org.apache.servicecomb.service.center.client.http;\r\n-\r\n-import java.io.FileInputStream;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.security.KeyManagementException;\r\n-import java.security.KeyStore;\r\n-import java.security.KeyStoreException;\r\n-import java.security.NoSuchAlgorithmException;\r\n-import java.security.SecureRandom;\r\n-import java.security.UnrecoverableKeyException;\r\n-import java.security.cert.CertificateException;\r\n-\r\n-import javax.net.ssl.KeyManager;\r\n-import javax.net.ssl.KeyManagerFactory;\r\n-import javax.net.ssl.SSLContext;\r\n-import javax.net.ssl.TrustManager;\r\n-import javax.net.ssl.TrustManagerFactory;\r\n-\r\n-import org.apache.http.client.config.RequestConfig;\r\n-import org.apache.http.config.Registry;\r\n-import org.apache.http.config.RegistryBuilder;\r\n-import org.apache.http.conn.socket.ConnectionSocketFactory;\r\n-import org.apache.http.conn.socket.PlainConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\r\n-import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\r\n-import org.apache.http.impl.client.HttpClientBuilder;\r\n-import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\r\n-import org.apache.http.ssl.SSLContexts;\r\n-\r\n-/**\r\n- * Created by   on 2019/10/31.\r\n- */\r\n-public class TLSHttpsTransport extends HttpTransportImpl {\r\n-\r\n-  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\r\n-\r\n-  private static final int DEFAULT_MAX_PER_ROUTE = 500;\r\n-\r\n-  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\r\n-\r\n-  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\r\n-\r\n-  public TLSHttpsTransport() {\r\n-\r\n-  }\r\n-\r\n-  /**\r\n-   * configure the certificate to httpClient\r\n-   * @param tlsConfig\r\n-   */\r\n-  public TLSHttpsTransport(TLSConfig tlsConfig) {\r\n-\r\n-    // create keyStore and trustStore\r\n-    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\r\n-        tlsConfig.getKeyStoreValue());\r\n-    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\r\n-        tlsConfig.getTrustStoreValue());\r\n-\r\n-    // initialize SSLContext\r\n-    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\r\n-\r\n-    assert sslContext != null;\r\n-    //register http/https socket factory\r\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\r\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\r\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\r\n-        .build();\r\n-\r\n-    //connection pool management\r\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\r\n-        connectionSocketFactoryRegistry);\r\n-    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\r\n-    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\r\n-\r\n-    //request parameter configuration\r\n-    RequestConfig config = RequestConfig.custom().\r\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\r\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\r\n-        build();\r\n-\r\n-    // construct httpClient\r\n-    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\r\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\r\n-        setConnectionManager(connectionManager).\r\n-        setDefaultRequestConfig(config);\r\n-\r\n-    this.httpClient = httpClientBuilder.build();\r\n-  }\r\n-\r\n-  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\r\n-    try {\r\n-      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\r\n-      InputStream inputStream = new FileInputStream(keyStorePath);\r\n-      keyStore.load(inputStream, keyStoreValue.toCharArray());\r\n-      return keyStore;\r\n-    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\r\n-    try {\r\n-      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\r\n-      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\r\n-      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\r\n-\r\n-      TrustManagerFactory trustManagerFactory = TrustManagerFactory\r\n-          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n-      trustManagerFactory.init(trustStore);\r\n-      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\r\n-\r\n-      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\r\n-      sslContext.init(keyManagers, trustManagers, new SecureRandom());\r\n-      return sslContext;\r\n-    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\r\n-      e.printStackTrace();\r\n-    }\r\n-    return null;\r\n-  }\r\n-}\r\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.servicecomb.service.center.client.http;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+\n+import javax.net.ssl.KeyManager;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManager;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.config.Registry;\n+import org.apache.http.config.RegistryBuilder;\n+import org.apache.http.conn.socket.ConnectionSocketFactory;\n+import org.apache.http.conn.socket.PlainConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;\n+import org.apache.http.ssl.SSLContexts;\n+\n+/**\n+ * Created by   on 2019/10/31.\n+ */\n+public class TLSHttpsTransport extends HttpTransportImpl {\n+\n+  private static final int DEFAULT_MAX_CONNECTIONS = 1000;\n+\n+  private static final int DEFAULT_MAX_PER_ROUTE = 500;\n+\n+  private static final int DEFAULT_REQUEST_TIMEOUT = 5000;\n+\n+  private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\n+\n+  public TLSHttpsTransport() {\n+\n+  }\n+\n+  /**\n+   * configure the certificate to httpClient\n+   * @param tlsConfig\n+   */\n+  public TLSHttpsTransport(TLSConfig tlsConfig) {\n+\n+    // create keyStore and trustStore\n+    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n+        tlsConfig.getKeyStoreValue());\n+    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n+        tlsConfig.getTrustStoreValue());\n+\n+    // initialize SSLContext\n+    SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\n+\n+    assert sslContext != null;\n+    //register http/https socket factory\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n+        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+        .build();\n+\n+    //connection pool management\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n+        connectionSocketFactoryRegistry);\n+    connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n+    connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n+\n+    //request parameter configuration\n+    RequestConfig config = RequestConfig.custom().\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n+        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n+        build();\n+\n+    // construct httpClient\n+    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n+        setConnectionManager(connectionManager).\n+        setDefaultRequestConfig(config);\n+\n+    this.httpClient = httpClientBuilder.build();\n+  }\n+\n+  private KeyStore getKeyStore(String keyStorePath, String keyStoreType, String keyStoreValue) {\n+    try {\n+      KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n+      InputStream inputStream = new FileInputStream(keyStorePath);\n+      keyStore.load(inputStream, keyStoreValue.toCharArray());\n+      return keyStore;\n+    } catch (KeyStoreException | CertificateException | NoSuchAlgorithmException | IOException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+\n+  private SSLContext getSSLContext(KeyStore keyStore, String keyStoreValue, KeyStore trustStore) {\n+    try {\n+      KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\n+      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n+\n+      TrustManagerFactory trustManagerFactory = TrustManagerFactory\n+          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      trustManagerFactory.init(trustStore);\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+\n+      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n+      sslContext.init(keyManagers, trustManagers, new SecureRandom());\n+      return sslContext;\n+    } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n+      e.printStackTrace();\n+    }\n+    return null;\n+  }\n+}\n",
            "diff_size": 140
        }
    ]
}