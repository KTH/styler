{
    "error_id": "480",
    "information": {
        "errors": [
            {
                "line": "62",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n    serviceRegistry =\n        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n    serviceRegistry.init();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/480/RegistryUtils.java\nindex ba8700a113..9f3e0bc340 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler/480/RegistryUtils.java\n@@ -59,7 +59,7 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+    ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/480/RegistryUtils.java\nindex ba8700a113..f9c9568a6e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/480/RegistryUtils.java\n@@ -59,7 +59,8 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+        ServiceRegistryFactory\n+            .getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n@@ -195,7 +196,7 @@ public final class RegistryUtils {\n   }\n \n   public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n+                                                               String versionRule) {\n     return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/480/RegistryUtils.java\nindex ba8700a113..98556e5eac 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/480/RegistryUtils.java\n@@ -190,7 +190,7 @@ public final class RegistryUtils {\n     int publishPortSetting = DynamicPropertyFactory.getInstance()\n         .getIntProperty(publishPortKey, 0)\n         .get();\n-    int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n+int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n     return new IpPort(publicAddressSetting, publishPort);\n   }\n \n@@ -207,4 +207,4 @@ public final class RegistryUtils {\n   public static Microservice getMicroservice(String microserviceId) {\n     return serviceRegistry.getRemoteMicroservice(microserviceId);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "column": "23",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "63",
                    "column": "55",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "64",
                    "column": "7",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/480/RegistryUtils.java\nindex ba8700a113..fbef1bf256 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/480/RegistryUtils.java\n@@ -59,152 +59,154 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n-    serviceRegistry.init();\n-  }\n-\n-  public static void run() {\n-    serviceRegistry.run();\n-  }\n-\n-  public static void destory() {\n-    serviceRegistry.destroy();\n-  }\n-\n-  public static ServiceRegistry getServiceRegistry() {\n-    return serviceRegistry;\n-  }\n-\n-  public static void setServiceRegistry(ServiceRegistry serviceRegistry) {\n-    RegistryUtils.serviceRegistry = serviceRegistry;\n-  }\n+        ServiceRegistryFactory.getOrCreate(EventManager\n+            .eventBus,ServiceRegistryConfig. INSTANCE,microserviceDefinition\n+    );serviceRegistry.init();\n+      }\n \n-  public static ServiceRegistryClient getServiceRegistryClient() {\n-    return serviceRegistry.getServiceRegistryClient();\n-  }\n+      public static void run() {\n+        serviceRegistry.run();\n+      }\n \n-  public static InstanceCacheManager getInstanceCacheManager() {\n-    return serviceRegistry.getInstanceCacheManager();\n-  }\n+      public static void destory() {\n+        serviceRegistry.destroy();\n+      }\n \n-  public static String getAppId() {\n-    return serviceRegistry.getMicroservice().getAppId();\n-  }\n+      public static ServiceRegistry getServiceRegistry() {\n+        return serviceRegistry;\n+      }\n \n-  public static Microservice getMicroservice() {\n-    return serviceRegistry.getMicroservice();\n-  }\n+      public static void setServiceRegistry(ServiceRegistry serviceRegistry) {\n+        RegistryUtils.serviceRegistry = serviceRegistry;\n+      }\n \n-  public static MicroserviceInstance getMicroserviceInstance() {\n-    return serviceRegistry.getMicroserviceInstance();\n-  }\n+      public static ServiceRegistryClient getServiceRegistryClient() {\n+        return serviceRegistry.getServiceRegistryClient();\n+      }\n \n-  public static String getPublishAddress() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n-    publicAddressSetting = publicAddressSetting.trim();\n-    if (publicAddressSetting.isEmpty()) {\n-      return NetUtils.getHostAddress();\n-    }\n+      public static InstanceCacheManager getInstanceCacheManager() {\n+        return serviceRegistry.getInstanceCacheManager();\n+      }\n \n-    // placeholder is network interface name\n-    if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n-    }\n+      public static String getAppId() {\n+        return serviceRegistry.getMicroservice().getAppId();\n+      }\n \n-    return publicAddressSetting;\n-  }\n+      public static Microservice getMicroservice() {\n+        return serviceRegistry.getMicroservice();\n+      }\n \n-  public static String getPublishHostName() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n-    publicAddressSetting = publicAddressSetting.trim();\n-    if (publicAddressSetting.isEmpty()) {\n-      return NetUtils.getHostName();\n-    }\n+      public static MicroserviceInstance getMicroserviceInstance() {\n+        return serviceRegistry.getMicroserviceInstance();\n+      }\n \n-    if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostName();\n-    }\n+      public static String getPublishAddress() {\n+        String publicAddressSetting =\n+            DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+        publicAddressSetting = publicAddressSetting.trim();\n+        if (publicAddressSetting.isEmpty()) {\n+          return NetUtils.getHostAddress();\n+        }\n+\n+        // placeholder is network interface name\n+        if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n+          return NetUtils\n+              .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n+              .getHostAddress();\n+        }\n+\n+        return publicAddressSetting;\n+      }\n \n-    return publicAddressSetting;\n-  }\n+      public static String getPublishHostName() {\n+        String publicAddressSetting =\n+            DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+        publicAddressSetting = publicAddressSetting.trim();\n+        if (publicAddressSetting.isEmpty()) {\n+          return NetUtils.getHostName();\n+        }\n+\n+        if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n+          return NetUtils\n+              .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n+              .getHostName();\n+        }\n+\n+        return publicAddressSetting;\n+      }\n \n-  /**\n+      /**\n    * \u5bf9\u4e8e\u914d\u7f6e\u4e3a0.0.0.0\u7684\u5730\u5740\uff0c\u901a\u8fc7\u67e5\u8be2\u7f51\u5361\u5730\u5740\uff0c\u8f6c\u6362\u4e3a\u5b9e\u9645\u76d1\u542c\u7684\u5730\u5740\u3002\n    */\n-  public static String getPublishAddress(String schema, String address) {\n-    if (address == null) {\n-      return address;\n-    }\n-\n-    try {\n-      URI originalURI = new URI(schema + \"://\" + address);\n-      IpPort ipPort = NetUtils.parseIpPort(originalURI.getAuthority());\n-      if (ipPort == null) {\n-        LOGGER.warn(\"address {} not valid.\", address);\n-        return null;\n+      public static String getPublishAddress(String schema, String address) {\n+        if (address == null) {\n+          return address;\n+        }\n+\n+        try {\n+          URI originalURI = new URI(schema + \"://\" + address);\n+          IpPort ipPort = NetUtils.parseIpPort(originalURI.getAuthority());\n+          if (ipPort == null) {\n+            LOGGER.warn(\"address {} not valid.\", address);\n+            return null;\n+          }\n+\n+          IpPort publishIpPort = genPublishIpPort(schema, ipPort);\n+          URIBuilder builder = new URIBuilder(originalURI);\n+          return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort()).build().toString();\n+        } catch (URISyntaxException e) {\n+          LOGGER.warn(\"address {} not valid.\", address);\n+          return null;\n+        }\n       }\n \n-      IpPort publishIpPort = genPublishIpPort(schema, ipPort);\n-      URIBuilder builder = new URIBuilder(originalURI);\n-      return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort()).build().toString();\n-    } catch (URISyntaxException e) {\n-      LOGGER.warn(\"address {} not valid.\", address);\n-      return null;\n-    }\n-  }\n-\n-  private static IpPort genPublishIpPort(String schema, IpPort ipPort) {\n-    String publicAddressSetting = DynamicPropertyFactory.getInstance()\n-        .getStringProperty(PUBLISH_ADDRESS, \"\")\n-        .get();\n-    publicAddressSetting = publicAddressSetting.trim();\n+      private static IpPort genPublishIpPort(String schema, IpPort ipPort) {\n+        String publicAddressSetting = DynamicPropertyFactory.getInstance()\n+            .getStringProperty(PUBLISH_ADDRESS, \"\")\n+            .get();\n+        publicAddressSetting = publicAddressSetting.trim();\n+\n+        if (publicAddressSetting.isEmpty()) {\n+          InetSocketAddress socketAddress = ipPort.getSocketAddress();\n+          if (socketAddress.getAddress().isAnyLocalAddress()) {\n+            String host = NetUtils.getHostAddress();\n+            LOGGER.warn(\"address {}, auto select a host address to publish {}:{}, maybe not the correct one\",\n+                socketAddress,\n+                host,\n+                socketAddress.getPort());\n+            return new IpPort(host, ipPort.getPort());\n+          }\n+\n+          return ipPort;\n+        }\n+\n+        if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n+          publicAddressSetting = NetUtils\n+              .ensureGetInterfaceAddress(\n+                  publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n+              .getHostAddress();\n+        }\n+\n+        String publishPortKey = PUBLISH_PORT.replace(\"{transport_name}\", schema);\n+        int publishPortSetting = DynamicPropertyFactory.getInstance()\n+            .getIntProperty(publishPortKey, 0)\n+            .get();\n+        int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n+        return new IpPort(publicAddressSetting, publishPort);\n+      }\n \n-    if (publicAddressSetting.isEmpty()) {\n-      InetSocketAddress socketAddress = ipPort.getSocketAddress();\n-      if (socketAddress.getAddress().isAnyLocalAddress()) {\n-        String host = NetUtils.getHostAddress();\n-        LOGGER.warn(\"address {}, auto select a host address to publish {}:{}, maybe not the correct one\",\n-            socketAddress,\n-            host,\n-            socketAddress.getPort());\n-        return new IpPort(host, ipPort.getPort());\n+      public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n+          String versionRule) {\n+        return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n       }\n \n-      return ipPort;\n-    }\n+      // update microservice instance properties\n+      public static boolean updateInstanceProperties(Map<String, String> instanceProperties) {\n+        return serviceRegistry.updateInstanceProperties(instanceProperties);\n+      }\n \n-    if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      publicAddressSetting = NetUtils\n-          .ensureGetInterfaceAddress(\n-              publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n+      public static Microservice getMicroservice(String microserviceId) {\n+        return serviceRegistry.getRemoteMicroservice(microserviceId);\n+      }\n     }\n-\n-    String publishPortKey = PUBLISH_PORT.replace(\"{transport_name}\", schema);\n-    int publishPortSetting = DynamicPropertyFactory.getInstance()\n-        .getIntProperty(publishPortKey, 0)\n-        .get();\n-    int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n-    return new IpPort(publicAddressSetting, publishPort);\n-  }\n-\n-  public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n-    return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n-  }\n-\n-  // update microservice instance properties\n-  public static boolean updateInstanceProperties(Map<String, String> instanceProperties) {\n-    return serviceRegistry.updateInstanceProperties(instanceProperties);\n-  }\n-\n-  public static Microservice getMicroservice(String microserviceId) {\n-    return serviceRegistry.getRemoteMicroservice(microserviceId);\n-  }\n-}\n+    \n\\ No newline at end of file\n",
            "diff_size": 186
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/480/RegistryUtils.java\nindex ba8700a113..9f3e0bc340 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/480/RegistryUtils.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_three_grams/480/RegistryUtils.java\n@@ -59,7 +59,7 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+    ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n",
            "diff_size": 1
        }
    ]
}