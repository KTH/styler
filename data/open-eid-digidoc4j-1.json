{
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "43",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "   */\n  public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n    logger.debug(\"File name: \" + fileName +\n        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n    try {\n      DigestDocument document = new DigestDocument();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/1/DigestDataFile.java\nindex d71b7670c5..c377700c8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/1/DigestDataFile.java\n@@ -24,22 +24,22 @@ public class DigestDataFile extends DataFile {\n    * @param digest digest of the file contents\n    */\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      setDocument(document);\n-      this.contentType = HASHCODE_CONTENT_TYPE;\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n-\n-\n-  public String getContentType() {\n-    return contentType;\n-  }\n+    logger.debug(\"File name: \" + fileName\n+    + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+ try {\n+   DigestDocument document = new DigestDocument();\n+   document.setName(fileName);\n+   document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+   setDocument(document);\n+   this.contentType = HASHCODE_CONTENT_TYPE;\n+ } catch (Exception e) {\n+   logger.error(e.getMessage());\n+   throw new InvalidDataFileException(e);\n+ }\n+}\n+\n+\n+public String getContentType() {\n+  return contentType;\n+}\n }\n",
            "diff_size": 18
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/1/DigestDataFile.java\nindex d71b7670c5..8abf14a5c7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/1/DigestDataFile.java\n@@ -19,9 +19,9 @@ public class DigestDataFile extends DataFile {\n    * Creates digest based data file.\n    * In other words only the content's digest (not the content itself) is provided.\n    *\n-   * @param fileName name of the file\n+   * @param fileName        name of the file\n    * @param digestAlgorithm algorithm of the digest\n-   * @param digest digest of the file contents\n+   * @param digest          digest of the file contents\n    */\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n     logger.debug(\"File name: \" + fileName +\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/1/DigestDataFile.java\nindex d71b7670c5..c02c4ebeff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/1/DigestDataFile.java\n@@ -24,9 +24,8 @@ public class DigestDataFile extends DataFile {\n    * @param digest digest of the file contents\n    */\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+try {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n       document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n@@ -38,8 +37,7 @@ public class DigestDataFile extends DataFile {\n     }\n   }\n \n-\n-  public String getContentType() {\n+public String getContentType() {\n     return contentType;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/1/DigestDataFile.java\nindex d71b7670c5..cffb8a6ce7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/1/DigestDataFile.java\n@@ -5,15 +5,14 @@ import org.apache.commons.codec.binary.Base64;\n import org.digidoc4j.exceptions.InvalidDataFileException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.Arrays;\n \n-public class DigestDataFile extends DataFile {\n \n-  private static final Logger logger = LoggerFactory.getLogger(DigestDataFile.class);\n-  private static final String HASHCODE_CONTENT_TYPE = \"HASHCODE\";\n+public class DigestDataFile extends DataFile {\n \n-  private String contentType = null;\n+    private static final Logger logger = LoggerFactory.getLogger(DigestDataFile.class);\n+    private static final String HASHCODE_CONTENT_TYPE = \"HASHCODE\";\n+    private String contentType = null;\n \n   /**\n    * Creates digest based data file.\n@@ -23,23 +22,25 @@ public class DigestDataFile extends DataFile {\n    * @param digestAlgorithm algorithm of the digest\n    * @param digest digest of the file contents\n    */\n-  public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+\n+\n+    public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n     try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      setDocument(document);\n-      this.contentType = HASHCODE_CONTENT_TYPE;\n+        DigestDocument document = new DigestDocument();\n+        document.setName(fileName);\n+        document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+        setDocument(document);\n+        this.contentType = HASHCODE_CONTENT_TYPE;\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n       throw new InvalidDataFileException(e);\n     }\n-  }\n+    }\n \n \n-  public String getContentType() {\n+    public String getContentType() {\n     return contentType;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/1/DigestDataFile.java\nindex d71b7670c5..c377700c8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/1/DigestDataFile.java\n@@ -24,22 +24,22 @@ public class DigestDataFile extends DataFile {\n    * @param digest digest of the file contents\n    */\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      setDocument(document);\n-      this.contentType = HASHCODE_CONTENT_TYPE;\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n-\n-\n-  public String getContentType() {\n-    return contentType;\n-  }\n+    logger.debug(\"File name: \" + fileName\n+    + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+ try {\n+   DigestDocument document = new DigestDocument();\n+   document.setName(fileName);\n+   document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+   setDocument(document);\n+   this.contentType = HASHCODE_CONTENT_TYPE;\n+ } catch (Exception e) {\n+   logger.error(e.getMessage());\n+   throw new InvalidDataFileException(e);\n+ }\n+}\n+\n+\n+public String getContentType() {\n+  return contentType;\n+}\n }\n",
            "diff_size": 18
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/1/DigestDataFile.java\nindex d71b7670c5..258dadb7b6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/1/DigestDataFile.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/1/DigestDataFile.java\n@@ -24,22 +24,21 @@ public class DigestDataFile extends DataFile {\n    * @param digest digest of the file contents\n    */\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n-      DigestDocument document = new DigestDocument();\n-      document.setName(fileName);\n-      document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      setDocument(document);\n-      this.contentType = HASHCODE_CONTENT_TYPE;\n-    } catch (Exception e) {\n-      logger.error(e.getMessage());\n-      throw new InvalidDataFileException(e);\n-    }\n-  }\n-\n-\n-  public String getContentType() {\n-    return contentType;\n-  }\n+    logger.debug(\"File name: \" + fileName +\", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+try {\n+  DigestDocument document = new DigestDocument();\n+  document.setName(fileName);\n+  document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n+  setDocument(document);\n+  this.contentType = HASHCODE_CONTENT_TYPE;\n+} catch (Exception e) {\n+  logger.error(e.getMessage());\n+  throw new InvalidDataFileException(e);\n+}\n+}\n+\n+\n+public String getContentType() {\n+  return contentType;\n+}\n }\n",
            "diff_size": 18
        }
    ]
}