{
    "error_id": "499",
    "information": {
        "errors": [
            {
                "line": "33",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 150).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Load the {@link ExceptionToResponseConverter} implementations. Ensure that those converters whose {@link ExceptionToResponseConverter#getOrder()}\n   * return smaller value takes higher priority.\n   */\n  @SuppressWarnings(\"unchecked\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/499/ExceptionToResponseConverters.java\nindex 3c78cdf7f3..a1130630a6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/intellij/499/ExceptionToResponseConverters.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.invocation.exception;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/499/ExceptionToResponseConverters.java\nindex 3c78cdf7f3..0da4f79ce8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/naturalize/499/ExceptionToResponseConverters.java\n@@ -62,4 +62,4 @@ public class ExceptionToResponseConverters {\n     }\n     return converter.convert(swaggerInvocation, e);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/499/ExceptionToResponseConverters.java\nindex 3c78cdf7f3..e7eca878e9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/codebuff/499/ExceptionToResponseConverters.java\n@@ -18,48 +18,49 @@ package org.apache.servicecomb.swagger.invocation.exception;\n \n import java.util.HashMap;\n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n import org.apache.servicecomb.swagger.invocation.Response;\n import org.apache.servicecomb.swagger.invocation.SwaggerInvocation;\n \n public class ExceptionToResponseConverters {\n-  private Map<Class<?>, ExceptionToResponseConverter<Throwable>> exceptionToResponseConverters =\n-      new HashMap<>();\n+    private Map<Class<?>, ExceptionToResponseConverter<Throwable>> exceptionToResponseConverters = new HashMap<>();\n \n-  private ExceptionToResponseConverter<Throwable> defaultConverter;\n+    private ExceptionToResponseConverter<Throwable> defaultConverter;\n \n   /**\n    * Load the {@link ExceptionToResponseConverter} implementations. Ensure that those converters whose {@link ExceptionToResponseConverter#getOrder()}\n    * return smaller value takes higher priority.\n    */\n-  @SuppressWarnings(\"unchecked\")\n-  public ExceptionToResponseConverters() {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public ExceptionToResponseConverters() {\n     SPIServiceUtils.getSortedService(ExceptionToResponseConverter.class).forEach(converter -> {\n-      if (converter.getExceptionClass() == null) {\n-        if (defaultConverter == null) {\n-          defaultConverter = converter;\n-        }\n-        return;\n-      }\n+        if (converter.getExceptionClass() == null) {\n+                                                                                     if (defaultConverter == null) {\n+                                                       defaultConverter = converter;\n+                                                                                     }\n \n-      exceptionToResponseConverters.putIfAbsent(converter.getExceptionClass(), converter);\n+                                                                                     return;\n+        }\n+        exceptionToResponseConverters.putIfAbsent(converter.getExceptionClass(), converter);\n     });\n-  }\n+    }\n \n-  public Response convertExceptionToResponse(SwaggerInvocation swaggerInvocation, Throwable e) {\n+    public Response convertExceptionToResponse(SwaggerInvocation swaggerInvocation, Throwable e) {\n     ExceptionToResponseConverter<Throwable> converter = null;\n     Class<?> clazz = e.getClass();\n     while (converter == null) {\n-      converter = exceptionToResponseConverters.get(clazz);\n-      if (clazz == Throwable.class) {\n+        converter = exceptionToResponseConverters.get(clazz);\n+        if (clazz == Throwable.class) {\n         break;\n-      }\n-      clazz = clazz.getSuperclass();\n+        }\n+        clazz = clazz.getSuperclass();\n     }\n+\n     if (converter == null) {\n-      converter = defaultConverter;\n+        converter = defaultConverter;\n     }\n+\n     return converter.convert(swaggerInvocation, e);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/499/ExceptionToResponseConverters.java\nindex 3c78cdf7f3..1ffff23235 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/errored/1/499/ExceptionToResponseConverters.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-servicecomb-java-chassis/styler_random/499/ExceptionToResponseConverters.java\n@@ -32,8 +32,7 @@ public class ExceptionToResponseConverters {\n   /**\n    * Load the {@link ExceptionToResponseConverter} implementations. Ensure that those converters whose {@link ExceptionToResponseConverter#getOrder()}\n    * return smaller value takes higher priority.\n-   */\n-  @SuppressWarnings(\"unchecked\")\n+   */@SuppressWarnings(\"unchecked\")\n   public ExceptionToResponseConverters() {\n     SPIServiceUtils.getSortedService(ExceptionToResponseConverter.class).forEach(converter -> {\n       if (converter.getExceptionClass() == null) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}