{
    "error_id": "487",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.event.impl;\n\nimport java.util.Optional;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/487/MessageSubscriptionConverter.java\nindex d9b46b898a..e256670455 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/487/MessageSubscriptionConverter.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.event.impl;\n \n import java.util.Optional;\n@@ -24,7 +25,7 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n public class MessageSubscriptionConverter {\n \n     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {\n-        \n+\n         return Optional.of(messageEventSubscriptionEntity)\n                        .map(entity -> MessageSubscriptionImpl.builder()\n                                                              .withId(entity.getId())\n@@ -41,5 +42,5 @@ public class MessageSubscriptionConverter {\n                                                              .build())\n                        .orElseThrow( () -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n     }\n-    \n+\n }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/487/MessageSubscriptionConverter.java\nindex d9b46b898a..d52ef04c66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/487/MessageSubscriptionConverter.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.event.impl;\n \n import java.util.Optional;\n@@ -24,22 +25,22 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n public class MessageSubscriptionConverter {\n \n     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {\n-        \n+\n         return Optional.of(messageEventSubscriptionEntity)\n-                       .map(entity -> MessageSubscriptionImpl.builder()\n-                                                             .withId(entity.getId())\n-                                                             .withEventName(entity.getEventName())\n-                                                             .withProcessDefinitionId(entity.getProcessDefinitionId())\n-                                                             .withConfiguration(entity.getConfiguration())\n-                                                             .withActivityId(entity.getActivityId())\n-                                                             .withBusinessKey(Optional.ofNullable(entity.getExecution())\n-                                                                                      .map(DelegateExecution::getProcessInstanceBusinessKey)\n-                                                                                      .orElse(null))\n-                                                             .withCreated(entity.getCreated())\n-                                                             .withExecutionId(entity.getExecutionId())\n-                                                             .withProcessInstanceId(entity.getProcessInstanceId())\n-                                                             .build())\n-                       .orElseThrow( () -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n+                .map(entity -> MessageSubscriptionImpl.builder()\n+                        .withId(entity.getId())\n+                        .withEventName(entity.getEventName())\n+                        .withProcessDefinitionId(entity.getProcessDefinitionId())\n+                        .withConfiguration(entity.getConfiguration())\n+                        .withActivityId(entity.getActivityId())\n+                        .withBusinessKey(Optional.ofNullable(entity.getExecution())\n+                                .map(DelegateExecution::getProcessInstanceBusinessKey)\n+                                .orElse(null))\n+                        .withCreated(entity.getCreated())\n+                        .withExecutionId(entity.getExecutionId())\n+                        .withProcessInstanceId(entity.getProcessInstanceId())\n+                        .build())\n+                .orElseThrow(() -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n     }\n-    \n+\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 666).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/487/MessageSubscriptionConverter.java\nindex d9b46b898a..d5934567f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/487/MessageSubscriptionConverter.java\n@@ -16,30 +16,15 @@\n package org.activiti.runtime.api.event.impl;\n \n import java.util.Optional;\n-\n import org.activiti.api.runtime.model.impl.MessageSubscriptionImpl;\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;\n \n+\n public class MessageSubscriptionConverter {\n \n     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {\n-        \n-        return Optional.of(messageEventSubscriptionEntity)\n-                       .map(entity -> MessageSubscriptionImpl.builder()\n-                                                             .withId(entity.getId())\n-                                                             .withEventName(entity.getEventName())\n-                                                             .withProcessDefinitionId(entity.getProcessDefinitionId())\n-                                                             .withConfiguration(entity.getConfiguration())\n-                                                             .withActivityId(entity.getActivityId())\n-                                                             .withBusinessKey(Optional.ofNullable(entity.getExecution())\n-                                                                                      .map(DelegateExecution::getProcessInstanceBusinessKey)\n-                                                                                      .orElse(null))\n-                                                             .withCreated(entity.getCreated())\n-                                                             .withExecutionId(entity.getExecutionId())\n-                                                             .withProcessInstanceId(entity.getProcessInstanceId())\n-                                                             .build())\n-                       .orElseThrow( () -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n+    return Optional.of(messageEventSubscriptionEntity).map(entity -> MessageSubscriptionImpl.builder().withId(entity.getId()).withEventName(entity.getEventName()).withProcessDefinitionId(entity.getProcessDefinitionId()).withConfiguration(entity.getConfiguration()).withActivityId(entity.getActivityId()).withBusinessKey(Optional.ofNullable(entity.getExecution()).map(DelegateExecution::getProcessInstanceBusinessKey).orElse(null)).withCreated(entity.getCreated()).withExecutionId(entity.getExecutionId()).withProcessInstanceId(entity.getProcessInstanceId()).build()).orElseThrow(() -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n     }\n-    \n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/487/MessageSubscriptionConverter.java\nindex d9b46b898a..e256670455 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/487/MessageSubscriptionConverter.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.event.impl;\n \n import java.util.Optional;\n@@ -24,7 +25,7 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n public class MessageSubscriptionConverter {\n \n     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {\n-        \n+\n         return Optional.of(messageEventSubscriptionEntity)\n                        .map(entity -> MessageSubscriptionImpl.builder()\n                                                              .withId(entity.getId())\n@@ -41,5 +42,5 @@ public class MessageSubscriptionConverter {\n                                                              .build())\n                        .orElseThrow( () -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n     }\n-    \n+\n }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/487/MessageSubscriptionConverter.java\nindex d9b46b898a..e256670455 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/487/MessageSubscriptionConverter.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/487/MessageSubscriptionConverter.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.event.impl;\n \n import java.util.Optional;\n@@ -24,7 +25,7 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n public class MessageSubscriptionConverter {\n \n     public MessageSubscriptionImpl convertToMessageSubscription(MessageEventSubscriptionEntity messageEventSubscriptionEntity) {\n-        \n+\n         return Optional.of(messageEventSubscriptionEntity)\n                        .map(entity -> MessageSubscriptionImpl.builder()\n                                                              .withId(entity.getId())\n@@ -41,5 +42,5 @@ public class MessageSubscriptionConverter {\n                                                              .build())\n                        .orElseThrow( () -> new IllegalArgumentException(\"messageEventSubscriptionEntity must not be null\"));\n     }\n-    \n+\n }\n",
            "diff_size": 3
        }
    ]
}