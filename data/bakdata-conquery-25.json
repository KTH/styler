{
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "13",
                "severity": "warning",
                "message": "'}' at column 4 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n\t\t\t\treturn result.get();\n\t\t\t} catch(Exception e) {\n\t\t\t\tlog.error(\"Error while resolving entry \"+text+\" of type \"+type, e);\n\t\t\t\tthrow e;\n\t\t\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..bf8416a97a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler/25/MetaIdReferenceDeserializer.java\n@@ -32,7 +32,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \tprivate Class<?> type;\n \tprivate JsonDeserializer<?> beanDeserializer;\n \tprivate Parser<ID> idParser;\n-\t\n+\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n@@ -59,7 +59,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\treturn (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n \t\treturn this.deserialize(p, ctxt);\n@@ -72,19 +72,19 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\t\t.orElseGet(property::getType);\n \n \t\tBeanDescription descr = ctxt.getConfig().introspect(type);\n-\t\t\n+\n \t\twhile(type.isContainerType()) {\n \t\t\ttype = type.getContentType();\n \t\t}\n \t\tClass<?> cl = type.getRawClass();\n \t\tClass<IId<?>> idClass = IId.findIdClass(cl);\n-\t\t\n+\n \t\tif(NamespacedId.class.isAssignableFrom(idClass)) {\n \t\t\tthrow new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n \t\t}\n-\t\t\n+\n \t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n+\n \t\treturn new MetaIdReferenceDeserializer(\n \t\t\t\tcl,\n \t\t\t\tctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n@@ -92,7 +92,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t);\n \t\t//.createContextual(ctxt, property)\n \t}\n-\t\n+\n \t@Override\n \tpublic SettableBeanProperty findBackReference(String refName) {\n \t\treturn beanDeserializer.findBackReference(refName);\n",
            "diff_size": 7
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..0e354cda09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/intellij/25/MetaIdReferenceDeserializer.java\n@@ -26,75 +26,75 @@ import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n-@AllArgsConstructor @NoArgsConstructor\n+@AllArgsConstructor\n+@NoArgsConstructor\n public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiable<?>> extends JsonDeserializer<T> implements ContextualDeserializer {\n \n-\tprivate Class<?> type;\n-\tprivate JsonDeserializer<?> beanDeserializer;\n-\tprivate Parser<ID> idParser;\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n-\t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n-\t\t\tString text = parser.getText();\n-\t\t\ttry {\n-\t\t\t\tOptional<T> result = Objects.requireNonNull(CentralRegistry.get(ctxt), \"Could not find injected central registry\").getOptional(idParser.parse(text));\n-\n-\t\t\t\tif (result.isEmpty()) {\n-\t\t\t\t\treturn (T) ctxt.handleWeirdStringValue(type, text, \"Could not find entry \"+text+\" of type \"+type.getName());\n-\t\t\t\t}\n-\n-\t\t\t\tif(!type.isAssignableFrom(result.get().getClass())) {\n-\t\t\t\t\tthrow new InputMismatchException(String.format(\"Cannot assign type %s to %s \", result.get().getClass(), type));\n-\t\t\t\t}\n-\n-\t\t\t\treturn result.get();\n-\t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while resolving entry \"+text+\" of type \"+type, e);\n-\t\t\t\tthrow e;\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\treturn (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n-\t\t}\n-\t}\n-\t\n-\t@Override\n-\tpublic T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n-\t\treturn this.deserialize(p, ctxt);\n-\t}\n-\n-\t@Override\n-\tpublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n-\t\tJavaType type = Optional\n-\t\t\t\t.ofNullable(ctxt.getContextualType())\n-\t\t\t\t.orElseGet(property::getType);\n-\n-\t\tBeanDescription descr = ctxt.getConfig().introspect(type);\n-\t\t\n-\t\twhile(type.isContainerType()) {\n-\t\t\ttype = type.getContentType();\n-\t\t}\n-\t\tClass<?> cl = type.getRawClass();\n-\t\tClass<IId<?>> idClass = IId.findIdClass(cl);\n-\t\t\n-\t\tif(NamespacedId.class.isAssignableFrom(idClass)) {\n-\t\t\tthrow new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n-\t\t}\n-\t\t\n-\t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n-\t\treturn new MetaIdReferenceDeserializer(\n-\t\t\t\tcl,\n-\t\t\t\tctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n-\t\t\t\tparser\n-\t\t);\n-\t\t//.createContextual(ctxt, property)\n-\t}\n-\t\n-\t@Override\n-\tpublic SettableBeanProperty findBackReference(String refName) {\n-\t\treturn beanDeserializer.findBackReference(refName);\n-\t}\n+    private Class<?> type;\n+    private JsonDeserializer<?> beanDeserializer;\n+    private Parser<ID> idParser;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n+        if (parser.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            String text = parser.getText();\n+            try {\n+                Optional<T> result = Objects.requireNonNull(CentralRegistry.get(ctxt), \"Could not find injected central registry\").getOptional(idParser.parse(text));\n+\n+                if (result.isEmpty()) {\n+                    return (T) ctxt.handleWeirdStringValue(type, text, \"Could not find entry \" + text + \" of type \" + type.getName());\n+                }\n+\n+                if (!type.isAssignableFrom(result.get().getClass())) {\n+                    throw new InputMismatchException(String.format(\"Cannot assign type %s to %s \", result.get().getClass(), type));\n+                }\n+\n+                return result.get();\n+            } catch (Exception e) {\n+                log.error(\"Error while resolving entry \" + text + \" of type \" + type, e);\n+                throw e;\n+            }\n+        } else {\n+            return (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n+        }\n+    }\n+\n+    @Override\n+    public T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n+        return this.deserialize(p, ctxt);\n+    }\n+\n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n+        JavaType type = Optional\n+            .ofNullable(ctxt.getContextualType())\n+            .orElseGet(property::getType);\n+\n+        BeanDescription descr = ctxt.getConfig().introspect(type);\n+\n+        while (type.isContainerType()) {\n+            type = type.getContentType();\n+        }\n+        Class<?> cl = type.getRawClass();\n+        Class<IId<?>> idClass = IId.findIdClass(cl);\n+\n+        if (NamespacedId.class.isAssignableFrom(idClass)) {\n+            throw new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n+        }\n+\n+        Parser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class) idClass);\n+\n+        return new MetaIdReferenceDeserializer(\n+            cl,\n+            ctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n+            parser\n+        );\n+        //.createContextual(ctxt, property)\n+    }\n+\n+    @Override\n+    public SettableBeanProperty findBackReference(String refName) {\n+        return beanDeserializer.findBackReference(refName);\n+    }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'catch' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..4745727eef 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/naturalize/25/MetaIdReferenceDeserializer.java\n@@ -50,7 +50,8 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\t\t}\n \n \t\t\t\treturn result.get();\n-\t\t\t} catch(Exception e) {\n+\t\t\t}\n+catch(Exception e) {\n \t\t\t\tlog.error(\"Error while resolving entry \"+text+\" of type \"+type, e);\n \t\t\t\tthrow e;\n \t\t\t}\n@@ -97,4 +98,4 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \tpublic SettableBeanProperty findBackReference(String refName) {\n \t\treturn beanDeserializer.findBackReference(refName);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..712be68834 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/codebuff/25/MetaIdReferenceDeserializer.java\n@@ -19,82 +19,71 @@ import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;\n import lombok.AllArgsConstructor;\n import lombok.NoArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-\n import java.io.IOException;\n import java.util.InputMismatchException;\n import java.util.Objects;\n import java.util.Optional;\n \n @Slf4j\n-@AllArgsConstructor @NoArgsConstructor\n+@AllArgsConstructor\n+@NoArgsConstructor\n public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiable<?>> extends JsonDeserializer<T> implements ContextualDeserializer {\n \n-\tprivate Class<?> type;\n-\tprivate JsonDeserializer<?> beanDeserializer;\n-\tprivate Parser<ID> idParser;\n-\t\n-\t@SuppressWarnings(\"unchecked\")\n-\t@Override\n-\tpublic T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n-\t\tif(parser.getCurrentToken()==JsonToken.VALUE_STRING) {\n-\t\t\tString text = parser.getText();\n-\t\t\ttry {\n-\t\t\t\tOptional<T> result = Objects.requireNonNull(CentralRegistry.get(ctxt), \"Could not find injected central registry\").getOptional(idParser.parse(text));\n+    private Class<?> type;\n+    private JsonDeserializer<?> beanDeserializer;\n+    private Parser<ID> idParser;\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n+        if(parser.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            String text = parser.getText();\n+            try {\n+                Optional<T> result = Objects.requireNonNull(CentralRegistry.get(ctxt), \"Could not find injected central registry\").getOptional(idParser.parse(text));\n+                if(result.isEmpty()) {\n+                    return (T)ctxt.handleWeirdStringValue(type, text, \"Could not find entry \"+text+\" of type \"+type.getName());\n+                }\n+\n+                if(!type.isAssignableFrom(result.get().getClass())) {\n+                    throw new InputMismatchException(String.format(\"Cannot assign type %s to %s \", result.get().getClass(), type));\n+                }\n+                return result.get();\n+            }\n+            catch (Exception e) {\n+                log.error(\"Error while resolving entry \"+text+\" of type \"+type, e);\n+                throw e;\n+            }\n+        }\n+        else {\n+            return (T)ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n+        }\n+    }\n \n-\t\t\t\tif (result.isEmpty()) {\n-\t\t\t\t\treturn (T) ctxt.handleWeirdStringValue(type, text, \"Could not find entry \"+text+\" of type \"+type.getName());\n-\t\t\t\t}\n+    @Override\n+    public T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n+        return this.deserialize(p, ctxt);\n+    }\n \n-\t\t\t\tif(!type.isAssignableFrom(result.get().getClass())) {\n-\t\t\t\t\tthrow new InputMismatchException(String.format(\"Cannot assign type %s to %s \", result.get().getClass(), type));\n-\t\t\t\t}\n+    @Override\n+    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n+        JavaType type = Optional.ofNullable(ctxt.getContextualType()).orElseGet(property::getType);\n+        BeanDescription descr = ctxt.getConfig().introspect(type);\n+        while(type.isContainerType()) {\n+            type = type.getContentType();\n+        }\n \n-\t\t\t\treturn result.get();\n-\t\t\t} catch(Exception e) {\n-\t\t\t\tlog.error(\"Error while resolving entry \"+text+\" of type \"+type, e);\n-\t\t\t\tthrow e;\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\treturn (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n-\t\t}\n-\t}\n-\t\n-\t@Override\n-\tpublic T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n-\t\treturn this.deserialize(p, ctxt);\n-\t}\n+        Class<?> cl = type.getRawClass();\n+        Class<IId<?>> idClass = IId.findIdClass(cl);\n+        if(NamespacedId.class.isAssignableFrom(idClass)) {\n+            throw new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n+        }\n \n-\t@Override\n-\tpublic JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {\n-\t\tJavaType type = Optional\n-\t\t\t\t.ofNullable(ctxt.getContextualType())\n-\t\t\t\t.orElseGet(property::getType);\n+        Parser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n+        return new MetaIdReferenceDeserializer(cl, ctxt.getFactory().createBeanDeserializer(ctxt, type, descr), parser);\n+        //.createContextual(ctxt, property)\n+    }\n \n-\t\tBeanDescription descr = ctxt.getConfig().introspect(type);\n-\t\t\n-\t\twhile(type.isContainerType()) {\n-\t\t\ttype = type.getContentType();\n-\t\t}\n-\t\tClass<?> cl = type.getRawClass();\n-\t\tClass<IId<?>> idClass = IId.findIdClass(cl);\n-\t\t\n-\t\tif(NamespacedId.class.isAssignableFrom(idClass)) {\n-\t\t\tthrow new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n-\t\t}\n-\t\t\n-\t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n-\t\treturn new MetaIdReferenceDeserializer(\n-\t\t\t\tcl,\n-\t\t\t\tctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n-\t\t\t\tparser\n-\t\t);\n-\t\t//.createContextual(ctxt, property)\n-\t}\n-\t\n-\t@Override\n-\tpublic SettableBeanProperty findBackReference(String refName) {\n-\t\treturn beanDeserializer.findBackReference(refName);\n-\t}\n-}\n+    @Override\n+    public SettableBeanProperty findBackReference(String refName) {\n+        return beanDeserializer.findBackReference(refName);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 89
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..bf8416a97a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_random/25/MetaIdReferenceDeserializer.java\n@@ -32,7 +32,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \tprivate Class<?> type;\n \tprivate JsonDeserializer<?> beanDeserializer;\n \tprivate Parser<ID> idParser;\n-\t\n+\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n@@ -59,7 +59,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\treturn (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n \t\treturn this.deserialize(p, ctxt);\n@@ -72,19 +72,19 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\t\t.orElseGet(property::getType);\n \n \t\tBeanDescription descr = ctxt.getConfig().introspect(type);\n-\t\t\n+\n \t\twhile(type.isContainerType()) {\n \t\t\ttype = type.getContentType();\n \t\t}\n \t\tClass<?> cl = type.getRawClass();\n \t\tClass<IId<?>> idClass = IId.findIdClass(cl);\n-\t\t\n+\n \t\tif(NamespacedId.class.isAssignableFrom(idClass)) {\n \t\t\tthrow new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n \t\t}\n-\t\t\n+\n \t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n+\n \t\treturn new MetaIdReferenceDeserializer(\n \t\t\t\tcl,\n \t\t\t\tctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n@@ -92,7 +92,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t);\n \t\t//.createContextual(ctxt, property)\n \t}\n-\t\n+\n \t@Override\n \tpublic SettableBeanProperty findBackReference(String refName) {\n \t\treturn beanDeserializer.findBackReference(refName);\n",
            "diff_size": 7
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 4 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/25/MetaIdReferenceDeserializer.java\nindex 50e6445284..bf8416a97a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/errored/1/25/MetaIdReferenceDeserializer.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/bakdata-conquery/styler_three_grams/25/MetaIdReferenceDeserializer.java\n@@ -32,7 +32,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \tprivate Class<?> type;\n \tprivate JsonDeserializer<?> beanDeserializer;\n \tprivate Parser<ID> idParser;\n-\t\n+\n \t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic T deserialize(JsonParser parser, DeserializationContext ctxt) throws IOException {\n@@ -59,7 +59,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\treturn (T) ctxt.handleUnexpectedToken(type, parser.getCurrentToken(), parser, \"name references should be strings\");\n \t\t}\n \t}\n-\t\n+\n \t@Override\n \tpublic T deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {\n \t\treturn this.deserialize(p, ctxt);\n@@ -72,19 +72,19 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t\t\t.orElseGet(property::getType);\n \n \t\tBeanDescription descr = ctxt.getConfig().introspect(type);\n-\t\t\n+\n \t\twhile(type.isContainerType()) {\n \t\t\ttype = type.getContentType();\n \t\t}\n \t\tClass<?> cl = type.getRawClass();\n \t\tClass<IId<?>> idClass = IId.findIdClass(cl);\n-\t\t\n+\n \t\tif(NamespacedId.class.isAssignableFrom(idClass)) {\n \t\t\tthrow new IllegalStateException(\"@MetaIdRef should only be used for non NamespacedId fields\");\n \t\t}\n-\t\t\n+\n \t\tParser<IId<Identifiable<?>>> parser = IId.<IId<Identifiable<?>>>createParser((Class)idClass);\n-\t\t\n+\n \t\treturn new MetaIdReferenceDeserializer(\n \t\t\t\tcl,\n \t\t\t\tctxt.getFactory().createBeanDeserializer(ctxt, type, descr),\n@@ -92,7 +92,7 @@ public class MetaIdReferenceDeserializer<ID extends IId<T>, T extends Identifiab\n \t\t);\n \t\t//.createContextual(ctxt, property)\n \t}\n-\t\n+\n \t@Override\n \tpublic SettableBeanProperty findBackReference(String refName) {\n \t\treturn beanDeserializer.findBackReference(refName);\n",
            "diff_size": 7
        }
    ]
}