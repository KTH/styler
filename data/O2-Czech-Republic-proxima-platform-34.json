{
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "55",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 92).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      assertNotNull(options);\n      assertEquals(\n          10000L, (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n      assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n      assertEquals(1, provider.getRegistrars().size());\n      assertEquals(2, provider.getArgs().length);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/34/BeamStreamProviderTest.java\nindex 22cbb6a6b5..e40b6f8651 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/intellij/34/BeamStreamProviderTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2020 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.tools.groovy;\n \n import static org.junit.Assert.*;\n@@ -44,15 +45,16 @@ public class BeamStreamProviderTest {\n       provider.init(\n           repo,\n           new String[] {\n-            \"--runner=flink\",\n-            \"--runnerRegistrar=\" + Registrar.class.getName(),\n-            \"--checkpointingInterval=10000\"\n+              \"--runner=flink\",\n+              \"--runnerRegistrar=\" + Registrar.class.getName(),\n+              \"--checkpointingInterval=10000\"\n           });\n       assertNotNull(provider.getPipelineOptionsFactory());\n       PipelineOptions options = provider.getPipelineOptionsFactory().get();\n       assertNotNull(options);\n       assertEquals(\n-          10000L, (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n+          10000L,\n+          (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n       assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n       assertEquals(1, provider.getRegistrars().size());\n       assertEquals(2, provider.getArgs().length);\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/34/BeamStreamProviderTest.java\nindex 22cbb6a6b5..833ac167b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/naturalize/34/BeamStreamProviderTest.java\n@@ -43,11 +43,9 @@ public class BeamStreamProviderTest {\n     try (BeamStreamProvider.Default provider = new BeamStreamProvider.Default()) {\n       provider.init(\n           repo,\n-          new String[] {\n-            \"--runner=flink\",\n+          new String[] {\"--runner=flink\",\n             \"--runnerRegistrar=\" + Registrar.class.getName(),\n-            \"--checkpointingInterval=10000\"\n-          });\n+            \"--checkpointingInterval=10000\"});\n       assertNotNull(provider.getPipelineOptionsFactory());\n       PipelineOptions options = provider.getPipelineOptionsFactory().get();\n       assertNotNull(options);\n@@ -66,4 +64,4 @@ public class BeamStreamProviderTest {\n     // must not throw any exceptions\n     assertTrue(true);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "'class def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 8, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/34/BeamStreamProviderTest.java\nindex 22cbb6a6b5..8a2d421554 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/codebuff/34/BeamStreamProviderTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.beam.tools.groovy;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.repository.Repository;\n import java.io.File;\n@@ -26,44 +25,40 @@ import org.apache.beam.sdk.options.PipelineOptions;\n import org.junit.Test;\n \n /** Test suite for {@link BeamStreamProvider}. */\n+\n+\n public class BeamStreamProviderTest {\n \n-  public static class Registrar implements BeamStreamProvider.RunnerRegistrar {\n+    public static class Registrar implements BeamStreamProvider.RunnerRegistrar {\n \n     @Override\n     public void apply(PipelineOptions opts) {\n       // nop\n+\n+    }\n     }\n-  }\n \n-  private final Repository repo = Repository.ofTest(ConfigFactory.defaultApplication());\n+    private final Repository repo = Repository.ofTest(ConfigFactory.defaultApplication());\n \n-  @Test\n-  public void testRunnerRegistrarParsing() {\n+    @Test\n+    public void testRunnerRegistrarParsing() {\n     try (BeamStreamProvider.Default provider = new BeamStreamProvider.Default()) {\n-      provider.init(\n-          repo,\n-          new String[] {\n-            \"--runner=flink\",\n-            \"--runnerRegistrar=\" + Registrar.class.getName(),\n-            \"--checkpointingInterval=10000\"\n-          });\n-      assertNotNull(provider.getPipelineOptionsFactory());\n-      PipelineOptions options = provider.getPipelineOptionsFactory().get();\n-      assertNotNull(options);\n-      assertEquals(\n-          10000L, (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n-      assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n-      assertEquals(1, provider.getRegistrars().size());\n-      assertEquals(2, provider.getArgs().length);\n+        provider.init(repo, new String[]{\"--runner=flink\", \"--runnerRegistrar=\" + Registrar.class.getName(), \"--checkpointingInterval=10000\"});\n+        assertNotNull(provider.getPipelineOptionsFactory());\n+        PipelineOptions options = provider.getPipelineOptionsFactory().get();\n+        assertNotNull(options);\n+        assertEquals(10000L, (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n+        assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n+        assertEquals(1, provider.getRegistrars().size());\n+        assertEquals(2, provider.getArgs().length);\n+    }\n     }\n-  }\n \n-  @Test\n-  public void testInjectPathToClassloader() throws IOException {\n+    @Test\n+    public void testInjectPathToClassloader() throws IOException {\n     File f = File.createTempFile(\"dummy\", \".tmp\");\n     BeamStreamProvider.injectJarIntoContextClassLoader(f.toURI().toURL());\n     // must not throw any exceptions\n     assertTrue(true);\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 10, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "column": "157",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 10, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "'try' child has incorrect indentation level 10, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "'try rcurly' has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 6, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/34/BeamStreamProviderTest.java\nindex 22cbb6a6b5..816454364d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/errored/1/34/BeamStreamProviderTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/O2-Czech-Republic-proxima-platform/styler_random/34/BeamStreamProviderTest.java\n@@ -52,18 +52,18 @@ public class BeamStreamProviderTest {\n       PipelineOptions options = provider.getPipelineOptionsFactory().get();\n       assertNotNull(options);\n       assertEquals(\n-          10000L, (long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());\n-      assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n-      assertEquals(1, provider.getRegistrars().size());\n-      assertEquals(2, provider.getArgs().length);\n-    }\n-  }\n+          10000L,( long) options.as(FlinkPipelineOptions.class).getCheckpointingInterval());assertEquals(\"FlinkRunner\", options.getRunner().getSimpleName());\n+          assertEquals(1, provider.getRegistrars().size());\n+          assertEquals(2, provider.getArgs().length);\n+        }\n+      }\n \n-  @Test\n-  public void testInjectPathToClassloader() throws IOException {\n-    File f = File.createTempFile(\"dummy\", \".tmp\");\n-    BeamStreamProvider.injectJarIntoContextClassLoader(f.toURI().toURL());\n-    // must not throw any exceptions\n-    assertTrue(true);\n-  }\n-}\n+      @Test\n+      public void testInjectPathToClassloader() throws IOException {\n+        File f = File.createTempFile(\"dummy\", \".tmp\");\n+        BeamStreamProvider.injectJarIntoContextClassLoader(f.toURI().toURL());\n+        // must not throw any exceptions\n+        assertTrue(true);\n+      }\n+    }\n+    \n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}