{
    "error_id": "683",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl;\n\nimport java.util.List;\nimport java.util.Map;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/683/NativeHistoricActivityInstanceQueryImpl.java\nindex c770876f15..6ac31ee3ff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/683/NativeHistoricActivityInstanceQueryImpl.java\n@@ -1,45 +1,46 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.history.HistoricActivityInstance;\r\n-import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-\r\n-public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+\n+public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 46
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/683/NativeHistoricActivityInstanceQueryImpl.java\nindex c770876f15..99c7944a83 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/683/NativeHistoricActivityInstanceQueryImpl.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- * \r\n+ *\r\n  *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n+ *\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.activiti.engine.impl;\r\n \r\n import java.util.List;\r\n@@ -22,24 +23,24 @@ import org.activiti.engine.impl.interceptor.CommandExecutor;\n \r\n public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\r\n \r\n-  private static final long serialVersionUID = 1L;\r\n+    private static final long serialVersionUID = 1L;\r\n \r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n+    public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n+        super(commandContext);\r\n+    }\r\n \r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n+    public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n+        super(commandExecutor);\r\n+    }\r\n \r\n-  // results ////////////////////////////////////////////////////////////////\r\n+    // results ////////////////////////////////////////////////////////////////\r\n \r\n-  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n+    public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n+        return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n+    }\r\n \r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n-  }\r\n+    public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n+        return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 37.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/683/NativeHistoricActivityInstanceQueryImpl.java\nindex c770876f15..5e057715ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/683/NativeHistoricActivityInstanceQueryImpl.java\n@@ -10,36 +10,37 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.history.HistoricActivityInstance;\r\n-import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-\r\n-public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+\n+\n+public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+    }\n+\n+    public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+    }\r\n+\r\n+  // results ////////////////////////////////////////////////////////////////\n+\n+    public List<HistoricActivityInstance> executeList(CommandContext commandContext,\n+                                                      Map<String, Object> parameterMap,\n+                                                      int firstResult, int maxResults) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\n+    }\n+\n+    public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/683/NativeHistoricActivityInstanceQueryImpl.java\nindex c770876f15..6ac31ee3ff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/683/NativeHistoricActivityInstanceQueryImpl.java\n@@ -1,45 +1,46 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.history.HistoricActivityInstance;\r\n-import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-\r\n-public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+\n+public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 46
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/683/NativeHistoricActivityInstanceQueryImpl.java\nindex c770876f15..6ac31ee3ff 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/683/NativeHistoricActivityInstanceQueryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/683/NativeHistoricActivityInstanceQueryImpl.java\n@@ -1,45 +1,46 @@\n-/* Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *      http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n- */\r\n-package org.activiti.engine.impl;\r\n-\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.activiti.engine.history.HistoricActivityInstance;\r\n-import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\r\n-import org.activiti.engine.impl.interceptor.CommandContext;\r\n-import org.activiti.engine.impl.interceptor.CommandExecutor;\r\n-\r\n-public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\r\n-\r\n-  private static final long serialVersionUID = 1L;\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\r\n-    super(commandContext);\r\n-  }\r\n-\r\n-  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\r\n-    super(commandExecutor);\r\n-  }\r\n-\r\n-  // results ////////////////////////////////////////////////////////////////\r\n-\r\n-  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\r\n-  }\r\n-\r\n-  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\r\n-    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\r\n-  }\r\n-\r\n-}\r\n+/* Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.activiti.engine.impl;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.activiti.engine.history.HistoricActivityInstance;\n+import org.activiti.engine.history.NativeHistoricActivityInstanceQuery;\n+import org.activiti.engine.impl.interceptor.CommandContext;\n+import org.activiti.engine.impl.interceptor.CommandExecutor;\n+\n+public class NativeHistoricActivityInstanceQueryImpl extends AbstractNativeQuery<NativeHistoricActivityInstanceQuery, HistoricActivityInstance> implements NativeHistoricActivityInstanceQuery {\n+\n+  private static final long serialVersionUID = 1L;\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandContext commandContext) {\n+    super(commandContext);\n+  }\n+\n+  public NativeHistoricActivityInstanceQueryImpl(CommandExecutor commandExecutor) {\n+    super(commandExecutor);\n+  }\n+\n+  // results ////////////////////////////////////////////////////////////////\n+\n+  public List<HistoricActivityInstance> executeList(CommandContext commandContext, Map<String, Object> parameterMap, int firstResult, int maxResults) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstancesByNativeQuery(parameterMap, firstResult, maxResults);\n+  }\n+\n+  public long executeCount(CommandContext commandContext, Map<String, Object> parameterMap) {\n+    return commandContext.getHistoricActivityInstanceEntityManager().findHistoricActivityInstanceCountByNativeQuery(parameterMap);\n+  }\n+\n+}\n",
            "diff_size": 46
        }
    ]
}