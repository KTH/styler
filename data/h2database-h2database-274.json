{
    "error_id": "274",
    "information": {
        "errors": [
            {
                "line": "71",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                            }\n                        }\n                        left = newList.size() == 1 ? newList.get(0) //\n                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n                        break;\n                    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/274/NullPredicate.java\nindex 40d02ed4fe..c0765fad85 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler/274/NullPredicate.java\n@@ -68,7 +68,7 @@ public final class NullPredicate extends SimplePredicate {\n                                 newList.add(e);\n                             }\n                         }\n-                        left = newList.size() == 1 ? newList.get(0) //\n+                            left = newList.size() == 1 ? newList.get(0) //\n                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/274/NullPredicate.java\nindex 40d02ed4fe..aec289d890 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/intellij/274/NullPredicate.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression.condition;\n \n import java.util.ArrayList;\n@@ -24,130 +25,134 @@ import org.h2.value.ValueRow;\n  */\n public final class NullPredicate extends SimplePredicate {\n \n-    private boolean optimized;\n+  private boolean optimized;\n \n-    public NullPredicate(Expression left, boolean not, boolean whenOperand) {\n-        super(left, not, whenOperand);\n-    }\n+  public NullPredicate(Expression left, boolean not, boolean whenOperand) {\n+    super(left, not, whenOperand);\n+  }\n \n-    @Override\n-    public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n-        return getWhenSQL(left.getSQL(builder, sqlFlags, AUTO_PARENTHESES), sqlFlags);\n-    }\n+  @Override\n+  public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n+    return getWhenSQL(left.getSQL(builder, sqlFlags, AUTO_PARENTHESES),\n+        sqlFlags);\n+  }\n \n-    @Override\n-    public StringBuilder getWhenSQL(StringBuilder builder, int sqlFlags) {\n-        return builder.append(not ? \" IS NOT NULL\" : \" IS NULL\");\n-    }\n+  @Override\n+  public StringBuilder getWhenSQL(StringBuilder builder, int sqlFlags) {\n+    return builder.append(not ? \" IS NOT NULL\" : \" IS NULL\");\n+  }\n \n-    @Override\n-    public Expression optimize(Session session) {\n-        if (optimized) {\n-            return this;\n-        }\n-        Expression o = super.optimize(session);\n-        if (o != this) {\n-            return o;\n-        }\n-        optimized = true;\n-        if (!whenOperand && left instanceof ExpressionList) {\n-            ExpressionList list = (ExpressionList) left;\n-            if (!list.isArray()) {\n-                for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n-                    if (list.getSubexpression(i).isNullConstant()) {\n-                        if (not) {\n-                            return ValueExpression.FALSE;\n-                        }\n-                        ArrayList<Expression> newList = new ArrayList<>(count - 1);\n-                        for (int j = 0; j < i; j++) {\n-                            newList.add(list.getSubexpression(j));\n-                        }\n-                        for (int j = i + 1; j < count; j++) {\n-                            Expression e = list.getSubexpression(j);\n-                            if (!e.isNullConstant()) {\n-                                newList.add(e);\n-                            }\n-                        }\n-                        left = newList.size() == 1 ? newList.get(0) //\n-                                : new ExpressionList(newList.toArray(new Expression[0]), false);\n-                        break;\n-                    }\n-                }\n+  @Override\n+  public Expression optimize(Session session) {\n+    if (optimized) {\n+      return this;\n+    }\n+    Expression o = super.optimize(session);\n+    if (o != this) {\n+      return o;\n+    }\n+    optimized = true;\n+    if (!whenOperand && left instanceof ExpressionList) {\n+      ExpressionList list = (ExpressionList) left;\n+      if (!list.isArray()) {\n+        for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n+          if (list.getSubexpression(i).isNullConstant()) {\n+            if (not) {\n+              return ValueExpression.FALSE;\n+            }\n+            ArrayList<Expression> newList = new ArrayList<>(count - 1);\n+            for (int j = 0; j < i; j++) {\n+              newList.add(list.getSubexpression(j));\n             }\n+            for (int j = i + 1; j < count; j++) {\n+              Expression e = list.getSubexpression(j);\n+              if (!e.isNullConstant()) {\n+                newList.add(e);\n+              }\n+            }\n+            left = newList.size() == 1 ? newList.get(0) //\n+                : new ExpressionList(newList.toArray(new Expression[0]), false);\n+            break;\n+          }\n         }\n-        return this;\n+      }\n     }\n+    return this;\n+  }\n \n-    @Override\n-    public Value getValue(Session session) {\n-        return ValueBoolean.get(getValue(left.getValue(session)));\n-    }\n+  @Override\n+  public Value getValue(Session session) {\n+    return ValueBoolean.get(getValue(left.getValue(session)));\n+  }\n \n-    @Override\n-    public boolean getWhenValue(Session session, Value left) {\n-        if (!whenOperand) {\n-            return super.getWhenValue(session, left);\n-        }\n-        return getValue(left);\n+  @Override\n+  public boolean getWhenValue(Session session, Value left) {\n+    if (!whenOperand) {\n+      return super.getWhenValue(session, left);\n     }\n+    return getValue(left);\n+  }\n \n-    private boolean getValue(Value left) {\n-        if (left.getType().getValueType() == Value.ROW) {\n-            for (Value v : ((ValueRow) left).getList()) {\n-                if (v != ValueNull.INSTANCE ^ not) {\n-                    return false;\n-                }\n-            }\n-            return true;\n+  private boolean getValue(Value left) {\n+    if (left.getType().getValueType() == Value.ROW) {\n+      for (Value v : ((ValueRow) left).getList()) {\n+        if (v != ValueNull.INSTANCE ^ not) {\n+          return false;\n         }\n-        return left == ValueNull.INSTANCE ^ not;\n+      }\n+      return true;\n     }\n+    return left == ValueNull.INSTANCE ^ not;\n+  }\n \n-    @Override\n-    public Expression getNotIfPossible(Session session) {\n-        if (whenOperand) {\n-            return null;\n-        }\n-        Expression o = optimize(session);\n-        if (o != this) {\n-            return o.getNotIfPossible(session);\n-        }\n-        switch (left.getType().getValueType()) {\n-        case Value.UNKNOWN:\n-        case Value.ROW:\n-            return null;\n-        }\n-        return new NullPredicate(left, !not, false);\n+  @Override\n+  public Expression getNotIfPossible(Session session) {\n+    if (whenOperand) {\n+      return null;\n+    }\n+    Expression o = optimize(session);\n+    if (o != this) {\n+      return o.getNotIfPossible(session);\n     }\n+    switch (left.getType().getValueType()) {\n+      case Value.UNKNOWN:\n+      case Value.ROW:\n+        return null;\n+    }\n+    return new NullPredicate(left, !not, false);\n+  }\n \n-    @Override\n-    public void createIndexConditions(Session session, TableFilter filter) {\n-        if (not || whenOperand || !filter.getTable().isQueryComparable()) {\n-            return;\n-        }\n-        if (left instanceof ExpressionColumn) {\n-            createNullIndexCondition(filter, (ExpressionColumn) left);\n-        } else if (left instanceof ExpressionList) {\n-            ExpressionList list = (ExpressionList) left;\n-            if (!list.isArray()) {\n-                for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n-                    Expression e = list.getSubexpression(i);\n-                    if (e instanceof ExpressionColumn) {\n-                        createNullIndexCondition(filter, (ExpressionColumn) e);\n-                    }\n-                }\n-            }\n+  @Override\n+  public void createIndexConditions(Session session, TableFilter filter) {\n+    if (not || whenOperand || !filter.getTable().isQueryComparable()) {\n+      return;\n+    }\n+    if (left instanceof ExpressionColumn) {\n+      createNullIndexCondition(filter, (ExpressionColumn) left);\n+    } else if (left instanceof ExpressionList) {\n+      ExpressionList list = (ExpressionList) left;\n+      if (!list.isArray()) {\n+        for (int i = 0, count = list.getSubexpressionCount(); i < count; i++) {\n+          Expression e = list.getSubexpression(i);\n+          if (e instanceof ExpressionColumn) {\n+            createNullIndexCondition(filter, (ExpressionColumn) e);\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private static void createNullIndexCondition(TableFilter filter, ExpressionColumn c) {\n-        /*\n-         * Columns with row value data type aren't valid, but perform such check\n-         * to be sure.\n-         */\n-        if (filter == c.getTableFilter() && c.getType().getValueType() != Value.ROW) {\n-            filter.addIndexCondition(IndexCondition.get(Comparison.EQUAL_NULL_SAFE, c, ValueExpression.NULL));\n-        }\n+  private static void createNullIndexCondition(TableFilter filter,\n+                                               ExpressionColumn c) {\n+    /*\n+     * Columns with row value data type aren't valid, but perform such check\n+     * to be sure.\n+     */\n+    if (filter == c.getTableFilter() &&\n+        c.getType().getValueType() != Value.ROW) {\n+      filter.addIndexCondition(IndexCondition\n+          .get(Comparison.EQUAL_NULL_SAFE, c, ValueExpression.NULL));\n     }\n+  }\n \n }\n",
            "diff_size": 136
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/274/NullPredicate.java\nindex 40d02ed4fe..5338c54da6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/naturalize/274/NullPredicate.java\n@@ -150,4 +150,4 @@ public final class NullPredicate extends SimplePredicate {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/274/NullPredicate.java\nindex 40d02ed4fe..c0765fad85 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_random/274/NullPredicate.java\n@@ -68,7 +68,7 @@ public final class NullPredicate extends SimplePredicate {\n                                 newList.add(e);\n                             }\n                         }\n-                        left = newList.size() == 1 ? newList.get(0) //\n+                            left = newList.size() == 1 ? newList.get(0) //\n                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/274/NullPredicate.java\nindex 40d02ed4fe..21296a527c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/errored/1/274/NullPredicate.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/h2database-h2database/styler_three_grams/274/NullPredicate.java\n@@ -67,8 +67,7 @@ public final class NullPredicate extends SimplePredicate {\n                             if (!e.isNullConstant()) {\n                                 newList.add(e);\n                             }\n-                        }\n-                        left = newList.size() == 1 ? newList.get(0) //\n+                        }left = newList.size() == 1 ? newList.get(0) //\n                                 : new ExpressionList(newList.toArray(new Expression[0]), false);\n                         break;\n                     }\n",
            "diff_size": 2
        }
    ]
}