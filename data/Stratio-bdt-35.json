{
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.stratio.qa.utils;\n\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.common.xcontent.XContentBuilder;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..a73e4c6db6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler/35/ElasticSearchUtilsIT.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.utils;\n \n import org.elasticsearch.client.RequestOptions;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..292ed29c29 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/intellij/35/ElasticSearchUtilsIT.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.utils;\n \n import org.elasticsearch.client.RequestOptions;\n@@ -34,24 +35,29 @@ import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n \n public class ElasticSearchUtilsIT {\n     private final Logger logger = LoggerFactory\n-            .getLogger(ElasticSearchUtilsIT.class);\n+        .getLogger(ElasticSearchUtilsIT.class);\n \n     private ElasticSearchUtils es_utils;\n \n     @BeforeMethod\n     public void setSettingsTest() {\n         es_utils = new ElasticSearchUtils();\n-        LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n-        settings_map.put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n+        LinkedHashMap<String, Object> settings_map =\n+            new LinkedHashMap<String, Object>();\n+        settings_map.put(\"cluster.name\",\n+            System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n         es_utils.setSettings(settings_map);\n-        assertThat(es_utils.getSettings().get(\"cluster.name\")).as(\"Non empty Exception list on boot\").isEqualTo(System\n-                .getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n+        assertThat(es_utils.getSettings().get(\"cluster.name\"))\n+            .as(\"Non empty Exception list on boot\").isEqualTo(System\n+            .getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n     }\n \n     @Test\n     public void connectTest() throws IOException {\n         es_utils.connect();\n-        assertThat(es_utils.getClient().info(RequestOptions.DEFAULT).getClusterName()).isNotNull();\n+        assertThat(\n+            es_utils.getClient().info(RequestOptions.DEFAULT).getClusterName())\n+            .isNotNull();\n         es_utils.getClient().close();\n     }\n \n@@ -95,15 +101,16 @@ public class ElasticSearchUtilsIT {\n         }\n         es_utils.createSingleIndex(\"testindex\");\n         XContentBuilder document = jsonBuilder()\n-                .startObject()\n-                .field(\"ident\", 1)\n-                .field(\"name\", \"test\")\n-                .field(\"money\", 10.2)\n-                .field(\"new\", false).endObject();\n+            .startObject()\n+            .field(\"ident\", 1)\n+            .field(\"name\", \"test\")\n+            .field(\"money\", 10.2)\n+            .field(\"new\", false).endObject();\n         try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n+            List<JSONObject> results =\n+                es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n                     \"ident\", \"1\",\n                     \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n@@ -125,21 +132,23 @@ public class ElasticSearchUtilsIT {\n         }\n         es_utils.createSingleIndex(\"testindex\");\n         XContentBuilder document = jsonBuilder()\n-                .startObject()\n-                .field(\"ident\", 1)\n-                .field(\"name\", \"test\")\n-                .field(\"money\", 10.2)\n-                .field(\"new\", false).endObject();\n+            .startObject()\n+            .field(\"ident\", 1)\n+            .field(\"name\", \"test\")\n+            .field(\"money\", 10.2)\n+            .field(\"new\", false).endObject();\n         try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n+            List<JSONObject> results =\n+                es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n                     \"ident\", \"1\",\n                     \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n-            es_utils.deleteDocument(\"testindex\",  \"1\");\n+            es_utils.deleteDocument(\"testindex\", \"1\");\n             Thread.sleep(2000);\n-            List<JSONObject> results2 = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n+            List<JSONObject> results2 =\n+                es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n                     \"ident\", \"1\",\n                     \"equals\");\n             assertThat(results2.size()).isEqualTo(0);\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "103",
                    "severity": "error",
                    "message": "'try' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "'try' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..d386697a74 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/naturalize/35/ElasticSearchUtilsIT.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.utils;\n \n import org.elasticsearch.client.RequestOptions;\n@@ -44,8 +45,7 @@ public class ElasticSearchUtilsIT {\n         LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n         settings_map.put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n         es_utils.setSettings(settings_map);\n-        assertThat(es_utils.getSettings().get(\"cluster.name\")).as(\"Non empty Exception list on boot\").isEqualTo(System\n-                .getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n+        assertThat(es_utils.getSettings().get(\"cluster.name\")).as(\"Non empty Exception list on boot\").isEqualTo(System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n     }\n \n     @Test\n@@ -100,12 +100,10 @@ public class ElasticSearchUtilsIT {\n                 .field(\"name\", \"test\")\n                 .field(\"money\", 10.2)\n                 .field(\"new\", false).endObject();\n-        try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+try {\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n             JSONObject result = results.get(0);\n             assertThat(result.getInt(\"ident\")).isEqualTo(1);\n@@ -130,21 +128,17 @@ public class ElasticSearchUtilsIT {\n                 .field(\"name\", \"test\")\n                 .field(\"money\", 10.2)\n                 .field(\"new\", false).endObject();\n-        try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+try {\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n-            es_utils.deleteDocument(\"testindex\",  \"1\");\n+            es_utils.deleteDocument(\"testindex\", \"1\");\n             Thread.sleep(2000);\n-            List<JSONObject> results2 = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results2 = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results2.size()).isEqualTo(0);\n         } catch (Exception ex) {\n             ex.printStackTrace();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..752d9fecb6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/codebuff/35/ElasticSearchUtilsIT.java\n@@ -22,7 +22,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n-\n import java.io.IOException;\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n@@ -30,11 +29,13 @@ import java.util.LinkedHashMap;\n import java.util.List;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+\n import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\n \n+\n public class ElasticSearchUtilsIT {\n-    private final Logger logger = LoggerFactory\n-            .getLogger(ElasticSearchUtilsIT.class);\n+\n+    private final Logger logger = LoggerFactory.getLogger(ElasticSearchUtilsIT.class);\n \n     private ElasticSearchUtils es_utils;\n \n@@ -44,10 +45,10 @@ public class ElasticSearchUtilsIT {\n         LinkedHashMap<String, Object> settings_map = new LinkedHashMap<String, Object>();\n         settings_map.put(\"cluster.name\", System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n         es_utils.setSettings(settings_map);\n-        assertThat(es_utils.getSettings().get(\"cluster.name\")).as(\"Non empty Exception list on boot\").isEqualTo(System\n-                .getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n+        assertThat(es_utils.getSettings().get(\"cluster.name\")).as(\"Non empty Exception list on boot\").isEqualTo(System.getProperty(\"ES_CLUSTER\", \"elasticsearch\"));\n     }\n \n+\n     @Test\n     public void connectTest() throws IOException {\n         es_utils.connect();\n@@ -55,6 +56,7 @@ public class ElasticSearchUtilsIT {\n         es_utils.getClient().close();\n     }\n \n+\n     @Test\n     public void createIndexTest() throws UnknownHostException {\n         es_utils.connect();\n@@ -65,6 +67,7 @@ public class ElasticSearchUtilsIT {\n         assertThat(es_utils.indexExists(\"testindex\")).isTrue();\n     }\n \n+\n     @Test\n     public void dropIndexTest() throws IOException {\n         es_utils.connect();\n@@ -76,6 +79,7 @@ public class ElasticSearchUtilsIT {\n         es_utils.getClient().close();\n     }\n \n+\n     @Test\n     public void dropAllIndexTest() throws IOException {\n         es_utils.connect();\n@@ -87,6 +91,7 @@ public class ElasticSearchUtilsIT {\n         es_utils.getClient().close();\n     }\n \n+\n     @Test\n     public void indexDocument() throws UnknownHostException, IOException {\n         es_utils.connect();\n@@ -94,18 +99,11 @@ public class ElasticSearchUtilsIT {\n             es_utils.dropSingleIndex(\"testindex\");\n         }\n         es_utils.createSingleIndex(\"testindex\");\n-        XContentBuilder document = jsonBuilder()\n-                .startObject()\n-                .field(\"ident\", 1)\n-                .field(\"name\", \"test\")\n-                .field(\"money\", 10.2)\n-                .field(\"new\", false).endObject();\n+        XContentBuilder document = jsonBuilder().startObject().field(\"ident\", 1).field(\"name\", \"test\").field(\"money\", 10.2).field(\"new\", false).endObject();\n         try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n             JSONObject result = results.get(0);\n             assertThat(result.getInt(\"ident\")).isEqualTo(1);\n@@ -117,6 +115,7 @@ public class ElasticSearchUtilsIT {\n         }\n     }\n \n+\n     @Test\n     public void deleteDocument() throws UnknownHostException, IOException {\n         es_utils.connect();\n@@ -124,27 +123,18 @@ public class ElasticSearchUtilsIT {\n             es_utils.dropSingleIndex(\"testindex\");\n         }\n         es_utils.createSingleIndex(\"testindex\");\n-        XContentBuilder document = jsonBuilder()\n-                .startObject()\n-                .field(\"ident\", 1)\n-                .field(\"name\", \"test\")\n-                .field(\"money\", 10.2)\n-                .field(\"new\", false).endObject();\n+        XContentBuilder document = jsonBuilder().startObject().field(\"ident\", 1).field(\"name\", \"test\").field(\"money\", 10.2).field(\"new\", false).endObject();\n         try {\n-            es_utils.indexDocument(\"testindex\",  \"1\", document);\n+            es_utils.indexDocument(\"testindex\", \"1\", document);\n             Thread.sleep(2000);\n-            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results.size()).isEqualTo(1);\n-            es_utils.deleteDocument(\"testindex\",  \"1\");\n+            es_utils.deleteDocument(\"testindex\", \"1\");\n             Thread.sleep(2000);\n-            List<JSONObject> results2 = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\",\n-                    \"ident\", \"1\",\n-                    \"equals\");\n+            List<JSONObject> results2 = es_utils.searchSimpleFilterElasticsearchQuery(\"testindex\", \"ident\", \"1\", \"equals\");\n             assertThat(results2.size()).isEqualTo(0);\n         } catch (Exception ex) {\n             ex.printStackTrace();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..a73e4c6db6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_random/35/ElasticSearchUtilsIT.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.utils;\n \n import org.elasticsearch.client.RequestOptions;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/35/ElasticSearchUtilsIT.java\nindex 4c159f6994..a73e4c6db6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/errored/1/35/ElasticSearchUtilsIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Stratio-bdt/styler_three_grams/35/ElasticSearchUtilsIT.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.stratio.qa.utils;\n \n import org.elasticsearch.client.RequestOptions;\n",
            "diff_size": 1
        }
    ]
}