{
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "80",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 134).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private void validateNotDuplicateFile(String filePath) {\n    if (entries.containsKey(filePath)) {\n      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n      logger.error(digiDoc4JException.getMessage());\n      throw digiDoc4JException;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "column": "40",
                    "severity": "error",
                    "message": "'{' at column 40 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/21/ManifestParser.java\nindex 06be8d49e1..983642775a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/21/ManifestParser.java\n@@ -76,10 +76,11 @@ public class ManifestParser implements Serializable {\n   }\n \n   private void validateNotDuplicateFile(String filePath) {\n-    if (entries.containsKey(filePath)) {\n-      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n-      logger.error(digiDoc4JException.getMessage());\n-      throw digiDoc4JException;\n-    }\n+    if (entries.containsKey(filePath)) { DuplicateDataFileExceptiondigiDoc4JException=newDuplicateDataFileException(\n+\n+    \"duplicate entry in manifest file: \" + filePath);\n+    logger.error(digiDoc4JException.getMessage());\n+    throw digiDoc4JException;\n   }\n }\n+}\n",
            "diff_size": 6
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/21/ManifestParser.java\nindex 06be8d49e1..b7f9248daf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/21/ManifestParser.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.manifest;\n \n@@ -77,7 +77,8 @@ public class ManifestParser implements Serializable {\n \n   private void validateNotDuplicateFile(String filePath) {\n     if (entries.containsKey(filePath)) {\n-      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n+      DuplicateDataFileException digiDoc4JException =\n+          new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n       logger.error(digiDoc4JException.getMessage());\n       throw digiDoc4JException;\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/21/ManifestParser.java\nindex 06be8d49e1..ca9b2392c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/21/ManifestParser.java\n@@ -82,4 +82,4 @@ public class ManifestParser implements Serializable {\n       throw digiDoc4JException;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/21/ManifestParser.java\nindex 06be8d49e1..4ca1b25540 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/21/ManifestParser.java\n@@ -14,72 +14,75 @@ import java.io.Serializable;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.digidoc4j.exceptions.DuplicateDataFileException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.w3c.dom.Element;\n import org.w3c.dom.NamedNodeMap;\n import org.w3c.dom.Node;\n-\n import eu.europa.esig.dss.DSSDocument;\n import eu.europa.esig.dss.DomUtils;\n \n+\n public class ManifestParser implements Serializable {\n \n-  private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n-  private static final String NAMESPACE = \"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\";\n-  private DSSDocument manifestFile;\n-  private Map<String, ManifestEntry> entries;\n+    private static final Logger logger = LoggerFactory.getLogger(ManifestParser.class);\n+    private static final String NAMESPACE = \"urn:oasis:names:tc:opendocument:xmlns:manifest:1.0\";\n+    private DSSDocument manifestFile;\n+    private Map<String, ManifestEntry> entries;\n+\n \n-  public ManifestParser(DSSDocument manifestFile) {\n+    public ManifestParser(DSSDocument manifestFile) {\n     this.manifestFile = manifestFile;\n-  }\n+    }\n+\n \n-  public boolean containsManifestFile() {\n+    public boolean containsManifestFile() {\n     return manifestFile != null;\n-  }\n+    }\n \n-  public Map<String, ManifestEntry> getManifestFileItems() {\n+\n+    public Map<String, ManifestEntry> getManifestFileItems() {\n     if (!containsManifestFile()) {\n-      return Collections.emptyMap();\n+        return Collections.emptyMap();\n     }\n     entries = new HashMap<>();\n     loadFileEntriesFromManifest();\n     return entries;\n-  }\n+    }\n \n-  private void loadFileEntriesFromManifest() {\n+    private void loadFileEntriesFromManifest() {\n     Element root = loadManifestXml();\n     Node firstChild = root.getFirstChild();\n     while (firstChild != null) {\n-      String nodeName = firstChild.getLocalName();\n-      if (\"file-entry\".equals(nodeName)) {\n-        addFileEntry(firstChild);\n-      }\n-      firstChild = firstChild.getNextSibling();\n+        String nodeName = firstChild.getLocalName();\n+        if (\"file-entry\".equals(nodeName)) {\n+                                   addFileEntry(firstChild);\n+        }\n+        firstChild = firstChild.getNextSibling();\n+    }\n     }\n-  }\n \n-  private Element loadManifestXml() {\n+    private Element loadManifestXml() {\n     return DomUtils.buildDOM(manifestFile).getDocumentElement();\n-  }\n+    }\n \n-  private void addFileEntry(Node firstChild) {\n+    private void addFileEntry(Node firstChild) {\n     NamedNodeMap attributes = firstChild.getAttributes();\n     String filePath = attributes.getNamedItemNS(NAMESPACE, \"full-path\").getTextContent();\n     String mimeType = attributes.getNamedItemNS(NAMESPACE, \"media-type\").getTextContent();\n     if (!\"/\".equals(filePath)) {\n-      validateNotDuplicateFile(filePath);\n-      entries.put(filePath, new ManifestEntry(filePath, mimeType));\n+        validateNotDuplicateFile(filePath);\n+        entries.put(filePath, new ManifestEntry(filePath, mimeType));\n+    }\n     }\n-  }\n \n-  private void validateNotDuplicateFile(String filePath) {\n+    private void validateNotDuplicateFile(String filePath) {\n     if (entries.containsKey(filePath)) {\n-      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n-      logger.error(digiDoc4JException.getMessage());\n-      throw digiDoc4JException;\n+        DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n+        logger.error(digiDoc4JException.getMessage());\n+        throw digiDoc4JException;\n+    }\n     }\n-  }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "122",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "122",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/21/ManifestParser.java\nindex 06be8d49e1..24d0ff1e74 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/21/ManifestParser.java\n@@ -77,9 +77,10 @@ public class ManifestParser implements Serializable {\n \n   private void validateNotDuplicateFile(String filePath) {\n     if (entries.containsKey(filePath)) {\n-      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n-      logger.error(digiDoc4JException.getMessage());\n-      throw digiDoc4JException;\n-    }\n-  }\n-}\n+      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \"+\n+      filePath);logger.error(digiDoc4JException.getMessage());\n+       throw digiDoc4JException;\n+     }\n+   }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "79",
                    "column": "40",
                    "severity": "error",
                    "message": "'{' at column 40 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "86",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/21/ManifestParser.java\nindex 06be8d49e1..983642775a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/21/ManifestParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/21/ManifestParser.java\n@@ -76,10 +76,11 @@ public class ManifestParser implements Serializable {\n   }\n \n   private void validateNotDuplicateFile(String filePath) {\n-    if (entries.containsKey(filePath)) {\n-      DuplicateDataFileException digiDoc4JException = new DuplicateDataFileException(\"duplicate entry in manifest file: \" + filePath);\n-      logger.error(digiDoc4JException.getMessage());\n-      throw digiDoc4JException;\n-    }\n+    if (entries.containsKey(filePath)) { DuplicateDataFileExceptiondigiDoc4JException=newDuplicateDataFileException(\n+\n+    \"duplicate entry in manifest file: \" + filePath);\n+    logger.error(digiDoc4JException.getMessage());\n+    throw digiDoc4JException;\n   }\n }\n+}\n",
            "diff_size": 6
        }
    ]
}