{
    "error_id": "295",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.el;\n\nimport org.activiti.engine.ActivitiException;\nimport org.activiti.engine.delegate.DelegateExecution;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/295/UelExpressionCondition.java\nindex fbe75fed13..59f87cba97 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/295/UelExpressionCondition.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import org.activiti.engine.ActivitiException;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/295/UelExpressionCondition.java\nindex fbe75fed13..bdebf0b73a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/295/UelExpressionCondition.java\n@@ -24,28 +24,25 @@ import org.activiti.engine.impl.Condition;\n \n /**\n  * {@link Condition} that resolves an UEL expression at runtime.\n- *\n-\n-\n  */\n public class UelExpressionCondition implements Condition {\n \n-  protected Expression expression;\n+    protected Expression expression;\n \n-  public UelExpressionCondition(Expression expression) {\n-    this.expression = expression;\n-  }\n+    public UelExpressionCondition(Expression expression) {\n+        this.expression = expression;\n+    }\n \n-  public boolean evaluate(String sequenceFlowId, DelegateExecution execution) {\n-    Object result = expression.getValue(execution);\n+    public boolean evaluate(String sequenceFlowId, DelegateExecution execution) {\n+        Object result = expression.getValue(execution);\n \n-    if (result == null) {\n-      throw new ActivitiException(\"condition expression returns null (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \")\");\n-    }\n-    if (!(result instanceof Boolean)) {\n-      throw new ActivitiException(\"condition expression returns non-Boolean (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \"): \" + result + \" (\" + result.getClass().getName() + \")\");\n+        if (result == null) {\n+            throw new ActivitiException(\"condition expression returns null (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \")\");\n+        }\n+        if (!(result instanceof Boolean)) {\n+            throw new ActivitiException(\"condition expression returns non-Boolean (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \"): \" + result + \" (\" + result.getClass().getName() + \")\");\n+        }\n+        return (Boolean) result;\n     }\n-    return (Boolean) result;\n-  }\n \n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/295/UelExpressionCondition.java\nindex fbe75fed13..952a1b7175 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/295/UelExpressionCondition.java\n@@ -28,24 +28,26 @@ import org.activiti.engine.impl.Condition;\n \n \n  */\n+\n+\n public class UelExpressionCondition implements Condition {\n \n-  protected Expression expression;\n+    protected Expression expression;\n \n-  public UelExpressionCondition(Expression expression) {\n+    public UelExpressionCondition(Expression expression) {\n     this.expression = expression;\n-  }\n+    }\n \n-  public boolean evaluate(String sequenceFlowId, DelegateExecution execution) {\n+    public boolean evaluate(String sequenceFlowId, DelegateExecution execution) {\n     Object result = expression.getValue(execution);\n-\n     if (result == null) {\n-      throw new ActivitiException(\"condition expression returns null (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \")\");\n+        throw new ActivitiException(\"condition expression returns null (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \")\");\n     }\n+\n     if (!(result instanceof Boolean)) {\n-      throw new ActivitiException(\"condition expression returns non-Boolean (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \"): \" + result + \" (\" + result.getClass().getName() + \")\");\n+        throw new ActivitiException(\"condition expression returns non-Boolean (sequenceFlowId: \" + sequenceFlowId + \" execution: \" + execution + \"): \" + result + \" (\" + result.getClass().getName() + \")\");\n     }\n     return (Boolean) result;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/295/UelExpressionCondition.java\nindex fbe75fed13..59f87cba97 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/295/UelExpressionCondition.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import org.activiti.engine.ActivitiException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/295/UelExpressionCondition.java\nindex fbe75fed13..59f87cba97 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/295/UelExpressionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/295/UelExpressionCondition.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import org.activiti.engine.ActivitiException;\n",
            "diff_size": 1
        }
    ]
}