{
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "656",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "\n    public void validateSuppliedId() {\n        HProject ip = getInstance(); // this will raise an EntityNotFound\n        // exception\n        // when id is invalid and conversation will not\n        // start",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "656",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "651",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/31/ProjectHome.java\nindex 72c114220e..5e527d20d4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/intellij/31/ProjectHome.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import static com.google.common.base.Strings.isNullOrEmpty;\n@@ -95,9 +96,9 @@ import static org.zanata.model.ProjectRole.Maintainer;\n @Model\n @Transactional\n public class ProjectHome extends SlugHome<HProject>\n-        implements HasLanguageSettings {\n+    implements HasLanguageSettings {\n     private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ProjectHome.class);\n+        org.slf4j.LoggerFactory.getLogger(ProjectHome.class);\n     private static final long serialVersionUID = 1L;\n \n     // /**\n@@ -204,9 +205,9 @@ public class ProjectHome extends SlugHome<HProject>\n         List<HLocale> activeLocales = localeDAO.findAllActive();\n         // only include those not already in the project\n         List<HLocale> filteredList = activeLocales.stream()\n-                .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n-                .collect(\n-                        Collectors.toList());\n+            .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n+            .collect(\n+                Collectors.toList());\n         Collections.sort(filteredList, ComparatorUtil.LOCALE_COMPARATOR);\n         return filteredList;\n     }\n@@ -214,29 +215,29 @@ public class ProjectHome extends SlugHome<HProject>\n     private Map<String, Boolean> roleRestrictions;\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     private Map<ValidationId, ValidationAction> availableValidations =\n-            Maps.newHashMap();\n+        Maps.newHashMap();\n     private final java.util.concurrent.atomic.AtomicReference<List<HProjectIteration>>\n-            versions = new java.util.concurrent.atomic.AtomicReference<>();\n+        versions = new java.util.concurrent.atomic.AtomicReference<>();\n     private String selectedProjectType;\n     @Inject\n     private ProjectMaintainersAutocomplete maintainerAutocomplete;\n     private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n+        new InMemoryListFilter<HPerson>() {\n \n-                private static final long serialVersionUID =\n-                        8259700829800303578L;\n+            private static final long serialVersionUID =\n+                8259700829800303578L;\n \n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n+            @Override\n+            protected List<HPerson> fetchAll() {\n+                return getInstanceMaintainers();\n+            }\n \n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return StringUtils.containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n+            @Override\n+            protected boolean include(HPerson elem, String filter) {\n+                return StringUtils.containsIgnoreCase(elem.getName(),\n+                    filter);\n+            }\n+        };\n \n     public void createNew() {\n         clearSlugs();\n@@ -258,7 +259,7 @@ public class ProjectHome extends SlugHome<HProject>\n     @Transactional\n     public void setSelectedProjectType(String selectedProjectType) {\n         if (!StringUtils.isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+            && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setDefaultProjectType(projectType);\n         }\n@@ -282,7 +283,7 @@ public class ProjectHome extends SlugHome<HProject>\n         List<HLocale> locales;\n         if (StringUtils.isNotEmpty(getSlug())) {\n             locales =\n-                    localeServiceImpl.getSupportedLanguageByProject(getSlug());\n+                localeServiceImpl.getSupportedLanguageByProject(getSlug());\n         } else {\n             locales = localeServiceImpl.getSupportedAndEnabledLocales();\n         }\n@@ -315,7 +316,7 @@ public class ProjectHome extends SlugHome<HProject>\n \n     /**\n      * Set or remove a locale alias based on form input.\n-     *\n+     * <p>\n      * Uses value from enteredLocaleAlias. If the value is null or empty, the\n      * alias (if any) is removed for the given locale, otherwise the alias is\n      * replaced with the value.\n@@ -332,24 +333,22 @@ public class ProjectHome extends SlugHome<HProject>\n         if (isNullOrEmpty(alias)) {\n             if (hadAlias) {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                        msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n+                    msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n             } else {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                        .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n+                    .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n             }\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n+                msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n         }\n     }\n \n     /**\n      * Set or remove a locale alias without showing any message.\n      *\n-     * @param localeId\n-     *            for which to set alias\n-     * @param alias\n-     *            new alias to use. Use empty string to remove alias.\n+     * @param localeId for which to set alias\n+     * @param alias    new alias to use. Use empty string to remove alias.\n      * @return true if there was already an alias, otherwise false.\n      */\n     private boolean setLocaleAliasSilently(LocaleId localeId, String alias) {\n@@ -363,7 +362,7 @@ public class ProjectHome extends SlugHome<HProject>\n             }\n         } else {\n             final boolean sameAlias =\n-                    hadAlias && alias.equals(aliases.get(localeId));\n+                hadAlias && alias.equals(aliases.get(localeId));\n             if (!sameAlias) {\n                 // no need to ensure overriding locales, aliases are independent\n                 aliases.put(localeId, alias);\n@@ -376,8 +375,7 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Remove a locale alias without showing any message.\n      *\n-     * @param localeId\n-     *            that will have its locale alias removed.\n+     * @param localeId that will have its locale alias removed.\n      * @return true if the locale had an alias, otherwise false.\n      */\n     private boolean removeAliasSilently(LocaleId localeId) {\n@@ -389,7 +387,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n         for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 boolean hadAlias = removeAliasSilently(entry.getKey());\n                 if (hadAlias) {\n@@ -405,7 +403,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n         List<LocaleId> aliasedLocales =\n-                new ArrayList<>(getLocaleAliases().keySet());\n+            new ArrayList<>(getLocaleAliases().keySet());\n         for (LocaleId aliasedLocale : aliasedLocales) {\n             boolean hadAlias = removeAliasSilently(aliasedLocale);\n             if (hadAlias) {\n@@ -419,20 +417,19 @@ public class ProjectHome extends SlugHome<HProject>\n      * Show an appropriate message for the removal of aliases from locales with\n      * the given IDs.\n      *\n-     * @param removed\n-     *            ids of locales that had aliases removed\n+     * @param removed ids of locales that had aliases removed\n      */\n     private void showRemovedAliasesMessage(List<LocaleId> removed) {\n         if (removed.isEmpty()) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n+                msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n         } else if (removed.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n+                .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n-                            StringUtils.join(removed, \", \")));\n+                msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n+                    StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -441,7 +438,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         disableLocaleSilently(locale);\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                \"jsf.languageSettings.LanguageDisabled\", locale.getLocaleId()));\n+            \"jsf.languageSettings.LanguageDisabled\", locale.getLocaleId()));\n     }\n \n     @Transactional\n@@ -449,7 +446,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removedLocales = new ArrayList<>();\n         for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasEnabled = disableLocaleSilently(entry.getKey());\n                 if (wasEnabled) {\n@@ -463,12 +460,12 @@ public class ProjectHome extends SlugHome<HProject>\n             // users are editing it.\n         } else if (removedLocales.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n-                            removedLocales.get(0)));\n+                msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+                    removedLocales.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n-                            StringUtils.join(removedLocales, \", \")));\n+                msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n+                    StringUtils.join(removedLocales, \", \")));\n         }\n     }\n \n@@ -480,13 +477,12 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Disable a locale without printing any message.\n      *\n-     * @param locale\n-     *            locale that should be disabled.\n+     * @param locale locale that should be disabled.\n      * @return false if the locale was already disabled, true otherwise.\n      */\n     private boolean disableLocaleSilently(HLocale locale) {\n         final Set<HLocale> customizedLocales =\n-                getInstance().getCustomizedLocales();\n+            getInstance().getCustomizedLocales();\n         ensureOverridingLocales();\n         boolean localeWasEnabled = customizedLocales.remove(locale);\n         getLocaleAliases().remove(locale.getLocaleId());\n@@ -500,7 +496,7 @@ public class ProjectHome extends SlugHome<HProject>\n         enableLocaleSilently(locale);\n         LocaleId localeId = locale.getLocaleId();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n+            msgs.format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n     }\n \n     @Transactional\n@@ -508,7 +504,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> addedLocales = new ArrayList<>();\n         for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasDisabled = enableLocaleSilently(entry.getKey());\n                 if (wasDisabled) {\n@@ -522,12 +518,12 @@ public class ProjectHome extends SlugHome<HProject>\n             // users are editing it.\n         } else if (addedLocales.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageEnabled\",\n-                            addedLocales.get(0)));\n+                msgs.format(\"jsf.languageSettings.LanguageEnabled\",\n+                    addedLocales.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n-                            StringUtils.join(addedLocales, \", \")));\n+                msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n+                    StringUtils.join(addedLocales, \", \")));\n         }\n     }\n \n@@ -539,14 +535,13 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Enable a given locale without printing any message.\n      *\n-     * @param locale\n-     *            locale that should be enabled.\n+     * @param locale locale that should be enabled.\n      * @return false if the locale was already enabled, true otherwise.\n      */\n     private boolean enableLocaleSilently(HLocale locale) {\n         ensureOverridingLocales();\n         final boolean localeWasDisabled =\n-                getInstance().getCustomizedLocales().add(locale);\n+            getInstance().getCustomizedLocales().add(locale);\n         refreshDisabledLocales();\n         return localeWasDisabled;\n     }\n@@ -559,7 +554,7 @@ public class ProjectHome extends SlugHome<HProject>\n         refreshDisabledLocales();\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.project.LanguageUpdateFromGlobal\"));\n+            msgs.get(\"jsf.project.LanguageUpdateFromGlobal\"));\n     }\n \n     private void removeAliasesForDisabledLocales() {\n@@ -621,8 +616,8 @@ public class ProjectHome extends SlugHome<HProject>\n         getInstance().setPrivateProject(privateProject);\n         update();\n         String message = privateProject\n-                ? msgs.get(\"jsf.permission.private.Active\")\n-                : msgs.get(\"jsf.permission.private.Inactive\");\n+            ? msgs.get(\"jsf.permission.private.Active\")\n+            : msgs.get(\"jsf.permission.private.Inactive\");\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, message);\n     }\n \n@@ -631,13 +626,13 @@ public class ProjectHome extends SlugHome<HProject>\n         Session session = (Session) getEntityManager().getDelegate();\n         if (projectId == null) {\n             HProject project = (HProject) session.byNaturalId(HProject.class)\n-                    .using(\"slug\", getSlug()).load();\n+                .using(\"slug\", getSlug()).load();\n             validateProjectState(project);\n             projectId = project.getId();\n             return project;\n         } else {\n             HProject project =\n-                    (HProject) session.byId(HProject.class).load(projectId);\n+                (HProject) session.byId(HProject.class).load(projectId);\n             validateProjectState(project);\n             return project;\n         }\n@@ -646,8 +641,8 @@ public class ProjectHome extends SlugHome<HProject>\n     private void validateProjectState(HProject project) {\n         if (project == null || project.getStatus() == EntityStatus.OBSOLETE) {\n             log.warn(\n-                    \"Project [id={}, slug={}], does not exist or is soft deleted: {}\",\n-                    projectId, getSlug(), project);\n+                \"Project [id={}, slug={}], does not exist or is soft deleted: {}\",\n+                projectId, getSlug(), project);\n             throw new ProjectNotFoundException(getSlug());\n         }\n     }\n@@ -665,14 +660,14 @@ public class ProjectHome extends SlugHome<HProject>\n     @Transactional\n     public void updateCopyTrans(String action, String value) {\n         copyTransOptionsModel\n-                .setInstance(getInstance().getDefaultCopyTransOpts());\n+            .setInstance(getInstance().getDefaultCopyTransOpts());\n         copyTransOptionsModel.update(action, value);\n         copyTransOptionsModel.save();\n         getInstance()\n-                .setDefaultCopyTransOpts(copyTransOptionsModel.getInstance());\n+            .setDefaultCopyTransOpts(copyTransOptionsModel.getInstance());\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.project.CopyTransOpts.updated\"));\n+            msgs.get(\"jsf.project.CopyTransOpts.updated\"));\n     }\n     // @Begin(join = true) /* TODO [CDI] commented out begin conversation.\n     // Verify it still works properly */\n@@ -684,7 +679,7 @@ public class ProjectHome extends SlugHome<HProject>\n         validateSuppliedId();\n         if (getInstance().getDefaultCopyTransOpts() != null) {\n             copyTransOptionsModel\n-                    .setInstance(getInstance().getDefaultCopyTransOpts());\n+                .setInstance(getInstance().getDefaultCopyTransOpts());\n         }\n     }\n \n@@ -692,7 +687,7 @@ public class ProjectHome extends SlugHome<HProject>\n         if (!isValidName((String) e.getNewValue())) {\n             String componentId = e.getComponent().getId();\n             facesMessages.addToControl(componentId,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+                msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n         }\n     }\n \n@@ -721,14 +716,14 @@ public class ProjectHome extends SlugHome<HProject>\n         }\n         if (!isSlugAvailable(slug)) {\n             facesMessages.addToControl(componentId,\n-                    \"This Project ID is not available\");\n+                \"This Project ID is not available\");\n             return false;\n         }\n         boolean valid = new SlugValidator().isValid(slug, null);\n         if (!valid) {\n             String validationMessages =\n-                    ResourceBundle.getBundle(\"ValidationMessages\").getString(\n-                            \"javax.validation.constraints.Slug.message\");\n+                ResourceBundle.getBundle(\"ValidationMessages\").getString(\n+                    \"javax.validation.constraints.Slug.message\");\n             facesMessages.addToControl(componentId, validationMessages);\n             return false;\n         }\n@@ -741,7 +736,7 @@ public class ProjectHome extends SlugHome<HProject>\n \n     private void updateProjectType() {\n         if (!StringUtils.isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+            && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setDefaultProjectType(projectType);\n         }\n@@ -758,16 +753,16 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         // getInputSlugValue() can be null\n         if (!getSlug().equals(getInputSlugValue())\n-                && !validateSlug(getInputSlugValue(), \"slug\")) {\n+            && !validateSlug(getInputSlugValue(), \"slug\")) {\n             return null;\n         }\n         if (getInputSlugValue() != null\n-                && !getSlug().equals(getInputSlugValue())) {\n+            && !getSlug().equals(getInputSlugValue())) {\n             getInstance().setSlug(getInputSlugValue());\n         }\n         if (!isValidName(getInstance().getName())) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+                msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n             return null;\n         }\n         boolean softDeleted = false;\n@@ -782,7 +777,7 @@ public class ProjectHome extends SlugHome<HProject>\n             return result;\n         }\n         facesMessages.addGlobal(SEVERITY_INFO,\n-                msgs.get(\"jsf.project.settings.updated\"));\n+            msgs.get(\"jsf.project.settings.updated\"));\n         if (!getSlug().equals(getInstance().getSlug())) {\n             projectSlug.setValue(getInstance().getSlug());\n             return \"project-slug-updated\";\n@@ -800,19 +795,19 @@ public class ProjectHome extends SlugHome<HProject>\n         getInstance().setSlug(getInputSlugValue());\n         if (!isValidName(getInstance().getName())) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+                msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n             return null;\n         }\n         if (StringUtils.isEmpty(selectedProjectType)\n-                || selectedProjectType.equals(\"null\")) {\n+            || selectedProjectType.equals(\"null\")) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    \"Project type not selected\");\n+                \"Project type not selected\");\n             return null;\n         }\n         if (StringUtils.isEmpty(selectedProjectType)\n-                || selectedProjectType.equals(\"null\")) {\n+            || selectedProjectType.equals(\"null\")) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    \"Project type not selected\");\n+                \"Project type not selected\");\n             return null;\n         }\n         updateProjectType();\n@@ -820,20 +815,20 @@ public class ProjectHome extends SlugHome<HProject>\n             // authenticatedAccount person is a detached entity, so fetch a copy\n             // that is attached to the current session.\n             HPerson creator = personDAO\n-                    .findById(currentUser.getPerson().getId());\n+                .findById(currentUser.getPerson().getId());\n             getInstance().addMaintainer(creator);\n             getInstance().getCustomizedValidations().clear();\n             for (ValidationAction validationAction : validationServiceImpl\n-                    .getValidationActions(\"\")) {\n+                .getValidationActions(\"\")) {\n                 getInstance().getCustomizedValidations().put(\n-                        validationAction.getId().name(),\n-                        validationAction.getState().name());\n+                    validationAction.getId().name(),\n+                    validationAction.getState().name());\n             }\n             retValue = super.persist();\n             webhookServiceImpl.processWebhookMaintainerChanged(\n-                    getInstance().getSlug(), creator.getAccount().getUsername(),\n-                    Maintainer, getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.ADD);\n+                getInstance().getSlug(), creator.getAccount().getUsername(),\n+                Maintainer, getInstance().getWebHooks(),\n+                ProjectMaintainerChangedEvent.ChangeType.ADD);\n         }\n         return retValue;\n     }\n@@ -861,17 +856,17 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         if (getInstanceMaintainers().size() <= 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.project.NeedAtLeastOneMaintainer\"));\n+                msgs.get(\"jsf.project.NeedAtLeastOneMaintainer\"));\n         } else {\n             getInstance().removeMaintainer(person);\n             maintainerFilter.reset();\n             update();\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.project.MaintainerRemoved\", person.getName()));\n+                .format(\"jsf.project.MaintainerRemoved\", person.getName()));\n             webhookServiceImpl.processWebhookMaintainerChanged(getSlug(),\n-                    person.getAccount().getUsername(), Maintainer,\n-                    getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.REMOVE);\n+                person.getAccount().getUsername(), Maintainer,\n+                getInstance().getWebHooks(),\n+                ProjectMaintainerChangedEvent.ChangeType.REMOVE);\n             if (person.equals(currentUser.getPerson())) {\n                 urlUtil.redirectToInternal(urlUtil.projectUrl(getSlug()));\n             }\n@@ -886,16 +881,16 @@ public class ProjectHome extends SlugHome<HProject>\n         if (getInstance().isRestrictedByRoles()) {\n             getRoleRestrictions().put(roleName, isRestricted);\n             for (Map.Entry<String, Boolean> entry : getRoleRestrictions()\n-                    .entrySet()) {\n+                .entrySet()) {\n                 if (entry.getValue()) {\n                     getInstance().getAllowedRoles()\n-                            .add(accountRoleDAO.findByName(entry.getKey()));\n+                        .add(accountRoleDAO.findByName(entry.getKey()));\n                 }\n             }\n         }\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.RolesUpdated\"));\n+            msgs.get(\"jsf.RolesUpdated\"));\n     }\n \n     @Transactional\n@@ -904,7 +899,7 @@ public class ProjectHome extends SlugHome<HProject>\n         getInstance().setStatus(EntityStatus.valueOf(initial));\n         if (getInstance().getStatus() == EntityStatus.READONLY) {\n             for (HProjectIteration version : getInstance()\n-                    .getProjectIterations()) {\n+                .getProjectIterations()) {\n                 if (version.getStatus() == EntityStatus.ACTIVE) {\n                     version.setStatus(EntityStatus.READONLY);\n                     entityManager.merge(version);\n@@ -912,7 +907,7 @@ public class ProjectHome extends SlugHome<HProject>\n             }\n         } else if (getInstance().getStatus() == EntityStatus.OBSOLETE) {\n             for (HProjectIteration version : getInstance()\n-                    .getProjectIterations()) {\n+                .getProjectIterations()) {\n                 if (version.getStatus() != EntityStatus.OBSOLETE) {\n                     version.setStatus(EntityStatus.OBSOLETE);\n                     entityManager.merge(version);\n@@ -923,10 +918,10 @@ public class ProjectHome extends SlugHome<HProject>\n         EntityStatus status = EntityStatus.valueOf(initial);\n         if (status.equals(EntityStatus.OBSOLETE)) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.project.notification.deleted\", getSlug()));\n+                msgs.format(\"jsf.project.notification.deleted\", getSlug()));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.project.status.updated\", status));\n+                msgs.format(\"jsf.project.status.updated\", status));\n         }\n     }\n \n@@ -958,29 +953,30 @@ public class ProjectHome extends SlugHome<HProject>\n         return allRoles;\n     }\n \n-    private @NotNull List<HProjectIteration> fetchVersions() {\n+    private @NotNull\n+    List<HProjectIteration> fetchVersions() {\n         return getInstance()\n-                .getProjectIterations()\n-                .stream()\n-                .filter(it -> it.getStatus() != EntityStatus.OBSOLETE)\n-                .sorted((o1, o2) -> {\n-                    EntityStatus fromStatus = o1.getStatus();\n-                    EntityStatus toStatus = o2.getStatus();\n-                    if (fromStatus.equals(toStatus)) {\n-                        return 0;\n-                    }\n-                    if (fromStatus.equals(EntityStatus.ACTIVE)) {\n-                        return -1;\n-                    }\n-                    if (fromStatus.equals(EntityStatus.READONLY)) {\n-                        if (toStatus.equals(EntityStatus.ACTIVE)) {\n-                            return 1;\n-                        }\n-                        return -1;\n-                    }\n+            .getProjectIterations()\n+            .stream()\n+            .filter(it -> it.getStatus() != EntityStatus.OBSOLETE)\n+            .sorted((o1, o2) -> {\n+                EntityStatus fromStatus = o1.getStatus();\n+                EntityStatus toStatus = o2.getStatus();\n+                if (fromStatus.equals(toStatus)) {\n                     return 0;\n-                })\n-                .collect(Collectors.toList());\n+                }\n+                if (fromStatus.equals(EntityStatus.ACTIVE)) {\n+                    return -1;\n+                }\n+                if (fromStatus.equals(EntityStatus.READONLY)) {\n+                    if (toStatus.equals(EntityStatus.ACTIVE)) {\n+                        return 1;\n+                    }\n+                    return -1;\n+                }\n+                return 0;\n+            })\n+            .collect(Collectors.toList());\n     }\n \n     @Override\n@@ -1001,10 +997,10 @@ public class ProjectHome extends SlugHome<HProject>\n     private Map<ValidationId, ValidationAction> getValidations() {\n         if (availableValidations.isEmpty()) {\n             Collection<ValidationAction> validationList = validationServiceImpl\n-                    .getValidationActions(getInstance().getSlug());\n+                .getValidationActions(getInstance().getSlug());\n             for (ValidationAction validationAction : validationList) {\n                 availableValidations.put(validationAction.getId(),\n-                        validationAction);\n+                    validationAction);\n             }\n         }\n         return availableValidations;\n@@ -1015,34 +1011,34 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         ValidationId validationId = ValidationId.valueOf(name);\n         for (Map.Entry<ValidationId, ValidationAction> entry : getValidations()\n-                .entrySet()) {\n+            .entrySet()) {\n             if (entry.getKey().name().equals(name)) {\n                 getValidations().get(validationId)\n-                        .setState(ValidationAction.State.valueOf(state));\n+                    .setState(ValidationAction.State.valueOf(state));\n                 getInstance().getCustomizedValidations().put(\n-                        entry.getKey().name(),\n-                        entry.getValue().getState().name());\n+                    entry.getKey().name(),\n+                    entry.getValue().getState().name());\n                 ensureMutualExclusivity(getValidations().get(validationId));\n                 break;\n             }\n         }\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.validation.updated\",\n-                        validationId.getDisplayName(), state));\n+            msgs.format(\"jsf.validation.updated\",\n+                validationId.getDisplayName(), state));\n     }\n \n     public List<ValidationAction> getValidationList() {\n         List<ValidationAction> sortedList =\n-                Lists.newArrayList(getValidations().values());\n+            Lists.newArrayList(getValidations().values());\n         Collections.sort(sortedList,\n-                ValidationFactory.ValidationActionComparator);\n+            ValidationFactory.ValidationActionComparator);\n         return sortedList;\n     }\n \n     @Transactional\n     public void addWebHook(String url, String secret, String strTypes,\n-            String name) {\n+                           String name) {\n         identity.checkPermission(getInstance(), \"update\");\n         Set<WebhookType> types = getTypesFromString(strTypes);\n         if (types.isEmpty()) {\n@@ -1054,14 +1050,14 @@ public class ProjectHome extends SlugHome<HProject>\n         }\n         if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+                msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n         boolean isAdded = projectServiceImpl.addWebhook(getInstance(), url,\n-                secret, name, types);\n+            secret, name, types);\n         if (isAdded) {\n             facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.AddNewWebhook\", url));\n+                .addGlobal(msgs.format(\"jsf.project.AddNewWebhook\", url));\n         }\n     }\n \n@@ -1074,13 +1070,13 @@ public class ProjectHome extends SlugHome<HProject>\n             getInstance().getWebHooks().remove(webHook);\n             webHookDAO.makeTransient(webHook);\n             facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.RemoveWebhook\", url));\n+                .addGlobal(msgs.format(\"jsf.project.RemoveWebhook\", url));\n         }\n     }\n \n     @Transactional\n     public void updateWebhook(String id, String url, String secret,\n-            String strTypes, String name) {\n+                              String strTypes, String name) {\n         identity.checkPermission(getInstance(), \"update\");\n         Set<WebhookType> types = getTypesFromString(strTypes);\n         if (types.isEmpty()) {\n@@ -1092,16 +1088,16 @@ public class ProjectHome extends SlugHome<HProject>\n         }\n         Long webhookId = Long.valueOf(id);\n         if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url,\n-                webhookId)) {\n+            webhookId)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+                msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n         boolean updated = projectServiceImpl.updateWebhook(getInstance(),\n-                webhookId, url, secret, name, types);\n+            webhookId, url, secret, name, types);\n         if (updated) {\n             facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.UpdateWebhook\", url));\n+                .addGlobal(msgs.format(\"jsf.project.UpdateWebhook\", url));\n         }\n     }\n \n@@ -1109,14 +1105,14 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+                msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n         if (!isValidUrl(url)) {\n             return;\n         }\n         webhookServiceImpl.processTestEvent(identity.getAccountUsername(),\n-                getSlug(), url, secret);\n+            getSlug(), url, secret);\n     }\n \n     /**\n@@ -1125,7 +1121,7 @@ public class ProjectHome extends SlugHome<HProject>\n     private boolean isValidUrl(String url) {\n         if (!webhookServiceImpl.isValidUrl(url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.InvalidUrl\", url));\n+                msgs.format(\"jsf.project.InvalidUrl\", url));\n             return false;\n         }\n         return true;\n@@ -1138,15 +1134,15 @@ public class ProjectHome extends SlugHome<HProject>\n      * @param selectedValidationAction\n      */\n     private void\n-            ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n+    ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n         if (selectedValidationAction.getState() != ValidationAction.State.Off) {\n             for (ValidationAction exclusiveValAction : selectedValidationAction\n-                    .getExclusiveValidations()) {\n+                .getExclusiveValidations()) {\n                 getInstance().getCustomizedValidations().put(\n-                        exclusiveValAction.getId().name(),\n-                        ValidationAction.State.Off.name());\n+                    exclusiveValAction.getId().name(),\n+                    ValidationAction.State.Off.name());\n                 getValidations().get(exclusiveValAction.getId())\n-                        .setState(ValidationAction.State.Off);\n+                    .setState(ValidationAction.State.Off);\n             }\n         }\n     }\n@@ -1164,10 +1160,10 @@ public class ProjectHome extends SlugHome<HProject>\n         String status = update();\n         if (\"updated\".equals(status)) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.project.AboutPageUpdated\"));\n+                msgs.get(\"jsf.project.AboutPageUpdated\"));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.AboutPageUpdateFailed\"));\n+                msgs.get(\"jsf.project.AboutPageUpdateFailed\"));\n         }\n     }\n \n@@ -1178,7 +1174,7 @@ public class ProjectHome extends SlugHome<HProject>\n \n     @ViewScoped\n     public static class ProjectMaintainersAutocomplete\n-            extends MaintainerAutocomplete {\n+        extends MaintainerAutocomplete {\n \n         private static final long serialVersionUID = -6765972032876700000L;\n         @Inject\n@@ -1201,7 +1197,7 @@ public class ProjectHome extends SlugHome<HProject>\n         @Override\n         protected List<HPerson> getMaintainers() {\n             List<HPerson> list =\n-                    Lists.newArrayList(getInstance().getMaintainers());\n+                Lists.newArrayList(getInstance().getMaintainers());\n             Collections.sort(list, ComparatorUtil.PERSON_NAME_COMPARATOR);\n             return list;\n         }\n@@ -1222,12 +1218,12 @@ public class ProjectHome extends SlugHome<HProject>\n             reset();\n             projectHome.getMaintainerFilter().reset();\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.project.MaintainerAdded\", maintainer.getName()));\n+                \"jsf.project.MaintainerAdded\", maintainer.getName()));\n             webhookServiceImpl.processWebhookMaintainerChanged(\n-                    getInstance().getSlug(),\n-                    maintainer.getAccount().getUsername(), Maintainer,\n-                    getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.ADD);\n+                getInstance().getSlug(),\n+                maintainer.getAccount().getUsername(), Maintainer,\n+                getInstance().getWebHooks(),\n+                ProjectMaintainerChangedEvent.ChangeType.ADD);\n         }\n     }\n \n@@ -1297,12 +1293,12 @@ public class ProjectHome extends SlugHome<HProject>\n      * for a row is not automatically updated when a different row is submitted.\n      */\n     public void setEnteredLocaleAliases(\n-            final Map<LocaleId, String> enteredLocaleAliases) {\n+        final Map<LocaleId, String> enteredLocaleAliases) {\n         this.enteredLocaleAliases = enteredLocaleAliases;\n     }\n \n     public void setSelectedEnabledLocales(\n-            final Map<LocaleId, Boolean> selectedEnabledLocales) {\n+        final Map<LocaleId, Boolean> selectedEnabledLocales) {\n         this.selectedEnabledLocales = selectedEnabledLocales;\n     }\n \n@@ -1311,7 +1307,7 @@ public class ProjectHome extends SlugHome<HProject>\n     }\n \n     public void setSelectedDisabledLocales(\n-            final Map<LocaleId, Boolean> selectedDisabledLocales) {\n+        final Map<LocaleId, Boolean> selectedDisabledLocales) {\n         this.selectedDisabledLocales = selectedDisabledLocales;\n     }\n \n",
            "diff_size": 177
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "675",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/31/ProjectHome.java\nindex 72c114220e..04eb2c79ec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/codebuff/31/ProjectHome.java\n@@ -21,6 +21,7 @@\n package org.zanata.action;\n \n import static com.google.common.base.Strings.isNullOrEmpty;\n+\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -46,7 +47,6 @@ import org.hibernate.criterion.Restrictions;\n import javax.inject.Inject;\n import javax.inject.Named;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n import org.zanata.common.EntityStatus;\n import org.zanata.common.LocaleId;\n@@ -85,19 +85,20 @@ import org.zanata.webtrans.shared.model.ValidationId;\n import org.zanata.webtrans.shared.validation.ValidationFactory;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+\n import static javax.faces.application.FacesMessage.SEVERITY_ERROR;\n import static javax.faces.application.FacesMessage.SEVERITY_INFO;\n import static org.zanata.service.impl.WebhookServiceImpl.getTypesFromString;\n import static org.zanata.model.ProjectRole.Maintainer;\n \n+\n @Named(\"projectHome\")\n @ViewScoped\n @Model\n @Transactional\n public class ProjectHome extends SlugHome<HProject>\n-        implements HasLanguageSettings {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ProjectHome.class);\n+    implements HasLanguageSettings {\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ProjectHome.class);\n     private static final long serialVersionUID = 1L;\n \n     // /**\n@@ -105,6 +106,7 @@ public class ProjectHome extends SlugHome<HProject>\n     // */\n     // @Getter\n     // private String slug;\n+\n     @Inject\n     @Any\n     private ProjectSlug projectSlug;\n@@ -112,43 +114,61 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     @Nullable\n     private String inputSlugValue;\n     private Long projectId;\n+\n     @Inject\n     private ZanataIdentity identity;\n+\n     @Inject\n     private CurrentUser currentUser;\n+\n     @Inject\n     private LocaleService localeServiceImpl;\n+\n     @Inject\n     private LocaleDAO localeDAO;\n+\n     @Inject\n     private SlugEntityService slugEntityServiceImpl;\n+\n     @Inject\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"CDI proxies are Serializable\")\n     private CommonMarkRenderer renderer;\n+\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\", justification = \"CDI proxies are Serializable\")\n     @Inject\n     private EntityManager entityManager;\n+\n     @Inject\n     private FacesMessages facesMessages;\n+\n     @Inject\n     private Messages msgs;\n+\n     @Inject\n     private PersonDAO personDAO;\n+\n     @Inject\n     private AccountRoleDAO accountRoleDAO;\n+\n     @Inject\n     private WebHookDAO webHookDAO;\n+\n     @Inject\n     private ValidationService validationServiceImpl;\n+\n     @Inject\n     private CopyTransOptionsModel copyTransOptionsModel;\n+\n     @Inject\n     private WebhookServiceImpl webhookServiceImpl;\n+\n     @Inject\n     private ProjectService projectServiceImpl;\n+\n     @Inject\n     private UrlUtil urlUtil;\n     // This property is present to keep the filter in place when the region with\n@@ -200,43 +220,38 @@ public class ProjectHome extends SlugHome<HProject>\n      * Populate the list of available locales after filtering out the locales\n      * already in the project.\n      */\n+\n     private List<HLocale> findActiveNotEnabledLocales() {\n         List<HLocale> activeLocales = localeDAO.findAllActive();\n         // only include those not already in the project\n-        List<HLocale> filteredList = activeLocales.stream()\n-                .filter(hLocale -> !getEnabledLocales().contains(hLocale))\n-                .collect(\n-                        Collectors.toList());\n+        List<HLocale> filteredList = activeLocales.stream().filter(hLocale -> !getEnabledLocales().contains(hLocale))\n+                                                           .collect(Collectors.toList());\n         Collections.sort(filteredList, ComparatorUtil.LOCALE_COMPARATOR);\n         return filteredList;\n     }\n \n     private Map<String, Boolean> roleRestrictions;\n+\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n-    private Map<ValidationId, ValidationAction> availableValidations =\n-            Maps.newHashMap();\n-    private final java.util.concurrent.atomic.AtomicReference<List<HProjectIteration>>\n-            versions = new java.util.concurrent.atomic.AtomicReference<>();\n+    private Map<ValidationId, ValidationAction> availableValidations = Maps.newHashMap();\n+    private final java.util.concurrent.atomic.AtomicReference<List<HProjectIteration>> versions = new java.util.concurrent.atomic.AtomicReference<>();\n     private String selectedProjectType;\n+\n     @Inject\n     private ProjectMaintainersAutocomplete maintainerAutocomplete;\n-    private AbstractListFilter<HPerson> maintainerFilter =\n-            new InMemoryListFilter<HPerson>() {\n-\n-                private static final long serialVersionUID =\n-                        8259700829800303578L;\n+    private AbstractListFilter<HPerson> maintainerFilter = new InMemoryListFilter<HPerson>() {\n+                                                               private static final long serialVersionUID = 8259700829800303578L;\n \n-                @Override\n-                protected List<HPerson> fetchAll() {\n-                    return getInstanceMaintainers();\n-                }\n+                                                               @Override\n+                                                               protected List<HPerson> fetchAll() {\n+                                                                   return getInstanceMaintainers();\n+                                                               }\n \n-                @Override\n-                protected boolean include(HPerson elem, String filter) {\n-                    return StringUtils.containsIgnoreCase(elem.getName(),\n-                            filter);\n-                }\n-            };\n+                                                               @Override\n+                                                               protected boolean include(HPerson elem, String filter) {\n+                                                                   return StringUtils.containsIgnoreCase(elem.getName(), filter);\n+                                                               }\n+                                                           };\n \n     public void createNew() {\n         clearSlugs();\n@@ -257,8 +272,7 @@ public class ProjectHome extends SlugHome<HProject>\n \n     @Transactional\n     public void setSelectedProjectType(String selectedProjectType) {\n-        if (!StringUtils.isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+        if (!StringUtils.isEmpty(selectedProjectType) && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setDefaultProjectType(projectType);\n         }\n@@ -278,11 +292,11 @@ public class ProjectHome extends SlugHome<HProject>\n      * inherited from global locales. If the project slug is empty, all the\n      * enabled locales for the server are returned.\n      */\n+\n     public List<HLocale> getEnabledLocales() {\n         List<HLocale> locales;\n         if (StringUtils.isNotEmpty(getSlug())) {\n-            locales =\n-                    localeServiceImpl.getSupportedLanguageByProject(getSlug());\n+            locales = localeServiceImpl.getSupportedLanguageByProject(getSlug());\n         } else {\n             locales = localeServiceImpl.getSupportedAndEnabledLocales();\n         }\n@@ -302,6 +316,7 @@ public class ProjectHome extends SlugHome<HProject>\n      * Return the locale alias for the given locale in this project, if it\n      * exists, otherwise null.\n      */\n+\n     public String getLocaleAlias(HLocale locale) {\n         return getLocaleAliases().get(locale.getLocaleId());\n     }\n@@ -309,6 +324,7 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Return true if the given locale has an alias, otherwise false.\n      */\n+\n     public boolean hasLocaleAlias(HLocale locale) {\n         return getLocaleAliases().containsKey(locale.getLocaleId());\n     }\n@@ -320,6 +336,7 @@ public class ProjectHome extends SlugHome<HProject>\n      * alias (if any) is removed for the given locale, otherwise the alias is\n      * replaced with the value.\n      */\n+\n     @Transactional\n     public void updateToEnteredLocaleAlias(LocaleId localeId) {\n         identity.checkPermission(getInstance(), \"update\");\n@@ -332,14 +349,14 @@ public class ProjectHome extends SlugHome<HProject>\n         if (isNullOrEmpty(alias)) {\n             if (hadAlias) {\n                 facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                        msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n+msgs.format(\"jsf.LocaleAlias.AliasRemoved\", localeId));\n             } else {\n-                facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                        .format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n+                facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.LocaleAlias.NoAliasToRemove\", localeId));\n             }\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n+msgs.format(\"jsf.LocaleAlias.AliasSet\", localeId, alias));\n         }\n     }\n \n@@ -352,6 +369,7 @@ public class ProjectHome extends SlugHome<HProject>\n      *            new alias to use. Use empty string to remove alias.\n      * @return true if there was already an alias, otherwise false.\n      */\n+\n     private boolean setLocaleAliasSilently(LocaleId localeId, String alias) {\n         HProject instance = getInstance();\n         Map<LocaleId, String> aliases = instance.getLocaleAliases();\n@@ -362,8 +380,7 @@ public class ProjectHome extends SlugHome<HProject>\n                 aliases.remove(localeId);\n             }\n         } else {\n-            final boolean sameAlias =\n-                    hadAlias && alias.equals(aliases.get(localeId));\n+            final boolean sameAlias = hadAlias && alias.equals(aliases.get(localeId));\n             if (!sameAlias) {\n                 // no need to ensure overriding locales, aliases are independent\n                 aliases.put(localeId, alias);\n@@ -380,6 +397,7 @@ public class ProjectHome extends SlugHome<HProject>\n      *            that will have its locale alias removed.\n      * @return true if the locale had an alias, otherwise false.\n      */\n+\n     private boolean removeAliasSilently(LocaleId localeId) {\n         return setLocaleAliasSilently(localeId, \"\");\n     }\n@@ -388,8 +406,7 @@ public class ProjectHome extends SlugHome<HProject>\n     public void removeSelectedLocaleAliases() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n-        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales().entrySet()) {\n             if (entry.getValue()) {\n                 boolean hadAlias = removeAliasSilently(entry.getKey());\n                 if (hadAlias) {\n@@ -404,8 +421,7 @@ public class ProjectHome extends SlugHome<HProject>\n     public void removeAllLocaleAliases() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removed = new ArrayList<>();\n-        List<LocaleId> aliasedLocales =\n-                new ArrayList<>(getLocaleAliases().keySet());\n+        List<LocaleId> aliasedLocales = new ArrayList<>(getLocaleAliases().keySet());\n         for (LocaleId aliasedLocale : aliasedLocales) {\n             boolean hadAlias = removeAliasSilently(aliasedLocale);\n             if (hadAlias) {\n@@ -422,17 +438,18 @@ public class ProjectHome extends SlugHome<HProject>\n      * @param removed\n      *            ids of locales that had aliases removed\n      */\n+\n     private void showRemovedAliasesMessage(List<LocaleId> removed) {\n         if (removed.isEmpty()) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n+msgs.get(\"jsf.LocaleAlias.NoAliasesToRemove\"));\n         } else if (removed.size() == 1) {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.LocaleAlias.AliasRemoved\", removed.get(0)));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n-                            StringUtils.join(removed, \", \")));\n+msgs.format(\"jsf.LocaleAlias.AliasesRemoved\",\n+           StringUtils.join(removed, \", \")));\n         }\n     }\n \n@@ -440,16 +457,16 @@ public class ProjectHome extends SlugHome<HProject>\n     public void disableLocale(HLocale locale) {\n         identity.checkPermission(getInstance(), \"update\");\n         disableLocaleSilently(locale);\n-        facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                \"jsf.languageSettings.LanguageDisabled\", locale.getLocaleId()));\n+        facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+           locale.getLocaleId()));\n     }\n \n     @Transactional\n     public void disableSelectedLocales() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> removedLocales = new ArrayList<>();\n-        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales()\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : getSelectedEnabledLocales().entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasEnabled = disableLocaleSilently(entry.getKey());\n                 if (wasEnabled) {\n@@ -461,14 +478,14 @@ public class ProjectHome extends SlugHome<HProject>\n         if (removedLocales.isEmpty()) {\n             // This should not be possible in the UI, but maybe if multiple\n             // users are editing it.\n+\n         } else if (removedLocales.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n-                            removedLocales.get(0)));\n+msgs.format(\"jsf.languageSettings.LanguageDisabled\",\n+           removedLocales.get(0)));\n         } else {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n-                            StringUtils.join(removedLocales, \", \")));\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\"jsf.languageSettings.LanguagesDisabled\",\n+                                                                            StringUtils.join(removedLocales, \", \")));\n         }\n     }\n \n@@ -484,9 +501,9 @@ public class ProjectHome extends SlugHome<HProject>\n      *            locale that should be disabled.\n      * @return false if the locale was already disabled, true otherwise.\n      */\n+\n     private boolean disableLocaleSilently(HLocale locale) {\n-        final Set<HLocale> customizedLocales =\n-                getInstance().getCustomizedLocales();\n+        final Set<HLocale> customizedLocales = getInstance().getCustomizedLocales();\n         ensureOverridingLocales();\n         boolean localeWasEnabled = customizedLocales.remove(locale);\n         getLocaleAliases().remove(locale.getLocaleId());\n@@ -500,15 +517,14 @@ public class ProjectHome extends SlugHome<HProject>\n         enableLocaleSilently(locale);\n         LocaleId localeId = locale.getLocaleId();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n+msgs.format(\"jsf.languageSettings.LanguageEnabled\", localeId));\n     }\n \n     @Transactional\n     public void enableSelectedLocales() {\n         identity.checkPermission(getInstance(), \"update\");\n         List<LocaleId> addedLocales = new ArrayList<>();\n-        for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales\n-                .entrySet()) {\n+        for (Map.Entry<LocaleId, Boolean> entry : selectedDisabledLocales.entrySet()) {\n             if (entry.getValue()) {\n                 boolean wasDisabled = enableLocaleSilently(entry.getKey());\n                 if (wasDisabled) {\n@@ -520,14 +536,14 @@ public class ProjectHome extends SlugHome<HProject>\n         if (addedLocales.isEmpty()) {\n             // This should not be possible in the UI, but maybe if multiple\n             // users are editing it.\n+\n         } else if (addedLocales.size() == 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguageEnabled\",\n-                            addedLocales.get(0)));\n+msgs.format(\"jsf.languageSettings.LanguageEnabled\",\n+           addedLocales.get(0)));\n         } else {\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n-                            StringUtils.join(addedLocales, \", \")));\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\"jsf.languageSettings.LanguagesEnabled\",\n+                                                                            StringUtils.join(addedLocales, \", \")));\n         }\n     }\n \n@@ -543,10 +559,11 @@ public class ProjectHome extends SlugHome<HProject>\n      *            locale that should be enabled.\n      * @return false if the locale was already enabled, true otherwise.\n      */\n+\n     private boolean enableLocaleSilently(HLocale locale) {\n         ensureOverridingLocales();\n-        final boolean localeWasDisabled =\n-                getInstance().getCustomizedLocales().add(locale);\n+        final boolean localeWasDisabled = getInstance().getCustomizedLocales()\n+                                                       .add(locale);\n         refreshDisabledLocales();\n         return localeWasDisabled;\n     }\n@@ -559,7 +576,7 @@ public class ProjectHome extends SlugHome<HProject>\n         refreshDisabledLocales();\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.project.LanguageUpdateFromGlobal\"));\n+msgs.get(\"jsf.project.LanguageUpdateFromGlobal\"));\n     }\n \n     private void removeAliasesForDisabledLocales() {\n@@ -577,6 +594,7 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Ensure that isOverrideLocales is true, and copy data if necessary.\n      */\n+\n     private void ensureOverridingLocales() {\n         if (!isOverrideLocales()) {\n             startOverridingLocales();\n@@ -587,6 +605,7 @@ public class ProjectHome extends SlugHome<HProject>\n      * Copy locale data from project and set overrideLocales, in preparation for\n      * making customizations to the locales.\n      */\n+\n     private void startOverridingLocales() {\n         // Copied before setOverrideLocales(true) so that the currently returned\n         // values will be used as the basis for any customization.\n@@ -603,13 +622,15 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Update disabled locales to be consistent with enabled locales.\n      */\n+\n     private void refreshDisabledLocales() {\n         // will be re-generated with correct values next time it is fetched.\n         disabledLocales = null;\n     }\n \n     @Transactional\n-    public void setRestrictedByRole(String key, boolean checked) {\n+    public void setRestrictedByRole(String key,\n+        boolean checked) {\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().setRestrictedByRoles(checked);\n         update();\n@@ -620,9 +641,7 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().setPrivateProject(privateProject);\n         update();\n-        String message = privateProject\n-                ? msgs.get(\"jsf.permission.private.Active\")\n-                : msgs.get(\"jsf.permission.private.Inactive\");\n+        String message = privateProject ? msgs.get(\"jsf.permission.private.Active\") : msgs.get(\"jsf.permission.private.Inactive\");\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, message);\n     }\n \n@@ -630,14 +649,13 @@ public class ProjectHome extends SlugHome<HProject>\n     protected HProject loadInstance() {\n         Session session = (Session) getEntityManager().getDelegate();\n         if (projectId == null) {\n-            HProject project = (HProject) session.byNaturalId(HProject.class)\n-                    .using(\"slug\", getSlug()).load();\n+            HProject project = (HProject) session.byNaturalId(HProject.class).using(\"slug\", getSlug())\n+                                                                             .load();\n             validateProjectState(project);\n             projectId = project.getId();\n             return project;\n         } else {\n-            HProject project =\n-                    (HProject) session.byId(HProject.class).load(projectId);\n+            HProject project = (HProject) session.byId(HProject.class).load(projectId);\n             validateProjectState(project);\n             return project;\n         }\n@@ -645,9 +663,10 @@ public class ProjectHome extends SlugHome<HProject>\n \n     private void validateProjectState(HProject project) {\n         if (project == null || project.getStatus() == EntityStatus.OBSOLETE) {\n-            log.warn(\n-                    \"Project [id={}, slug={}], does not exist or is soft deleted: {}\",\n-                    projectId, getSlug(), project);\n+            log.warn(\"Project [id={}, slug={}], does not exist or is soft deleted: {}\",\n+projectId,\n+getSlug(),\n+project);\n             throw new ProjectNotFoundException(getSlug());\n         }\n     }\n@@ -664,15 +683,13 @@ public class ProjectHome extends SlugHome<HProject>\n \n     @Transactional\n     public void updateCopyTrans(String action, String value) {\n-        copyTransOptionsModel\n-                .setInstance(getInstance().getDefaultCopyTransOpts());\n+        copyTransOptionsModel.setInstance(getInstance().getDefaultCopyTransOpts());\n         copyTransOptionsModel.update(action, value);\n         copyTransOptionsModel.save();\n-        getInstance()\n-                .setDefaultCopyTransOpts(copyTransOptionsModel.getInstance());\n+        getInstance().setDefaultCopyTransOpts(copyTransOptionsModel.getInstance());\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.project.CopyTransOpts.updated\"));\n+msgs.get(\"jsf.project.CopyTransOpts.updated\"));\n     }\n     // @Begin(join = true) /* TODO [CDI] commented out begin conversation.\n     // Verify it still works properly */\n@@ -683,8 +700,7 @@ public class ProjectHome extends SlugHome<HProject>\n         }\n         validateSuppliedId();\n         if (getInstance().getDefaultCopyTransOpts() != null) {\n-            copyTransOptionsModel\n-                    .setInstance(getInstance().getDefaultCopyTransOpts());\n+            copyTransOptionsModel.setInstance(getInstance().getDefaultCopyTransOpts());\n         }\n     }\n \n@@ -692,7 +708,7 @@ public class ProjectHome extends SlugHome<HProject>\n         if (!isValidName((String) e.getNewValue())) {\n             String componentId = e.getComponent().getId();\n             facesMessages.addToControl(componentId,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n         }\n     }\n \n@@ -700,10 +716,12 @@ public class ProjectHome extends SlugHome<HProject>\n      * Check the name by removing any whitespaces in the string and\n      * make sure it contains at least an alphanumeric char\n      */\n+\n     public boolean isValidName(String name) {\n         String trimmedName = StringUtils.deleteWhitespace(name);\n         for (char c : trimmedName.toCharArray()) {\n-            if (Character.isDigit(c) || Character.isLetter(c)) {\n+            if (Character.isDigit(c)\n+                    || Character.isLetter(c)) {\n                 return true;\n             }\n         }\n@@ -720,15 +738,12 @@ public class ProjectHome extends SlugHome<HProject>\n             return true;\n         }\n         if (!isSlugAvailable(slug)) {\n-            facesMessages.addToControl(componentId,\n-                    \"This Project ID is not available\");\n+            facesMessages.addToControl(componentId, \"This Project ID is not available\");\n             return false;\n         }\n         boolean valid = new SlugValidator().isValid(slug, null);\n         if (!valid) {\n-            String validationMessages =\n-                    ResourceBundle.getBundle(\"ValidationMessages\").getString(\n-                            \"javax.validation.constraints.Slug.message\");\n+            String validationMessages = ResourceBundle.getBundle(\"ValidationMessages\").getString(\"javax.validation.constraints.Slug.message\");\n             facesMessages.addToControl(componentId, validationMessages);\n             return false;\n         }\n@@ -740,8 +755,7 @@ public class ProjectHome extends SlugHome<HProject>\n     }\n \n     private void updateProjectType() {\n-        if (!StringUtils.isEmpty(selectedProjectType)\n-                && !selectedProjectType.equals(\"null\")) {\n+        if (!StringUtils.isEmpty(selectedProjectType) && !selectedProjectType.equals(\"null\")) {\n             ProjectType projectType = ProjectType.valueOf(selectedProjectType);\n             getInstance().setDefaultProjectType(projectType);\n         }\n@@ -757,17 +771,15 @@ public class ProjectHome extends SlugHome<HProject>\n     public String update() {\n         identity.checkPermission(getInstance(), \"update\");\n         // getInputSlugValue() can be null\n-        if (!getSlug().equals(getInputSlugValue())\n-                && !validateSlug(getInputSlugValue(), \"slug\")) {\n+        if (!getSlug().equals(getInputSlugValue()) && !validateSlug(getInputSlugValue(), \"slug\")) {\n             return null;\n         }\n-        if (getInputSlugValue() != null\n-                && !getSlug().equals(getInputSlugValue())) {\n+        if (getInputSlugValue() != null && !getSlug().equals(getInputSlugValue())) {\n             getInstance().setSlug(getInputSlugValue());\n         }\n         if (!isValidName(getInstance().getName())) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n             return null;\n         }\n         boolean softDeleted = false;\n@@ -782,7 +794,7 @@ public class ProjectHome extends SlugHome<HProject>\n             return result;\n         }\n         facesMessages.addGlobal(SEVERITY_INFO,\n-                msgs.get(\"jsf.project.settings.updated\"));\n+msgs.get(\"jsf.project.settings.updated\"));\n         if (!getSlug().equals(getInstance().getSlug())) {\n             projectSlug.setValue(getInstance().getSlug());\n             return \"project-slug-updated\";\n@@ -800,40 +812,32 @@ public class ProjectHome extends SlugHome<HProject>\n         getInstance().setSlug(getInputSlugValue());\n         if (!isValidName(getInstance().getName())) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n+msgs.get(\"jsf.project.name.validation.alphanumeric\"));\n             return null;\n         }\n         if (StringUtils.isEmpty(selectedProjectType)\n                 || selectedProjectType.equals(\"null\")) {\n-            facesMessages.addGlobal(SEVERITY_ERROR,\n-                    \"Project type not selected\");\n+            facesMessages.addGlobal(SEVERITY_ERROR, \"Project type not selected\");\n             return null;\n         }\n         if (StringUtils.isEmpty(selectedProjectType)\n                 || selectedProjectType.equals(\"null\")) {\n-            facesMessages.addGlobal(SEVERITY_ERROR,\n-                    \"Project type not selected\");\n+            facesMessages.addGlobal(SEVERITY_ERROR, \"Project type not selected\");\n             return null;\n         }\n         updateProjectType();\n         if (currentUser.isLoggedIn()) {\n             // authenticatedAccount person is a detached entity, so fetch a copy\n             // that is attached to the current session.\n-            HPerson creator = personDAO\n-                    .findById(currentUser.getPerson().getId());\n+            HPerson creator = personDAO.findById(currentUser.getPerson().getId());\n             getInstance().addMaintainer(creator);\n             getInstance().getCustomizedValidations().clear();\n-            for (ValidationAction validationAction : validationServiceImpl\n-                    .getValidationActions(\"\")) {\n-                getInstance().getCustomizedValidations().put(\n-                        validationAction.getId().name(),\n-                        validationAction.getState().name());\n+            for (ValidationAction validationAction : validationServiceImpl.getValidationActions(\"\")) {\n+                getInstance().getCustomizedValidations().put(validationAction.getId().name(),\n+                    validationAction.getState().name());\n             }\n             retValue = super.persist();\n-            webhookServiceImpl.processWebhookMaintainerChanged(\n-                    getInstance().getSlug(), creator.getAccount().getUsername(),\n-                    Maintainer, getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.ADD);\n+            webhookServiceImpl.processWebhookMaintainerChanged(getInstance().getSlug(), creator.getAccount().getUsername(), Maintainer, getInstance().getWebHooks(), ProjectMaintainerChangedEvent.ChangeType.ADD);\n         }\n         return retValue;\n     }\n@@ -844,6 +848,7 @@ public class ProjectHome extends SlugHome<HProject>\n      *\n      * @return\n      */\n+\n     public String getAboutHtml() {\n         // we could cache this, but it may not be worth it\n         String text = getInstance().getHomeContent();\n@@ -861,17 +866,14 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         if (getInstanceMaintainers().size() <= 1) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.project.NeedAtLeastOneMaintainer\"));\n+msgs.get(\"jsf.project.NeedAtLeastOneMaintainer\"));\n         } else {\n             getInstance().removeMaintainer(person);\n             maintainerFilter.reset();\n             update();\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs\n-                    .format(\"jsf.project.MaintainerRemoved\", person.getName()));\n-            webhookServiceImpl.processWebhookMaintainerChanged(getSlug(),\n-                    person.getAccount().getUsername(), Maintainer,\n-                    getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.REMOVE);\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.project.MaintainerRemoved\", person.getName()));\n+            webhookServiceImpl.processWebhookMaintainerChanged(getSlug(), person.getAccount().getUsername(), Maintainer, getInstance().getWebHooks(), ProjectMaintainerChangedEvent.ChangeType.REMOVE);\n             if (person.equals(currentUser.getPerson())) {\n                 urlUtil.redirectToInternal(urlUtil.projectUrl(getSlug()));\n             }\n@@ -880,22 +882,21 @@ public class ProjectHome extends SlugHome<HProject>\n     }\n \n     @Transactional\n-    public void updateRoles(String roleName, boolean isRestricted) {\n+    public void updateRoles(String roleName,\n+        boolean isRestricted) {\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().getAllowedRoles().clear();\n         if (getInstance().isRestrictedByRoles()) {\n             getRoleRestrictions().put(roleName, isRestricted);\n-            for (Map.Entry<String, Boolean> entry : getRoleRestrictions()\n-                    .entrySet()) {\n+            for (Map.Entry<String, Boolean> entry : getRoleRestrictions().entrySet()) {\n                 if (entry.getValue()) {\n-                    getInstance().getAllowedRoles()\n-                            .add(accountRoleDAO.findByName(entry.getKey()));\n+                    getInstance().getAllowedRoles().add(accountRoleDAO.findByName(entry.getKey()));\n                 }\n             }\n         }\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.get(\"jsf.RolesUpdated\"));\n+msgs.get(\"jsf.RolesUpdated\"));\n     }\n \n     @Transactional\n@@ -903,16 +904,14 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         getInstance().setStatus(EntityStatus.valueOf(initial));\n         if (getInstance().getStatus() == EntityStatus.READONLY) {\n-            for (HProjectIteration version : getInstance()\n-                    .getProjectIterations()) {\n+            for (HProjectIteration version : getInstance().getProjectIterations()) {\n                 if (version.getStatus() == EntityStatus.ACTIVE) {\n                     version.setStatus(EntityStatus.READONLY);\n                     entityManager.merge(version);\n                 }\n             }\n         } else if (getInstance().getStatus() == EntityStatus.OBSOLETE) {\n-            for (HProjectIteration version : getInstance()\n-                    .getProjectIterations()) {\n+            for (HProjectIteration version : getInstance().getProjectIterations()) {\n                 if (version.getStatus() != EntityStatus.OBSOLETE) {\n                     version.setStatus(EntityStatus.OBSOLETE);\n                     entityManager.merge(version);\n@@ -923,10 +922,10 @@ public class ProjectHome extends SlugHome<HProject>\n         EntityStatus status = EntityStatus.valueOf(initial);\n         if (status.equals(EntityStatus.OBSOLETE)) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.project.notification.deleted\", getSlug()));\n+msgs.format(\"jsf.project.notification.deleted\", getSlug()));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.format(\"jsf.project.status.updated\", status));\n+msgs.format(\"jsf.project.status.updated\", status));\n         }\n     }\n \n@@ -958,29 +957,29 @@ public class ProjectHome extends SlugHome<HProject>\n         return allRoles;\n     }\n \n-    private @NotNull List<HProjectIteration> fetchVersions() {\n-        return getInstance()\n-                .getProjectIterations()\n-                .stream()\n-                .filter(it -> it.getStatus() != EntityStatus.OBSOLETE)\n-                .sorted((o1, o2) -> {\n-                    EntityStatus fromStatus = o1.getStatus();\n-                    EntityStatus toStatus = o2.getStatus();\n-                    if (fromStatus.equals(toStatus)) {\n-                        return 0;\n-                    }\n-                    if (fromStatus.equals(EntityStatus.ACTIVE)) {\n-                        return -1;\n-                    }\n-                    if (fromStatus.equals(EntityStatus.READONLY)) {\n-                        if (toStatus.equals(EntityStatus.ACTIVE)) {\n-                            return 1;\n-                        }\n-                        return -1;\n-                    }\n-                    return 0;\n-                })\n-                .collect(Collectors.toList());\n+    private @NotNull\n+    List<HProjectIteration> fetchVersions() {\n+        return getInstance().getProjectIterations()\n+                            .stream()\n+                            .filter(it -> it.getStatus() != EntityStatus.OBSOLETE)\n+                            .sorted((o1, o2) -> {\n+                                EntityStatus fromStatus = o1.getStatus();\n+                                EntityStatus toStatus = o2.getStatus();\n+                                if (fromStatus.equals(toStatus)) {\n+                                    return 0;\n+                                }\n+                                if (fromStatus.equals(EntityStatus.ACTIVE)) {\n+                                    return -1;\n+                                }\n+                                if (fromStatus.equals(EntityStatus.READONLY)) {\n+                                    if (toStatus.equals(EntityStatus.ACTIVE)) {\n+                                        return 1;\n+                                    }\n+                                    return -1;\n+                                }\n+                                return 0;\n+                            })\n+                            .collect(Collectors.toList());\n     }\n \n     @Override\n@@ -1000,11 +999,9 @@ public class ProjectHome extends SlugHome<HProject>\n \n     private Map<ValidationId, ValidationAction> getValidations() {\n         if (availableValidations.isEmpty()) {\n-            Collection<ValidationAction> validationList = validationServiceImpl\n-                    .getValidationActions(getInstance().getSlug());\n+            Collection<ValidationAction> validationList = validationServiceImpl.getValidationActions(getInstance().getSlug());\n             for (ValidationAction validationAction : validationList) {\n-                availableValidations.put(validationAction.getId(),\n-                        validationAction);\n+                availableValidations.put(validationAction.getId(), validationAction);\n             }\n         }\n         return availableValidations;\n@@ -1014,35 +1011,33 @@ public class ProjectHome extends SlugHome<HProject>\n     public void updateValidationOption(String name, String state) {\n         identity.checkPermission(getInstance(), \"update\");\n         ValidationId validationId = ValidationId.valueOf(name);\n-        for (Map.Entry<ValidationId, ValidationAction> entry : getValidations()\n-                .entrySet()) {\n-            if (entry.getKey().name().equals(name)) {\n-                getValidations().get(validationId)\n-                        .setState(ValidationAction.State.valueOf(state));\n-                getInstance().getCustomizedValidations().put(\n-                        entry.getKey().name(),\n-                        entry.getValue().getState().name());\n+        for (Map.Entry<ValidationId, ValidationAction> entry : getValidations().entrySet()) {\n+            if (entry.getKey().name()\n+                              .equals(name)) {\n+                getValidations().get(validationId).setState(ValidationAction.State.valueOf(state));\n+                getInstance().getCustomizedValidations().put(entry.getKey().name(),\n+                    entry.getValue().getState()\n+                                    .name());\n                 ensureMutualExclusivity(getValidations().get(validationId));\n                 break;\n             }\n         }\n         update();\n         facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                msgs.format(\"jsf.validation.updated\",\n-                        validationId.getDisplayName(), state));\n+msgs.format(\"jsf.validation.updated\",\n+           validationId.getDisplayName(),\n+           state));\n     }\n \n     public List<ValidationAction> getValidationList() {\n-        List<ValidationAction> sortedList =\n-                Lists.newArrayList(getValidations().values());\n+        List<ValidationAction> sortedList = Lists.newArrayList(getValidations().values());\n         Collections.sort(sortedList,\n-                ValidationFactory.ValidationActionComparator);\n+ValidationFactory.ValidationActionComparator);\n         return sortedList;\n     }\n \n     @Transactional\n-    public void addWebHook(String url, String secret, String strTypes,\n-            String name) {\n+    public void addWebHook(String url, String secret, String strTypes, String name) {\n         identity.checkPermission(getInstance(), \"update\");\n         Set<WebhookType> types = getTypesFromString(strTypes);\n         if (types.isEmpty()) {\n@@ -1054,14 +1049,12 @@ public class ProjectHome extends SlugHome<HProject>\n         }\n         if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n-        boolean isAdded = projectServiceImpl.addWebhook(getInstance(), url,\n-                secret, name, types);\n+        boolean isAdded = projectServiceImpl.addWebhook(getInstance(), url, secret, name, types);\n         if (isAdded) {\n-            facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.AddNewWebhook\", url));\n+            facesMessages.addGlobal(msgs.format(\"jsf.project.AddNewWebhook\", url));\n         }\n     }\n \n@@ -1073,14 +1066,12 @@ public class ProjectHome extends SlugHome<HProject>\n             String url = webHook.getUrl();\n             getInstance().getWebHooks().remove(webHook);\n             webHookDAO.makeTransient(webHook);\n-            facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.RemoveWebhook\", url));\n+            facesMessages.addGlobal(msgs.format(\"jsf.project.RemoveWebhook\", url));\n         }\n     }\n \n     @Transactional\n-    public void updateWebhook(String id, String url, String secret,\n-            String strTypes, String name) {\n+    public void updateWebhook(String id, String url, String secret, String strTypes, String name) {\n         identity.checkPermission(getInstance(), \"update\");\n         Set<WebhookType> types = getTypesFromString(strTypes);\n         if (types.isEmpty()) {\n@@ -1091,17 +1082,14 @@ public class ProjectHome extends SlugHome<HProject>\n             return;\n         }\n         Long webhookId = Long.valueOf(id);\n-        if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url,\n-                webhookId)) {\n+        if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url, webhookId)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n-        boolean updated = projectServiceImpl.updateWebhook(getInstance(),\n-                webhookId, url, secret, name, types);\n+        boolean updated = projectServiceImpl.updateWebhook(getInstance(), webhookId, url, secret, name, types);\n         if (updated) {\n-            facesMessages\n-                    .addGlobal(msgs.format(\"jsf.project.UpdateWebhook\", url));\n+            facesMessages.addGlobal(msgs.format(\"jsf.project.UpdateWebhook\", url));\n         }\n     }\n \n@@ -1109,23 +1097,23 @@ public class ProjectHome extends SlugHome<HProject>\n         identity.checkPermission(getInstance(), \"update\");\n         if (projectServiceImpl.isDuplicateWebhookUrl(getInstance(), url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.DuplicateUrl\", url));\n+msgs.format(\"jsf.project.DuplicateUrl\", url));\n             return;\n         }\n         if (!isValidUrl(url)) {\n             return;\n         }\n-        webhookServiceImpl.processTestEvent(identity.getAccountUsername(),\n-                getSlug(), url, secret);\n+        webhookServiceImpl.processTestEvent(identity.getAccountUsername(), getSlug(), url, secret);\n     }\n \n     /**\n      * Check if url is valid and there is no duplication of url+type\n      */\n+\n     private boolean isValidUrl(String url) {\n         if (!webhookServiceImpl.isValidUrl(url)) {\n             facesMessages.addGlobal(SEVERITY_ERROR,\n-                    msgs.format(\"jsf.project.InvalidUrl\", url));\n+msgs.format(\"jsf.project.InvalidUrl\", url));\n             return false;\n         }\n         return true;\n@@ -1137,16 +1125,13 @@ public class ProjectHome extends SlugHome<HProject>\n      *\n      * @param selectedValidationAction\n      */\n-    private void\n-            ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n+\n+    private void ensureMutualExclusivity(ValidationAction selectedValidationAction) {\n         if (selectedValidationAction.getState() != ValidationAction.State.Off) {\n-            for (ValidationAction exclusiveValAction : selectedValidationAction\n-                    .getExclusiveValidations()) {\n-                getInstance().getCustomizedValidations().put(\n-                        exclusiveValAction.getId().name(),\n-                        ValidationAction.State.Off.name());\n-                getValidations().get(exclusiveValAction.getId())\n-                        .setState(ValidationAction.State.Off);\n+            for (ValidationAction exclusiveValAction : selectedValidationAction.getExclusiveValidations()) {\n+                getInstance().getCustomizedValidations().put(exclusiveValAction.getId().name(),\n+                    ValidationAction.State.Off.name());\n+                getValidations().get(exclusiveValAction.getId()).setState(ValidationAction.State.Off);\n             }\n         }\n     }\n@@ -1158,16 +1143,17 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * Update the about page to the entered value, and show a success message.\n      */\n+\n     @Transactional\n     public void updateAboutPage() {\n         identity.checkPermission(getInstance(), \"update\");\n         String status = update();\n         if (\"updated\".equals(status)) {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n-                    msgs.get(\"jsf.project.AboutPageUpdated\"));\n+msgs.get(\"jsf.project.AboutPageUpdated\"));\n         } else {\n             facesMessages.addGlobal(FacesMessage.SEVERITY_ERROR,\n-                    msgs.get(\"jsf.project.AboutPageUpdateFailed\"));\n+msgs.get(\"jsf.project.AboutPageUpdateFailed\"));\n         }\n     }\n \n@@ -1177,31 +1163,33 @@ public class ProjectHome extends SlugHome<HProject>\n     }\n \n     @ViewScoped\n-    public static class ProjectMaintainersAutocomplete\n-            extends MaintainerAutocomplete {\n-\n+    public static class ProjectMaintainersAutocomplete extends MaintainerAutocomplete {\n         private static final long serialVersionUID = -6765972032876700000L;\n+\n         @Inject\n         private ProjectHome projectHome;\n+\n         @Inject\n         private WebhookServiceImpl webhookServiceImpl;\n+\n         @Inject\n         private Messages msgs;\n+\n         @Inject\n         private ZanataIdentity zanataIdentity;\n+\n         @Inject\n         private PersonDAO personDAO;\n+\n         @Inject\n         private FacesMessages facesMessages;\n-\n         private HProject getInstance() {\n             return projectHome.getInstance();\n         }\n \n         @Override\n         protected List<HPerson> getMaintainers() {\n-            List<HPerson> list =\n-                    Lists.newArrayList(getInstance().getMaintainers());\n+            List<HPerson> list = Lists.newArrayList(getInstance().getMaintainers());\n             Collections.sort(list, ComparatorUtil.PERSON_NAME_COMPARATOR);\n             return list;\n         }\n@@ -1209,6 +1197,7 @@ public class ProjectHome extends SlugHome<HProject>\n         /**\n          * Action when an item is selected\n          */\n+\n         @Override\n         @Transactional\n         public void onSelectItemAction() {\n@@ -1221,13 +1210,9 @@ public class ProjectHome extends SlugHome<HProject>\n             projectHome.update();\n             reset();\n             projectHome.getMaintainerFilter().reset();\n-            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO, msgs.format(\n-                    \"jsf.project.MaintainerAdded\", maintainer.getName()));\n-            webhookServiceImpl.processWebhookMaintainerChanged(\n-                    getInstance().getSlug(),\n-                    maintainer.getAccount().getUsername(), Maintainer,\n-                    getInstance().getWebHooks(),\n-                    ProjectMaintainerChangedEvent.ChangeType.ADD);\n+            facesMessages.addGlobal(FacesMessage.SEVERITY_INFO,\n+msgs.format(\"jsf.project.MaintainerAdded\", maintainer.getName()));\n+            webhookServiceImpl.processWebhookMaintainerChanged(getInstance().getSlug(), maintainer.getAccount().getUsername(), Maintainer, getInstance().getWebHooks(), ProjectMaintainerChangedEvent.ChangeType.ADD);\n         }\n     }\n \n@@ -1244,6 +1229,7 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     @Nullable\n     public String getInputSlugValue() {\n         return this.inputSlugValue;\n@@ -1252,6 +1238,7 @@ public class ProjectHome extends SlugHome<HProject>\n     /**\n      * This field is set from form input which can differ from original slug\n      */\n+\n     public void setInputSlugValue(@Nullable final String inputSlugValue) {\n         this.inputSlugValue = inputSlugValue;\n     }\n@@ -1286,6 +1273,7 @@ public class ProjectHome extends SlugHome<HProject>\n      * map in every form submission, and so that a value entered in the field\n      * for a row is not automatically updated when a different row is submitted.\n      */\n+\n     public Map<LocaleId, String> getEnteredLocaleAliases() {\n         return this.enteredLocaleAliases;\n     }\n@@ -1296,13 +1284,12 @@ public class ProjectHome extends SlugHome<HProject>\n      * map in every form submission, and so that a value entered in the field\n      * for a row is not automatically updated when a different row is submitted.\n      */\n-    public void setEnteredLocaleAliases(\n-            final Map<LocaleId, String> enteredLocaleAliases) {\n+\n+    public void setEnteredLocaleAliases(final Map<LocaleId, String> enteredLocaleAliases) {\n         this.enteredLocaleAliases = enteredLocaleAliases;\n     }\n \n-    public void setSelectedEnabledLocales(\n-            final Map<LocaleId, Boolean> selectedEnabledLocales) {\n+    public void setSelectedEnabledLocales(final Map<LocaleId, Boolean> selectedEnabledLocales) {\n         this.selectedEnabledLocales = selectedEnabledLocales;\n     }\n \n@@ -1310,8 +1297,7 @@ public class ProjectHome extends SlugHome<HProject>\n         return this.selectedDisabledLocales;\n     }\n \n-    public void setSelectedDisabledLocales(\n-            final Map<LocaleId, Boolean> selectedDisabledLocales) {\n+    public void setSelectedDisabledLocales(final Map<LocaleId, Boolean> selectedDisabledLocales) {\n         this.selectedDisabledLocales = selectedDisabledLocales;\n     }\n \n@@ -1339,4 +1325,4 @@ public class ProjectHome extends SlugHome<HProject>\n     public AbstractListFilter<HPerson> getMaintainerFilter() {\n         return this.maintainerFilter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 288
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "656",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "656",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/31/ProjectHome.java\nindex 72c114220e..6c783dd923 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/errored/1/31/ProjectHome.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/zanata-zanata-platform/styler_three_grams/31/ProjectHome.java\n@@ -653,7 +653,7 @@ public class ProjectHome extends SlugHome<HProject>\n     }\n \n     public void validateSuppliedId() {\n-        HProject ip = getInstance(); // this will raise an EntityNotFound\n+    HProject ip = getInstance(); // this will raise an EntityNotFound\n         // exception\n         // when id is invalid and conversation will not\n         // start\n",
            "diff_size": 1
        }
    ]
}