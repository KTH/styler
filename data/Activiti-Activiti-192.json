{
    "error_id": "192",
    "information": {
        "errors": [
            {
                "line": "59",
                "column": "64",
                "severity": "error",
                "message": "'?' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "                           Object value = Optional.ofNullable(f.getValue())\n                                                  .map(v -> (Expression.class.isInstance(v))\n                                                               ? Expression.class.cast(v).getValue(execution)\n                                                               : v)\n                                                  .orElse(null);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/192/BpmnMessagePayloadMappingProvider.java\nindex 256e95a705..ba2bde1a2d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/192/BpmnMessagePayloadMappingProvider.java\n@@ -55,13 +55,12 @@ public class BpmnMessagePayloadMappingProvider implements MessagePayloadMappingP\n         return Optional.of(field)\n                        .map(f -> {\n                            Object value = Optional.ofNullable(f.getValue())\n-                                                  .map(v -> (Expression.class.isInstance(v))\n-                                                               ? Expression.class.cast(v).getValue(execution)\n-                                                               : v)\n-                                                  .orElse(null);\n+                                                  .map(v -> (Expression.class.isInstance(v)) ? Expression.class.cast(v).getValue(execution)\n+                                                  : v)\n+                                     .orElse(null);\n \n-                           return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n-                        })\n-                       .get();\n-    }\n+              return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n+           })\n+          .get();\n+}\n }\n",
            "diff_size": 8
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "59",
                    "column": "37",
                    "severity": "error",
                    "message": "'?' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/192/BpmnMessagePayloadMappingProvider.java\nindex 256e95a705..6e00fb9905 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/192/BpmnMessagePayloadMappingProvider.java\n@@ -42,26 +42,26 @@ public class BpmnMessagePayloadMappingProvider implements MessagePayloadMappingP\n         Map<String, Object> payload = new LinkedHashMap<>();\n \n         fieldDeclarations.stream()\n-                         .map(field -> applyFieldDeclaration(execution,\n-                                                             field))\n-                         .forEach(entry -> payload.put(entry.getKey(), entry.getValue()));\n+                .map(field -> applyFieldDeclaration(execution,\n+                        field))\n+                .forEach(entry -> payload.put(entry.getKey(), entry.getValue()));\n \n         return Optional.of(payload)\n-                       .filter(map -> !map.isEmpty())\n-                       .map(map -> unmodifiableMap(map));\n+                .filter(map -> !map.isEmpty())\n+                .map(map -> unmodifiableMap(map));\n     }\n \n     protected Map.Entry<String, Object> applyFieldDeclaration(DelegateExecution execution, FieldDeclaration field) {\n         return Optional.of(field)\n-                       .map(f -> {\n-                           Object value = Optional.ofNullable(f.getValue())\n-                                                  .map(v -> (Expression.class.isInstance(v))\n-                                                               ? Expression.class.cast(v).getValue(execution)\n-                                                               : v)\n-                                                  .orElse(null);\n+                .map(f -> {\n+                    Object value = Optional.ofNullable(f.getValue())\n+                            .map(v -> (Expression.class.isInstance(v))\n+                                    ? Expression.class.cast(v).getValue(execution)\n+                                    : v)\n+                            .orElse(null);\n \n-                           return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n-                        })\n-                       .get();\n+                    return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n+                })\n+                .get();\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/192/BpmnMessagePayloadMappingProvider.java\nindex 256e95a705..888187cc5c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/192/BpmnMessagePayloadMappingProvider.java\n@@ -17,51 +17,36 @@\n package org.activiti.engine.impl.delegate;\n \n import static java.util.Collections.unmodifiableMap;\n-\n import java.util.AbstractMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.Expression;\n import org.activiti.engine.impl.bpmn.parser.FieldDeclaration;\n \n+\n public class BpmnMessagePayloadMappingProvider implements MessagePayloadMappingProvider {\n \n     private final List<FieldDeclaration> fieldDeclarations;\n \n     public BpmnMessagePayloadMappingProvider(List<FieldDeclaration> fieldDeclarations) {\n-        super();\n-        this.fieldDeclarations = fieldDeclarations;\n+    super();\n+    this.fieldDeclarations = fieldDeclarations;\n     }\n \n     @Override\n     public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n-        Map<String, Object> payload = new LinkedHashMap<>();\n-\n-        fieldDeclarations.stream()\n-                         .map(field -> applyFieldDeclaration(execution,\n-                                                             field))\n-                         .forEach(entry -> payload.put(entry.getKey(), entry.getValue()));\n-\n-        return Optional.of(payload)\n-                       .filter(map -> !map.isEmpty())\n-                       .map(map -> unmodifiableMap(map));\n+    Map<String, Object> payload = new LinkedHashMap<>();\n+    fieldDeclarations.stream().map(field -> applyFieldDeclaration(execution, field)).forEach(entry -> payload.put(entry.getKey(), entry.getValue()));\n+    return Optional.of(payload).filter(map -> !map.isEmpty()).map(map -> unmodifiableMap(map));\n     }\n \n     protected Map.Entry<String, Object> applyFieldDeclaration(DelegateExecution execution, FieldDeclaration field) {\n-        return Optional.of(field)\n-                       .map(f -> {\n-                           Object value = Optional.ofNullable(f.getValue())\n-                                                  .map(v -> (Expression.class.isInstance(v))\n-                                                               ? Expression.class.cast(v).getValue(execution)\n-                                                               : v)\n-                                                  .orElse(null);\n-\n-                           return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n-                        })\n-                       .get();\n+    return Optional.of(field).map(f -> {\n+                                  Object value = Optional.ofNullable(f.getValue()).map(v -> (Expression.class.isInstance(v)) ? Expression.class.cast(v).getValue(execution) : v).orElse(null);\n+                                  return new AbstractMap. SimpleImmutableEntry<>(field.getName(), value);\n+                              }).get();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/192/BpmnMessagePayloadMappingProvider.java\nindex 256e95a705..ba2bde1a2d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/192/BpmnMessagePayloadMappingProvider.java\n@@ -55,13 +55,12 @@ public class BpmnMessagePayloadMappingProvider implements MessagePayloadMappingP\n         return Optional.of(field)\n                        .map(f -> {\n                            Object value = Optional.ofNullable(f.getValue())\n-                                                  .map(v -> (Expression.class.isInstance(v))\n-                                                               ? Expression.class.cast(v).getValue(execution)\n-                                                               : v)\n-                                                  .orElse(null);\n+                                                  .map(v -> (Expression.class.isInstance(v)) ? Expression.class.cast(v).getValue(execution)\n+                                                  : v)\n+                                     .orElse(null);\n \n-                           return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n-                        })\n-                       .get();\n-    }\n+              return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n+           })\n+          .get();\n+}\n }\n",
            "diff_size": 8
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/192/BpmnMessagePayloadMappingProvider.java\nindex 256e95a705..ba2bde1a2d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/192/BpmnMessagePayloadMappingProvider.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/192/BpmnMessagePayloadMappingProvider.java\n@@ -55,13 +55,12 @@ public class BpmnMessagePayloadMappingProvider implements MessagePayloadMappingP\n         return Optional.of(field)\n                        .map(f -> {\n                            Object value = Optional.ofNullable(f.getValue())\n-                                                  .map(v -> (Expression.class.isInstance(v))\n-                                                               ? Expression.class.cast(v).getValue(execution)\n-                                                               : v)\n-                                                  .orElse(null);\n+                                                  .map(v -> (Expression.class.isInstance(v)) ? Expression.class.cast(v).getValue(execution)\n+                                                  : v)\n+                                     .orElse(null);\n \n-                           return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n-                        })\n-                       .get();\n-    }\n+              return new AbstractMap.SimpleImmutableEntry<>(field.getName(), value);\n+           })\n+          .get();\n+}\n }\n",
            "diff_size": 8
        }
    ]
}