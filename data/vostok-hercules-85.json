{
    "error_id": "85",
    "information": {
        "errors": [
            {
                "line": "76",
                "column": "54",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                }\n\n                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n                    String[] streams = ((DerivedStream) stream).getStreams();\n                    if (streams == null || streams.length == 0) {\n                        ResponseUtil.badRequest(exch);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/85/CreateStreamHandler.java\nindex b1df28f014..bf1048d772 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/85/CreateStreamHandler.java\n@@ -73,7 +73,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         ResponseUtil.badRequest(exch);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "76",
                    "column": "54",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/85/CreateStreamHandler.java\nindex b1df28f014..00248b6b9a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/85/CreateStreamHandler.java\n@@ -89,11 +89,11 @@ public class CreateStreamHandler implements HttpHandler {\n                 }\n \n                 TaskFuture taskFuture =\n-                        taskQueue.submit(\n-                                new StreamTask(stream, StreamTaskType.CREATE),\n-                                stream.getName(),\n-                                10_000L,//TODO: Move to properties\n-                                TimeUnit.MILLISECONDS);\n+                    taskQueue.submit(\n+                        new StreamTask(stream, StreamTaskType.CREATE),\n+                        stream.getName(),\n+                        10_000L,//TODO: Move to properties\n+                        TimeUnit.MILLISECONDS);\n                 if (!taskFuture.isFailed()) {\n                     ResponseUtil.internalServerError(exch);\n                     return;\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/85/CreateStreamHandler.java\nindex b1df28f014..2cd0303789 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/85/CreateStreamHandler.java\n@@ -73,7 +73,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         ResponseUtil.badRequest(exch);\n@@ -92,9 +92,10 @@ public class CreateStreamHandler implements HttpHandler {\n                         taskQueue.submit(\n                                 new StreamTask(stream, StreamTaskType.CREATE),\n                                 stream.getName(),\n-                                10_000L,//TODO: Move to properties\n+                                10_000L,\n+//TODO: Move to properties\n                                 TimeUnit.MILLISECONDS);\n-                if (!taskFuture.isFailed()) {\n+if (!taskFuture.isFailed()) {\n                     ResponseUtil.internalServerError(exch);\n                     return;\n                 }\n@@ -123,4 +124,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "79",
                    "column": "54",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/85/CreateStreamHandler.java\nindex b1df28f014..67106aff90 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/85/CreateStreamHandler.java\n@@ -18,7 +18,6 @@ import ru.kontur.vostok.hercules.meta.task.stream.StreamTaskType;\n import ru.kontur.vostok.hercules.undertow.util.ExchangeUtil;\n import ru.kontur.vostok.hercules.undertow.util.ResponseUtil;\n import ru.kontur.vostok.hercules.util.validation.Validator;\n-\n import java.io.IOException;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n@@ -26,12 +25,15 @@ import java.util.concurrent.TimeUnit;\n /**\n  * @author Gregory Koshelev\n  */\n-public class CreateStreamHandler implements HttpHandler {\n \n+\n+public class CreateStreamHandler implements HttpHandler {\n     private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n+\n     private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n \n     private final AuthManager authManager;\n+\n     private final TaskQueue<StreamTask> taskQueue;\n \n     private final ObjectReader deserializer;\n@@ -41,6 +43,7 @@ public class CreateStreamHandler implements HttpHandler {\n         this.taskQueue = taskQueue;\n \n         ObjectMapper objectMapper = new ObjectMapper();\n+\n         this.deserializer = objectMapper.readerFor(Stream.class);\n     }\n \n@@ -56,7 +59,6 @@ public class CreateStreamHandler implements HttpHandler {\n         exchange.getRequestReceiver().receiveFullBytes((exch, bytes) -> {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n-\n                 Optional<String> streamError = STREAM_VALIDATOR.validate(stream);\n                 if (streamError.isPresent()) {\n                     ResponseUtil.badRequest(exch);\n@@ -69,6 +71,7 @@ public class CreateStreamHandler implements HttpHandler {\n                         ResponseUtil.unauthorized(exch);\n                         return;\n                     }\n+\n                     ResponseUtil.forbidden(exch);\n                     return;\n                 }\n@@ -79,6 +82,7 @@ public class CreateStreamHandler implements HttpHandler {\n                         ResponseUtil.badRequest(exch);\n                         return;\n                     }\n+\n                     for (String sourceStream : streams) {\n                         authResult = authManager.authRead(apiKey, sourceStream);\n                         if (!authResult.isSuccess()) {\n@@ -88,26 +92,29 @@ public class CreateStreamHandler implements HttpHandler {\n                     }\n                 }\n \n-                TaskFuture taskFuture =\n-                        taskQueue.submit(\n-                                new StreamTask(stream, StreamTaskType.CREATE),\n-                                stream.getName(),\n-                                10_000L,//TODO: Move to properties\n-                                TimeUnit.MILLISECONDS);\n+                TaskFuture taskFuture = taskQueue.submit(\n+                    new StreamTask(stream, StreamTaskType.CREATE),\n+                    stream.getName(),\n+                    10_000L,//TODO: Move to properties\n+                    TimeUnit.MILLISECONDS\n+                );\n                 if (!taskFuture.isFailed()) {\n                     ResponseUtil.internalServerError(exch);\n                     return;\n                 }\n \n-                if (ExchangeUtil.extractQueryParam(exch, \"sync\").isPresent()) {\n+                if (ExchangeUtil.extractQueryParam(exch, \"sync\")\n+                .isPresent()) {\n                     taskFuture.await();\n                     if (taskFuture.isDone()) {\n                         ResponseUtil.ok(exch);\n                         return;\n                     }\n+\n                     ResponseUtil.internalServerError(exch);\n                     return;\n                 }\n+\n                 ResponseUtil.ok(exch);\n             } catch (IOException e) {\n                 LOGGER.error(\"Error on processing request\", e);\n@@ -123,4 +130,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/85/CreateStreamHandler.java\nindex b1df28f014..bf1048d772 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/85/CreateStreamHandler.java\n@@ -73,7 +73,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         ResponseUtil.badRequest(exch);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/85/CreateStreamHandler.java\nindex b1df28f014..bf1048d772 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/85/CreateStreamHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/85/CreateStreamHandler.java\n@@ -73,7 +73,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         ResponseUtil.badRequest(exch);\n",
            "diff_size": 1
        }
    ]
}