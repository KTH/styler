{
    "error_id": "503",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/503/Storage.java\nindex ea790ade79..5cbab279d4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/503/Storage.java\n@@ -25,42 +25,42 @@ import java.io.IOException;\n \n public abstract class Storage implements IStorage {\n \n-  protected long indexOffset;\n+    protected long indexOffset;\n \n-  public Storage(long indexOffset) {\n-    this.indexOffset = indexOffset;\n-  }\n+    public Storage(long indexOffset) {\n+        this.indexOffset = indexOffset;\n+    }\n \n-  public long getIndexOffset() {\n-    return indexOffset;\n-  }\n+    public long getIndexOffset() {\n+        return indexOffset;\n+    }\n \n-  public void setIndexOffset(long indexOffset) {\n-    this.indexOffset = indexOffset;\n-  }\n+    public void setIndexOffset(long indexOffset) {\n+        this.indexOffset = indexOffset;\n+    }\n \n \n-  public void serialize(ByteBuf buf) {\n-    buf.writeLong(indexOffset);\n-  }\n+    public void serialize(ByteBuf buf) {\n+        buf.writeLong(indexOffset);\n+    }\n \n-  public void deserialize(ByteBuf buf) {\n-    indexOffset = buf.readLong();\n-  }\n+    public void deserialize(ByteBuf buf) {\n+        indexOffset = buf.readLong();\n+    }\n \n-  public int bufferLen() {\n-    return 8;\n-  }\n+    public int bufferLen() {\n+        return 8;\n+    }\n \n-  public void serialize(DataOutputStream output) throws IOException {\n-    output.writeLong(indexOffset);\n-  }\n+    public void serialize(DataOutputStream output) throws IOException {\n+        output.writeLong(indexOffset);\n+    }\n \n-  public void deserialize(DataInputStream input) throws IOException {\n-    indexOffset = input.readLong();\n-  }\n+    public void deserialize(DataInputStream input) throws IOException {\n+        indexOffset = input.readLong();\n+    }\n \n-  public int dataLen() {\n-    return 8;\n-  }\n+    public int dataLen() {\n+        return 8;\n+    }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/503/Storage.java\nindex ea790ade79..a6ace007bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/503/Storage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.storage;\n \n import io.netty.buffer.ByteBuf;\n@@ -63,4 +62,4 @@ public abstract class Storage implements IStorage {\n   public int dataLen() {\n     return 8;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/503/Storage.java\nindex ea790ade79..c5501af60e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/503/Storage.java\n@@ -25,42 +25,41 @@ import java.io.IOException;\n \n public abstract class Storage implements IStorage {\n \n-  protected long indexOffset;\n+    protected long indexOffset;\n \n-  public Storage(long indexOffset) {\n+    public Storage(long indexOffset) {\n     this.indexOffset = indexOffset;\n-  }\n+    }\n \n-  public long getIndexOffset() {\n+    public long getIndexOffset() {\n     return indexOffset;\n-  }\n+    }\n \n-  public void setIndexOffset(long indexOffset) {\n+    public void setIndexOffset(long indexOffset) {\n     this.indexOffset = indexOffset;\n-  }\n+    }\n \n-\n-  public void serialize(ByteBuf buf) {\n+    public void serialize(ByteBuf buf) {\n     buf.writeLong(indexOffset);\n-  }\n+    }\n \n-  public void deserialize(ByteBuf buf) {\n+    public void deserialize(ByteBuf buf) {\n     indexOffset = buf.readLong();\n-  }\n+    }\n \n-  public int bufferLen() {\n+    public int bufferLen() {\n     return 8;\n-  }\n+    }\n \n-  public void serialize(DataOutputStream output) throws IOException {\n+    public void serialize(DataOutputStream output) throws IOException {\n     output.writeLong(indexOffset);\n-  }\n+    }\n \n-  public void deserialize(DataInputStream input) throws IOException {\n+    public void deserialize(DataInputStream input) throws IOException {\n     indexOffset = input.readLong();\n-  }\n+    }\n \n-  public int dataLen() {\n+    public int dataLen() {\n     return 8;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/503/Storage.java\nindex ea790ade79..ff98bf3650 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/503/Storage.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/503/Storage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.storage;\n \n import io.netty.buffer.ByteBuf;\n",
            "diff_size": 1
        }
    ]
}