{
    "error_id": "297",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 115).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public String toString() {\n      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/297/MUpdateParam.java\nindex 417cac5879..4e48490564 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler/297/MUpdateParam.java\n@@ -73,36 +73,35 @@ public class MUpdateParam extends UpdateParam {\n     }\n \n     @Override\n-    public String toString() {\n-      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n-    }\n+    public String toString() { return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n   }\n+}\n \n-  private final int[] rowIds;\n+private final int[] rowIds;\n \n-  public MUpdateParam(int matrixId, int[] rowIds) {\n-    super(matrixId, false);\n-    this.rowIds = rowIds;\n-  }\n+public MUpdateParam(int matrixId, int[] rowIds) {\n+  super(matrixId, false);\n+  this.rowIds = rowIds;\n+}\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-\n-    int size = partList.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : partList) {\n-      if (Utils.withinPart(part, rowIds)) {\n-        partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n-      }\n+@Override\n+public List<PartitionUpdateParam> split() {\n+  List<PartitionKey> partList = PSAgentContext.get()\n+      .getMatrixMetaManager()\n+      .getPartitions(matrixId);\n+\n+  int size = partList.size();\n+  List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+  for (PartitionKey part : partList) {\n+    if (Utils.withinPart(part, rowIds)) {\n+      partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n     }\n-    if (partParams.isEmpty()) {\n-      System.out.println(\"Rows must in same partition.\");\n-    }\n-\n-    return partParams;\n   }\n+  if (partParams.isEmpty()) {\n+    System.out.println(\"Rows must in same partition.\");\n+  }\n+\n+  return partParams;\n+}\n \n }\n",
            "diff_size": 32
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/297/MUpdateParam.java\nindex 417cac5879..e571826b02 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/297/MUpdateParam.java\n@@ -31,78 +31,79 @@ import java.util.List;\n  */\n public class MUpdateParam extends UpdateParam {\n \n-  public static class MPartitionUpdateParam extends PartitionUpdateParam {\n-    private int[] rowIds;\n-\n-    public MPartitionUpdateParam(\n-        int matrixId, PartitionKey partKey, int[] rowIds) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n-    }\n-\n-    public MPartitionUpdateParam() {\n-      super();\n-    }\n-\n-    @Override\n-    public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId: rowIds){\n-        buf.writeInt(rowId);\n-      }\n-    }\n-\n-    @Override\n-    public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowLength = buf.readInt();\n-      rowIds = new int[rowLength];\n-      for (int i = 0; i < rowLength; i++){\n-        rowIds[i] = buf.readInt();\n-      }\n+    public static class MPartitionUpdateParam extends PartitionUpdateParam {\n+        private int[] rowIds;\n+\n+        public MPartitionUpdateParam(\n+                int matrixId, PartitionKey partKey, int[] rowIds) {\n+            super(matrixId, partKey, false);\n+            this.rowIds = rowIds;\n+        }\n+\n+        public MPartitionUpdateParam() {\n+            super();\n+        }\n+\n+        @Override\n+        public void serialize(ByteBuf buf) {\n+            super.serialize(buf);\n+            buf.writeInt(rowIds.length);\n+            for (int rowId : rowIds) {\n+                buf.writeInt(rowId);\n+            }\n+        }\n+\n+        @Override\n+        public void deserialize(ByteBuf buf) {\n+            super.deserialize(buf);\n+            int rowLength = buf.readInt();\n+            rowIds = new int[rowLength];\n+            for (int i = 0; i < rowLength; i++) {\n+                rowIds[i] = buf.readInt();\n+            }\n+        }\n+\n+        @Override\n+        public int bufferLen() {\n+            return super.bufferLen() + 4 + 4 * rowIds.length;\n+        }\n+\n+        public int[] getRowIds() {\n+            return rowIds;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" +\n+                    super.toString() + \"]\";\n+        }\n     }\n \n-    @Override\n-    public int bufferLen() {\n-      return super.bufferLen() + 4 + 4 * rowIds.length;\n-    }\n+    private final int[] rowIds;\n \n-    public int[] getRowIds() {\n-      return rowIds;\n+    public MUpdateParam(int matrixId, int[] rowIds) {\n+        super(matrixId, false);\n+        this.rowIds = rowIds;\n     }\n \n     @Override\n-    public String toString() {\n-      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n+    public List<PartitionUpdateParam> split() {\n+        List<PartitionKey> partList = PSAgentContext.get()\n+                .getMatrixMetaManager()\n+                .getPartitions(matrixId);\n+\n+        int size = partList.size();\n+        List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+        for (PartitionKey part : partList) {\n+            if (Utils.withinPart(part, rowIds)) {\n+                partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n+            }\n+        }\n+        if (partParams.isEmpty()) {\n+            System.out.println(\"Rows must in same partition.\");\n+        }\n+\n+        return partParams;\n     }\n-  }\n-\n-  private final int[] rowIds;\n-\n-  public MUpdateParam(int matrixId, int[] rowIds) {\n-    super(matrixId, false);\n-    this.rowIds = rowIds;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-\n-    int size = partList.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : partList) {\n-      if (Utils.withinPart(part, rowIds)) {\n-        partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n-      }\n-    }\n-    if (partParams.isEmpty()) {\n-      System.out.println(\"Rows must in same partition.\");\n-    }\n-\n-    return partParams;\n-  }\n \n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/297/MUpdateParam.java\nindex 417cac5879..1eaecbb800 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/297/MUpdateParam.java\n@@ -48,7 +48,7 @@ public class MUpdateParam extends UpdateParam {\n     public void serialize(ByteBuf buf) {\n       super.serialize(buf);\n       buf.writeInt(rowIds.length);\n-      for (int rowId: rowIds){\n+      for (int rowId: rowIds) {\n         buf.writeInt(rowId);\n       }\n     }\n@@ -58,7 +58,7 @@ public class MUpdateParam extends UpdateParam {\n       super.deserialize(buf);\n       int rowLength = buf.readInt();\n       rowIds = new int[rowLength];\n-      for (int i = 0; i < rowLength; i++){\n+      for (int i = 0; i < rowLength; i++) {\n         rowIds[i] = buf.readInt();\n       }\n     }\n@@ -105,4 +105,4 @@ public class MUpdateParam extends UpdateParam {\n     return partParams;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/297/MUpdateParam.java\nindex 417cac5879..463a0c08a0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/297/MUpdateParam.java\n@@ -21,7 +21,6 @@ import com.tencent.angel.PartitionKey;\n import com.tencent.angel.ml.matrix.psf.common.Utils;\n import com.tencent.angel.psagent.PSAgentContext;\n import io.netty.buffer.ByteBuf;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -29,80 +28,78 @@ import java.util.List;\n /**\n  * `MUpdateParam` a parameter class for `MUpdateFunc`\n  */\n+\n public class MUpdateParam extends UpdateParam {\n \n-  public static class MPartitionUpdateParam extends PartitionUpdateParam {\n+    public static class MPartitionUpdateParam extends PartitionUpdateParam {\n     private int[] rowIds;\n \n-    public MPartitionUpdateParam(\n-        int matrixId, PartitionKey partKey, int[] rowIds) {\n-      super(matrixId, partKey, false);\n-      this.rowIds = rowIds;\n+    public MPartitionUpdateParam(int matrixId, PartitionKey partKey, int[] rowIds) {\n+        super(matrixId, partKey, false);\n+        this.rowIds = rowIds;\n     }\n \n     public MPartitionUpdateParam() {\n-      super();\n+        super();\n     }\n \n     @Override\n     public void serialize(ByteBuf buf) {\n-      super.serialize(buf);\n-      buf.writeInt(rowIds.length);\n-      for (int rowId: rowIds){\n+        super.serialize(buf);\n+        buf.writeInt(rowIds.length);\n+        for (int rowId : rowIds) {\n         buf.writeInt(rowId);\n-      }\n+        }\n     }\n \n     @Override\n     public void deserialize(ByteBuf buf) {\n-      super.deserialize(buf);\n-      int rowLength = buf.readInt();\n-      rowIds = new int[rowLength];\n-      for (int i = 0; i < rowLength; i++){\n+        super.deserialize(buf);\n+\n+        int rowLength = buf.readInt();\n+        rowIds = new int[rowLength];\n+        for (int i = 0; i < rowLength; i++) {\n         rowIds[i] = buf.readInt();\n-      }\n+        }\n     }\n \n     @Override\n     public int bufferLen() {\n-      return super.bufferLen() + 4 + 4 * rowIds.length;\n+        return super.bufferLen() + 4 + 4 * rowIds.length;\n     }\n \n     public int[] getRowIds() {\n-      return rowIds;\n+        return rowIds;\n     }\n \n     @Override\n     public String toString() {\n-      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n+        return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n+    }\n     }\n-  }\n \n-  private final int[] rowIds;\n+    private final int[] rowIds;\n \n-  public MUpdateParam(int matrixId, int[] rowIds) {\n+    public MUpdateParam(int matrixId, int[] rowIds) {\n     super(matrixId, false);\n     this.rowIds = rowIds;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixMetaManager()\n-        .getPartitions(matrixId);\n+    }\n \n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+    List<PartitionKey> partList = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     int size = partList.size();\n     List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n     for (PartitionKey part : partList) {\n-      if (Utils.withinPart(part, rowIds)) {\n+        if (Utils.withinPart(part, rowIds)) {\n         partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n-      }\n+        }\n     }\n+\n     if (partParams.isEmpty()) {\n-      System.out.println(\"Rows must in same partition.\");\n+        System.out.println(\"Rows must in same partition.\");\n     }\n-\n     return partParams;\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "No trailing whitespace allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/297/MUpdateParam.java\nindex 417cac5879..18a5355f6b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_random/297/MUpdateParam.java\n@@ -74,35 +74,33 @@ public class MUpdateParam extends UpdateParam {\n \n     @Override\n     public String toString() {\n-      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n-    }\n-  }\n-\n-  private final int[] rowIds;\n+      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds ) + \", toString()=\" +super.toString()+\"]\";\n+      } }private final int[] rowIds;\n \n-  public MUpdateParam(int matrixId, int[] rowIds) {\n-    super(matrixId, false);\n-    this.rowIds = rowIds;\n-  }\n+    public MUpdateParam(int matrixId, int[] rowIds) {\n+      super(matrixId, false);\n+      this.rowIds = rowIds;\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-\n-    int size = partList.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : partList) {\n-      if (Utils.withinPart(part, rowIds)) {\n-        partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+      List<PartitionKey> partList = PSAgentContext.get()\n+          .getMatrixMetaManager()\n+          .getPartitions(matrixId);\n+\n+      int size = partList.size();\n+      List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+      for (PartitionKey part : partList) {\n+        if (Utils.withinPart(part, rowIds)) {\n+          partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n+        }\n       }\n-    }\n-    if (partParams.isEmpty()) {\n-      System.out.println(\"Rows must in same partition.\");\n+      if (partParams.isEmpty()) {\n+        System.out.println(\"Rows must in same partition.\");\n+      }\n+\n+      return partParams;\n     }\n \n-    return partParams;\n   }\n-\n-}\n+  \n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/297/MUpdateParam.java\nindex 417cac5879..4e48490564 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/297/MUpdateParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/297/MUpdateParam.java\n@@ -73,36 +73,35 @@ public class MUpdateParam extends UpdateParam {\n     }\n \n     @Override\n-    public String toString() {\n-      return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n-    }\n+    public String toString() { return \"MPartitionUpdateParam [rowIds=\" + Arrays.toString(rowIds) + \", toString()=\" + super.toString() + \"]\";\n   }\n+}\n \n-  private final int[] rowIds;\n+private final int[] rowIds;\n \n-  public MUpdateParam(int matrixId, int[] rowIds) {\n-    super(matrixId, false);\n-    this.rowIds = rowIds;\n-  }\n+public MUpdateParam(int matrixId, int[] rowIds) {\n+  super(matrixId, false);\n+  this.rowIds = rowIds;\n+}\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> partList = PSAgentContext.get()\n-        .getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-\n-    int size = partList.size();\n-    List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n-    for (PartitionKey part : partList) {\n-      if (Utils.withinPart(part, rowIds)) {\n-        partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n-      }\n+@Override\n+public List<PartitionUpdateParam> split() {\n+  List<PartitionKey> partList = PSAgentContext.get()\n+      .getMatrixMetaManager()\n+      .getPartitions(matrixId);\n+\n+  int size = partList.size();\n+  List<PartitionUpdateParam> partParams = new ArrayList<PartitionUpdateParam>(size);\n+  for (PartitionKey part : partList) {\n+    if (Utils.withinPart(part, rowIds)) {\n+      partParams.add(new MPartitionUpdateParam(matrixId, part, rowIds));\n     }\n-    if (partParams.isEmpty()) {\n-      System.out.println(\"Rows must in same partition.\");\n-    }\n-\n-    return partParams;\n   }\n+  if (partParams.isEmpty()) {\n+    System.out.println(\"Rows must in same partition.\");\n+  }\n+\n+  return partParams;\n+}\n \n }\n",
            "diff_size": 32
        }
    ]
}