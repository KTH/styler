{
    "error_id": "222",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/222/ServerCompDenseLongIntRow.java\nindex 425f244013..14dc137f55 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/222/ServerCompDenseLongIntRow.java\n@@ -34,299 +34,300 @@ import java.io.IOException;\n  */\n public class ServerCompDenseLongIntRow extends ServerRow {\n \n-  /**\n-   * Just a view of \"row\" in ServerRow\n-   */\n-  private IntIntVector intIntRow;\n-\n-\n-  /**\n-   * Create a new ServerCompDenseLongIntRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-    this.intIntRow = (IntIntVector) row;\n-  }\n-\n-  /**\n-   * Create a new ServerCompDenseLongIntRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerCompDenseLongIntRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerCompDenseLongIntRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public int get(long index) {\n-    return intIntRow.get((int) (index - startCol));\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(long index, int value) {\n-    intIntRow.set((int) (index - startCol), value);\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public int[] get(long[] indices) {\n-    int[] values = new int[indices.length];\n-    for (int i = 0; i < indices.length; i++) {\n-      values[i] = intIntRow.get((int) (indices[i] - startCol));\n+    /**\n+     * Just a view of \"row\" in ServerRow\n+     */\n+    private IntIntVector intIntRow;\n+\n+\n+    /**\n+     * Create a new ServerCompDenseLongIntRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n+                                     int estElemNum, IntIntVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+        this.intIntRow = (IntIntVector) row;\n     }\n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements values\n-   */\n-  public void set(long[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      intIntRow.set((int) (indices[i] - startCol), values[i]);\n+\n+    /**\n+     * Create a new ServerCompDenseLongIntRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n+                                     int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n+\n+    /**\n+     * Create a new ServerCompDenseLongIntRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerCompDenseLongIntRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public int get(long index) {\n+        return intIntRow.get((int) (index - startCol));\n     }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(long index, int value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements plus values\n-   */\n-  public void addTo(long[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(long index, int value) {\n+        intIntRow.set((int) (index - startCol), value);\n     }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private int[] getValues() {\n-    return intIntRow.getStorage().getValues();\n-  }\n-\n-  /**\n-   * Get all element indices and values without lock, you must check the storage is sparse first use\n-   * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n-   *\n-   * @return all element values\n-   */\n-  public ObjectIterator<Int2IntMap.Entry> getIter() {\n-    return intIntRow.getStorage().entryIterator();\n-  }\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-\n-    try {\n-      switch (updateType) {\n-        case T_INT_SPARSE_LONGKEY:\n-        case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseSparse(buf, op);\n-          break;\n-\n-        case T_INT_DENSE:\n-          updateUseDense(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public int[] get(long[] indices) {\n+        int[] values = new int[indices.length];\n+        for (int i = 0; i < indices.length; i++) {\n+            values[i] = intIntRow.get((int) (indices[i] - startCol));\n         }\n-      }\n+        return values;\n+    }\n \n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(long[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            intIntRow.set((int) (indices[i] - startCol), values[i]);\n+        }\n     }\n-  }\n-\n-  private void updateUseDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intIntRow.set(i, intIntRow.get(i) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intIntRow.set(i, buf.readInt());\n-      }\n+\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(long index, int value) {\n+        set(index, get(index) + value);\n     }\n-  }\n-\n-  private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = (int) buf.readLong();\n-        intIntRow.set(index, intIntRow.get(index) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intIntRow.set((int) buf.readLong(), buf.readInt());\n-      }\n+\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(long[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n+        }\n     }\n-  }\n \n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private int[] getValues() {\n+        return intIntRow.getStorage().getValues();\n+    }\n \n-  @Override\n-  public int size() {\n-    return intIntRow.size();\n-  }\n+    /**\n+     * Get all element indices and values without lock, you must check the storage is sparse first use\n+     * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n+     *\n+     * @return all element values\n+     */\n+    public ObjectIterator<Int2IntMap.Entry> getIter() {\n+        return intIntRow.getStorage().entryIterator();\n+    }\n \n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n-    int[] values = getValues();\n-    for (int i = 0; i < values.length; i++) {\n-      buf.writeInt(values[i]);\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+\n+        try {\n+            switch (updateType) {\n+                case T_INT_SPARSE_LONGKEY:\n+                case T_INT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseSparse(buf, op);\n+                    break;\n+\n+                case T_INT_DENSE:\n+                    updateUseDense(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n+        }\n     }\n-  }\n-\n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n-    intIntRow = (IntIntVector) row;\n-    int[] values = getValues();\n-    for (int i = 0; i < size; i++) {\n-      values[i] = buf.readInt();\n+\n+    private void updateUseDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intIntRow.set(i, intIntRow.get(i) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intIntRow.set(i, buf.readInt());\n+            }\n+        }\n     }\n-  }\n-\n-  @Override\n-  protected int getRowSpace() {\n-    return size() * 4;\n-  }\n-\n-  @Override\n-  public ServerRow clone() {\n-    startRead();\n-    try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow.clone());\n-    } finally {\n-      endRead();\n+\n+    private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = (int) buf.readLong();\n+                intIntRow.set(index, intIntRow.get(index) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intIntRow.set((int) buf.readLong(), buf.readInt());\n+            }\n+        }\n     }\n-  }\n-\n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n-    try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow);\n-    } finally {\n-      endRead();\n+\n+\n+    @Override\n+    public int size() {\n+        return intIntRow.size();\n     }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(long index) {\n-    return intIntRow.getStorage().hasKey((int) (index - startCol));\n-  }\n-\n-  public int initAndGet(long index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      int value = (int) func.action();\n-      set(index, value);\n-      return value;\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        int[] values = getValues();\n+        for (int i = 0; i < values.length; i++) {\n+            buf.writeInt(values[i]);\n+        }\n     }\n-  }\n \n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        intIntRow = (IntIntVector) row;\n+        int[] values = getValues();\n+        for (int i = 0; i < size; i++) {\n+            values[i] = buf.readInt();\n+        }\n+    }\n+\n+    @Override\n+    protected int getRowSpace() {\n+        return size() * 4;\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readInt(), func));\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                    intIntRow.clone());\n+        } finally {\n+            endRead();\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readLong(), func));\n+    }\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                    intIntRow);\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readInt()));\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(long index) {\n+        return intIntRow.getStorage().hasKey((int) (index - startCol));\n+    }\n+\n+    public int initAndGet(long index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            int value = (int) func.action();\n+            set(index, value);\n+            return value;\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readLong()));\n+    }\n+\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(initAndGet(in.readLong(), func));\n+                }\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(get(in.readInt()));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeInt(get(in.readLong()));\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n-  @Override\n-  public void setSplit(Vector row) {\n-    super.setSplit(row);\n-    intIntRow = (IntIntVector) row;\n-  }\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+        intIntRow = (IntIntVector) row;\n+    }\n }\n",
            "diff_size": 401
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/222/ServerCompDenseLongIntRow.java\nindex 425f244013..261f424a10 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/222/ServerCompDenseLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntIntVector;\n@@ -49,8 +48,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntIntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.intIntRow = (IntIntVector) row;\n   }\n@@ -64,9 +62,8 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n+  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -175,21 +172,17 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n   @Override\n   public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n-\n-    try {\n+try {\n       switch (updateType) {\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseSparse(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n           updateUseDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -226,8 +219,7 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intIntRow.size();\n   }\n@@ -260,19 +252,17 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n     try {\n       return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n           intIntRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow);\n-    } finally {\n+      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, intIntRow);\n+  } finally {\n       endRead();\n     }\n   }\n@@ -297,11 +287,10 @@ adaptiveClone() {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeInt(initAndGet(in.readInt(), func));\n@@ -329,4 +318,4 @@ adaptiveClone() {\n     super.setSplit(row);\n     intIntRow = (IntIntVector) row;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 41.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 54.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 69.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 95.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 106.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 117.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 132.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 146.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 157.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 170.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 181.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 290.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/222/ServerCompDenseLongIntRow.java\nindex 425f244013..977750b826 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/222/ServerCompDenseLongIntRow.java\n@@ -32,12 +32,13 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n+\n public class ServerCompDenseLongIntRow extends ServerRow {\n \n   /**\n    * Just a view of \"row\" in ServerRow\n    */\n-  private IntIntVector intIntRow;\n+    private IntIntVector intIntRow;\n \n \n   /**\n@@ -49,11 +50,11 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum, IntIntVector innerRow) {\n+\n+    public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntIntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.intIntRow = (IntIntVector) row;\n-  }\n+    }\n \n   /**\n    * Create a new ServerCompDenseLongIntRow\n@@ -64,19 +65,20 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+\n+    public ServerCompDenseLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n+    }\n \n   /**\n    * Create a new ServerCompDenseLongIntRow\n    *\n    * @param rowType row type\n    */\n-  public ServerCompDenseLongIntRow(RowType rowType) {\n+\n+    public ServerCompDenseLongIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n-  }\n+    }\n \n   //////////////////////////////////////////////////////////////////////////////////////////////////\n   //Methods with out lock operation, you must call startWrite/startRead before using these methods\n@@ -89,9 +91,10 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @return element value\n    */\n-  public int get(long index) {\n+\n+    public int get(long index) {\n     return intIntRow.get((int) (index - startCol));\n-  }\n+    }\n \n   /**\n    * Set a element value without lock operation\n@@ -99,9 +102,10 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @param value element new value\n    */\n-  public void set(long index, int value) {\n+\n+    public void set(long index, int value) {\n     intIntRow.set((int) (index - startCol), value);\n-  }\n+    }\n \n   /**\n    * Get a batch elements values without lock\n@@ -109,13 +113,14 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n-  public int[] get(long[] indices) {\n+\n+    public int[] get(long[] indices) {\n     int[] values = new int[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n-      values[i] = intIntRow.get((int) (indices[i] - startCol));\n+        values[i] = intIntRow.get((int) (indices[i] - startCol));\n     }\n     return values;\n-  }\n+    }\n \n   /**\n    * Set a batch elements values without lock\n@@ -123,12 +128,13 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n-  public void set(long[] indices, int[] values) {\n+\n+    public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      intIntRow.set((int) (indices[i] - startCol), values[i]);\n+        intIntRow.set((int) (indices[i] - startCol), values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Add a element value without lock\n@@ -136,9 +142,10 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param index element index\n    * @param value element plus value\n    */\n-  public void addTo(long index, int value) {\n+\n+    public void addTo(long index, int value) {\n     set(index, get(index) + value);\n-  }\n+    }\n \n   /**\n    * Add a batch elements values without lock\n@@ -146,21 +153,23 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n-  public void addTo(long[] indices, int[] values) {\n+\n+    public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+        set(indices[i], get(indices[i]) + values[i]);\n+    }\n     }\n-  }\n \n   /**\n    * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n    *\n    * @return all element values\n    */\n-  private int[] getValues() {\n+\n+    private int[] getValues() {\n     return intIntRow.getStorage().getValues();\n-  }\n+    }\n \n   /**\n    * Get all element indices and values without lock, you must check the storage is sparse first use\n@@ -168,114 +177,108 @@ public class ServerCompDenseLongIntRow extends ServerRow {\n    *\n    * @return all element values\n    */\n-  public ObjectIterator<Int2IntMap.Entry> getIter() {\n+\n+    public ObjectIterator<Int2IntMap.Entry> getIter() {\n     return intIntRow.getStorage().entryIterator();\n-  }\n+    }\n \n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n-\n     try {\n-      switch (updateType) {\n+        switch (updateType) {\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseSparse(buf, op);\n-          break;\n-\n+            updateUseSparse(buf, op);\n+            break;\n         case T_INT_DENSE:\n-          updateUseDense(buf, op);\n-          break;\n-\n+            updateUseDense(buf, op);\n+            break;\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+            throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n \n-      updateRowVersion();\n+        }\n+        updateRowVersion();\n     } finally {\n       endWrite();\n     }\n-  }\n+    }\n \n-  private void updateUseDense(ByteBuf buf, UpdateOp op) {\n+    private void updateUseDense(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intIntRow.set(i, intIntRow.get(i) + buf.readInt());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 intIntRow.set(i, intIntRow.get(i) + buf.readInt());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intIntRow.set(i, buf.readInt());\n+               intIntRow.set(i, buf.readInt());\n       }\n     }\n-  }\n+    }\n \n-  private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n+    private void updateUseSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = (int) buf.readLong();\n-        intIntRow.set(index, intIntRow.get(index) + buf.readInt());\n-      }\n+        for (int i = 0; i < size; i++) {\n+                                 int index = (int) buf.readLong();\n+                                 intIntRow.set(index, intIntRow.get(index) + buf.readInt());\n+        }\n     } else {\n       for (int i = 0; i < size; i++) {\n-        intIntRow.set((int) buf.readLong(), buf.readInt());\n+               intIntRow.set((int) buf.readLong(), buf.readInt());\n       }\n     }\n-  }\n-\n+    }\n \n-  @Override\n-  public int size() {\n+    @Override\n+    public int size() {\n     return intIntRow.size();\n-  }\n+    }\n \n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n     int[] values = getValues();\n     for (int i = 0; i < values.length; i++) {\n-      buf.writeInt(values[i]);\n+        buf.writeInt(values[i]);\n+    }\n     }\n-  }\n \n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n     intIntRow = (IntIntVector) row;\n+\n     int[] values = getValues();\n     for (int i = 0; i < size; i++) {\n-      values[i] = buf.readInt();\n+        values[i] = buf.readInt();\n+    }\n     }\n-  }\n \n-  @Override\n-  protected int getRowSpace() {\n+    @Override\n+    protected int getRowSpace() {\n     return size() * 4;\n-  }\n+    }\n \n-  @Override\n-  public ServerRow clone() {\n+    @Override\n+    public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow.clone());\n+        return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, intIntRow.clone());\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n+    @Override\n+    public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-          intIntRow);\n+        return new ServerCompDenseLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, intIntRow);\n     } finally {\n       endRead();\n     }\n-  }\n+    }\n \n   /**\n    * Check the vector contains the index or not\n@@ -283,50 +286,50 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n-  public boolean exist(long index) {\n+\n+    public boolean exist(long index) {\n     return intIntRow.getStorage().hasKey((int) (index - startCol));\n-  }\n+    }\n \n-  public int initAndGet(long index, InitFunc func) {\n+    public int initAndGet(long index, InitFunc func) {\n     if (exist(index)) {\n-      return get(index);\n+        return get(index);\n     } else {\n       int value = (int) func.action();\n       set(index, value);\n       return value;\n     }\n-  }\n-\n+    }\n \n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readInt(), func));\n+        if (indexType == IndexType.INT) {\n+                          for (int i = 0; i < indexSize; i++) {\n+                                            out.writeInt(initAndGet(in.readInt(), func));\n+                          }\n+        } else {\n+          for (int i = 0; i < indexSize; i++) {\n+                   out.writeInt(initAndGet(in.readLong(), func));\n+          }\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(initAndGet(in.readLong(), func));\n-        }\n-      }\n     } else {\n       if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readInt()));\n-        }\n+               for (int i = 0; i < indexSize; i++) {\n+                                          out.writeInt(get(in.readInt()));\n+               }\n       } else {\n         for (int i = 0; i < indexSize; i++) {\n-          out.writeInt(get(in.readLong()));\n+                 out.writeInt(get(in.readLong()));\n         }\n       }\n     }\n-  }\n+    }\n \n-  @Override\n-  public void setSplit(Vector row) {\n+    @Override\n+    public void setSplit(Vector row) {\n     super.setSplit(row);\n     intIntRow = (IntIntVector) row;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 131
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/222/ServerCompDenseLongIntRow.java\nindex 425f244013..ffa3623f66 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/222/ServerCompDenseLongIntRow.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/222/ServerCompDenseLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntIntVector;\n",
            "diff_size": 1
        }
    ]
}