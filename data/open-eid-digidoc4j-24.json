{
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "140",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    for (Signature signature : signatures) {\n      if (!canExtendSignatureToProfile(signature, profile)) {\n        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n        logger.error(message);\n        throw new NotSupportedException(message);\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "142",
                    "column": "7",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/24/SignatureExtender.java\nindex 6783b34e05..862ace1a3b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/24/SignatureExtender.java\n@@ -136,8 +136,12 @@ public class SignatureExtender {\n   private void validatePossibilityToExtendTo(List<Signature> signatures, SignatureProfile profile) {\n     logger.debug(\"Validating if it's possible to extend all the signatures to \" + profile);\n     for (Signature signature : signatures) {\n-      if (!canExtendSignatureToProfile(signature, profile)) {\n-        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n+      if (!canExtendSignatureToProfile(signature, profile)) { Stringmessage\n+\n+\n+      =\"It is not possible to extend \"\n+\n+      + signature .getProfile() + \" signature to \" + signature.getProfile() + \".\";\n         logger.error(message);\n         throw new NotSupportedException(message);\n       }\n",
            "diff_size": 6
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/24/SignatureExtender.java\nindex 6783b34e05..ce97f1a369 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/24/SignatureExtender.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.xades;\n \n@@ -137,7 +137,8 @@ public class SignatureExtender {\n     logger.debug(\"Validating if it's possible to extend all the signatures to \" + profile);\n     for (Signature signature : signatures) {\n       if (!canExtendSignatureToProfile(signature, profile)) {\n-        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n+        String message =\n+            \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n         logger.error(message);\n         throw new NotSupportedException(message);\n       }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "60",
                    "column": "64",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "61",
                    "column": "62",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/24/SignatureExtender.java\nindex 6783b34e05..3973550d5d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/24/SignatureExtender.java\n@@ -57,8 +57,8 @@ public class SignatureExtender {\n     possibleExtensions.put(B_BES, new HashSet<>(asList(LT, LTA)));\n     possibleExtensions.put(B_EPES, new HashSet<>(singletonList(LT_TM)));\n     possibleExtensions.put(LT, new HashSet<>(singletonList(LTA)));\n-    possibleExtensions.put(LT_TM, Collections.<SignatureProfile>emptySet());\n-    possibleExtensions.put(LTA, Collections.<SignatureProfile>emptySet());\n+    possibleExtensions.put(LT_TM, Collections.<SignatureProfile> emptySet());\n+    possibleExtensions.put(LTA, Collections.<SignatureProfile> emptySet());\n   }\n \n   public SignatureExtender(Configuration configuration, DSSDocument detachedContent) {\n@@ -147,4 +147,4 @@ public class SignatureExtender {\n   private boolean canExtendSignatureToProfile(Signature signature, SignatureProfile profile) {\n     return possibleExtensions.get(signature.getProfile()).contains(profile);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/24/SignatureExtender.java\nindex 6783b34e05..3537e159d2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/24/SignatureExtender.java\n@@ -25,7 +25,6 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.digidoc4j.Configuration;\n import org.digidoc4j.OCSPSourceBuilder;\n import org.digidoc4j.Signature;\n@@ -37,114 +36,117 @@ import org.digidoc4j.impl.asic.asice.bdoc.BDocSignatureBuilder;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.DSSDocument;\n import eu.europa.esig.dss.Policy;\n import eu.europa.esig.dss.SignatureLevel;\n import eu.europa.esig.dss.client.tsp.OnlineTSPSource;\n import eu.europa.esig.dss.x509.ocsp.OCSPSource;\n \n+\n public class SignatureExtender {\n \n-  private static final Logger logger = LoggerFactory.getLogger(SignatureExtender.class);\n-  private static final Map<SignatureProfile, Set<SignatureProfile>> possibleExtensions = new HashMap<>(5);\n-  private Configuration configuration;\n-  private DSSDocument detachedContent;\n-  private List<DSSDocument> detachedContents;\n-  private XadesSigningDssFacade extendingFacade;\n+    private static final Logger logger = LoggerFactory.getLogger(SignatureExtender.class);\n+    private static final Map<SignatureProfile, Set<SignatureProfile>> possibleExtensions = new HashMap<>(5);\n+    private Configuration configuration;\n+    private DSSDocument detachedContent;\n+    private List<DSSDocument> detachedContents;\n+    private XadesSigningDssFacade extendingFacade;\n \n-  static {\n+    static {\n     possibleExtensions.put(B_BES, new HashSet<>(asList(LT, LTA)));\n     possibleExtensions.put(B_EPES, new HashSet<>(singletonList(LT_TM)));\n     possibleExtensions.put(LT, new HashSet<>(singletonList(LTA)));\n     possibleExtensions.put(LT_TM, Collections.<SignatureProfile>emptySet());\n     possibleExtensions.put(LTA, Collections.<SignatureProfile>emptySet());\n-  }\n+    }\n+\n \n-  public SignatureExtender(Configuration configuration, DSSDocument detachedContent) {\n+    public SignatureExtender(Configuration configuration, DSSDocument detachedContent) {\n     this.configuration = configuration;\n     this.detachedContent = detachedContent;\n     extendingFacade = new XadesSigningDssFacade();\n-  }\n+    }\n+\n \n-  public SignatureExtender(Configuration configuration, List<DSSDocument> detachedContent) {\n+    public SignatureExtender(Configuration configuration, List<DSSDocument> detachedContent) {\n     this.configuration = configuration;\n     this.detachedContents = detachedContent;\n     extendingFacade = new XadesSigningDssFacade();\n-  }\n+    }\n \n-  public List<DSSDocument> extend(List<Signature> signaturesToExtend, SignatureProfile profile) {\n+\n+    public List<DSSDocument> extend(List<Signature> signaturesToExtend, SignatureProfile profile) {\n     logger.debug(\"Extending signatures to \" + profile);\n     validatePossibilityToExtendTo(signaturesToExtend, profile);\n     prepareExtendingFacade(profile);\n     List<DSSDocument> extendedSignatures = new ArrayList<>();\n     for (Signature signature : signaturesToExtend) {\n-      DSSDocument extendedSignature = extendSignature(signature, profile);\n-      extendedSignatures.add(extendedSignature);\n+        DSSDocument extendedSignature = extendSignature(signature, profile);\n+        extendedSignatures.add(extendedSignature);\n     }\n     logger.debug(\"Finished extending signatures\");\n     return extendedSignatures;\n-  }\n+    }\n \n-  private void prepareExtendingFacade(SignatureProfile profile) {\n+    private void prepareExtendingFacade(SignatureProfile profile) {\n     extendingFacade.setCertificateSource(configuration.getTSL());\n     OnlineTSPSource tspSource = createTimeStampProviderSource(profile);\n     extendingFacade.setTspSource(tspSource);\n     SignatureLevel signatureLevel = getSignatureLevel(profile);\n     extendingFacade.setSignatureLevel(signatureLevel);\n     setSignaturePolicy(profile);\n-  }\n+    }\n \n-  private DSSDocument extendSignature(Signature signature, SignatureProfile profile) {\n+    private DSSDocument extendSignature(Signature signature, SignatureProfile profile) {\n     OCSPSource ocspSource = createOcspSource(profile, ((AsicSignature) signature).getOrigin().getSignatureValue());\n     extendingFacade.setOcspSource(ocspSource);\n     DSSDocument signatureDocument = ((AsicSignature) signature).getSignatureDocument();\n     return extendingFacade.extendSignature(signatureDocument, detachedContents);\n-  }\n+    }\n \n-  private OCSPSource createOcspSource(SignatureProfile profile, byte[] signatureValue) {\n-    return OCSPSourceBuilder.anOcspSource().withSignatureProfile(profile).withSignatureValue(signatureValue).\n-        withConfiguration(this.configuration).build();\n-  }\n+    private OCSPSource createOcspSource(SignatureProfile profile, byte[] signatureValue) {\n+    return OCSPSourceBuilder.anOcspSource().withSignatureProfile(profile).withSignatureValue(signatureValue).withConfiguration(this.configuration).build();\n+    }\n \n-  private OnlineTSPSource createTimeStampProviderSource(SignatureProfile profile) {\n+    private OnlineTSPSource createTimeStampProviderSource(SignatureProfile profile) {\n     OnlineTSPSource source = new OnlineTSPSource(this.configuration.getTspSource());\n     SkDataLoader loader = SkDataLoader.timestamp(this.configuration);\n     loader.setUserAgent(Helper.createBDocUserAgent(profile));\n     source.setDataLoader(loader);\n     return source;\n-  }\n+    }\n \n-  private SignatureLevel getSignatureLevel(SignatureProfile profile) {\n+    private SignatureLevel getSignatureLevel(SignatureProfile profile) {\n     if (profile == SignatureProfile.LT || profile == SignatureProfile.LT_TM) {\n-      return SignatureLevel.XAdES_BASELINE_LT;\n+        return SignatureLevel.XAdES_BASELINE_LT;\n     }\n     if (profile == SignatureProfile.LTA) {\n-      return SignatureLevel.XAdES_BASELINE_LTA;\n+        return SignatureLevel.XAdES_BASELINE_LTA;\n     }\n     logger.error(\"Extending signature to \" + profile + \" is not supported\");\n     throw new NotSupportedException(\"Extending signature to \" + profile + \" is not supported\");\n-  }\n+    }\n \n-  private void setSignaturePolicy(SignatureProfile profile) {\n+    private void setSignaturePolicy(SignatureProfile profile) {\n     if (profile == LT_TM) {\n-      Policy signaturePolicy = BDocSignatureBuilder.createBDocSignaturePolicy();\n-      extendingFacade.setSignaturePolicy(signaturePolicy);\n+        Policy signaturePolicy = BDocSignatureBuilder.createBDocSignaturePolicy();\n+        extendingFacade.setSignaturePolicy(signaturePolicy);\n+    }\n     }\n-  }\n \n-  private void validatePossibilityToExtendTo(List<Signature> signatures, SignatureProfile profile) {\n+    private void validatePossibilityToExtendTo(List<Signature> signatures, SignatureProfile profile) {\n     logger.debug(\"Validating if it's possible to extend all the signatures to \" + profile);\n     for (Signature signature : signatures) {\n-      if (!canExtendSignatureToProfile(signature, profile)) {\n-        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n-        logger.error(message);\n-        throw new NotSupportedException(message);\n-      }\n+        if (!canExtendSignatureToProfile(signature, profile)) {\n+                                               String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n+                                               logger.error(message);\n+                                               throw new NotSupportedException(message);\n+        }\n+    }\n     }\n-  }\n \n-  private boolean canExtendSignatureToProfile(Signature signature, SignatureProfile profile) {\n+    private boolean canExtendSignatureToProfile(Signature signature, SignatureProfile profile) {\n     return possibleExtensions.get(signature.getProfile()).contains(profile);\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "column": "58",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "82",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "82",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "124",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "124",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "141",
                    "column": "18",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/24/SignatureExtender.java\nindex 6783b34e05..ba74a3b70c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/24/SignatureExtender.java\n@@ -137,8 +137,8 @@ public class SignatureExtender {\n     logger.debug(\"Validating if it's possible to extend all the signatures to \" + profile);\n     for (Signature signature : signatures) {\n       if (!canExtendSignatureToProfile(signature, profile)) {\n-        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n-        logger.error(message);\n+        String message = \"It is not possible to extend \" +signature .getProfile()+\" signature to \" + signature.getProfile()+\".\"\n+        ; logger . error(message);\n         throw new NotSupportedException(message);\n       }\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "142",
                    "column": "7",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/24/SignatureExtender.java\nindex 6783b34e05..862ace1a3b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/24/SignatureExtender.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/24/SignatureExtender.java\n@@ -136,8 +136,12 @@ public class SignatureExtender {\n   private void validatePossibilityToExtendTo(List<Signature> signatures, SignatureProfile profile) {\n     logger.debug(\"Validating if it's possible to extend all the signatures to \" + profile);\n     for (Signature signature : signatures) {\n-      if (!canExtendSignatureToProfile(signature, profile)) {\n-        String message = \"It is not possible to extend \" + signature.getProfile() + \" signature to \" + signature.getProfile() + \".\";\n+      if (!canExtendSignatureToProfile(signature, profile)) { Stringmessage\n+\n+\n+      =\"It is not possible to extend \"\n+\n+      + signature .getProfile() + \" signature to \" + signature.getProfile() + \".\";\n         logger.error(message);\n         throw new NotSupportedException(message);\n       }\n",
            "diff_size": 6
        }
    ]
}