{
    "error_id": "498",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.spring.process;\n\nimport java.util.HashMap;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/498/ProcessExtensionService.java\nindex b70bdbd167..75b2652609 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/498/ProcessExtensionService.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/498/ProcessExtensionService.java\nindex b70bdbd167..dfdef51d95 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/498/ProcessExtensionService.java\n@@ -58,7 +58,7 @@ public class ProcessExtensionService {\n \n     private Map<String, Extension> buildProcessDefinitionAndExtensionMap(List<ProcessExtensionModel> processExtensionModels) {\n         Map<String, Extension> buildProcessExtensionMap = new HashMap<>();\n-        for (ProcessExtensionModel processExtensionModel:processExtensionModels ) {\n+        for (ProcessExtensionModel processExtensionModel : processExtensionModels) {\n             buildProcessExtensionMap.putAll(processExtensionModel.getAllExtensions());\n         }\n \n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/498/ProcessExtensionService.java\nindex b70bdbd167..027d73a693 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/498/ProcessExtensionService.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process;\n \n import java.util.HashMap;\n@@ -37,8 +36,7 @@ public class ProcessExtensionService {\n \n     public ProcessExtensionService(DeploymentResourceLoader<ProcessExtensionModel> processExtensionLoader,\n                                    ProcessExtensionResourceReader processExtensionReader) {\n-\n-        this.processExtensionLoader = processExtensionLoader;\n+  this.processExtensionLoader = processExtensionLoader;\n         this.processExtensionReader = processExtensionReader;\n     }\n \n@@ -58,7 +56,7 @@ public class ProcessExtensionService {\n \n     private Map<String, Extension> buildProcessDefinitionAndExtensionMap(List<ProcessExtensionModel> processExtensionModels) {\n         Map<String, Extension> buildProcessExtensionMap = new HashMap<>();\n-        for (ProcessExtensionModel processExtensionModel:processExtensionModels ) {\n+        for (ProcessExtensionModel processExtensionModel: processExtensionModels ) {\n             buildProcessExtensionMap.putAll(processExtensionModel.getAllExtensions());\n         }\n \n@@ -91,4 +89,4 @@ public class ProcessExtensionService {\n     public void setRepositoryService(RepositoryService repositoryService) {\n         this.repositoryService = repositoryService;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/498/ProcessExtensionService.java\nindex b70bdbd167..9f86cd6efc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/498/ProcessExtensionService.java\n@@ -26,69 +26,67 @@ import org.activiti.spring.process.model.Extension;\n import org.activiti.spring.process.model.ProcessExtensionModel;\n import org.activiti.spring.resources.DeploymentResourceLoader;\n \n+\n public class ProcessExtensionService {\n \n     private DeploymentResourceLoader<ProcessExtensionModel> processExtensionLoader;\n+\n     private ProcessExtensionResourceReader processExtensionReader;\n+\n     private RepositoryService repositoryService;\n \n     private static final Extension EMPTY_EXTENSIONS = new Extension();\n-    private Map<String, Map<String, Extension>> processExtensionModelDeploymentMap = new HashMap<>();\n \n-    public ProcessExtensionService(DeploymentResourceLoader<ProcessExtensionModel> processExtensionLoader,\n-                                   ProcessExtensionResourceReader processExtensionReader) {\n+    private Map<String, Map<String, Extension>> processExtensionModelDeploymentMap = new HashMap<>();\n \n-        this.processExtensionLoader = processExtensionLoader;\n-        this.processExtensionReader = processExtensionReader;\n+    public ProcessExtensionService(DeploymentResourceLoader<ProcessExtensionModel> processExtensionLoader, ProcessExtensionResourceReader processExtensionReader) {\n+    this.processExtensionLoader = processExtensionLoader;\n+    this.processExtensionReader = processExtensionReader;\n     }\n \n     private Map<String, Extension> getProcessExtensionsForDeploymentId(String deploymentId) {\n-        Map<String, Extension> processExtensionModelMap = processExtensionModelDeploymentMap.get(deploymentId);\n-        if (processExtensionModelMap != null) {\n-            return processExtensionModelMap;\n-        }\n-\n-        List<ProcessExtensionModel> processExtensionModels = processExtensionLoader.loadResourcesForDeployment(deploymentId,\n-                processExtensionReader);\n-\n-        processExtensionModelMap = buildProcessDefinitionAndExtensionMap(processExtensionModels);\n-        processExtensionModelDeploymentMap.put(deploymentId, processExtensionModelMap);\n+    Map<String, Extension> processExtensionModelMap = processExtensionModelDeploymentMap.get(deploymentId);\n+    if (processExtensionModelMap != null) {\n         return processExtensionModelMap;\n     }\n \n-    private Map<String, Extension> buildProcessDefinitionAndExtensionMap(List<ProcessExtensionModel> processExtensionModels) {\n-        Map<String, Extension> buildProcessExtensionMap = new HashMap<>();\n-        for (ProcessExtensionModel processExtensionModel:processExtensionModels ) {\n-            buildProcessExtensionMap.putAll(processExtensionModel.getAllExtensions());\n-        }\n+    List<ProcessExtensionModel> processExtensionModels = processExtensionLoader.loadResourcesForDeployment(deploymentId, processExtensionReader);\n+    processExtensionModelMap = buildProcessDefinitionAndExtensionMap(processExtensionModels);\n+    processExtensionModelDeploymentMap.put(deploymentId, processExtensionModelMap);\n+    return processExtensionModelMap;\n+    }\n \n-        return buildProcessExtensionMap;\n+    private Map<String, Extension> buildProcessDefinitionAndExtensionMap(List<ProcessExtensionModel> processExtensionModels) {\n+    Map<String, Extension> buildProcessExtensionMap = new HashMap<>();\n+    for (ProcessExtensionModel processExtensionModel : processExtensionModels) {\n+        buildProcessExtensionMap.putAll(processExtensionModel.getAllExtensions());\n+    }\n+    return buildProcessExtensionMap;\n     }\n \n     public boolean hasExtensionsFor(ProcessDefinition processDefinition) {\n-        return !EMPTY_EXTENSIONS.equals(getExtensionsFor(processDefinition));\n+    return !EMPTY_EXTENSIONS.equals(getExtensionsFor(processDefinition));\n     }\n \n     public boolean hasExtensionsFor(String processDefinitionId) {\n-        ProcessDefinition processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n-        return hasExtensionsFor(processDefinition);\n+    ProcessDefinition processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n+    return hasExtensionsFor(processDefinition);\n     }\n \n     public Extension getExtensionsFor(ProcessDefinition processDefinition) {\n-        Map<String, Extension> processExtensionModelMap = getProcessExtensionsForDeploymentId(processDefinition.getDeploymentId());\n-        Extension extension = processExtensionModelMap.get(processDefinition.getKey());\n-\n-        return extension != null ? extension : EMPTY_EXTENSIONS;\n+    Map<String, Extension> processExtensionModelMap = getProcessExtensionsForDeploymentId(processDefinition.getDeploymentId());\n+    Extension extension = processExtensionModelMap.get(processDefinition.getKey());\n+    return extension != null ? extension : EMPTY_EXTENSIONS;\n     }\n \n     public Extension getExtensionsForId(String processDefinitionId) {\n-        ProcessDefinition processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n-\n-        Extension processExtension = getExtensionsFor(processDefinition);\n-        return processExtension != null ? processExtension : EMPTY_EXTENSIONS;\n+    ProcessDefinition processDefinition = repositoryService.getProcessDefinition(processDefinitionId);\n+    Extension processExtension = getExtensionsFor(processDefinition);\n+    return processExtension != null ? processExtension : EMPTY_EXTENSIONS;\n     }\n \n     public void setRepositoryService(RepositoryService repositoryService) {\n-        this.repositoryService = repositoryService;\n+    this.repositoryService = repositoryService;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/498/ProcessExtensionService.java\nindex b70bdbd167..75b2652609 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/498/ProcessExtensionService.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/498/ProcessExtensionService.java\nindex b70bdbd167..75b2652609 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/498/ProcessExtensionService.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/498/ProcessExtensionService.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process;\n \n import java.util.HashMap;\n",
            "diff_size": 1
        }
    ]
}