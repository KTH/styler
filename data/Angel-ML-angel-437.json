{
    "error_id": "437",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/437/StorageSwitch.java\nindex 0e0015d6ab..5140934a60 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/437/StorageSwitch.java\n@@ -30,384 +30,408 @@ import java.lang.reflect.Method;\n \n public class StorageSwitch {\n \n-  private static Storage emptyStorage(Storage target, StorageMethod method, long capacity) {\n-    try {\n-      if (capacity <= 0) {\n-        Method m = target.getClass().getDeclaredMethod(method.toString());\n-        return (Storage) m.invoke(target);\n-      } else {\n-        Method m = target.getClass().getDeclaredMethod(method.toString(), int.class);\n-        return (Storage) m.invoke(target, (int) capacity);\n-      }\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n-      e.printStackTrace();\n-    }\n-\n-    return null;\n-  }\n+    private static Storage emptyStorage(Storage target, StorageMethod method, long capacity) {\n+        try {\n+            if (capacity <= 0) {\n+                Method m = target.getClass().getDeclaredMethod(method.toString());\n+                return (Storage) m.invoke(target);\n+            } else {\n+                Method m = target.getClass().getDeclaredMethod(method.toString(), int.class);\n+                return (Storage) m.invoke(target, (int) capacity);\n+            }\n+        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+            e.printStackTrace();\n+        }\n \n-  private static Storage emptyStorage(Storage target, StorageMethod method) {\n-    try {\n-      Method m = target.getClass().getDeclaredMethod(method.toString());\n-      return (Storage) m.invoke(target);\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n-      e.printStackTrace();\n+        return null;\n     }\n \n-    return null;\n-  }\n+    private static Storage emptyStorage(Storage target, StorageMethod method) {\n+        try {\n+            Method m = target.getClass().getDeclaredMethod(method.toString());\n+            return (Storage) m.invoke(target);\n+        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+            e.printStackTrace();\n+        }\n \n-  private static long allocSize(long v1Size, long v2Size, long dim) {\n-    if (v1Size + v2Size > dim) {\n-      return dim;\n-    } else {\n-      return v1Size + v2Size;\n+        return null;\n     }\n-  }\n \n-  private static Storage union(Vector v1, Vector v2, Binary op) {\n-    if (v1.isDense()) {\n-      // KeepStorage is guaranteed\n-      if (op.isInplace()) {\n-        return v1.getStorage();\n-      } else {\n-        return v1.copy().getStorage();\n-      }\n-    } else if (v1.isSparse()) {\n-      if (v2.isDense()) {\n-        // ignore the isInplace option, since v2 is dense\n-        if (op.isKeepStorage()) {\n-          // the value in old storage can be changed safe, so switch a storage\n-          // but user required keep storage, we can prevent rehash\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+    private static long allocSize(long v1Size, long v2Size, long dim) {\n+        if (v1Size + v2Size > dim) {\n+            return dim;\n         } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+            return v1Size + v2Size;\n         }\n-      } else {// v2.isSparse() || v2.isSorted()\n-        long v1Size = v1.getSize();\n-        long v2Size = v2.getSize();\n+    }\n \n-        if (v1Size >= v2Size * Constant.sparseThreshold &&\n-            (v1Size + v2Size) * Constant.intersectionCoeff\n-                <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n-          // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large\n-          // KeepStorage is guaranteed\n-          if (op.isInplace()) {\n-            return v1.getStorage();\n-          } else {\n-            return v1.copy().getStorage();\n-          }\n-        } else if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n-          // we gauss dense storage is more efficient\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          // v1Size < v2Size * Constant.sparseThreshold\n-          int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1Size / 0.75)));\n-          // KeepStorage is guaranteed\n-          if (v1Size + v2Size <= 1.5 * capacity) {\n+    private static Storage union(Vector v1, Vector v2, Binary op) {\n+        if (v1.isDense()) {\n+            // KeepStorage is guaranteed\n             if (op.isInplace()) {\n-              return v1.getStorage();\n+                return v1.getStorage();\n             } else {\n-              return v1.copy().getStorage();\n+                return v1.copy().getStorage();\n             }\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          }\n-        }\n-      }\n-    } else {// v1.isSorted()\n-      if (v2.isDense()) {\n-        // ignore the isInplace option, since v2 is dense\n-        if (op.isKeepStorage()) {\n-          // the value in old storage can be changed safe, so switch a storage\n-          // but user required keep storage, we can prevent rehash\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n-        } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n-      } else {// v2.isSparse() || v2.isSorted()\n-        long v1Size = v1.getSize();\n-        long v2Size = v2.getSize();\n+        } else if (v1.isSparse()) {\n+            if (v2.isDense()) {\n+                // ignore the isInplace option, since v2 is dense\n+                if (op.isKeepStorage()) {\n+                    // the value in old storage can be changed safe, so switch a storage\n+                    // but user required keep storage, we can prevent rehash\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+                } else {\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                }\n+            } else {// v2.isSparse() || v2.isSorted()\n+                long v1Size = v1.getSize();\n+                long v2Size = v2.getSize();\n \n-        if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n-          // we gauss dense storage is more efficient\n-          if (op.isKeepStorage()) {\n-            // prevent rehash\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          }\n-        }\n-      }\n-    }\n-  }\n+                if (v1Size >= v2Size * Constant.sparseThreshold &&\n+                        (v1Size + v2Size) * Constant.intersectionCoeff\n+                                <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                    // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large\n+                    // KeepStorage is guaranteed\n+                    if (op.isInplace()) {\n+                        return v1.getStorage();\n+                    } else {\n+                        return v1.copy().getStorage();\n+                    }\n+                } else if ((v1Size + v2Size) * Constant.intersectionCoeff\n+                        >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                    // we gauss dense storage is more efficient\n+                    if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                } else {\n+                    // v1Size < v2Size * Constant.sparseThreshold\n+                    int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1Size / 0.75)));\n+                    // KeepStorage is guaranteed\n+                    if (v1Size + v2Size <= 1.5 * capacity) {\n+                        if (op.isInplace()) {\n+                            return v1.getStorage();\n+                        } else {\n+                            return v1.copy().getStorage();\n+                        }\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                allocSize(v1Size, v2Size, v1.dim()));\n+                    }\n+                }\n+            }\n+        } else {// v1.isSorted()\n+            if (v2.isDense()) {\n+                // ignore the isInplace option, since v2 is dense\n+                if (op.isKeepStorage()) {\n+                    // the value in old storage can be changed safe, so switch a storage\n+                    // but user required keep storage, we can prevent rehash\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n+                } else {\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                }\n+            } else {// v2.isSparse() || v2.isSorted()\n+                long v1Size = v1.getSize();\n+                long v2Size = v2.getSize();\n \n-  private static Storage intersection(Vector v1, Vector v2, Binary op) {\n-    if (v1.isDense()) {\n-      if (v2.isDense()) {\n-        // KeepStorage is guaranteed\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-      } else {// v2.isSparse() || v2.isSorted()\n-        if ((!v2.isSorted() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||\n-            (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n-          // dense preferred, KeepStorage is guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        } else { // sparse preferred\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          }\n-        }\n-      }\n-    } else if (v1.isSparse()) {\n-      if (v2.isDense()) {\n-        if (op.isKeepStorage() || v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n-          // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-        } else {\n-          // dense preferred\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n-      } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n-          // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n-          // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n-          // preferred dense\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else { // preferred dense\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        }\n-      }\n-    } else {//v1.isSorted()\n-      if (v2.isDense()) {\n-        if (op.isKeepStorage() || v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n-          // sorted preferred\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-        } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n-      } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          }\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          }\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n+                if ((v1Size + v2Size) * Constant.intersectionCoeff\n+                        >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+                    // we gauss dense storage is more efficient\n+                    if (op.isKeepStorage()) {\n+                        // prevent rehash\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n+                                allocSize(v1Size, v2Size, v1.dim()));\n+                    } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                allocSize(v1Size, v2Size, v1.dim()));\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                } else {\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n+                                allocSize(v1Size, v2Size, v1.dim()));\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                allocSize(v1Size, v2Size, v1.dim()));\n+                    }\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n-  private static Storage all(Vector v1, Vector v2, Binary op) {\n-    if (v1.isDense()) {\n-      if (op.isInplace()) {\n-        return v1.getStorage();\n-      } else {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-      }\n-    } else {\n-      if (op.isKeepStorage()) {\n-        if (v1.isSparse()) {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n-        } else { // sorted\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n+    private static Storage intersection(Vector v1, Vector v2, Binary op) {\n+        if (v1.isDense()) {\n+            if (v2.isDense()) {\n+                // KeepStorage is guaranteed\n+                return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+            } else {// v2.isSparse() || v2.isSorted()\n+                if ((!v2.isSorted() &&\n+                        v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||\n+                        (v2.isSorted() &&\n+                                v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n+                    // dense preferred, KeepStorage is guaranteed\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                } else { // sparse preferred\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                v2.getSize());\n+                    }\n+                }\n+            }\n+        } else if (v1.isSparse()) {\n+            if (v2.isDense()) {\n+                if (op.isKeepStorage() ||\n+                        v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                    // sparse preferred, keep storage guaranteed\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                } else {\n+                    // dense preferred\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                }\n+            } else { // v2.isSparse() || v2.isSorted()\n+                if (v1.getSize() >= v2.getSize()\n+                        && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n+                    // sparse preferred, keep storage guaranteed\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                } else if (v1.getSize() <= v2.getSize()\n+                        && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                    // sparse preferred, keep storage guaranteed\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                } else if (v1.getSize() > v2.getSize()\n+                        && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n+                    // preferred dense\n+                    if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                v2.getSize());\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                } else { // preferred dense\n+                    if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                }\n+            }\n+        } else {//v1.isSorted()\n+            if (v2.isDense()) {\n+                if (op.isKeepStorage() ||\n+                        v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+                    // sorted preferred\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                } else {\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                }\n+            } else { // v2.isSparse() || v2.isSorted()\n+                if (v1.getSize() >= v2.getSize()\n+                        && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n+                                v2.getSize());\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                v2.getSize());\n+                    }\n+                } else if (v1.getSize() <= v2.getSize()\n+                        && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                    }\n+                } else if (v1.getSize() > v2.getSize()\n+                        && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n+                                v2.getSize());\n+                    } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n+                                v2.getSize());\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                } else {\n+                    if (op.isKeepStorage()) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                    } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                    } else {\n+                        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                }\n+            }\n         }\n-      } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n-      } else {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-      }\n-    }\n-  }\n-\n-  public static Storage apply(Vector v1, Vector v2, Binary op) {\n-    if (op.getOpType() == OpType.UNION) {\n-      return union(v1, v2, op);\n-    } else if (op.getOpType() == OpType.INTERSECTION) {\n-      return intersection(v1, v2, op);\n-    } else {// OpType.ALL\n-      return all(v1, v2, op);\n     }\n-  }\n \n-  public static Storage[] applyComp(ComponentVector v1, Vector v2, Binary op) {\n-    Vector[] parts = v1.getPartitions();\n-    Storage[] resParts = new Storage[parts.length];\n-    int k = 0;\n-    if (op.getOpType() == OpType.UNION) {\n-      if (v2.isDense()) {\n-        for (Vector part : parts) {\n-          if (part.isDense()) {\n+    private static Storage all(Vector v1, Vector v2, Binary op) {\n+        if (v1.isDense()) {\n             if (op.isInplace()) {\n-              resParts[k] = part.getStorage();\n-            } else {\n-              resParts[k] = part.copy().getStorage();\n-            }\n-          } else if (part.isSparse()) {\n-            if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n+                return v1.getStorage();\n             } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n             }\n-          } else {\n+        } else {\n             if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n+                if (v1.isSparse()) {\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+                } else { // sorted\n+                    return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n+                }\n+            } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n             } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n             }\n-          }\n-          k++;\n-        }\n-      } else {\n-        for (Vector part : parts) {\n-          if (op.isInplace()) {\n-            resParts[k] = part.getStorage();\n-          } else {\n-            resParts[k] = part.copy().getStorage();\n-          }\n-          k++;\n         }\n-      }\n-    } else if (op.getOpType() == OpType.INTERSECTION) {\n-      if (v2.isDense()) {\n-        for (Vector part : parts) {\n-          if (part.isDense()) {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-          } else if (part.isSparse()) {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-            }\n-          }\n-          k++;\n+    }\n+\n+    public static Storage apply(Vector v1, Vector v2, Binary op) {\n+        if (op.getOpType() == OpType.UNION) {\n+            return union(v1, v2, op);\n+        } else if (op.getOpType() == OpType.INTERSECTION) {\n+            return intersection(v1, v2, op);\n+        } else {// OpType.ALL\n+            return all(v1, v2, op);\n         }\n-      } else {\n-        if (((Vector) v1).getSize() > v2.getSize()) {\n-          for (Vector part : parts) {\n-            if (op.isKeepStorage()) {\n-              if (part.isDense()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-              } else if (part.isSparse()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-              } else {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-              }\n+    }\n+\n+    public static Storage[] applyComp(ComponentVector v1, Vector v2, Binary op) {\n+        Vector[] parts = v1.getPartitions();\n+        Storage[] resParts = new Storage[parts.length];\n+        int k = 0;\n+        if (op.getOpType() == OpType.UNION) {\n+            if (v2.isDense()) {\n+                for (Vector part : parts) {\n+                    if (part.isDense()) {\n+                        if (op.isInplace()) {\n+                            resParts[k] = part.getStorage();\n+                        } else {\n+                            resParts[k] = part.copy().getStorage();\n+                        }\n+                    } else if (part.isSparse()) {\n+                        if (op.isKeepStorage()) {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse,\n+                                    part.dim());\n+                        } else {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                        }\n+                    } else {\n+                        if (op.isKeepStorage()) {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted,\n+                                    part.dim());\n+                        } else {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                        }\n+                    }\n+                    k++;\n+                }\n             } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                for (Vector part : parts) {\n+                    if (op.isInplace()) {\n+                        resParts[k] = part.getStorage();\n+                    } else {\n+                        resParts[k] = part.copy().getStorage();\n+                    }\n+                    k++;\n+                }\n             }\n-            k++;\n-          }\n-        } else {\n-          for (Vector part : parts) {\n-            if (part.isDense()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            } else if (part.isSparse()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+        } else if (op.getOpType() == OpType.INTERSECTION) {\n+            if (v2.isDense()) {\n+                for (Vector part : parts) {\n+                    if (part.isDense()) {\n+                        resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                    } else if (part.isSparse()) {\n+                        resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                    } else {\n+                        if (op.isKeepStorage()) {\n+                            resParts[k] =\n+                                    emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                        } else {\n+                            resParts[k] =\n+                                    emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                        }\n+                    }\n+                    k++;\n+                }\n             } else {\n-              if (op.isKeepStorage()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-              } else {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-              }\n+                if (((Vector) v1).getSize() > v2.getSize()) {\n+                    for (Vector part : parts) {\n+                        if (op.isKeepStorage()) {\n+                            if (part.isDense()) {\n+                                resParts[k] =\n+                                        emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                            } else if (part.isSparse()) {\n+                                resParts[k] =\n+                                        emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                            } else {\n+                                resParts[k] =\n+                                        emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                            }\n+                        } else {\n+                            resParts[k] =\n+                                    emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                        }\n+                        k++;\n+                    }\n+                } else {\n+                    for (Vector part : parts) {\n+                        if (part.isDense()) {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                        } else if (part.isSparse()) {\n+                            resParts[k] =\n+                                    emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                        } else {\n+                            if (op.isKeepStorage()) {\n+                                resParts[k] =\n+                                        emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                            } else {\n+                                resParts[k] =\n+                                        emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                            }\n+                        }\n+                        k++;\n+                    }\n+                }\n             }\n-            k++;\n-          }\n-        }\n-      }\n-    } else {//OpType.ALL\n-      for (Vector part : parts) {\n-        if (part.isDense()) {\n-          if (op.isInplace()) {\n-            resParts[k] = part.getStorage();\n-          } else {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            if (part.isSparse()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n-            } else { // sorted\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n+        } else {//OpType.ALL\n+            for (Vector part : parts) {\n+                if (part.isDense()) {\n+                    if (op.isInplace()) {\n+                        resParts[k] = part.getStorage();\n+                    } else {\n+                        resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                    }\n+                } else {\n+                    if (op.isKeepStorage()) {\n+                        if (part.isSparse()) {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse,\n+                                    part.dim());\n+                        } else { // sorted\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted,\n+                                    part.dim());\n+                        }\n+                    } else {\n+                        if (part.getStorage() instanceof LongKeyVectorStorage) {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse,\n+                                    part.dim());\n+                        } else {\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                        }\n+                    }\n+                }\n+                k++;\n             }\n-          } else {\n-            if (part.getStorage() instanceof LongKeyVectorStorage) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            }\n-          }\n         }\n-        k++;\n-      }\n+        return resParts;\n     }\n-    return resParts;\n-  }\n \n-  private enum StorageMethod {\n-    emptyDense, emptySparse, emptySorted\n-  }\n+    private enum StorageMethod {\n+        emptyDense, emptySparse, emptySorted\n+    }\n \n }\n",
            "diff_size": 547
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 68.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 34, indentation should be the same level as line 76.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 28, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 89.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 15, indentation should be the same level as line 119.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 28, indentation should be the same level as line 122.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 131.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 115, indentation should be the same level as line 133.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 26, indentation should be the same level as line 154.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 19, indentation should be the same level as line 158.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 28, indentation should be the same level as line 171.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 36, indentation should be the same level as line 174.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 179.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 17, indentation should be the same level as line 182.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 10, expected is 28, indentation should be the same level as line 202.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "266",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "287",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "314",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "316",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "331",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "333",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "347",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "370",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "372",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "376",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/437/StorageSwitch.java\nindex 0e0015d6ab..08ad9a7e07 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/437/StorageSwitch.java\n@@ -29,79 +29,72 @@ import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n public class StorageSwitch {\n-\n-  private static Storage emptyStorage(Storage target, StorageMethod method, long capacity) {\n+    private static Storage emptyStorage(Storage target, StorageMethod method, long capacity) {\n     try {\n-      if (capacity <= 0) {\n+        if (capacity <= 0) {\n         Method m = target.getClass().getDeclaredMethod(method.toString());\n         return (Storage) m.invoke(target);\n-      } else {\n-        Method m = target.getClass().getDeclaredMethod(method.toString(), int.class);\n-        return (Storage) m.invoke(target, (int) capacity);\n-      }\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+        } else {\n+          Method m = target.getClass().getDeclaredMethod(method.toString(), int.class);\n+          return (Storage) m.invoke(target, (int) capacity);\n+        }\n+    } catch (NoSuchMethodException|IllegalAccessException| InvocationTargetException e) {\n       e.printStackTrace();\n     }\n-\n     return null;\n-  }\n+    }\n \n-  private static Storage emptyStorage(Storage target, StorageMethod method) {\n+    private static Storage emptyStorage(Storage target, StorageMethod method) {\n     try {\n-      Method m = target.getClass().getDeclaredMethod(method.toString());\n-      return (Storage) m.invoke(target);\n-    } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {\n+        Method m = target.getClass().getDeclaredMethod(method.toString());\n+        return (Storage) m.invoke(target);\n+    } catch (NoSuchMethodException|IllegalAccessException| InvocationTargetException e) {\n       e.printStackTrace();\n     }\n-\n     return null;\n-  }\n+    }\n \n-  private static long allocSize(long v1Size, long v2Size, long dim) {\n+    private static long allocSize(long v1Size, long v2Size, long dim) {\n     if (v1Size + v2Size > dim) {\n-      return dim;\n+        return dim;\n     } else {\n       return v1Size + v2Size;\n     }\n-  }\n+    }\n \n-  private static Storage union(Vector v1, Vector v2, Binary op) {\n+    private static Storage union(Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n       // KeepStorage is guaranteed\n-      if (op.isInplace()) {\n-        return v1.getStorage();\n-      } else {\n-        return v1.copy().getStorage();\n-      }\n+        if (op.isInplace()) {\n+                          return v1.getStorage();\n+        } else {\n+          return v1.copy().getStorage();\n+        }\n     } else if (v1.isSparse()) {\n       if (v2.isDense()) {\n         // ignore the isInplace option, since v2 is dense\n-        if (op.isKeepStorage()) {\n+                                  if (op.isKeepStorage()) {\n           // the value in old storage can be changed safe, so switch a storage\n           // but user required keep storage, we can prevent rehash\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n-        } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n+                            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+                                  } else {\n+                                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                                  }\n       } else {// v2.isSparse() || v2.isSorted()\n         long v1Size = v1.getSize();\n         long v2Size = v2.getSize();\n-\n-        if (v1Size >= v2Size * Constant.sparseThreshold &&\n-            (v1Size + v2Size) * Constant.intersectionCoeff\n-                <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+        if (v1Size >= v2Size * Constant.sparseThreshold && (v1Size + v2Size) * Constant.intersectionCoeff <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // we gauss the indices of v2 maybe is a subset of v1, or overlap is very large\n           // KeepStorage is guaranteed\n-          if (op.isInplace()) {\n-            return v1.getStorage();\n-          } else {\n-            return v1.copy().getStorage();\n-          }\n-        } else if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                 if (op.isInplace()) {\n+                                                                                                                                                                  return v1.getStorage();\n+                 } else {\n+                   return v1.copy().getStorage();\n+                 }\n+        } else if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // we gauss dense storage is more efficient\n           if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+                                                                                                                          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n           }\n@@ -110,304 +103,287 @@ public class StorageSwitch {\n           int capacity = 1 << (32 - Integer.numberOfLeadingZeros((int) (v1Size / 0.75)));\n           // KeepStorage is guaranteed\n           if (v1Size + v2Size <= 1.5 * capacity) {\n-            if (op.isInplace()) {\n-              return v1.getStorage();\n-            } else {\n-              return v1.copy().getStorage();\n-            }\n+                   if (op.isInplace()) {\n+                                                     return v1.getStorage();\n+                   } else {\n+                     return v1.copy().getStorage();\n+                   }\n           } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n           }\n         }\n       }\n     } else {// v1.isSorted()\n       if (v2.isDense()) {\n         // ignore the isInplace option, since v2 is dense\n-        if (op.isKeepStorage()) {\n+               if (op.isKeepStorage()) {\n           // the value in old storage can be changed safe, so switch a storage\n           // but user required keep storage, we can prevent rehash\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n-        } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n+                            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n+               } else {\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+               }\n       } else {// v2.isSparse() || v2.isSorted()\n         long v1Size = v1.getSize();\n         long v2Size = v2.getSize();\n-\n-        if ((v1Size + v2Size) * Constant.intersectionCoeff\n-            >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+        if ((v1Size + v2Size) * Constant.intersectionCoeff >= Constant.sortedDenseStorageThreshold * v1.dim()) {\n           // we gauss dense storage is more efficient\n-          if (op.isKeepStorage()) {\n+                 if (op.isKeepStorage()) {\n             // prevent rehash\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n+                                                                                                                   return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, allocSize(v1Size, v2Size, v1.dim()));\n+                 } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                                                                                                                   return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n         } else {\n           if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, allocSize(v1Size, v2Size, v1.dim()));\n           } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse,\n-                allocSize(v1Size, v2Size, v1.dim()));\n+            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, allocSize(v1Size, v2Size, v1.dim()));\n           }\n         }\n       }\n     }\n-  }\n+    }\n \n-  private static Storage intersection(Vector v1, Vector v2, Binary op) {\n+    private static Storage intersection(Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n-      if (v2.isDense()) {\n+        if (v2.isDense()) {\n         // KeepStorage is guaranteed\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-      } else {// v2.isSparse() || v2.isSorted()\n-        if ((!v2.isSorted() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) ||\n-            (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+        } else {// v2.isSparse() || v2.isSorted()\n+          if ((!v2.isSorted() && v2.getSize() >= Constant.sparseDenseStorageThreshold * v2.dim()) || (v2.isSorted() && v2.getSize() >= Constant.sortedDenseStorageThreshold * v2.dim())) {\n           // dense preferred, KeepStorage is guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        } else { // sparse preferred\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+          } else { // sparse preferred\n+            if (op.isKeepStorage()) {\n+                     return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+            } else {\n+              return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+            }\n           }\n         }\n-      }\n     } else if (v1.isSparse()) {\n       if (v2.isDense()) {\n-        if (op.isKeepStorage() || v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                                  if (op.isKeepStorage() || v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-        } else {\n+                            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                                  } else {\n           // dense preferred\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n+                                    return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                                  }\n       } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n+        if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sparseDenseStorageThreshold * v2.dim()) {\n           // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+        } else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sparseDenseStorageThreshold * v1.dim()) {\n           // sparse preferred, keep storage guaranteed\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+        } else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sparseDenseStorageThreshold * v2.dim()) {\n           // preferred dense\n           if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else { // preferred dense\n-          if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                                                                                                                      return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n           }\n-        }\n+               } else { // preferred dense\n+                 if (op.isKeepStorage() || v1.getStorage() instanceof LongKeyVectorStorage) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               }\n       }\n     } else {//v1.isSorted()\n       if (v2.isDense()) {\n-        if (op.isKeepStorage() || v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n+               if (op.isKeepStorage() || v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n           // sorted preferred\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-        } else {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-        }\n+                            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+               } else {\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+               }\n       } else { // v2.isSparse() || v2.isSorted()\n-        if (v1.getSize() >= v2.getSize()\n-            && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n+        if (v1.getSize() >= v2.getSize() && v2.getSize() <= Constant.sortedDenseStorageThreshold * v2.dim()) {\n+                 if (op.isKeepStorage()) {\n+                                                                                                                 return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                 }\n+        } else if (v1.getSize() <= v2.getSize() && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n           if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n-          }\n-        } else if (v1.getSize() <= v2.getSize()\n-            && v1.getSize() <= Constant.sortedDenseStorageThreshold * v1.dim()) {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                                                                                                                        return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n           }\n-        } else if (v1.getSize() > v2.getSize()\n-            && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n+        } else if (v1.getSize() > v2.getSize() && v2.getSize() > Constant.sortedDenseStorageThreshold * v2.dim()) {\n           if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n+                                                                                                                      return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v2.getSize());\n           } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n+                                                                                                                      return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v2.getSize());\n           } else {\n             return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n           }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n-          } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-          }\n-        }\n+               } else {\n+                 if (op.isKeepStorage()) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted);\n+                 } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n+                          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse);\n+                 } else {\n+                   return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+                 }\n+               }\n       }\n     }\n-  }\n+    }\n \n-  private static Storage all(Vector v1, Vector v2, Binary op) {\n+    private static Storage all(Vector v1, Vector v2, Binary op) {\n     if (v1.isDense()) {\n-      if (op.isInplace()) {\n-        return v1.getStorage();\n-      } else {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n-      }\n+        if (op.isInplace()) {\n+                          return v1.getStorage();\n+        } else {\n+          return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n+        }\n     } else {\n       if (op.isKeepStorage()) {\n-        if (v1.isSparse()) {\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n-        } else { // sorted\n-          return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n-        }\n+               if (v1.isSparse()) {\n+                                  return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+               } else { // sorted\n+                 return emptyStorage(v1.getStorage(), StorageMethod.emptySorted, v1.dim());\n+               }\n       } else if (v1.getStorage() instanceof LongKeyVectorStorage) {\n-        return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n+               return emptyStorage(v1.getStorage(), StorageMethod.emptySparse, v1.dim());\n       } else {\n         return emptyStorage(v1.getStorage(), StorageMethod.emptyDense);\n       }\n     }\n-  }\n+    }\n \n-  public static Storage apply(Vector v1, Vector v2, Binary op) {\n+    public static Storage apply(Vector v1, Vector v2, Binary op) {\n     if (op.getOpType() == OpType.UNION) {\n-      return union(v1, v2, op);\n+        return union(v1, v2, op);\n     } else if (op.getOpType() == OpType.INTERSECTION) {\n-      return intersection(v1, v2, op);\n+                                                                     return intersection(v1, v2, op);\n     } else {// OpType.ALL\n       return all(v1, v2, op);\n     }\n-  }\n+    }\n \n-  public static Storage[] applyComp(ComponentVector v1, Vector v2, Binary op) {\n+    public static Storage[] applyComp(ComponentVector v1, Vector v2, Binary op) {\n     Vector[] parts = v1.getPartitions();\n     Storage[] resParts = new Storage[parts.length];\n     int k = 0;\n     if (op.getOpType() == OpType.UNION) {\n-      if (v2.isDense()) {\n-        for (Vector part : parts) {\n-          if (part.isDense()) {\n-            if (op.isInplace()) {\n+        if (v2.isDense()) {\n+                                            for (Vector part : parts) {\n+                              if (part.isDense()) {\n+                                                                          if (op.isInplace()) {\n+                                  resParts[k] = part.getStorage();\n+                                                                          } else {\n+                                                                            resParts[k] = part.copy().getStorage();\n+                                                                          }\n+                              } else if (part.isSparse()) {\n+                                if (op.isKeepStorage()) {\n+                                         resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n+                                } else {\n+                                  resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                                }\n+                              } else {\n+                                if (op.isKeepStorage()) {\n+                                         resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n+                                } else {\n+                                  resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                                }\n+                              }\n+                              k++;\n+                                            }\n+        } else {\n+          for (Vector part : parts) {\n+                   if (op.isInplace()) {\n               resParts[k] = part.getStorage();\n-            } else {\n-              resParts[k] = part.copy().getStorage();\n-            }\n-          } else if (part.isSparse()) {\n-            if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            }\n-          } else {\n-            if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            }\n+                   } else {\n+                     resParts[k] = part.copy().getStorage();\n+                   }\n+                   k++;\n           }\n-          k++;\n         }\n-      } else {\n-        for (Vector part : parts) {\n-          if (op.isInplace()) {\n-            resParts[k] = part.getStorage();\n-          } else {\n-            resParts[k] = part.copy().getStorage();\n-          }\n-          k++;\n-        }\n-      }\n     } else if (op.getOpType() == OpType.INTERSECTION) {\n       if (v2.isDense()) {\n-        for (Vector part : parts) {\n-          if (part.isDense()) {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-          } else if (part.isSparse()) {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-          } else {\n-            if (op.isKeepStorage()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-            }\n-          }\n-          k++;\n-        }\n+                                                          for (Vector part : parts) {\n+                            if (part.isDense()) {\n+                                                              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                            } else if (part.isSparse()) {\n+                                                                                        resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                            } else {\n+                              if (op.isKeepStorage()) {\n+                                       resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                              } else {\n+                                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                              }\n+                            }\n+                            k++;\n+                                                          }\n       } else {\n         if (((Vector) v1).getSize() > v2.getSize()) {\n-          for (Vector part : parts) {\n-            if (op.isKeepStorage()) {\n-              if (part.isDense()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-              } else if (part.isSparse()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-              } else {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-              }\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-            }\n-            k++;\n-          }\n+                 for (Vector part : parts) {\n+                                                        if (op.isKeepStorage()) {\n+                                               if (part.isDense()) {\n+                                                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                                               } else if (part.isSparse()) {\n+                                                                                    resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                                               } else {\n+                                                 resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                                               }\n+                                                        } else {\n+                                                          resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                                                        }\n+                                                        k++;\n+                 }\n         } else {\n           for (Vector part : parts) {\n-            if (part.isDense()) {\n+                   if (part.isDense()) {\n               resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            } else if (part.isSparse()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-            } else {\n-              if (op.isKeepStorage()) {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n-              } else {\n-                resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n-              }\n-            }\n-            k++;\n+                   } else if (part.isSparse()) {\n+                                        resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                   } else {\n+                     if (op.isKeepStorage()) {\n+                              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted);\n+                     } else {\n+                       resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse);\n+                     }\n+                   }\n+                   k++;\n           }\n         }\n       }\n     } else {//OpType.ALL\n       for (Vector part : parts) {\n-        if (part.isDense()) {\n-          if (op.isInplace()) {\n-            resParts[k] = part.getStorage();\n-          } else {\n-            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-          }\n-        } else {\n-          if (op.isKeepStorage()) {\n-            if (part.isSparse()) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n-            } else { // sorted\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n-            }\n-          } else {\n-            if (part.getStorage() instanceof LongKeyVectorStorage) {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n-            } else {\n-              resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n-            }\n-          }\n-        }\n-        k++;\n+               if (part.isDense()) {\n+                                    if (op.isInplace()) {\n+                   resParts[k] = part.getStorage();\n+                                    } else {\n+                                      resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                                    }\n+               } else {\n+                 if (op.isKeepStorage()) {\n+                          if (part.isSparse()) {\n+                     resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n+                          } else { // sorted\n+                            resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySorted, part.dim());\n+                          }\n+                 } else {\n+                   if (part.getStorage() instanceof LongKeyVectorStorage) {\n+                     resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptySparse, part.dim());\n+                   } else {\n+                     resParts[k] = emptyStorage(part.getStorage(), StorageMethod.emptyDense);\n+                   }\n+                 }\n+               }\n+               k++;\n       }\n     }\n     return resParts;\n-  }\n-\n-  private enum StorageMethod {\n-    emptyDense, emptySparse, emptySorted\n-  }\n+    }\n \n-}\n+    private enum StorageMethod{emptyDense, emptySparse, emptySorted}\n+}\n\\ No newline at end of file\n",
            "diff_size": 284
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/437/StorageSwitch.java\nindex 0e0015d6ab..198140b229 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/437/StorageSwitch.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/437/StorageSwitch.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.ufuncs.executor;\n \n import com.tencent.angel.ml.math2.storage.LongKeyVectorStorage;\n",
            "diff_size": 1
        }
    ]
}