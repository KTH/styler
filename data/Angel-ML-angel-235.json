{
    "error_id": "235",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/235/UpdateRowsParam.java\nindex e31f49da7d..477fb27660 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/235/UpdateRowsParam.java\n@@ -36,91 +36,93 @@ import java.util.Map.Entry;\n \n public class UpdateRowsParam extends UpdateParam {\n \n-  protected Vector[] updates;\n-\n-  public UpdateRowsParam(int matrixId, Vector[] updates) {\n-    super(matrixId);\n-    this.updates = updates;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    // Split updates\n-    Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n-    for (int i = 0; i < updates.length; i++) {\n-      if (updates[i] != null) {\n-        mergeRowUpdateSplits(RowUpdateSplitUtils\n-            .split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n-      }\n+    protected Vector[] updates;\n+\n+    public UpdateRowsParam(int matrixId, Vector[] updates) {\n+        super(matrixId);\n+        this.updates = updates;\n     }\n \n-    // Shuffle update splits\n-    shuffleSplits(partToSplits);\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        // Split updates\n+        Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n+        for (int i = 0; i < updates.length; i++) {\n+            if (updates[i] != null) {\n+                mergeRowUpdateSplits(RowUpdateSplitUtils\n+                                .split(updates[i], getParts(matrixId, updates[i].getRowId())),\n+                        partToSplits);\n+            }\n+        }\n+\n+        // Shuffle update splits\n+        shuffleSplits(partToSplits);\n+\n+        // Generate part update parameters\n+        List<PartitionUpdateParam> partParams = new ArrayList<>(partToSplits.size());\n+        for (Entry<PartitionKey, List<RowUpdateSplit>> partEntry : partToSplits.entrySet()) {\n+            // Set split context: partition key, use int key for long key vector or not ect\n+            adapt(partEntry.getKey(), partEntry.getValue());\n+\n+            partParams.add(new PartUpdateRowsParam(matrixId, partEntry.getKey(),\n+                    partEntry.getValue()));\n+        }\n+        return partParams;\n+    }\n \n-    // Generate part update parameters\n-    List<PartitionUpdateParam> partParams = new ArrayList<>(partToSplits.size());\n-    for (Entry<PartitionKey, List<RowUpdateSplit>> partEntry : partToSplits.entrySet()) {\n-      // Set split context: partition key, use int key for long key vector or not ect\n-      adapt(partEntry.getKey(), partEntry.getValue());\n+    protected void shuffleSplits(Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+        for (List<RowUpdateSplit> splits : partToSplits.values()) {\n+            shuffleSplits(splits);\n+        }\n+    }\n \n-      partParams.add(new PartUpdateRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n+    protected void adapt(PartitionKey part, List<RowUpdateSplit> splits) {\n+        RowUpdateSplitContext context = new RowUpdateSplitContext();\n+        context.setPartKey(part);\n+        for (RowUpdateSplit split : splits) {\n+            split.setSplitContext(context);\n+            split.setUseIntKey(useIntKey(part));\n+        }\n     }\n-    return partParams;\n-  }\n \n-  protected void shuffleSplits(Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n-    for (List<RowUpdateSplit> splits : partToSplits.values()) {\n-      shuffleSplits(splits);\n+    private boolean useIntKey(PartitionKey part) {\n+        boolean useAdaptor = PSAgentContext.get().getConf()\n+                .getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n+                        AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n+        return useAdaptor && (part.getEndCol() - part.getStartCol() < Integer.MAX_VALUE);\n     }\n-  }\n-\n-  protected void adapt(PartitionKey part, List<RowUpdateSplit> splits) {\n-    RowUpdateSplitContext context = new RowUpdateSplitContext();\n-    context.setPartKey(part);\n-    for (RowUpdateSplit split : splits) {\n-      split.setSplitContext(context);\n-      split.setUseIntKey(useIntKey(part));\n+\n+    private void shuffleSplits(List<RowUpdateSplit> splits) {\n+        Collections.shuffle(splits);\n     }\n-  }\n-\n-  private boolean useIntKey(PartitionKey part) {\n-    boolean useAdaptor = PSAgentContext.get().getConf()\n-        .getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n-            AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n-    return useAdaptor && (part.getEndCol() - part.getStartCol() < Integer.MAX_VALUE);\n-  }\n-\n-  private void shuffleSplits(List<RowUpdateSplit> splits) {\n-    Collections.shuffle(splits);\n-  }\n-\n-  protected int getPartsNum(int matrixId) {\n-    return getParts(matrixId).size();\n-  }\n-\n-  private int getPartsNum(int matrixId, int rowId) {\n-    return getParts(matrixId, rowId).size();\n-  }\n-\n-  protected List<PartitionKey> getParts(int matrixId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-  }\n-\n-  protected List<PartitionKey> getParts(int matrixId, int rowId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId, rowId);\n-  }\n-\n-  protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits,\n-      Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n-    for (Entry<PartitionKey, RowUpdateSplit> entry : rowSplits.entrySet()) {\n-      List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n-      if (splits == null) {\n-        splits = new ArrayList<>(updates.length);\n-        partToSplits.put(entry.getKey(), splits);\n-      }\n-      splits.add(entry.getValue());\n+\n+    protected int getPartsNum(int matrixId) {\n+        return getParts(matrixId).size();\n+    }\n+\n+    private int getPartsNum(int matrixId, int rowId) {\n+        return getParts(matrixId, rowId).size();\n+    }\n+\n+    protected List<PartitionKey> getParts(int matrixId) {\n+        return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n+                .getPartitions(matrixId);\n+    }\n+\n+    protected List<PartitionKey> getParts(int matrixId, int rowId) {\n+        return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n+                .getPartitions(matrixId, rowId);\n+    }\n+\n+    protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits,\n+                                        Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+        for (Entry<PartitionKey, RowUpdateSplit> entry : rowSplits.entrySet()) {\n+            List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n+            if (splits == null) {\n+                splits = new ArrayList<>(updates.length);\n+                partToSplits.put(entry.getKey(), splits);\n+            }\n+            splits.add(entry.getValue());\n+        }\n     }\n-  }\n }\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/235/UpdateRowsParam.java\nindex e31f49da7d..1a335ba8c6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/235/UpdateRowsParam.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.matrix.psf.update.update;\n \n import com.tencent.angel.PartitionKey;\n@@ -49,8 +48,7 @@ public class UpdateRowsParam extends UpdateParam {\n     Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n     for (int i = 0; i < updates.length; i++) {\n       if (updates[i] != null) {\n-        mergeRowUpdateSplits(RowUpdateSplitUtils\n-            .split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n+        mergeRowUpdateSplits(RowUpdateSplitUtils.split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n       }\n     }\n \n@@ -123,4 +121,4 @@ public class UpdateRowsParam extends UpdateParam {\n       splits.add(entry.getValue());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 6, expected is 8, indentation should be the same level as line 65.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/235/UpdateRowsParam.java\nindex e31f49da7d..71cb9cd44e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/235/UpdateRowsParam.java\n@@ -36,22 +36,23 @@ import java.util.Map.Entry;\n \n public class UpdateRowsParam extends UpdateParam {\n \n-  protected Vector[] updates;\n+    protected Vector[] updates;\n \n-  public UpdateRowsParam(int matrixId, Vector[] updates) {\n+    public UpdateRowsParam(int matrixId, Vector[] updates) {\n     super(matrixId);\n     this.updates = updates;\n-  }\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n     // Split updates\n     Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n     for (int i = 0; i < updates.length; i++) {\n-      if (updates[i] != null) {\n-        mergeRowUpdateSplits(RowUpdateSplitUtils\n-            .split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n-      }\n+        if (updates[i] != null) {\n+        mergeRowUpdateSplits(\n+            RowUpdateSplitUtils.split(updates[i], getParts(matrixId, updates[i].getRowId())),\n+            partToSplits);\n+        }\n     }\n \n     // Shuffle update splits\n@@ -61,66 +62,62 @@ public class UpdateRowsParam extends UpdateParam {\n     List<PartitionUpdateParam> partParams = new ArrayList<>(partToSplits.size());\n     for (Entry<PartitionKey, List<RowUpdateSplit>> partEntry : partToSplits.entrySet()) {\n       // Set split context: partition key, use int key for long key vector or not ect\n-      adapt(partEntry.getKey(), partEntry.getValue());\n-\n-      partParams.add(new PartUpdateRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n+        adapt(partEntry.getKey(), partEntry.getValue());\n+        partParams.add(new PartUpdateRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n     }\n     return partParams;\n-  }\n+    }\n \n-  protected void shuffleSplits(Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+    protected void shuffleSplits(Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n     for (List<RowUpdateSplit> splits : partToSplits.values()) {\n-      shuffleSplits(splits);\n+        shuffleSplits(splits);\n+    }\n     }\n-  }\n \n-  protected void adapt(PartitionKey part, List<RowUpdateSplit> splits) {\n+    protected void adapt(PartitionKey part, List<RowUpdateSplit> splits) {\n     RowUpdateSplitContext context = new RowUpdateSplitContext();\n     context.setPartKey(part);\n     for (RowUpdateSplit split : splits) {\n-      split.setSplitContext(context);\n-      split.setUseIntKey(useIntKey(part));\n+        split.setSplitContext(context);\n+        split.setUseIntKey(useIntKey(part));\n+    }\n     }\n-  }\n \n-  private boolean useIntKey(PartitionKey part) {\n-    boolean useAdaptor = PSAgentContext.get().getConf()\n-        .getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n-            AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n+    private boolean useIntKey(PartitionKey part) {\n+    boolean useAdaptor = PSAgentContext.get().getConf().getBoolean(\n+                                                           AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n+                                                           AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n     return useAdaptor && (part.getEndCol() - part.getStartCol() < Integer.MAX_VALUE);\n-  }\n+    }\n \n-  private void shuffleSplits(List<RowUpdateSplit> splits) {\n+    private void shuffleSplits(List<RowUpdateSplit> splits) {\n     Collections.shuffle(splits);\n-  }\n+    }\n \n-  protected int getPartsNum(int matrixId) {\n+    protected int getPartsNum(int matrixId) {\n     return getParts(matrixId).size();\n-  }\n+    }\n \n-  private int getPartsNum(int matrixId, int rowId) {\n+    private int getPartsNum(int matrixId, int rowId) {\n     return getParts(matrixId, rowId).size();\n-  }\n+    }\n \n-  protected List<PartitionKey> getParts(int matrixId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId);\n-  }\n+    protected List<PartitionKey> getParts(int matrixId) {\n+    return PSAgentContext.get().getPsAgent().getMatrixMetaManager().getPartitions(matrixId);\n+    }\n \n-  protected List<PartitionKey> getParts(int matrixId, int rowId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId, rowId);\n-  }\n+    protected List<PartitionKey> getParts(int matrixId, int rowId) {\n+    return PSAgentContext.get().getPsAgent().getMatrixMetaManager().getPartitions(matrixId, rowId);\n+    }\n \n-  protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits,\n-      Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+    protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits, Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n     for (Entry<PartitionKey, RowUpdateSplit> entry : rowSplits.entrySet()) {\n-      List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n-      if (splits == null) {\n+        List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n+        if (splits == null) {\n         splits = new ArrayList<>(updates.length);\n         partToSplits.put(entry.getKey(), splits);\n-      }\n-      splits.add(entry.getValue());\n+        }\n+        splits.add(entry.getValue());\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/235/UpdateRowsParam.java\nindex e31f49da7d..9d3383772d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/235/UpdateRowsParam.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/styler_three_grams/235/UpdateRowsParam.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.matrix.psf.update.update;\n \n import com.tencent.angel.PartitionKey;\n",
            "diff_size": 1
        }
    ]
}