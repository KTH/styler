{
    "error_id": "541",
    "information": {
        "errors": [
            {
                "line": "120",
                "column": "53",
                "severity": "error",
                "message": "'+' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "                // the event subscription has no instance-id, so it's a message start event\n                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n            }\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/541/EventSubscriptionManager.java\nindex 48235fb3e2..c221721031 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/541/EventSubscriptionManager.java\n@@ -116,55 +116,55 @@ public class EventSubscriptionManager {\n             // throw exception only if there's already a subscription as start event\n             if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n                 // the event subscription has no instance-id, so it's a message start event\n-                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n-                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n-            }\n-        }\n+                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName() +\n+                  \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n+}\n+}\n \n-        MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n-        newSubscription.setEventName(messageEventDefinition.getMessageRef());\n-        newSubscription.setActivityId(startEvent.getId());\n-        newSubscription.setConfiguration(processDefinition.getId());\n-        newSubscription.setProcessDefinitionId(processDefinition.getId());\n+MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n+newSubscription.setEventName(messageEventDefinition.getMessageRef());\n+newSubscription.setActivityId(startEvent.getId());\n+newSubscription.setConfiguration(processDefinition.getId());\n+newSubscription.setProcessDefinitionId(processDefinition.getId());\n \n-        if (processDefinition.getTenantId() != null) {\n-            newSubscription.setTenantId(processDefinition.getTenantId());\n-        }\n+if (processDefinition.getTenantId() != null) {\n+    newSubscription.setTenantId(processDefinition.getTenantId());\n+}\n \n-        commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n-    }\n+commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n+}\n \n-    protected void addSignalEventSubscriptions(CommandContext commandContext,\n-                                               ProcessDefinitionEntity processDefinition,\n-                                               Process process,\n-                                               BpmnModel bpmnModel) {\n-        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-            for (FlowElement element : process.getFlowElements()) {\n-                if (element instanceof StartEvent) {\n-                    StartEvent startEvent = (StartEvent) element;\n-                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-                        if (eventDefinition instanceof SignalEventDefinition) {\n-                            SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-                            SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n-                            Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n-                            if (signal != null) {\n-                                subscriptionEntity.setEventName(signal.getName());\n-                            } else {\n-                                subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n-                            }\n-                            subscriptionEntity.setActivityId(startEvent.getId());\n-                            subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n-                            if (processDefinition.getTenantId() != null) {\n-                                subscriptionEntity.setTenantId(processDefinition.getTenantId());\n-                            }\n-\n-                            Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n+protected void addSignalEventSubscriptions(CommandContext commandContext,\n+                                           ProcessDefinitionEntity processDefinition,\n+                                           Process process,\n+                                           BpmnModel bpmnModel) {\n+    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+        for (FlowElement element : process.getFlowElements()) {\n+            if (element instanceof StartEvent) {\n+                StartEvent startEvent = (StartEvent) element;\n+                if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                    EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                    if (eventDefinition instanceof SignalEventDefinition) {\n+                        SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n+                        SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n+                        Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n+                        if (signal != null) {\n+                            subscriptionEntity.setEventName(signal.getName());\n+                        } else {\n+                            subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n+                        }\n+                        subscriptionEntity.setActivityId(startEvent.getId());\n+                        subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n+                        if (processDefinition.getTenantId() != null) {\n+                            subscriptionEntity.setTenantId(processDefinition.getTenantId());\n                         }\n+\n+                        Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n                     }\n                 }\n             }\n         }\n     }\n }\n+}\n \n",
            "diff_size": 43
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "120",
                    "column": "25",
                    "severity": "error",
                    "message": "'+' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/541/EventSubscriptionManager.java\nindex 48235fb3e2..c5e5a90b16 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/541/EventSubscriptionManager.java\n@@ -50,8 +50,8 @@ public class EventSubscriptionManager {\n         EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n         List<EventSubscriptionEntity> subscriptionsToDelete =\n                 eventSubscriptionEntityManager.findEventSubscriptionsByTypeAndProcessDefinitionId(eventHandlerType,\n-                                                                                                  processDefinition.getId(),\n-                                                                                                  processDefinition.getTenantId());\n+                        processDefinition.getId(),\n+                        processDefinition.getTenantId());\n \n         for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsToDelete) {\n             eventSubscriptionEntityManager.delete(eventSubscriptionEntity);\n@@ -62,7 +62,7 @@ public class EventSubscriptionManager {\n         // remove all subscriptions for the previous version\n         if (previousProcessDefinition != null) {\n             removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n-                                                 MessageEventHandler.EVENT_HANDLER_TYPE);\n+                    MessageEventHandler.EVENT_HANDLER_TYPE);\n         }\n     }\n \n@@ -70,7 +70,7 @@ public class EventSubscriptionManager {\n         // remove all subscriptions for the previous version\n         if (previousProcessDefinition != null) {\n             removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n-                                                 SignalEventHandler.EVENT_HANDLER_TYPE);\n+                    SignalEventHandler.EVENT_HANDLER_TYPE);\n         }\n     }\n \n@@ -86,9 +86,9 @@ public class EventSubscriptionManager {\n                         if (eventDefinition instanceof MessageEventDefinition) {\n                             MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n                             insertMessageEvent(messageEventDefinition,\n-                                               startEvent,\n-                                               processDefinition,\n-                                               bpmnModel);\n+                                    startEvent,\n+                                    processDefinition,\n+                                    bpmnModel);\n                         }\n                     }\n                 }\n@@ -109,15 +109,15 @@ public class EventSubscriptionManager {\n         // look for subscriptions for the same name in db:\n         List<EventSubscriptionEntity> subscriptionsForSameMessageName = commandContext.getEventSubscriptionEntityManager()\n                 .findEventSubscriptionsByName(MessageEventHandler.EVENT_HANDLER_TYPE,\n-                                              messageEventDefinition.getMessageRef(),\n-                                              processDefinition.getTenantId());\n+                        messageEventDefinition.getMessageRef(),\n+                        processDefinition.getTenantId());\n \n         for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsForSameMessageName) {\n             // throw exception only if there's already a subscription as start event\n             if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n                 // the event subscription has no instance-id, so it's a message start event\n                 throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n-                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n+                        + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n             }\n         }\n \n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 69.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 106.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 261).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 12, expected is 8, indentation should be the same level as line 109.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 96, indentation should be the same level as line 111.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 329).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/541/EventSubscriptionManager.java\nindex 48235fb3e2..34ed64be5c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/541/EventSubscriptionManager.java\n@@ -17,7 +17,6 @@\n package org.activiti.engine.impl.bpmn.deployer;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.EventDefinition;\n import org.activiti.bpmn.model.FlowElement;\n@@ -42,17 +41,16 @@ import org.activiti.engine.impl.util.CollectionUtil;\n /**\n  * Manages event subscriptions for newly-deployed process definitions and their previous versions.\n  */\n+\n+\n public class EventSubscriptionManager {\n \n-    protected void removeObsoleteEventSubscriptionsImpl(ProcessDefinitionEntity processDefinition,\n-                                                        String eventHandlerType) {\n+    protected void removeObsoleteEventSubscriptionsImpl(ProcessDefinitionEntity processDefinition, String eventHandlerType) {\n         // remove all subscriptions for the previous version\n         EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n-        List<EventSubscriptionEntity> subscriptionsToDelete =\n-                eventSubscriptionEntityManager.findEventSubscriptionsByTypeAndProcessDefinitionId(eventHandlerType,\n-                                                                                                  processDefinition.getId(),\n-                                                                                                  processDefinition.getTenantId());\n-\n+        List<EventSubscriptionEntity> subscriptionsToDelete = eventSubscriptionEntityManager.findEventSubscriptionsByTypeAndProcessDefinitionId(eventHandlerType,\n+                                                                                                                                                processDefinition.getId(),\n+                                                                                                                                                processDefinition.getTenantId());\n         for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsToDelete) {\n             eventSubscriptionEntityManager.delete(eventSubscriptionEntity);\n         }\n@@ -60,111 +58,99 @@ public class EventSubscriptionManager {\n \n     protected void removeObsoleteMessageEventSubscriptions(ProcessDefinitionEntity previousProcessDefinition) {\n         // remove all subscriptions for the previous version\n-        if (previousProcessDefinition != null) {\n-            removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n-                                                 MessageEventHandler.EVENT_HANDLER_TYPE);\n-        }\n+    if (previousProcessDefinition != null) {\n+        removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n+                                             MessageEventHandler.EVENT_HANDLER_TYPE);\n+    }\n     }\n \n     protected void removeObsoleteSignalEventSubScription(ProcessDefinitionEntity previousProcessDefinition) {\n         // remove all subscriptions for the previous version\n-        if (previousProcessDefinition != null) {\n-            removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n-                                                 SignalEventHandler.EVENT_HANDLER_TYPE);\n-        }\n+    if (previousProcessDefinition != null) {\n+        removeObsoleteEventSubscriptionsImpl(previousProcessDefinition,\n+                                             SignalEventHandler.EVENT_HANDLER_TYPE);\n+    }\n     }\n \n-    protected void addMessageEventSubscriptions(ProcessDefinitionEntity processDefinition,\n-                                                Process process,\n-                                                BpmnModel bpmnModel) {\n-        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-            for (FlowElement element : process.getFlowElements()) {\n-                if (element instanceof StartEvent) {\n-                    StartEvent startEvent = (StartEvent) element;\n-                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-                        if (eventDefinition instanceof MessageEventDefinition) {\n-                            MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n-                            insertMessageEvent(messageEventDefinition,\n-                                               startEvent,\n-                                               processDefinition,\n-                                               bpmnModel);\n-                        }\n-                    }\n+    protected void addMessageEventSubscriptions(ProcessDefinitionEntity processDefinition, Process process, BpmnModel bpmnModel) {\n+    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+        for (FlowElement element : process.getFlowElements()) {\n+        if (element instanceof StartEvent) {\n+            StartEvent startEvent = (StartEvent) element;\n+            if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                if (eventDefinition instanceof MessageEventDefinition) {\n+                    MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n+                    insertMessageEvent(messageEventDefinition,\n+                                       startEvent,\n+                                       processDefinition,\n+                                       bpmnModel);\n                 }\n             }\n         }\n+        }\n+    }\n     }\n \n     protected void insertMessageEvent(MessageEventDefinition messageEventDefinition,\n                                       StartEvent startEvent,\n-                                      ProcessDefinitionEntity processDefinition,\n-                                      BpmnModel bpmnModel) {\n-        CommandContext commandContext = Context.getCommandContext();\n-        if (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n-            Message message = bpmnModel.getMessage(messageEventDefinition.getMessageRef());\n-            messageEventDefinition.setMessageRef(message.getName());\n-        }\n+                                      ProcessDefinitionEntity processDefinition, BpmnModel bpmnModel) {\n+    CommandContext commandContext = Context.getCommandContext();\n+    if (bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n+        Message message = bpmnModel.getMessage(messageEventDefinition.getMessageRef());\n+        messageEventDefinition.setMessageRef(message.getName());\n+    }\n \n         // look for subscriptions for the same name in db:\n-        List<EventSubscriptionEntity> subscriptionsForSameMessageName = commandContext.getEventSubscriptionEntityManager()\n-                .findEventSubscriptionsByName(MessageEventHandler.EVENT_HANDLER_TYPE,\n-                                              messageEventDefinition.getMessageRef(),\n-                                              processDefinition.getTenantId());\n \n-        for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsForSameMessageName) {\n+    List<EventSubscriptionEntity> subscriptionsForSameMessageName = commandContext.getEventSubscriptionEntityManager().findEventSubscriptionsByName(MessageEventHandler.EVENT_HANDLER_TYPE, messageEventDefinition.getMessageRef(), processDefinition.getTenantId());\n+    for (EventSubscriptionEntity eventSubscriptionEntity : subscriptionsForSameMessageName) {\n             // throw exception only if there's already a subscription as start event\n-            if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n+        if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n                 // the event subscription has no instance-id, so it's a message start event\n-                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n-                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n-            }\n-        }\n-\n-        MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n-        newSubscription.setEventName(messageEventDefinition.getMessageRef());\n-        newSubscription.setActivityId(startEvent.getId());\n-        newSubscription.setConfiguration(processDefinition.getId());\n-        newSubscription.setProcessDefinitionId(processDefinition.getId());\n-\n-        if (processDefinition.getTenantId() != null) {\n-            newSubscription.setTenantId(processDefinition.getTenantId());\n+                                                                                                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName() + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n         }\n+    }\n \n-        commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n+    MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n+    newSubscription.setEventName(messageEventDefinition.getMessageRef());\n+    newSubscription.setActivityId(startEvent.getId());\n+    newSubscription.setConfiguration(processDefinition.getId());\n+    newSubscription.setProcessDefinitionId(processDefinition.getId());\n+    if (processDefinition.getTenantId() != null) {\n+        newSubscription.setTenantId(processDefinition.getTenantId());\n+    }\n+    commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n     }\n \n     protected void addSignalEventSubscriptions(CommandContext commandContext,\n                                                ProcessDefinitionEntity processDefinition,\n-                                               Process process,\n-                                               BpmnModel bpmnModel) {\n-        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-            for (FlowElement element : process.getFlowElements()) {\n-                if (element instanceof StartEvent) {\n-                    StartEvent startEvent = (StartEvent) element;\n-                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-                        if (eventDefinition instanceof SignalEventDefinition) {\n-                            SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-                            SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n-                            Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n-                            if (signal != null) {\n-                                subscriptionEntity.setEventName(signal.getName());\n-                            } else {\n-                                subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n-                            }\n-                            subscriptionEntity.setActivityId(startEvent.getId());\n-                            subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n-                            if (processDefinition.getTenantId() != null) {\n-                                subscriptionEntity.setTenantId(processDefinition.getTenantId());\n-                            }\n-\n-                            Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n-                        }\n+                                               Process process, BpmnModel bpmnModel) {\n+    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+        for (FlowElement element : process.getFlowElements()) {\n+        if (element instanceof StartEvent) {\n+            StartEvent startEvent = (StartEvent) element;\n+            if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                if (eventDefinition instanceof SignalEventDefinition) {\n+                    SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n+                    SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n+                    Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n+                    if (signal != null) {\n+                                                                          subscriptionEntity.setEventName(signal.getName());\n+                    } else {\n+                        subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n+                    }\n+                    subscriptionEntity.setActivityId(startEvent.getId());\n+                    subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n+                    if (processDefinition.getTenantId() != null) {\n+                        subscriptionEntity.setTenantId(processDefinition.getTenantId());\n                     }\n+                    Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n                 }\n             }\n         }\n+        }\n     }\n-}\n-\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/541/EventSubscriptionManager.java\nindex 48235fb3e2..c221721031 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/541/EventSubscriptionManager.java\n@@ -116,55 +116,55 @@ public class EventSubscriptionManager {\n             // throw exception only if there's already a subscription as start event\n             if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n                 // the event subscription has no instance-id, so it's a message start event\n-                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n-                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n-            }\n-        }\n+                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName() +\n+                  \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n+}\n+}\n \n-        MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n-        newSubscription.setEventName(messageEventDefinition.getMessageRef());\n-        newSubscription.setActivityId(startEvent.getId());\n-        newSubscription.setConfiguration(processDefinition.getId());\n-        newSubscription.setProcessDefinitionId(processDefinition.getId());\n+MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n+newSubscription.setEventName(messageEventDefinition.getMessageRef());\n+newSubscription.setActivityId(startEvent.getId());\n+newSubscription.setConfiguration(processDefinition.getId());\n+newSubscription.setProcessDefinitionId(processDefinition.getId());\n \n-        if (processDefinition.getTenantId() != null) {\n-            newSubscription.setTenantId(processDefinition.getTenantId());\n-        }\n+if (processDefinition.getTenantId() != null) {\n+    newSubscription.setTenantId(processDefinition.getTenantId());\n+}\n \n-        commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n-    }\n+commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n+}\n \n-    protected void addSignalEventSubscriptions(CommandContext commandContext,\n-                                               ProcessDefinitionEntity processDefinition,\n-                                               Process process,\n-                                               BpmnModel bpmnModel) {\n-        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-            for (FlowElement element : process.getFlowElements()) {\n-                if (element instanceof StartEvent) {\n-                    StartEvent startEvent = (StartEvent) element;\n-                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-                        if (eventDefinition instanceof SignalEventDefinition) {\n-                            SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-                            SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n-                            Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n-                            if (signal != null) {\n-                                subscriptionEntity.setEventName(signal.getName());\n-                            } else {\n-                                subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n-                            }\n-                            subscriptionEntity.setActivityId(startEvent.getId());\n-                            subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n-                            if (processDefinition.getTenantId() != null) {\n-                                subscriptionEntity.setTenantId(processDefinition.getTenantId());\n-                            }\n-\n-                            Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n+protected void addSignalEventSubscriptions(CommandContext commandContext,\n+                                           ProcessDefinitionEntity processDefinition,\n+                                           Process process,\n+                                           BpmnModel bpmnModel) {\n+    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+        for (FlowElement element : process.getFlowElements()) {\n+            if (element instanceof StartEvent) {\n+                StartEvent startEvent = (StartEvent) element;\n+                if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                    EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                    if (eventDefinition instanceof SignalEventDefinition) {\n+                        SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n+                        SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n+                        Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n+                        if (signal != null) {\n+                            subscriptionEntity.setEventName(signal.getName());\n+                        } else {\n+                            subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n+                        }\n+                        subscriptionEntity.setActivityId(startEvent.getId());\n+                        subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n+                        if (processDefinition.getTenantId() != null) {\n+                            subscriptionEntity.setTenantId(processDefinition.getTenantId());\n                         }\n+\n+                        Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n                     }\n                 }\n             }\n         }\n     }\n }\n+}\n \n",
            "diff_size": 43
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/541/EventSubscriptionManager.java\nindex 48235fb3e2..4f81273494 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/541/EventSubscriptionManager.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/541/EventSubscriptionManager.java\n@@ -116,55 +116,55 @@ public class EventSubscriptionManager {\n             // throw exception only if there's already a subscription as start event\n             if (eventSubscriptionEntity.getProcessInstanceId() == null || eventSubscriptionEntity.getProcessInstanceId().isEmpty()) { // processInstanceId != null or not empty -> it's a message related to an execution\n                 // the event subscription has no instance-id, so it's a message start event\n-                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName()\n-                                                    + \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n-            }\n-        }\n+                throw new ActivitiException(\"Cannot deploy process definition '\" + processDefinition.getResourceName() +\n+                                                      \"': there already is a message event subscription for the message with name '\" + messageEventDefinition.getMessageRef() + \"'.\");\n+}\n+}\n \n-        MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n-        newSubscription.setEventName(messageEventDefinition.getMessageRef());\n-        newSubscription.setActivityId(startEvent.getId());\n-        newSubscription.setConfiguration(processDefinition.getId());\n-        newSubscription.setProcessDefinitionId(processDefinition.getId());\n+MessageEventSubscriptionEntity newSubscription = commandContext.getEventSubscriptionEntityManager().createMessageEventSubscription();\n+newSubscription.setEventName(messageEventDefinition.getMessageRef());\n+newSubscription.setActivityId(startEvent.getId());\n+newSubscription.setConfiguration(processDefinition.getId());\n+newSubscription.setProcessDefinitionId(processDefinition.getId());\n \n-        if (processDefinition.getTenantId() != null) {\n-            newSubscription.setTenantId(processDefinition.getTenantId());\n-        }\n+if (processDefinition.getTenantId() != null) {\n+    newSubscription.setTenantId(processDefinition.getTenantId());\n+}\n \n-        commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n-    }\n+commandContext.getEventSubscriptionEntityManager().insert(newSubscription);\n+}\n \n-    protected void addSignalEventSubscriptions(CommandContext commandContext,\n-                                               ProcessDefinitionEntity processDefinition,\n-                                               Process process,\n-                                               BpmnModel bpmnModel) {\n-        if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n-            for (FlowElement element : process.getFlowElements()) {\n-                if (element instanceof StartEvent) {\n-                    StartEvent startEvent = (StartEvent) element;\n-                    if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n-                        EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n-                        if (eventDefinition instanceof SignalEventDefinition) {\n-                            SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-                            SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n-                            Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n-                            if (signal != null) {\n-                                subscriptionEntity.setEventName(signal.getName());\n-                            } else {\n-                                subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n-                            }\n-                            subscriptionEntity.setActivityId(startEvent.getId());\n-                            subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n-                            if (processDefinition.getTenantId() != null) {\n-                                subscriptionEntity.setTenantId(processDefinition.getTenantId());\n-                            }\n-\n-                            Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n+protected void addSignalEventSubscriptions(CommandContext commandContext,\n+                                           ProcessDefinitionEntity processDefinition,\n+                                           Process process,\n+                                           BpmnModel bpmnModel) {\n+    if (CollectionUtil.isNotEmpty(process.getFlowElements())) {\n+        for (FlowElement element : process.getFlowElements()) {\n+            if (element instanceof StartEvent) {\n+                StartEvent startEvent = (StartEvent) element;\n+                if (CollectionUtil.isNotEmpty(startEvent.getEventDefinitions())) {\n+                    EventDefinition eventDefinition = startEvent.getEventDefinitions().get(0);\n+                    if (eventDefinition instanceof SignalEventDefinition) {\n+                        SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n+                        SignalEventSubscriptionEntity subscriptionEntity = commandContext.getEventSubscriptionEntityManager().createSignalEventSubscription();\n+                        Signal signal = bpmnModel.getSignal(signalEventDefinition.getSignalRef());\n+                        if (signal != null) {\n+                            subscriptionEntity.setEventName(signal.getName());\n+                        } else {\n+                            subscriptionEntity.setEventName(signalEventDefinition.getSignalRef());\n+                        }\n+                        subscriptionEntity.setActivityId(startEvent.getId());\n+                        subscriptionEntity.setProcessDefinitionId(processDefinition.getId());\n+                        if (processDefinition.getTenantId() != null) {\n+                            subscriptionEntity.setTenantId(processDefinition.getTenantId());\n                         }\n+\n+                        Context.getCommandContext().getEventSubscriptionEntityManager().insert(subscriptionEntity);\n                     }\n                 }\n             }\n         }\n     }\n }\n+}\n \n",
            "diff_size": 43
        }
    ]
}