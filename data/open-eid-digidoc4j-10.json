{
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "65",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": " * ASIC file container parser\n */\npublic class AsicFileContainerParser extends AsicContainerParser{\n\n  private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n  private ZipFile zipFile;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/10/AsicFileContainerParser.java\nindex 475f8ac5ad..0b4e897c09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler/10/AsicFileContainerParser.java\n@@ -27,7 +27,7 @@ import eu.europa.esig.dss.InMemoryDocument;\n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n+public class AsicFileContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n   private ZipFile zipFile;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/10/AsicFileContainerParser.java\nindex 475f8ac5ad..9697474528 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/intellij/10/AsicFileContainerParser.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -27,7 +27,7 @@ import eu.europa.esig.dss.InMemoryDocument;\n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n+public class AsicFileContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n   private ZipFile zipFile;\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/10/AsicFileContainerParser.java\nindex 475f8ac5ad..25b957c1a9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/naturalize/10/AsicFileContainerParser.java\n@@ -27,7 +27,7 @@ import eu.europa.esig.dss.InMemoryDocument;\n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n+public class AsicFileContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n   private ZipFile zipFile;\n@@ -92,4 +92,4 @@ public class AsicFileContainerParser extends AsicContainerParser{\n       throw new TechnicalException(\"Error parsing manifest file\", e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/10/AsicFileContainerParser.java\nindex 475f8ac5ad..d3fcadad1c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/codebuff/10/AsicFileContainerParser.java\n@@ -15,81 +15,84 @@ import java.io.InputStream;\n import java.util.Enumeration;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipFile;\n-\n import org.apache.commons.io.IOUtils;\n import org.digidoc4j.Configuration;\n import org.digidoc4j.exceptions.TechnicalException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.InMemoryDocument;\n \n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n-  private ZipFile zipFile;\n+\n+public class AsicFileContainerParser extends AsicContainerParser {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n+    private ZipFile zipFile;\n \n   /**\n    * @param containerPath path\n    * @param configuration configuration\n    */\n-  public AsicFileContainerParser(String containerPath, Configuration configuration) {\n+\n+\n+    public AsicFileContainerParser(String containerPath, Configuration configuration) {\n     super(configuration);\n     try {\n-      zipFile = new ZipFile(containerPath);\n+        zipFile = new ZipFile(containerPath);\n     } catch (IOException e) {\n       logger.error(\"Error reading container from \" + containerPath + \" - \" + e.getMessage());\n       throw new RuntimeException(\"Error reading container from \" + containerPath);\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void parseContainer() {\n+    @Override\n+    protected void parseContainer() {\n     logger.debug(\"Parsing zip file\");\n     try {\n-      String zipFileComment = zipFile.getComment();\n-      setZipFileComment(zipFileComment);\n-      parseZipFileManifest();\n-      Enumeration<? extends ZipEntry> entries = zipFile.entries();\n-      while (entries.hasMoreElements()) {\n+        String zipFileComment = zipFile.getComment();\n+        setZipFileComment(zipFileComment);\n+        parseZipFileManifest();\n+        Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+        while (entries.hasMoreElements()) {\n         ZipEntry zipEntry = entries.nextElement();\n         parseEntry(zipEntry);\n-      }\n+        }\n     } finally {\n       IOUtils.closeQuietly(zipFile);\n     }\n-  }\n+    }\n \n-  @Override\n-  protected void extractManifest(ZipEntry entry) {\n+    @Override\n+    protected void extractManifest(ZipEntry entry) {\n     extractAsicEntry(entry);\n-  }\n+    }\n \n-  @Override\n-  protected InputStream getZipEntryInputStream(ZipEntry entry) {\n+    @Override\n+    protected InputStream getZipEntryInputStream(ZipEntry entry) {\n     try {\n-      return zipFile.getInputStream(entry);\n+        return zipFile.getInputStream(entry);\n     } catch (IOException e) {\n       logger.error(\"Error reading data file '\" + entry.getName() + \"' from the asic container: \" + e.getMessage());\n       throw new TechnicalException(\"Error reading data file '\" + entry.getName() + \"' from the asic container\", e);\n     }\n-  }\n+    }\n \n-  private void parseZipFileManifest() {\n+    private void parseZipFileManifest() {\n     ZipEntry entry = zipFile.getEntry(MANIFEST);\n     if (entry == null) {\n-      return;\n+        return;\n     }\n     try {\n-      InputStream manifestStream = getZipEntryInputStream(entry);\n-      InMemoryDocument manifestFile = new InMemoryDocument(IOUtils.toByteArray(manifestStream));\n-      parseManifestEntry(manifestFile);\n+        InputStream manifestStream = getZipEntryInputStream(entry);\n+        InMemoryDocument manifestFile = new InMemoryDocument(IOUtils.toByteArray(manifestStream));\n+        parseManifestEntry(manifestFile);\n     } catch (IOException e) {\n       logger.error(\"Error parsing manifest file: \" + e.getMessage());\n       throw new TechnicalException(\"Error parsing manifest file\", e);\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/10/AsicFileContainerParser.java\nindex 475f8ac5ad..0b4e897c09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_random/10/AsicFileContainerParser.java\n@@ -27,7 +27,7 @@ import eu.europa.esig.dss.InMemoryDocument;\n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n+public class AsicFileContainerParser extends AsicContainerParser {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n   private ZipFile zipFile;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "column": "66",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/10/AsicFileContainerParser.java\nindex 475f8ac5ad..6ce1de3db4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/errored/1/10/AsicFileContainerParser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/open-eid-digidoc4j/styler_three_grams/10/AsicFileContainerParser.java\n@@ -27,69 +27,67 @@ import eu.europa.esig.dss.InMemoryDocument;\n /**\n  * ASIC file container parser\n  */\n-public class AsicFileContainerParser extends AsicContainerParser{\n+public class AsicFileContainerParser extends AsicContainerParser {private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n+private ZipFile zipFile;\n \n-  private static final Logger logger = LoggerFactory.getLogger(AsicFileContainerParser.class);\n-  private ZipFile zipFile;\n-\n-  /**\n+/**\n    * @param containerPath path\n    * @param configuration configuration\n    */\n-  public AsicFileContainerParser(String containerPath, Configuration configuration) {\n-    super(configuration);\n-    try {\n-      zipFile = new ZipFile(containerPath);\n-    } catch (IOException e) {\n-      logger.error(\"Error reading container from \" + containerPath + \" - \" + e.getMessage());\n-      throw new RuntimeException(\"Error reading container from \" + containerPath);\n-    }\n+public AsicFileContainerParser(String containerPath, Configuration configuration) {\n+  super(configuration);\n+  try {\n+    zipFile = new ZipFile(containerPath);\n+  } catch (IOException e) {\n+    logger.error(\"Error reading container from \" + containerPath + \" - \" + e.getMessage());\n+    throw new RuntimeException(\"Error reading container from \" + containerPath);\n   }\n+}\n \n-  @Override\n-  protected void parseContainer() {\n-    logger.debug(\"Parsing zip file\");\n-    try {\n-      String zipFileComment = zipFile.getComment();\n-      setZipFileComment(zipFileComment);\n-      parseZipFileManifest();\n-      Enumeration<? extends ZipEntry> entries = zipFile.entries();\n-      while (entries.hasMoreElements()) {\n-        ZipEntry zipEntry = entries.nextElement();\n-        parseEntry(zipEntry);\n-      }\n-    } finally {\n-      IOUtils.closeQuietly(zipFile);\n+@Override\n+protected void parseContainer() {\n+  logger.debug(\"Parsing zip file\");\n+  try {\n+    String zipFileComment = zipFile.getComment();\n+    setZipFileComment(zipFileComment);\n+    parseZipFileManifest();\n+    Enumeration<? extends ZipEntry> entries = zipFile.entries();\n+    while (entries.hasMoreElements()) {\n+      ZipEntry zipEntry = entries.nextElement();\n+      parseEntry(zipEntry);\n     }\n+  } finally {\n+    IOUtils.closeQuietly(zipFile);\n   }\n+}\n \n-  @Override\n-  protected void extractManifest(ZipEntry entry) {\n-    extractAsicEntry(entry);\n-  }\n+@Override\n+protected void extractManifest(ZipEntry entry) {\n+  extractAsicEntry(entry);\n+}\n \n-  @Override\n-  protected InputStream getZipEntryInputStream(ZipEntry entry) {\n-    try {\n-      return zipFile.getInputStream(entry);\n-    } catch (IOException e) {\n-      logger.error(\"Error reading data file '\" + entry.getName() + \"' from the asic container: \" + e.getMessage());\n-      throw new TechnicalException(\"Error reading data file '\" + entry.getName() + \"' from the asic container\", e);\n-    }\n+@Override\n+protected InputStream getZipEntryInputStream(ZipEntry entry) {\n+  try {\n+    return zipFile.getInputStream(entry);\n+  } catch (IOException e) {\n+    logger.error(\"Error reading data file '\" + entry.getName() + \"' from the asic container: \" + e.getMessage());\n+    throw new TechnicalException(\"Error reading data file '\" + entry.getName() + \"' from the asic container\", e);\n   }\n+}\n \n-  private void parseZipFileManifest() {\n-    ZipEntry entry = zipFile.getEntry(MANIFEST);\n-    if (entry == null) {\n-      return;\n-    }\n-    try {\n-      InputStream manifestStream = getZipEntryInputStream(entry);\n-      InMemoryDocument manifestFile = new InMemoryDocument(IOUtils.toByteArray(manifestStream));\n-      parseManifestEntry(manifestFile);\n-    } catch (IOException e) {\n-      logger.error(\"Error parsing manifest file: \" + e.getMessage());\n-      throw new TechnicalException(\"Error parsing manifest file\", e);\n-    }\n+private void parseZipFileManifest() {\n+  ZipEntry entry = zipFile.getEntry(MANIFEST);\n+  if (entry == null) {\n+    return;\n+  }\n+  try {\n+    InputStream manifestStream = getZipEntryInputStream(entry);\n+    InMemoryDocument manifestFile = new InMemoryDocument(IOUtils.toByteArray(manifestStream));\n+    parseManifestEntry(manifestFile);\n+  } catch (IOException e) {\n+    logger.error(\"Error parsing manifest file: \" + e.getMessage());\n+    throw new TechnicalException(\"Error parsing manifest file\", e);\n   }\n }\n+}\n",
            "diff_size": 59
        }
    ]
}