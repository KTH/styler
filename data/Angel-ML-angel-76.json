{
    "error_id": "76",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/76/Tree.java\nindex 90f71e0ec8..5e98f0e891 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/76/Tree.java\n@@ -24,36 +24,36 @@ import java.util.TreeMap;\n \n public abstract class Tree<TParam extends TreeParam, Node extends TNode> implements Serializable {\n \n-  protected final TParam param;\n-  protected Map<Integer, Node> nodes; // nodes in the tree\n+    protected final TParam param;\n+    protected Map<Integer, Node> nodes; // nodes in the tree\n \n-  public Tree(TParam param) {\n-    this.param = param;\n-    this.nodes = new TreeMap<>();\n-  }\n+    public Tree(TParam param) {\n+        this.param = param;\n+        this.nodes = new TreeMap<>();\n+    }\n \n-  public TParam getParam() {\n-    return this.param;\n-  }\n+    public TParam getParam() {\n+        return this.param;\n+    }\n \n-  public Node getRoot() {\n-    return this.nodes.get(0);\n-  }\n+    public Node getRoot() {\n+        return this.nodes.get(0);\n+    }\n \n-  public Node getNode(int nid) {\n-    return this.nodes.get(nid);\n-  }\n+    public Node getNode(int nid) {\n+        return this.nodes.get(nid);\n+    }\n \n-  public void setNode(int nid, Node node) {\n-    this.nodes.put(nid, node);\n-  }\n+    public void setNode(int nid, Node node) {\n+        this.nodes.put(nid, node);\n+    }\n \n-  public Map<Integer, Node> getNodes() {\n-    return this.nodes;\n-  }\n+    public Map<Integer, Node> getNodes() {\n+        return this.nodes;\n+    }\n \n-  public int size() {\n-    return nodes.size();\n-  }\n+    public int size() {\n+        return nodes.size();\n+    }\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/76/Tree.java\nindex 90f71e0ec8..102da45543 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/76/Tree.java\n@@ -56,4 +56,4 @@ public abstract class Tree<TParam extends TreeParam, Node extends TNode> impleme\n     return nodes.size();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/76/Tree.java\nindex 90f71e0ec8..72a8dc38cc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/76/Tree.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/76/Tree.java\n@@ -24,36 +24,35 @@ import java.util.TreeMap;\n \n public abstract class Tree<TParam extends TreeParam, Node extends TNode> implements Serializable {\n \n-  protected final TParam param;\n-  protected Map<Integer, Node> nodes; // nodes in the tree\n+    protected final TParam param;\n+    protected Map<Integer, Node> nodes; // nodes in the tree\n \n-  public Tree(TParam param) {\n+    public Tree(TParam param) {\n     this.param = param;\n     this.nodes = new TreeMap<>();\n-  }\n+    }\n \n-  public TParam getParam() {\n+    public TParam getParam() {\n     return this.param;\n-  }\n+    }\n \n-  public Node getRoot() {\n+    public Node getRoot() {\n     return this.nodes.get(0);\n-  }\n+    }\n \n-  public Node getNode(int nid) {\n+    public Node getNode(int nid) {\n     return this.nodes.get(nid);\n-  }\n+    }\n \n-  public void setNode(int nid, Node node) {\n+    public void setNode(int nid, Node node) {\n     this.nodes.put(nid, node);\n-  }\n+    }\n \n-  public Map<Integer, Node> getNodes() {\n+    public Map<Integer, Node> getNodes() {\n     return this.nodes;\n-  }\n+    }\n \n-  public int size() {\n+    public int size() {\n     return nodes.size();\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}