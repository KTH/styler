{
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "60",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public synchronized void updateValue(V value) {\n        if(data.size() >= getMaxLimit()) {\n            data.remove(counter - getMaxLimit());\n        }\n        data.put(generateKey(), value);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler/19/ValueHistory.java\nindex 4f3b1e301b..273347515b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler/19/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/intellij/19/ValueHistory.java\nindex 4f3b1e301b..273347515b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/intellij/19/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/naturalize/19/ValueHistory.java\nindex 4f3b1e301b..4c49f501e6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/naturalize/19/ValueHistory.java\n@@ -44,7 +44,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n         int responseCounter = Math.min(n, data.size());\n         int lastToRetrieve = counter - responseCounter;\n         for (int i = counter - 1; i >= lastToRetrieve; i--) {\n-            responseCounter--;\n+  responseCounter--;\n             response.put(responseCounter, getValue(i));\n         }\n         return response;\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n@@ -110,4 +110,4 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n     public int getNumberOfValuesSinceStart() {\n         return counter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/codebuff/19/ValueHistory.java\nindex 4f3b1e301b..32d15b87dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/codebuff/19/ValueHistory.java\n@@ -5,29 +5,33 @@ import java.util.HashMap;\n /**\n  * HashMap implementation of a value history with unique Integer keys.\n  */\n+\n+\n public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n     /**\n      * This counter tracks the number of values, indices still start from 0.\n      * Reading is allowed without synchronization, modifications only through generateKey().\n      */\n+\n     private volatile int counter;\n     private HashMap<Integer, V> data;\n \n     public ValueHistory() {\n-        data = new HashMap<>();\n-        counter = 0;\n+    data = new HashMap<>();\n+    counter = 0;\n     }\n \n     /**\n      * @return The last element added to this history.\n      */\n+\n     @Override\n     public V getValue() {\n-        if (counter == 0) {\n-            return null;\n-        } else {\n-            return getValue(counter - 1);\n-        }\n+    if (counter == 0) {\n+        return null;\n+    } else {\n+      return getValue(counter - 1);\n+    }\n     }\n \n     /**\n@@ -38,16 +42,17 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param n The number of instances to retrieve.\n      * @return A hashmap of n last values added to the history.\n      */\n+\n     @Override\n     public synchronized HashMap<Integer, V> getLastNValues(int n) {\n-        HashMap<Integer, V> response = new HashMap<>();\n-        int responseCounter = Math.min(n, data.size());\n-        int lastToRetrieve = counter - responseCounter;\n-        for (int i = counter - 1; i >= lastToRetrieve; i--) {\n-            responseCounter--;\n-            response.put(responseCounter, getValue(i));\n-        }\n-        return response;\n+    HashMap<Integer, V> response = new HashMap<>();\n+    int responseCounter = Math.min(n, data.size());\n+    int lastToRetrieve = counter - responseCounter;\n+    for (int i = counter - 1; i >= lastToRetrieve; i--) {\n+        responseCounter--;\n+        response.put(responseCounter, getValue(i));\n+    }\n+    return response;\n     }\n \n     /**\n@@ -55,12 +60,13 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      *\n      * @param value The value to be added.\n      */\n+\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n-            data.remove(counter - getMaxLimit());\n-        }\n-        data.put(generateKey(), value);\n+    if (data.size() >= getMaxLimit()) {\n+        data.remove(counter - getMaxLimit());\n+    }\n+    data.put(generateKey(), value);\n     }\n \n     /**\n@@ -69,9 +75,10 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param value The value to be checked if exists.\n      * @return true if such value is in the history and false otherwise\n      */\n+\n     @Override\n     public synchronized boolean contains(V value) {\n-        return data.containsValue(value);\n+    return data.containsValue(value);\n     }\n \n     /**\n@@ -79,11 +86,12 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      *\n      * @return true if the history was emptied and false otherwise\n      */\n+\n     @Override\n     public synchronized boolean purgeHistory() {\n-        data.clear();\n-        counter = 0;\n-        return data.isEmpty();\n+    data.clear();\n+    counter = 0;\n+    return data.isEmpty();\n     }\n \n     /**\n@@ -91,8 +99,9 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      *\n      * @return A key which is unique in this list instance.\n      */\n+\n     private synchronized int generateKey() {\n-        return counter++;\n+    return counter++;\n     }\n \n     /**\n@@ -102,12 +111,13 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param key The key of the value.\n      * @return The value, or <code>null</code> if not found.\n      */\n+\n     private synchronized V getValue(int key) {\n-        return data.getOrDefault(key, null);\n+    return data.getOrDefault(key, null);\n     }\n \n     @Override\n     public int getNumberOfValuesSinceStart() {\n-        return counter;\n+    return counter;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler_random/19/ValueHistory.java\nindex 4f3b1e301b..273347515b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler_random/19/ValueHistory.java\n@@ -57,7 +57,7 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      */\n     @Override\n     public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n+        if (data.size() >= getMaxLimit()) {\n             data.remove(counter - getMaxLimit());\n         }\n         data.put(generateKey(), value);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "column": "53",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler_three_grams/19/ValueHistory.java\nindex 4f3b1e301b..f002afe2d0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/errored/1/19/ValueHistory.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Roboy-roboy_dialog/styler_three_grams/19/ValueHistory.java\n@@ -56,58 +56,57 @@ public class ValueHistory<V> implements AbstractValueHistory<Integer, V> {\n      * @param value The value to be added.\n      */\n     @Override\n-    public synchronized void updateValue(V value) {\n-        if(data.size() >= getMaxLimit()) {\n-            data.remove(counter - getMaxLimit());\n-        }\n-        data.put(generateKey(), value);\n+    public synchronized void updateValue(V value) { if(data.size() >= getMaxLimit()) {\n+        data.remove(counter - getMaxLimit());\n     }\n+    data.put(generateKey(), value);\n+}\n \n-    /**\n+/**\n      * Checks if the value is contained in the history.\n      *\n      * @param value The value to be checked if exists.\n      * @return true if such value is in the history and false otherwise\n      */\n-    @Override\n-    public synchronized boolean contains(V value) {\n-        return data.containsValue(value);\n-    }\n+@Override\n+public synchronized boolean contains(V value) {\n+    return data.containsValue(value);\n+}\n \n-    /**\n+/**\n      * Removes all values from the history.\n      *\n      * @return true if the history was emptied and false otherwise\n      */\n-    @Override\n-    public synchronized boolean purgeHistory() {\n-        data.clear();\n-        counter = 0;\n-        return data.isEmpty();\n-    }\n+@Override\n+public synchronized boolean purgeHistory() {\n+    data.clear();\n+    counter = 0;\n+    return data.isEmpty();\n+}\n \n-    /**\n+/**\n      * Generates a key that is unique through incrementing an internal counter.\n      *\n      * @return A key which is unique in this list instance.\n      */\n-    private synchronized int generateKey() {\n-        return counter++;\n-    }\n+private synchronized int generateKey() {\n+    return counter++;\n+}\n \n-    /**\n+/**\n      * In a ValueList, only getValue() and updateValue() directly access the HashMap data.\n      * Setting these methods to be synchronous avoids concurrency issues.\n      *\n      * @param key The key of the value.\n      * @return The value, or <code>null</code> if not found.\n      */\n-    private synchronized V getValue(int key) {\n-        return data.getOrDefault(key, null);\n-    }\n+private synchronized V getValue(int key) {\n+    return data.getOrDefault(key, null);\n+}\n \n-    @Override\n-    public int getNumberOfValuesSinceStart() {\n-        return counter;\n-    }\n+@Override\n+public int getNumberOfValuesSinceStart() {\n+    return counter;\n+}\n }\n",
            "diff_size": 31
        }
    ]
}