{
    "error_id": "796",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/796/NeedsActiveTaskCmd.java\nindex 93ee2ec4af..d89944714d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/796/NeedsActiveTaskCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/796/NeedsActiveTaskCmd.java\nindex 93ee2ec4af..cf4482b917 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/796/NeedsActiveTaskCmd.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -24,48 +25,46 @@ import org.activiti.engine.task.Task;\n \n /**\n  * An abstract superclass for {@link Command} implementations that want to verify the provided task is always active (ie. not suspended).\n- * \n-\n  */\n public abstract class NeedsActiveTaskCmd<T> implements Command<T>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-  protected String taskId;\n+    protected String taskId;\n \n-  public NeedsActiveTaskCmd(String taskId) {\n-    this.taskId = taskId;\n-  }\n+    public NeedsActiveTaskCmd(String taskId) {\n+        this.taskId = taskId;\n+    }\n \n-  public T execute(CommandContext commandContext) {\n+    public T execute(CommandContext commandContext) {\n \n-    if (taskId == null) {\n-      throw new ActivitiIllegalArgumentException(\"taskId is null\");\n-    }\n+        if (taskId == null) {\n+            throw new ActivitiIllegalArgumentException(\"taskId is null\");\n+        }\n \n-    TaskEntity task = commandContext.getTaskEntityManager().findById(taskId);\n+        TaskEntity task = commandContext.getTaskEntityManager().findById(taskId);\n \n-    if (task == null) {\n-      throw new ActivitiObjectNotFoundException(\"Cannot find task with id \" + taskId, Task.class);\n-    }\n+        if (task == null) {\n+            throw new ActivitiObjectNotFoundException(\"Cannot find task with id \" + taskId, Task.class);\n+        }\n \n-    if (task.isSuspended()) {\n-      throw new ActivitiException(getSuspendedTaskException());\n-    }\n+        if (task.isSuspended()) {\n+            throw new ActivitiException(getSuspendedTaskException());\n+        }\n \n-    return execute(commandContext, task);\n-  }\n+        return execute(commandContext, task);\n+    }\n \n-  /**\n-   * Subclasses must implement in this method their normal command logic. The provided task is ensured to be active.\n-   */\n-  protected abstract T execute(CommandContext commandContext, TaskEntity task);\n+    /**\n+     * Subclasses must implement in this method their normal command logic. The provided task is ensured to be active.\n+     */\n+    protected abstract T execute(CommandContext commandContext, TaskEntity task);\n \n-  /**\n-   * Subclasses can override this method to provide a customized exception message that will be thrown when the task is suspended.\n-   */\n-  protected String getSuspendedTaskException() {\n-    return \"Cannot execute operation: task is suspended\";\n-  }\n+    /**\n+     * Subclasses can override this method to provide a customized exception message that will be thrown when the task is suspended.\n+     */\n+    protected String getSuspendedTaskException() {\n+        return \"Cannot execute operation: task is suspended\";\n+    }\n \n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 61.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/796/NeedsActiveTaskCmd.java\nindex 93ee2ec4af..266f69532b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/796/NeedsActiveTaskCmd.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.ActivitiObjectNotFoundException;\n@@ -27,45 +26,44 @@ import org.activiti.engine.task.Task;\n  * \n \n  */\n-public abstract class NeedsActiveTaskCmd<T> implements Command<T>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n \n-  protected String taskId;\n+public abstract class NeedsActiveTaskCmd<T> implements Command<T>, Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n+    protected String taskId;\n \n-  public NeedsActiveTaskCmd(String taskId) {\n+    public NeedsActiveTaskCmd(String taskId) {\n     this.taskId = taskId;\n-  }\n-\n-  public T execute(CommandContext commandContext) {\n+    }\n \n+    public T execute(CommandContext commandContext) {\n     if (taskId == null) {\n-      throw new ActivitiIllegalArgumentException(\"taskId is null\");\n+        throw new ActivitiIllegalArgumentException(\"taskId is null\");\n     }\n \n     TaskEntity task = commandContext.getTaskEntityManager().findById(taskId);\n-\n     if (task == null) {\n-      throw new ActivitiObjectNotFoundException(\"Cannot find task with id \" + taskId, Task.class);\n+        throw new ActivitiObjectNotFoundException(\"Cannot find task with id \" + taskId,\n+                                                  Task.class);\n     }\n \n     if (task.isSuspended()) {\n-      throw new ActivitiException(getSuspendedTaskException());\n+        throw new ActivitiException(getSuspendedTaskException());\n     }\n-\n     return execute(commandContext, task);\n-  }\n+    }\n \n   /**\n    * Subclasses must implement in this method their normal command logic. The provided task is ensured to be active.\n    */\n-  protected abstract T execute(CommandContext commandContext, TaskEntity task);\n+\n+    protected abstract T execute(CommandContext commandContext, TaskEntity task);\n \n   /**\n    * Subclasses can override this method to provide a customized exception message that will be thrown when the task is suspended.\n    */\n-  protected String getSuspendedTaskException() {\n+    protected String getSuspendedTaskException() {\n     return \"Cannot execute operation: task is suspended\";\n-  }\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/796/NeedsActiveTaskCmd.java\nindex 93ee2ec4af..d89944714d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/796/NeedsActiveTaskCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/796/NeedsActiveTaskCmd.java\nindex 93ee2ec4af..d89944714d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/796/NeedsActiveTaskCmd.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/796/NeedsActiveTaskCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        }
    ]
}