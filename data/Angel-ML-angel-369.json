{
    "error_id": "369",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/369/RandomNormalInitFunc.java\nindex da815a9e43..882085a3fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/369/RandomNormalInitFunc.java\n@@ -22,35 +22,38 @@ import io.netty.buffer.ByteBuf;\n import java.util.Random;\n \n public class RandomNormalInitFunc implements InitFunc {\n-  private double mean;\n-  private double stdDev;\n-  private Random rand = new Random(System.currentTimeMillis());\n-\n-  public RandomNormalInitFunc(double mean, double stdDev) {\n-    this.mean = mean;\n-    this.stdDev = stdDev;\n-  }\n-\n-  public RandomNormalInitFunc() {\n-    this(0.0, 0.0);\n-  }\n-\n-  @Override\n-  public double action() {\n-    return stdDev * rand.nextGaussian() + mean;\n-  }\n-\n-  @Override public void serialize(ByteBuf buf) {\n-    buf.writeDouble(mean);\n-    buf.writeDouble(stdDev);\n-  }\n-\n-  @Override public void deserialize(ByteBuf buf) {\n-    this.mean = buf.readDouble();\n-    this.stdDev = buf.readDouble();\n-  }\n-\n-  @Override public int bufferLen() {\n-    return 16;\n-  }\n+    private double mean;\n+    private double stdDev;\n+    private Random rand = new Random(System.currentTimeMillis());\n+\n+    public RandomNormalInitFunc(double mean, double stdDev) {\n+        this.mean = mean;\n+        this.stdDev = stdDev;\n+    }\n+\n+    public RandomNormalInitFunc() {\n+        this(0.0, 0.0);\n+    }\n+\n+    @Override\n+    public double action() {\n+        return stdDev * rand.nextGaussian() + mean;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        buf.writeDouble(mean);\n+        buf.writeDouble(stdDev);\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        this.mean = buf.readDouble();\n+        this.stdDev = buf.readDouble();\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        return 16;\n+    }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/369/RandomNormalInitFunc.java\nindex da815a9e43..d240faf0cf 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/369/RandomNormalInitFunc.java\n@@ -40,17 +40,20 @@ public class RandomNormalInitFunc implements InitFunc {\n     return stdDev * rand.nextGaussian() + mean;\n   }\n \n-  @Override public void serialize(ByteBuf buf) {\n+  @Override\n+public void serialize(ByteBuf buf) {\n     buf.writeDouble(mean);\n     buf.writeDouble(stdDev);\n   }\n \n-  @Override public void deserialize(ByteBuf buf) {\n+  @Override\n+public void deserialize(ByteBuf buf) {\n     this.mean = buf.readDouble();\n     this.stdDev = buf.readDouble();\n   }\n \n-  @Override public int bufferLen() {\n+  @Override\n+public int bufferLen() {\n     return 16;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/369/RandomNormalInitFunc.java\nindex da815a9e43..44b1ca5aa9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/369/RandomNormalInitFunc.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/369/RandomNormalInitFunc.java\n@@ -18,39 +18,41 @@\n package com.tencent.angel.ps.server.data.request;\n \n import io.netty.buffer.ByteBuf;\n-\n import java.util.Random;\n \n public class RandomNormalInitFunc implements InitFunc {\n-  private double mean;\n-  private double stdDev;\n-  private Random rand = new Random(System.currentTimeMillis());\n+    private double mean;\n+    private double stdDev;\n+    private Random rand = new Random(System.currentTimeMillis());\n \n-  public RandomNormalInitFunc(double mean, double stdDev) {\n+    public RandomNormalInitFunc(double mean, double stdDev) {\n     this.mean = mean;\n     this.stdDev = stdDev;\n-  }\n+    }\n \n-  public RandomNormalInitFunc() {\n+    public RandomNormalInitFunc() {\n     this(0.0, 0.0);\n-  }\n+    }\n \n-  @Override\n-  public double action() {\n+    @Override\n+    public double action() {\n     return stdDev * rand.nextGaussian() + mean;\n-  }\n+    }\n \n-  @Override public void serialize(ByteBuf buf) {\n+    @Override\n+    public void serialize(ByteBuf buf) {\n     buf.writeDouble(mean);\n     buf.writeDouble(stdDev);\n-  }\n+    }\n \n-  @Override public void deserialize(ByteBuf buf) {\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n     this.mean = buf.readDouble();\n     this.stdDev = buf.readDouble();\n-  }\n+    }\n \n-  @Override public int bufferLen() {\n+    @Override\n+    public int bufferLen() {\n     return 16;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}