{
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "155",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 196).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    HttpStatusCodes.BAD_REQUEST,\n                    MimeTypes.TEXT_PLAIN,\n                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n            return;\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/51/ReadTimelineHandler.java\nindex 712e41bd71..c321fe2a14 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler/51/ReadTimelineHandler.java\n@@ -151,8 +151,7 @@ public class ReadTimelineHandler implements HttpHandler {\n         if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n             request.complete(\n                     HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+                    MimeTypes.TEXT_PLAIN, \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/51/ReadTimelineHandler.java\nindex 712e41bd71..e50c0afe5a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/intellij/51/ReadTimelineHandler.java\n@@ -61,9 +61,9 @@ public class ReadTimelineHandler implements HttpHandler {\n         ParameterValue<String> timelineName = QueryUtil.get(QueryParameters.TIMELINE, request);\n         if (!timelineName.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n             return;\n         }\n \n@@ -80,53 +80,53 @@ public class ReadTimelineHandler implements HttpHandler {\n         ParameterValue<Integer> shardIndex = QueryUtil.get(QueryParameters.SHARD_INDEX, request);\n         if (!shardIndex.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n             return;\n         }\n \n         ParameterValue<Integer> shardCount = QueryUtil.get(QueryParameters.SHARD_COUNT, request);\n         if (!shardCount.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n             return;\n         }\n \n         if (shardCount.get() <= shardIndex.get()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n             return;\n         }\n \n         ParameterValue<Integer> take = QueryUtil.get(QueryParameters.TAKE, request);\n         if (!take.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n             return;\n         }\n \n         ParameterValue<Long> from = QueryUtil.get(QueryParameters.FROM, request);\n         if (!from.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n             return;\n         }\n \n         ParameterValue<Long> to = QueryUtil.get(QueryParameters.TO, request);\n         if (!to.isOk()) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n             return;\n         }\n \n@@ -150,35 +150,36 @@ public class ReadTimelineHandler implements HttpHandler {\n \n         if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n             request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+                HttpStatusCodes.BAD_REQUEST,\n+                MimeTypes.TEXT_PLAIN,\n+                \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" +\n+                    (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n         request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n-                () -> {\n-                    try {\n-                        TimelineState readState = STATE_READER.read(new Decoder(bytes));\n-\n-                        TimelineByteContent byteContent = timelineReader.readTimeline(\n-                                timeline,\n-                                readState,\n-                                shardIndex.get(),\n-                                shardCount.get(),\n-                                take.get(),\n-                                from.get(),\n-                                to.get());\n-\n-                        ByteBuffer buffer = ByteBuffer.allocate(byteContent.sizeOf());\n-                        Encoder encoder = new Encoder(buffer);\n-                        CONTENT_WRITER.write(encoder, byteContent);\n-                        buffer.flip();\n-                        request.getResponse().send(buffer);\n-                    } catch (Exception e) {\n-                        LOGGER.error(\"Error on processing request\", e);\n-                        request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                    }\n-                }));\n+            () -> {\n+                try {\n+                    TimelineState readState = STATE_READER.read(new Decoder(bytes));\n+\n+                    TimelineByteContent byteContent = timelineReader.readTimeline(\n+                        timeline,\n+                        readState,\n+                        shardIndex.get(),\n+                        shardCount.get(),\n+                        take.get(),\n+                        from.get(),\n+                        to.get());\n+\n+                    ByteBuffer buffer = ByteBuffer.allocate(byteContent.sizeOf());\n+                    Encoder encoder = new Encoder(buffer);\n+                    CONTENT_WRITER.write(encoder, byteContent);\n+                    buffer.flip();\n+                    request.getResponse().send(buffer);\n+                } catch (Exception e) {\n+                    LOGGER.error(\"Error on processing request\", e);\n+                    request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+                }\n+            }));\n     }\n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/51/ReadTimelineHandler.java\nindex 712e41bd71..440cd62b6d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/naturalize/51/ReadTimelineHandler.java\n@@ -181,4 +181,4 @@ public class ReadTimelineHandler implements HttpHandler {\n                     }\n                 }));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/51/ReadTimelineHandler.java\nindex 712e41bd71..f99b4c785b 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/codebuff/51/ReadTimelineHandler.java\n@@ -21,22 +21,27 @@ import ru.kontur.vostok.hercules.protocol.encoder.Encoder;\n import ru.kontur.vostok.hercules.protocol.encoder.TimelineByteContentWriter;\n import ru.kontur.vostok.hercules.util.parameter.ParameterValue;\n import ru.kontur.vostok.hercules.util.time.TimeUtil;\n-\n import java.nio.ByteBuffer;\n import java.util.Optional;\n \n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class ReadTimelineHandler implements HttpHandler {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ReadTimelineHandler.class);\n \n     private static final TimelineStateReader STATE_READER = new TimelineStateReader();\n+\n     private static final TimelineByteContentWriter CONTENT_WRITER = new TimelineByteContentWriter();\n \n     private final TimelineRepository timelineRepository;\n+\n     private final TimelineReader timelineReader;\n+\n     private final int timetrapCountLimit;\n+\n     private final AuthProvider authProvider;\n \n     public ReadTimelineHandler(AuthProvider authProvider, TimelineRepository timelineRepository, TimelineReader timelineReader) {\n@@ -60,10 +65,8 @@ public class ReadTimelineHandler implements HttpHandler {\n \n         ParameterValue<String> timelineName = QueryUtil.get(QueryParameters.TIMELINE, request);\n         if (!timelineName.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TIMELINE.name() + \" error: \" + timelineName.result()\n+            .error());\n             return;\n         }\n \n@@ -73,60 +76,48 @@ public class ReadTimelineHandler implements HttpHandler {\n                 request.complete(HttpStatusCodes.UNAUTHORIZED);\n                 return;\n             }\n+\n             request.complete(HttpStatusCodes.FORBIDDEN);\n             return;\n         }\n \n         ParameterValue<Integer> shardIndex = QueryUtil.get(QueryParameters.SHARD_INDEX, request);\n         if (!shardIndex.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.SHARD_INDEX.name() + \" error: \" + shardIndex.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Integer> shardCount = QueryUtil.get(QueryParameters.SHARD_COUNT, request);\n         if (!shardCount.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.SHARD_COUNT.name() + \" error: \" + shardCount.result()\n+            .error());\n             return;\n         }\n \n         if (shardCount.get() <= shardIndex.get()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Invalid parameters: \" + QueryParameters.SHARD_COUNT.name() + \" must be > \" + QueryParameters.SHARD_INDEX.name());\n             return;\n         }\n \n         ParameterValue<Integer> take = QueryUtil.get(QueryParameters.TAKE, request);\n         if (!take.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TAKE.name() + \" error: \" + take.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Long> from = QueryUtil.get(QueryParameters.FROM, request);\n         if (!from.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.FROM.name() + \" error: \" + from.result()\n+            .error());\n             return;\n         }\n \n         ParameterValue<Long> to = QueryUtil.get(QueryParameters.TO, request);\n         if (!to.isOk()) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result().error());\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Parameter \" + QueryParameters.TO.name() + \" error: \" + to.result()\n+            .error());\n             return;\n         }\n \n@@ -137,6 +128,7 @@ public class ReadTimelineHandler implements HttpHandler {\n                 request.complete(HttpStatusCodes.NOT_FOUND);\n                 return;\n             }\n+\n             timeline = optionalTimeline.get();\n         } catch (CuratorException ex) {\n             LOGGER.error(\"Curator exception when read Stream\", ex);\n@@ -149,36 +141,32 @@ public class ReadTimelineHandler implements HttpHandler {\n         }\n \n         if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n-            request.complete(\n-                    HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+            request.complete(HttpStatusCodes.BAD_REQUEST, MimeTypes.TEXT_PLAIN, \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \"\n+            + (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n-        request.readBodyAsync((r, bytes) -> request.dispatchAsync(\n-                () -> {\n-                    try {\n-                        TimelineState readState = STATE_READER.read(new Decoder(bytes));\n-\n-                        TimelineByteContent byteContent = timelineReader.readTimeline(\n-                                timeline,\n-                                readState,\n-                                shardIndex.get(),\n-                                shardCount.get(),\n-                                take.get(),\n-                                from.get(),\n-                                to.get());\n-\n-                        ByteBuffer buffer = ByteBuffer.allocate(byteContent.sizeOf());\n-                        Encoder encoder = new Encoder(buffer);\n-                        CONTENT_WRITER.write(encoder, byteContent);\n-                        buffer.flip();\n-                        request.getResponse().send(buffer);\n-                    } catch (Exception e) {\n-                        LOGGER.error(\"Error on processing request\", e);\n-                        request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                    }\n-                }));\n+        request.readBodyAsync((r, bytes) -> request.dispatchAsync(() -> {\n+                                                try {\n+                                                    TimelineState readState = STATE_READER.read(new Decoder(bytes));\n+                                                    TimelineByteContent byteContent = timelineReader.readTimeline(\n+                                                        timeline,\n+                                                        readState,\n+                                                        shardIndex.get(),\n+                                                        shardCount.get(),\n+                                                        take.get(),\n+                                                        from.get(),\n+                                                        to.get()\n+                                                    );\n+                                                    ByteBuffer buffer = ByteBuffer.allocate(byteContent.sizeOf());\n+                                                    Encoder encoder = new Encoder(buffer);\n+                                                    CONTENT_WRITER.write(encoder, byteContent);\n+                                                    buffer.flip();\n+                                                    request.getResponse().send(buffer);\n+                                                } catch (Exception e) {\n+                                                    LOGGER.error(\"Error on processing request\", e);\n+                                                    request.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+                                                }\n+                                            }));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "155",
                    "column": "101",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "column": "101",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/51/ReadTimelineHandler.java\nindex 712e41bd71..a9c9fbee76 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_random/51/ReadTimelineHandler.java\n@@ -152,7 +152,8 @@ public class ReadTimelineHandler implements HttpHandler {\n             request.complete(\n                     HttpStatusCodes.BAD_REQUEST,\n                     MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit*timeline.getTimetrapSize()\n+                    ) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/51/ReadTimelineHandler.java\nindex 712e41bd71..c321fe2a14 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/errored/1/51/ReadTimelineHandler.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/vostok-hercules/styler_three_grams/51/ReadTimelineHandler.java\n@@ -151,8 +151,7 @@ public class ReadTimelineHandler implements HttpHandler {\n         if (isTimetrapCountLimitExceeded(from.get(), to.get(), timeline.getTimetrapSize(), timetrapCountLimit)) {\n             request.complete(\n                     HttpStatusCodes.BAD_REQUEST,\n-                    MimeTypes.TEXT_PLAIN,\n-                    \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n+                    MimeTypes.TEXT_PLAIN, \"Time interval should not exceeded \" + TimeUtil.millisToTicks(timetrapCountLimit * timeline.getTimetrapSize()) + \" ticks, but requested \" + (to.get() - from.get()) + \" ticks\");\n             return;\n         }\n \n",
            "diff_size": 2
        }
    ]
}