{
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "64",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n        this.keys = keys;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/92/Replace.java\nindex 04304ed16c..3f9b39acfa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/92/Replace.java\n@@ -60,8 +60,7 @@ public class Replace extends Prepared {\n     public void setColumns(Column[] columns) {\n         this.columns = columns;\n     }\n-\n-    public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n+    public void setKeys(Column [] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n         this.keys = keys;\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/92/Replace.java\nindex 04304ed16c..912df11ecc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/92/Replace.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.dml;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/92/Replace.java\nindex 04304ed16c..10ac62ad2e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/92/Replace.java\n@@ -61,7 +61,8 @@ public class Replace extends Prepared {\n         this.columns = columns;\n     }\n \n-    public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n+    public void setKeys(Column[] keys) {\n+    //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n         this.keys = keys;\n     }\n \n@@ -325,4 +326,4 @@ public class Replace extends Prepared {\n         return true;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/92/Replace.java\nindex 04304ed16c..332a65326a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/92/Replace.java\n@@ -6,7 +6,6 @@\n package org.h2.command.dml;\n \n import java.util.ArrayList;\n-\n import org.h2.api.ErrorCode;\n import org.h2.api.Trigger;\n import org.h2.command.Command;\n@@ -32,6 +31,8 @@ import org.h2.value.Value;\n  * This class represents the MySQL-compatibility REPLACE statement\n  */\n //\u7c7b\u4f3cMERGE\n+\n+\n public class Replace extends Prepared {\n \n     private Table table;\n@@ -53,18 +54,22 @@ public class Replace extends Prepared {\n         }\n     }\n \n+\n     public void setTable(Table table) {\n         this.table = table;\n     }\n \n+\n     public void setColumns(Column[] columns) {\n         this.columns = columns;\n     }\n \n+\n     public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n         this.keys = keys;\n     }\n \n+\n     public void setQuery(Query query) {\n         this.query = query;\n     }\n@@ -74,6 +79,8 @@ public class Replace extends Prepared {\n      *\n      * @param expr the list of values\n      */\n+\n+\n     public void addRow(Expression[] expr) {\n         list.add(expr);\n     }\n@@ -138,6 +145,7 @@ public class Replace extends Prepared {\n      * @param row row to replace\n      * @return 1 if row was inserted, 2 if row was updated\n      */\n+\n     private int replace(Row row) {\n         int count = update(row);\n         if (count == 0) {\n@@ -325,4 +333,4 @@ public class Replace extends Prepared {\n         return true;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/92/Replace.java\nindex 04304ed16c..3f9b39acfa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/92/Replace.java\n@@ -60,8 +60,7 @@ public class Replace extends Prepared {\n     public void setColumns(Column[] columns) {\n         this.columns = columns;\n     }\n-\n-    public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n+    public void setKeys(Column [] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n         this.keys = keys;\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "66",
                    "column": "5",
                    "severity": "warning",
                    "message": "'{' at column 5 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/92/Replace.java\nindex 04304ed16c..4ae1b3ea39 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/92/Replace.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/92/Replace.java\n@@ -61,268 +61,270 @@ public class Replace extends Prepared {\n         this.columns = columns;\n     }\n \n-    public void setKeys(Column[] keys) { //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528\n-        this.keys = keys;\n-    }\n+    public voidsetKeys(Column [] keys)\n \n-    public void setQuery(Query query) {\n-        this.query = query;\n-    }\n+    {\n+    //Parser\u4e2d\u6ca1\u6709\u4f7f\u7528 this.keys = keys;\n+  }\n+\n+  public void setQuery(Query query) {\n+      this.query = query;\n+  }\n \n-    /**\n+  /**\n      * Add a row to this replace statement.\n      *\n      * @param expr the list of values\n      */\n-    public void addRow(Expression[] expr) {\n-        list.add(expr);\n-    }\n+  public void addRow(Expression[] expr) {\n+      list.add(expr);\n+  }\n \n-    @Override\n-    public int update() {\n-        int count = 0;\n-        session.getUser().checkRight(table, Right.INSERT);\n-        session.getUser().checkRight(table, Right.UPDATE);\n-        setCurrentRowNumber(0);\n-        Mode mode = session.getDatabase().getMode();\n-        if (!list.isEmpty()) {\n-            for (int x = 0, size = list.size(); x < size; x++) {\n-                setCurrentRowNumber(x + 1);\n-                Expression[] expr = list.get(x);\n-                Row newRow = table.getTemplateRow();\n-                for (int i = 0, len = columns.length; i < len; i++) {\n-                    Column c = columns[i];\n-                    int index = c.getColumnId();\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        // e can be null (DEFAULT)\n-                        try {\n-                            Value v = c.convert(e.getValue(session), mode);\n-                            newRow.setValue(index, v);\n-                        } catch (DbException ex) {\n-                            throw setRow(ex, count, getSQL(expr));\n-                        }\n-                    }\n-                }\n-                count += replace(newRow);\n-            }\n-        } else {\n-            ResultInterface rows = query.query(0);\n-            table.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n-            table.lock(session, true, false);\n-            while (rows.next()) {\n-                Value[] r = rows.currentRow();\n-                Row newRow = table.getTemplateRow();\n-                setCurrentRowNumber(count);\n-                for (int j = 0; j < columns.length; j++) {\n-                    Column c = columns[j];\n-                    int index = c.getColumnId();\n-                    try {\n-                        Value v = c.convert(r[j], mode);\n-                        newRow.setValue(index, v);\n-                    } catch (DbException ex) {\n-                        throw setRow(ex, count, getSQL(r));\n-                    }\n-                }\n-                count += replace(newRow);\n-            }\n-            rows.close();\n-            table.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n-        }\n-        return count;\n-    }\n+  @Override\n+  public int update() {\n+      int count = 0;\n+      session.getUser().checkRight(table, Right.INSERT);\n+      session.getUser().checkRight(table, Right.UPDATE);\n+      setCurrentRowNumber(0);\n+      Mode mode = session.getDatabase().getMode();\n+      if (!list.isEmpty()) {\n+          for (int x = 0, size = list.size(); x < size; x++) {\n+              setCurrentRowNumber(x + 1);\n+              Expression[] expr = list.get(x);\n+              Row newRow = table.getTemplateRow();\n+              for (int i = 0, len = columns.length; i < len; i++) {\n+                  Column c = columns[i];\n+                  int index = c.getColumnId();\n+                  Expression e = expr[i];\n+                  if (e != null) {\n+                      // e can be null (DEFAULT)\n+                      try {\n+                          Value v = c.convert(e.getValue(session), mode);\n+                          newRow.setValue(index, v);\n+                      } catch (DbException ex) {\n+                          throw setRow(ex, count, getSQL(expr));\n+                      }\n+                  }\n+              }\n+              count += replace(newRow);\n+          }\n+      } else {\n+          ResultInterface rows = query.query(0);\n+          table.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n+          table.lock(session, true, false);\n+          while (rows.next()) {\n+              Value[] r = rows.currentRow();\n+              Row newRow = table.getTemplateRow();\n+              setCurrentRowNumber(count);\n+              for (int j = 0; j < columns.length; j++) {\n+                  Column c = columns[j];\n+                  int index = c.getColumnId();\n+                  try {\n+                      Value v = c.convert(r[j], mode);\n+                      newRow.setValue(index, v);\n+                  } catch (DbException ex) {\n+                      throw setRow(ex, count, getSQL(r));\n+                  }\n+              }\n+              count += replace(newRow);\n+          }\n+          rows.close();\n+          table.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n+      }\n+      return count;\n+  }\n \n-    /**\n+  /**\n      * Updates an existing row or inserts a new one.\n      *\n      * @param row row to replace\n      * @return 1 if row was inserted, 2 if row was updated\n      */\n-    private int replace(Row row) {\n-        int count = update(row);\n-        if (count == 0) {\n-            try {\n-                table.validateConvertUpdateSequence(session, row);\n-                boolean done = table.fireBeforeRow(session, null, row);\n-                if (!done) {\n-                    table.lock(session, true, false);\n-                    table.addRow(session, row);\n-                    session.log(table, UndoLogRecord.INSERT, row);\n-                    table.fireAfterRow(session, null, row, false);\n-                }\n-                return 1;\n-            } catch (DbException e) {\n-                if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n-                    // possibly a concurrent replace or insert\n-                    Index index = (Index) e.getSource();\n-                    if (index != null) {\n-                        // verify the index columns match the key\n-                        Column[] indexColumns = index.getColumns();\n-                        boolean indexMatchesKeys = false;\n-                        if (indexColumns.length <= keys.length) {\n-                            for (int i = 0; i < indexColumns.length; i++) {\n-                                if (indexColumns[i] != keys[i]) {\n-                                    indexMatchesKeys = false;\n-                                    break;\n-                                }\n-                            }\n-                        }\n-                        if (indexMatchesKeys) {\n-                            throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, table.getName());\n-                        }\n-                    }\n-                }\n-                throw e;\n-            }\n-        } else if (count == 1) {\n-            return 2;\n-        }\n-        throw DbException.get(ErrorCode.DUPLICATE_KEY_1, table.getSQL());\n-    }\n+  private int replace(Row row) {\n+      int count = update(row);\n+      if (count == 0) {\n+          try {\n+              table.validateConvertUpdateSequence(session, row);\n+              boolean done = table.fireBeforeRow(session, null, row);\n+              if (!done) {\n+                  table.lock(session, true, false);\n+                  table.addRow(session, row);\n+                  session.log(table, UndoLogRecord.INSERT, row);\n+                  table.fireAfterRow(session, null, row, false);\n+              }\n+              return 1;\n+          } catch (DbException e) {\n+              if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n+                  // possibly a concurrent replace or insert\n+                  Index index = (Index) e.getSource();\n+                  if (index != null) {\n+                      // verify the index columns match the key\n+                      Column[] indexColumns = index.getColumns();\n+                      boolean indexMatchesKeys = false;\n+                      if (indexColumns.length <= keys.length) {\n+                          for (int i = 0; i < indexColumns.length; i++) {\n+                              if (indexColumns[i] != keys[i]) {\n+                                  indexMatchesKeys = false;\n+                                  break;\n+                              }\n+                          }\n+                      }\n+                      if (indexMatchesKeys) {\n+                          throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, table.getName());\n+                      }\n+                  }\n+              }\n+              throw e;\n+          }\n+      } else if (count == 1) {\n+          return 2;\n+      }\n+      throw DbException.get(ErrorCode.DUPLICATE_KEY_1, table.getSQL());\n+  }\n \n-    private int update(Row row) {\n-        // if there is no valid primary key,\n-        // the statement degenerates to an INSERT\n-        if (update == null) {\n-            return 0;\n-        }\n-        ArrayList<Parameter> k = update.getParameters();\n-        for (int i = 0; i < columns.length; i++) {\n-            Column col = columns[i];\n-            Value v = row.getValue(col.getColumnId());\n-            Parameter p = k.get(i);\n-            p.setValue(v);\n-        }\n-        for (int i = 0; i < keys.length; i++) {\n-            Column col = keys[i];\n-            Value v = row.getValue(col.getColumnId());\n-            if (v == null) {\n-                throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL());\n-            }\n-            Parameter p = k.get(columns.length + i);\n-            p.setValue(v);\n-        }\n-        return update.update();\n-    }\n+  private int update(Row row) {\n+      // if there is no valid primary key,\n+      // the statement degenerates to an INSERT\n+      if (update == null) {\n+          return 0;\n+      }\n+      ArrayList<Parameter> k = update.getParameters();\n+      for (int i = 0; i < columns.length; i++) {\n+          Column col = columns[i];\n+          Value v = row.getValue(col.getColumnId());\n+          Parameter p = k.get(i);\n+          p.setValue(v);\n+      }\n+      for (int i = 0; i < keys.length; i++) {\n+          Column col = keys[i];\n+          Value v = row.getValue(col.getColumnId());\n+          if (v == null) {\n+              throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL());\n+          }\n+          Parameter p = k.get(columns.length + i);\n+          p.setValue(v);\n+      }\n+      return update.update();\n+  }\n \n-    @Override\n-    public String getPlanSQL() {\n-        StatementBuilder buff = new StatementBuilder(\"REPLACE INTO \");\n-        buff.append(table.getSQL()).append('(');\n-        for (Column c : columns) {\n-            buff.appendExceptFirst(\", \");\n-            buff.append(c.getSQL());\n-        }\n-        buff.append(')');\n-        buff.append('\\n');\n-        if (!list.isEmpty()) {\n-            buff.append(\"VALUES \");\n-            int row = 0;\n-            for (Expression[] expr : list) {\n-                if (row++ > 0) {\n-                    buff.append(\", \");\n-                }\n-                buff.append('(');\n-                buff.resetCount();\n-                for (Expression e : expr) {\n-                    buff.appendExceptFirst(\", \");\n-                    if (e == null) {\n-                        buff.append(\"DEFAULT\");\n-                    } else {\n-                        buff.append(e.getSQL());\n-                    }\n-                }\n-                buff.append(')');\n-            }\n-        } else {\n-            buff.append(query.getPlanSQL());\n-        }\n-        return buff.toString();\n-    }\n+  @Override\n+  public String getPlanSQL() {\n+      StatementBuilder buff = new StatementBuilder(\"REPLACE INTO \");\n+      buff.append(table.getSQL()).append('(');\n+      for (Column c : columns) {\n+          buff.appendExceptFirst(\", \");\n+          buff.append(c.getSQL());\n+      }\n+      buff.append(')');\n+      buff.append('\\n');\n+      if (!list.isEmpty()) {\n+          buff.append(\"VALUES \");\n+          int row = 0;\n+          for (Expression[] expr : list) {\n+              if (row++ > 0) {\n+                  buff.append(\", \");\n+              }\n+              buff.append('(');\n+              buff.resetCount();\n+              for (Expression e : expr) {\n+                  buff.appendExceptFirst(\", \");\n+                  if (e == null) {\n+                      buff.append(\"DEFAULT\");\n+                  } else {\n+                      buff.append(e.getSQL());\n+                  }\n+              }\n+              buff.append(')');\n+          }\n+      } else {\n+          buff.append(query.getPlanSQL());\n+      }\n+      return buff.toString();\n+  }\n \n-    @Override\n-    public void prepare() {\n-        if (columns == null) {\n-            if (!list.isEmpty() && list.get(0).length == 0) {\n-                // special case where table is used as a sequence\n-                columns = new Column[0];\n-            } else {\n-                columns = table.getColumns();\n-            }\n-        }\n-        if (!list.isEmpty()) {\n-            for (Expression[] expr : list) {\n-                if (expr.length != columns.length) {\n-                    throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-                }\n-                for (int i = 0; i < expr.length; i++) {\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        expr[i] = e.optimize(session);\n-                    }\n-                }\n-            }\n-        } else {\n-            query.prepare();\n-            if (query.getColumnCount() != columns.length) {\n-                throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-            }\n-        }\n-        if (keys == null) {\n-            Index idx = table.getPrimaryKey();\n-            if (idx == null) {\n-                throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n-            }\n-            keys = idx.getColumns();\n-        }\n-        // if there is no valid primary key, the statement degenerates to an\n-        // INSERT\n-        for (Column key : keys) {\n-            boolean found = false;\n-            for (Column column : columns) {\n-                if (column.getColumnId() == key.getColumnId()) {\n-                    found = true;\n-                    break;\n-                }\n-            }\n-            if (!found) {\n-                return;\n-            }\n-        }\n-        StatementBuilder buff = new StatementBuilder(\"UPDATE \");\n-        buff.append(table.getSQL()).append(\" SET \");\n-        for (Column c : columns) {\n-            buff.appendExceptFirst(\", \");\n-            buff.append(c.getSQL()).append(\"=?\");\n-        }\n-        buff.append(\" WHERE \");\n-        buff.resetCount();\n-        for (Column c : keys) {\n-            buff.appendExceptFirst(\" AND \");\n-            buff.append(c.getSQL()).append(\"=?\");\n-        }\n-        String sql = buff.toString();\n-        update = session.prepare(sql);\n-    }\n+  @Override\n+  public void prepare() {\n+      if (columns == null) {\n+          if (!list.isEmpty() && list.get(0).length == 0) {\n+              // special case where table is used as a sequence\n+              columns = new Column[0];\n+          } else {\n+              columns = table.getColumns();\n+          }\n+      }\n+      if (!list.isEmpty()) {\n+          for (Expression[] expr : list) {\n+              if (expr.length != columns.length) {\n+                  throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n+              }\n+              for (int i = 0; i < expr.length; i++) {\n+                  Expression e = expr[i];\n+                  if (e != null) {\n+                      expr[i] = e.optimize(session);\n+                  }\n+              }\n+          }\n+      } else {\n+          query.prepare();\n+          if (query.getColumnCount() != columns.length) {\n+              throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n+          }\n+      }\n+      if (keys == null) {\n+          Index idx = table.getPrimaryKey();\n+          if (idx == null) {\n+              throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n+          }\n+          keys = idx.getColumns();\n+      }\n+      // if there is no valid primary key, the statement degenerates to an\n+      // INSERT\n+      for (Column key : keys) {\n+          boolean found = false;\n+          for (Column column : columns) {\n+              if (column.getColumnId() == key.getColumnId()) {\n+                  found = true;\n+                  break;\n+              }\n+          }\n+          if (!found) {\n+              return;\n+          }\n+      }\n+      StatementBuilder buff = new StatementBuilder(\"UPDATE \");\n+      buff.append(table.getSQL()).append(\" SET \");\n+      for (Column c : columns) {\n+          buff.appendExceptFirst(\", \");\n+          buff.append(c.getSQL()).append(\"=?\");\n+      }\n+      buff.append(\" WHERE \");\n+      buff.resetCount();\n+      for (Column c : keys) {\n+          buff.appendExceptFirst(\" AND \");\n+          buff.append(c.getSQL()).append(\"=?\");\n+      }\n+      String sql = buff.toString();\n+      update = session.prepare(sql);\n+  }\n \n-    @Override\n-    public boolean isTransactional() {\n-        return true;\n-    }\n+  @Override\n+  public boolean isTransactional() {\n+      return true;\n+  }\n \n-    @Override\n-    public ResultInterface queryMeta() {\n-        return null;\n-    }\n+  @Override\n+  public ResultInterface queryMeta() {\n+      return null;\n+  }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.REPLACE;\n-    }\n+  @Override\n+  public int getType() {\n+      return CommandInterface.REPLACE;\n+  }\n \n-    @Override\n-    public boolean isCacheable() {\n-        return true;\n-    }\n+  @Override\n+  public boolean isCacheable() {\n+      return true;\n+  }\n \n }\n",
            "diff_size": 247
        }
    ]
}