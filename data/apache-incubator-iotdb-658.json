{
    "error_id": "658",
    "information": {
        "errors": [
            {
                "line": "134",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      List<String> dataTypes, boolean ignoreTimeStamp) {\n    TSExecuteStatementResp resp =\n        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n    resp.setIgnoreTimeStamp(ignoreTimeStamp);\n    resp.setColumns(columns);\n    resp.setDataTypeList(dataTypes);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler/658/StaticResps.java\nindex 441a73dfbe..35afc7f9ea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler/658/StaticResps.java\n@@ -130,11 +130,11 @@ class StaticResps {\n \n   private static TSExecuteStatementResp getExecuteResp(List<String> columns,\n       List<String> dataTypes, boolean ignoreTimeStamp) {\n-    TSExecuteStatementResp resp =\n-        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n-    resp.setIgnoreTimeStamp(ignoreTimeStamp);\n-    resp.setColumns(columns);\n-    resp.setDataTypeList(dataTypes);\n-    return resp;\n-  }\n+    TSExecuteStatementResp resp = TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl\n+    .getStatus(TSStatusCode.SUCCESS_STATUS));\n+resp.setIgnoreTimeStamp(ignoreTimeStamp);\n+resp.setColumns(columns);\n+resp.setDataTypeList(dataTypes);\n+return resp;\n+}\n }\n",
            "diff_size": 7
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/intellij/658/StaticResps.java\nindex 441a73dfbe..0e727b1b34 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/intellij/658/StaticResps.java\n@@ -124,14 +124,16 @@ class StaticResps {\n   );\n \n   private static TSExecuteStatementResp getNoTimeExecuteResp(List<String> columns,\n-      List<String> dataTypes) {\n+                                                             List<String> dataTypes) {\n     return getExecuteResp(columns, dataTypes, true);\n   }\n \n   private static TSExecuteStatementResp getExecuteResp(List<String> columns,\n-      List<String> dataTypes, boolean ignoreTimeStamp) {\n+                                                       List<String> dataTypes,\n+                                                       boolean ignoreTimeStamp) {\n     TSExecuteStatementResp resp =\n-        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n+        TSServiceImpl\n+            .getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n     resp.setIgnoreTimeStamp(ignoreTimeStamp);\n     resp.setColumns(columns);\n     resp.setDataTypeList(dataTypes);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 551).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "column": "551",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/naturalize/658/StaticResps.java\nindex 441a73dfbe..8fdf36f33f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/naturalize/658/StaticResps.java\n@@ -53,88 +53,45 @@ class StaticResps {\n     // enum-like class\n   }\n \n-  static final TSExecuteStatementResp TTL_RESP = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_STORAGE_GROUP, COLUMN_TTL),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.INT64.toString()));\n-\n-  static final TSExecuteStatementResp FLUSH_INFO_RESP = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_ITEM, COLUMN_VALUE),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp DYNAMIC_PARAMETER_RESP = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_PARAMETER, COLUMN_VALUE),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp SHOW_VERSION_RESP = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_VERSION),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp SHOW_TIMESERIES_RESP = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_TIMESERIES, COLUMN_STORAGE_GROUP, COLUMN_TIMESERIES_DATATYPE,\n-          COLUMN_TIMESERIES_ENCODING, COLUMN_TIMESERIES_COMPRESSION),\n-      Arrays.asList(TSDataType.TEXT.toString(),\n-          TSDataType.TEXT.toString(),\n-          TSDataType.TEXT.toString(),\n-          TSDataType.TEXT.toString(),\n-          TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp SHOW_DEVICES = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_DEVICES),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp SHOW_STORAGE_GROUP = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_STORAGE_GROUP),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp SHOW_CHILD_PATHS = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_CHILD_PATHS),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp COUNT_TIMESERIES = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_COUNT),\n-      Collections.singletonList(TSDataType.INT32.toString()));\n-\n-  static final TSExecuteStatementResp COUNT_NODE_TIMESERIES = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_COLUMN, COLUMN_COUNT),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp COUNT_NODES = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_COUNT),\n-      Collections.singletonList(TSDataType.INT32.toString()));\n-\n-  static final TSExecuteStatementResp LIST_ROLE_RESP = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_ROLE),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp LIST_USER_RESP = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_USER),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp LIST_USER_PRIVILEGE_RESP = getNoTimeExecuteResp(\n-      Arrays.asList(COLUMN_ROLE, COLUMN_PRIVILEGE),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp LIST_ROLE_PRIVILEGE_RESP = getNoTimeExecuteResp(\n-      Collections.singletonList(COLUMN_PRIVILEGE),\n-      Collections.singletonList(TSDataType.TEXT.toString()));\n-\n-  static final TSExecuteStatementResp LAST_RESP = getExecuteResp(\n-      Arrays.asList(COLUMN_TIMESERIES, COLUMN_VALUE),\n-      Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()), false\n-  );\n-\n-  private static TSExecuteStatementResp getNoTimeExecuteResp(List<String> columns,\n-      List<String> dataTypes) {\n-    return getExecuteResp(columns, dataTypes, true);\n+  static final TSExecuteStatementResp TTL_RESP = getNoTimeExecuteResp(Arrays.asList(COLUMN_STORAGE_GROUP, COLUMN_TTL), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.INT64.toString()));\n+\n+  static final TSExecuteStatementResp FLUSH_INFO_RESP = getNoTimeExecuteResp(Arrays.asList(COLUMN_ITEM, COLUMN_VALUE), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp DYNAMIC_PARAMETER_RESP = getNoTimeExecuteResp(Arrays.asList(COLUMN_PARAMETER, COLUMN_VALUE), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp SHOW_VERSION_RESP = getNoTimeExecuteResp(Collections.singletonList(COLUMN_VERSION), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp SHOW_TIMESERIES_RESP = getNoTimeExecuteResp(Arrays.asList(COLUMN_TIMESERIES, COLUMN_STORAGE_GROUP, COLUMN_TIMESERIES_DATATYPE, COLUMN_TIMESERIES_ENCODING, COLUMN_TIMESERIES_COMPRESSION), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString(), TSDataType.TEXT.toString(), TSDataType.TEXT.toString(), TSDataType.TEXT.toString())); static final TSExecuteStatementResp SHOW_DEVICES = getNoTimeExecuteResp(Collections.singletonList(COLUMN_DEVICES), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp SHOW_STORAGE_GROUP = getNoTimeExecuteResp(Collections.singletonList(COLUMN_STORAGE_GROUP), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp SHOW_CHILD_PATHS = getNoTimeExecuteResp(Collections.singletonList(COLUMN_CHILD_PATHS), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp COUNT_TIMESERIES = getNoTimeExecuteResp(Collections.singletonList(COLUMN_COUNT), Collections.singletonList(TSDataType.INT32.toString()));\n+\n+  static final TSExecuteStatementResp COUNT_NODE_TIMESERIES = getNoTimeExecuteResp(Arrays.asList(COLUMN_COLUMN, COLUMN_COUNT), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp COUNT_NODES = getNoTimeExecuteResp(Collections.singletonList(COLUMN_COUNT), Collections.singletonList(TSDataType.INT32.toString()));\n+\n+  static final TSExecuteStatementResp LIST_ROLE_RESP = getNoTimeExecuteResp(Collections.singletonList(COLUMN_ROLE), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp LIST_USER_RESP = getNoTimeExecuteResp(Collections.singletonList(COLUMN_USER), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp LIST_USER_PRIVILEGE_RESP = getNoTimeExecuteResp(Arrays.asList(COLUMN_ROLE, COLUMN_PRIVILEGE), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp LIST_ROLE_PRIVILEGE_RESP = getNoTimeExecuteResp(Collections.singletonList(COLUMN_PRIVILEGE), Collections.singletonList(TSDataType.TEXT.toString()));\n+\n+  static final TSExecuteStatementResp LAST_RESP = getExecuteResp(Arrays.asList(COLUMN_TIMESERIES, COLUMN_VALUE), Arrays.asList(TSDataType.TEXT.toString(), TSDataType.TEXT.toString()), false);\n+\n+  private static TSExecuteStatementResp getNoTimeExecuteResp(List<String> columns, List<String> dataTypes) {\n+  return getExecuteResp(columns, dataTypes, true);\n   }\n \n-  private static TSExecuteStatementResp getExecuteResp(List<String> columns,\n-      List<String> dataTypes, boolean ignoreTimeStamp) {\n-    TSExecuteStatementResp resp =\n-        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n-    resp.setIgnoreTimeStamp(ignoreTimeStamp);\n+  private static TSExecuteStatementResp getExecuteResp(List<String> columns, List<String> dataTypes, boolean ignoreTimeStamp) {\n+  TSExecuteStatementResp resp = TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n+resp.setIgnoreTimeStamp(ignoreTimeStamp);\n     resp.setColumns(columns);\n     resp.setDataTypeList(dataTypes);\n     return resp;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 79
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler_random/658/StaticResps.java\nindex 441a73dfbe..35afc7f9ea 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler_random/658/StaticResps.java\n@@ -130,11 +130,11 @@ class StaticResps {\n \n   private static TSExecuteStatementResp getExecuteResp(List<String> columns,\n       List<String> dataTypes, boolean ignoreTimeStamp) {\n-    TSExecuteStatementResp resp =\n-        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n-    resp.setIgnoreTimeStamp(ignoreTimeStamp);\n-    resp.setColumns(columns);\n-    resp.setDataTypeList(dataTypes);\n-    return resp;\n-  }\n+    TSExecuteStatementResp resp = TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl\n+    .getStatus(TSStatusCode.SUCCESS_STATUS));\n+resp.setIgnoreTimeStamp(ignoreTimeStamp);\n+resp.setColumns(columns);\n+resp.setDataTypeList(dataTypes);\n+return resp;\n+}\n }\n",
            "diff_size": 7
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler_three_grams/658/StaticResps.java\nindex 441a73dfbe..5f00c6ef65 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/errored/1/658/StaticResps.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-incubator-iotdb/styler_three_grams/658/StaticResps.java\n@@ -130,11 +130,11 @@ class StaticResps {\n \n   private static TSExecuteStatementResp getExecuteResp(List<String> columns,\n       List<String> dataTypes, boolean ignoreTimeStamp) {\n-    TSExecuteStatementResp resp =\n-        TSServiceImpl.getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n-    resp.setIgnoreTimeStamp(ignoreTimeStamp);\n-    resp.setColumns(columns);\n-    resp.setDataTypeList(dataTypes);\n-    return resp;\n-  }\n+    TSExecuteStatementResp resp = TSServiceImpl\n+      .getTSExecuteStatementResp(TSServiceImpl.getStatus(TSStatusCode.SUCCESS_STATUS));\n+resp.setIgnoreTimeStamp(ignoreTimeStamp);\n+resp.setColumns(columns);\n+resp.setDataTypeList(dataTypes);\n+return resp;\n+}\n }\n",
            "diff_size": 7
        }
    ]
}