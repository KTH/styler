{
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "65",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "          }\n        }, ptf.tableOf(ptf.strings(), ptf.pairs(ptf.ints(), ptf.ints())));\n    Iterable<String> lines = SecondarySort.sortAndApply(in, new MapFn<Pair<String, Iterable<Pair<Integer, Integer>>>, String>() {\n      @Override\n      public String map(Pair<String, Iterable<Pair<Integer, Integer>>> input) {\n        Joiner j = Joiner.on(',');",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/22/SecondarySortIT.java\nindex 7284ab1d83..26450a333c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler/22/SecondarySortIT.java\n@@ -52,7 +52,7 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n   public void runSecondarySort(PTypeFamily ptf) throws Exception {\n     Pipeline p = new MRPipeline(SecondarySortIT.class, tempDir.getDefaultConfiguration());\n     String inputFile = tempDir.copyResourceFileName(\"secondary_sort_input.txt\");\n-    \n+\n     PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile))\n         .parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n           @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/22/SecondarySortIT.java\nindex 7284ab1d83..6b380b0b0a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/intellij/22/SecondarySortIT.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.lib;\n \n import static org.junit.Assert.assertEquals;\n@@ -52,7 +53,7 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n   public void runSecondarySort(PTypeFamily ptf) throws Exception {\n     Pipeline p = new MRPipeline(SecondarySortIT.class, tempDir.getDefaultConfiguration());\n     String inputFile = tempDir.copyResourceFileName(\"secondary_sort_input.txt\");\n-    \n+\n     PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile))\n         .parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n           @Override\n@@ -62,13 +63,14 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n                 Pair.of(Integer.valueOf(pieces[1].trim()), Integer.valueOf(pieces[2].trim())));\n           }\n         }, ptf.tableOf(ptf.strings(), ptf.pairs(ptf.ints(), ptf.ints())));\n-    Iterable<String> lines = SecondarySort.sortAndApply(in, new MapFn<Pair<String, Iterable<Pair<Integer, Integer>>>, String>() {\n-      @Override\n-      public String map(Pair<String, Iterable<Pair<Integer, Integer>>> input) {\n-        Joiner j = Joiner.on(',');\n-        return j.join(input.first(), j.join(input.second()));\n-      }\n-    }, ptf.strings()).materialize();\n+    Iterable<String> lines =\n+        SecondarySort.sortAndApply(in, new MapFn<Pair<String, Iterable<Pair<Integer, Integer>>>, String>() {\n+          @Override\n+          public String map(Pair<String, Iterable<Pair<Integer, Integer>>> input) {\n+            Joiner j = Joiner.on(',');\n+            return j.join(input.first(), j.join(input.second()));\n+          }\n+        }, ptf.strings()).materialize();\n     assertEquals(ImmutableList.of(\"one,[-5,10],[1,1],[2,-3]\", \"three,[0,-1]\", \"two,[1,7],[2,6],[4,5]\"),\n         ImmutableList.copyOf(lines));\n     p.done();\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/22/SecondarySortIT.java\nindex 7284ab1d83..4b49525f84 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/naturalize/22/SecondarySortIT.java\n@@ -73,4 +73,4 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n         ImmutableList.copyOf(lines));\n     p.done();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 52, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 96, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 96, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 52, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 33, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 64, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 64, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 33, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/22/SecondarySortIT.java\nindex 7284ab1d83..f39fadfd8d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/codebuff/22/SecondarySortIT.java\n@@ -20,7 +20,6 @@ package org.apache.crunch.lib;\n import static org.junit.Assert.assertEquals;\n \n import java.io.Serializable;\n-\n import org.apache.crunch.MapFn;\n import org.apache.crunch.PTable;\n import org.apache.crunch.Pair;\n@@ -32,45 +31,41 @@ import org.apache.crunch.types.PTypeFamily;\n import org.apache.crunch.types.avro.AvroTypeFamily;\n import org.apache.crunch.types.writable.WritableTypeFamily;\n import org.junit.Test;\n-\n import com.google.common.base.Joiner;\n import com.google.common.collect.ImmutableList;\n \n-\n public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n-\n-  @Test\n-  public void testSecondarySortAvros() throws Exception {\n+    @Test\n+    public void testSecondarySortAvros() throws Exception {\n     runSecondarySort(AvroTypeFamily.getInstance());\n-  }\n+    }\n \n-  @Test\n-  public void testSecondarySortWritables() throws Exception {\n+    @Test\n+    public void testSecondarySortWritables() throws Exception {\n     runSecondarySort(WritableTypeFamily.getInstance());\n-  }\n+    }\n \n-  public void runSecondarySort(PTypeFamily ptf) throws Exception {\n+    public void runSecondarySort(PTypeFamily ptf) throws Exception {\n     Pipeline p = new MRPipeline(SecondarySortIT.class, tempDir.getDefaultConfiguration());\n     String inputFile = tempDir.copyResourceFileName(\"secondary_sort_input.txt\");\n-    \n-    PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile))\n-        .parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n-          @Override\n-          public Pair<String, Pair<Integer, Integer>> map(String input) {\n-            String[] pieces = input.split(\",\");\n-            return Pair.of(pieces[0],\n-                Pair.of(Integer.valueOf(pieces[1].trim()), Integer.valueOf(pieces[2].trim())));\n-          }\n-        }, ptf.tableOf(ptf.strings(), ptf.pairs(ptf.ints(), ptf.ints())));\n+    PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile)).parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n+                                                    @Override\n+                                                    public Pair<String, Pair<Integer, Integer>> map(String input) {\n+                                                                                                String[] pieces = input.split(\",\");\n+                                                                                                return Pair.of(pieces[0],\n+                                                                                                Pair.of(Integer.valueOf(pieces[1].trim()), Integer.valueOf(pieces[2].trim())));\n+                                                    }\n+    }, ptf.tableOf(ptf.strings(), ptf.pairs(ptf.ints(), ptf.ints())));\n     Iterable<String> lines = SecondarySort.sortAndApply(in, new MapFn<Pair<String, Iterable<Pair<Integer, Integer>>>, String>() {\n-      @Override\n-      public String map(Pair<String, Iterable<Pair<Integer, Integer>>> input) {\n-        Joiner j = Joiner.on(',');\n-        return j.join(input.first(), j.join(input.second()));\n-      }\n+                                 @Override\n+                                 public String map(Pair<String, Iterable<Pair<Integer, Integer>>> input) {\n+                                                                Joiner j = Joiner.on(',');\n+                                                                return j.join(input.first(), j.join(input.second()));\n+                                 }\n     }, ptf.strings()).materialize();\n-    assertEquals(ImmutableList.of(\"one,[-5,10],[1,1],[2,-3]\", \"three,[0,-1]\", \"two,[1,7],[2,6],[4,5]\"),\n+    assertEquals(\n+        ImmutableList.of(\"one,[-5,10],[1,1],[2,-3]\", \"three,[0,-1]\", \"two,[1,7],[2,6],[4,5]\"),\n         ImmutableList.copyOf(lines));\n     p.done();\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/22/SecondarySortIT.java\nindex 7284ab1d83..26450a333c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_random/22/SecondarySortIT.java\n@@ -52,7 +52,7 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n   public void runSecondarySort(PTypeFamily ptf) throws Exception {\n     Pipeline p = new MRPipeline(SecondarySortIT.class, tempDir.getDefaultConfiguration());\n     String inputFile = tempDir.copyResourceFileName(\"secondary_sort_input.txt\");\n-    \n+\n     PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile))\n         .parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n           @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/22/SecondarySortIT.java\nindex 7284ab1d83..26450a333c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/errored/1/22/SecondarySortIT.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/apache-crunch/styler_three_grams/22/SecondarySortIT.java\n@@ -52,7 +52,7 @@ public class SecondarySortIT extends CrunchTestSupport implements Serializable {\n   public void runSecondarySort(PTypeFamily ptf) throws Exception {\n     Pipeline p = new MRPipeline(SecondarySortIT.class, tempDir.getDefaultConfiguration());\n     String inputFile = tempDir.copyResourceFileName(\"secondary_sort_input.txt\");\n-    \n+\n     PTable<String, Pair<Integer, Integer>> in = p.read(From.textFile(inputFile))\n         .parallelDo(new MapFn<String, Pair<String, Pair<Integer, Integer>>>() {\n           @Override\n",
            "diff_size": 1
        }
    ]
}