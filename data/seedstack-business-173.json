{
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.domain;\n\nimport com.google.inject.Injector;\nimport com.google.inject.Key;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/173/DomainRegistryImpl.java\nindex 013560615b..7e439f00ed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/173/DomainRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.inject.Injector;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/173/DomainRegistryImpl.java\nindex 013560615b..dc546d73e3 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/173/DomainRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.inject.Injector;\n@@ -41,33 +42,33 @@ class DomainRegistryImpl implements DomainRegistry {\n \n     @Override\n     public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            Class<? extends Annotation> qualifier) {\n+                                                                                       Class<? extends Annotation> qualifier) {\n         checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n     public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            String qualifier) {\n+                                                                                       String qualifier) {\n         checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n     public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass,\n-            Class<K> idClass) {\n+                                                                          Class<K> idClass) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass)));\n     }\n \n     @Override\n     public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            Class<? extends Annotation> qualifier) {\n+                                                                          Class<? extends Annotation> qualifier) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n     @Override\n     public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            String qualifier) {\n+                                                                          String qualifier) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n@@ -79,7 +80,7 @@ class DomainRegistryImpl implements DomainRegistry {\n \n     @Override\n     public <T extends Factory<A>, A extends Producible> T getFactory(Type factoryType,\n-            Class<? extends Annotation> qualifier) {\n+                                                                     Class<? extends Annotation> qualifier) {\n         checkType(factoryType, BusinessSpecifications.FACTORY, BusinessErrorCode.ILLEGAL_FACTORY);\n         return getInstance(getKey(factoryType, qualifier));\n     }\n@@ -97,7 +98,7 @@ class DomainRegistryImpl implements DomainRegistry {\n \n     @Override\n     public <T extends Producible> Factory<T> getFactory(Class<T> producibleClass,\n-            Class<? extends Annotation> qualifier) {\n+                                                        Class<? extends Annotation> qualifier) {\n         return getInstance(getKey(getType(Factory.class, producibleClass), qualifier));\n     }\n \n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/173/DomainRegistryImpl.java\nindex 013560615b..510f5968ba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/173/DomainRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.inject.Injector;\n@@ -40,35 +41,30 @@ class DomainRegistryImpl implements DomainRegistry {\n     }\n \n     @Override\n-    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            Class<? extends Annotation> qualifier) {\n-        checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n+    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType, Class<? extends Annotation> qualifier) {\n+    checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n-    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            String qualifier) {\n-        checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n+    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType, String qualifier) {\n+    checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass,\n-            Class<K> idClass) {\n-        return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass)));\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass) {\n+    return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass)));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            Class<? extends Annotation> qualifier) {\n-        return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass, Class<? extends Annotation> qualifier) {\n+    return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            String qualifier) {\n-        return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass, String qualifier) {\n+    return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n     @Override\n@@ -78,9 +74,8 @@ class DomainRegistryImpl implements DomainRegistry {\n     }\n \n     @Override\n-    public <T extends Factory<A>, A extends Producible> T getFactory(Type factoryType,\n-            Class<? extends Annotation> qualifier) {\n-        checkType(factoryType, BusinessSpecifications.FACTORY, BusinessErrorCode.ILLEGAL_FACTORY);\n+    public <T extends Factory<A>, A extends Producible> T getFactory(Type factoryType, Class<? extends Annotation> qualifier) {\n+    checkType(factoryType, BusinessSpecifications.FACTORY, BusinessErrorCode.ILLEGAL_FACTORY);\n         return getInstance(getKey(factoryType, qualifier));\n     }\n \n@@ -96,9 +91,8 @@ class DomainRegistryImpl implements DomainRegistry {\n     }\n \n     @Override\n-    public <T extends Producible> Factory<T> getFactory(Class<T> producibleClass,\n-            Class<? extends Annotation> qualifier) {\n-        return getInstance(getKey(getType(Factory.class, producibleClass), qualifier));\n+    public <T extends Producible> Factory<T> getFactory(Class<T> producibleClass, Class<? extends Annotation> qualifier) {\n+    return getInstance(getKey(getType(Factory.class, producibleClass), qualifier));\n     }\n \n     @Override\n@@ -209,4 +203,4 @@ class DomainRegistryImpl implements DomainRegistry {\n                     .put(\"class\", rawClass);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "column": "43",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/173/DomainRegistryImpl.java\nindex 013560615b..bb38e86789 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/173/DomainRegistryImpl.java\n@@ -28,46 +28,48 @@ import org.seedstack.shed.exception.ErrorCode;\n /**\n  * Registry to access to all domain objects (repository, factory, service, policy).\n  */\n+\n+\n class DomainRegistryImpl implements DomainRegistry {\n \n     @Inject\n     private Injector injector;\n-\n     @Override\n     public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType) {\n-        checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n+        checkType(repositoryType,\n+BusinessSpecifications.REPOSITORY,\n+BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType));\n     }\n \n     @Override\n-    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            Class<? extends Annotation> qualifier) {\n-        checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n+    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType, Class<? extends Annotation> qualifier) {\n+        checkType(repositoryType,\n+BusinessSpecifications.REPOSITORY,\n+BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n-    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType,\n-            String qualifier) {\n-        checkType(repositoryType, BusinessSpecifications.REPOSITORY, BusinessErrorCode.ILLEGAL_REPOSITORY);\n+    public <T extends Repository<A, K>, A extends AggregateRoot<K>, K> T getRepository(Type repositoryType, String qualifier) {\n+        checkType(repositoryType,\n+BusinessSpecifications.REPOSITORY,\n+BusinessErrorCode.ILLEGAL_REPOSITORY);\n         return getInstance(getKey(repositoryType, qualifier));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass,\n-            Class<K> idClass) {\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass)));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            Class<? extends Annotation> qualifier) {\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass, Class<? extends Annotation> qualifier) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n     @Override\n-    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass,\n-            String qualifier) {\n+    public <A extends AggregateRoot<K>, K> Repository<A, K> getRepository(Class<A> aggregateRootClass, Class<K> idClass, String qualifier) {\n         return getInstance(getKey(getType(Repository.class, aggregateRootClass, idClass), qualifier));\n     }\n \n@@ -78,8 +80,7 @@ class DomainRegistryImpl implements DomainRegistry {\n     }\n \n     @Override\n-    public <T extends Factory<A>, A extends Producible> T getFactory(Type factoryType,\n-            Class<? extends Annotation> qualifier) {\n+    public <T extends Factory<A>, A extends Producible> T getFactory(Type factoryType, Class<? extends Annotation> qualifier) {\n         checkType(factoryType, BusinessSpecifications.FACTORY, BusinessErrorCode.ILLEGAL_FACTORY);\n         return getInstance(getKey(factoryType, qualifier));\n     }\n@@ -96,8 +97,7 @@ class DomainRegistryImpl implements DomainRegistry {\n     }\n \n     @Override\n-    public <T extends Producible> Factory<T> getFactory(Class<T> producibleClass,\n-            Class<? extends Annotation> qualifier) {\n+    public <T extends Producible> Factory<T> getFactory(Class<T> producibleClass, Class<? extends Annotation> qualifier) {\n         return getInstance(getKey(getType(Factory.class, producibleClass), qualifier));\n     }\n \n@@ -126,19 +126,25 @@ class DomainRegistryImpl implements DomainRegistry {\n \n     @Override\n     public <T> T getService(Class<T> serviceClass) {\n-        checkType(serviceClass, BusinessSpecifications.SERVICE, BusinessErrorCode.ILLEGAL_SERVICE);\n+        checkType(serviceClass,\n+BusinessSpecifications.SERVICE,\n+BusinessErrorCode.ILLEGAL_SERVICE);\n         return getInstance(getKey(getType(serviceClass)));\n     }\n \n     @Override\n     public <T> T getService(Class<T> serviceClass, Class<? extends Annotation> qualifier) {\n-        checkType(serviceClass, BusinessSpecifications.SERVICE, BusinessErrorCode.ILLEGAL_SERVICE);\n+        checkType(serviceClass,\n+BusinessSpecifications.SERVICE,\n+BusinessErrorCode.ILLEGAL_SERVICE);\n         return getInstance(getKey(serviceClass, qualifier));\n     }\n \n     @Override\n     public <T> T getService(Class<T> serviceClass, String qualifier) {\n-        checkType(serviceClass, BusinessSpecifications.SERVICE, BusinessErrorCode.ILLEGAL_SERVICE);\n+        checkType(serviceClass,\n+BusinessSpecifications.SERVICE,\n+BusinessErrorCode.ILLEGAL_SERVICE);\n         return getInstance(getKey(getType(serviceClass), qualifier));\n     }\n \n@@ -178,23 +184,26 @@ class DomainRegistryImpl implements DomainRegistry {\n         return getInstance(getKey(policyType, qualifier));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private <T> T getInstance(Key<?> key) {\n+    @SuppressWarnings(\"unchecked\") private<T> T getInstance(Key<?> key) {\n         return (T) injector.getInstance(key);\n     }\n \n+\n     private Key<?> getKey(Type type, Class<? extends Annotation> qualifier) {\n         return Key.get(type, qualifier);\n     }\n \n+\n     private Key<?> getKey(Type type, String qualifier) {\n         return Key.get(type, Names.named(qualifier));\n     }\n \n+\n     private Key<?> getKey(Type type) {\n         return Key.get(type);\n     }\n \n+\n     private Type getType(Type rawType, Type... typeArguments) {\n         if (typeArguments.length == 0) {\n             return rawType;\n@@ -202,11 +211,11 @@ class DomainRegistryImpl implements DomainRegistry {\n         return Types.newParameterizedType(rawType, typeArguments);\n     }\n \n+\n     private void checkType(Type type, Specification<Class<?>> spec, ErrorCode errorCode) {\n         Class<?> rawClass = org.seedstack.shed.reflect.Types.rawClassOf(type);\n-        if (!spec.isSatisfiedBy(rawClass)) {\n-            throw BusinessException.createNew(errorCode)\n-                    .put(\"class\", rawClass);\n+        if (! spec.isSatisfiedBy(rawClass)) {\n+            throw BusinessException.createNew(errorCode).put(\"class\", rawClass);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/173/DomainRegistryImpl.java\nindex 013560615b..7e439f00ed 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/173/DomainRegistryImpl.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/173/DomainRegistryImpl.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.domain;\n \n import com.google.inject.Injector;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}