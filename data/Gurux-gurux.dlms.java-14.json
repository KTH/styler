{
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "446",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 82).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n                pushObjectList\n                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n                                obj, co));\n            }\n            reader.readEndElement(\"ObjectList\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler/14/GXDLMSPushSetup.java\nindex fa65f853d3..793587ed49 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler/14/GXDLMSPushSetup.java\n@@ -443,7 +443,7 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n                 GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n                 GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n                 pushObjectList\n-                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n+                .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n                                 obj, co));\n             }\n             reader.readEndElement(\"ObjectList\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/14/GXDLMSPushSetup.java\nindex fa65f853d3..845ced63b7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/intellij/14/GXDLMSPushSetup.java\n@@ -55,461 +55,457 @@ import gurux.dlms.objects.enums.MessageType;\n import gurux.dlms.objects.enums.ServiceType;\n \n public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n-    private ServiceType service;\n-    private String destination;\n-    private MessageType message;\n-\n-    private List<Entry<GXDLMSObject, GXDLMSCaptureObject>> pushObjectList;\n-    private GXSendDestinationAndMethod sendDestinationAndMethod;\n-    private List<Map.Entry<GXDateTime, GXDateTime>> communicationWindow;\n-    private int randomisationStartInterval;\n-    private int numberOfRetries;\n-    private int repetitionDelay;\n-\n-    /**\n-     * Constructor.\n-     */\n-    public GXDLMSPushSetup() {\n-        this(\"0.7.25.9.0.255\");\n+  private ServiceType service;\n+  private String destination;\n+  private MessageType message;\n+\n+  private List<Entry<GXDLMSObject, GXDLMSCaptureObject>> pushObjectList;\n+  private GXSendDestinationAndMethod sendDestinationAndMethod;\n+  private List<Map.Entry<GXDateTime, GXDateTime>> communicationWindow;\n+  private int randomisationStartInterval;\n+  private int numberOfRetries;\n+  private int repetitionDelay;\n+\n+  /**\n+   * Constructor.\n+   */\n+  public GXDLMSPushSetup() {\n+    this(\"0.7.25.9.0.255\");\n+  }\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param ln Logical Name of the object.\n+   */\n+  public GXDLMSPushSetup(final String ln) {\n+    this(ln, 0);\n+  }\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param ln Logical Name of the object.\n+   * @param sn Short Name of the object.\n+   */\n+  public GXDLMSPushSetup(final String ln, final int sn) {\n+    super(ObjectType.PUSH_SETUP, ln, sn);\n+    pushObjectList =\n+        new ArrayList<Entry<GXDLMSObject, GXDLMSCaptureObject>>();\n+    sendDestinationAndMethod = new GXSendDestinationAndMethod();\n+    communicationWindow =\n+        new ArrayList<Map.Entry<GXDateTime, GXDateTime>>();\n+  }\n+\n+  public final ServiceType getService() {\n+    return service;\n+  }\n+\n+  public final void setService(final ServiceType value) {\n+    service = value;\n+  }\n+\n+  public final String getDestination() {\n+    return destination;\n+  }\n+\n+  public final void setDestination(final String value) {\n+    destination = value;\n+  }\n+\n+  public final MessageType getMessage() {\n+    return message;\n+  }\n+\n+  public final void setMessage(final MessageType value) {\n+    message = value;\n+  }\n+\n+  /**\n+   * @return Defines the list of attributes or objects to be pushed. Upon a\n+   * call of the push (data) method the selected attributes are sent\n+   * to the destination defined in getSendDestinationAndMethod.\n+   */\n+  public final List<Entry<GXDLMSObject, GXDLMSCaptureObject>>\n+  getPushObjectList() {\n+    return pushObjectList;\n+  }\n+\n+  public final GXSendDestinationAndMethod getSendDestinationAndMethod() {\n+    return sendDestinationAndMethod;\n+  }\n+\n+  /**\n+   * @return Contains the start and end date/time stamp when the communication\n+   * window(s) for the push become active (for the start instant), or\n+   * inactive (for the end instant).\n+   */\n+  public final List<Map.Entry<GXDateTime, GXDateTime>>\n+  getCommunicationWindow() {\n+    return communicationWindow;\n+  }\n+\n+  /**\n+   * @return To avoid simultaneous network connections of a lot of devices at\n+   * ex-actly the same point in time, a randomisation interval in\n+   * seconds can be defined. This means that the push operation is not\n+   * started imme-diately at the beginning of the first communication\n+   * window but started randomly delayed.\n+   */\n+  public final int getRandomisationStartInterval() {\n+    return randomisationStartInterval;\n+  }\n+\n+  public final void setRandomisationStartInterval(final int value) {\n+    randomisationStartInterval = value;\n+  }\n+\n+  /**\n+   * @return The maximum number of re-trials in case of unsuccessful push\n+   * attempts. After a successful push no further push attempts are\n+   * made until the push setup is triggered again. A value of 0 means\n+   * no repetitions, i.e. only the initial connection attempt is made.\n+   */\n+  public final int getNumberOfRetries() {\n+    return numberOfRetries;\n+  }\n+\n+  /**\n+   * @param value The maximum number of re-trials in case of unsuccessful push\n+   *              attempts. After a successful push no further push attempts are\n+   *              made until the push setup is triggered again. A value of 0\n+   *              means no repetitions, i.e. only the initial connection attempt\n+   *              is made.\n+   */\n+  public final void setNumberOfRetries(final byte value) {\n+    numberOfRetries = value;\n+  }\n+\n+  public final int getRepetitionDelay() {\n+    return repetitionDelay;\n+  }\n+\n+  public final void setRepetitionDelay(final int value) {\n+    repetitionDelay = value;\n+  }\n+\n+  @Override\n+  public final Object[] getValues() {\n+    return new Object[] {getLogicalName(), pushObjectList,\n+        sendDestinationAndMethod, communicationWindow,\n+        new Integer(randomisationStartInterval),\n+        new Integer(numberOfRetries), new Integer(repetitionDelay)};\n+  }\n+\n+  @Override\n+  public final byte[] invoke(final GXDLMSSettings settings,\n+                             final ValueEventArgs e) {\n+    if (e.getIndex() == 1) {\n+      e.setError(ErrorCode.READ_WRITE_DENIED);\n+    } else {\n+      e.setError(ErrorCode.READ_WRITE_DENIED);\n     }\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param ln\n-     *            Logical Name of the object.\n-     */\n-    public GXDLMSPushSetup(final String ln) {\n-        this(ln, 0);\n+    return null;\n+  }\n+\n+  /*\n+   * Activates the push process.\n+   */\n+  public final byte[][] activate(final GXDLMSClient client) {\n+    return client.method(getName(), getObjectType(), 1, new Integer(0),\n+        DataType.INT8);\n+  }\n+\n+  @Override\n+  public final int[] getAttributeIndexToRead() {\n+    java.util.ArrayList<Integer> attributes =\n+        new java.util.ArrayList<Integer>();\n+    // LN is static and read only once.\n+    if (getLogicalName() == null || getLogicalName().compareTo(\"\") == 0) {\n+      attributes.add(new Integer(1));\n     }\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param ln\n-     *            Logical Name of the object.\n-     * @param sn\n-     *            Short Name of the object.\n-     */\n-    public GXDLMSPushSetup(final String ln, final int sn) {\n-        super(ObjectType.PUSH_SETUP, ln, sn);\n-        pushObjectList =\n-                new ArrayList<Entry<GXDLMSObject, GXDLMSCaptureObject>>();\n-        sendDestinationAndMethod = new GXSendDestinationAndMethod();\n-        communicationWindow =\n-                new ArrayList<Map.Entry<GXDateTime, GXDateTime>>();\n+    // PushObjectList\n+    if (canRead(2)) {\n+      attributes.add(new Integer(2));\n     }\n-\n-    public final ServiceType getService() {\n-        return service;\n+    // SendDestinationAndMethod\n+    if (canRead(3)) {\n+      attributes.add(new Integer(3));\n     }\n-\n-    public final void setService(final ServiceType value) {\n-        service = value;\n+    // CommunicationWindow\n+    if (canRead(4)) {\n+      attributes.add(new Integer(4));\n     }\n-\n-    public final String getDestination() {\n-        return destination;\n+    // RandomisationStartInterval\n+    if (canRead(5)) {\n+      attributes.add(new Integer(5));\n     }\n-\n-    public final void setDestination(final String value) {\n-        destination = value;\n+    // NumberOfRetries\n+    if (canRead(6)) {\n+      attributes.add(new Integer(6));\n     }\n-\n-    public final MessageType getMessage() {\n-        return message;\n+    // RepetitionDelay\n+    if (canRead(7)) {\n+      attributes.add(new Integer(7));\n     }\n-\n-    public final void setMessage(final MessageType value) {\n-        message = value;\n+    return GXDLMSObjectHelpers.toIntArray(attributes);\n+  }\n+\n+  /*\n+   * Returns amount of attributes.\n+   */\n+  @Override\n+  public final int getAttributeCount() {\n+    return 7;\n+  }\n+\n+  /*\n+   * Returns amount of methods.\n+   */\n+  @Override\n+  public final int getMethodCount() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public final DataType getDataType(final int index) {\n+    if (index == 1) {\n+      return DataType.OCTET_STRING;\n     }\n-\n-    /**\n-     * @return Defines the list of attributes or objects to be pushed. Upon a\n-     *         call of the push (data) method the selected attributes are sent\n-     *         to the destination defined in getSendDestinationAndMethod.\n-     */\n-    public final List<Entry<GXDLMSObject, GXDLMSCaptureObject>>\n-            getPushObjectList() {\n-        return pushObjectList;\n+    if (index == 2) {\n+      return DataType.ARRAY;\n     }\n-\n-    public final GXSendDestinationAndMethod getSendDestinationAndMethod() {\n-        return sendDestinationAndMethod;\n+    if (index == 3) {\n+      return DataType.STRUCTURE;\n     }\n-\n-    /**\n-     * @return Contains the start and end date/time stamp when the communication\n-     *         window(s) for the push become active (for the start instant), or\n-     *         inactive (for the end instant).\n-     */\n-    public final List<Map.Entry<GXDateTime, GXDateTime>>\n-            getCommunicationWindow() {\n-        return communicationWindow;\n+    if (index == 4) {\n+      return DataType.ARRAY;\n     }\n-\n-    /**\n-     * @return To avoid simultaneous network connections of a lot of devices at\n-     *         ex-actly the same point in time, a randomisation interval in\n-     *         seconds can be defined. This means that the push operation is not\n-     *         started imme-diately at the beginning of the first communication\n-     *         window but started randomly delayed.\n-     */\n-    public final int getRandomisationStartInterval() {\n-        return randomisationStartInterval;\n+    if (index == 5) {\n+      return DataType.UINT16;\n     }\n-\n-    public final void setRandomisationStartInterval(final int value) {\n-        randomisationStartInterval = value;\n+    if (index == 6) {\n+      return DataType.UINT8;\n     }\n-\n-    /**\n-     * @return The maximum number of re-trials in case of unsuccessful push\n-     *         attempts. After a successful push no further push attempts are\n-     *         made until the push setup is triggered again. A value of 0 means\n-     *         no repetitions, i.e. only the initial connection attempt is made.\n-     */\n-    public final int getNumberOfRetries() {\n-        return numberOfRetries;\n+    if (index == 7) {\n+      return DataType.UINT16;\n     }\n-\n-    /**\n-     * @param value\n-     *            The maximum number of re-trials in case of unsuccessful push\n-     *            attempts. After a successful push no further push attempts are\n-     *            made until the push setup is triggered again. A value of 0\n-     *            means no repetitions, i.e. only the initial connection attempt\n-     *            is made.\n-     */\n-    public final void setNumberOfRetries(final byte value) {\n-        numberOfRetries = value;\n+    throw new IllegalArgumentException(\n+        \"getDataType failed. Invalid attribute index.\");\n+  }\n+\n+  /*\n+   * Returns value of given attribute.\n+   */\n+  @Override\n+  public final Object getValue(final GXDLMSSettings settings,\n+                               final ValueEventArgs e) {\n+    if (e.getIndex() == 1) {\n+      return GXCommon.logicalNameToBytes(getLogicalName());\n     }\n-\n-    public final int getRepetitionDelay() {\n-        return repetitionDelay;\n+    GXByteBuffer buff = new GXByteBuffer();\n+    if (e.getIndex() == 2) {\n+      buff.setUInt8(DataType.ARRAY.getValue());\n+      GXCommon.setObjectCount(pushObjectList.size(), buff);\n+      for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n+        buff.setUInt8(DataType.STRUCTURE.getValue());\n+        buff.setUInt8(4);\n+        GXCommon.setData(buff, DataType.UINT16,\n+            new Integer(it.getKey().getObjectType().getValue()));\n+        GXCommon.setData(buff, DataType.OCTET_STRING, GXCommon\n+            .logicalNameToBytes(it.getKey().getLogicalName()));\n+        GXCommon.setData(buff, DataType.INT8,\n+            new Integer(it.getValue().getAttributeIndex()));\n+        GXCommon.setData(buff, DataType.UINT16,\n+            new Integer(it.getValue().getDataIndex()));\n+      }\n+      return buff.array();\n     }\n-\n-    public final void setRepetitionDelay(final int value) {\n-        repetitionDelay = value;\n+    if (e.getIndex() == 3) {\n+      buff.setUInt8(DataType.STRUCTURE.getValue());\n+      buff.setUInt8(3);\n+      GXCommon.setData(buff, DataType.UINT8, new Integer(\n+          sendDestinationAndMethod.getService().getValue()));\n+      if (sendDestinationAndMethod.getDestination() != null) {\n+        GXCommon.setData(buff, DataType.OCTET_STRING,\n+            sendDestinationAndMethod.getDestination().getBytes());\n+      } else {\n+        GXCommon.setData(buff, DataType.OCTET_STRING, null);\n+      }\n+      GXCommon.setData(buff, DataType.UINT8,\n+          sendDestinationAndMethod.getMessage().getValue());\n+      return buff.array();\n     }\n-\n-    @Override\n-    public final Object[] getValues() {\n-        return new Object[] { getLogicalName(), pushObjectList,\n-                sendDestinationAndMethod, communicationWindow,\n-                new Integer(randomisationStartInterval),\n-                new Integer(numberOfRetries), new Integer(repetitionDelay) };\n+    if (e.getIndex() == 4) {\n+      buff.setUInt8(DataType.ARRAY.getValue());\n+      GXCommon.setObjectCount(communicationWindow.size(), buff);\n+      for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n+        buff.setUInt8(DataType.STRUCTURE.getValue());\n+        buff.setUInt8(2);\n+        GXCommon.setData(buff, DataType.OCTET_STRING, it.getKey());\n+        GXCommon.setData(buff, DataType.OCTET_STRING, it.getValue());\n+      }\n+      return buff.array();\n     }\n-\n-    @Override\n-    public final byte[] invoke(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n-        if (e.getIndex() == 1) {\n-            e.setError(ErrorCode.READ_WRITE_DENIED);\n-        } else {\n-            e.setError(ErrorCode.READ_WRITE_DENIED);\n-        }\n-        return null;\n+    if (e.getIndex() == 5) {\n+      return new Integer(randomisationStartInterval);\n     }\n-\n-    /*\n-     * Activates the push process.\n-     */\n-    public final byte[][] activate(final GXDLMSClient client) {\n-        return client.method(getName(), getObjectType(), 1, new Integer(0),\n-                DataType.INT8);\n+    if (e.getIndex() == 6) {\n+      return new Integer(numberOfRetries);\n     }\n-\n-    @Override\n-    public final int[] getAttributeIndexToRead() {\n-        java.util.ArrayList<Integer> attributes =\n-                new java.util.ArrayList<Integer>();\n-        // LN is static and read only once.\n-        if (getLogicalName() == null || getLogicalName().compareTo(\"\") == 0) {\n-            attributes.add(new Integer(1));\n-        }\n-        // PushObjectList\n-        if (canRead(2)) {\n-            attributes.add(new Integer(2));\n-        }\n-        // SendDestinationAndMethod\n-        if (canRead(3)) {\n-            attributes.add(new Integer(3));\n-        }\n-        // CommunicationWindow\n-        if (canRead(4)) {\n-            attributes.add(new Integer(4));\n-        }\n-        // RandomisationStartInterval\n-        if (canRead(5)) {\n-            attributes.add(new Integer(5));\n-        }\n-        // NumberOfRetries\n-        if (canRead(6)) {\n-            attributes.add(new Integer(6));\n-        }\n-        // RepetitionDelay\n-        if (canRead(7)) {\n-            attributes.add(new Integer(7));\n-        }\n-        return GXDLMSObjectHelpers.toIntArray(attributes);\n+    if (e.getIndex() == 7) {\n+      return new Integer(repetitionDelay);\n     }\n-\n-    /*\n-     * Returns amount of attributes.\n-     */\n-    @Override\n-    public final int getAttributeCount() {\n-        return 7;\n-    }\n-\n-    /*\n-     * Returns amount of methods.\n-     */\n-    @Override\n-    public final int getMethodCount() {\n-        return 1;\n-    }\n-\n-    @Override\n-    public final DataType getDataType(final int index) {\n-        if (index == 1) {\n-            return DataType.OCTET_STRING;\n-        }\n-        if (index == 2) {\n-            return DataType.ARRAY;\n-        }\n-        if (index == 3) {\n-            return DataType.STRUCTURE;\n-        }\n-        if (index == 4) {\n-            return DataType.ARRAY;\n-        }\n-        if (index == 5) {\n-            return DataType.UINT16;\n-        }\n-        if (index == 6) {\n-            return DataType.UINT8;\n-        }\n-        if (index == 7) {\n-            return DataType.UINT16;\n-        }\n-        throw new IllegalArgumentException(\n-                \"getDataType failed. Invalid attribute index.\");\n-    }\n-\n-    /*\n-     * Returns value of given attribute.\n-     */\n-    @Override\n-    public final Object getValue(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n-        if (e.getIndex() == 1) {\n-            return GXCommon.logicalNameToBytes(getLogicalName());\n+    e.setError(ErrorCode.READ_WRITE_DENIED);\n+    return null;\n+  }\n+\n+  /*\n+   * Set value of given attribute.\n+   */\n+  @Override\n+  public final void setValue(final GXDLMSSettings settings,\n+                             final ValueEventArgs e) {\n+    if (e.getIndex() == 1) {\n+      setLogicalName(GXCommon.toLogicalName(e.getValue()));\n+    } else if (e.getIndex() == 2) {\n+      pushObjectList.clear();\n+      Entry<GXDLMSObject, GXDLMSCaptureObject> ent;\n+      if (e.getValue() instanceof Object[]) {\n+        for (Object it : (Object[]) e.getValue()) {\n+          Object[] tmp = (Object[]) it;\n+          ObjectType type =\n+              ObjectType.forValue(((Number) tmp[0]).intValue());\n+          String ln = GXCommon.toLogicalName(tmp[1]);\n+          GXDLMSObject obj = settings.getObjects().findByLN(type, ln);\n+          if (obj == null) {\n+            obj = gurux.dlms.GXDLMSClient.createObject(type);\n+            obj.setLogicalName(ln);\n+          }\n+          GXDLMSCaptureObject co = new GXDLMSCaptureObject();\n+          co.setAttributeIndex(((Number) tmp[2]).intValue());\n+          co.setDataIndex(((Number) tmp[3]).intValue());\n+          ent = new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n+              obj, co);\n+          pushObjectList.add(ent);\n         }\n-        GXByteBuffer buff = new GXByteBuffer();\n-        if (e.getIndex() == 2) {\n-            buff.setUInt8(DataType.ARRAY.getValue());\n-            GXCommon.setObjectCount(pushObjectList.size(), buff);\n-            for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n-                buff.setUInt8(DataType.STRUCTURE.getValue());\n-                buff.setUInt8(4);\n-                GXCommon.setData(buff, DataType.UINT16,\n-                        new Integer(it.getKey().getObjectType().getValue()));\n-                GXCommon.setData(buff, DataType.OCTET_STRING, GXCommon\n-                        .logicalNameToBytes(it.getKey().getLogicalName()));\n-                GXCommon.setData(buff, DataType.INT8,\n-                        new Integer(it.getValue().getAttributeIndex()));\n-                GXCommon.setData(buff, DataType.UINT16,\n-                        new Integer(it.getValue().getDataIndex()));\n-            }\n-            return buff.array();\n+      }\n+    } else if (e.getIndex() == 3) {\n+      Object[] tmp = (Object[]) e.getValue();\n+      if (tmp != null) {\n+        sendDestinationAndMethod.setService(\n+            ServiceType.forValue(((Number) tmp[0]).intValue()));\n+        sendDestinationAndMethod\n+            .setDestination(new String((byte[]) tmp[1]));\n+        sendDestinationAndMethod.setMessage(\n+            MessageType.forValue(((Number) tmp[2]).intValue()));\n+      }\n+    } else if (e.getIndex() == 4) {\n+      communicationWindow.clear();\n+      if (e.getValue() instanceof Object[]) {\n+        for (Object it : (Object[]) e.getValue()) {\n+          Object[] tmp = (Object[]) it;\n+          GXDateTime start = (GXDateTime) GXDLMSClient\n+              .changeType((byte[]) tmp[0], DataType.DATETIME);\n+          GXDateTime end = (GXDateTime) GXDLMSClient\n+              .changeType((byte[]) tmp[1], DataType.DATETIME);\n+          communicationWindow.add(\n+              new GXSimpleEntry<GXDateTime, GXDateTime>(start,\n+                  end));\n         }\n-        if (e.getIndex() == 3) {\n-            buff.setUInt8(DataType.STRUCTURE.getValue());\n-            buff.setUInt8(3);\n-            GXCommon.setData(buff, DataType.UINT8, new Integer(\n-                    sendDestinationAndMethod.getService().getValue()));\n-            if (sendDestinationAndMethod.getDestination() != null) {\n-                GXCommon.setData(buff, DataType.OCTET_STRING,\n-                        sendDestinationAndMethod.getDestination().getBytes());\n-            } else {\n-                GXCommon.setData(buff, DataType.OCTET_STRING, null);\n-            }\n-            GXCommon.setData(buff, DataType.UINT8,\n-                    sendDestinationAndMethod.getMessage().getValue());\n-            return buff.array();\n-        }\n-        if (e.getIndex() == 4) {\n-            buff.setUInt8(DataType.ARRAY.getValue());\n-            GXCommon.setObjectCount(communicationWindow.size(), buff);\n-            for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n-                buff.setUInt8(DataType.STRUCTURE.getValue());\n-                buff.setUInt8(2);\n-                GXCommon.setData(buff, DataType.OCTET_STRING, it.getKey());\n-                GXCommon.setData(buff, DataType.OCTET_STRING, it.getValue());\n-            }\n-            return buff.array();\n-        }\n-        if (e.getIndex() == 5) {\n-            return new Integer(randomisationStartInterval);\n-        }\n-        if (e.getIndex() == 6) {\n-            return new Integer(numberOfRetries);\n-        }\n-        if (e.getIndex() == 7) {\n-            return new Integer(repetitionDelay);\n-        }\n-        e.setError(ErrorCode.READ_WRITE_DENIED);\n-        return null;\n+      }\n+    } else if (e.getIndex() == 5) {\n+      randomisationStartInterval = ((Number) e.getValue()).intValue();\n+    } else if (e.getIndex() == 6) {\n+      numberOfRetries = ((Number) e.getValue()).intValue();\n+    } else if (e.getIndex() == 7) {\n+      repetitionDelay = ((Number) e.getValue()).intValue();\n+    } else {\n+      e.setError(ErrorCode.READ_WRITE_DENIED);\n     }\n-\n-    /*\n-     * Set value of given attribute.\n-     */\n-    @Override\n-    public final void setValue(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n-        if (e.getIndex() == 1) {\n-            setLogicalName(GXCommon.toLogicalName(e.getValue()));\n-        } else if (e.getIndex() == 2) {\n-            pushObjectList.clear();\n-            Entry<GXDLMSObject, GXDLMSCaptureObject> ent;\n-            if (e.getValue() instanceof Object[]) {\n-                for (Object it : (Object[]) e.getValue()) {\n-                    Object[] tmp = (Object[]) it;\n-                    ObjectType type =\n-                            ObjectType.forValue(((Number) tmp[0]).intValue());\n-                    String ln = GXCommon.toLogicalName(tmp[1]);\n-                    GXDLMSObject obj = settings.getObjects().findByLN(type, ln);\n-                    if (obj == null) {\n-                        obj = gurux.dlms.GXDLMSClient.createObject(type);\n-                        obj.setLogicalName(ln);\n-                    }\n-                    GXDLMSCaptureObject co = new GXDLMSCaptureObject();\n-                    co.setAttributeIndex(((Number) tmp[2]).intValue());\n-                    co.setDataIndex(((Number) tmp[3]).intValue());\n-                    ent = new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n-                            obj, co);\n-                    pushObjectList.add(ent);\n-                }\n-            }\n-        } else if (e.getIndex() == 3) {\n-            Object[] tmp = (Object[]) e.getValue();\n-            if (tmp != null) {\n-                sendDestinationAndMethod.setService(\n-                        ServiceType.forValue(((Number) tmp[0]).intValue()));\n-                sendDestinationAndMethod\n-                        .setDestination(new String((byte[]) tmp[1]));\n-                sendDestinationAndMethod.setMessage(\n-                        MessageType.forValue(((Number) tmp[2]).intValue()));\n-            }\n-        } else if (e.getIndex() == 4) {\n-            communicationWindow.clear();\n-            if (e.getValue() instanceof Object[]) {\n-                for (Object it : (Object[]) e.getValue()) {\n-                    Object[] tmp = (Object[]) it;\n-                    GXDateTime start = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[0], DataType.DATETIME);\n-                    GXDateTime end = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[1], DataType.DATETIME);\n-                    communicationWindow.add(\n-                            new GXSimpleEntry<GXDateTime, GXDateTime>(start,\n-                                    end));\n-                }\n-            }\n-        } else if (e.getIndex() == 5) {\n-            randomisationStartInterval = ((Number) e.getValue()).intValue();\n-        } else if (e.getIndex() == 6) {\n-            numberOfRetries = ((Number) e.getValue()).intValue();\n-        } else if (e.getIndex() == 7) {\n-            repetitionDelay = ((Number) e.getValue()).intValue();\n-        } else {\n-            e.setError(ErrorCode.READ_WRITE_DENIED);\n-        }\n+  }\n+\n+  @Override\n+  public final void load(final GXXmlReader reader) throws XMLStreamException {\n+    pushObjectList.clear();\n+    if (reader.isStartElement(\"ObjectList\", true)) {\n+      while (reader.isStartElement(\"Item\", true)) {\n+        ObjectType ot = ObjectType\n+            .forValue(reader.readElementContentAsInt(\"ObjectType\"));\n+        String ln = reader.readElementContentAsString(\"LN\");\n+        int ai = reader.readElementContentAsInt(\"AI\");\n+        int di = reader.readElementContentAsInt(\"DI\");\n+        reader.readEndElement(\"ObjectList\");\n+        GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n+        GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n+        pushObjectList\n+            .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n+                obj, co));\n+      }\n+      reader.readEndElement(\"ObjectList\");\n     }\n \n-    @Override\n-    public final void load(final GXXmlReader reader) throws XMLStreamException {\n-        pushObjectList.clear();\n-        if (reader.isStartElement(\"ObjectList\", true)) {\n-            while (reader.isStartElement(\"Item\", true)) {\n-                ObjectType ot = ObjectType\n-                        .forValue(reader.readElementContentAsInt(\"ObjectType\"));\n-                String ln = reader.readElementContentAsString(\"LN\");\n-                int ai = reader.readElementContentAsInt(\"AI\");\n-                int di = reader.readElementContentAsInt(\"DI\");\n-                reader.readEndElement(\"ObjectList\");\n-                GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n-                GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n-                pushObjectList\n-                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n-                                obj, co));\n-            }\n-            reader.readEndElement(\"ObjectList\");\n-        }\n-\n-        service =\n-                ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n-        destination = reader.readElementContentAsString(\"Destination\");\n-        message =\n-                MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n-        communicationWindow.clear();\n-        if (reader.isStartElement(\"CommunicationWindow\", true)) {\n-            while (reader.isStartElement(\"Item\", true)) {\n-                GXDateTime start = new GXDateTime(\n-                        reader.readElementContentAsString(\"Start\"));\n-                GXDateTime end = new GXDateTime(\n-                        reader.readElementContentAsString(\"End\"));\n-                communicationWindow.add(\n-                        new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n-            }\n-            reader.readEndElement(\"CommunicationWindow\");\n-        }\n-        randomisationStartInterval =\n-                reader.readElementContentAsInt(\"RandomisationStartInterval\");\n-        numberOfRetries = reader.readElementContentAsInt(\"NumberOfRetries\");\n-        repetitionDelay = reader.readElementContentAsInt(\"RepetitionDelay\");\n+    service =\n+        ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n+    destination = reader.readElementContentAsString(\"Destination\");\n+    message =\n+        MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n+    communicationWindow.clear();\n+    if (reader.isStartElement(\"CommunicationWindow\", true)) {\n+      while (reader.isStartElement(\"Item\", true)) {\n+        GXDateTime start = new GXDateTime(\n+            reader.readElementContentAsString(\"Start\"));\n+        GXDateTime end = new GXDateTime(\n+            reader.readElementContentAsString(\"End\"));\n+        communicationWindow.add(\n+            new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n+      }\n+      reader.readEndElement(\"CommunicationWindow\");\n     }\n-\n-    @Override\n-    public final void save(final GXXmlWriter writer) throws XMLStreamException {\n-        if (pushObjectList != null) {\n-            writer.writeStartElement(\"ObjectList\");\n-            for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n-                writer.writeStartElement(\"Item\");\n-                writer.writeElementString(\"ObjectType\",\n-                        it.getKey().getObjectType().getValue());\n-                writer.writeElementString(\"LN\", it.getKey().getLogicalName());\n-                writer.writeElementString(\"AI\",\n-                        it.getValue().getAttributeIndex());\n-                writer.writeElementString(\"DI\", it.getValue().getDataIndex());\n-                writer.writeEndElement();\n-            }\n-            writer.writeEndElement();\n-        }\n-        writer.writeElementString(\"Service\", service.getValue());\n-        writer.writeElementString(\"Destination\", destination);\n-        writer.writeElementString(\"Message\", message.getValue());\n-        if (communicationWindow != null) {\n-            writer.writeStartElement(\"CommunicationWindow\");\n-            for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n-                writer.writeStartElement(\"Item\");\n-                writer.writeElementString(\"Start\",\n-                        it.getKey().toFormatString());\n-                writer.writeElementString(\"End\",\n-                        it.getValue().toFormatString());\n-                writer.writeEndElement();\n-            }\n-            writer.writeEndElement();\n-        }\n-        writer.writeElementString(\"RandomisationStartInterval\",\n-                randomisationStartInterval);\n-        writer.writeElementString(\"NumberOfRetries\", numberOfRetries);\n-        writer.writeElementString(\"RepetitionDelay\", repetitionDelay);\n+    randomisationStartInterval =\n+        reader.readElementContentAsInt(\"RandomisationStartInterval\");\n+    numberOfRetries = reader.readElementContentAsInt(\"NumberOfRetries\");\n+    repetitionDelay = reader.readElementContentAsInt(\"RepetitionDelay\");\n+  }\n+\n+  @Override\n+  public final void save(final GXXmlWriter writer) throws XMLStreamException {\n+    if (pushObjectList != null) {\n+      writer.writeStartElement(\"ObjectList\");\n+      for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n+        writer.writeStartElement(\"Item\");\n+        writer.writeElementString(\"ObjectType\",\n+            it.getKey().getObjectType().getValue());\n+        writer.writeElementString(\"LN\", it.getKey().getLogicalName());\n+        writer.writeElementString(\"AI\",\n+            it.getValue().getAttributeIndex());\n+        writer.writeElementString(\"DI\", it.getValue().getDataIndex());\n+        writer.writeEndElement();\n+      }\n+      writer.writeEndElement();\n     }\n-\n-    @Override\n-    public final void postLoad(final GXXmlReader reader) {\n+    writer.writeElementString(\"Service\", service.getValue());\n+    writer.writeElementString(\"Destination\", destination);\n+    writer.writeElementString(\"Message\", message.getValue());\n+    if (communicationWindow != null) {\n+      writer.writeStartElement(\"CommunicationWindow\");\n+      for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n+        writer.writeStartElement(\"Item\");\n+        writer.writeElementString(\"Start\",\n+            it.getKey().toFormatString());\n+        writer.writeElementString(\"End\",\n+            it.getValue().toFormatString());\n+        writer.writeEndElement();\n+      }\n+      writer.writeEndElement();\n     }\n+    writer.writeElementString(\"RandomisationStartInterval\",\n+        randomisationStartInterval);\n+    writer.writeElementString(\"NumberOfRetries\", numberOfRetries);\n+    writer.writeElementString(\"RepetitionDelay\", repetitionDelay);\n+  }\n+\n+  @Override\n+  public final void postLoad(final GXXmlReader reader) {\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 644
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "316",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "324",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "337",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "347",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "383",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "392",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "402",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "409",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "410",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "411",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "418",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "419",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "420",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "424",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "436",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "440",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "447",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "453",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "457",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "458",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 90).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "459",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "463",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "470",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "478",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "491",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "492",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "497",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/14/GXDLMSPushSetup.java\nindex fa65f853d3..6cd2e85662 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/codebuff/14/GXDLMSPushSetup.java\n@@ -38,9 +38,7 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n-\n import javax.xml.stream.XMLStreamException;\n-\n import gurux.dlms.GXByteBuffer;\n import gurux.dlms.GXDLMSClient;\n import gurux.dlms.GXDLMSSettings;\n@@ -58,7 +56,6 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     private ServiceType service;\n     private String destination;\n     private MessageType message;\n-\n     private List<Entry<GXDLMSObject, GXDLMSCaptureObject>> pushObjectList;\n     private GXSendDestinationAndMethod sendDestinationAndMethod;\n     private List<Map.Entry<GXDateTime, GXDateTime>> communicationWindow;\n@@ -69,6 +66,8 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     /**\n      * Constructor.\n      */\n+\n+\n     public GXDLMSPushSetup() {\n         this(\"0.7.25.9.0.255\");\n     }\n@@ -79,6 +78,8 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      * @param ln\n      *            Logical Name of the object.\n      */\n+\n+\n     public GXDLMSPushSetup(final String ln) {\n         this(ln, 0);\n     }\n@@ -91,35 +92,41 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      * @param sn\n      *            Short Name of the object.\n      */\n+\n+\n     public GXDLMSPushSetup(final String ln, final int sn) {\n         super(ObjectType.PUSH_SETUP, ln, sn);\n-        pushObjectList =\n-                new ArrayList<Entry<GXDLMSObject, GXDLMSCaptureObject>>();\n+        pushObjectList = new ArrayList<Entry<GXDLMSObject, GXDLMSCaptureObject>>();\n         sendDestinationAndMethod = new GXSendDestinationAndMethod();\n-        communicationWindow =\n-                new ArrayList<Map.Entry<GXDateTime, GXDateTime>>();\n+        communicationWindow = new ArrayList<Map.Entry<GXDateTime, GXDateTime>>();\n     }\n \n+\n     public final ServiceType getService() {\n         return service;\n     }\n \n+\n     public final void setService(final ServiceType value) {\n         service = value;\n     }\n \n+\n     public final String getDestination() {\n         return destination;\n     }\n \n+\n     public final void setDestination(final String value) {\n         destination = value;\n     }\n \n+\n     public final MessageType getMessage() {\n         return message;\n     }\n \n+\n     public final void setMessage(final MessageType value) {\n         message = value;\n     }\n@@ -129,11 +136,13 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      *         call of the push (data) method the selected attributes are sent\n      *         to the destination defined in getSendDestinationAndMethod.\n      */\n-    public final List<Entry<GXDLMSObject, GXDLMSCaptureObject>>\n-            getPushObjectList() {\n+\n+\n+    public final List<Entry<GXDLMSObject, GXDLMSCaptureObject>> getPushObjectList() {\n         return pushObjectList;\n     }\n \n+\n     public final GXSendDestinationAndMethod getSendDestinationAndMethod() {\n         return sendDestinationAndMethod;\n     }\n@@ -143,8 +152,9 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      *         window(s) for the push become active (for the start instant), or\n      *         inactive (for the end instant).\n      */\n-    public final List<Map.Entry<GXDateTime, GXDateTime>>\n-            getCommunicationWindow() {\n+\n+\n+    public final List<Map.Entry<GXDateTime, GXDateTime>> getCommunicationWindow() {\n         return communicationWindow;\n     }\n \n@@ -155,10 +165,13 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      *         started imme-diately at the beginning of the first communication\n      *         window but started randomly delayed.\n      */\n+\n+\n     public final int getRandomisationStartInterval() {\n         return randomisationStartInterval;\n     }\n \n+\n     public final void setRandomisationStartInterval(final int value) {\n         randomisationStartInterval = value;\n     }\n@@ -169,6 +182,8 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      *         made until the push setup is triggered again. A value of 0 means\n      *         no repetitions, i.e. only the initial connection attempt is made.\n      */\n+\n+\n     public final int getNumberOfRetries() {\n         return numberOfRetries;\n     }\n@@ -181,29 +196,29 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n      *            means no repetitions, i.e. only the initial connection attempt\n      *            is made.\n      */\n+\n+\n     public final void setNumberOfRetries(final byte value) {\n         numberOfRetries = value;\n     }\n \n+\n     public final int getRepetitionDelay() {\n         return repetitionDelay;\n     }\n \n+\n     public final void setRepetitionDelay(final int value) {\n         repetitionDelay = value;\n     }\n \n     @Override\n     public final Object[] getValues() {\n-        return new Object[] { getLogicalName(), pushObjectList,\n-                sendDestinationAndMethod, communicationWindow,\n-                new Integer(randomisationStartInterval),\n-                new Integer(numberOfRetries), new Integer(repetitionDelay) };\n+        return new Object[] { getLogicalName(), pushObjectList, sendDestinationAndMethod, communicationWindow, new Integer(randomisationStartInterval), new Integer(numberOfRetries), new Integer(repetitionDelay) };\n     }\n \n     @Override\n-    public final byte[] invoke(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n+    public final byte[] invoke(final GXDLMSSettings settings, final ValueEventArgs e) {\n         if (e.getIndex() == 1) {\n             e.setError(ErrorCode.READ_WRITE_DENIED);\n         } else {\n@@ -215,15 +230,17 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Activates the push process.\n      */\n+\n+\n     public final byte[][] activate(final GXDLMSClient client) {\n-        return client.method(getName(), getObjectType(), 1, new Integer(0),\n-                DataType.INT8);\n+        return client.method(getName(),\n+getObjectType(), 1, new Integer(0),\n+DataType.INT8);\n     }\n \n     @Override\n     public final int[] getAttributeIndexToRead() {\n-        java.util.ArrayList<Integer> attributes =\n-                new java.util.ArrayList<Integer>();\n+        java.util.ArrayList<Integer> attributes = new java.util.ArrayList<Integer>();\n         // LN is static and read only once.\n         if (getLogicalName() == null || getLogicalName().compareTo(\"\") == 0) {\n             attributes.add(new Integer(1));\n@@ -258,6 +275,7 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Returns amount of attributes.\n      */\n+\n     @Override\n     public final int getAttributeCount() {\n         return 7;\n@@ -266,6 +284,7 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Returns amount of methods.\n      */\n+\n     @Override\n     public final int getMethodCount() {\n         return 1;\n@@ -294,16 +313,15 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n         if (index == 7) {\n             return DataType.UINT16;\n         }\n-        throw new IllegalArgumentException(\n-                \"getDataType failed. Invalid attribute index.\");\n+        throw new IllegalArgumentException(\"getDataType failed. Invalid attribute index.\");\n     }\n \n     /*\n      * Returns value of given attribute.\n      */\n+\n     @Override\n-    public final Object getValue(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n+    public final Object getValue(final GXDLMSSettings settings, final ValueEventArgs e) {\n         if (e.getIndex() == 1) {\n             return GXCommon.logicalNameToBytes(getLogicalName());\n         }\n@@ -314,30 +332,23 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n             for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n                 buff.setUInt8(DataType.STRUCTURE.getValue());\n                 buff.setUInt8(4);\n-                GXCommon.setData(buff, DataType.UINT16,\n-                        new Integer(it.getKey().getObjectType().getValue()));\n-                GXCommon.setData(buff, DataType.OCTET_STRING, GXCommon\n-                        .logicalNameToBytes(it.getKey().getLogicalName()));\n-                GXCommon.setData(buff, DataType.INT8,\n-                        new Integer(it.getValue().getAttributeIndex()));\n-                GXCommon.setData(buff, DataType.UINT16,\n-                        new Integer(it.getValue().getDataIndex()));\n+                GXCommon.setData(buff, DataType.UINT16, new Integer(it.getKey().getObjectType().getValue()));\n+                GXCommon.setData(buff, DataType.OCTET_STRING, GXCommon.logicalNameToBytes(it.getKey().getLogicalName()));\n+                GXCommon.setData(buff, DataType.INT8, new Integer(it.getValue().getAttributeIndex()));\n+                GXCommon.setData(buff, DataType.UINT16, new Integer(it.getValue().getDataIndex()));\n             }\n             return buff.array();\n         }\n         if (e.getIndex() == 3) {\n             buff.setUInt8(DataType.STRUCTURE.getValue());\n             buff.setUInt8(3);\n-            GXCommon.setData(buff, DataType.UINT8, new Integer(\n-                    sendDestinationAndMethod.getService().getValue()));\n+            GXCommon.setData(buff, DataType.UINT8, new Integer(sendDestinationAndMethod.getService().getValue()));\n             if (sendDestinationAndMethod.getDestination() != null) {\n-                GXCommon.setData(buff, DataType.OCTET_STRING,\n-                        sendDestinationAndMethod.getDestination().getBytes());\n+                GXCommon.setData(buff, DataType.OCTET_STRING, sendDestinationAndMethod.getDestination().getBytes());\n             } else {\n                 GXCommon.setData(buff, DataType.OCTET_STRING, null);\n             }\n-            GXCommon.setData(buff, DataType.UINT8,\n-                    sendDestinationAndMethod.getMessage().getValue());\n+            GXCommon.setData(buff, DataType.UINT8, sendDestinationAndMethod.getMessage().getValue());\n             return buff.array();\n         }\n         if (e.getIndex() == 4) {\n@@ -367,9 +378,9 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Set value of given attribute.\n      */\n+\n     @Override\n-    public final void setValue(final GXDLMSSettings settings,\n-            final ValueEventArgs e) {\n+    public final void setValue(final GXDLMSSettings settings, final ValueEventArgs e) {\n         if (e.getIndex() == 1) {\n             setLogicalName(GXCommon.toLogicalName(e.getValue()));\n         } else if (e.getIndex() == 2) {\n@@ -378,8 +389,7 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n             if (e.getValue() instanceof Object[]) {\n                 for (Object it : (Object[]) e.getValue()) {\n                     Object[] tmp = (Object[]) it;\n-                    ObjectType type =\n-                            ObjectType.forValue(((Number) tmp[0]).intValue());\n+                    ObjectType type = ObjectType.forValue(((Number) tmp[0]).intValue());\n                     String ln = GXCommon.toLogicalName(tmp[1]);\n                     GXDLMSObject obj = settings.getObjects().findByLN(type, ln);\n                     if (obj == null) {\n@@ -389,100 +399,83 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n                     GXDLMSCaptureObject co = new GXDLMSCaptureObject();\n                     co.setAttributeIndex(((Number) tmp[2]).intValue());\n                     co.setDataIndex(((Number) tmp[3]).intValue());\n-                    ent = new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n-                            obj, co);\n+                    ent = new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(obj, co);\n                     pushObjectList.add(ent);\n                 }\n             }\n         } else if (e.getIndex() == 3) {\n-            Object[] tmp = (Object[]) e.getValue();\n-            if (tmp != null) {\n-                sendDestinationAndMethod.setService(\n-                        ServiceType.forValue(((Number) tmp[0]).intValue()));\n-                sendDestinationAndMethod\n-                        .setDestination(new String((byte[]) tmp[1]));\n-                sendDestinationAndMethod.setMessage(\n-                        MessageType.forValue(((Number) tmp[2]).intValue()));\n-            }\n+                   Object[] tmp = (Object[]) e.getValue();\n+                   if (tmp != null) {\n+                       sendDestinationAndMethod.setService(ServiceType.forValue(((Number) tmp[0]).intValue()));\n+                       sendDestinationAndMethod.setDestination(new String((byte[]) tmp[1]));\n+                       sendDestinationAndMethod.setMessage(MessageType.forValue(((Number) tmp[2]).intValue()));\n+                   }\n         } else if (e.getIndex() == 4) {\n-            communicationWindow.clear();\n-            if (e.getValue() instanceof Object[]) {\n-                for (Object it : (Object[]) e.getValue()) {\n-                    Object[] tmp = (Object[]) it;\n-                    GXDateTime start = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[0], DataType.DATETIME);\n-                    GXDateTime end = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[1], DataType.DATETIME);\n-                    communicationWindow.add(\n-                            new GXSimpleEntry<GXDateTime, GXDateTime>(start,\n-                                    end));\n-                }\n-            }\n-        } else if (e.getIndex() == 5) {\n-            randomisationStartInterval = ((Number) e.getValue()).intValue();\n-        } else if (e.getIndex() == 6) {\n-            numberOfRetries = ((Number) e.getValue()).intValue();\n-        } else if (e.getIndex() == 7) {\n-            repetitionDelay = ((Number) e.getValue()).intValue();\n-        } else {\n-            e.setError(ErrorCode.READ_WRITE_DENIED);\n-        }\n+                   communicationWindow.clear();\n+                   if (e.getValue() instanceof Object[]) {\n+                       for (Object it : (Object[]) e.getValue()) {\n+                           Object[] tmp = (Object[]) it;\n+                           GXDateTime start = (GXDateTime) GXDLMSClient.changeType((byte[]) tmp[0], DataType.DATETIME);\n+                           GXDateTime end = (GXDateTime) GXDLMSClient.changeType((byte[]) tmp[1], DataType.DATETIME);\n+                           communicationWindow.add(new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n+                       }\n+                   }\n+               } else if (e.getIndex() == 5) {\n+                   randomisationStartInterval = ((Number) e.getValue()).intValue();\n+               } else if (e.getIndex() == 6) {\n+                          numberOfRetries = ((Number) e.getValue()).intValue();\n+               } else if (e.getIndex() == 7) {\n+                          repetitionDelay = ((Number) e.getValue()).intValue();\n+                      } else {\n+                          e.setError(ErrorCode.READ_WRITE_DENIED);\n+                      }\n     }\n \n     @Override\n-    public final void load(final GXXmlReader reader) throws XMLStreamException {\n+    public final void load(final GXXmlReader reader)\n+                                                      throws XMLStreamException {\n         pushObjectList.clear();\n         if (reader.isStartElement(\"ObjectList\", true)) {\n             while (reader.isStartElement(\"Item\", true)) {\n-                ObjectType ot = ObjectType\n-                        .forValue(reader.readElementContentAsInt(\"ObjectType\"));\n+                ObjectType ot = ObjectType.forValue(reader.readElementContentAsInt(\"ObjectType\"));\n                 String ln = reader.readElementContentAsString(\"LN\");\n                 int ai = reader.readElementContentAsInt(\"AI\");\n                 int di = reader.readElementContentAsInt(\"DI\");\n                 reader.readEndElement(\"ObjectList\");\n                 GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n                 GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n-                pushObjectList\n-                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n-                                obj, co));\n+                pushObjectList.add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(obj, co));\n             }\n             reader.readEndElement(\"ObjectList\");\n         }\n-\n-        service =\n-                ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n+        service = ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n         destination = reader.readElementContentAsString(\"Destination\");\n-        message =\n-                MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n+        message = MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n         communicationWindow.clear();\n         if (reader.isStartElement(\"CommunicationWindow\", true)) {\n             while (reader.isStartElement(\"Item\", true)) {\n-                GXDateTime start = new GXDateTime(\n-                        reader.readElementContentAsString(\"Start\"));\n-                GXDateTime end = new GXDateTime(\n-                        reader.readElementContentAsString(\"End\"));\n-                communicationWindow.add(\n-                        new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n+                GXDateTime start = new GXDateTime(reader.readElementContentAsString(\"Start\"));\n+                GXDateTime end = new GXDateTime(reader.readElementContentAsString(\"End\"));\n+                communicationWindow.add(new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n             }\n             reader.readEndElement(\"CommunicationWindow\");\n         }\n-        randomisationStartInterval =\n-                reader.readElementContentAsInt(\"RandomisationStartInterval\");\n+        randomisationStartInterval = reader.readElementContentAsInt(\"RandomisationStartInterval\");\n         numberOfRetries = reader.readElementContentAsInt(\"NumberOfRetries\");\n         repetitionDelay = reader.readElementContentAsInt(\"RepetitionDelay\");\n     }\n \n     @Override\n-    public final void save(final GXXmlWriter writer) throws XMLStreamException {\n+    public final void save(final GXXmlWriter writer)\n+                                                      throws XMLStreamException {\n         if (pushObjectList != null) {\n             writer.writeStartElement(\"ObjectList\");\n             for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n                 writer.writeStartElement(\"Item\");\n                 writer.writeElementString(\"ObjectType\",\n-                        it.getKey().getObjectType().getValue());\n+                      it.getKey().getObjectType().getValue());\n                 writer.writeElementString(\"LN\", it.getKey().getLogicalName());\n-                writer.writeElementString(\"AI\",\n-                        it.getValue().getAttributeIndex());\n+                writer.writeElementString(\"AI\", it.getValue().getAttributeIndex());\n                 writer.writeElementString(\"DI\", it.getValue().getDataIndex());\n                 writer.writeEndElement();\n             }\n@@ -495,21 +488,19 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n             writer.writeStartElement(\"CommunicationWindow\");\n             for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n                 writer.writeStartElement(\"Item\");\n-                writer.writeElementString(\"Start\",\n-                        it.getKey().toFormatString());\n-                writer.writeElementString(\"End\",\n-                        it.getValue().toFormatString());\n+                writer.writeElementString(\"Start\", it.getKey().toFormatString());\n+                writer.writeElementString(\"End\", it.getValue().toFormatString());\n                 writer.writeEndElement();\n             }\n             writer.writeEndElement();\n         }\n-        writer.writeElementString(\"RandomisationStartInterval\",\n-                randomisationStartInterval);\n+        writer.writeElementString(\"RandomisationStartInterval\", randomisationStartInterval);\n         writer.writeElementString(\"NumberOfRetries\", numberOfRetries);\n         writer.writeElementString(\"RepetitionDelay\", repetitionDelay);\n     }\n \n     @Override\n     public final void postLoad(final GXXmlReader reader) {\n+\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "446",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "447",
                    "column": "32",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "447",
                    "column": "34",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_random/14/GXDLMSPushSetup.java\nindex fa65f853d3..78da6fe47a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_random/14/GXDLMSPushSetup.java\n@@ -443,73 +443,73 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n                 GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n                 GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n                 pushObjectList\n-                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n-                                obj, co));\n-            }\n-            reader.readEndElement(\"ObjectList\");\n-        }\n-\n-        service =\n-                ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n-        destination = reader.readElementContentAsString(\"Destination\");\n-        message =\n-                MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n-        communicationWindow.clear();\n-        if (reader.isStartElement(\"CommunicationWindow\", true)) {\n-            while (reader.isStartElement(\"Item\", true)) {\n-                GXDateTime start = new GXDateTime(\n-                        reader.readElementContentAsString(\"Start\"));\n-                GXDateTime end = new GXDateTime(\n-                        reader.readElementContentAsString(\"End\"));\n-                communicationWindow.add(\n-                        new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n-            }\n-            reader.readEndElement(\"CommunicationWindow\");\n-        }\n-        randomisationStartInterval =\n-                reader.readElementContentAsInt(\"RandomisationStartInterval\");\n-        numberOfRetries = reader.readElementContentAsInt(\"NumberOfRetries\");\n-        repetitionDelay = reader.readElementContentAsInt(\"RepetitionDelay\");\n+                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(obj\n+                                ,co));\n     }\n-\n-    @Override\n-    public final void save(final GXXmlWriter writer) throws XMLStreamException {\n-        if (pushObjectList != null) {\n-            writer.writeStartElement(\"ObjectList\");\n-            for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n-                writer.writeStartElement(\"Item\");\n-                writer.writeElementString(\"ObjectType\",\n-                        it.getKey().getObjectType().getValue());\n-                writer.writeElementString(\"LN\", it.getKey().getLogicalName());\n-                writer.writeElementString(\"AI\",\n-                        it.getValue().getAttributeIndex());\n-                writer.writeElementString(\"DI\", it.getValue().getDataIndex());\n-                writer.writeEndElement();\n-            }\n+    reader.readEndElement(\"ObjectList\");\n+}\n+\n+service =\n+        ServiceType.forValue(reader.readElementContentAsInt(\"Service\"));\n+destination = reader.readElementContentAsString(\"Destination\");\n+message =\n+        MessageType.forValue(reader.readElementContentAsInt(\"Message\"));\n+communicationWindow.clear();\n+if (reader.isStartElement(\"CommunicationWindow\", true)) {\n+    while (reader.isStartElement(\"Item\", true)) {\n+        GXDateTime start = new GXDateTime(\n+                reader.readElementContentAsString(\"Start\"));\n+        GXDateTime end = new GXDateTime(\n+                reader.readElementContentAsString(\"End\"));\n+        communicationWindow.add(\n+                new GXSimpleEntry<GXDateTime, GXDateTime>(start, end));\n+    }\n+    reader.readEndElement(\"CommunicationWindow\");\n+}\n+randomisationStartInterval =\n+        reader.readElementContentAsInt(\"RandomisationStartInterval\");\n+numberOfRetries = reader.readElementContentAsInt(\"NumberOfRetries\");\n+repetitionDelay = reader.readElementContentAsInt(\"RepetitionDelay\");\n+}\n+\n+@Override\n+public final void save(final GXXmlWriter writer) throws XMLStreamException {\n+    if (pushObjectList != null) {\n+        writer.writeStartElement(\"ObjectList\");\n+        for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : pushObjectList) {\n+            writer.writeStartElement(\"Item\");\n+            writer.writeElementString(\"ObjectType\",\n+                    it.getKey().getObjectType().getValue());\n+            writer.writeElementString(\"LN\", it.getKey().getLogicalName());\n+            writer.writeElementString(\"AI\",\n+                    it.getValue().getAttributeIndex());\n+            writer.writeElementString(\"DI\", it.getValue().getDataIndex());\n             writer.writeEndElement();\n         }\n-        writer.writeElementString(\"Service\", service.getValue());\n-        writer.writeElementString(\"Destination\", destination);\n-        writer.writeElementString(\"Message\", message.getValue());\n-        if (communicationWindow != null) {\n-            writer.writeStartElement(\"CommunicationWindow\");\n-            for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n-                writer.writeStartElement(\"Item\");\n-                writer.writeElementString(\"Start\",\n-                        it.getKey().toFormatString());\n-                writer.writeElementString(\"End\",\n-                        it.getValue().toFormatString());\n-                writer.writeEndElement();\n-            }\n+        writer.writeEndElement();\n+    }\n+    writer.writeElementString(\"Service\", service.getValue());\n+    writer.writeElementString(\"Destination\", destination);\n+    writer.writeElementString(\"Message\", message.getValue());\n+    if (communicationWindow != null) {\n+        writer.writeStartElement(\"CommunicationWindow\");\n+        for (Entry<GXDateTime, GXDateTime> it : communicationWindow) {\n+            writer.writeStartElement(\"Item\");\n+            writer.writeElementString(\"Start\",\n+                    it.getKey().toFormatString());\n+            writer.writeElementString(\"End\",\n+                    it.getValue().toFormatString());\n             writer.writeEndElement();\n         }\n-        writer.writeElementString(\"RandomisationStartInterval\",\n-                randomisationStartInterval);\n-        writer.writeElementString(\"NumberOfRetries\", numberOfRetries);\n-        writer.writeElementString(\"RepetitionDelay\", repetitionDelay);\n-    }\n-\n-    @Override\n-    public final void postLoad(final GXXmlReader reader) {\n+        writer.writeEndElement();\n     }\n+    writer.writeElementString(\"RandomisationStartInterval\",\n+            randomisationStartInterval);\n+    writer.writeElementString(\"NumberOfRetries\", numberOfRetries);\n+    writer.writeElementString(\"RepetitionDelay\", repetitionDelay);\n+}\n+\n+@Override\n+public final void postLoad(final GXXmlReader reader) {\n+}\n }\n\\ No newline at end of file\n",
            "diff_size": 95
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_three_grams/14/GXDLMSPushSetup.java\nindex fa65f853d3..793587ed49 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/errored/1/14/GXDLMSPushSetup.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Gurux-gurux.dlms.java/styler_three_grams/14/GXDLMSPushSetup.java\n@@ -443,7 +443,7 @@ public class GXDLMSPushSetup extends GXDLMSObject implements IGXDLMSBase {\n                 GXDLMSCaptureObject co = new GXDLMSCaptureObject(ai, di);\n                 GXDLMSObject obj = reader.getObjects().findByLN(ot, ln);\n                 pushObjectList\n-                        .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n+                .add(new GXSimpleEntry<GXDLMSObject, GXDLMSCaptureObject>(\n                                 obj, co));\n             }\n             reader.readEndElement(\"ObjectList\");\n",
            "diff_size": 1
        }
    ]
}