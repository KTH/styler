{
    "error_id": "718",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/718/MultiErrorMetric.java\nindex 31a154f25c..94beb62e98 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/718/MultiErrorMetric.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.ml.algorithm.metric;\n \n import com.tencent.angel.ml.algorithm.utils.MathUtils;\n@@ -23,56 +24,56 @@ import com.tencent.angel.ml.algorithm.utils.MathUtils;\n \n public class MultiErrorMetric implements Metric {\n \n-  /**\n-   * return name of metric\n-   *\n-   * @return the name\n-   */\n-  @Override\n-  public String getName() {\n-    return \"multierror\";\n-  }\n+    /**\n+     * return name of metric\n+     *\n+     * @return the name\n+     */\n+    @Override\n+    public String getName() {\n+        return \"multierror\";\n+    }\n \n-  /**\n-   * evaluate a specific metric for instances\n-   *\n-   * @param preds the predictions\n-   * @param labels the labels\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float eval(float[] preds, float[] labels) {\n-    int insNum = labels.length;\n-    int classNum = preds.length / insNum;\n-    float err = 0.0f;\n-    for (int insIdx = 0; insIdx < insNum; insNum++) {\n-      float[] temp = new float[classNum];\n-      System.arraycopy(preds, insIdx * classNum, temp, 0, classNum);\n-      err += evalOne(temp, labels[insIdx]);\n+    /**\n+     * evaluate a specific metric for instances\n+     *\n+     * @param preds  the predictions\n+     * @param labels the labels\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float eval(float[] preds, float[] labels) {\n+        int insNum = labels.length;\n+        int classNum = preds.length / insNum;\n+        float err = 0.0f;\n+        for (int insIdx = 0; insIdx < insNum; insNum++) {\n+            float[] temp = new float[classNum];\n+            System.arraycopy(preds, insIdx * classNum, temp, 0, classNum);\n+            err += evalOne(temp, labels[insIdx]);\n+        }\n+        return err / labels.length;\n     }\n-    return err / labels.length;\n-  }\n \n-  /**\n-   * evaluate a specific metric for one instance\n-   *\n-   * @param pred the prediction\n-   * @param label the label\n-   * @return the eval metric\n-   */\n-  public float evalOne(float[] pred, float label) {\n-    return MathUtils.findMaxIndex(pred) != label ? 1.0f : 0f;\n-  }\n+    /**\n+     * evaluate a specific metric for one instance\n+     *\n+     * @param pred  the prediction\n+     * @param label the label\n+     * @return the eval metric\n+     */\n+    public float evalOne(float[] pred, float label) {\n+        return MathUtils.findMaxIndex(pred) != label ? 1.0f : 0f;\n+    }\n \n-  /**\n-   * evaluate a specific metric for one instance\n-   *\n-   * @param pred the prediction\n-   * @param label the label\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float evalOne(float pred, float label) {\n-    return 0f;\n-  }\n+    /**\n+     * evaluate a specific metric for one instance\n+     *\n+     * @param pred  the prediction\n+     * @param label the label\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float evalOne(float pred, float label) {\n+        return 0f;\n+    }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/718/MultiErrorMetric.java\nindex 31a154f25c..4013237bb5 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/718/MultiErrorMetric.java\n@@ -75,4 +75,4 @@ public class MultiErrorMetric implements Metric {\n   public float evalOne(float pred, float label) {\n     return 0f;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 33.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 46.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 67.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 79.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/718/MultiErrorMetric.java\nindex 31a154f25c..3fc7870e78 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/718/MultiErrorMetric.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/718/MultiErrorMetric.java\n@@ -28,10 +28,12 @@ public class MultiErrorMetric implements Metric {\n    *\n    * @return the name\n    */\n-  @Override\n-  public String getName() {\n+\n+\n+    @Override\n+    public String getName() {\n     return \"multierror\";\n-  }\n+    }\n \n   /**\n    * evaluate a specific metric for instances\n@@ -40,18 +42,19 @@ public class MultiErrorMetric implements Metric {\n    * @param labels the labels\n    * @return the eval metric\n    */\n-  @Override\n-  public float eval(float[] preds, float[] labels) {\n+\n+    @Override\n+    public float eval(float[] preds, float[] labels) {\n     int insNum = labels.length;\n     int classNum = preds.length / insNum;\n     float err = 0.0f;\n     for (int insIdx = 0; insIdx < insNum; insNum++) {\n-      float[] temp = new float[classNum];\n-      System.arraycopy(preds, insIdx * classNum, temp, 0, classNum);\n-      err += evalOne(temp, labels[insIdx]);\n+        float[] temp = new float[classNum];\n+        System.arraycopy(preds, insIdx * classNum, temp, 0, classNum);\n+        err += evalOne(temp, labels[insIdx]);\n     }\n     return err / labels.length;\n-  }\n+    }\n \n   /**\n    * evaluate a specific metric for one instance\n@@ -60,9 +63,10 @@ public class MultiErrorMetric implements Metric {\n    * @param label the label\n    * @return the eval metric\n    */\n-  public float evalOne(float[] pred, float label) {\n+\n+    public float evalOne(float[] pred, float label) {\n     return MathUtils.findMaxIndex(pred) != label ? 1.0f : 0f;\n-  }\n+    }\n \n   /**\n    * evaluate a specific metric for one instance\n@@ -71,8 +75,10 @@ public class MultiErrorMetric implements Metric {\n    * @param label the label\n    * @return the eval metric\n    */\n-  @Override\n-  public float evalOne(float pred, float label) {\n+\n+    @Override\n+    public float evalOne(float pred, float label) {\n     return 0f;\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}