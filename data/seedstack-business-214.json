{
    "error_id": "214",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.internal.assembler.dsl;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "'class def ident' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "171",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/214/ParameterHolder.java\nindex 7dcef3bacd..da7804a676 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler/214/ParameterHolder.java\n@@ -5,191 +5,192 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.assembler.dsl;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-import org.seedstack.business.assembler.AggregateId;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.shed.reflect.ReflectUtils;\n-\n-class ParameterHolder<D> {\n-    private final Class<D> dtoClass;\n-    private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n-\n-    // for DTO mapped to only one aggregate\n-    private Method aggregateGetter;\n-    private Method[] aggregateGetters;\n-\n-    // for DTO mapped to multiple aggregates\n-    private Method[] tupleGetter;\n-    private Method[][] tupleGetters;\n-\n-    ParameterHolder(Class<D> dtoClass) {\n-        this.dtoClass = dtoClass;\n-    }\n-\n-    void addValue(Class<? extends Annotation> annotation, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        internalAddParameter(annotation, -1, -1, getter);\n-    }\n-\n-    void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, -1, index, getter);\n-    }\n-\n-    void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, -1, getter);\n-    }\n-\n-    void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, index, getter);\n-    }\n-\n-    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n-        checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n-        if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n-                .putIfAbsent(index, getter) != null) {\n-            Method conflictingGetter = methodMap.get(aggregateIndex)\n-                    .get(index);\n-            BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n-            } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n-            }\n-            exception.put(\"index\", index)\n-                    .put(\"dtoClass\", dtoClass)\n-                    .put(\"annotation\", annotation)\n-                    .put(\"getter\", getter)\n-                    .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n-                throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n-                        .put(\"dtoClass\", dtoClass)\n-                        .put(\"aggregateIndex\", aggregateIndex);\n-            } else {\n-                throw exception;\n-            }\n-        }\n-    }\n-\n-    ParameterHolder<D> freeze() {\n-        if (methodMap.containsKey(-1)) {\n-            SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n-            if (aggregateGetters.containsKey(-1)) {\n-                this.aggregateGetter = aggregateGetters.get(-1);\n-            } else {\n-                this.aggregateGetters = aggregateGetters.values()\n-                        .toArray(new Method[aggregateGetters.size()]);\n-            }\n-        } else {\n-            tupleGetters = new Method[methodMap.size()][];\n-            this.tupleGetter = new Method[methodMap.size()];\n-            for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n-                int aggregateIndex = entry.getKey();\n-                SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n-                if (aggregateGetters.containsKey(-1)) {\n-                    this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n-                } else {\n-                    this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n-                            .toArray(new Method[aggregateGetters.size()]);\n-                }\n-            }\n-        }\n-        methodMap = null;\n-        return this;\n-    }\n-\n-    Object[] parameters(D dto) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-\n-        Object uniqueElement = uniqueElement(dto);\n-        if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n-        } else if (aggregateGetters != null) {\n-            Object[] values = new Object[aggregateGetters.length];\n-            for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n-                values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n-            }\n-            return values;\n-        } else {\n-            return new Object[0];\n-        }\n-    }\n-\n-    Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n-        if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n-        } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n-            Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n-                Object[] values = new Object[methods.length];\n-                for (int i = 0, length = methods.length; i < length; i++) {\n-                    values[i] = ReflectUtils.invoke(methods[i], dto);\n-                }\n-                return values;\n-            }\n-        }\n-        return new Object[0];\n-    }\n-\n-    <I> I uniqueElement(D dto) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-\n-        if (aggregateGetter != null) {\n-            return ReflectUtils.invoke(aggregateGetter, dto);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n-            Method method = tupleGetter[aggregateIndex];\n-            if (method != null) {\n-                return ReflectUtils.invoke(method, dto);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    boolean isEmpty() {\n-        return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n-                && isEmptyForAggregateRoot(0);\n-    }\n-\n-    private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n-                || tupleGetters[aggregateIndex].length == 0);\n-    }\n-}\n+\n+package org .seedstack.business.internal.assembler.dsl;import\n+static com.google.common.base.Preconditions.checkArgument;\n+ import static com.google.common.base.Preconditions.checkNotNull;\n+ import static com.google.common.base.Preconditions.checkState;\n+\n+ import java.lang.annotation.Annotation;\n+ import java.lang.reflect.Method;\n+ import java.util.HashMap;\n+ import java.util.Map;\n+ import java.util.SortedMap;\n+ import java.util.TreeMap;\n+ import org.seedstack.business.assembler.AggregateId;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.shed.reflect.ReflectUtils;\n+\n+ class ParameterHolder<D> {\n+     private final Class<D> dtoClass;\n+     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n+\n+     // for DTO mapped to only one aggregate\n+     private Method aggregateGetter;\n+     private Method[] aggregateGetters;\n+\n+     // for DTO mapped to multiple aggregates\n+     private Method[] tupleGetter;\n+     private Method[][] tupleGetters;\n+\n+     ParameterHolder(Class<D> dtoClass) {\n+         this.dtoClass = dtoClass;\n+     }\n+\n+     void addValue(Class<? extends Annotation> annotation, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         internalAddParameter(annotation, -1, -1, getter);\n+     }\n+\n+     void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, -1, index, getter);\n+     }\n+\n+     void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, aggregateIndex, -1, getter);\n+     }\n+\n+     void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, aggregateIndex, index, getter);\n+     }\n+\n+     private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n+             Method getter) {\n+         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n+         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n+                 .putIfAbsent(index, getter) != null) {\n+             Method conflictingGetter = methodMap.get(aggregateIndex)\n+                     .get(index);\n+             BusinessException exception;\n+             if (index > -1) {\n+                 exception = BusinessException.createNew(\n+                         annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n+                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n+             } else {\n+                 exception = BusinessException.createNew(\n+                         annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n+                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n+             }\n+             exception.put(\"index\", index)\n+                     .put(\"dtoClass\", dtoClass)\n+                     .put(\"annotation\", annotation)\n+                     .put(\"getter\", getter)\n+                     .put(\"conflictingGetter\", conflictingGetter);\n+             if (aggregateIndex > -1) {\n+                 throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n+                         .put(\"dtoClass\", dtoClass)\n+                         .put(\"aggregateIndex\", aggregateIndex);\n+             } else {\n+                 throw exception;\n+             }\n+         }\n+     }\n+\n+     ParameterHolder<D> freeze() {\n+         if (methodMap.containsKey(-1)) {\n+             SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n+             if (aggregateGetters.containsKey(-1)) {\n+                 this.aggregateGetter = aggregateGetters.get(-1);\n+             } else {\n+                 this.aggregateGetters = aggregateGetters.values()\n+                         .toArray(new Method[aggregateGetters.size()]);\n+             }\n+         } else {\n+             tupleGetters = new Method[methodMap.size()][];\n+             this.tupleGetter = new Method[methodMap.size()];\n+             for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n+                 int aggregateIndex = entry.getKey();\n+                 SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n+                 if (aggregateGetters.containsKey(-1)) {\n+                     this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n+                 } else {\n+                     this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n+                             .toArray(new Method[aggregateGetters.size()]);\n+                 }\n+             }\n+         }\n+         methodMap = null;\n+         return this;\n+     }\n+\n+     Object[] parameters(D dto) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+\n+         Object uniqueElement = uniqueElement(dto);\n+         if (uniqueElement != null) {\n+             return new Object[]{uniqueElement};\n+         } else if (aggregateGetters != null) {\n+             Object[] values = new Object[aggregateGetters.length];\n+             for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n+                 values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n+             }\n+             return values;\n+         } else {\n+             return new Object[0];\n+         }\n+     }\n+\n+     Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+\n+         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n+         if (uniqueElementForAggregate != null) {\n+             return new Object[]{uniqueElementForAggregate};\n+         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n+             Method[] methods = tupleGetters[aggregateIndex];\n+             if (methods != null && methods.length > 0) {\n+                 Object[] values = new Object[methods.length];\n+                 for (int i = 0, length = methods.length; i < length; i++) {\n+                     values[i] = ReflectUtils.invoke(methods[i], dto);\n+                 }\n+                 return values;\n+             }\n+         }\n+         return new Object[0];\n+     }\n+\n+     <I> I uniqueElement(D dto) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+\n+         if (aggregateGetter != null) {\n+             return ReflectUtils.invoke(aggregateGetter, dto);\n+         } else {\n+             return null;\n+         }\n+     }\n+\n+     <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+\n+         if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n+             Method method = tupleGetter[aggregateIndex];\n+             if (method != null) {\n+                 return ReflectUtils.invoke(method, dto);\n+             }\n+         }\n+         return null;\n+     }\n+\n+     boolean isEmpty() {\n+         return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n+                 && isEmptyForAggregateRoot(0);\n+     }\n+\n+     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n+                 || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n+                 || tupleGetters[aggregateIndex].length == 0);\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 189
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/214/ParameterHolder.java\nindex 7dcef3bacd..464cd01cc8 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/intellij/214/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n@@ -63,7 +64,7 @@ class ParameterHolder<D> {\n     }\n \n     private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n+                                      Method getter) {\n         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n                 .putIfAbsent(index, getter) != null) {\n@@ -126,7 +127,7 @@ class ParameterHolder<D> {\n \n         Object uniqueElement = uniqueElement(dto);\n         if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n+            return new Object[] {uniqueElement};\n         } else if (aggregateGetters != null) {\n             Object[] values = new Object[aggregateGetters.length];\n             for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n@@ -144,7 +145,7 @@ class ParameterHolder<D> {\n \n         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n         if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n+            return new Object[] {uniqueElementForAggregate};\n         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n             Method[] methods = tupleGetters[aggregateIndex];\n             if (methods != null && methods.length > 0) {\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "column": "22",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "column": "19",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "149",
                    "column": "50",
                    "severity": "warning",
                    "message": "WhitespaceAround: '>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "column": "117",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/214/ParameterHolder.java\nindex 7dcef3bacd..3c86758cfa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/naturalize/214/ParameterHolder.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n@@ -23,6 +24,7 @@ import org.seedstack.business.internal.BusinessException;\n import org.seedstack.shed.reflect.ReflectUtils;\n \n class ParameterHolder<D> {\n+\n     private final Class<D> dtoClass;\n     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n \n@@ -62,21 +64,18 @@ class ParameterHolder<D> {\n         internalAddParameter(annotation, aggregateIndex, index, getter);\n     }\n \n-    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n-        checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n+    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n+    checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n                 .putIfAbsent(index, getter) != null) {\n-            Method conflictingGetter = methodMap.get(aggregateIndex)\n+    Method conflictingGetter = methodMap.get(aggregateIndex)\n                     .get(index);\n             BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n+            if (index> -1) {\n+                exception = BusinessException.createNew(annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n-            } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n+    } else {\n+                exception = BusinessException.createNew(annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n             }\n             exception.put(\"index\", index)\n@@ -84,7 +83,7 @@ class ParameterHolder<D> {\n                     .put(\"annotation\", annotation)\n                     .put(\"getter\", getter)\n                     .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n+if (aggregateIndex> -1) {\n                 throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n                         .put(\"dtoClass\", dtoClass)\n                         .put(\"aggregateIndex\", aggregateIndex);\n@@ -147,7 +146,7 @@ class ParameterHolder<D> {\n             return new Object[]{uniqueElementForAggregate};\n         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n             Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n+            if (methods != null && methods.length> 0) {\n                 Object[] values = new Object[methods.length];\n                 for (int i = 0, length = methods.length; i < length; i++) {\n                     values[i] = ReflectUtils.invoke(methods[i], dto);\n@@ -160,8 +159,7 @@ class ParameterHolder<D> {\n \n     <I> I uniqueElement(D dto) {\n         checkNotNull(dto, \"DTO cannot be null\");\n-\n-        if (aggregateGetter != null) {\n+if (aggregateGetter != null) {\n             return ReflectUtils.invoke(aggregateGetter, dto);\n         } else {\n             return null;\n@@ -171,8 +169,7 @@ class ParameterHolder<D> {\n     <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n         checkNotNull(dto, \"DTO cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n+if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n             Method method = tupleGetter[aggregateIndex];\n             if (method != null) {\n                 return ReflectUtils.invoke(method, dto);\n@@ -188,8 +185,7 @@ class ParameterHolder<D> {\n \n     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n+        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0|| aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n                 || tupleGetters[aggregateIndex].length == 0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "column": "56",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "column": "102",
                    "severity": "warning",
                    "message": "WhitespaceAround: '!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "141",
                    "severity": "warning",
                    "message": "WhitespaceAround: ':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "135",
                    "severity": "warning",
                    "message": "WhitespaceAround: ':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "93",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'array initialization' child has incorrect indentation level 23, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "column": "20",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "132",
                    "column": "70",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'array initialization' child has incorrect indentation level 23, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "column": "59",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "column": "24",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'for' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "65",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 27, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "column": "51",
                    "severity": "warning",
                    "message": "WhitespaceAround: '<' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "column": "39",
                    "severity": "warning",
                    "message": "WhitespaceAround: '&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "189",
                    "column": "67",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "36",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "88",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "115",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "155",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "194",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/214/ParameterHolder.java\nindex 7dcef3bacd..29e60833ad 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/codebuff/214/ParameterHolder.java\n@@ -8,9 +8,10 @@\n package org.seedstack.business.internal.assembler.dsl;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+\n import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n \n+import static com.google.common.base.Preconditions.checkState;\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.util.HashMap;\n@@ -22,7 +23,9 @@ import org.seedstack.business.internal.BusinessErrorCode;\n import org.seedstack.business.internal.BusinessException;\n import org.seedstack.shed.reflect.ReflectUtils;\n \n+\n class ParameterHolder<D> {\n+\n     private final Class<D> dtoClass;\n     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n \n@@ -34,27 +37,31 @@ class ParameterHolder<D> {\n     private Method[] tupleGetter;\n     private Method[][] tupleGetters;\n \n+\n     ParameterHolder(Class<D> dtoClass) {\n         this.dtoClass = dtoClass;\n     }\n \n     void addValue(Class<? extends Annotation> annotation, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n-        internalAddParameter(annotation, -1, -1, getter);\n+        internalAddParameter(annotation, - 1, - 1, getter);\n     }\n \n+\n     void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, -1, index, getter);\n+        internalAddParameter(annotation, - 1, index, getter);\n     }\n \n+\n     void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, -1, getter);\n+        internalAddParameter(annotation, aggregateIndex, - 1, getter);\n     }\n \n+\n     void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n         checkNotNull(getter, \"Getter cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n@@ -62,58 +69,50 @@ class ParameterHolder<D> {\n         internalAddParameter(annotation, aggregateIndex, index, getter);\n     }\n \n-    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n+\n+    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n-        if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n-                .putIfAbsent(index, getter) != null) {\n-            Method conflictingGetter = methodMap.get(aggregateIndex)\n-                    .get(index);\n+        if (methodMap.computeIfAbsent(aggregateIndex, k-> new TreeMap<>()).putIfAbsent(index, getter)!= null) {\n+            Method conflictingGetter = methodMap.get(aggregateIndex).get(index);\n+\n             BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n+            if (index > - 1) {\n+                exception = BusinessException.createNew(annotation == AggregateId.class? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING: BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n             } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n+                exception = BusinessException.createNew(annotation == AggregateId.class? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING: BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n             }\n-            exception.put(\"index\", index)\n-                    .put(\"dtoClass\", dtoClass)\n-                    .put(\"annotation\", annotation)\n-                    .put(\"getter\", getter)\n-                    .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n-                throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n-                        .put(\"dtoClass\", dtoClass)\n-                        .put(\"aggregateIndex\", aggregateIndex);\n+            exception.put(\"index\", index).put(\"dtoClass\", dtoClass)\n+                .put(\"annotation\", annotation)\n+                    .put(\"getter\", getter).put(\"conflictingGetter\", conflictingGetter);\n+            if (aggregateIndex > - 1) {\n+                throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING).put(\"dtoClass\", dtoClass)\n+.put(\"aggregateIndex\", aggregateIndex);\n             } else {\n                 throw exception;\n             }\n         }\n     }\n \n+\n     ParameterHolder<D> freeze() {\n-        if (methodMap.containsKey(-1)) {\n-            SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n-            if (aggregateGetters.containsKey(-1)) {\n-                this.aggregateGetter = aggregateGetters.get(-1);\n+        if (methodMap.containsKey(- 1)) {\n+            SortedMap<Integer, Method> aggregateGetters = methodMap.get(- 1);\n+            if (aggregateGetters.containsKey(- 1)) {\n+                this.aggregateGetter = aggregateGetters.get(- 1);\n             } else {\n-                this.aggregateGetters = aggregateGetters.values()\n-                        .toArray(new Method[aggregateGetters.size()]);\n+                this.aggregateGetters = aggregateGetters.values().toArray(new Method [ aggregateGetters.size()]);\n             }\n         } else {\n-            tupleGetters = new Method[methodMap.size()][];\n-            this.tupleGetter = new Method[methodMap.size()];\n-            for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n+            tupleGetters = new Method [ methodMap.size()] [];\n+            this.tupleGetter = new Method [ methodMap.size()];\n+            for(Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet() ) {\n                 int aggregateIndex = entry.getKey();\n+\n                 SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n-                if (aggregateGetters.containsKey(-1)) {\n-                    this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n+                if (aggregateGetters.containsKey(- 1)) {\n+                    this.tupleGetter[ aggregateIndex] = aggregateGetters.get(- 1);\n                 } else {\n-                    this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n-                            .toArray(new Method[aggregateGetters.size()]);\n+                    this.tupleGetters[ aggregateIndex] = aggregateGetters.values().toArray(new Method [ aggregateGetters.size()]);\n                 }\n             }\n         }\n@@ -121,46 +120,50 @@ class ParameterHolder<D> {\n         return this;\n     }\n \n+\n     Object[] parameters(D dto) {\n         checkNotNull(dto, \"DTO cannot be null\");\n-\n         Object uniqueElement = uniqueElement(dto);\n         if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n-        } else if (aggregateGetters != null) {\n-            Object[] values = new Object[aggregateGetters.length];\n-            for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n-                values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n-            }\n-            return values;\n-        } else {\n-            return new Object[0];\n-        }\n+            return new Object [] {\n+                       uniqueElement};\n+        } else if(aggregateGetters != null) {\n+                   Object[] values = new Object [ aggregateGetters.length];\n+                   for(int i = 0, length = aggregateGetters.length;i <length;\n+i++) {\n+                       values[ i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n+                   }\n+                   return values;\n+               } else {\n+                   return new Object [0];\n+               }\n     }\n \n+\n     Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n         checkNotNull(dto, \"DTO cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n         if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n-        } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n-            Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n-                Object[] values = new Object[methods.length];\n-                for (int i = 0, length = methods.length; i < length; i++) {\n-                    values[i] = ReflectUtils.invoke(methods[i], dto);\n-                }\n-                return values;\n-            }\n-        }\n-        return new Object[0];\n+            return new Object [] {\n+                       uniqueElementForAggregate};\n+        } else if (tupleGetters != null && aggregateIndex <tupleGetters.length) {\n+                   Method[] methods = tupleGetters[aggregateIndex];\n+                   if (methods != null && methods.length > 0) {\n+                       Object[] values = new Object [ methods.length];\n+                       for(int i = 0, length = methods.length;i <length;\n+i++) {\n+                           values[ i] = ReflectUtils.invoke(methods[i], dto);\n+                       }\n+                       return values;\n+                   }\n+               }\n+        return new Object [0];\n     }\n \n+\n     <I> I uniqueElement(D dto) {\n         checkNotNull(dto, \"DTO cannot be null\");\n-\n         if (aggregateGetter != null) {\n             return ReflectUtils.invoke(aggregateGetter, dto);\n         } else {\n@@ -168,11 +171,11 @@ class ParameterHolder<D> {\n         }\n     }\n \n+\n     <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n         checkNotNull(dto, \"DTO cannot be null\");\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n+        if (tupleGetter != null && aggregateIndex <tupleGetter.length) {\n             Method method = tupleGetter[aggregateIndex];\n             if (method != null) {\n                 return ReflectUtils.invoke(method, dto);\n@@ -181,15 +184,15 @@ class ParameterHolder<D> {\n         return null;\n     }\n \n+\n     boolean isEmpty() {\n-        return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n-                && isEmptyForAggregateRoot(0);\n+        return aggregateGetter == null&& (aggregateGetters == null|| aggregateGetters.length == 0) && isEmptyForAggregateRoot(0);\n     }\n \n+\n     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n-                || tupleGetters[aggregateIndex].length == 0);\n+        return (tupleGetter == null|| tupleGetter.length == 0) && (tupleGetters == null|| tupleGetters.length == 0|| aggregateIndex >= tupleGetters.length|| tupleGetters[aggregateIndex] == null|| tupleGetters[aggregateIndex]\n+            .length == 0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 92
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "9",
                    "severity": "warning",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "9",
                    "column": "13",
                    "severity": "warning",
                    "message": "'.' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "18",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "22",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "23",
                    "severity": "warning",
                    "message": "'import' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "'class def ident' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 21, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "171",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/214/ParameterHolder.java\nindex 7dcef3bacd..da7804a676 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/errored/1/214/ParameterHolder.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/seedstack-business/styler_random/214/ParameterHolder.java\n@@ -5,191 +5,192 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n-package org.seedstack.business.internal.assembler.dsl;\n-\n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-\n-import java.lang.annotation.Annotation;\n-import java.lang.reflect.Method;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.SortedMap;\n-import java.util.TreeMap;\n-import org.seedstack.business.assembler.AggregateId;\n-import org.seedstack.business.internal.BusinessErrorCode;\n-import org.seedstack.business.internal.BusinessException;\n-import org.seedstack.shed.reflect.ReflectUtils;\n-\n-class ParameterHolder<D> {\n-    private final Class<D> dtoClass;\n-    private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n-\n-    // for DTO mapped to only one aggregate\n-    private Method aggregateGetter;\n-    private Method[] aggregateGetters;\n-\n-    // for DTO mapped to multiple aggregates\n-    private Method[] tupleGetter;\n-    private Method[][] tupleGetters;\n-\n-    ParameterHolder(Class<D> dtoClass) {\n-        this.dtoClass = dtoClass;\n-    }\n-\n-    void addValue(Class<? extends Annotation> annotation, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        internalAddParameter(annotation, -1, -1, getter);\n-    }\n-\n-    void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, -1, index, getter);\n-    }\n-\n-    void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, -1, getter);\n-    }\n-\n-    void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n-        checkNotNull(getter, \"Getter cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n-        internalAddParameter(annotation, aggregateIndex, index, getter);\n-    }\n-\n-    private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n-            Method getter) {\n-        checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n-        if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n-                .putIfAbsent(index, getter) != null) {\n-            Method conflictingGetter = methodMap.get(aggregateIndex)\n-                    .get(index);\n-            BusinessException exception;\n-            if (index > -1) {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n-            } else {\n-                exception = BusinessException.createNew(\n-                        annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n-                                BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n-            }\n-            exception.put(\"index\", index)\n-                    .put(\"dtoClass\", dtoClass)\n-                    .put(\"annotation\", annotation)\n-                    .put(\"getter\", getter)\n-                    .put(\"conflictingGetter\", conflictingGetter);\n-            if (aggregateIndex > -1) {\n-                throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n-                        .put(\"dtoClass\", dtoClass)\n-                        .put(\"aggregateIndex\", aggregateIndex);\n-            } else {\n-                throw exception;\n-            }\n-        }\n-    }\n-\n-    ParameterHolder<D> freeze() {\n-        if (methodMap.containsKey(-1)) {\n-            SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n-            if (aggregateGetters.containsKey(-1)) {\n-                this.aggregateGetter = aggregateGetters.get(-1);\n-            } else {\n-                this.aggregateGetters = aggregateGetters.values()\n-                        .toArray(new Method[aggregateGetters.size()]);\n-            }\n-        } else {\n-            tupleGetters = new Method[methodMap.size()][];\n-            this.tupleGetter = new Method[methodMap.size()];\n-            for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n-                int aggregateIndex = entry.getKey();\n-                SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n-                if (aggregateGetters.containsKey(-1)) {\n-                    this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n-                } else {\n-                    this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n-                            .toArray(new Method[aggregateGetters.size()]);\n-                }\n-            }\n-        }\n-        methodMap = null;\n-        return this;\n-    }\n-\n-    Object[] parameters(D dto) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-\n-        Object uniqueElement = uniqueElement(dto);\n-        if (uniqueElement != null) {\n-            return new Object[]{uniqueElement};\n-        } else if (aggregateGetters != null) {\n-            Object[] values = new Object[aggregateGetters.length];\n-            for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n-                values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n-            }\n-            return values;\n-        } else {\n-            return new Object[0];\n-        }\n-    }\n-\n-    Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n-        if (uniqueElementForAggregate != null) {\n-            return new Object[]{uniqueElementForAggregate};\n-        } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n-            Method[] methods = tupleGetters[aggregateIndex];\n-            if (methods != null && methods.length > 0) {\n-                Object[] values = new Object[methods.length];\n-                for (int i = 0, length = methods.length; i < length; i++) {\n-                    values[i] = ReflectUtils.invoke(methods[i], dto);\n-                }\n-                return values;\n-            }\n-        }\n-        return new Object[0];\n-    }\n-\n-    <I> I uniqueElement(D dto) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-\n-        if (aggregateGetter != null) {\n-            return ReflectUtils.invoke(aggregateGetter, dto);\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n-        checkNotNull(dto, \"DTO cannot be null\");\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-\n-        if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n-            Method method = tupleGetter[aggregateIndex];\n-            if (method != null) {\n-                return ReflectUtils.invoke(method, dto);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    boolean isEmpty() {\n-        return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n-                && isEmptyForAggregateRoot(0);\n-    }\n-\n-    private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n-        checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n-        return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n-                || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n-                || tupleGetters[aggregateIndex].length == 0);\n-    }\n-}\n+\n+package org .seedstack.business.internal.assembler.dsl;import\n+static com.google.common.base.Preconditions.checkArgument;\n+ import static com.google.common.base.Preconditions.checkNotNull;\n+ import static com.google.common.base.Preconditions.checkState;\n+\n+ import java.lang.annotation.Annotation;\n+ import java.lang.reflect.Method;\n+ import java.util.HashMap;\n+ import java.util.Map;\n+ import java.util.SortedMap;\n+ import java.util.TreeMap;\n+ import org.seedstack.business.assembler.AggregateId;\n+ import org.seedstack.business.internal.BusinessErrorCode;\n+ import org.seedstack.business.internal.BusinessException;\n+ import org.seedstack.shed.reflect.ReflectUtils;\n+\n+ class ParameterHolder<D> {\n+     private final Class<D> dtoClass;\n+     private Map<Integer, SortedMap<Integer, Method>> methodMap = new HashMap<>();\n+\n+     // for DTO mapped to only one aggregate\n+     private Method aggregateGetter;\n+     private Method[] aggregateGetters;\n+\n+     // for DTO mapped to multiple aggregates\n+     private Method[] tupleGetter;\n+     private Method[][] tupleGetters;\n+\n+     ParameterHolder(Class<D> dtoClass) {\n+         this.dtoClass = dtoClass;\n+     }\n+\n+     void addValue(Class<? extends Annotation> annotation, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         internalAddParameter(annotation, -1, -1, getter);\n+     }\n+\n+     void addParameter(Class<? extends Annotation> annotation, int index, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, -1, index, getter);\n+     }\n+\n+     void addTupleValue(Class<? extends Annotation> annotation, int aggregateIndex, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, aggregateIndex, -1, getter);\n+     }\n+\n+     void addTupleParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index, Method getter) {\n+         checkNotNull(getter, \"Getter cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         checkArgument(index >= 0, \"Parameter index must be greater than or equal to zero\");\n+         internalAddParameter(annotation, aggregateIndex, index, getter);\n+     }\n+\n+     private void internalAddParameter(Class<? extends Annotation> annotation, int aggregateIndex, int index,\n+             Method getter) {\n+         checkState(methodMap != null, \"Cannot add parameter after having called freeze()\");\n+         if (methodMap.computeIfAbsent(aggregateIndex, k -> new TreeMap<>())\n+                 .putIfAbsent(index, getter) != null) {\n+             Method conflictingGetter = methodMap.get(aggregateIndex)\n+                     .get(index);\n+             BusinessException exception;\n+             if (index > -1) {\n+                 exception = BusinessException.createNew(\n+                         annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_INDEX_MATCHING :\n+                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_INDEX_MATCHING);\n+             } else {\n+                 exception = BusinessException.createNew(\n+                         annotation == AggregateId.class ? BusinessErrorCode.CONFLICTING_DTO_ID_MATCHING :\n+                                 BusinessErrorCode.CONFLICTING_DTO_FACTORY_MATCHING);\n+             }\n+             exception.put(\"index\", index)\n+                     .put(\"dtoClass\", dtoClass)\n+                     .put(\"annotation\", annotation)\n+                     .put(\"getter\", getter)\n+                     .put(\"conflictingGetter\", conflictingGetter);\n+             if (aggregateIndex > -1) {\n+                 throw BusinessException.wrap(exception, BusinessErrorCode.CONFLICTING_DTO_TUPLE_MATCHING)\n+                         .put(\"dtoClass\", dtoClass)\n+                         .put(\"aggregateIndex\", aggregateIndex);\n+             } else {\n+                 throw exception;\n+             }\n+         }\n+     }\n+\n+     ParameterHolder<D> freeze() {\n+         if (methodMap.containsKey(-1)) {\n+             SortedMap<Integer, Method> aggregateGetters = methodMap.get(-1);\n+             if (aggregateGetters.containsKey(-1)) {\n+                 this.aggregateGetter = aggregateGetters.get(-1);\n+             } else {\n+                 this.aggregateGetters = aggregateGetters.values()\n+                         .toArray(new Method[aggregateGetters.size()]);\n+             }\n+         } else {\n+             tupleGetters = new Method[methodMap.size()][];\n+             this.tupleGetter = new Method[methodMap.size()];\n+             for (Map.Entry<Integer, SortedMap<Integer, Method>> entry : methodMap.entrySet()) {\n+                 int aggregateIndex = entry.getKey();\n+                 SortedMap<Integer, Method> aggregateGetters = entry.getValue();\n+                 if (aggregateGetters.containsKey(-1)) {\n+                     this.tupleGetter[aggregateIndex] = aggregateGetters.get(-1);\n+                 } else {\n+                     this.tupleGetters[aggregateIndex] = aggregateGetters.values()\n+                             .toArray(new Method[aggregateGetters.size()]);\n+                 }\n+             }\n+         }\n+         methodMap = null;\n+         return this;\n+     }\n+\n+     Object[] parameters(D dto) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+\n+         Object uniqueElement = uniqueElement(dto);\n+         if (uniqueElement != null) {\n+             return new Object[]{uniqueElement};\n+         } else if (aggregateGetters != null) {\n+             Object[] values = new Object[aggregateGetters.length];\n+             for (int i = 0, length = aggregateGetters.length; i < length; i++) {\n+                 values[i] = ReflectUtils.invoke(aggregateGetters[i], dto);\n+             }\n+             return values;\n+         } else {\n+             return new Object[0];\n+         }\n+     }\n+\n+     Object[] parametersOfAggregateRoot(D dto, int aggregateIndex) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+\n+         Object uniqueElementForAggregate = uniqueElementForAggregate(dto, aggregateIndex);\n+         if (uniqueElementForAggregate != null) {\n+             return new Object[]{uniqueElementForAggregate};\n+         } else if (tupleGetters != null && aggregateIndex < tupleGetters.length) {\n+             Method[] methods = tupleGetters[aggregateIndex];\n+             if (methods != null && methods.length > 0) {\n+                 Object[] values = new Object[methods.length];\n+                 for (int i = 0, length = methods.length; i < length; i++) {\n+                     values[i] = ReflectUtils.invoke(methods[i], dto);\n+                 }\n+                 return values;\n+             }\n+         }\n+         return new Object[0];\n+     }\n+\n+     <I> I uniqueElement(D dto) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+\n+         if (aggregateGetter != null) {\n+             return ReflectUtils.invoke(aggregateGetter, dto);\n+         } else {\n+             return null;\n+         }\n+     }\n+\n+     <I> I uniqueElementForAggregate(D dto, int aggregateIndex) {\n+         checkNotNull(dto, \"DTO cannot be null\");\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+\n+         if (tupleGetter != null && aggregateIndex < tupleGetter.length) {\n+             Method method = tupleGetter[aggregateIndex];\n+             if (method != null) {\n+                 return ReflectUtils.invoke(method, dto);\n+             }\n+         }\n+         return null;\n+     }\n+\n+     boolean isEmpty() {\n+         return aggregateGetter == null && (aggregateGetters == null || aggregateGetters.length == 0)\n+                 && isEmptyForAggregateRoot(0);\n+     }\n+\n+     private boolean isEmptyForAggregateRoot(int aggregateIndex) {\n+         checkArgument(aggregateIndex >= 0, \"Aggregate index must be greater than or equal to zero\");\n+         return (tupleGetter == null || tupleGetter.length == 0) && (tupleGetters == null || tupleGetters.length == 0\n+                 || aggregateIndex >= tupleGetters.length || tupleGetters[aggregateIndex] == null\n+                 || tupleGetters[aggregateIndex].length == 0);\n+     }\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 189
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}