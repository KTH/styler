{
    "error_id": "84",
    "information": {
        "errors": [
            {
                "line": "99",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n        assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n        assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n        assertEquals(\"Some meta stuff user and system\", logCaptor.getAllValues().get(1).getRenderedMessage());\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler/84/LogRedactionTest.java\nindex 403a67ba7e..c7123ec15a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler/84/LogRedactionTest.java\n@@ -96,6 +96,7 @@ public class LogRedactionTest {\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n \n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n+\n         assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n         assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n         assertEquals(\"Some meta stuff user and system\", logCaptor.getAllValues().get(1).getRenderedMessage());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/84/LogRedactionTest.java\nindex 403a67ba7e..4d351fe4fb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/intellij/84/LogRedactionTest.java\n@@ -96,7 +96,8 @@ public class LogRedactionTest {\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n \n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n-        assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n+        assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\",\n+            logCaptor.getAllValues().get(0).getRenderedMessage());\n         assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n         assertEquals(\"Some meta stuff user and system\", logCaptor.getAllValues().get(1).getRenderedMessage());\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/84/LogRedactionTest.java\nindex 403a67ba7e..fb08c4b4f2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/naturalize/84/LogRedactionTest.java\n@@ -113,4 +113,4 @@ public class LogRedactionTest {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/84/LogRedactionTest.java\nindex 403a67ba7e..7bde0620cd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/codebuff/84/LogRedactionTest.java\n@@ -26,12 +26,16 @@ import org.mockito.ArgumentCaptor;\n import org.mockito.Captor;\n import org.mockito.Mock;\n import org.mockito.runners.MockitoJUnitRunner;\n-\n import static com.couchbase.client.core.logging.RedactableArgument.meta;\n+\n import static com.couchbase.client.core.logging.RedactableArgument.system;\n+\n import static com.couchbase.client.core.logging.RedactableArgument.user;\n+\n import static org.junit.Assert.assertEquals;\n+\n import static org.mockito.Mockito.times;\n+\n import static org.mockito.Mockito.verify;\n \n /**\n@@ -40,22 +44,19 @@ import static org.mockito.Mockito.verify;\n  * @author Michael Nitschinger\n  * @since 1.5.3\n  */\n+\n+\n @RunWith(MockitoJUnitRunner.class)\n public class LogRedactionTest {\n+    @Mock AppenderSkeleton appender;\n \n-    @Mock\n-    AppenderSkeleton appender;\n-\n-    @Captor\n-    ArgumentCaptor<LoggingEvent> logCaptor;\n+    @Captor ArgumentCaptor<LoggingEvent> logCaptor;\n \n     @Test\n     public void shouldNotRedactLogsWhenDisabled() {\n         Logger.getRootLogger().addAppender(appender);\n         Log4JLogger logger = new Log4JLogger(Logger.getRootLogger(), RedactionLevel.NONE);\n-\n         logger.info(\"Some {} stuff {} and {}\", meta(null), user(1), system(\"system\"));\n-\n         verify(appender).doAppend(logCaptor.capture());\n         assertEquals(\"Some null stuff 1 and system\", logCaptor.getValue().getRenderedMessage());\n     }\n@@ -64,9 +65,7 @@ public class LogRedactionTest {\n     public void shouldOnlySendOnceIfNotRedactableArg() {\n         Logger.getRootLogger().addAppender(appender);\n         Log4JLogger logger = new Log4JLogger(Logger.getRootLogger(), RedactionLevel.FULL);\n-\n         logger.info(\"Some {} stuff {} and {}\", \"other\", \"text\", 123);\n-\n         verify(appender).doAppend(logCaptor.capture());\n         assertEquals(\"Some other stuff text and 123\", logCaptor.getValue().getRenderedMessage());\n     }\n@@ -75,11 +74,8 @@ public class LogRedactionTest {\n     public void shouldOnlyRedactUserOnPartial() {\n         Logger.getRootLogger().addAppender(appender);\n         Log4JLogger logger = new Log4JLogger(Logger.getRootLogger(), RedactionLevel.PARTIAL);\n-\n         logger.info(\"Some {} stuff {} and {}\", meta(\"meta\"), user(\"user\"), system(\"system\"));\n-\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n-\n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n         assertEquals(\"Some meta stuff -REDACTED- and system\", logCaptor.getAllValues().get(0).getRenderedMessage());\n         assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n@@ -90,11 +86,8 @@ public class LogRedactionTest {\n     public void shouldRedactEverythingOnFull() {\n         Logger.getRootLogger().addAppender(appender);\n         Log4JLogger logger = new Log4JLogger(Logger.getRootLogger(), RedactionLevel.FULL);\n-\n         logger.info(\"Some {} stuff {} and {}\", meta(\"meta\"), user(\"user\"), system(\"system\"));\n-\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n-\n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n         assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n         assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n@@ -105,12 +98,8 @@ public class LogRedactionTest {\n     public void shouldForwardMessageOnDebug() {\n         Logger.getRootLogger().addAppender(appender);\n         Log4JLogger logger = new Log4JLogger(Logger.getRootLogger(), RedactionLevel.FULL);\n-\n         logger.debug(\"Some {} stuff {} and {}\", meta(\"meta\"), user(\"user\"), system(123));\n-\n         verify(appender).doAppend(logCaptor.capture());\n         assertEquals(\"Some meta stuff user and 123\", logCaptor.getValue().getRenderedMessage());\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "196",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/84/LogRedactionTest.java\nindex 403a67ba7e..8ed0a62e77 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_random/84/LogRedactionTest.java\n@@ -96,8 +96,7 @@ public class LogRedactionTest {\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n \n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n-        assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n-        assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n+        assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\",logCaptor.getAllValues().get( 0).getRenderedMessage());assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n         assertEquals(\"Some meta stuff user and system\", logCaptor.getAllValues().get(1).getRenderedMessage());\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_three_grams/84/LogRedactionTest.java\nindex 403a67ba7e..c7123ec15a 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/errored/1/84/LogRedactionTest.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/couchbase-couchbase-jvm-core/styler_three_grams/84/LogRedactionTest.java\n@@ -96,6 +96,7 @@ public class LogRedactionTest {\n         verify(appender, times(2)).doAppend(logCaptor.capture());\n \n         assertEquals(Level.INFO, logCaptor.getAllValues().get(0).getLevel());\n+\n         assertEquals(\"Some -REDACTED- stuff -REDACTED- and -REDACTED-\", logCaptor.getAllValues().get(0).getRenderedMessage());\n         assertEquals(Level.DEBUG, logCaptor.getAllValues().get(1).getLevel());\n         assertEquals(\"Some meta stuff user and system\", logCaptor.getAllValues().get(1).getRenderedMessage());\n",
            "diff_size": 1
        }
    ]
}