{
    "error_id": "343",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.el;\n\nimport static java.util.Collections.emptyMap;\nimport static java.util.Collections.emptySet;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/343/NoExecutionVariableScope.java\nindex 1581aabf52..722f2b5204 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/343/NoExecutionVariableScope.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/343/NoExecutionVariableScope.java\nindex 1581aabf52..078a524e09 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/343/NoExecutionVariableScope.java\n@@ -30,252 +30,251 @@ import org.activiti.engine.impl.persistence.entity.VariableInstance;\n /**\n  * Variable-scope only used to resolve variables when NO execution is active but expression-resolving is needed. This occurs eg. when start-form properties have default's defined. Even though\n  * variables are not available yet, expressions should be resolved anyway.\n- *\n  */\n public class NoExecutionVariableScope implements VariableScope {\n \n-  private static final NoExecutionVariableScope INSTANCE = new NoExecutionVariableScope();\n-\n-  /**\n-   * Since a {@link NoExecutionVariableScope} has no state, it's safe to use the same instance to prevent too many useless instances created.\n-   */\n-  public static NoExecutionVariableScope getSharedInstance() {\n-    return INSTANCE;\n-  }\n-\n-  public Map<String, Object> getVariables() {\n-    return emptyMap();\n-  }\n-\n-  public Map<String, Object> getVariablesLocal() {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariables(Collection<String> variableNames) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariables(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariablesLocal(Collection<String> variableNames) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return emptyMap();\n-  }\n-\n-  public Object getVariable(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Object getVariable(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  public Object getVariableLocal(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Object getVariableLocal(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public <T> T getVariable(String variableName, Class<T> variableClass) {\n-    return null;\n-  }\n-\n-  @Override\n-  public <T> T getVariableLocal(String variableName, Class<T> variableClass) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances() {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal() {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstance(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstanceLocal(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  public Set<String> getVariableNames() {\n-    return emptySet();\n-  }\n-\n-  public Set<String> getVariableNamesLocal() {\n-    return null;\n-  }\n-\n-  public void setVariable(String variableName, Object value) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  @Override\n-  public void setVariable(String variableName, Object value, boolean fetchAllVariables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public Object setVariableLocal(String variableName, Object value) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  @Override\n-  public Object setVariableLocal(String variableName, Object value, boolean fetchAllVariables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public void setVariables(Map<String, ? extends Object> variables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public void setVariablesLocal(Map<String, ? extends Object> variables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public boolean hasVariables() {\n-    return false;\n-  }\n-\n-  public boolean hasVariablesLocal() {\n-    return false;\n-  }\n-\n-  public boolean hasVariable(String variableName) {\n-    return false;\n-  }\n-\n-  public boolean hasVariableLocal(String variableName) {\n-    return false;\n-  }\n-\n-  public void createVariableLocal(String variableName, Object value) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n-  }\n-\n-  public void createVariablesLocal(Map<String, ? extends Object> variables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n-  }\n-\n-  public void removeVariable(String variableName) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeVariableLocal(String variableName) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeVariables() {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeVariablesLocal() {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeVariables(Collection<String> variableNames) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeVariablesLocal(Collection<String> variableNames) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public void setTransientVariableLocal(String variableName, Object variableValue) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public void setTransientVariables(Map<String, Object> transientVariables) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public void setTransientVariable(String variableName, Object variableValue) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n-\n-  public Object getTransientVariableLocal(String variableName) {\n-    return null;\n-  }\n-\n-  public Map<String, Object> getTransientVariablesLocal() {\n-    return null;\n-  }\n-\n-  public Object getTransientVariable(String variableName) {\n-    return null;\n-  }\n-\n-  public Map<String, Object> getTransientVariables() {\n-    return null;\n-  }\n-\n-  public void removeTransientVariableLocal(String variableName) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeTransientVariablesLocal() {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-\n-  public void removeTransientVariable(String variableName) {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    private static final NoExecutionVariableScope INSTANCE = new NoExecutionVariableScope();\n+\n+    /**\n+     * Since a {@link NoExecutionVariableScope} has no state, it's safe to use the same instance to prevent too many useless instances created.\n+     */\n+    public static NoExecutionVariableScope getSharedInstance() {\n+        return INSTANCE;\n+    }\n+\n+    public Map<String, Object> getVariables() {\n+        return emptyMap();\n+    }\n+\n+    public Map<String, Object> getVariablesLocal() {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getVariables(Collection<String> variableNames) {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getVariables(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getVariablesLocal(Collection<String> variableNames) {\n+        return emptyMap();\n+    }\n+\n+    @Override\n+    public Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return emptyMap();\n+    }\n+\n+    public Object getVariable(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object getVariable(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    public Object getVariableLocal(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object getVariableLocal(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <T> T getVariable(String variableName, Class<T> variableClass) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <T> T getVariableLocal(String variableName, Class<T> variableClass) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstance(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstanceLocal(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    public Set<String> getVariableNames() {\n+        return emptySet();\n+    }\n+\n+    public Set<String> getVariableNamesLocal() {\n+        return null;\n+    }\n+\n+    public void setVariable(String variableName, Object value) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    @Override\n+    public void setVariable(String variableName, Object value, boolean fetchAllVariables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public Object setVariableLocal(String variableName, Object value) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    @Override\n+    public Object setVariableLocal(String variableName, Object value, boolean fetchAllVariables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public void setVariables(Map<String, ? extends Object> variables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public void setVariablesLocal(Map<String, ? extends Object> variables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public boolean hasVariables() {\n+        return false;\n+    }\n+\n+    public boolean hasVariablesLocal() {\n+        return false;\n+    }\n+\n+    public boolean hasVariable(String variableName) {\n+        return false;\n+    }\n+\n+    public boolean hasVariableLocal(String variableName) {\n+        return false;\n+    }\n+\n+    public void createVariableLocal(String variableName, Object value) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n+    }\n+\n+    public void createVariablesLocal(Map<String, ? extends Object> variables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n+    }\n+\n+    public void removeVariable(String variableName) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeVariableLocal(String variableName) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeVariables() {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeVariablesLocal() {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeVariables(Collection<String> variableNames) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeVariablesLocal(Collection<String> variableNames) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void setTransientVariablesLocal(Map<String, Object> transientVariables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public void setTransientVariableLocal(String variableName, Object variableValue) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public void setTransientVariables(Map<String, Object> transientVariables) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public void setTransientVariable(String variableName, Object variableValue) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n+    }\n+\n+    public Object getTransientVariableLocal(String variableName) {\n+        return null;\n+    }\n+\n+    public Map<String, Object> getTransientVariablesLocal() {\n+        return null;\n+    }\n+\n+    public Object getTransientVariable(String variableName) {\n+        return null;\n+    }\n+\n+    public Map<String, Object> getTransientVariables() {\n+        return null;\n+    }\n+\n+    public void removeTransientVariableLocal(String variableName) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeTransientVariablesLocal() {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n+\n+    public void removeTransientVariable(String variableName) {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n \n-  public void removeTransientVariables() {\n-    throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    public void removeTransientVariables() {\n+        throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n+    }\n }\n",
            "diff_size": 244
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 2, expected is 4, indentation should be the same level as line 43.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/343/NoExecutionVariableScope.java\nindex 1581aabf52..d368ed52b4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/343/NoExecutionVariableScope.java\n@@ -18,12 +18,11 @@\n package org.activiti.engine.impl.el;\n \n import static java.util.Collections.emptyMap;\n-import static java.util.Collections.emptySet;\n \n+import static java.util.Collections.emptySet;\n import java.util.Collection;\n import java.util.Map;\n import java.util.Set;\n-\n import org.activiti.engine.delegate.VariableScope;\n import org.activiti.engine.impl.persistence.entity.VariableInstance;\n \n@@ -32,250 +31,253 @@ import org.activiti.engine.impl.persistence.entity.VariableInstance;\n  * variables are not available yet, expressions should be resolved anyway.\n  *\n  */\n+\n+\n public class NoExecutionVariableScope implements VariableScope {\n \n-  private static final NoExecutionVariableScope INSTANCE = new NoExecutionVariableScope();\n+    private static final NoExecutionVariableScope INSTANCE = new NoExecutionVariableScope();\n \n   /**\n    * Since a {@link NoExecutionVariableScope} has no state, it's safe to use the same instance to prevent too many useless instances created.\n    */\n-  public static NoExecutionVariableScope getSharedInstance() {\n-    return INSTANCE;\n-  }\n+    public static NoExecutionVariableScope getSharedInstance() {\n+        return INSTANCE;\n+    }\n \n-  public Map<String, Object> getVariables() {\n+    public Map<String, Object> getVariables() {\n     return emptyMap();\n-  }\n+    }\n \n-  public Map<String, Object> getVariablesLocal() {\n+    public Map<String, Object> getVariablesLocal() {\n     return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariables(Collection<String> variableNames) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariables(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariablesLocal(Collection<String> variableNames) {\n-    return emptyMap();\n-  }\n-\n-  @Override\n-  public Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return emptyMap();\n-  }\n-\n-  public Object getVariable(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public Object getVariable(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  public Object getVariableLocal(String variableName) {\n-    return null;\n-  }\n+    }\n \n-  @Override\n-  public Object getVariableLocal(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public <T> T getVariable(String variableName, Class<T> variableClass) {\n-    return null;\n-  }\n-\n-  @Override\n-  public <T> T getVariableLocal(String variableName, Class<T> variableClass) {\n-    return null;\n-  }\n+    @Override\n+    public Map<String, Object> getVariables(Collection<String> variableNames) {\n+        return emptyMap();\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances() {\n-    return null;\n-  }\n+    @Override\n+    public Map<String, Object> getVariables(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return emptyMap();\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames) {\n-    return null;\n-  }\n+    @Override\n+    public Map<String, Object> getVariablesLocal(Collection<String> variableNames) {\n+        return emptyMap();\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames, boolean fetchAllVariables) {\n-    return null;\n-  }\n+    @Override\n+    public Map<String, Object> getVariablesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return emptyMap();\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal() {\n+    public Object getVariable(String variableName) {\n     return null;\n-  }\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames) {\n-    return null;\n-  }\n+    @Override\n+    public Object getVariable(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n \n-  @Override\n-  public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n+    public Object getVariableLocal(String variableName) {\n     return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstance(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstanceLocal(String variableName) {\n-    return null;\n-  }\n-\n-  @Override\n-  public VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables) {\n-    return null;\n-  }\n-\n-  public Set<String> getVariableNames() {\n+    }\n+\n+    @Override\n+    public Object getVariableLocal(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <T> T getVariable(String variableName, Class<T> variableClass) {\n+        return null;\n+    }\n+\n+    @Override\n+    public <T> T getVariableLocal(String variableName, Class<T> variableClass) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstances(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal() {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Map<String, VariableInstance> getVariableInstancesLocal(Collection<String> variableNames, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstance(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstance(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstanceLocal(String variableName) {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableInstance getVariableInstanceLocal(String variableName, boolean fetchAllVariables) {\n+        return null;\n+    }\n+\n+    public Set<String> getVariableNames() {\n     return emptySet();\n-  }\n+    }\n \n-  public Set<String> getVariableNamesLocal() {\n+    public Set<String> getVariableNamesLocal() {\n     return null;\n-  }\n+    }\n \n-  public void setVariable(String variableName, Object value) {\n+    public void setVariable(String variableName, Object value) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  @Override\n-  public void setVariable(String variableName, Object value, boolean fetchAllVariables) {\n+    @Override\n+    public void setVariable(String variableName, Object value, boolean fetchAllVariables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public Object setVariableLocal(String variableName, Object value) {\n+    public Object setVariableLocal(String variableName, Object value) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  @Override\n-  public Object setVariableLocal(String variableName, Object value, boolean fetchAllVariables) {\n+    @Override\n+    public Object setVariableLocal(String variableName, Object value, boolean fetchAllVariables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public void setVariables(Map<String, ? extends Object> variables) {\n+    public void setVariables(Map<String, ? extends Object> variables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public void setVariablesLocal(Map<String, ? extends Object> variables) {\n+    public void setVariablesLocal(Map<String, ? extends Object> variables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public boolean hasVariables() {\n+    public boolean hasVariables() {\n     return false;\n-  }\n+    }\n \n-  public boolean hasVariablesLocal() {\n+    public boolean hasVariablesLocal() {\n     return false;\n-  }\n+    }\n \n-  public boolean hasVariable(String variableName) {\n+    public boolean hasVariable(String variableName) {\n     return false;\n-  }\n+    }\n \n-  public boolean hasVariableLocal(String variableName) {\n+    public boolean hasVariableLocal(String variableName) {\n     return false;\n-  }\n+    }\n \n-  public void createVariableLocal(String variableName, Object value) {\n+    public void createVariableLocal(String variableName, Object value) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n-  }\n+    }\n \n-  public void createVariablesLocal(Map<String, ? extends Object> variables) {\n+    public void createVariablesLocal(Map<String, ? extends Object> variables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be created\");\n-  }\n+    }\n \n-  public void removeVariable(String variableName) {\n+    public void removeVariable(String variableName) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeVariableLocal(String variableName) {\n+    public void removeVariableLocal(String variableName) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeVariables() {\n+    public void removeVariables() {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeVariablesLocal() {\n+    public void removeVariablesLocal() {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeVariables(Collection<String> variableNames) {\n+    public void removeVariables(Collection<String> variableNames) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeVariablesLocal(Collection<String> variableNames) {\n+    public void removeVariablesLocal(Collection<String> variableNames) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void setTransientVariablesLocal(Map<String, Object> transientVariables) {\n+    public void setTransientVariablesLocal(Map<String, Object> transientVariables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public void setTransientVariableLocal(String variableName, Object variableValue) {\n+    public void setTransientVariableLocal(String variableName, Object variableValue) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public void setTransientVariables(Map<String, Object> transientVariables) {\n+    public void setTransientVariables(Map<String, Object> transientVariables) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public void setTransientVariable(String variableName, Object variableValue) {\n+    public void setTransientVariable(String variableName, Object variableValue) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be set\");\n-  }\n+    }\n \n-  public Object getTransientVariableLocal(String variableName) {\n+    public Object getTransientVariableLocal(String variableName) {\n     return null;\n-  }\n+    }\n \n-  public Map<String, Object> getTransientVariablesLocal() {\n+    public Map<String, Object> getTransientVariablesLocal() {\n     return null;\n-  }\n+    }\n \n-  public Object getTransientVariable(String variableName) {\n+    public Object getTransientVariable(String variableName) {\n     return null;\n-  }\n+    }\n \n-  public Map<String, Object> getTransientVariables() {\n+    public Map<String, Object> getTransientVariables() {\n     return null;\n-  }\n+    }\n \n-  public void removeTransientVariableLocal(String variableName) {\n+    public void removeTransientVariableLocal(String variableName) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeTransientVariablesLocal() {\n+    public void removeTransientVariablesLocal() {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeTransientVariable(String variableName) {\n+    public void removeTransientVariable(String variableName) {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n+    }\n \n-  public void removeTransientVariables() {\n+    public void removeTransientVariables() {\n     throw new UnsupportedOperationException(\"No execution active, no variables can be removed\");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 216
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/343/NoExecutionVariableScope.java\nindex 1581aabf52..722f2b5204 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/343/NoExecutionVariableScope.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/343/NoExecutionVariableScope.java\nindex 1581aabf52..722f2b5204 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/343/NoExecutionVariableScope.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/343/NoExecutionVariableScope.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.el;\n \n import static java.util.Collections.emptyMap;\n",
            "diff_size": 1
        }
    ]
}