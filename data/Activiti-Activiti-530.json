{
    "error_id": "530",
    "information": {
        "errors": [
            {
                "line": "33",
                "severity": "error",
                "message": "'STATIC_INIT' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n  private static Map<String, Integer> units = new HashMap<String, Integer>();\n  static {\n    units.put(\"millis\", Calendar.MILLISECOND);\n    units.put(\"seconds\", Calendar.SECOND);\n    units.put(\"second\", Calendar.SECOND);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "'{' at column 10 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/530/DefaultBusinessCalendar.java\nindex d365a1f98e..d96897be7f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/530/DefaultBusinessCalendar.java\n@@ -30,67 +30,67 @@ import org.activiti.engine.impl.context.Context;\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n   private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n-    units.put(\"millis\", Calendar.MILLISECOND);\n-    units.put(\"seconds\", Calendar.SECOND);\n-    units.put(\"second\", Calendar.SECOND);\n-    units.put(\"minute\", Calendar.MINUTE);\n-    units.put(\"minutes\", Calendar.MINUTE);\n-    units.put(\"hour\", Calendar.HOUR);\n-    units.put(\"hours\", Calendar.HOUR);\n-    units.put(\"day\", Calendar.DAY_OF_YEAR);\n-    units.put(\"days\", Calendar.DAY_OF_YEAR);\n-    units.put(\"week\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"month\", Calendar.MONTH);\n-    units.put(\"months\", Calendar.MONTH);\n-    units.put(\"year\", Calendar.YEAR);\n-    units.put(\"years\", Calendar.YEAR);\n-  }\n \n-  @Override\n-  public Date resolveDuedate(String duedateDescription, int maxIterations) {\n-    return resolveDuedate(duedateDescription);\n-  }\n+  static { units.put(\"millis\", Calendar.MILLISECOND);\n+  units.put(\"seconds\", Calendar.SECOND);\n+  units.put(\"second\", Calendar.SECOND);\n+  units.put(\"minute\", Calendar.MINUTE);\n+  units.put(\"minutes\", Calendar.MINUTE);\n+  units.put(\"hour\", Calendar.HOUR);\n+  units.put(\"hours\", Calendar.HOUR);\n+  units.put(\"day\", Calendar.DAY_OF_YEAR);\n+  units.put(\"days\", Calendar.DAY_OF_YEAR);\n+  units.put(\"week\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"month\", Calendar.MONTH);\n+  units.put(\"months\", Calendar.MONTH);\n+  units.put(\"year\", Calendar.YEAR);\n+  units.put(\"years\", Calendar.YEAR);\n+}\n \n-  public Date resolveDuedate(String duedate) {\n-    Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n+@Override\n+public Date resolveDuedate(String duedateDescription, int maxIterations) {\n+  return resolveDuedate(duedateDescription);\n+}\n \n-    String[] tokens = duedate.split(\" and \");\n-    for (String token : tokens) {\n-      resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n-    }\n+public Date resolveDuedate(String duedate) {\n+  Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n \n-    return resolvedDuedate;\n+  String[] tokens = duedate.split(\" and \");\n+  for (String token : tokens) {\n+    resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n   }\n \n-  @Override\n-  public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n-    return true;\n-  }\n+  return resolvedDuedate;\n+}\n \n-  @Override\n-  public Date resolveEndDate(String endDate) {\n-    return null;\n-  }\n+@Override\n+public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n+  return true;\n+}\n+\n+@Override\n+public Date resolveEndDate(String endDate) {\n+  return null;\n+}\n \n-  protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n-    int spaceIndex = singleUnitQuantity.indexOf(\" \");\n-    if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n-      throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n-    }\n+protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n+  int spaceIndex = singleUnitQuantity.indexOf(\" \");\n+  if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n+    throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+  }\n \n-    String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n-    Integer quantity = new Integer(quantityText);\n+  String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n+  Integer quantity = new Integer(quantityText);\n \n-    String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n+  String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n \n-    int unit = units.get(unitText);\n+  int unit = units.get(unitText);\n \n-    GregorianCalendar calendar = new GregorianCalendar();\n-    calendar.setTime(startDate);\n-    calendar.add(unit, quantity);\n+  GregorianCalendar calendar = new GregorianCalendar();\n+  calendar.setTime(startDate);\n+  calendar.add(unit, quantity);\n \n-    return calendar.getTime();\n-  }\n+  return calendar.getTime();\n+}\n }\n",
            "diff_size": 71
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/530/DefaultBusinessCalendar.java\nindex d365a1f98e..d4beeb32dd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/530/DefaultBusinessCalendar.java\n@@ -29,68 +29,69 @@ import org.activiti.engine.impl.context.Context;\n @Internal\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n-  private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n-    units.put(\"millis\", Calendar.MILLISECOND);\n-    units.put(\"seconds\", Calendar.SECOND);\n-    units.put(\"second\", Calendar.SECOND);\n-    units.put(\"minute\", Calendar.MINUTE);\n-    units.put(\"minutes\", Calendar.MINUTE);\n-    units.put(\"hour\", Calendar.HOUR);\n-    units.put(\"hours\", Calendar.HOUR);\n-    units.put(\"day\", Calendar.DAY_OF_YEAR);\n-    units.put(\"days\", Calendar.DAY_OF_YEAR);\n-    units.put(\"week\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"month\", Calendar.MONTH);\n-    units.put(\"months\", Calendar.MONTH);\n-    units.put(\"year\", Calendar.YEAR);\n-    units.put(\"years\", Calendar.YEAR);\n-  }\n-\n-  @Override\n-  public Date resolveDuedate(String duedateDescription, int maxIterations) {\n-    return resolveDuedate(duedateDescription);\n-  }\n-\n-  public Date resolveDuedate(String duedate) {\n-    Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n-\n-    String[] tokens = duedate.split(\" and \");\n-    for (String token : tokens) {\n-      resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n+    private static Map<String, Integer> units = new HashMap<String, Integer>();\n+\n+    static {\n+        units.put(\"millis\", Calendar.MILLISECOND);\n+        units.put(\"seconds\", Calendar.SECOND);\n+        units.put(\"second\", Calendar.SECOND);\n+        units.put(\"minute\", Calendar.MINUTE);\n+        units.put(\"minutes\", Calendar.MINUTE);\n+        units.put(\"hour\", Calendar.HOUR);\n+        units.put(\"hours\", Calendar.HOUR);\n+        units.put(\"day\", Calendar.DAY_OF_YEAR);\n+        units.put(\"days\", Calendar.DAY_OF_YEAR);\n+        units.put(\"week\", Calendar.WEEK_OF_YEAR);\n+        units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n+        units.put(\"month\", Calendar.MONTH);\n+        units.put(\"months\", Calendar.MONTH);\n+        units.put(\"year\", Calendar.YEAR);\n+        units.put(\"years\", Calendar.YEAR);\n     }\n \n-    return resolvedDuedate;\n-  }\n+    @Override\n+    public Date resolveDuedate(String duedateDescription, int maxIterations) {\n+        return resolveDuedate(duedateDescription);\n+    }\n+\n+    public Date resolveDuedate(String duedate) {\n+        Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n \n-  @Override\n-  public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n-    return true;\n-  }\n+        String[] tokens = duedate.split(\" and \");\n+        for (String token : tokens) {\n+            resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n+        }\n \n-  @Override\n-  public Date resolveEndDate(String endDate) {\n-    return null;\n-  }\n+        return resolvedDuedate;\n+    }\n \n-  protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n-    int spaceIndex = singleUnitQuantity.indexOf(\" \");\n-    if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n-      throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+    @Override\n+    public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n+        return true;\n     }\n \n-    String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n-    Integer quantity = new Integer(quantityText);\n+    @Override\n+    public Date resolveEndDate(String endDate) {\n+        return null;\n+    }\n \n-    String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n+    protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n+        int spaceIndex = singleUnitQuantity.indexOf(\" \");\n+        if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n+            throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+        }\n \n-    int unit = units.get(unitText);\n+        String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n+        Integer quantity = new Integer(quantityText);\n \n-    GregorianCalendar calendar = new GregorianCalendar();\n-    calendar.setTime(startDate);\n-    calendar.add(unit, quantity);\n+        String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n \n-    return calendar.getTime();\n-  }\n+        int unit = units.get(unitText);\n+\n+        GregorianCalendar calendar = new GregorianCalendar();\n+        calendar.setTime(startDate);\n+        calendar.add(unit, quantity);\n+\n+        return calendar.getTime();\n+    }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/530/DefaultBusinessCalendar.java\nindex d365a1f98e..82db9f6815 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/naturalize/530/DefaultBusinessCalendar.java\n@@ -30,7 +30,8 @@ import org.activiti.engine.impl.context.Context;\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n   private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n+\n+static {\n     units.put(\"millis\", Calendar.MILLISECOND);\n     units.put(\"seconds\", Calendar.SECOND);\n     units.put(\"second\", Calendar.SECOND);\n@@ -93,4 +94,4 @@ public class DefaultBusinessCalendar implements BusinessCalendar {\n \n     return calendar.getTime();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/530/DefaultBusinessCalendar.java\nindex d365a1f98e..f318fcaf96 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/530/DefaultBusinessCalendar.java\n@@ -21,7 +21,6 @@ import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.activiti.engine.ActivitiIllegalArgumentException;\n import org.activiti.engine.api.internal.Internal;\n import org.activiti.engine.impl.context.Context;\n@@ -29,8 +28,9 @@ import org.activiti.engine.impl.context.Context;\n @Internal\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n-  private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n+    private static Map<String, Integer> units = new HashMap<String, Integer>();\n+\n+    static {\n     units.put(\"millis\", Calendar.MILLISECOND);\n     units.put(\"seconds\", Calendar.SECOND);\n     units.put(\"second\", Calendar.SECOND);\n@@ -46,51 +46,46 @@ public class DefaultBusinessCalendar implements BusinessCalendar {\n     units.put(\"months\", Calendar.MONTH);\n     units.put(\"year\", Calendar.YEAR);\n     units.put(\"years\", Calendar.YEAR);\n-  }\n+    }\n \n-  @Override\n-  public Date resolveDuedate(String duedateDescription, int maxIterations) {\n-    return resolveDuedate(duedateDescription);\n-  }\n+    @Override\n+    public Date resolveDuedate(String duedateDescription, int maxIterations) {\n+        return resolveDuedate(duedateDescription);\n+    }\n \n-  public Date resolveDuedate(String duedate) {\n+    public Date resolveDuedate(String duedate) {\n     Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n-\n     String[] tokens = duedate.split(\" and \");\n     for (String token : tokens) {\n-      resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n+        resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n     }\n-\n     return resolvedDuedate;\n-  }\n+    }\n \n-  @Override\n-  public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n-    return true;\n-  }\n+    @Override\n+    public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n+        return true;\n+    }\n \n-  @Override\n-  public Date resolveEndDate(String endDate) {\n-    return null;\n-  }\n+    @Override\n+    public Date resolveEndDate(String endDate) {\n+        return null;\n+    }\n \n-  protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n+    protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n     int spaceIndex = singleUnitQuantity.indexOf(\" \");\n     if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n-      throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+        throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n     }\n \n     String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n     Integer quantity = new Integer(quantityText);\n-\n     String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n-\n     int unit = units.get(unitText);\n-\n     GregorianCalendar calendar = new GregorianCalendar();\n     calendar.setTime(startDate);\n     calendar.add(unit, quantity);\n-\n     return calendar.getTime();\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "'{' at column 10 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/530/DefaultBusinessCalendar.java\nindex d365a1f98e..b6ff8c88c7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/530/DefaultBusinessCalendar.java\n@@ -30,67 +30,67 @@ import org.activiti.engine.impl.context.Context;\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n   private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n-    units.put(\"millis\", Calendar.MILLISECOND);\n-    units.put(\"seconds\", Calendar.SECOND);\n-    units.put(\"second\", Calendar.SECOND);\n-    units.put(\"minute\", Calendar.MINUTE);\n-    units.put(\"minutes\", Calendar.MINUTE);\n-    units.put(\"hour\", Calendar.HOUR);\n-    units.put(\"hours\", Calendar.HOUR);\n-    units.put(\"day\", Calendar.DAY_OF_YEAR);\n-    units.put(\"days\", Calendar.DAY_OF_YEAR);\n-    units.put(\"week\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"month\", Calendar.MONTH);\n-    units.put(\"months\", Calendar.MONTH);\n-    units.put(\"year\", Calendar.YEAR);\n-    units.put(\"years\", Calendar.YEAR);\n-  }\n \n-  @Override\n-  public Date resolveDuedate(String duedateDescription, int maxIterations) {\n-    return resolveDuedate(duedateDescription);\n-  }\n+  static {units.put(\"millis\", Calendar.MILLISECOND);\n+  units.put(\"seconds\", Calendar.SECOND);\n+  units.put(\"second\", Calendar.SECOND);\n+  units.put(\"minute\", Calendar.MINUTE);\n+  units.put(\"minutes\", Calendar.MINUTE);\n+  units.put(\"hour\", Calendar.HOUR);\n+  units.put(\"hours\", Calendar.HOUR);\n+  units.put(\"day\", Calendar.DAY_OF_YEAR);\n+  units.put(\"days\", Calendar.DAY_OF_YEAR);\n+  units.put(\"week\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"month\", Calendar.MONTH);\n+  units.put(\"months\", Calendar.MONTH);\n+  units.put(\"year\", Calendar.YEAR);\n+  units.put(\"years\", Calendar.YEAR);\n+}\n \n-  public Date resolveDuedate(String duedate) {\n-    Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n+@Override\n+public Date resolveDuedate(String duedateDescription, int maxIterations) {\n+  return resolveDuedate(duedateDescription);\n+}\n \n-    String[] tokens = duedate.split(\" and \");\n-    for (String token : tokens) {\n-      resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n-    }\n+public Date resolveDuedate(String duedate) {\n+  Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n \n-    return resolvedDuedate;\n+  String[] tokens = duedate.split(\" and \");\n+  for (String token : tokens) {\n+    resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n   }\n \n-  @Override\n-  public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n-    return true;\n-  }\n+  return resolvedDuedate;\n+}\n \n-  @Override\n-  public Date resolveEndDate(String endDate) {\n-    return null;\n-  }\n+@Override\n+public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n+  return true;\n+}\n+\n+@Override\n+public Date resolveEndDate(String endDate) {\n+  return null;\n+}\n \n-  protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n-    int spaceIndex = singleUnitQuantity.indexOf(\" \");\n-    if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n-      throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n-    }\n+protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n+  int spaceIndex = singleUnitQuantity.indexOf(\" \");\n+  if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n+    throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+  }\n \n-    String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n-    Integer quantity = new Integer(quantityText);\n+  String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n+  Integer quantity = new Integer(quantityText);\n \n-    String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n+  String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n \n-    int unit = units.get(unitText);\n+  int unit = units.get(unitText);\n \n-    GregorianCalendar calendar = new GregorianCalendar();\n-    calendar.setTime(startDate);\n-    calendar.add(unit, quantity);\n+  GregorianCalendar calendar = new GregorianCalendar();\n+  calendar.setTime(startDate);\n+  calendar.add(unit, quantity);\n \n-    return calendar.getTime();\n-  }\n+  return calendar.getTime();\n+}\n }\n",
            "diff_size": 71
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "'{' at column 10 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/530/DefaultBusinessCalendar.java\nindex d365a1f98e..d96897be7f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/530/DefaultBusinessCalendar.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/530/DefaultBusinessCalendar.java\n@@ -30,67 +30,67 @@ import org.activiti.engine.impl.context.Context;\n public class DefaultBusinessCalendar implements BusinessCalendar {\n \n   private static Map<String, Integer> units = new HashMap<String, Integer>();\n-  static {\n-    units.put(\"millis\", Calendar.MILLISECOND);\n-    units.put(\"seconds\", Calendar.SECOND);\n-    units.put(\"second\", Calendar.SECOND);\n-    units.put(\"minute\", Calendar.MINUTE);\n-    units.put(\"minutes\", Calendar.MINUTE);\n-    units.put(\"hour\", Calendar.HOUR);\n-    units.put(\"hours\", Calendar.HOUR);\n-    units.put(\"day\", Calendar.DAY_OF_YEAR);\n-    units.put(\"days\", Calendar.DAY_OF_YEAR);\n-    units.put(\"week\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n-    units.put(\"month\", Calendar.MONTH);\n-    units.put(\"months\", Calendar.MONTH);\n-    units.put(\"year\", Calendar.YEAR);\n-    units.put(\"years\", Calendar.YEAR);\n-  }\n \n-  @Override\n-  public Date resolveDuedate(String duedateDescription, int maxIterations) {\n-    return resolveDuedate(duedateDescription);\n-  }\n+  static { units.put(\"millis\", Calendar.MILLISECOND);\n+  units.put(\"seconds\", Calendar.SECOND);\n+  units.put(\"second\", Calendar.SECOND);\n+  units.put(\"minute\", Calendar.MINUTE);\n+  units.put(\"minutes\", Calendar.MINUTE);\n+  units.put(\"hour\", Calendar.HOUR);\n+  units.put(\"hours\", Calendar.HOUR);\n+  units.put(\"day\", Calendar.DAY_OF_YEAR);\n+  units.put(\"days\", Calendar.DAY_OF_YEAR);\n+  units.put(\"week\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"weeks\", Calendar.WEEK_OF_YEAR);\n+  units.put(\"month\", Calendar.MONTH);\n+  units.put(\"months\", Calendar.MONTH);\n+  units.put(\"year\", Calendar.YEAR);\n+  units.put(\"years\", Calendar.YEAR);\n+}\n \n-  public Date resolveDuedate(String duedate) {\n-    Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n+@Override\n+public Date resolveDuedate(String duedateDescription, int maxIterations) {\n+  return resolveDuedate(duedateDescription);\n+}\n \n-    String[] tokens = duedate.split(\" and \");\n-    for (String token : tokens) {\n-      resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n-    }\n+public Date resolveDuedate(String duedate) {\n+  Date resolvedDuedate = Context.getProcessEngineConfiguration().getClock().getCurrentTime();\n \n-    return resolvedDuedate;\n+  String[] tokens = duedate.split(\" and \");\n+  for (String token : tokens) {\n+    resolvedDuedate = addSingleUnitQuantity(resolvedDuedate, token);\n   }\n \n-  @Override\n-  public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n-    return true;\n-  }\n+  return resolvedDuedate;\n+}\n \n-  @Override\n-  public Date resolveEndDate(String endDate) {\n-    return null;\n-  }\n+@Override\n+public Boolean validateDuedate(String duedateDescription, int maxIterations, Date endDate, Date newTimer) {\n+  return true;\n+}\n+\n+@Override\n+public Date resolveEndDate(String endDate) {\n+  return null;\n+}\n \n-  protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n-    int spaceIndex = singleUnitQuantity.indexOf(\" \");\n-    if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n-      throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n-    }\n+protected Date addSingleUnitQuantity(Date startDate, String singleUnitQuantity) {\n+  int spaceIndex = singleUnitQuantity.indexOf(\" \");\n+  if (spaceIndex == -1 || singleUnitQuantity.length() < spaceIndex + 1) {\n+    throw new ActivitiIllegalArgumentException(\"invalid duedate format: \" + singleUnitQuantity);\n+  }\n \n-    String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n-    Integer quantity = new Integer(quantityText);\n+  String quantityText = singleUnitQuantity.substring(0, spaceIndex);\n+  Integer quantity = new Integer(quantityText);\n \n-    String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n+  String unitText = singleUnitQuantity.substring(spaceIndex + 1).trim().toLowerCase();\n \n-    int unit = units.get(unitText);\n+  int unit = units.get(unitText);\n \n-    GregorianCalendar calendar = new GregorianCalendar();\n-    calendar.setTime(startDate);\n-    calendar.add(unit, quantity);\n+  GregorianCalendar calendar = new GregorianCalendar();\n+  calendar.setTime(startDate);\n+  calendar.add(unit, quantity);\n \n-    return calendar.getTime();\n-  }\n+  return calendar.getTime();\n+}\n }\n",
            "diff_size": 71
        }
    ]
}