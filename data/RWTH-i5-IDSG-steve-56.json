{
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @since 13.03.2018\n */\npublic class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n\n    public GetCompositeScheduleTask(OcppVersion ocppVersion,\n                                    GetCompositeScheduleParams params) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/56/GetCompositeScheduleTask.java\nindex d66b29fea5..b753ee7f8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/56/GetCompositeScheduleTask.java\n@@ -15,45 +15,44 @@ import javax.xml.ws.AsyncHandler;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 13.03.2018\n  */\n-public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n-\n-    public GetCompositeScheduleTask(OcppVersion ocppVersion,\n-                                    GetCompositeScheduleParams params) {\n-        super(ocppVersion, params);\n-    }\n+public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse\n+    > { public GetCompositeScheduleTask(OcppVersion ocppVersion,\n+                                GetCompositeScheduleParams params) {\n+    super(ocppVersion, params);\n+}\n \n-    @Override\n-    public OcppCallback<GetCompositeScheduleResponse> defaultCallback() {\n-        return new DefaultOcppCallback<GetCompositeScheduleResponse>() {\n+@Override\n+public OcppCallback<GetCompositeScheduleResponse> defaultCallback() {\n+    return new DefaultOcppCallback<GetCompositeScheduleResponse>() {\n \n-            @Override\n-            public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n-                addNewResponse(chargeBoxId, response.getStatus().value());\n+        @Override\n+        public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n+            addNewResponse(chargeBoxId, response.getStatus().value());\n \n-                if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n-                    RequestResult result = getResultMap().get(chargeBoxId);\n-                    result.setDetails(response);\n-                }\n+            if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n+                RequestResult result = getResultMap().get(chargeBoxId);\n+                result.setDetails(response);\n             }\n-        };\n-    }\n-\n-    @Override\n-    public GetCompositeScheduleRequest getOcpp16Request() {\n-        return new GetCompositeScheduleRequest()\n-                .withConnectorId(params.getConnectorId())\n-                .withDuration(params.getDurationInSeconds())\n-                .withChargingRateUnit(params.getChargingRateUnit());\n-    }\n-\n-    @Override\n-    public AsyncHandler<GetCompositeScheduleResponse> getOcpp16Handler(String chargeBoxId) {\n-        return res -> {\n-            try {\n-                success(chargeBoxId, res.get());\n-            } catch (Exception e) {\n-                failed(chargeBoxId, e);\n-            }\n-        };\n-    }\n+        }\n+    };\n+}\n+\n+@Override\n+public GetCompositeScheduleRequest getOcpp16Request() {\n+    return new GetCompositeScheduleRequest()\n+            .withConnectorId(params.getConnectorId())\n+            .withDuration(params.getDurationInSeconds())\n+            .withChargingRateUnit(params.getChargingRateUnit());\n+}\n+\n+@Override\n+public AsyncHandler<GetCompositeScheduleResponse> getOcpp16Handler(String chargeBoxId) {\n+    return res -> {\n+        try {\n+            success(chargeBoxId, res.get());\n+        } catch (Exception e) {\n+            failed(chargeBoxId, e);\n+        }\n+    };\n+}\n }\n",
            "diff_size": 38
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/56/GetCompositeScheduleTask.java\nindex d66b29fea5..7aa6ed9d24 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/56/GetCompositeScheduleTask.java\n@@ -15,7 +15,8 @@ import javax.xml.ws.AsyncHandler;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 13.03.2018\n  */\n-public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n+public class GetCompositeScheduleTask\n+    extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n \n     public GetCompositeScheduleTask(OcppVersion ocppVersion,\n                                     GetCompositeScheduleParams params) {\n@@ -41,9 +42,9 @@ public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeSch\n     @Override\n     public GetCompositeScheduleRequest getOcpp16Request() {\n         return new GetCompositeScheduleRequest()\n-                .withConnectorId(params.getConnectorId())\n-                .withDuration(params.getDurationInSeconds())\n-                .withChargingRateUnit(params.getChargingRateUnit());\n+            .withConnectorId(params.getConnectorId())\n+            .withDuration(params.getDurationInSeconds())\n+            .withChargingRateUnit(params.getChargingRateUnit());\n     }\n \n     @Override\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/56/GetCompositeScheduleTask.java\nindex d66b29fea5..b8664442bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/56/GetCompositeScheduleTask.java\n@@ -19,7 +19,7 @@ public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeSch\n \n     public GetCompositeScheduleTask(OcppVersion ocppVersion,\n                                     GetCompositeScheduleParams params) {\n-        super(ocppVersion, params);\n+    super(ocppVersion, params);\n     }\n \n     @Override\n@@ -56,4 +56,4 @@ public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeSch\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/56/GetCompositeScheduleTask.java\nindex d66b29fea5..99ca5848fc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/56/GetCompositeScheduleTask.java\n@@ -8,17 +8,17 @@ import de.rwth.idsg.steve.web.dto.ocpp.GetCompositeScheduleParams;\n import ocpp.cp._2015._10.GetCompositeScheduleRequest;\n import ocpp.cp._2015._10.GetCompositeScheduleResponse;\n import ocpp.cp._2015._10.GetCompositeScheduleStatus;\n-\n import javax.xml.ws.AsyncHandler;\n \n /**\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 13.03.2018\n  */\n+\n+\n public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n \n-    public GetCompositeScheduleTask(OcppVersion ocppVersion,\n-                                    GetCompositeScheduleParams params) {\n+    public GetCompositeScheduleTask(OcppVersion ocppVersion, GetCompositeScheduleParams params) {\n         super(ocppVersion, params);\n     }\n \n@@ -26,24 +26,24 @@ public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeSch\n     public OcppCallback<GetCompositeScheduleResponse> defaultCallback() {\n         return new DefaultOcppCallback<GetCompositeScheduleResponse>() {\n \n-            @Override\n-            public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n-                addNewResponse(chargeBoxId, response.getStatus().value());\n+                   @Override\n+                   public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n+                       addNewResponse(chargeBoxId, response.getStatus().value());\n \n-                if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n-                    RequestResult result = getResultMap().get(chargeBoxId);\n-                    result.setDetails(response);\n-                }\n-            }\n-        };\n+                       if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n+                           RequestResult result = getResultMap().get(chargeBoxId);\n+                           result.setDetails(response);\n+                       }\n+                   }\n+               };\n     }\n \n     @Override\n     public GetCompositeScheduleRequest getOcpp16Request() {\n         return new GetCompositeScheduleRequest()\n-                .withConnectorId(params.getConnectorId())\n-                .withDuration(params.getDurationInSeconds())\n-                .withChargingRateUnit(params.getChargingRateUnit());\n+        .withConnectorId(params.getConnectorId())\n+        .withDuration(params.getDurationInSeconds())\n+        .withChargingRateUnit(params.getChargingRateUnit());\n     }\n \n     @Override\n@@ -56,4 +56,4 @@ public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeSch\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/56/GetCompositeScheduleTask.java\nindex d66b29fea5..b753ee7f8c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/56/GetCompositeScheduleTask.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/56/GetCompositeScheduleTask.java\n@@ -15,45 +15,44 @@ import javax.xml.ws.AsyncHandler;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 13.03.2018\n  */\n-public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse> {\n-\n-    public GetCompositeScheduleTask(OcppVersion ocppVersion,\n-                                    GetCompositeScheduleParams params) {\n-        super(ocppVersion, params);\n-    }\n+public class GetCompositeScheduleTask extends Ocpp16AndAboveTask<GetCompositeScheduleParams, GetCompositeScheduleResponse\n+    > { public GetCompositeScheduleTask(OcppVersion ocppVersion,\n+                                GetCompositeScheduleParams params) {\n+    super(ocppVersion, params);\n+}\n \n-    @Override\n-    public OcppCallback<GetCompositeScheduleResponse> defaultCallback() {\n-        return new DefaultOcppCallback<GetCompositeScheduleResponse>() {\n+@Override\n+public OcppCallback<GetCompositeScheduleResponse> defaultCallback() {\n+    return new DefaultOcppCallback<GetCompositeScheduleResponse>() {\n \n-            @Override\n-            public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n-                addNewResponse(chargeBoxId, response.getStatus().value());\n+        @Override\n+        public void success(String chargeBoxId, GetCompositeScheduleResponse response) {\n+            addNewResponse(chargeBoxId, response.getStatus().value());\n \n-                if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n-                    RequestResult result = getResultMap().get(chargeBoxId);\n-                    result.setDetails(response);\n-                }\n+            if (response.getStatus() == GetCompositeScheduleStatus.ACCEPTED) {\n+                RequestResult result = getResultMap().get(chargeBoxId);\n+                result.setDetails(response);\n             }\n-        };\n-    }\n-\n-    @Override\n-    public GetCompositeScheduleRequest getOcpp16Request() {\n-        return new GetCompositeScheduleRequest()\n-                .withConnectorId(params.getConnectorId())\n-                .withDuration(params.getDurationInSeconds())\n-                .withChargingRateUnit(params.getChargingRateUnit());\n-    }\n-\n-    @Override\n-    public AsyncHandler<GetCompositeScheduleResponse> getOcpp16Handler(String chargeBoxId) {\n-        return res -> {\n-            try {\n-                success(chargeBoxId, res.get());\n-            } catch (Exception e) {\n-                failed(chargeBoxId, e);\n-            }\n-        };\n-    }\n+        }\n+    };\n+}\n+\n+@Override\n+public GetCompositeScheduleRequest getOcpp16Request() {\n+    return new GetCompositeScheduleRequest()\n+            .withConnectorId(params.getConnectorId())\n+            .withDuration(params.getDurationInSeconds())\n+            .withChargingRateUnit(params.getChargingRateUnit());\n+}\n+\n+@Override\n+public AsyncHandler<GetCompositeScheduleResponse> getOcpp16Handler(String chargeBoxId) {\n+    return res -> {\n+        try {\n+            success(chargeBoxId, res.get());\n+        } catch (Exception e) {\n+            failed(chargeBoxId, e);\n+        }\n+    };\n+}\n }\n",
            "diff_size": 38
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ]
}