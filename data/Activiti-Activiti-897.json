{
    "error_id": "897",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.List;\nimport java.util.Optional;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/897/IntermediateCatchMessageEventActivityBehavior.java\nindex 572bad2c7b..8e46460f7e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/897/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -42,16 +43,16 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n \n   public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n-    \n+\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                .insertMessageEvent(messageName, \n+                                                                .insertMessageEvent(messageName,\n                                                                                     ExecutionEntity.class.cast(execution));\n     Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n \n     correlationKey.ifPresent(messageEvent::setConfiguration);\n-    \n+\n     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n         commandContext.getProcessEngineConfiguration().getEventDispatcher()\n                 .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n@@ -65,11 +66,11 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n   }\n-  \n+\n   @Override\n   public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n         DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n   }\n \n@@ -77,7 +78,7 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n     // Should we use triggerName and triggerData, because message name expression can change?\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n@@ -95,5 +96,5 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n   public MessageExecutionContext getMessageExecutionContext() {\n     return messageExecutionContext;\n   }\n-  \n+\n }\n",
            "diff_size": 9
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/897/IntermediateCatchMessageEventActivityBehavior.java\nindex 572bad2c7b..c638ccc84d 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/897/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -29,71 +30,71 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n \n public class IntermediateCatchMessageEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n-\n-  protected final MessageEventDefinition messageEventDefinition;\n-  protected final MessageExecutionContext messageExecutionContext;\n-\n-  public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n-                                                       MessageExecutionContext messageExecutionContext) {\n-    this.messageEventDefinition = messageEventDefinition;\n-    this.messageExecutionContext = messageExecutionContext;\n-  }\n-\n-  public void execute(DelegateExecution execution) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    \n-    String messageName = messageExecutionContext.getMessageName(execution);\n-    \n-    MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                .insertMessageEvent(messageName, \n-                                                                                    ExecutionEntity.class.cast(execution));\n-    Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n-\n-    correlationKey.ifPresent(messageEvent::setConfiguration);\n-    \n-    if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        commandContext.getProcessEngineConfiguration().getEventDispatcher()\n-                .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n-                                                                              messageName,\n-                                                                              correlationKey.orElse(null)));\n-      }\n-  }\n-\n-  @Override\n-  public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n-    ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n-    leaveIntermediateCatchEvent(executionEntity);\n-  }\n-  \n-  @Override\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n-    deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n-  }\n-\n-  protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-    // Should we use triggerName and triggerData, because message name expression can change?\n-    String messageName = messageExecutionContext.getMessageName(execution);\n-    \n-    EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n-    List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n-    for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n-      if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n-        eventSubscriptionEntityManager.delete(eventSubscription);\n-      }\n+    private static final long serialVersionUID = 1L;\n+\n+    protected final MessageEventDefinition messageEventDefinition;\n+    protected final MessageExecutionContext messageExecutionContext;\n+\n+    public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n+                                                         MessageExecutionContext messageExecutionContext) {\n+        this.messageEventDefinition = messageEventDefinition;\n+        this.messageExecutionContext = messageExecutionContext;\n+    }\n+\n+    public void execute(DelegateExecution execution) {\n+        CommandContext commandContext = Context.getCommandContext();\n+\n+        String messageName = messageExecutionContext.getMessageName(execution);\n+\n+        MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n+                .insertMessageEvent(messageName,\n+                        ExecutionEntity.class.cast(execution));\n+        Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n+\n+        correlationKey.ifPresent(messageEvent::setConfiguration);\n+\n+        if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n+            commandContext.getProcessEngineConfiguration().getEventDispatcher()\n+                    .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n+                            messageName,\n+                            correlationKey.orElse(null)));\n+        }\n     }\n-    return executionEntity;\n-  }\n \n-  public MessageEventDefinition getMessageEventDefinition() {\n-    return messageEventDefinition;\n-  }\n+    @Override\n+    public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n+        ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n+        leaveIntermediateCatchEvent(executionEntity);\n+    }\n+\n+    @Override\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n+        deleteMessageEventSubScription(execution);\n+        Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n+    }\n+\n+    protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+        // Should we use triggerName and triggerData, because message name expression can change?\n+        String messageName = messageExecutionContext.getMessageName(execution);\n+\n+        EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n+        List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n+        for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n+            if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n+                eventSubscriptionEntityManager.delete(eventSubscription);\n+            }\n+        }\n+        return executionEntity;\n+    }\n+\n+    public MessageEventDefinition getMessageEventDefinition() {\n+        return messageEventDefinition;\n+    }\n+\n+    public MessageExecutionContext getMessageExecutionContext() {\n+        return messageExecutionContext;\n+    }\n \n-  public MessageExecutionContext getMessageExecutionContext() {\n-    return messageExecutionContext;\n-  }\n-  \n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/897/IntermediateCatchMessageEventActivityBehavior.java\nindex 572bad2c7b..020b1021bc 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/897/IntermediateCatchMessageEventActivityBehavior.java\n@@ -14,7 +14,6 @@ package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n import java.util.Optional;\n-\n import org.activiti.bpmn.model.MessageEventDefinition;\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;\n@@ -27,73 +26,66 @@ import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntityManage\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;\n \n-public class IntermediateCatchMessageEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n+public class IntermediateCatchMessageEventActivityBehavior extends IntermediateCatchEventActivityBehavior {\n \n-  protected final MessageEventDefinition messageEventDefinition;\n-  protected final MessageExecutionContext messageExecutionContext;\n+    private static final long serialVersionUID = 1L;\n+    protected final MessageEventDefinition messageEventDefinition;\n+    protected final MessageExecutionContext messageExecutionContext;\n \n-  public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n-                                                       MessageExecutionContext messageExecutionContext) {\n+    public IntermediateCatchMessageEventActivityBehavior(MessageEventDefinition messageEventDefinition, MessageExecutionContext messageExecutionContext) {\n     this.messageEventDefinition = messageEventDefinition;\n     this.messageExecutionContext = messageExecutionContext;\n-  }\n+    }\n \n-  public void execute(DelegateExecution execution) {\n+    public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n-    \n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n-    MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                .insertMessageEvent(messageName, \n-                                                                                    ExecutionEntity.class.cast(execution));\n+    MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageName,\n+                                                                                                                        ExecutionEntity.class.cast(execution));\n     Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n-\n     correlationKey.ifPresent(messageEvent::setConfiguration);\n-    \n     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        commandContext.getProcessEngineConfiguration().getEventDispatcher()\n-                .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n-                                                                              messageName,\n-                                                                              correlationKey.orElse(null)));\n-      }\n-  }\n+        commandContext.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n+                                                                                                                                         messageName,\n+                                                                                                                                         correlationKey.orElse(null)));\n+    }\n+    }\n \n-  @Override\n-  public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n+    @Override\n+    public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n     ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n-  }\n-  \n-  @Override\n-  public void eventCancelledByEventGateway(DelegateExecution execution) {\n+    }\n+\n+    @Override\n+    public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n-        DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n-  }\n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n+                                                                                          DeleteReason.EVENT_BASED_GATEWAY_CANCEL,\n+                                                                                          false);\n+    }\n \n-  protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n+    protected ExecutionEntity deleteMessageEventSubScription(DelegateExecution execution) {\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n     // Should we use triggerName and triggerData, because message name expression can change?\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n-      if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n-        eventSubscriptionEntityManager.delete(eventSubscription);\n-      }\n+        if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n+            eventSubscriptionEntityManager.delete(eventSubscription);\n+        }\n     }\n     return executionEntity;\n-  }\n+    }\n \n-  public MessageEventDefinition getMessageEventDefinition() {\n+    public MessageEventDefinition getMessageEventDefinition() {\n     return messageEventDefinition;\n-  }\n+    }\n \n-  public MessageExecutionContext getMessageExecutionContext() {\n+    public MessageExecutionContext getMessageExecutionContext() {\n     return messageExecutionContext;\n-  }\n-  \n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/897/IntermediateCatchMessageEventActivityBehavior.java\nindex 572bad2c7b..8e46460f7e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/897/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -42,16 +43,16 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n \n   public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n-    \n+\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                .insertMessageEvent(messageName, \n+                                                                .insertMessageEvent(messageName,\n                                                                                     ExecutionEntity.class.cast(execution));\n     Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n \n     correlationKey.ifPresent(messageEvent::setConfiguration);\n-    \n+\n     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n         commandContext.getProcessEngineConfiguration().getEventDispatcher()\n                 .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n@@ -65,11 +66,11 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n   }\n-  \n+\n   @Override\n   public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n         DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n   }\n \n@@ -77,7 +78,7 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n     // Should we use triggerName and triggerData, because message name expression can change?\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n@@ -95,5 +96,5 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n   public MessageExecutionContext getMessageExecutionContext() {\n     return messageExecutionContext;\n   }\n-  \n+\n }\n",
            "diff_size": 9
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/897/IntermediateCatchMessageEventActivityBehavior.java\nindex 572bad2c7b..8e46460f7e 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/897/IntermediateCatchMessageEventActivityBehavior.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/897/IntermediateCatchMessageEventActivityBehavior.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.List;\n@@ -42,16 +43,16 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n \n   public void execute(DelegateExecution execution) {\n     CommandContext commandContext = Context.getCommandContext();\n-    \n+\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                .insertMessageEvent(messageName, \n+                                                                .insertMessageEvent(messageName,\n                                                                                     ExecutionEntity.class.cast(execution));\n     Optional<String> correlationKey = messageExecutionContext.getCorrelationKey(execution);\n \n     correlationKey.ifPresent(messageEvent::setConfiguration);\n-    \n+\n     if (commandContext.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n         commandContext.getProcessEngineConfiguration().getEventDispatcher()\n                 .dispatchEvent(ActivitiEventBuilder.createMessageWaitingEvent(execution,\n@@ -65,11 +66,11 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = deleteMessageEventSubScription(execution);\n     leaveIntermediateCatchEvent(executionEntity);\n   }\n-  \n+\n   @Override\n   public void eventCancelledByEventGateway(DelegateExecution execution) {\n     deleteMessageEventSubScription(execution);\n-    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution, \n+    Context.getCommandContext().getExecutionEntityManager().deleteExecutionAndRelatedData((ExecutionEntity) execution,\n         DeleteReason.EVENT_BASED_GATEWAY_CANCEL, false);\n   }\n \n@@ -77,7 +78,7 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n     // Should we use triggerName and triggerData, because message name expression can change?\n     String messageName = messageExecutionContext.getMessageName(execution);\n-    \n+\n     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n@@ -95,5 +96,5 @@ public class IntermediateCatchMessageEventActivityBehavior extends IntermediateC\n   public MessageExecutionContext getMessageExecutionContext() {\n     return messageExecutionContext;\n   }\n-  \n+\n }\n",
            "diff_size": 9
        }
    ]
}