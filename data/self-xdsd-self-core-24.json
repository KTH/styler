{
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "70",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public Contracts ofProject(final int projId) {\n        if(this.projectId == projId) {\n            return this;\n        }\n        throw new IllegalStateException(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/24/ProjectContracts.java\nindex cffc333c6e..76375758f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler/24/ProjectContracts.java\n@@ -67,7 +67,7 @@ public final class ProjectContracts implements Contracts {\n \n     @Override\n     public Contracts ofProject(final int projId) {\n-        if(this.projectId == projId) {\n+        if (this.projectId == projId) {\n             return this;\n         }\n         throw new IllegalStateException(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/24/ProjectContracts.java\nindex cffc333c6e..1a07a32422 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/intellij/24/ProjectContracts.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core.contracts;\n \n import com.selfxdsd.api.Contract;\n@@ -36,6 +37,7 @@ import java.util.stream.Collectors;\n  * this class <b>just represents</b> the contracts.\n  * The actual filtering has to be done in an upper layer,\n  * so we can take care of e.g. pagination.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n  * @since 0.0.1\n@@ -54,6 +56,7 @@ public final class ProjectContracts implements Contracts {\n \n     /**\n      * Constructor.\n+     *\n      * @param projectId Project ID.\n      * @param contracts Project's contracts.\n      */\n@@ -67,7 +70,7 @@ public final class ProjectContracts implements Contracts {\n \n     @Override\n     public Contracts ofProject(final int projId) {\n-        if(this.projectId == projId) {\n+        if (this.projectId == projId) {\n             return this;\n         }\n         throw new IllegalStateException(\n@@ -86,9 +89,9 @@ public final class ProjectContracts implements Contracts {\n                         .username()\n                         .equals(contributor.username())\n                         && contract\n-                            .contributor()\n-                            .provider()\n-                            .equals(contributor.provider());\n+                        .contributor()\n+                        .provider()\n+                        .equals(contributor.provider());\n                 }\n             )\n             .collect(Collectors.toList());\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'lambda arguments' has incorrect indentation level 16, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 20, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'final' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/24/ProjectContracts.java\nindex cffc333c6e..2a10afdac9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/naturalize/24/ProjectContracts.java\n@@ -71,41 +71,31 @@ public final class ProjectContracts implements Contracts {\n             return this;\n         }\n         throw new IllegalStateException(\n-            \"Already seeing the contracts of Project \" + this.projectId + \".\"\n-        );\n+            \"Already seeing the contracts of Project \" + this.projectId + \".\");\n     }\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        final List<Contract> ofContributor = this.contracts\n-            .stream()\n-            .filter(\n+        final List<Contract> ofContributor = this.contracts.stream().filter(\n                 contract -> {\n-                    return contract\n-                        .contributor()\n-                        .username()\n-                        .equals(contributor.username())\n-                        && contract\n-                            .contributor()\n-                            .provider()\n-                            .equals(contributor.provider());\n-                }\n-            )\n-            .collect(Collectors.toList());\n-        return new ContributorContracts(contributor, ofContributor);\n+                    return contract.contributor().username().equals(contributor.username())\n+                        && contract.contributor().provider().equals(contributor.provider());\n+    }\n+            ).collect(Collectors.toList());\n+return new ContributorContracts(contributor, ofContributor);\n     }\n \n     @Override\n     public Contract addContract(final int projectId,\n-                                final String contributorUsername,\n+final String contributorUsername,\n                                 final String contributorProvider,\n                                 final BigDecimal hourlyRate,\n                                 final String role) {\n-        throw new UnsupportedOperationException(\"Not yet implemented\");\n+    throw new UnsupportedOperationException(\"Not yet implemented\");\n     }\n \n     @Override\n     public Iterator<Contract> iterator() {\n         return this.contracts.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 40, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 36, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 80, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 76, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/24/ProjectContracts.java\nindex cffc333c6e..bc917a91d2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/codebuff/24/ProjectContracts.java\n@@ -25,7 +25,6 @@ package com.selfxdsd.core.contracts;\n import com.selfxdsd.api.Contract;\n import com.selfxdsd.api.Contracts;\n import com.selfxdsd.api.Contributor;\n-\n import java.math.BigDecimal;\n import java.util.Iterator;\n import java.util.List;\n@@ -40,16 +39,22 @@ import java.util.stream.Collectors;\n  * @version $Id$\n  * @since 0.0.1\n  */\n+\n+\n public final class ProjectContracts implements Contracts {\n \n     /**\n      * ID of the Project.\n      */\n+\n+\n     private final int projectId;\n \n     /**\n      * The project's contracts.\n      */\n+\n+\n     private final List<Contract> contracts;\n \n     /**\n@@ -57,41 +62,27 @@ public final class ProjectContracts implements Contracts {\n      * @param projectId Project ID.\n      * @param contracts Project's contracts.\n      */\n-    public ProjectContracts(\n-        final int projectId,\n-        final List<Contract> contracts\n-    ) {\n+\n+\n+    public ProjectContracts(final int projectId, final List<Contract> contracts) {\n         this.projectId = projectId;\n         this.contracts = contracts;\n     }\n \n     @Override\n     public Contracts ofProject(final int projId) {\n-        if(this.projectId == projId) {\n-            return this;\n-        }\n+        if(this.projectId== projId) {\n+                                        return this;\n+                                    }\n         throw new IllegalStateException(\n-            \"Already seeing the contracts of Project \" + this.projectId + \".\"\n-        );\n+            \"Already seeing the contracts of Project \" + this.projectId + \".\");\n     }\n \n     @Override\n     public Contracts ofContributor(final Contributor contributor) {\n-        final List<Contract> ofContributor = this.contracts\n-            .stream()\n-            .filter(\n-                contract -> {\n-                    return contract\n-                        .contributor()\n-                        .username()\n-                        .equals(contributor.username())\n-                        && contract\n-                            .contributor()\n-                            .provider()\n-                            .equals(contributor.provider());\n-                }\n-            )\n-            .collect(Collectors.toList());\n+        final List<Contract> ofContributor = this.contracts.stream().filter(contract-> {\n+                                                                                return contract.contributor().username().equals(contributor.username())&& contract.contributor().provider().equals(contributor.provider());\n+                                                                            }).collect(Collectors.toList());\n         return new ContributorContracts(contributor, ofContributor);\n     }\n \n@@ -99,13 +90,13 @@ public final class ProjectContracts implements Contracts {\n     public Contract addContract(final int projectId,\n                                 final String contributorUsername,\n                                 final String contributorProvider,\n-                                final BigDecimal hourlyRate,\n-                                final String role) {\n-        throw new UnsupportedOperationException(\"Not yet implemented\");\n+                                final BigDecimal hourlyRate, final String role) {\n+        throw new UnsupportedOperationException(\n+            \"Not yet implemented\");\n     }\n \n     @Override\n     public Iterator<Contract> iterator() {\n         return this.contracts.iterator();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/24/ProjectContracts.java\nindex cffc333c6e..76375758f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_random/24/ProjectContracts.java\n@@ -67,7 +67,7 @@ public final class ProjectContracts implements Contracts {\n \n     @Override\n     public Contracts ofProject(final int projId) {\n-        if(this.projectId == projId) {\n+        if (this.projectId == projId) {\n             return this;\n         }\n         throw new IllegalStateException(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/24/ProjectContracts.java\nindex cffc333c6e..76375758f4 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/errored/1/24/ProjectContracts.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/self-xdsd-self-core/styler_three_grams/24/ProjectContracts.java\n@@ -67,7 +67,7 @@ public final class ProjectContracts implements Contracts {\n \n     @Override\n     public Contracts ofProject(final int projId) {\n-        if(this.projectId == projId) {\n+        if (this.projectId == projId) {\n             return this;\n         }\n         throw new IllegalStateException(\n",
            "diff_size": 1
        }
    ]
}