{
    "error_id": "657",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/657/TrainSample.java\nindex 91982d7f50..5fce36858f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/657/TrainSample.java\n@@ -17,48 +17,48 @@\n package com.tencent.angel.ml.feature;\n \n public class TrainSample {\n-  private double target;\n-  private final long[] colmunValues;\n+    private double target;\n+    private final long[] colmunValues;\n \n-  public TrainSample(int length) {\n-    colmunValues = new long[length];\n-    setTarget(0);\n-  }\n+    public TrainSample(int length) {\n+        colmunValues = new long[length];\n+        setTarget(0);\n+    }\n \n-  public TrainSample(double y, long[] values) {\n-    target = y;\n-    colmunValues = values;\n-  }\n+    public TrainSample(double y, long[] values) {\n+        target = y;\n+        colmunValues = values;\n+    }\n \n-  public void setColumnValue(int index, int value) {\n-    colmunValues[index] = value;\n-  }\n+    public void setColumnValue(int index, int value) {\n+        colmunValues[index] = value;\n+    }\n \n-  public void setColumnValue(int index, long value) {\n-    colmunValues[index] = value;\n-  }\n+    public void setColumnValue(int index, long value) {\n+        colmunValues[index] = value;\n+    }\n \n-  public void setColumnValue(int index, float value) {\n-    colmunValues[index] = (long) value;\n-  }\n+    public void setColumnValue(int index, float value) {\n+        colmunValues[index] = (long) value;\n+    }\n \n-  public void setColumnValue(int index, double value) {\n-    colmunValues[index] = (long) value;\n-  }\n+    public void setColumnValue(int index, double value) {\n+        colmunValues[index] = (long) value;\n+    }\n \n-  public void setColumnValue(int index, String value) {\n-    colmunValues[index] = Long.valueOf(value);\n-  }\n+    public void setColumnValue(int index, String value) {\n+        colmunValues[index] = Long.valueOf(value);\n+    }\n \n-  public long[] getValues() {\n-    return colmunValues;\n-  }\n+    public long[] getValues() {\n+        return colmunValues;\n+    }\n \n-  public double getTarget() {\n-    return target;\n-  }\n+    public double getTarget() {\n+        return target;\n+    }\n \n-  public void setTarget(double target) {\n-    this.target = target;\n-  }\n+    public void setTarget(double target) {\n+        this.target = target;\n+    }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/657/TrainSample.java\nindex 91982d7f50..a45111b3ca 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/657/TrainSample.java\n@@ -61,4 +61,4 @@ public class TrainSample {\n   public void setTarget(double target) {\n     this.target = target;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/657/TrainSample.java\nindex 91982d7f50..c88f1555f7 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/657/TrainSample.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/657/TrainSample.java\n@@ -16,49 +16,50 @@\n \n package com.tencent.angel.ml.feature;\n \n+\n public class TrainSample {\n-  private double target;\n-  private final long[] colmunValues;\n+    private double target;\n+    private final long[] colmunValues;\n \n-  public TrainSample(int length) {\n+    public TrainSample(int length) {\n     colmunValues = new long[length];\n     setTarget(0);\n-  }\n+    }\n \n-  public TrainSample(double y, long[] values) {\n+    public TrainSample(double y, long[] values) {\n     target = y;\n     colmunValues = values;\n-  }\n+    }\n \n-  public void setColumnValue(int index, int value) {\n+    public void setColumnValue(int index, int value) {\n     colmunValues[index] = value;\n-  }\n+    }\n \n-  public void setColumnValue(int index, long value) {\n+    public void setColumnValue(int index, long value) {\n     colmunValues[index] = value;\n-  }\n+    }\n \n-  public void setColumnValue(int index, float value) {\n+    public void setColumnValue(int index, float value) {\n     colmunValues[index] = (long) value;\n-  }\n+    }\n \n-  public void setColumnValue(int index, double value) {\n+    public void setColumnValue(int index, double value) {\n     colmunValues[index] = (long) value;\n-  }\n+    }\n \n-  public void setColumnValue(int index, String value) {\n+    public void setColumnValue(int index, String value) {\n     colmunValues[index] = Long.valueOf(value);\n-  }\n+    }\n \n-  public long[] getValues() {\n+    public long[] getValues() {\n     return colmunValues;\n-  }\n+    }\n \n-  public double getTarget() {\n+    public double getTarget() {\n     return target;\n-  }\n+    }\n \n-  public void setTarget(double target) {\n+    public void setTarget(double target) {\n     this.target = target;\n-  }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}