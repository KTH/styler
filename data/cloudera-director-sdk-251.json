{
    "error_id": "251",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/251/ValidationExceptionCondition.java\nindex aa88cc2dd2..6276c45aba 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/intellij/251/ValidationExceptionCondition.java\n@@ -20,148 +20,168 @@ package com.cloudera.director.client.v10.model;\n \n \n public class ValidationExceptionCondition {\n-  /* The optional key of the condition */\n-  private String key;\n-  /* The message of the condition */\n-  private String message;\n-  /* The scope of the condition */\n-  private String scope;\n-  /* The type of condition */\n-  private String type;\n-  public interface Type {\n-    String ERROR = \"ERROR\";\n-    String WARNING = \"WARNING\";\n-  }\n-  public ValidationExceptionCondition() { }\n-\n-  private ValidationExceptionCondition(String key, String message, String scope, String type) {\n-    this.key = key;\n-    this.message = message;\n-    this.scope = scope;\n-    this.type = type;\n-  }\n-\n-  private ValidationExceptionCondition(ValidationExceptionConditionBuilder builder) {\n-    this.key = builder.key;\n-    this.message = builder.message;\n-    this.scope = builder.scope;\n-    this.type = builder.type;\n-  }\n-\n-  public static ValidationExceptionConditionBuilder builder() {\n-    return new ValidationExceptionConditionBuilder();\n-  }\n-\n-  public static class ValidationExceptionConditionBuilder {\n-    private String key = null;\n-    private String message = null;\n-    private String scope = null;\n-    private String type = null;\n-\n-    public ValidationExceptionConditionBuilder key(String key) {\n-      this.key = key;\n-      return this;\n-    }\n-\n-    public ValidationExceptionConditionBuilder message(String message) {\n-      this.message = message;\n-      return this;\n-    }\n-\n-    public ValidationExceptionConditionBuilder scope(String scope) {\n-      this.scope = scope;\n-      return this;\n-    }\n-\n-    public ValidationExceptionConditionBuilder type(String type) {\n-      this.type = type;\n-      return this;\n-    }\n-\n-    public ValidationExceptionCondition build() {\n-      return new ValidationExceptionCondition(this);\n-    }\n-  }\n-\n-  public ValidationExceptionConditionBuilder toBuilder() {\n-    return builder()\n-      .key(key)\n-      .message(message)\n-      .scope(scope)\n-      .type(type)\n-      ;\n-  }\n-  public String getKey() {\n-    return key;\n-  }\n-  public void setKey(String key) {\n-    this.key = key;\n-  }\n-\n-  public String getMessage() {\n-    return message;\n-  }\n-  public void setMessage(String message) {\n-    this.message = message;\n-  }\n-\n-  public String getScope() {\n-    return scope;\n-  }\n-  public void setScope(String scope) {\n-    this.scope = scope;\n-  }\n-\n-  public String getType() {\n-    return type;\n-  }\n-  public void setType(String type) {\n-    this.type = type;\n-  }\n-\n-  @Override\n-  public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    ValidationExceptionCondition other = (ValidationExceptionCondition) o; // NOPMD\n-\n-    if (key != null ?\n-        !key.equals(other.key) :\n-        other.key != null) return false;\n-    if (message != null ?\n-        !message.equals(other.message) :\n-        other.message != null) return false;\n-    if (scope != null ?\n-        !scope.equals(other.scope) :\n-        other.scope != null) return false;\n-    if (type != null ?\n-        !type.equals(other.type) :\n-        other.type != null) return false;\n-    return true;\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    int result = 0;\n-    result = 31 * result + (key != null ? key.hashCode() : 0);\n-    result = 31 * result + (message != null ? message.hashCode() : 0);\n-    result = 31 * result + (scope != null ? scope.hashCode() : 0);\n-    result = 31 * result + (type != null ? type.hashCode() : 0);\n-    return result;\n-  }\n-\n-  @Override\n-  public String toString()  {\n-    StringBuilder sb = new StringBuilder();\n-    String newLine = System.getProperty(\"line.separator\");\n-    sb.append(\"class ValidationExceptionCondition {\" + newLine);\n-    sb.append(\"  key: \").append(key).append(newLine);\n-    sb.append(\"  message: \").append(message).append(newLine);\n-    sb.append(\"  scope: \").append(scope).append(newLine);\n-    sb.append(\"  type: \").append(type).append(newLine);\n-    sb.append(\"}\" + newLine);\n-    return sb.toString();\n-  }\n+    /* The optional key of the condition */\n+    private String key;\n+    /* The message of the condition */\n+    private String message;\n+    /* The scope of the condition */\n+    private String scope;\n+    /* The type of condition */\n+    private String type;\n+\n+    public interface Type {\n+        String ERROR = \"ERROR\";\n+        String WARNING = \"WARNING\";\n+    }\n+\n+    public ValidationExceptionCondition() {\n+    }\n+\n+    private ValidationExceptionCondition(String key, String message, String scope, String type) {\n+        this.key = key;\n+        this.message = message;\n+        this.scope = scope;\n+        this.type = type;\n+    }\n+\n+    private ValidationExceptionCondition(ValidationExceptionConditionBuilder builder) {\n+        this.key = builder.key;\n+        this.message = builder.message;\n+        this.scope = builder.scope;\n+        this.type = builder.type;\n+    }\n+\n+    public static ValidationExceptionConditionBuilder builder() {\n+        return new ValidationExceptionConditionBuilder();\n+    }\n+\n+    public static class ValidationExceptionConditionBuilder {\n+        private String key = null;\n+        private String message = null;\n+        private String scope = null;\n+        private String type = null;\n+\n+        public ValidationExceptionConditionBuilder key(String key) {\n+            this.key = key;\n+            return this;\n+        }\n+\n+        public ValidationExceptionConditionBuilder message(String message) {\n+            this.message = message;\n+            return this;\n+        }\n+\n+        public ValidationExceptionConditionBuilder scope(String scope) {\n+            this.scope = scope;\n+            return this;\n+        }\n+\n+        public ValidationExceptionConditionBuilder type(String type) {\n+            this.type = type;\n+            return this;\n+        }\n+\n+        public ValidationExceptionCondition build() {\n+            return new ValidationExceptionCondition(this);\n+        }\n+    }\n+\n+    public ValidationExceptionConditionBuilder toBuilder() {\n+        return builder()\n+            .key(key)\n+            .message(message)\n+            .scope(scope)\n+            .type(type)\n+            ;\n+    }\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(String key) {\n+        this.key = key;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public String getScope() {\n+        return scope;\n+    }\n+\n+    public void setScope(String scope) {\n+        this.scope = scope;\n+    }\n+\n+    public String getType() {\n+        return type;\n+    }\n+\n+    public void setType(String type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+\n+        ValidationExceptionCondition other = (ValidationExceptionCondition) o; // NOPMD\n+\n+        if (key != null ?\n+            !key.equals(other.key) :\n+            other.key != null) {\n+            return false;\n+        }\n+        if (message != null ?\n+            !message.equals(other.message) :\n+            other.message != null) {\n+            return false;\n+        }\n+        if (scope != null ?\n+            !scope.equals(other.scope) :\n+            other.scope != null) {\n+            return false;\n+        }\n+        if (type != null ?\n+            !type.equals(other.type) :\n+            other.type != null) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = 0;\n+        result = 31 * result + (key != null ? key.hashCode() : 0);\n+        result = 31 * result + (message != null ? message.hashCode() : 0);\n+        result = 31 * result + (scope != null ? scope.hashCode() : 0);\n+        result = 31 * result + (type != null ? type.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        String newLine = System.getProperty(\"line.separator\");\n+        sb.append(\"class ValidationExceptionCondition {\" + newLine);\n+        sb.append(\"  key: \").append(key).append(newLine);\n+        sb.append(\"  message: \").append(message).append(newLine);\n+        sb.append(\"  scope: \").append(scope).append(newLine);\n+        sb.append(\"  type: \").append(type).append(newLine);\n+        sb.append(\"}\" + newLine);\n+        return sb.toString();\n+    }\n }\n \n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "118",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "120",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "19",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "124",
                    "column": "18",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/251/ValidationExceptionCondition.java\nindex aa88cc2dd2..8458e7148c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/naturalize/251/ValidationExceptionCondition.java\n@@ -1,24 +1,8 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v10.model;\n \n-\n public class ValidationExceptionCondition {\n   /* The optional key of the condition */\n   private String key;\n@@ -28,11 +12,13 @@ public class ValidationExceptionCondition {\n   private String scope;\n   /* The type of condition */\n   private String type;\n-  public interface Type {\n+\n+public interface Type {\n     String ERROR = \"ERROR\";\n     String WARNING = \"WARNING\";\n   }\n-  public ValidationExceptionCondition() { }\n+\n+public ValidationExceptionCondition() { }\n \n   private ValidationExceptionCondition(String key, String message, String scope, String type) {\n     this.key = key;\n@@ -53,7 +39,8 @@ public class ValidationExceptionCondition {\n   }\n \n   public static class ValidationExceptionConditionBuilder {\n-    private String key = null;\n+\n+  private String key = null;\n     private String message = null;\n     private String scope = null;\n     private String type = null;\n@@ -84,14 +71,13 @@ public class ValidationExceptionCondition {\n   }\n \n   public ValidationExceptionConditionBuilder toBuilder() {\n-    return builder()\n-      .key(key)\n+    return builder().key(key)\n       .message(message)\n       .scope(scope)\n-      .type(type)\n-      ;\n+      .type(type);\n   }\n-  public String getKey() {\n+\n+public String getKey() {\n     return key;\n   }\n   public void setKey(String key) {\n@@ -122,22 +108,20 @@ public class ValidationExceptionCondition {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    ValidationExceptionCondition other = (ValidationExceptionCondition) o; // NOPMD\n-\n-    if (key != null ?\n-        !key.equals(other.key) :\n-        other.key != null) return false;\n-    if (message != null ?\n-        !message.equals(other.message) :\n-        other.message != null) return false;\n-    if (scope != null ?\n-        !scope.equals(other.scope) :\n-        other.scope != null) return false;\n-    if (type != null ?\n-        !type.equals(other.type) :\n-        other.type != null) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    ValidationExceptionCondition other = (ValidationExceptionCondition) o;\n+\n+// NOPMD\n+\n+    if (key != null ?!key.equals(other.key) : other.key != null) return false;\n+\n+if (message != null ?!message.equals(other.message) : other.message != null) return false;\n+\n+if (scope != null ?!scope.equals(other.scope) : other.scope != null) return false;\n+\n+if (type != null ?!type.equals(other.type) : other.type != null) return false;\n     return true;\n   }\n \n@@ -152,7 +136,7 @@ public class ValidationExceptionCondition {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class ValidationExceptionCondition {\" + newLine);\n@@ -163,5 +147,4 @@ public class ValidationExceptionCondition {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "42",
                    "column": "43",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "42",
                    "column": "44",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "144",
                    "column": "71",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "146",
                    "column": "43",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "24",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "24",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "55",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "column": "22",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "column": "22",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "column": "49",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "46",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "39",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "160",
                    "column": "55",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "column": "43",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "column": "63",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "41",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "17",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "40",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "57",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/251/ValidationExceptionCondition.java\nindex aa88cc2dd2..c511f80698 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/errored/1/251/ValidationExceptionCondition.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/cloudera-director-sdk/codebuff/251/ValidationExceptionCondition.java\n@@ -18,141 +18,155 @@\n \n package com.cloudera.director.client.v10.model;\n \n-\n public class ValidationExceptionCondition {\n   /* The optional key of the condition */\n-  private String key;\n+\n+    private String key;\n   /* The message of the condition */\n-  private String message;\n+\n+    private String message;\n   /* The scope of the condition */\n-  private String scope;\n+\n+    private String scope;\n   /* The type of condition */\n-  private String type;\n-  public interface Type {\n-    String ERROR = \"ERROR\";\n-    String WARNING = \"WARNING\";\n-  }\n-  public ValidationExceptionCondition() { }\n-\n-  private ValidationExceptionCondition(String key, String message, String scope, String type) {\n-    this.key = key;\n-    this.message = message;\n-    this.scope = scope;\n-    this.type = type;\n-  }\n \n-  private ValidationExceptionCondition(ValidationExceptionConditionBuilder builder) {\n-    this.key = builder.key;\n-    this.message = builder.message;\n-    this.scope = builder.scope;\n-    this.type = builder.type;\n-  }\n+    private String type;\n+\n+    public interface Type {\n+String ERROR = \"ERROR\";\n+\n+\n+String WARNING = \"WARNING\";\n+    }\n+\n+    public ValidationExceptionCondition() {}\n \n-  public static ValidationExceptionConditionBuilder builder() {\n+    private ValidationExceptionCondition(String key, String message, String scope, String type) {\n+                                                                                                this.key = key;\n+                                                                                                this.message = message;\n+                                                                                                this.scope = scope;\n+                                                                                                this.type = type;\n+                                          }\n+\n+    private ValidationExceptionCondition(ValidationExceptionConditionBuilder builder) {\n+                                                                                      this.key = builder.key;\n+                                                                                      this.message = builder.message;\n+                                                                                      this.scope = builder.scope;\n+                                                                                      this.type = builder.type;\n+                                          }\n+\n+    public static ValidationExceptionConditionBuilder builder() {\n     return new ValidationExceptionConditionBuilder();\n-  }\n+    }\n+\n+    public static class ValidationExceptionConditionBuilder {\n \n-  public static class ValidationExceptionConditionBuilder {\n     private String key = null;\n+\n     private String message = null;\n+\n     private String scope = null;\n+\n     private String type = null;\n \n     public ValidationExceptionConditionBuilder key(String key) {\n-      this.key = key;\n-      return this;\n+        this.key = key;\n+        return this;\n     }\n \n     public ValidationExceptionConditionBuilder message(String message) {\n-      this.message = message;\n-      return this;\n+        this.message = message;\n+        return this;\n     }\n \n     public ValidationExceptionConditionBuilder scope(String scope) {\n-      this.scope = scope;\n-      return this;\n+        this.scope = scope;\n+        return this;\n     }\n \n     public ValidationExceptionConditionBuilder type(String type) {\n-      this.type = type;\n-      return this;\n+        this.type = type;\n+        return this;\n     }\n \n     public ValidationExceptionCondition build() {\n-      return new ValidationExceptionCondition(this);\n-    }\n-  }\n-\n-  public ValidationExceptionConditionBuilder toBuilder() {\n-    return builder()\n-      .key(key)\n-      .message(message)\n-      .scope(scope)\n-      .type(type)\n-      ;\n-  }\n-  public String getKey() {\n+        return new ValidationExceptionCondition(this);\n+    }\n+    }\n+\n+    public ValidationExceptionConditionBuilder toBuilder() {\n+    return builder().key(key)\n+                    .message(message)\n+                    .scope(scope)\n+                    .type(type);\n+    }\n+\n+    public String getKey() {\n     return key;\n-  }\n-  public void setKey(String key) {\n+    }\n+\n+    public void setKey(String key) {\n     this.key = key;\n-  }\n+    }\n \n-  public String getMessage() {\n+    public String getMessage() {\n     return message;\n-  }\n-  public void setMessage(String message) {\n+    }\n+\n+    public void setMessage(String message) {\n     this.message = message;\n-  }\n+    }\n \n-  public String getScope() {\n+    public String getScope() {\n     return scope;\n-  }\n-  public void setScope(String scope) {\n+    }\n+\n+    public void setScope(String scope) {\n     this.scope = scope;\n-  }\n+    }\n \n-  public String getType() {\n+    public String getType() {\n     return type;\n-  }\n-  public void setType(String type) {\n+    }\n+\n+    public void setType(String type) {\n     this.type = type;\n-  }\n+    }\n+\n \n-  @Override\n-  public boolean equals(Object o) {\n+    @Override\n+    public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n-\n-    ValidationExceptionCondition other = (ValidationExceptionCondition) o; // NOPMD\n-\n-    if (key != null ?\n-        !key.equals(other.key) :\n-        other.key != null) return false;\n-    if (message != null ?\n-        !message.equals(other.message) :\n-        other.message != null) return false;\n-    if (scope != null ?\n-        !scope.equals(other.scope) :\n-        other.scope != null) return false;\n-    if (type != null ?\n-        !type.equals(other.type) :\n-        other.type != null) return false;\n+\n+    if (o == null ||\n+        getClass() != o.getClass()) return false;\n+\n+    ValidationExceptionCondition other = (ValidationExceptionCondition)o; // NOPMD\n+\n+    if (key != null?!key.equals(other.key): other.key != null) return false;\n+\n+    if (message != null?!message.equals(other.message): other.message != null) return false;\n+\n+    if (scope != null?!scope.equals(other.scope): other.scope != null) return false;\n+\n+    if (type != null?!type.equals(other.type): other.type != null) return false;\n     return true;\n-  }\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (key != null ? key.hashCode() : 0);\n-    result = 31 * result + (message != null ? message.hashCode() : 0);\n-    result = 31 * result + (scope != null ? scope.hashCode() : 0);\n-    result = 31 * result + (type != null ? type.hashCode() : 0);\n+    result = 31 *result + (key != null? key.hashCode(): 0);\n+    result = 31 *result + (message != null? message.hashCode(): 0);\n+    result = 31 *result + (scope != null? scope.hashCode(): 0);\n+    result = 31 *result + (type != null? type.hashCode(): 0);\n     return result;\n-  }\n+    }\n \n-  @Override\n-  public String toString()  {\n+\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class ValidationExceptionCondition {\" + newLine);\n@@ -162,6 +176,5 @@ public class ValidationExceptionCondition {\n     sb.append(\"  type: \").append(type).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n-  }\n-}\n-\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 126
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}