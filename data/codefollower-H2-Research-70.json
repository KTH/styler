{
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "90",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        session.commit(true);\n        Database db = session.getDatabase();\n        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n        }\n        if (db.findUser(userName) != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "90",
                    "column": "24",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/70/CreateUser.java\nindex d449beaa8d..065bf14d9c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler/70/CreateUser.java\n@@ -87,7 +87,7 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        if (db.findRole( userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n             throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/70/CreateUser.java\nindex d449beaa8d..3a0cb7dfb9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/intellij/70/CreateUser.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -48,10 +49,10 @@ public class CreateUser extends DefineCommand {\n     /**\n      * Set the salt and hash for the given user.\n      *\n-     * @param user the user\n+     * @param user    the user\n      * @param session the session\n-     * @param salt the salt\n-     * @param hash the hash\n+     * @param salt    the salt\n+     * @param hash    the hash\n      */\n     static void setSaltAndHash(User user, Session session, Expression salt, Expression hash) {\n         user.setSaltAndHash(getByteArray(session, salt), getByteArray(session, hash));\n@@ -65,8 +66,8 @@ public class CreateUser extends DefineCommand {\n     /**\n      * Set the password for the given user.\n      *\n-     * @param user the user\n-     * @param session the session\n+     * @param user     the user\n+     * @param session  the session\n      * @param password the password\n      */\n     static void setPassword(User user, Session session, Expression password) {\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/70/CreateUser.java\nindex d449beaa8d..7db1e81a38 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/naturalize/70/CreateUser.java\n@@ -87,7 +87,8 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        if (db.findRole(userName) != null) {\n+    //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n             throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n@@ -132,4 +133,4 @@ public class CreateUser extends DefineCommand {\n         return CommandInterface.CREATE_USER;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/70/CreateUser.java\nindex d449beaa8d..4530ada9d2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/codebuff/70/CreateUser.java\n@@ -19,6 +19,8 @@ import org.h2.util.StringUtils;\n  * This class represents the statement\n  * CREATE USER\n  */\n+\n+\n public class CreateUser extends DefineCommand {\n \n     private String userName;\n@@ -33,14 +35,17 @@ public class CreateUser extends DefineCommand {\n         super(session);\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setUserName(String userName) {\n         this.userName = userName;\n     }\n \n+\n     public void setPassword(Expression password) {\n         this.password = password;\n     }\n@@ -53,8 +58,11 @@ public class CreateUser extends DefineCommand {\n      * @param salt the salt\n      * @param hash the hash\n      */\n+\n+\n     static void setSaltAndHash(User user, Session session, Expression salt, Expression hash) {\n-        user.setSaltAndHash(getByteArray(session, salt), getByteArray(session, hash));\n+        user.setSaltAndHash(getByteArray(session, salt),\n+getByteArray(session, hash));\n     }\n \n     private static byte[] getByteArray(Session session, Expression e) {\n@@ -69,6 +77,8 @@ public class CreateUser extends DefineCommand {\n      * @param session the session\n      * @param password the password\n      */\n+\n+\n     static void setPassword(User user, Session session, Expression password) {\n         String pwd = password.optimize(session).getValue(session).getString();\n         char[] passwordChars = pwd == null ? new char[0] : pwd.toCharArray();\n@@ -111,18 +121,22 @@ public class CreateUser extends DefineCommand {\n         return 0;\n     }\n \n+\n     public void setSalt(Expression e) {\n         salt = e;\n     }\n \n+\n     public void setHash(Expression e) {\n         hash = e;\n     }\n \n+\n     public void setAdmin(boolean b) {\n         admin = b;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n@@ -132,4 +146,4 @@ public class CreateUser extends DefineCommand {\n         return CommandInterface.CREATE_USER;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "90",
                    "column": "12",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "36",
                    "severity": "warning",
                    "message": "'!=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/70/CreateUser.java\nindex d449beaa8d..59aa7dcc8f 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_random/70/CreateUser.java\n@@ -87,49 +87,51 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n-            throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n-        }\n-        if (db.findUser(userName) != null) {\n-            if (ifNotExists) {\n-                return 0;\n-            }\n-            throw DbException.get(ErrorCode.USER_ALREADY_EXISTS_1, userName);\n-        }\n-        int id = getObjectId();\n-        User user = new User(db, id, userName, false);\n-        user.setAdmin(admin);\n-        user.setComment(comment);\n-        if (hash != null && salt != null) {\n-            setSaltAndHash(user, session, salt, hash);\n-        } else if (password != null) {\n-            setPassword(user, session, password);\n-        } else {\n-            throw DbException.throwInternalError();\n-        }\n-        db.addDatabaseObject(session, user);\n-        return 0;\n-    }\n-\n-    public void setSalt(Expression e) {\n-        salt = e;\n-    }\n-\n-    public void setHash(Expression e) {\n-        hash = e;\n-    }\n-\n-    public void setAdmin(boolean b) {\n-        admin = b;\n-    }\n-\n-    public void setComment(String comment) {\n-        this.comment = comment;\n-    }\n-\n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_USER;\n-    }\n-\n-}\n+        if ( db.findRole(userName) !=null){\n+            //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        throwDbException .get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n+         }\n+         if (db.findUser(userName) != null) {\n+             if (ifNotExists) {\n+                 return 0;\n+             }\n+             throw DbException.get(ErrorCode.USER_ALREADY_EXISTS_1, userName);\n+         }\n+         int id = getObjectId();\n+         User user = new User(db, id, userName, false);\n+         user.setAdmin(admin);\n+         user.setComment(comment);\n+         if (hash != null && salt != null) {\n+             setSaltAndHash(user, session, salt, hash);\n+         } else if (password != null) {\n+             setPassword(user, session, password);\n+         } else {\n+             throw DbException.throwInternalError();\n+         }\n+         db.addDatabaseObject(session, user);\n+         return 0;\n+     }\n+\n+     public void setSalt(Expression e) {\n+         salt = e;\n+     }\n+\n+     public void setHash(Expression e) {\n+         hash = e;\n+     }\n+\n+     public void setAdmin(boolean b) {\n+         admin = b;\n+     }\n+\n+     public void setComment(String comment) {\n+         this.comment = comment;\n+     }\n+\n+     @Override\n+     public int getType() {\n+         return CommandInterface.CREATE_USER;\n+     }\n+\n+ }\n+ \n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                },
                {
                    "line": "90",
                    "column": "24",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/70/CreateUser.java\nindex d449beaa8d..065bf14d9c 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/errored/1/70/CreateUser.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/codefollower-H2-Research/styler_three_grams/70/CreateUser.java\n@@ -87,7 +87,7 @@ public class CreateUser extends DefineCommand {\n         session.getUser().checkAdmin();\n         session.commit(true);\n         Database db = session.getDatabase();\n-        if (db.findRole(userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n+        if (db.findRole( userName) != null) { //\u89d2\u8272\u540d\u548c\u7528\u6237\u540d\u4e0d\u80fd\u4e00\u6837\n             throw DbException.get(ErrorCode.ROLE_ALREADY_EXISTS_1, userName);\n         }\n         if (db.findUser(userName) != null) {\n",
            "diff_size": 1
        }
    ]
}