{
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n    @NotBlank(message = \"Value is required\")\n    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n    private String value;\n\n    @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..873ca9c1b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler/47/ChangeConfigurationParams.java\n@@ -27,7 +27,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..dd60029aa9 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/intellij/47/ChangeConfigurationParams.java\n@@ -27,7 +27,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n@@ -68,10 +68,11 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         PREDEFINED(\"Predefined\"),\n         CUSTOM(\"Custom\");\n \n-        @Getter private final String value;\n+        @Getter\n+        private final String value;\n \n         public static ConfigurationKeyType fromValue(String v) {\n-            for (ConfigurationKeyType c: ConfigurationKeyType.values()) {\n+            for (ConfigurationKeyType c : ConfigurationKeyType.values()) {\n                 if (c.value.equals(v)) {\n                     return c;\n                 }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..872dd947fd 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/naturalize/47/ChangeConfigurationParams.java\n@@ -27,10 +27,10 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n-    private String value;\n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n+private String value;\n \n-    @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n+@AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n     public boolean isValidCustom() {\n         if (keyType == ConfigurationKeyType.CUSTOM) {\n             return !Strings.isNullOrEmpty(customConfKey);\n@@ -80,4 +80,4 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..5d6d6b3bf6 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/codebuff/47/ChangeConfigurationParams.java\n@@ -6,7 +6,6 @@ import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n import org.hibernate.validator.constraints.NotBlank;\n-\n import javax.validation.constraints.AssertTrue;\n import javax.validation.constraints.NotNull;\n import javax.validation.constraints.Pattern;\n@@ -15,21 +14,18 @@ import javax.validation.constraints.Pattern;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 08.03.2018\n  */\n+\n+\n @Getter\n @Setter\n public class ChangeConfigurationParams extends MultipleChargePointSelect {\n-\n     private String confKey;\n-\n     private String customConfKey;\n-\n     @NotNull(message = \"Key type is required\")\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n-\n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n-\n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n     public boolean isValidCustom() {\n         if (keyType == ConfigurationKeyType.CUSTOM) {\n@@ -52,8 +48,8 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         if (keyType == ConfigurationKeyType.PREDEFINED) {\n             return confKey;\n         } else if (keyType == ConfigurationKeyType.CUSTOM) {\n-            return customConfKey;\n-        }\n+                   return customConfKey;\n+               }\n \n         // This should not happen\n         throw new SteveException(\"Cannot determine key (KeyType in illegal state)\");\n@@ -71,7 +67,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         @Getter private final String value;\n \n         public static ConfigurationKeyType fromValue(String v) {\n-            for (ConfigurationKeyType c: ConfigurationKeyType.values()) {\n+            for (ConfigurationKeyType c : ConfigurationKeyType.values()) {\n                 if (c.value.equals(v)) {\n                     return c;\n                 }\n@@ -79,5 +75,4 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n             throw new IllegalArgumentException(v);\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..873ca9c1b2 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_random/47/ChangeConfigurationParams.java\n@@ -27,7 +27,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "61",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "29",
                    "column": "61",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "29",
                    "column": "68",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "29",
                    "column": "76",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "29",
                    "column": "76",
                    "severity": "error",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/47/ChangeConfigurationParams.java\nindex 7ca48b1ed1..1d0343b052 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/errored/1/47/ChangeConfigurationParams.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/RWTH-i5-IDSG-steve/styler_three_grams/47/ChangeConfigurationParams.java\n@@ -26,8 +26,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     @NotNull(message = \"Key type is required\")\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n-    @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @NotBlank(message = \"Value is required\") @Pattern(regexp=\"\\\\S+\",message=\"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 2
        }
    ]
}