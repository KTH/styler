{
    "error_id": "609",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/609/TextColumnFormat.java\nindex 24caf11a72..c857288a57 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/intellij/609/TextColumnFormat.java\n@@ -25,188 +25,205 @@ import java.io.IOException;\n  * Text format: column id + sep + row1 element + sep + row2 element + sep + ...\n  */\n public class TextColumnFormat extends ColumnFormat {\n-  public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    public String sep = \",\";\n+\n+    @Override\n+    public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(col.colId);\n-    sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(col.colId);\n         sb.append(sep);\n-      }\n-    }\n-    sb.append(\"\\n\");\n-    output.writeBytes(sb.toString());\n-  }\n-\n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n-    }\n-  }\n-\n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n-    String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n-    col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n-    }\n-  }\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            sb.append(col.colElems[i]);\n+            if (i < col.colElems.length - 1) {\n+                sb.append(sep);\n+            }\n+        }\n+        sb.append(\"\\n\");\n+        output.writeBytes(sb.toString());\n+    }\n+\n+    @Override\n+    public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Integer.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Integer.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Integer.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Integer.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Long.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Long.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Long.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n+        }\n+    }\n+\n+    @Override\n+    public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+        String line = input.readLine();\n+        String[] subStrs = line.split(sep);\n+        col.colId = Long.valueOf(subStrs[0]);\n+        for (int i = 0; i < col.colElems.length; i++) {\n+            col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n+        }\n+    }\n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/609/TextColumnFormat.java\nindex 24caf11a72..d623690c97 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/naturalize/609/TextColumnFormat.java\n@@ -26,13 +26,14 @@ import java.io.IOException;\n  */\n public class TextColumnFormat extends ColumnFormat {\n   public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -40,13 +41,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -54,13 +56,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -68,13 +71,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -82,13 +86,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -96,13 +101,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -110,13 +116,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -124,13 +131,14 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+  @Override\n+public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n       sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+      if (i < col.colElems.length - 1) {\n         sb.append(sep);\n       }\n     }\n@@ -138,75 +146,83 @@ public class TextColumnFormat extends ColumnFormat {\n     output.writeBytes(sb.toString());\n   }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Float.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Double.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Integer.valueOf(subStrs[i+ 1]);\n     }\n   }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+  @Override\n+public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+      col.colElems[i] = Long.valueOf(subStrs[i+ 1]);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/609/TextColumnFormat.java\nindex 24caf11a72..0b9fc67bec 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/errored/1/609/TextColumnFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Angel-ML-angel/codebuff/609/TextColumnFormat.java\n@@ -24,189 +24,208 @@ import java.io.IOException;\n /**\n  * Text format: column id + sep + row1 element + sep + row2 element + sep + ...\n  */\n+\n public class TextColumnFormat extends ColumnFormat {\n-  public String sep = \",\";\n-  @Override public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n+\n+    public String sep = \",\";\n+\n+    @Override\n+    public void save(IntFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(IntDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(IntIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(IntLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(LongFloatsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(LongDoublesCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(LongIntsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(LongLongsCol col, DataOutputStream output) throws IOException {\n     StringBuilder sb = new StringBuilder();\n     sb.append(col.colId);\n     sb.append(sep);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      sb.append(col.colElems[i]);\n-      if(i < col.colElems.length - 1) {\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        sb.append(col.colElems[i]);\n+        if (i < col.colElems.length - 1) {\n         sb.append(sep);\n-      }\n+        }\n     }\n     sb.append(\"\\n\");\n     output.writeBytes(sb.toString());\n-  }\n+    }\n \n-  @Override public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(IntFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(IntDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(IntIntsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(IntIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(IntLongsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(IntLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Integer.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(LongFloatsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Float.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Float.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(LongDoublesCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Double.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Double.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(LongIntsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(LongIntsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Integer.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Integer.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n \n-  @Override public void load(LongLongsCol col, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(LongLongsCol col, DataInputStream input) throws IOException {\n     String line = input.readLine();\n-    String [] subStrs = line.split(sep);\n+    String[] subStrs = line.split(sep);\n     col.colId = Long.valueOf(subStrs[0]);\n-    for(int i = 0; i < col.colElems.length; i++) {\n-      col.colElems[i] = Long.valueOf(subStrs[i+1]);\n+    for (int i = 0; i < col.colElems.length; i++) {\n+        col.colElems[i] = Long.valueOf(subStrs[i + 1]);\n+    }\n     }\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ]
}