{
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.model;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/60/ActivitiListener.java\nindex fa8e48c9e5..e2b2bb0c64 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler/60/ActivitiListener.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/60/ActivitiListener.java\nindex fa8e48c9e5..9c0ff3d361 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/intellij/60/ActivitiListener.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n@@ -22,97 +23,97 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class ActivitiListener extends BaseElement {\n \n-  protected String event;\n-  protected String implementationType;\n-  protected String implementation;\n-  protected List<FieldExtension> fieldExtensions = new ArrayList<FieldExtension>();\n-  protected String onTransaction;\n-  protected String customPropertiesResolverImplementationType;\n-  protected String customPropertiesResolverImplementation;\n-\n-  @JsonIgnore\n-  protected Object instance; // Can be used to set an instance of the listener directly. That instance will then always be reused.\n-\n-  public String getEvent() {\n-    return event;\n-  }\n-\n-  public void setEvent(String event) {\n-    this.event = event;\n-  }\n-\n-  public String getImplementationType() {\n-    return implementationType;\n-  }\n-\n-  public void setImplementationType(String implementationType) {\n-    this.implementationType = implementationType;\n-  }\n-\n-  public String getImplementation() {\n-    return implementation;\n-  }\n-\n-  public void setImplementation(String implementation) {\n-    this.implementation = implementation;\n-  }\n-\n-  public List<FieldExtension> getFieldExtensions() {\n-    return fieldExtensions;\n-  }\n-\n-  public void setFieldExtensions(List<FieldExtension> fieldExtensions) {\n-    this.fieldExtensions = fieldExtensions;\n-  }\n-\n-  public String getOnTransaction() {\n-    return onTransaction;\n-  }\n-\n-  public void setOnTransaction(String onTransaction) {\n-    this.onTransaction = onTransaction;\n-  }\n-\n-  public String getCustomPropertiesResolverImplementationType() {\n-    return customPropertiesResolverImplementationType;\n-  }\n-\n-  public void setCustomPropertiesResolverImplementationType(String customPropertiesResolverImplementationType) {\n-    this.customPropertiesResolverImplementationType = customPropertiesResolverImplementationType;\n-  }\n-\n-  public String getCustomPropertiesResolverImplementation() {\n-    return customPropertiesResolverImplementation;\n-  }\n-\n-  public void setCustomPropertiesResolverImplementation(String customPropertiesResolverImplementation) {\n-    this.customPropertiesResolverImplementation = customPropertiesResolverImplementation;\n-  }\n-\n-  public Object getInstance() {\n-    return instance;\n-  }\n-\n-  public void setInstance(Object instance) {\n-    this.instance = instance;\n-  }\n-\n-  public ActivitiListener clone() {\n-    ActivitiListener clone = new ActivitiListener();\n-    clone.setValues(this);\n-    return clone;\n-  }\n-\n-  public void setValues(ActivitiListener otherListener) {\n-    setEvent(otherListener.getEvent());\n-    setImplementation(otherListener.getImplementation());\n-    setImplementationType(otherListener.getImplementationType());\n-\n-    fieldExtensions = new ArrayList<FieldExtension>();\n-    if (otherListener.getFieldExtensions() != null && !otherListener.getFieldExtensions().isEmpty()) {\n-      for (FieldExtension extension : otherListener.getFieldExtensions()) {\n-        fieldExtensions.add(extension.clone());\n-      }\n-    }\n-  }\n+    protected String event;\n+    protected String implementationType;\n+    protected String implementation;\n+    protected List<FieldExtension> fieldExtensions = new ArrayList<FieldExtension>();\n+    protected String onTransaction;\n+    protected String customPropertiesResolverImplementationType;\n+    protected String customPropertiesResolverImplementation;\n+\n+    @JsonIgnore\n+    protected Object instance; // Can be used to set an instance of the listener directly. That instance will then always be reused.\n+\n+    public String getEvent() {\n+        return event;\n+    }\n+\n+    public void setEvent(String event) {\n+        this.event = event;\n+    }\n+\n+    public String getImplementationType() {\n+        return implementationType;\n+    }\n+\n+    public void setImplementationType(String implementationType) {\n+        this.implementationType = implementationType;\n+    }\n+\n+    public String getImplementation() {\n+        return implementation;\n+    }\n+\n+    public void setImplementation(String implementation) {\n+        this.implementation = implementation;\n+    }\n+\n+    public List<FieldExtension> getFieldExtensions() {\n+        return fieldExtensions;\n+    }\n+\n+    public void setFieldExtensions(List<FieldExtension> fieldExtensions) {\n+        this.fieldExtensions = fieldExtensions;\n+    }\n+\n+    public String getOnTransaction() {\n+        return onTransaction;\n+    }\n+\n+    public void setOnTransaction(String onTransaction) {\n+        this.onTransaction = onTransaction;\n+    }\n+\n+    public String getCustomPropertiesResolverImplementationType() {\n+        return customPropertiesResolverImplementationType;\n+    }\n+\n+    public void setCustomPropertiesResolverImplementationType(String customPropertiesResolverImplementationType) {\n+        this.customPropertiesResolverImplementationType = customPropertiesResolverImplementationType;\n+    }\n+\n+    public String getCustomPropertiesResolverImplementation() {\n+        return customPropertiesResolverImplementation;\n+    }\n+\n+    public void setCustomPropertiesResolverImplementation(String customPropertiesResolverImplementation) {\n+        this.customPropertiesResolverImplementation = customPropertiesResolverImplementation;\n+    }\n+\n+    public Object getInstance() {\n+        return instance;\n+    }\n+\n+    public void setInstance(Object instance) {\n+        this.instance = instance;\n+    }\n+\n+    public ActivitiListener clone() {\n+        ActivitiListener clone = new ActivitiListener();\n+        clone.setValues(this);\n+        return clone;\n+    }\n+\n+    public void setValues(ActivitiListener otherListener) {\n+        setEvent(otherListener.getEvent());\n+        setImplementation(otherListener.getImplementation());\n+        setImplementationType(otherListener.getImplementationType());\n+\n+        fieldExtensions = new ArrayList<FieldExtension>();\n+        if (otherListener.getFieldExtensions() != null && !otherListener.getFieldExtensions().isEmpty()) {\n+            for (FieldExtension extension : otherListener.getFieldExtensions()) {\n+                fieldExtensions.add(extension.clone());\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/60/ActivitiListener.java\nindex fa8e48c9e5..ab8d3f01b0 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/codebuff/60/ActivitiListener.java\n@@ -17,102 +17,100 @@ package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n \n-public class ActivitiListener extends BaseElement {\n \n-  protected String event;\n-  protected String implementationType;\n-  protected String implementation;\n-  protected List<FieldExtension> fieldExtensions = new ArrayList<FieldExtension>();\n-  protected String onTransaction;\n-  protected String customPropertiesResolverImplementationType;\n-  protected String customPropertiesResolverImplementation;\n+public class ActivitiListener extends BaseElement {\n \n-  @JsonIgnore\n-  protected Object instance; // Can be used to set an instance of the listener directly. That instance will then always be reused.\n+    protected String event;\n+    protected String implementationType;\n+    protected String implementation;\n+    protected List<FieldExtension> fieldExtensions = new ArrayList<FieldExtension>();\n+    protected String onTransaction;\n+    protected String customPropertiesResolverImplementationType;\n+    protected String customPropertiesResolverImplementation;\n \n-  public String getEvent() {\n+    @JsonIgnore protected Object instance; // Can be used to set an instance of the listener directly. That instance will then always be reused.\n+    public String getEvent() {\n     return event;\n-  }\n+    }\n \n-  public void setEvent(String event) {\n+    public void setEvent(String event) {\n     this.event = event;\n-  }\n+    }\n \n-  public String getImplementationType() {\n+    public String getImplementationType() {\n     return implementationType;\n-  }\n+    }\n \n-  public void setImplementationType(String implementationType) {\n+    public void setImplementationType(String implementationType) {\n     this.implementationType = implementationType;\n-  }\n+    }\n \n-  public String getImplementation() {\n+    public String getImplementation() {\n     return implementation;\n-  }\n+    }\n \n-  public void setImplementation(String implementation) {\n+    public void setImplementation(String implementation) {\n     this.implementation = implementation;\n-  }\n+    }\n \n-  public List<FieldExtension> getFieldExtensions() {\n+    public List<FieldExtension> getFieldExtensions() {\n     return fieldExtensions;\n-  }\n+    }\n \n-  public void setFieldExtensions(List<FieldExtension> fieldExtensions) {\n+    public void setFieldExtensions(List<FieldExtension> fieldExtensions) {\n     this.fieldExtensions = fieldExtensions;\n-  }\n+    }\n \n-  public String getOnTransaction() {\n+    public String getOnTransaction() {\n     return onTransaction;\n-  }\n+    }\n \n-  public void setOnTransaction(String onTransaction) {\n+    public void setOnTransaction(String onTransaction) {\n     this.onTransaction = onTransaction;\n-  }\n+    }\n \n-  public String getCustomPropertiesResolverImplementationType() {\n+    public String getCustomPropertiesResolverImplementationType() {\n     return customPropertiesResolverImplementationType;\n-  }\n+    }\n \n-  public void setCustomPropertiesResolverImplementationType(String customPropertiesResolverImplementationType) {\n+    public void setCustomPropertiesResolverImplementationType(String customPropertiesResolverImplementationType) {\n     this.customPropertiesResolverImplementationType = customPropertiesResolverImplementationType;\n-  }\n+    }\n \n-  public String getCustomPropertiesResolverImplementation() {\n+    public String getCustomPropertiesResolverImplementation() {\n     return customPropertiesResolverImplementation;\n-  }\n+    }\n \n-  public void setCustomPropertiesResolverImplementation(String customPropertiesResolverImplementation) {\n+    public void setCustomPropertiesResolverImplementation(String customPropertiesResolverImplementation) {\n     this.customPropertiesResolverImplementation = customPropertiesResolverImplementation;\n-  }\n+    }\n \n-  public Object getInstance() {\n+    public Object getInstance() {\n     return instance;\n-  }\n+    }\n \n-  public void setInstance(Object instance) {\n+    public void setInstance(Object instance) {\n     this.instance = instance;\n-  }\n+    }\n \n-  public ActivitiListener clone() {\n+    public ActivitiListener clone() {\n     ActivitiListener clone = new ActivitiListener();\n     clone.setValues(this);\n     return clone;\n-  }\n+    }\n \n-  public void setValues(ActivitiListener otherListener) {\n+    public void setValues(ActivitiListener otherListener) {\n     setEvent(otherListener.getEvent());\n     setImplementation(otherListener.getImplementation());\n     setImplementationType(otherListener.getImplementationType());\n-\n     fieldExtensions = new ArrayList<FieldExtension>();\n     if (otherListener.getFieldExtensions() != null && !otherListener.getFieldExtensions().isEmpty()) {\n-      for (FieldExtension extension : otherListener.getFieldExtensions()) {\n-        fieldExtensions.add(extension.clone());\n-      }\n+        for (FieldExtension extension : otherListener.getFieldExtensions()) {\n+            fieldExtensions.add(extension.clone());\n+        }\n     }\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/60/ActivitiListener.java\nindex fa8e48c9e5..e2b2bb0c64 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_random/60/ActivitiListener.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/60/ActivitiListener.java\nindex fa8e48c9e5..e2b2bb0c64 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/errored/1/60/ActivitiListener.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/Activiti-Activiti/styler_three_grams/60/ActivitiListener.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.model;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ]
}