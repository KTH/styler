{
    "error_id": "164",
    "information": {
        "errors": [
            {
                "line": "188",
                "column": "52",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    TableRowFormat tableRowFormat = (TableRowFormat)o;\n    return\n        Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n        Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/164/TableRowFormat.java\nindex 514ae40db6..9f20d45fdb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler/164/TableRowFormat.java\n@@ -185,7 +185,7 @@ public class TableRowFormat extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TableRowFormat tableRowFormat = (TableRowFormat)o;\n+    TableRowFormat tableRowFormat = (TableRowFormat) o;\n     return\n         Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n         Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/164/TableRowFormat.java\nindex 514ae40db6..0b2d8f1074 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/intellij/164/TableRowFormat.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -47,151 +50,156 @@ import io.swagger.annotations.ApiModelProperty;\n  */\n @ApiModel(description = \"Represents all formatting for a table row.\")\n public class TableRowFormat extends LinkElement {\n-    /**\n-     * Gets or sets the rule for determining the height of the table row.\n-     */\n-    @JsonAdapter(HeightRuleEnum.Adapter.class)\n-    public enum HeightRuleEnum {\n-        ATLEAST(\"AtLeast\"),\n-        EXACTLY(\"Exactly\"),\n-        AUTO(\"Auto\");\n-\n-        private String value;\n-\n-        HeightRuleEnum(String value) {\n-            this.value = value;\n-        }\n+  /**\n+   * Gets or sets the rule for determining the height of the table row.\n+   */\n+  @JsonAdapter(HeightRuleEnum.Adapter.class)\n+  public enum HeightRuleEnum {\n+    ATLEAST(\"AtLeast\"),\n+    EXACTLY(\"Exactly\"),\n+    AUTO(\"Auto\");\n \n-        public String getValue() {\n-            return value;\n-        }\n+    private String value;\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    HeightRuleEnum(String value) {\n+      this.value = value;\n+    }\n \n-        public static HeightRuleEnum fromValue(String text) {\n-            for (HeightRuleEnum b : HeightRuleEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< HeightRuleEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HeightRuleEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HeightRuleEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HeightRuleEnum.fromValue(String.valueOf(value));\n-            }\n+    public static HeightRuleEnum fromValue(String text) {\n+      for (HeightRuleEnum b : HeightRuleEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n-    @SerializedName(\"AllowBreakAcrossPages\")\n-    private Boolean allowBreakAcrossPages = null;\n+    public static class Adapter extends TypeAdapter<HeightRuleEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final HeightRuleEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+      @Override\n+      public HeightRuleEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HeightRuleEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n \n-    @SerializedName(\"HeadingFormat\")\n-    private Boolean headingFormat = null;\n+  @SerializedName(\"AllowBreakAcrossPages\")\n+  private Boolean allowBreakAcrossPages = null;\n \n-    @SerializedName(\"Height\")\n-    private Double height = null;\n+  @SerializedName(\"HeadingFormat\")\n+  private Boolean headingFormat = null;\n \n-    @SerializedName(\"HeightRule\")\n-    private HeightRuleEnum heightRule = null;\n-    public TableRowFormat allowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n-        this.allowBreakAcrossPages = allowBreakAcrossPages;\n-        return this;\n-    }\n+  @SerializedName(\"Height\")\n+  private Double height = null;\n \n-    /**\n-     * Gets or sets true if the text in a table row is allowed to split across a page break.\n-    * @return allowBreakAcrossPages\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets true if the text in a table row is allowed to split across a page break.\")\n-    public Boolean getAllowBreakAcrossPages() {\n-        return allowBreakAcrossPages;\n-    }\n+  @SerializedName(\"HeightRule\")\n+  private HeightRuleEnum heightRule = null;\n \n-    public void setAllowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n-        this.allowBreakAcrossPages = allowBreakAcrossPages;\n-    }\n+  public TableRowFormat allowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n+    this.allowBreakAcrossPages = allowBreakAcrossPages;\n+    return this;\n+  }\n \n-    public TableRowFormat headingFormat(Boolean headingFormat) {\n-        this.headingFormat = headingFormat;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets true if the text in a table row is allowed to split across a page break.\n+   *\n+   * @return allowBreakAcrossPages\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets true if the text in a table row is allowed to split across a page break.\")\n+  public Boolean getAllowBreakAcrossPages() {\n+    return allowBreakAcrossPages;\n+  }\n \n-    /**\n-     * Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\n-    * @return headingFormat\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\")\n-    public Boolean getHeadingFormat() {\n-        return headingFormat;\n-    }\n+  public void setAllowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n+    this.allowBreakAcrossPages = allowBreakAcrossPages;\n+  }\n \n-    public void setHeadingFormat(Boolean headingFormat) {\n-        this.headingFormat = headingFormat;\n-    }\n+  public TableRowFormat headingFormat(Boolean headingFormat) {\n+    this.headingFormat = headingFormat;\n+    return this;\n+  }\n \n-    public TableRowFormat height(Double height) {\n-        this.height = height;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\n+   *\n+   * @return headingFormat\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\")\n+  public Boolean getHeadingFormat() {\n+    return headingFormat;\n+  }\n \n-    /**\n-     * Gets or sets the height of the table row in points.\n-    * @return height\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the height of the table row in points.\")\n-    public Double getHeight() {\n-        return height;\n-    }\n+  public void setHeadingFormat(Boolean headingFormat) {\n+    this.headingFormat = headingFormat;\n+  }\n \n-    public void setHeight(Double height) {\n-        this.height = height;\n-    }\n+  public TableRowFormat height(Double height) {\n+    this.height = height;\n+    return this;\n+  }\n \n-    public TableRowFormat heightRule(HeightRuleEnum heightRule) {\n-        this.heightRule = heightRule;\n-        return this;\n-    }\n+  /**\n+   * Gets or sets the height of the table row in points.\n+   *\n+   * @return height\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the height of the table row in points.\")\n+  public Double getHeight() {\n+    return height;\n+  }\n \n-    /**\n-     * Gets or sets the rule for determining the height of the table row.\n-    * @return heightRule\n-    **/\n-    @ApiModelProperty(value = \"Gets or sets the rule for determining the height of the table row.\")\n-    public HeightRuleEnum getHeightRule() {\n-        return heightRule;\n-    }\n+  public void setHeight(Double height) {\n+    this.height = height;\n+  }\n \n-    public void setHeightRule(HeightRuleEnum heightRule) {\n-        this.heightRule = heightRule;\n-    }\n+  public TableRowFormat heightRule(HeightRuleEnum heightRule) {\n+    this.heightRule = heightRule;\n+    return this;\n+  }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    TableRowFormat tableRowFormat = (TableRowFormat)o;\n+  /**\n+   * Gets or sets the rule for determining the height of the table row.\n+   *\n+   * @return heightRule\n+   **/\n+  @ApiModelProperty(value = \"Gets or sets the rule for determining the height of the table row.\")\n+  public HeightRuleEnum getHeightRule() {\n+    return heightRule;\n+  }\n+\n+  public void setHeightRule(HeightRuleEnum heightRule) {\n+    this.heightRule = heightRule;\n+  }\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    TableRowFormat tableRowFormat = (TableRowFormat) o;\n     return\n         Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n-        Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n-        Objects.equals(this.height, tableRowFormat.height) &&\n-        Objects.equals(this.heightRule, tableRowFormat.heightRule) &&\n-        super.equals(o);\n+            Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n+            Objects.equals(this.height, tableRowFormat.height) &&\n+            Objects.equals(this.heightRule, tableRowFormat.heightRule) &&\n+            super.equals(o);\n   }\n \n   @Override\n",
            "diff_size": 172
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/164/TableRowFormat.java\nindex 514ae40db6..3f7bd2ccae 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/codebuff/164/TableRowFormat.java\n@@ -45,54 +45,61 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents all formatting for a table row.\n  */\n+\n+\n @ApiModel(description = \"Represents all formatting for a table row.\")\n+\n public class TableRowFormat extends LinkElement {\n     /**\n      * Gets or sets the rule for determining the height of the table row.\n      */\n     @JsonAdapter(HeightRuleEnum.Adapter.class)\n     public enum HeightRuleEnum {\n-        ATLEAST(\"AtLeast\"),\n-        EXACTLY(\"Exactly\"),\n-        AUTO(\"Auto\");\n+    ATLEAST(\"AtLeast\"),\n \n-        private String value;\n+    EXACTLY(\"Exactly\"),\n \n-        HeightRuleEnum(String value) {\n-            this.value = value;\n-        }\n+    AUTO(\"Auto\");\n+\n+    private String value;\n+\n+    HeightRuleEnum(String value) {\n+        this.value = value;\n+    }\n \n-        public String getValue() {\n-            return value;\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+                                   return String.valueOf(value);\n+    }\n+\n+    public static HeightRuleEnum fromValue(String text) {\n+        for (HeightRuleEnum b : HeightRuleEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+                                                             return b;\n+        }\n         }\n+        return null;\n+    }\n \n+    public static class Adapter extends TypeAdapter<HeightRuleEnum> {\n         @Override\n-        public String toString() {\n-            return String.valueOf(value);\n+        public void write(final JsonWriter jsonWriter, final HeightRuleEnum enumeration) throws IOException {\n+            jsonWriter.value(enumeration.getValue());\n         }\n \n-        public static HeightRuleEnum fromValue(String text) {\n-            for (HeightRuleEnum b : HeightRuleEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n \n-        public static class Adapter extends TypeAdapter< HeightRuleEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final HeightRuleEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public HeightRuleEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return HeightRuleEnum.fromValue(String.valueOf(value));\n-            }\n+        @Override\n+        public HeightRuleEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return HeightRuleEnum.fromValue(String.valueOf(value));\n         }\n     }\n+    }\n+\n \n     @SerializedName(\"AllowBreakAcrossPages\")\n     private Boolean allowBreakAcrossPages = null;\n@@ -105,102 +112,123 @@ public class TableRowFormat extends LinkElement {\n \n     @SerializedName(\"HeightRule\")\n     private HeightRuleEnum heightRule = null;\n+\n     public TableRowFormat allowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n-        this.allowBreakAcrossPages = allowBreakAcrossPages;\n-        return this;\n+    this.allowBreakAcrossPages = allowBreakAcrossPages;\n+    return this;\n     }\n \n     /**\n      * Gets or sets true if the text in a table row is allowed to split across a page break.\n     * @return allowBreakAcrossPages\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets true if the text in a table row is allowed to split across a page break.\")\n     public Boolean getAllowBreakAcrossPages() {\n-        return allowBreakAcrossPages;\n+    return allowBreakAcrossPages;\n     }\n \n+\n     public void setAllowBreakAcrossPages(Boolean allowBreakAcrossPages) {\n-        this.allowBreakAcrossPages = allowBreakAcrossPages;\n+    this.allowBreakAcrossPages = allowBreakAcrossPages;\n     }\n \n+\n     public TableRowFormat headingFormat(Boolean headingFormat) {\n-        this.headingFormat = headingFormat;\n-        return this;\n+    this.headingFormat = headingFormat;\n+    return this;\n     }\n \n     /**\n      * Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\n     * @return headingFormat\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets true if the row is repeated as a table heading on every page when the table spans more than one page.\")\n     public Boolean getHeadingFormat() {\n-        return headingFormat;\n+    return headingFormat;\n     }\n \n+\n     public void setHeadingFormat(Boolean headingFormat) {\n-        this.headingFormat = headingFormat;\n+    this.headingFormat = headingFormat;\n     }\n \n+\n     public TableRowFormat height(Double height) {\n-        this.height = height;\n-        return this;\n+    this.height = height;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the height of the table row in points.\n     * @return height\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the height of the table row in points.\")\n     public Double getHeight() {\n-        return height;\n+    return height;\n     }\n \n+\n     public void setHeight(Double height) {\n-        this.height = height;\n+    this.height = height;\n     }\n \n+\n     public TableRowFormat heightRule(HeightRuleEnum heightRule) {\n-        this.heightRule = heightRule;\n-        return this;\n+    this.heightRule = heightRule;\n+    return this;\n     }\n \n     /**\n      * Gets or sets the rule for determining the height of the table row.\n     * @return heightRule\n     **/\n+\n+\n     @ApiModelProperty(value = \"Gets or sets the rule for determining the height of the table row.\")\n     public HeightRuleEnum getHeightRule() {\n-        return heightRule;\n+    return heightRule;\n     }\n \n+\n     public void setHeightRule(HeightRuleEnum heightRule) {\n-        this.heightRule = heightRule;\n+    this.heightRule = heightRule;\n     }\n \n+\n     @Override\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n-            return true;\n+        return true;\n         }\n+\n+\n         if (o == null || getClass() != o.getClass()) {\n-            return false;\n+        return false;\n         }\n-    TableRowFormat tableRowFormat = (TableRowFormat)o;\n-    return\n-        Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n+\n+        TableRowFormat tableRowFormat = (TableRowFormat) o;\n+        return Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n         Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n         Objects.equals(this.height, tableRowFormat.height) &&\n-        Objects.equals(this.heightRule, tableRowFormat.heightRule) &&\n-        super.equals(o);\n-  }\n+            Objects.equals(this.heightRule, tableRowFormat.heightRule) &&\n+            super.equals(o);\n+    }\n+\n \n-  @Override\n-  public int hashCode() {\n+    @Override\n+    public int hashCode() {\n     return Objects.hash(allowBreakAcrossPages, headingFormat, height, heightRule, super.hashCode());\n-  }\n+    }\n+\n \n-  @Override\n-  public String toString() {\n+    @Override\n+    public String toString() {\n     StringBuilder sb = new StringBuilder();\n     sb.append(\"class TableRowFormat {\\n\");\n     sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n@@ -210,16 +238,19 @@ public class TableRowFormat extends LinkElement {\n     sb.append(\"    heightRule: \").append(toIndentedString(heightRule)).append(\"\\n\");\n     sb.append(\"}\");\n     return sb.toString();\n-  }\n+    }\n \n   /**\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n-  private String toIndentedString(java.lang.Object o) {\n+\n+\n+    private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n-      return \"null\";\n+        return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n-}\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 112
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/164/TableRowFormat.java\nindex 514ae40db6..9f20d45fdb 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_random/164/TableRowFormat.java\n@@ -185,7 +185,7 @@ public class TableRowFormat extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TableRowFormat tableRowFormat = (TableRowFormat)o;\n+    TableRowFormat tableRowFormat = (TableRowFormat) o;\n     return\n         Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n         Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/164/TableRowFormat.java\nindex 514ae40db6..888c3c28fa 100644\n--- a/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/errored/1/164/TableRowFormat.java\n+++ b/home/thomas/mnt/fernanda/styler-test2/python/./experiments/projects/../results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/164/TableRowFormat.java\n@@ -185,7 +185,9 @@ public class TableRowFormat extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    TableRowFormat tableRowFormat = (TableRowFormat)o;\n+    TableRowFormat tableRowFormat = (TableRowFormat\n+\n+    ) o;\n     return\n         Objects.equals(this.allowBreakAcrossPages, tableRowFormat.allowBreakAcrossPages) &&\n         Objects.equals(this.headingFormat, tableRowFormat.headingFormat) &&\n",
            "diff_size": 3
        }
    ]
}